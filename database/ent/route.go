// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jianbo-zh/jydata/database/ent/route"
	"github.com/jianbo-zh/jydata/database/schema/types"
)

// Route is the model entity for the Route schema.
type Route struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// DeleteTime holds the value of the "delete_time" field.
	DeleteTime time.Time `json:"delete_time,omitempty"`
	// 景区ID
	ScenicAreaID int `json:"scenic_area_id,omitempty"`
	// 线路类型（1-接驳线路）
	Type int `json:"type,omitempty"`
	// 线路名称
	Name string `json:"name,omitempty"`
	// poi点列表
	PoiIds []int `json:"poi_ids,omitempty"`
	// 行驶线路
	Path []types.Coord `json:"path,omitempty"`
	// 线路备注
	Remark string `json:"remark,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime   time.Time `json:"update_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Route) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case route.FieldPoiIds, route.FieldPath:
			values[i] = new([]byte)
		case route.FieldID, route.FieldScenicAreaID, route.FieldType:
			values[i] = new(sql.NullInt64)
		case route.FieldName, route.FieldRemark:
			values[i] = new(sql.NullString)
		case route.FieldDeleteTime, route.FieldCreateTime, route.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Route fields.
func (r *Route) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case route.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case route.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				r.DeleteTime = value.Time
			}
		case route.FieldScenicAreaID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field scenic_area_id", values[i])
			} else if value.Valid {
				r.ScenicAreaID = int(value.Int64)
			}
		case route.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				r.Type = int(value.Int64)
			}
		case route.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				r.Name = value.String
			}
		case route.FieldPoiIds:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field poi_ids", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &r.PoiIds); err != nil {
					return fmt.Errorf("unmarshal field poi_ids: %w", err)
				}
			}
		case route.FieldPath:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &r.Path); err != nil {
					return fmt.Errorf("unmarshal field path: %w", err)
				}
			}
		case route.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				r.Remark = value.String
			}
		case route.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				r.CreateTime = value.Time
			}
		case route.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				r.UpdateTime = value.Time
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Route.
// This includes values selected through modifiers, order, etc.
func (r *Route) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// Update returns a builder for updating this Route.
// Note that you need to call Route.Unwrap() before calling this method if this Route
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Route) Update() *RouteUpdateOne {
	return NewRouteClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Route entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Route) Unwrap() *Route {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Route is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Route) String() string {
	var builder strings.Builder
	builder.WriteString("Route(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("delete_time=")
	builder.WriteString(r.DeleteTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("scenic_area_id=")
	builder.WriteString(fmt.Sprintf("%v", r.ScenicAreaID))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", r.Type))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(r.Name)
	builder.WriteString(", ")
	builder.WriteString("poi_ids=")
	builder.WriteString(fmt.Sprintf("%v", r.PoiIds))
	builder.WriteString(", ")
	builder.WriteString("path=")
	builder.WriteString(fmt.Sprintf("%v", r.Path))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(r.Remark)
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(r.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(r.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Routes is a parsable slice of Route.
type Routes []*Route
