// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"github.com/jianbo-zh/jydata/database/ent/schetask"
	"github.com/jianbo-zh/jydata/database/ent/schetaskevent"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScheTaskEventUpdate is the builder for updating ScheTaskEvent entities.
type ScheTaskEventUpdate struct {
	config
	hooks    []Hook
	mutation *ScheTaskEventMutation
}

// Where appends a list predicates to the ScheTaskEventUpdate builder.
func (steu *ScheTaskEventUpdate) Where(ps ...predicate.ScheTaskEvent) *ScheTaskEventUpdate {
	steu.mutation.Where(ps...)
	return steu
}

// SetScheTaskID sets the "sche_task_id" field.
func (steu *ScheTaskEventUpdate) SetScheTaskID(i int) *ScheTaskEventUpdate {
	steu.mutation.SetScheTaskID(i)
	return steu
}

// SetNillableScheTaskID sets the "sche_task_id" field if the given value is not nil.
func (steu *ScheTaskEventUpdate) SetNillableScheTaskID(i *int) *ScheTaskEventUpdate {
	if i != nil {
		steu.SetScheTaskID(*i)
	}
	return steu
}

// SetState sets the "state" field.
func (steu *ScheTaskEventUpdate) SetState(i int) *ScheTaskEventUpdate {
	steu.mutation.ResetState()
	steu.mutation.SetState(i)
	return steu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (steu *ScheTaskEventUpdate) SetNillableState(i *int) *ScheTaskEventUpdate {
	if i != nil {
		steu.SetState(*i)
	}
	return steu
}

// AddState adds i to the "state" field.
func (steu *ScheTaskEventUpdate) AddState(i int) *ScheTaskEventUpdate {
	steu.mutation.AddState(i)
	return steu
}

// SetAbnormalState sets the "abnormal_state" field.
func (steu *ScheTaskEventUpdate) SetAbnormalState(i int) *ScheTaskEventUpdate {
	steu.mutation.ResetAbnormalState()
	steu.mutation.SetAbnormalState(i)
	return steu
}

// SetNillableAbnormalState sets the "abnormal_state" field if the given value is not nil.
func (steu *ScheTaskEventUpdate) SetNillableAbnormalState(i *int) *ScheTaskEventUpdate {
	if i != nil {
		steu.SetAbnormalState(*i)
	}
	return steu
}

// AddAbnormalState adds i to the "abnormal_state" field.
func (steu *ScheTaskEventUpdate) AddAbnormalState(i int) *ScheTaskEventUpdate {
	steu.mutation.AddAbnormalState(i)
	return steu
}

// SetRemark sets the "remark" field.
func (steu *ScheTaskEventUpdate) SetRemark(s string) *ScheTaskEventUpdate {
	steu.mutation.SetRemark(s)
	return steu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (steu *ScheTaskEventUpdate) SetNillableRemark(s *string) *ScheTaskEventUpdate {
	if s != nil {
		steu.SetRemark(*s)
	}
	return steu
}

// SetScheTask sets the "sche_task" edge to the ScheTask entity.
func (steu *ScheTaskEventUpdate) SetScheTask(s *ScheTask) *ScheTaskEventUpdate {
	return steu.SetScheTaskID(s.ID)
}

// Mutation returns the ScheTaskEventMutation object of the builder.
func (steu *ScheTaskEventUpdate) Mutation() *ScheTaskEventMutation {
	return steu.mutation
}

// ClearScheTask clears the "sche_task" edge to the ScheTask entity.
func (steu *ScheTaskEventUpdate) ClearScheTask() *ScheTaskEventUpdate {
	steu.mutation.ClearScheTask()
	return steu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (steu *ScheTaskEventUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, steu.sqlSave, steu.mutation, steu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (steu *ScheTaskEventUpdate) SaveX(ctx context.Context) int {
	affected, err := steu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (steu *ScheTaskEventUpdate) Exec(ctx context.Context) error {
	_, err := steu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (steu *ScheTaskEventUpdate) ExecX(ctx context.Context) {
	if err := steu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (steu *ScheTaskEventUpdate) check() error {
	if steu.mutation.ScheTaskCleared() && len(steu.mutation.ScheTaskIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ScheTaskEvent.sche_task"`)
	}
	return nil
}

func (steu *ScheTaskEventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := steu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(schetaskevent.Table, schetaskevent.Columns, sqlgraph.NewFieldSpec(schetaskevent.FieldID, field.TypeInt))
	if ps := steu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := steu.mutation.State(); ok {
		_spec.SetField(schetaskevent.FieldState, field.TypeInt, value)
	}
	if value, ok := steu.mutation.AddedState(); ok {
		_spec.AddField(schetaskevent.FieldState, field.TypeInt, value)
	}
	if value, ok := steu.mutation.AbnormalState(); ok {
		_spec.SetField(schetaskevent.FieldAbnormalState, field.TypeInt, value)
	}
	if value, ok := steu.mutation.AddedAbnormalState(); ok {
		_spec.AddField(schetaskevent.FieldAbnormalState, field.TypeInt, value)
	}
	if value, ok := steu.mutation.Remark(); ok {
		_spec.SetField(schetaskevent.FieldRemark, field.TypeString, value)
	}
	if steu.mutation.ScheTaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   schetaskevent.ScheTaskTable,
			Columns: []string{schetaskevent.ScheTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schetask.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := steu.mutation.ScheTaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   schetaskevent.ScheTaskTable,
			Columns: []string{schetaskevent.ScheTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schetask.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, steu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{schetaskevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	steu.mutation.done = true
	return n, nil
}

// ScheTaskEventUpdateOne is the builder for updating a single ScheTaskEvent entity.
type ScheTaskEventUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ScheTaskEventMutation
}

// SetScheTaskID sets the "sche_task_id" field.
func (steuo *ScheTaskEventUpdateOne) SetScheTaskID(i int) *ScheTaskEventUpdateOne {
	steuo.mutation.SetScheTaskID(i)
	return steuo
}

// SetNillableScheTaskID sets the "sche_task_id" field if the given value is not nil.
func (steuo *ScheTaskEventUpdateOne) SetNillableScheTaskID(i *int) *ScheTaskEventUpdateOne {
	if i != nil {
		steuo.SetScheTaskID(*i)
	}
	return steuo
}

// SetState sets the "state" field.
func (steuo *ScheTaskEventUpdateOne) SetState(i int) *ScheTaskEventUpdateOne {
	steuo.mutation.ResetState()
	steuo.mutation.SetState(i)
	return steuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (steuo *ScheTaskEventUpdateOne) SetNillableState(i *int) *ScheTaskEventUpdateOne {
	if i != nil {
		steuo.SetState(*i)
	}
	return steuo
}

// AddState adds i to the "state" field.
func (steuo *ScheTaskEventUpdateOne) AddState(i int) *ScheTaskEventUpdateOne {
	steuo.mutation.AddState(i)
	return steuo
}

// SetAbnormalState sets the "abnormal_state" field.
func (steuo *ScheTaskEventUpdateOne) SetAbnormalState(i int) *ScheTaskEventUpdateOne {
	steuo.mutation.ResetAbnormalState()
	steuo.mutation.SetAbnormalState(i)
	return steuo
}

// SetNillableAbnormalState sets the "abnormal_state" field if the given value is not nil.
func (steuo *ScheTaskEventUpdateOne) SetNillableAbnormalState(i *int) *ScheTaskEventUpdateOne {
	if i != nil {
		steuo.SetAbnormalState(*i)
	}
	return steuo
}

// AddAbnormalState adds i to the "abnormal_state" field.
func (steuo *ScheTaskEventUpdateOne) AddAbnormalState(i int) *ScheTaskEventUpdateOne {
	steuo.mutation.AddAbnormalState(i)
	return steuo
}

// SetRemark sets the "remark" field.
func (steuo *ScheTaskEventUpdateOne) SetRemark(s string) *ScheTaskEventUpdateOne {
	steuo.mutation.SetRemark(s)
	return steuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (steuo *ScheTaskEventUpdateOne) SetNillableRemark(s *string) *ScheTaskEventUpdateOne {
	if s != nil {
		steuo.SetRemark(*s)
	}
	return steuo
}

// SetScheTask sets the "sche_task" edge to the ScheTask entity.
func (steuo *ScheTaskEventUpdateOne) SetScheTask(s *ScheTask) *ScheTaskEventUpdateOne {
	return steuo.SetScheTaskID(s.ID)
}

// Mutation returns the ScheTaskEventMutation object of the builder.
func (steuo *ScheTaskEventUpdateOne) Mutation() *ScheTaskEventMutation {
	return steuo.mutation
}

// ClearScheTask clears the "sche_task" edge to the ScheTask entity.
func (steuo *ScheTaskEventUpdateOne) ClearScheTask() *ScheTaskEventUpdateOne {
	steuo.mutation.ClearScheTask()
	return steuo
}

// Where appends a list predicates to the ScheTaskEventUpdate builder.
func (steuo *ScheTaskEventUpdateOne) Where(ps ...predicate.ScheTaskEvent) *ScheTaskEventUpdateOne {
	steuo.mutation.Where(ps...)
	return steuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (steuo *ScheTaskEventUpdateOne) Select(field string, fields ...string) *ScheTaskEventUpdateOne {
	steuo.fields = append([]string{field}, fields...)
	return steuo
}

// Save executes the query and returns the updated ScheTaskEvent entity.
func (steuo *ScheTaskEventUpdateOne) Save(ctx context.Context) (*ScheTaskEvent, error) {
	return withHooks(ctx, steuo.sqlSave, steuo.mutation, steuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (steuo *ScheTaskEventUpdateOne) SaveX(ctx context.Context) *ScheTaskEvent {
	node, err := steuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (steuo *ScheTaskEventUpdateOne) Exec(ctx context.Context) error {
	_, err := steuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (steuo *ScheTaskEventUpdateOne) ExecX(ctx context.Context) {
	if err := steuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (steuo *ScheTaskEventUpdateOne) check() error {
	if steuo.mutation.ScheTaskCleared() && len(steuo.mutation.ScheTaskIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ScheTaskEvent.sche_task"`)
	}
	return nil
}

func (steuo *ScheTaskEventUpdateOne) sqlSave(ctx context.Context) (_node *ScheTaskEvent, err error) {
	if err := steuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(schetaskevent.Table, schetaskevent.Columns, sqlgraph.NewFieldSpec(schetaskevent.FieldID, field.TypeInt))
	id, ok := steuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ScheTaskEvent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := steuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, schetaskevent.FieldID)
		for _, f := range fields {
			if !schetaskevent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != schetaskevent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := steuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := steuo.mutation.State(); ok {
		_spec.SetField(schetaskevent.FieldState, field.TypeInt, value)
	}
	if value, ok := steuo.mutation.AddedState(); ok {
		_spec.AddField(schetaskevent.FieldState, field.TypeInt, value)
	}
	if value, ok := steuo.mutation.AbnormalState(); ok {
		_spec.SetField(schetaskevent.FieldAbnormalState, field.TypeInt, value)
	}
	if value, ok := steuo.mutation.AddedAbnormalState(); ok {
		_spec.AddField(schetaskevent.FieldAbnormalState, field.TypeInt, value)
	}
	if value, ok := steuo.mutation.Remark(); ok {
		_spec.SetField(schetaskevent.FieldRemark, field.TypeString, value)
	}
	if steuo.mutation.ScheTaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   schetaskevent.ScheTaskTable,
			Columns: []string{schetaskevent.ScheTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schetask.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := steuo.mutation.ScheTaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   schetaskevent.ScheTaskTable,
			Columns: []string{schetaskevent.ScheTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schetask.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ScheTaskEvent{config: steuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, steuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{schetaskevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	steuo.mutation.done = true
	return _node, nil
}
