// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/statsdaily"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StatsDailyCreate is the builder for creating a StatsDaily entity.
type StatsDailyCreate struct {
	config
	mutation *StatsDailyMutation
	hooks    []Hook
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (sdc *StatsDailyCreate) SetScenicAreaID(i int) *StatsDailyCreate {
	sdc.mutation.SetScenicAreaID(i)
	return sdc
}

// SetY sets the "y" field.
func (sdc *StatsDailyCreate) SetY(s string) *StatsDailyCreate {
	sdc.mutation.SetY(s)
	return sdc
}

// SetYm sets the "ym" field.
func (sdc *StatsDailyCreate) SetYm(s string) *StatsDailyCreate {
	sdc.mutation.SetYm(s)
	return sdc
}

// SetYmd sets the "ymd" field.
func (sdc *StatsDailyCreate) SetYmd(s string) *StatsDailyCreate {
	sdc.mutation.SetYmd(s)
	return sdc
}

// SetOrderAmount sets the "order_amount" field.
func (sdc *StatsDailyCreate) SetOrderAmount(i int) *StatsDailyCreate {
	sdc.mutation.SetOrderAmount(i)
	return sdc
}

// SetOrderCount sets the "order_count" field.
func (sdc *StatsDailyCreate) SetOrderCount(i int) *StatsDailyCreate {
	sdc.mutation.SetOrderCount(i)
	return sdc
}

// SetOrderDuration sets the "order_duration" field.
func (sdc *StatsDailyCreate) SetOrderDuration(i int) *StatsDailyCreate {
	sdc.mutation.SetOrderDuration(i)
	return sdc
}

// SetOrderDistance sets the "order_distance" field.
func (sdc *StatsDailyCreate) SetOrderDistance(i int) *StatsDailyCreate {
	sdc.mutation.SetOrderDistance(i)
	return sdc
}

// SetRegisterUserCount sets the "register_user_count" field.
func (sdc *StatsDailyCreate) SetRegisterUserCount(i int) *StatsDailyCreate {
	sdc.mutation.SetRegisterUserCount(i)
	return sdc
}

// SetOrderUserCount sets the "order_user_count" field.
func (sdc *StatsDailyCreate) SetOrderUserCount(i int) *StatsDailyCreate {
	sdc.mutation.SetOrderUserCount(i)
	return sdc
}

// SetOperationCarCount sets the "operation_car_count" field.
func (sdc *StatsDailyCreate) SetOperationCarCount(i int) *StatsDailyCreate {
	sdc.mutation.SetOperationCarCount(i)
	return sdc
}

// SetOperationCarDuration sets the "operation_car_duration" field.
func (sdc *StatsDailyCreate) SetOperationCarDuration(i int) *StatsDailyCreate {
	sdc.mutation.SetOperationCarDuration(i)
	return sdc
}

// SetNillableOperationCarDuration sets the "operation_car_duration" field if the given value is not nil.
func (sdc *StatsDailyCreate) SetNillableOperationCarDuration(i *int) *StatsDailyCreate {
	if i != nil {
		sdc.SetOperationCarDuration(*i)
	}
	return sdc
}

// SetCreateTime sets the "create_time" field.
func (sdc *StatsDailyCreate) SetCreateTime(t time.Time) *StatsDailyCreate {
	sdc.mutation.SetCreateTime(t)
	return sdc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (sdc *StatsDailyCreate) SetNillableCreateTime(t *time.Time) *StatsDailyCreate {
	if t != nil {
		sdc.SetCreateTime(*t)
	}
	return sdc
}

// SetID sets the "id" field.
func (sdc *StatsDailyCreate) SetID(i int) *StatsDailyCreate {
	sdc.mutation.SetID(i)
	return sdc
}

// Mutation returns the StatsDailyMutation object of the builder.
func (sdc *StatsDailyCreate) Mutation() *StatsDailyMutation {
	return sdc.mutation
}

// Save creates the StatsDaily in the database.
func (sdc *StatsDailyCreate) Save(ctx context.Context) (*StatsDaily, error) {
	sdc.defaults()
	return withHooks(ctx, sdc.sqlSave, sdc.mutation, sdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sdc *StatsDailyCreate) SaveX(ctx context.Context) *StatsDaily {
	v, err := sdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sdc *StatsDailyCreate) Exec(ctx context.Context) error {
	_, err := sdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdc *StatsDailyCreate) ExecX(ctx context.Context) {
	if err := sdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sdc *StatsDailyCreate) defaults() {
	if _, ok := sdc.mutation.OperationCarDuration(); !ok {
		v := statsdaily.DefaultOperationCarDuration
		sdc.mutation.SetOperationCarDuration(v)
	}
	if _, ok := sdc.mutation.CreateTime(); !ok {
		v := statsdaily.DefaultCreateTime()
		sdc.mutation.SetCreateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sdc *StatsDailyCreate) check() error {
	if _, ok := sdc.mutation.ScenicAreaID(); !ok {
		return &ValidationError{Name: "scenic_area_id", err: errors.New(`ent: missing required field "StatsDaily.scenic_area_id"`)}
	}
	if _, ok := sdc.mutation.Y(); !ok {
		return &ValidationError{Name: "y", err: errors.New(`ent: missing required field "StatsDaily.y"`)}
	}
	if _, ok := sdc.mutation.Ym(); !ok {
		return &ValidationError{Name: "ym", err: errors.New(`ent: missing required field "StatsDaily.ym"`)}
	}
	if _, ok := sdc.mutation.Ymd(); !ok {
		return &ValidationError{Name: "ymd", err: errors.New(`ent: missing required field "StatsDaily.ymd"`)}
	}
	if _, ok := sdc.mutation.OrderAmount(); !ok {
		return &ValidationError{Name: "order_amount", err: errors.New(`ent: missing required field "StatsDaily.order_amount"`)}
	}
	if _, ok := sdc.mutation.OrderCount(); !ok {
		return &ValidationError{Name: "order_count", err: errors.New(`ent: missing required field "StatsDaily.order_count"`)}
	}
	if _, ok := sdc.mutation.OrderDuration(); !ok {
		return &ValidationError{Name: "order_duration", err: errors.New(`ent: missing required field "StatsDaily.order_duration"`)}
	}
	if _, ok := sdc.mutation.OrderDistance(); !ok {
		return &ValidationError{Name: "order_distance", err: errors.New(`ent: missing required field "StatsDaily.order_distance"`)}
	}
	if _, ok := sdc.mutation.RegisterUserCount(); !ok {
		return &ValidationError{Name: "register_user_count", err: errors.New(`ent: missing required field "StatsDaily.register_user_count"`)}
	}
	if _, ok := sdc.mutation.OrderUserCount(); !ok {
		return &ValidationError{Name: "order_user_count", err: errors.New(`ent: missing required field "StatsDaily.order_user_count"`)}
	}
	if _, ok := sdc.mutation.OperationCarCount(); !ok {
		return &ValidationError{Name: "operation_car_count", err: errors.New(`ent: missing required field "StatsDaily.operation_car_count"`)}
	}
	if _, ok := sdc.mutation.OperationCarDuration(); !ok {
		return &ValidationError{Name: "operation_car_duration", err: errors.New(`ent: missing required field "StatsDaily.operation_car_duration"`)}
	}
	if _, ok := sdc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "StatsDaily.create_time"`)}
	}
	return nil
}

func (sdc *StatsDailyCreate) sqlSave(ctx context.Context) (*StatsDaily, error) {
	if err := sdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	sdc.mutation.id = &_node.ID
	sdc.mutation.done = true
	return _node, nil
}

func (sdc *StatsDailyCreate) createSpec() (*StatsDaily, *sqlgraph.CreateSpec) {
	var (
		_node = &StatsDaily{config: sdc.config}
		_spec = sqlgraph.NewCreateSpec(statsdaily.Table, sqlgraph.NewFieldSpec(statsdaily.FieldID, field.TypeInt))
	)
	if id, ok := sdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sdc.mutation.ScenicAreaID(); ok {
		_spec.SetField(statsdaily.FieldScenicAreaID, field.TypeInt, value)
		_node.ScenicAreaID = value
	}
	if value, ok := sdc.mutation.Y(); ok {
		_spec.SetField(statsdaily.FieldY, field.TypeString, value)
		_node.Y = value
	}
	if value, ok := sdc.mutation.Ym(); ok {
		_spec.SetField(statsdaily.FieldYm, field.TypeString, value)
		_node.Ym = value
	}
	if value, ok := sdc.mutation.Ymd(); ok {
		_spec.SetField(statsdaily.FieldYmd, field.TypeString, value)
		_node.Ymd = value
	}
	if value, ok := sdc.mutation.OrderAmount(); ok {
		_spec.SetField(statsdaily.FieldOrderAmount, field.TypeInt, value)
		_node.OrderAmount = value
	}
	if value, ok := sdc.mutation.OrderCount(); ok {
		_spec.SetField(statsdaily.FieldOrderCount, field.TypeInt, value)
		_node.OrderCount = value
	}
	if value, ok := sdc.mutation.OrderDuration(); ok {
		_spec.SetField(statsdaily.FieldOrderDuration, field.TypeInt, value)
		_node.OrderDuration = value
	}
	if value, ok := sdc.mutation.OrderDistance(); ok {
		_spec.SetField(statsdaily.FieldOrderDistance, field.TypeInt, value)
		_node.OrderDistance = value
	}
	if value, ok := sdc.mutation.RegisterUserCount(); ok {
		_spec.SetField(statsdaily.FieldRegisterUserCount, field.TypeInt, value)
		_node.RegisterUserCount = value
	}
	if value, ok := sdc.mutation.OrderUserCount(); ok {
		_spec.SetField(statsdaily.FieldOrderUserCount, field.TypeInt, value)
		_node.OrderUserCount = value
	}
	if value, ok := sdc.mutation.OperationCarCount(); ok {
		_spec.SetField(statsdaily.FieldOperationCarCount, field.TypeInt, value)
		_node.OperationCarCount = value
	}
	if value, ok := sdc.mutation.OperationCarDuration(); ok {
		_spec.SetField(statsdaily.FieldOperationCarDuration, field.TypeInt, value)
		_node.OperationCarDuration = value
	}
	if value, ok := sdc.mutation.CreateTime(); ok {
		_spec.SetField(statsdaily.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	return _node, _spec
}

// StatsDailyCreateBulk is the builder for creating many StatsDaily entities in bulk.
type StatsDailyCreateBulk struct {
	config
	err      error
	builders []*StatsDailyCreate
}

// Save creates the StatsDaily entities in the database.
func (sdcb *StatsDailyCreateBulk) Save(ctx context.Context) ([]*StatsDaily, error) {
	if sdcb.err != nil {
		return nil, sdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sdcb.builders))
	nodes := make([]*StatsDaily, len(sdcb.builders))
	mutators := make([]Mutator, len(sdcb.builders))
	for i := range sdcb.builders {
		func(i int, root context.Context) {
			builder := sdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StatsDailyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sdcb *StatsDailyCreateBulk) SaveX(ctx context.Context) []*StatsDaily {
	v, err := sdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sdcb *StatsDailyCreateBulk) Exec(ctx context.Context) error {
	_, err := sdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdcb *StatsDailyCreateBulk) ExecX(ctx context.Context) {
	if err := sdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
