// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/systemlog"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SystemLog is the model entity for the SystemLog schema.
type SystemLog struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// 日志时间
	Timestamp int `json:"timestamp,omitempty"`
	// 操作类型
	Action string `json:"action,omitempty"`
	// 用户
	User string `json:"user,omitempty"`
	// 景区
	ScenicArea string `json:"scenic_area,omitempty"`
	// 来源IP
	SourceIP string `json:"source_ip,omitempty"`
	// 登录端类型
	LoginType systemlog.LoginType `json:"login_type,omitempty"`
	// 日志内容
	Content string `json:"content,omitempty"`
	// 状态
	Status systemlog.Status `json:"status,omitempty"`
	// 备注
	Remarks string `json:"remarks,omitempty"`
	// 创建时间
	CreateTime   time.Time `json:"create_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SystemLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case systemlog.FieldID, systemlog.FieldTimestamp:
			values[i] = new(sql.NullInt64)
		case systemlog.FieldAction, systemlog.FieldUser, systemlog.FieldScenicArea, systemlog.FieldSourceIP, systemlog.FieldLoginType, systemlog.FieldContent, systemlog.FieldStatus, systemlog.FieldRemarks:
			values[i] = new(sql.NullString)
		case systemlog.FieldCreateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SystemLog fields.
func (sl *SystemLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case systemlog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sl.ID = uint64(value.Int64)
		case systemlog.FieldTimestamp:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				sl.Timestamp = int(value.Int64)
			}
		case systemlog.FieldAction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action", values[i])
			} else if value.Valid {
				sl.Action = value.String
			}
		case systemlog.FieldUser:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user", values[i])
			} else if value.Valid {
				sl.User = value.String
			}
		case systemlog.FieldScenicArea:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scenic_area", values[i])
			} else if value.Valid {
				sl.ScenicArea = value.String
			}
		case systemlog.FieldSourceIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source_ip", values[i])
			} else if value.Valid {
				sl.SourceIP = value.String
			}
		case systemlog.FieldLoginType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field login_type", values[i])
			} else if value.Valid {
				sl.LoginType = systemlog.LoginType(value.String)
			}
		case systemlog.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				sl.Content = value.String
			}
		case systemlog.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				sl.Status = systemlog.Status(value.String)
			}
		case systemlog.FieldRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remarks", values[i])
			} else if value.Valid {
				sl.Remarks = value.String
			}
		case systemlog.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				sl.CreateTime = value.Time
			}
		default:
			sl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SystemLog.
// This includes values selected through modifiers, order, etc.
func (sl *SystemLog) Value(name string) (ent.Value, error) {
	return sl.selectValues.Get(name)
}

// Update returns a builder for updating this SystemLog.
// Note that you need to call SystemLog.Unwrap() before calling this method if this SystemLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (sl *SystemLog) Update() *SystemLogUpdateOne {
	return NewSystemLogClient(sl.config).UpdateOne(sl)
}

// Unwrap unwraps the SystemLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sl *SystemLog) Unwrap() *SystemLog {
	_tx, ok := sl.config.driver.(*txDriver)
	if !ok {
		panic("ent: SystemLog is not a transactional entity")
	}
	sl.config.driver = _tx.drv
	return sl
}

// String implements the fmt.Stringer.
func (sl *SystemLog) String() string {
	var builder strings.Builder
	builder.WriteString("SystemLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sl.ID))
	builder.WriteString("timestamp=")
	builder.WriteString(fmt.Sprintf("%v", sl.Timestamp))
	builder.WriteString(", ")
	builder.WriteString("action=")
	builder.WriteString(sl.Action)
	builder.WriteString(", ")
	builder.WriteString("user=")
	builder.WriteString(sl.User)
	builder.WriteString(", ")
	builder.WriteString("scenic_area=")
	builder.WriteString(sl.ScenicArea)
	builder.WriteString(", ")
	builder.WriteString("source_ip=")
	builder.WriteString(sl.SourceIP)
	builder.WriteString(", ")
	builder.WriteString("login_type=")
	builder.WriteString(fmt.Sprintf("%v", sl.LoginType))
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(sl.Content)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", sl.Status))
	builder.WriteString(", ")
	builder.WriteString("remarks=")
	builder.WriteString(sl.Remarks)
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(sl.CreateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SystemLogs is a parsable slice of SystemLog.
type SystemLogs []*SystemLog
