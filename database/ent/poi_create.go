// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/poi"
	"github.com/jianbo-zh/jydata/database/ent/scenicarea"
)

// PoiCreate is the builder for creating a Poi entity.
type PoiCreate struct {
	config
	mutation *PoiMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (pc *PoiCreate) SetName(s string) *PoiCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetAlias sets the "alias" field.
func (pc *PoiCreate) SetAlias(s string) *PoiCreate {
	pc.mutation.SetAlias(s)
	return pc
}

// SetNillableAlias sets the "alias" field if the given value is not nil.
func (pc *PoiCreate) SetNillableAlias(s *string) *PoiCreate {
	if s != nil {
		pc.SetAlias(*s)
	}
	return pc
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (pc *PoiCreate) SetScenicAreaID(i int) *PoiCreate {
	pc.mutation.SetScenicAreaID(i)
	return pc
}

// SetType sets the "type" field.
func (pc *PoiCreate) SetType(i int) *PoiCreate {
	pc.mutation.SetType(i)
	return pc
}

// SetWgsLon sets the "wgs_lon" field.
func (pc *PoiCreate) SetWgsLon(f float64) *PoiCreate {
	pc.mutation.SetWgsLon(f)
	return pc
}

// SetNillableWgsLon sets the "wgs_lon" field if the given value is not nil.
func (pc *PoiCreate) SetNillableWgsLon(f *float64) *PoiCreate {
	if f != nil {
		pc.SetWgsLon(*f)
	}
	return pc
}

// SetWgsLat sets the "wgs_lat" field.
func (pc *PoiCreate) SetWgsLat(f float64) *PoiCreate {
	pc.mutation.SetWgsLat(f)
	return pc
}

// SetNillableWgsLat sets the "wgs_lat" field if the given value is not nil.
func (pc *PoiCreate) SetNillableWgsLat(f *float64) *PoiCreate {
	if f != nil {
		pc.SetWgsLat(*f)
	}
	return pc
}

// SetGcjLon sets the "gcj_lon" field.
func (pc *PoiCreate) SetGcjLon(f float64) *PoiCreate {
	pc.mutation.SetGcjLon(f)
	return pc
}

// SetNillableGcjLon sets the "gcj_lon" field if the given value is not nil.
func (pc *PoiCreate) SetNillableGcjLon(f *float64) *PoiCreate {
	if f != nil {
		pc.SetGcjLon(*f)
	}
	return pc
}

// SetGcjLat sets the "gcj_lat" field.
func (pc *PoiCreate) SetGcjLat(f float64) *PoiCreate {
	pc.mutation.SetGcjLat(f)
	return pc
}

// SetNillableGcjLat sets the "gcj_lat" field if the given value is not nil.
func (pc *PoiCreate) SetNillableGcjLat(f *float64) *PoiCreate {
	if f != nil {
		pc.SetGcjLat(*f)
	}
	return pc
}

// SetBdLon sets the "bd_lon" field.
func (pc *PoiCreate) SetBdLon(f float64) *PoiCreate {
	pc.mutation.SetBdLon(f)
	return pc
}

// SetNillableBdLon sets the "bd_lon" field if the given value is not nil.
func (pc *PoiCreate) SetNillableBdLon(f *float64) *PoiCreate {
	if f != nil {
		pc.SetBdLon(*f)
	}
	return pc
}

// SetBdLat sets the "bd_lat" field.
func (pc *PoiCreate) SetBdLat(f float64) *PoiCreate {
	pc.mutation.SetBdLat(f)
	return pc
}

// SetNillableBdLat sets the "bd_lat" field if the given value is not nil.
func (pc *PoiCreate) SetNillableBdLat(f *float64) *PoiCreate {
	if f != nil {
		pc.SetBdLat(*f)
	}
	return pc
}

// SetStopHeading sets the "stop_heading" field.
func (pc *PoiCreate) SetStopHeading(f float64) *PoiCreate {
	pc.mutation.SetStopHeading(f)
	return pc
}

// SetNillableStopHeading sets the "stop_heading" field if the given value is not nil.
func (pc *PoiCreate) SetNillableStopHeading(f *float64) *PoiCreate {
	if f != nil {
		pc.SetStopHeading(*f)
	}
	return pc
}

// SetIntroText sets the "intro_text" field.
func (pc *PoiCreate) SetIntroText(s string) *PoiCreate {
	pc.mutation.SetIntroText(s)
	return pc
}

// SetNillableIntroText sets the "intro_text" field if the given value is not nil.
func (pc *PoiCreate) SetNillableIntroText(s *string) *PoiCreate {
	if s != nil {
		pc.SetIntroText(*s)
	}
	return pc
}

// SetImageIds sets the "image_ids" field.
func (pc *PoiCreate) SetImageIds(i []int) *PoiCreate {
	pc.mutation.SetImageIds(i)
	return pc
}

// SetAudioID sets the "audio_id" field.
func (pc *PoiCreate) SetAudioID(i int) *PoiCreate {
	pc.mutation.SetAudioID(i)
	return pc
}

// SetNillableAudioID sets the "audio_id" field if the given value is not nil.
func (pc *PoiCreate) SetNillableAudioID(i *int) *PoiCreate {
	if i != nil {
		pc.SetAudioID(*i)
	}
	return pc
}

// SetVideoID sets the "video_id" field.
func (pc *PoiCreate) SetVideoID(i int) *PoiCreate {
	pc.mutation.SetVideoID(i)
	return pc
}

// SetNillableVideoID sets the "video_id" field if the given value is not nil.
func (pc *PoiCreate) SetNillableVideoID(i *int) *PoiCreate {
	if i != nil {
		pc.SetVideoID(*i)
	}
	return pc
}

// SetBroadcastRadius sets the "broadcast_radius" field.
func (pc *PoiCreate) SetBroadcastRadius(i int) *PoiCreate {
	pc.mutation.SetBroadcastRadius(i)
	return pc
}

// SetNillableBroadcastRadius sets the "broadcast_radius" field if the given value is not nil.
func (pc *PoiCreate) SetNillableBroadcastRadius(i *int) *PoiCreate {
	if i != nil {
		pc.SetBroadcastRadius(*i)
	}
	return pc
}

// SetParkingRadius sets the "parking_radius" field.
func (pc *PoiCreate) SetParkingRadius(i int) *PoiCreate {
	pc.mutation.SetParkingRadius(i)
	return pc
}

// SetNillableParkingRadius sets the "parking_radius" field if the given value is not nil.
func (pc *PoiCreate) SetNillableParkingRadius(i *int) *PoiCreate {
	if i != nil {
		pc.SetParkingRadius(*i)
	}
	return pc
}

// SetLevel sets the "level" field.
func (pc *PoiCreate) SetLevel(i int) *PoiCreate {
	pc.mutation.SetLevel(i)
	return pc
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (pc *PoiCreate) SetNillableLevel(i *int) *PoiCreate {
	if i != nil {
		pc.SetLevel(*i)
	}
	return pc
}

// SetExtendYokeeID sets the "extend_yokee_id" field.
func (pc *PoiCreate) SetExtendYokeeID(i int) *PoiCreate {
	pc.mutation.SetExtendYokeeID(i)
	return pc
}

// SetNillableExtendYokeeID sets the "extend_yokee_id" field if the given value is not nil.
func (pc *PoiCreate) SetNillableExtendYokeeID(i *int) *PoiCreate {
	if i != nil {
		pc.SetExtendYokeeID(*i)
	}
	return pc
}

// SetCreateTime sets the "create_time" field.
func (pc *PoiCreate) SetCreateTime(t time.Time) *PoiCreate {
	pc.mutation.SetCreateTime(t)
	return pc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (pc *PoiCreate) SetNillableCreateTime(t *time.Time) *PoiCreate {
	if t != nil {
		pc.SetCreateTime(*t)
	}
	return pc
}

// SetUpdateTime sets the "update_time" field.
func (pc *PoiCreate) SetUpdateTime(t time.Time) *PoiCreate {
	pc.mutation.SetUpdateTime(t)
	return pc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (pc *PoiCreate) SetNillableUpdateTime(t *time.Time) *PoiCreate {
	if t != nil {
		pc.SetUpdateTime(*t)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *PoiCreate) SetID(i int) *PoiCreate {
	pc.mutation.SetID(i)
	return pc
}

// SetBackgroundScenicAreaID sets the "background_scenic_area" edge to the ScenicArea entity by ID.
func (pc *PoiCreate) SetBackgroundScenicAreaID(id int) *PoiCreate {
	pc.mutation.SetBackgroundScenicAreaID(id)
	return pc
}

// SetBackgroundScenicArea sets the "background_scenic_area" edge to the ScenicArea entity.
func (pc *PoiCreate) SetBackgroundScenicArea(s *ScenicArea) *PoiCreate {
	return pc.SetBackgroundScenicAreaID(s.ID)
}

// Mutation returns the PoiMutation object of the builder.
func (pc *PoiCreate) Mutation() *PoiMutation {
	return pc.mutation
}

// Save creates the Poi in the database.
func (pc *PoiCreate) Save(ctx context.Context) (*Poi, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PoiCreate) SaveX(ctx context.Context) *Poi {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PoiCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PoiCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PoiCreate) defaults() {
	if _, ok := pc.mutation.Alias(); !ok {
		v := poi.DefaultAlias
		pc.mutation.SetAlias(v)
	}
	if _, ok := pc.mutation.WgsLon(); !ok {
		v := poi.DefaultWgsLon
		pc.mutation.SetWgsLon(v)
	}
	if _, ok := pc.mutation.WgsLat(); !ok {
		v := poi.DefaultWgsLat
		pc.mutation.SetWgsLat(v)
	}
	if _, ok := pc.mutation.GcjLon(); !ok {
		v := poi.DefaultGcjLon
		pc.mutation.SetGcjLon(v)
	}
	if _, ok := pc.mutation.GcjLat(); !ok {
		v := poi.DefaultGcjLat
		pc.mutation.SetGcjLat(v)
	}
	if _, ok := pc.mutation.BdLon(); !ok {
		v := poi.DefaultBdLon
		pc.mutation.SetBdLon(v)
	}
	if _, ok := pc.mutation.BdLat(); !ok {
		v := poi.DefaultBdLat
		pc.mutation.SetBdLat(v)
	}
	if _, ok := pc.mutation.StopHeading(); !ok {
		v := poi.DefaultStopHeading
		pc.mutation.SetStopHeading(v)
	}
	if _, ok := pc.mutation.IntroText(); !ok {
		v := poi.DefaultIntroText
		pc.mutation.SetIntroText(v)
	}
	if _, ok := pc.mutation.ImageIds(); !ok {
		v := poi.DefaultImageIds
		pc.mutation.SetImageIds(v)
	}
	if _, ok := pc.mutation.AudioID(); !ok {
		v := poi.DefaultAudioID
		pc.mutation.SetAudioID(v)
	}
	if _, ok := pc.mutation.VideoID(); !ok {
		v := poi.DefaultVideoID
		pc.mutation.SetVideoID(v)
	}
	if _, ok := pc.mutation.BroadcastRadius(); !ok {
		v := poi.DefaultBroadcastRadius
		pc.mutation.SetBroadcastRadius(v)
	}
	if _, ok := pc.mutation.ParkingRadius(); !ok {
		v := poi.DefaultParkingRadius
		pc.mutation.SetParkingRadius(v)
	}
	if _, ok := pc.mutation.Level(); !ok {
		v := poi.DefaultLevel
		pc.mutation.SetLevel(v)
	}
	if _, ok := pc.mutation.CreateTime(); !ok {
		v := poi.DefaultCreateTime()
		pc.mutation.SetCreateTime(v)
	}
	if _, ok := pc.mutation.UpdateTime(); !ok {
		v := poi.DefaultUpdateTime()
		pc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PoiCreate) check() error {
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Poi.name"`)}
	}
	if _, ok := pc.mutation.Alias(); !ok {
		return &ValidationError{Name: "alias", err: errors.New(`ent: missing required field "Poi.alias"`)}
	}
	if _, ok := pc.mutation.ScenicAreaID(); !ok {
		return &ValidationError{Name: "scenic_area_id", err: errors.New(`ent: missing required field "Poi.scenic_area_id"`)}
	}
	if _, ok := pc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Poi.type"`)}
	}
	if _, ok := pc.mutation.WgsLon(); !ok {
		return &ValidationError{Name: "wgs_lon", err: errors.New(`ent: missing required field "Poi.wgs_lon"`)}
	}
	if _, ok := pc.mutation.WgsLat(); !ok {
		return &ValidationError{Name: "wgs_lat", err: errors.New(`ent: missing required field "Poi.wgs_lat"`)}
	}
	if _, ok := pc.mutation.GcjLon(); !ok {
		return &ValidationError{Name: "gcj_lon", err: errors.New(`ent: missing required field "Poi.gcj_lon"`)}
	}
	if _, ok := pc.mutation.GcjLat(); !ok {
		return &ValidationError{Name: "gcj_lat", err: errors.New(`ent: missing required field "Poi.gcj_lat"`)}
	}
	if _, ok := pc.mutation.BdLon(); !ok {
		return &ValidationError{Name: "bd_lon", err: errors.New(`ent: missing required field "Poi.bd_lon"`)}
	}
	if _, ok := pc.mutation.BdLat(); !ok {
		return &ValidationError{Name: "bd_lat", err: errors.New(`ent: missing required field "Poi.bd_lat"`)}
	}
	if _, ok := pc.mutation.StopHeading(); !ok {
		return &ValidationError{Name: "stop_heading", err: errors.New(`ent: missing required field "Poi.stop_heading"`)}
	}
	if _, ok := pc.mutation.IntroText(); !ok {
		return &ValidationError{Name: "intro_text", err: errors.New(`ent: missing required field "Poi.intro_text"`)}
	}
	if _, ok := pc.mutation.ImageIds(); !ok {
		return &ValidationError{Name: "image_ids", err: errors.New(`ent: missing required field "Poi.image_ids"`)}
	}
	if _, ok := pc.mutation.AudioID(); !ok {
		return &ValidationError{Name: "audio_id", err: errors.New(`ent: missing required field "Poi.audio_id"`)}
	}
	if _, ok := pc.mutation.VideoID(); !ok {
		return &ValidationError{Name: "video_id", err: errors.New(`ent: missing required field "Poi.video_id"`)}
	}
	if _, ok := pc.mutation.BroadcastRadius(); !ok {
		return &ValidationError{Name: "broadcast_radius", err: errors.New(`ent: missing required field "Poi.broadcast_radius"`)}
	}
	if _, ok := pc.mutation.ParkingRadius(); !ok {
		return &ValidationError{Name: "parking_radius", err: errors.New(`ent: missing required field "Poi.parking_radius"`)}
	}
	if _, ok := pc.mutation.Level(); !ok {
		return &ValidationError{Name: "level", err: errors.New(`ent: missing required field "Poi.level"`)}
	}
	if _, ok := pc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Poi.create_time"`)}
	}
	if _, ok := pc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Poi.update_time"`)}
	}
	if len(pc.mutation.BackgroundScenicAreaIDs()) == 0 {
		return &ValidationError{Name: "background_scenic_area", err: errors.New(`ent: missing required edge "Poi.background_scenic_area"`)}
	}
	return nil
}

func (pc *PoiCreate) sqlSave(ctx context.Context) (*Poi, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PoiCreate) createSpec() (*Poi, *sqlgraph.CreateSpec) {
	var (
		_node = &Poi{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(poi.Table, sqlgraph.NewFieldSpec(poi.FieldID, field.TypeInt))
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(poi.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.Alias(); ok {
		_spec.SetField(poi.FieldAlias, field.TypeString, value)
		_node.Alias = value
	}
	if value, ok := pc.mutation.GetType(); ok {
		_spec.SetField(poi.FieldType, field.TypeInt, value)
		_node.Type = value
	}
	if value, ok := pc.mutation.WgsLon(); ok {
		_spec.SetField(poi.FieldWgsLon, field.TypeFloat64, value)
		_node.WgsLon = value
	}
	if value, ok := pc.mutation.WgsLat(); ok {
		_spec.SetField(poi.FieldWgsLat, field.TypeFloat64, value)
		_node.WgsLat = value
	}
	if value, ok := pc.mutation.GcjLon(); ok {
		_spec.SetField(poi.FieldGcjLon, field.TypeFloat64, value)
		_node.GcjLon = value
	}
	if value, ok := pc.mutation.GcjLat(); ok {
		_spec.SetField(poi.FieldGcjLat, field.TypeFloat64, value)
		_node.GcjLat = value
	}
	if value, ok := pc.mutation.BdLon(); ok {
		_spec.SetField(poi.FieldBdLon, field.TypeFloat64, value)
		_node.BdLon = value
	}
	if value, ok := pc.mutation.BdLat(); ok {
		_spec.SetField(poi.FieldBdLat, field.TypeFloat64, value)
		_node.BdLat = value
	}
	if value, ok := pc.mutation.StopHeading(); ok {
		_spec.SetField(poi.FieldStopHeading, field.TypeFloat64, value)
		_node.StopHeading = value
	}
	if value, ok := pc.mutation.IntroText(); ok {
		_spec.SetField(poi.FieldIntroText, field.TypeString, value)
		_node.IntroText = value
	}
	if value, ok := pc.mutation.ImageIds(); ok {
		_spec.SetField(poi.FieldImageIds, field.TypeJSON, value)
		_node.ImageIds = value
	}
	if value, ok := pc.mutation.AudioID(); ok {
		_spec.SetField(poi.FieldAudioID, field.TypeInt, value)
		_node.AudioID = value
	}
	if value, ok := pc.mutation.VideoID(); ok {
		_spec.SetField(poi.FieldVideoID, field.TypeInt, value)
		_node.VideoID = value
	}
	if value, ok := pc.mutation.BroadcastRadius(); ok {
		_spec.SetField(poi.FieldBroadcastRadius, field.TypeInt, value)
		_node.BroadcastRadius = value
	}
	if value, ok := pc.mutation.ParkingRadius(); ok {
		_spec.SetField(poi.FieldParkingRadius, field.TypeInt, value)
		_node.ParkingRadius = value
	}
	if value, ok := pc.mutation.Level(); ok {
		_spec.SetField(poi.FieldLevel, field.TypeInt, value)
		_node.Level = value
	}
	if value, ok := pc.mutation.ExtendYokeeID(); ok {
		_spec.SetField(poi.FieldExtendYokeeID, field.TypeInt, value)
		_node.ExtendYokeeID = &value
	}
	if value, ok := pc.mutation.CreateTime(); ok {
		_spec.SetField(poi.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := pc.mutation.UpdateTime(); ok {
		_spec.SetField(poi.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if nodes := pc.mutation.BackgroundScenicAreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   poi.BackgroundScenicAreaTable,
			Columns: []string{poi.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ScenicAreaID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PoiCreateBulk is the builder for creating many Poi entities in bulk.
type PoiCreateBulk struct {
	config
	err      error
	builders []*PoiCreate
}

// Save creates the Poi entities in the database.
func (pcb *PoiCreateBulk) Save(ctx context.Context) ([]*Poi, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Poi, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PoiMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PoiCreateBulk) SaveX(ctx context.Context) []*Poi {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PoiCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PoiCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
