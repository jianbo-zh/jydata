// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/car"
	"github.com/jianbo-zh/jydata/database/ent/carsoperatelog"
	"github.com/jianbo-zh/jydata/database/ent/scenicarea"
)

// CarsOperateLogCreate is the builder for creating a CarsOperateLog entity.
type CarsOperateLogCreate struct {
	config
	mutation *CarsOperateLogMutation
	hooks    []Hook
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (colc *CarsOperateLogCreate) SetScenicAreaID(i int) *CarsOperateLogCreate {
	colc.mutation.SetScenicAreaID(i)
	return colc
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (colc *CarsOperateLogCreate) SetNillableScenicAreaID(i *int) *CarsOperateLogCreate {
	if i != nil {
		colc.SetScenicAreaID(*i)
	}
	return colc
}

// SetOrigin sets the "origin" field.
func (colc *CarsOperateLogCreate) SetOrigin(s string) *CarsOperateLogCreate {
	colc.mutation.SetOrigin(s)
	return colc
}

// SetOriginUID sets the "origin_uid" field.
func (colc *CarsOperateLogCreate) SetOriginUID(i int) *CarsOperateLogCreate {
	colc.mutation.SetOriginUID(i)
	return colc
}

// SetOriginIP sets the "origin_ip" field.
func (colc *CarsOperateLogCreate) SetOriginIP(s string) *CarsOperateLogCreate {
	colc.mutation.SetOriginIP(s)
	return colc
}

// SetOperateAction sets the "operate_action" field.
func (colc *CarsOperateLogCreate) SetOperateAction(s string) *CarsOperateLogCreate {
	colc.mutation.SetOperateAction(s)
	return colc
}

// SetCarID sets the "car_id" field.
func (colc *CarsOperateLogCreate) SetCarID(i int) *CarsOperateLogCreate {
	colc.mutation.SetCarID(i)
	return colc
}

// SetDeviceID sets the "device_id" field.
func (colc *CarsOperateLogCreate) SetDeviceID(s string) *CarsOperateLogCreate {
	colc.mutation.SetDeviceID(s)
	return colc
}

// SetCarLongitude sets the "car_longitude" field.
func (colc *CarsOperateLogCreate) SetCarLongitude(f float64) *CarsOperateLogCreate {
	colc.mutation.SetCarLongitude(f)
	return colc
}

// SetNillableCarLongitude sets the "car_longitude" field if the given value is not nil.
func (colc *CarsOperateLogCreate) SetNillableCarLongitude(f *float64) *CarsOperateLogCreate {
	if f != nil {
		colc.SetCarLongitude(*f)
	}
	return colc
}

// SetCarLatitude sets the "car_latitude" field.
func (colc *CarsOperateLogCreate) SetCarLatitude(f float64) *CarsOperateLogCreate {
	colc.mutation.SetCarLatitude(f)
	return colc
}

// SetNillableCarLatitude sets the "car_latitude" field if the given value is not nil.
func (colc *CarsOperateLogCreate) SetNillableCarLatitude(f *float64) *CarsOperateLogCreate {
	if f != nil {
		colc.SetCarLatitude(*f)
	}
	return colc
}

// SetCarMileage sets the "car_mileage" field.
func (colc *CarsOperateLogCreate) SetCarMileage(f float64) *CarsOperateLogCreate {
	colc.mutation.SetCarMileage(f)
	return colc
}

// SetNillableCarMileage sets the "car_mileage" field if the given value is not nil.
func (colc *CarsOperateLogCreate) SetNillableCarMileage(f *float64) *CarsOperateLogCreate {
	if f != nil {
		colc.SetCarMileage(*f)
	}
	return colc
}

// SetCarSpeed sets the "car_speed" field.
func (colc *CarsOperateLogCreate) SetCarSpeed(f float64) *CarsOperateLogCreate {
	colc.mutation.SetCarSpeed(f)
	return colc
}

// SetNillableCarSpeed sets the "car_speed" field if the given value is not nil.
func (colc *CarsOperateLogCreate) SetNillableCarSpeed(f *float64) *CarsOperateLogCreate {
	if f != nil {
		colc.SetCarSpeed(*f)
	}
	return colc
}

// SetCarPower sets the "car_power" field.
func (colc *CarsOperateLogCreate) SetCarPower(f float64) *CarsOperateLogCreate {
	colc.mutation.SetCarPower(f)
	return colc
}

// SetNillableCarPower sets the "car_power" field if the given value is not nil.
func (colc *CarsOperateLogCreate) SetNillableCarPower(f *float64) *CarsOperateLogCreate {
	if f != nil {
		colc.SetCarPower(*f)
	}
	return colc
}

// SetCarStatus sets the "car_status" field.
func (colc *CarsOperateLogCreate) SetCarStatus(s string) *CarsOperateLogCreate {
	colc.mutation.SetCarStatus(s)
	return colc
}

// SetNillableCarStatus sets the "car_status" field if the given value is not nil.
func (colc *CarsOperateLogCreate) SetNillableCarStatus(s *string) *CarsOperateLogCreate {
	if s != nil {
		colc.SetCarStatus(*s)
	}
	return colc
}

// SetOperateResult sets the "operate_result" field.
func (colc *CarsOperateLogCreate) SetOperateResult(s string) *CarsOperateLogCreate {
	colc.mutation.SetOperateResult(s)
	return colc
}

// SetOperateState sets the "operate_state" field.
func (colc *CarsOperateLogCreate) SetOperateState(i int) *CarsOperateLogCreate {
	colc.mutation.SetOperateState(i)
	return colc
}

// SetNillableOperateState sets the "operate_state" field if the given value is not nil.
func (colc *CarsOperateLogCreate) SetNillableOperateState(i *int) *CarsOperateLogCreate {
	if i != nil {
		colc.SetOperateState(*i)
	}
	return colc
}

// SetCreateTime sets the "create_time" field.
func (colc *CarsOperateLogCreate) SetCreateTime(t time.Time) *CarsOperateLogCreate {
	colc.mutation.SetCreateTime(t)
	return colc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (colc *CarsOperateLogCreate) SetNillableCreateTime(t *time.Time) *CarsOperateLogCreate {
	if t != nil {
		colc.SetCreateTime(*t)
	}
	return colc
}

// SetUpdateTime sets the "update_time" field.
func (colc *CarsOperateLogCreate) SetUpdateTime(t time.Time) *CarsOperateLogCreate {
	colc.mutation.SetUpdateTime(t)
	return colc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (colc *CarsOperateLogCreate) SetNillableUpdateTime(t *time.Time) *CarsOperateLogCreate {
	if t != nil {
		colc.SetUpdateTime(*t)
	}
	return colc
}

// SetID sets the "id" field.
func (colc *CarsOperateLogCreate) SetID(i int) *CarsOperateLogCreate {
	colc.mutation.SetID(i)
	return colc
}

// SetBackgroundScenicAreaID sets the "background_scenic_area" edge to the ScenicArea entity by ID.
func (colc *CarsOperateLogCreate) SetBackgroundScenicAreaID(id int) *CarsOperateLogCreate {
	colc.mutation.SetBackgroundScenicAreaID(id)
	return colc
}

// SetBackgroundScenicArea sets the "background_scenic_area" edge to the ScenicArea entity.
func (colc *CarsOperateLogCreate) SetBackgroundScenicArea(s *ScenicArea) *CarsOperateLogCreate {
	return colc.SetBackgroundScenicAreaID(s.ID)
}

// SetCar sets the "car" edge to the Car entity.
func (colc *CarsOperateLogCreate) SetCar(c *Car) *CarsOperateLogCreate {
	return colc.SetCarID(c.ID)
}

// Mutation returns the CarsOperateLogMutation object of the builder.
func (colc *CarsOperateLogCreate) Mutation() *CarsOperateLogMutation {
	return colc.mutation
}

// Save creates the CarsOperateLog in the database.
func (colc *CarsOperateLogCreate) Save(ctx context.Context) (*CarsOperateLog, error) {
	colc.defaults()
	return withHooks(ctx, colc.sqlSave, colc.mutation, colc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (colc *CarsOperateLogCreate) SaveX(ctx context.Context) *CarsOperateLog {
	v, err := colc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (colc *CarsOperateLogCreate) Exec(ctx context.Context) error {
	_, err := colc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (colc *CarsOperateLogCreate) ExecX(ctx context.Context) {
	if err := colc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (colc *CarsOperateLogCreate) defaults() {
	if _, ok := colc.mutation.ScenicAreaID(); !ok {
		v := carsoperatelog.DefaultScenicAreaID
		colc.mutation.SetScenicAreaID(v)
	}
	if _, ok := colc.mutation.OperateState(); !ok {
		v := carsoperatelog.DefaultOperateState
		colc.mutation.SetOperateState(v)
	}
	if _, ok := colc.mutation.CreateTime(); !ok {
		v := carsoperatelog.DefaultCreateTime()
		colc.mutation.SetCreateTime(v)
	}
	if _, ok := colc.mutation.UpdateTime(); !ok {
		v := carsoperatelog.DefaultUpdateTime()
		colc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (colc *CarsOperateLogCreate) check() error {
	if _, ok := colc.mutation.ScenicAreaID(); !ok {
		return &ValidationError{Name: "scenic_area_id", err: errors.New(`ent: missing required field "CarsOperateLog.scenic_area_id"`)}
	}
	if _, ok := colc.mutation.Origin(); !ok {
		return &ValidationError{Name: "origin", err: errors.New(`ent: missing required field "CarsOperateLog.origin"`)}
	}
	if _, ok := colc.mutation.OriginUID(); !ok {
		return &ValidationError{Name: "origin_uid", err: errors.New(`ent: missing required field "CarsOperateLog.origin_uid"`)}
	}
	if _, ok := colc.mutation.OriginIP(); !ok {
		return &ValidationError{Name: "origin_ip", err: errors.New(`ent: missing required field "CarsOperateLog.origin_ip"`)}
	}
	if _, ok := colc.mutation.OperateAction(); !ok {
		return &ValidationError{Name: "operate_action", err: errors.New(`ent: missing required field "CarsOperateLog.operate_action"`)}
	}
	if _, ok := colc.mutation.CarID(); !ok {
		return &ValidationError{Name: "car_id", err: errors.New(`ent: missing required field "CarsOperateLog.car_id"`)}
	}
	if _, ok := colc.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device_id", err: errors.New(`ent: missing required field "CarsOperateLog.device_id"`)}
	}
	if _, ok := colc.mutation.OperateResult(); !ok {
		return &ValidationError{Name: "operate_result", err: errors.New(`ent: missing required field "CarsOperateLog.operate_result"`)}
	}
	if _, ok := colc.mutation.OperateState(); !ok {
		return &ValidationError{Name: "operate_state", err: errors.New(`ent: missing required field "CarsOperateLog.operate_state"`)}
	}
	if _, ok := colc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "CarsOperateLog.create_time"`)}
	}
	if _, ok := colc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "CarsOperateLog.update_time"`)}
	}
	if len(colc.mutation.BackgroundScenicAreaIDs()) == 0 {
		return &ValidationError{Name: "background_scenic_area", err: errors.New(`ent: missing required edge "CarsOperateLog.background_scenic_area"`)}
	}
	if len(colc.mutation.CarIDs()) == 0 {
		return &ValidationError{Name: "car", err: errors.New(`ent: missing required edge "CarsOperateLog.car"`)}
	}
	return nil
}

func (colc *CarsOperateLogCreate) sqlSave(ctx context.Context) (*CarsOperateLog, error) {
	if err := colc.check(); err != nil {
		return nil, err
	}
	_node, _spec := colc.createSpec()
	if err := sqlgraph.CreateNode(ctx, colc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	colc.mutation.id = &_node.ID
	colc.mutation.done = true
	return _node, nil
}

func (colc *CarsOperateLogCreate) createSpec() (*CarsOperateLog, *sqlgraph.CreateSpec) {
	var (
		_node = &CarsOperateLog{config: colc.config}
		_spec = sqlgraph.NewCreateSpec(carsoperatelog.Table, sqlgraph.NewFieldSpec(carsoperatelog.FieldID, field.TypeInt))
	)
	if id, ok := colc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := colc.mutation.Origin(); ok {
		_spec.SetField(carsoperatelog.FieldOrigin, field.TypeString, value)
		_node.Origin = value
	}
	if value, ok := colc.mutation.OriginUID(); ok {
		_spec.SetField(carsoperatelog.FieldOriginUID, field.TypeInt, value)
		_node.OriginUID = value
	}
	if value, ok := colc.mutation.OriginIP(); ok {
		_spec.SetField(carsoperatelog.FieldOriginIP, field.TypeString, value)
		_node.OriginIP = value
	}
	if value, ok := colc.mutation.OperateAction(); ok {
		_spec.SetField(carsoperatelog.FieldOperateAction, field.TypeString, value)
		_node.OperateAction = value
	}
	if value, ok := colc.mutation.DeviceID(); ok {
		_spec.SetField(carsoperatelog.FieldDeviceID, field.TypeString, value)
		_node.DeviceID = value
	}
	if value, ok := colc.mutation.CarLongitude(); ok {
		_spec.SetField(carsoperatelog.FieldCarLongitude, field.TypeFloat64, value)
		_node.CarLongitude = &value
	}
	if value, ok := colc.mutation.CarLatitude(); ok {
		_spec.SetField(carsoperatelog.FieldCarLatitude, field.TypeFloat64, value)
		_node.CarLatitude = &value
	}
	if value, ok := colc.mutation.CarMileage(); ok {
		_spec.SetField(carsoperatelog.FieldCarMileage, field.TypeFloat64, value)
		_node.CarMileage = &value
	}
	if value, ok := colc.mutation.CarSpeed(); ok {
		_spec.SetField(carsoperatelog.FieldCarSpeed, field.TypeFloat64, value)
		_node.CarSpeed = &value
	}
	if value, ok := colc.mutation.CarPower(); ok {
		_spec.SetField(carsoperatelog.FieldCarPower, field.TypeFloat64, value)
		_node.CarPower = &value
	}
	if value, ok := colc.mutation.CarStatus(); ok {
		_spec.SetField(carsoperatelog.FieldCarStatus, field.TypeString, value)
		_node.CarStatus = &value
	}
	if value, ok := colc.mutation.OperateResult(); ok {
		_spec.SetField(carsoperatelog.FieldOperateResult, field.TypeString, value)
		_node.OperateResult = value
	}
	if value, ok := colc.mutation.OperateState(); ok {
		_spec.SetField(carsoperatelog.FieldOperateState, field.TypeInt, value)
		_node.OperateState = value
	}
	if value, ok := colc.mutation.CreateTime(); ok {
		_spec.SetField(carsoperatelog.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := colc.mutation.UpdateTime(); ok {
		_spec.SetField(carsoperatelog.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if nodes := colc.mutation.BackgroundScenicAreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carsoperatelog.BackgroundScenicAreaTable,
			Columns: []string{carsoperatelog.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ScenicAreaID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := colc.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carsoperatelog.CarTable,
			Columns: []string{carsoperatelog.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CarID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CarsOperateLogCreateBulk is the builder for creating many CarsOperateLog entities in bulk.
type CarsOperateLogCreateBulk struct {
	config
	err      error
	builders []*CarsOperateLogCreate
}

// Save creates the CarsOperateLog entities in the database.
func (colcb *CarsOperateLogCreateBulk) Save(ctx context.Context) ([]*CarsOperateLog, error) {
	if colcb.err != nil {
		return nil, colcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(colcb.builders))
	nodes := make([]*CarsOperateLog, len(colcb.builders))
	mutators := make([]Mutator, len(colcb.builders))
	for i := range colcb.builders {
		func(i int, root context.Context) {
			builder := colcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CarsOperateLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, colcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, colcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, colcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (colcb *CarsOperateLogCreateBulk) SaveX(ctx context.Context) []*CarsOperateLog {
	v, err := colcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (colcb *CarsOperateLogCreateBulk) Exec(ctx context.Context) error {
	_, err := colcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (colcb *CarsOperateLogCreateBulk) ExecX(ctx context.Context) {
	if err := colcb.Exec(ctx); err != nil {
		panic(err)
	}
}
