// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jianbo-zh/jydata/database/ent/caralarm"
)

// CarAlarm is the model entity for the CarAlarm schema.
type CarAlarm struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 设备ID
	DeviceID string `json:"device_id,omitempty"`
	// 告警ID
	AlarmID uint32 `json:"alarm_id,omitempty"`
	// 模块名称
	ModuleName string `json:"module_name,omitempty"`
	// 告警类型（0-产生 1-恢复 2-事件）
	Type uint32 `json:"type,omitempty"`
	// 持续时间（毫秒）
	DurationMs uint32 `json:"duration_ms,omitempty"`
	// 间隔时间（毫秒）
	IntervalMs uint32 `json:"interval_ms,omitempty"`
	// 告警等级（0-信息 1-告警 2-错误 3-故障）
	Level uint32 `json:"level,omitempty"`
	// 忽略能力（0-不忽略 1-忽略一次 2-重复忽略）
	CanIgnore uint32 `json:"can_ignore,omitempty"`
	// 影响状态（0-无影响 1-手动 2-自动 3-手自动 4-远程 5-手远程 6-自远 7-手自远）
	EffectState uint32 `json:"effect_state,omitempty"`
	// 告警描述
	Desc string `json:"desc,omitempty"`
	// 告警时间
	UUID uint64 `json:"uuid,omitempty"`
	// 关联告警（0-不忽略 1-忽略一次 2-重复忽略）
	AssociatedIds []int `json:"associated_ids,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime   time.Time `json:"update_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CarAlarm) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case caralarm.FieldAssociatedIds:
			values[i] = new([]byte)
		case caralarm.FieldID, caralarm.FieldAlarmID, caralarm.FieldType, caralarm.FieldDurationMs, caralarm.FieldIntervalMs, caralarm.FieldLevel, caralarm.FieldCanIgnore, caralarm.FieldEffectState, caralarm.FieldUUID:
			values[i] = new(sql.NullInt64)
		case caralarm.FieldDeviceID, caralarm.FieldModuleName, caralarm.FieldDesc:
			values[i] = new(sql.NullString)
		case caralarm.FieldCreateTime, caralarm.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CarAlarm fields.
func (ca *CarAlarm) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case caralarm.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ca.ID = int(value.Int64)
		case caralarm.FieldDeviceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device_id", values[i])
			} else if value.Valid {
				ca.DeviceID = value.String
			}
		case caralarm.FieldAlarmID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field alarm_id", values[i])
			} else if value.Valid {
				ca.AlarmID = uint32(value.Int64)
			}
		case caralarm.FieldModuleName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field module_name", values[i])
			} else if value.Valid {
				ca.ModuleName = value.String
			}
		case caralarm.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				ca.Type = uint32(value.Int64)
			}
		case caralarm.FieldDurationMs:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration_ms", values[i])
			} else if value.Valid {
				ca.DurationMs = uint32(value.Int64)
			}
		case caralarm.FieldIntervalMs:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field interval_ms", values[i])
			} else if value.Valid {
				ca.IntervalMs = uint32(value.Int64)
			}
		case caralarm.FieldLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field level", values[i])
			} else if value.Valid {
				ca.Level = uint32(value.Int64)
			}
		case caralarm.FieldCanIgnore:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field can_ignore", values[i])
			} else if value.Valid {
				ca.CanIgnore = uint32(value.Int64)
			}
		case caralarm.FieldEffectState:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field effect_state", values[i])
			} else if value.Valid {
				ca.EffectState = uint32(value.Int64)
			}
		case caralarm.FieldDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desc", values[i])
			} else if value.Valid {
				ca.Desc = value.String
			}
		case caralarm.FieldUUID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				ca.UUID = uint64(value.Int64)
			}
		case caralarm.FieldAssociatedIds:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field associated_ids", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ca.AssociatedIds); err != nil {
					return fmt.Errorf("unmarshal field associated_ids: %w", err)
				}
			}
		case caralarm.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ca.CreateTime = value.Time
			}
		case caralarm.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ca.UpdateTime = value.Time
			}
		default:
			ca.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CarAlarm.
// This includes values selected through modifiers, order, etc.
func (ca *CarAlarm) Value(name string) (ent.Value, error) {
	return ca.selectValues.Get(name)
}

// Update returns a builder for updating this CarAlarm.
// Note that you need to call CarAlarm.Unwrap() before calling this method if this CarAlarm
// was returned from a transaction, and the transaction was committed or rolled back.
func (ca *CarAlarm) Update() *CarAlarmUpdateOne {
	return NewCarAlarmClient(ca.config).UpdateOne(ca)
}

// Unwrap unwraps the CarAlarm entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ca *CarAlarm) Unwrap() *CarAlarm {
	_tx, ok := ca.config.driver.(*txDriver)
	if !ok {
		panic("ent: CarAlarm is not a transactional entity")
	}
	ca.config.driver = _tx.drv
	return ca
}

// String implements the fmt.Stringer.
func (ca *CarAlarm) String() string {
	var builder strings.Builder
	builder.WriteString("CarAlarm(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ca.ID))
	builder.WriteString("device_id=")
	builder.WriteString(ca.DeviceID)
	builder.WriteString(", ")
	builder.WriteString("alarm_id=")
	builder.WriteString(fmt.Sprintf("%v", ca.AlarmID))
	builder.WriteString(", ")
	builder.WriteString("module_name=")
	builder.WriteString(ca.ModuleName)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", ca.Type))
	builder.WriteString(", ")
	builder.WriteString("duration_ms=")
	builder.WriteString(fmt.Sprintf("%v", ca.DurationMs))
	builder.WriteString(", ")
	builder.WriteString("interval_ms=")
	builder.WriteString(fmt.Sprintf("%v", ca.IntervalMs))
	builder.WriteString(", ")
	builder.WriteString("level=")
	builder.WriteString(fmt.Sprintf("%v", ca.Level))
	builder.WriteString(", ")
	builder.WriteString("can_ignore=")
	builder.WriteString(fmt.Sprintf("%v", ca.CanIgnore))
	builder.WriteString(", ")
	builder.WriteString("effect_state=")
	builder.WriteString(fmt.Sprintf("%v", ca.EffectState))
	builder.WriteString(", ")
	builder.WriteString("desc=")
	builder.WriteString(ca.Desc)
	builder.WriteString(", ")
	builder.WriteString("uuid=")
	builder.WriteString(fmt.Sprintf("%v", ca.UUID))
	builder.WriteString(", ")
	builder.WriteString("associated_ids=")
	builder.WriteString(fmt.Sprintf("%v", ca.AssociatedIds))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(ca.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(ca.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CarAlarms is a parsable slice of CarAlarm.
type CarAlarms []*CarAlarm
