// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/poiextendyokee"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PoiExtendYokeeCreate is the builder for creating a PoiExtendYokee entity.
type PoiExtendYokeeCreate struct {
	config
	mutation *PoiExtendYokeeMutation
	hooks    []Hook
}

// SetPoiID sets the "poi_id" field.
func (peyc *PoiExtendYokeeCreate) SetPoiID(i int) *PoiExtendYokeeCreate {
	peyc.mutation.SetPoiID(i)
	return peyc
}

// SetYokeeStationID sets the "yokee_station_id" field.
func (peyc *PoiExtendYokeeCreate) SetYokeeStationID(i int) *PoiExtendYokeeCreate {
	peyc.mutation.SetYokeeStationID(i)
	return peyc
}

// SetYokeeStationName sets the "yokee_station_name" field.
func (peyc *PoiExtendYokeeCreate) SetYokeeStationName(s string) *PoiExtendYokeeCreate {
	peyc.mutation.SetYokeeStationName(s)
	return peyc
}

// SetYokeeStopID sets the "yokee_stop_id" field.
func (peyc *PoiExtendYokeeCreate) SetYokeeStopID(i int) *PoiExtendYokeeCreate {
	peyc.mutation.SetYokeeStopID(i)
	return peyc
}

// SetYokeeStopName sets the "yokee_stop_name" field.
func (peyc *PoiExtendYokeeCreate) SetYokeeStopName(s string) *PoiExtendYokeeCreate {
	peyc.mutation.SetYokeeStopName(s)
	return peyc
}

// SetCreateTime sets the "create_time" field.
func (peyc *PoiExtendYokeeCreate) SetCreateTime(t time.Time) *PoiExtendYokeeCreate {
	peyc.mutation.SetCreateTime(t)
	return peyc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (peyc *PoiExtendYokeeCreate) SetNillableCreateTime(t *time.Time) *PoiExtendYokeeCreate {
	if t != nil {
		peyc.SetCreateTime(*t)
	}
	return peyc
}

// SetUpdateTime sets the "update_time" field.
func (peyc *PoiExtendYokeeCreate) SetUpdateTime(t time.Time) *PoiExtendYokeeCreate {
	peyc.mutation.SetUpdateTime(t)
	return peyc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (peyc *PoiExtendYokeeCreate) SetNillableUpdateTime(t *time.Time) *PoiExtendYokeeCreate {
	if t != nil {
		peyc.SetUpdateTime(*t)
	}
	return peyc
}

// SetID sets the "id" field.
func (peyc *PoiExtendYokeeCreate) SetID(i int) *PoiExtendYokeeCreate {
	peyc.mutation.SetID(i)
	return peyc
}

// Mutation returns the PoiExtendYokeeMutation object of the builder.
func (peyc *PoiExtendYokeeCreate) Mutation() *PoiExtendYokeeMutation {
	return peyc.mutation
}

// Save creates the PoiExtendYokee in the database.
func (peyc *PoiExtendYokeeCreate) Save(ctx context.Context) (*PoiExtendYokee, error) {
	peyc.defaults()
	return withHooks(ctx, peyc.sqlSave, peyc.mutation, peyc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (peyc *PoiExtendYokeeCreate) SaveX(ctx context.Context) *PoiExtendYokee {
	v, err := peyc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (peyc *PoiExtendYokeeCreate) Exec(ctx context.Context) error {
	_, err := peyc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (peyc *PoiExtendYokeeCreate) ExecX(ctx context.Context) {
	if err := peyc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (peyc *PoiExtendYokeeCreate) defaults() {
	if _, ok := peyc.mutation.CreateTime(); !ok {
		v := poiextendyokee.DefaultCreateTime()
		peyc.mutation.SetCreateTime(v)
	}
	if _, ok := peyc.mutation.UpdateTime(); !ok {
		v := poiextendyokee.DefaultUpdateTime()
		peyc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (peyc *PoiExtendYokeeCreate) check() error {
	if _, ok := peyc.mutation.PoiID(); !ok {
		return &ValidationError{Name: "poi_id", err: errors.New(`ent: missing required field "PoiExtendYokee.poi_id"`)}
	}
	if _, ok := peyc.mutation.YokeeStationID(); !ok {
		return &ValidationError{Name: "yokee_station_id", err: errors.New(`ent: missing required field "PoiExtendYokee.yokee_station_id"`)}
	}
	if _, ok := peyc.mutation.YokeeStationName(); !ok {
		return &ValidationError{Name: "yokee_station_name", err: errors.New(`ent: missing required field "PoiExtendYokee.yokee_station_name"`)}
	}
	if _, ok := peyc.mutation.YokeeStopID(); !ok {
		return &ValidationError{Name: "yokee_stop_id", err: errors.New(`ent: missing required field "PoiExtendYokee.yokee_stop_id"`)}
	}
	if _, ok := peyc.mutation.YokeeStopName(); !ok {
		return &ValidationError{Name: "yokee_stop_name", err: errors.New(`ent: missing required field "PoiExtendYokee.yokee_stop_name"`)}
	}
	if _, ok := peyc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "PoiExtendYokee.create_time"`)}
	}
	if _, ok := peyc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "PoiExtendYokee.update_time"`)}
	}
	return nil
}

func (peyc *PoiExtendYokeeCreate) sqlSave(ctx context.Context) (*PoiExtendYokee, error) {
	if err := peyc.check(); err != nil {
		return nil, err
	}
	_node, _spec := peyc.createSpec()
	if err := sqlgraph.CreateNode(ctx, peyc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	peyc.mutation.id = &_node.ID
	peyc.mutation.done = true
	return _node, nil
}

func (peyc *PoiExtendYokeeCreate) createSpec() (*PoiExtendYokee, *sqlgraph.CreateSpec) {
	var (
		_node = &PoiExtendYokee{config: peyc.config}
		_spec = sqlgraph.NewCreateSpec(poiextendyokee.Table, sqlgraph.NewFieldSpec(poiextendyokee.FieldID, field.TypeInt))
	)
	if id, ok := peyc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := peyc.mutation.PoiID(); ok {
		_spec.SetField(poiextendyokee.FieldPoiID, field.TypeInt, value)
		_node.PoiID = value
	}
	if value, ok := peyc.mutation.YokeeStationID(); ok {
		_spec.SetField(poiextendyokee.FieldYokeeStationID, field.TypeInt, value)
		_node.YokeeStationID = value
	}
	if value, ok := peyc.mutation.YokeeStationName(); ok {
		_spec.SetField(poiextendyokee.FieldYokeeStationName, field.TypeString, value)
		_node.YokeeStationName = value
	}
	if value, ok := peyc.mutation.YokeeStopID(); ok {
		_spec.SetField(poiextendyokee.FieldYokeeStopID, field.TypeInt, value)
		_node.YokeeStopID = value
	}
	if value, ok := peyc.mutation.YokeeStopName(); ok {
		_spec.SetField(poiextendyokee.FieldYokeeStopName, field.TypeString, value)
		_node.YokeeStopName = value
	}
	if value, ok := peyc.mutation.CreateTime(); ok {
		_spec.SetField(poiextendyokee.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := peyc.mutation.UpdateTime(); ok {
		_spec.SetField(poiextendyokee.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// PoiExtendYokeeCreateBulk is the builder for creating many PoiExtendYokee entities in bulk.
type PoiExtendYokeeCreateBulk struct {
	config
	err      error
	builders []*PoiExtendYokeeCreate
}

// Save creates the PoiExtendYokee entities in the database.
func (peycb *PoiExtendYokeeCreateBulk) Save(ctx context.Context) ([]*PoiExtendYokee, error) {
	if peycb.err != nil {
		return nil, peycb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(peycb.builders))
	nodes := make([]*PoiExtendYokee, len(peycb.builders))
	mutators := make([]Mutator, len(peycb.builders))
	for i := range peycb.builders {
		func(i int, root context.Context) {
			builder := peycb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PoiExtendYokeeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, peycb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, peycb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, peycb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (peycb *PoiExtendYokeeCreateBulk) SaveX(ctx context.Context) []*PoiExtendYokee {
	v, err := peycb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (peycb *PoiExtendYokeeCreateBulk) Exec(ctx context.Context) error {
	_, err := peycb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (peycb *PoiExtendYokeeCreateBulk) ExecX(ctx context.Context) {
	if err := peycb.Exec(ctx); err != nil {
		panic(err)
	}
}
