// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/orderbilling"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
)

// OrderBillingDelete is the builder for deleting a OrderBilling entity.
type OrderBillingDelete struct {
	config
	hooks    []Hook
	mutation *OrderBillingMutation
}

// Where appends a list predicates to the OrderBillingDelete builder.
func (obd *OrderBillingDelete) Where(ps ...predicate.OrderBilling) *OrderBillingDelete {
	obd.mutation.Where(ps...)
	return obd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (obd *OrderBillingDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, obd.sqlExec, obd.mutation, obd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (obd *OrderBillingDelete) ExecX(ctx context.Context) int {
	n, err := obd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (obd *OrderBillingDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(orderbilling.Table, sqlgraph.NewFieldSpec(orderbilling.FieldID, field.TypeInt))
	if ps := obd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, obd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	obd.mutation.done = true
	return affected, err
}

// OrderBillingDeleteOne is the builder for deleting a single OrderBilling entity.
type OrderBillingDeleteOne struct {
	obd *OrderBillingDelete
}

// Where appends a list predicates to the OrderBillingDelete builder.
func (obdo *OrderBillingDeleteOne) Where(ps ...predicate.OrderBilling) *OrderBillingDeleteOne {
	obdo.obd.mutation.Where(ps...)
	return obdo
}

// Exec executes the deletion query.
func (obdo *OrderBillingDeleteOne) Exec(ctx context.Context) error {
	n, err := obdo.obd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{orderbilling.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (obdo *OrderBillingDeleteOne) ExecX(ctx context.Context) {
	if err := obdo.Exec(ctx); err != nil {
		panic(err)
	}
}
