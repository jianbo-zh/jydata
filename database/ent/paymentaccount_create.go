// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/paymentaccount"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PaymentAccountCreate is the builder for creating a PaymentAccount entity.
type PaymentAccountCreate struct {
	config
	mutation *PaymentAccountMutation
	hooks    []Hook
}

// SetMchName sets the "mch_name" field.
func (pac *PaymentAccountCreate) SetMchName(s string) *PaymentAccountCreate {
	pac.mutation.SetMchName(s)
	return pac
}

// SetMchID sets the "mch_id" field.
func (pac *PaymentAccountCreate) SetMchID(s string) *PaymentAccountCreate {
	pac.mutation.SetMchID(s)
	return pac
}

// SetMchCertSn sets the "mch_cert_sn" field.
func (pac *PaymentAccountCreate) SetMchCertSn(s string) *PaymentAccountCreate {
	pac.mutation.SetMchCertSn(s)
	return pac
}

// SetMchApiv3Key sets the "mch_apiv3_key" field.
func (pac *PaymentAccountCreate) SetMchApiv3Key(s string) *PaymentAccountCreate {
	pac.mutation.SetMchApiv3Key(s)
	return pac
}

// SetMchPrivateKey sets the "mch_private_key" field.
func (pac *PaymentAccountCreate) SetMchPrivateKey(s string) *PaymentAccountCreate {
	pac.mutation.SetMchPrivateKey(s)
	return pac
}

// SetCreateTime sets the "create_time" field.
func (pac *PaymentAccountCreate) SetCreateTime(t time.Time) *PaymentAccountCreate {
	pac.mutation.SetCreateTime(t)
	return pac
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (pac *PaymentAccountCreate) SetNillableCreateTime(t *time.Time) *PaymentAccountCreate {
	if t != nil {
		pac.SetCreateTime(*t)
	}
	return pac
}

// SetUpdateTime sets the "update_time" field.
func (pac *PaymentAccountCreate) SetUpdateTime(t time.Time) *PaymentAccountCreate {
	pac.mutation.SetUpdateTime(t)
	return pac
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (pac *PaymentAccountCreate) SetNillableUpdateTime(t *time.Time) *PaymentAccountCreate {
	if t != nil {
		pac.SetUpdateTime(*t)
	}
	return pac
}

// SetID sets the "id" field.
func (pac *PaymentAccountCreate) SetID(i int) *PaymentAccountCreate {
	pac.mutation.SetID(i)
	return pac
}

// Mutation returns the PaymentAccountMutation object of the builder.
func (pac *PaymentAccountCreate) Mutation() *PaymentAccountMutation {
	return pac.mutation
}

// Save creates the PaymentAccount in the database.
func (pac *PaymentAccountCreate) Save(ctx context.Context) (*PaymentAccount, error) {
	pac.defaults()
	return withHooks(ctx, pac.sqlSave, pac.mutation, pac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pac *PaymentAccountCreate) SaveX(ctx context.Context) *PaymentAccount {
	v, err := pac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pac *PaymentAccountCreate) Exec(ctx context.Context) error {
	_, err := pac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pac *PaymentAccountCreate) ExecX(ctx context.Context) {
	if err := pac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pac *PaymentAccountCreate) defaults() {
	if _, ok := pac.mutation.CreateTime(); !ok {
		v := paymentaccount.DefaultCreateTime()
		pac.mutation.SetCreateTime(v)
	}
	if _, ok := pac.mutation.UpdateTime(); !ok {
		v := paymentaccount.DefaultUpdateTime()
		pac.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pac *PaymentAccountCreate) check() error {
	if _, ok := pac.mutation.MchName(); !ok {
		return &ValidationError{Name: "mch_name", err: errors.New(`ent: missing required field "PaymentAccount.mch_name"`)}
	}
	if _, ok := pac.mutation.MchID(); !ok {
		return &ValidationError{Name: "mch_id", err: errors.New(`ent: missing required field "PaymentAccount.mch_id"`)}
	}
	if _, ok := pac.mutation.MchCertSn(); !ok {
		return &ValidationError{Name: "mch_cert_sn", err: errors.New(`ent: missing required field "PaymentAccount.mch_cert_sn"`)}
	}
	if _, ok := pac.mutation.MchApiv3Key(); !ok {
		return &ValidationError{Name: "mch_apiv3_key", err: errors.New(`ent: missing required field "PaymentAccount.mch_apiv3_key"`)}
	}
	if _, ok := pac.mutation.MchPrivateKey(); !ok {
		return &ValidationError{Name: "mch_private_key", err: errors.New(`ent: missing required field "PaymentAccount.mch_private_key"`)}
	}
	if _, ok := pac.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "PaymentAccount.create_time"`)}
	}
	if _, ok := pac.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "PaymentAccount.update_time"`)}
	}
	return nil
}

func (pac *PaymentAccountCreate) sqlSave(ctx context.Context) (*PaymentAccount, error) {
	if err := pac.check(); err != nil {
		return nil, err
	}
	_node, _spec := pac.createSpec()
	if err := sqlgraph.CreateNode(ctx, pac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	pac.mutation.id = &_node.ID
	pac.mutation.done = true
	return _node, nil
}

func (pac *PaymentAccountCreate) createSpec() (*PaymentAccount, *sqlgraph.CreateSpec) {
	var (
		_node = &PaymentAccount{config: pac.config}
		_spec = sqlgraph.NewCreateSpec(paymentaccount.Table, sqlgraph.NewFieldSpec(paymentaccount.FieldID, field.TypeInt))
	)
	if id, ok := pac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pac.mutation.MchName(); ok {
		_spec.SetField(paymentaccount.FieldMchName, field.TypeString, value)
		_node.MchName = value
	}
	if value, ok := pac.mutation.MchID(); ok {
		_spec.SetField(paymentaccount.FieldMchID, field.TypeString, value)
		_node.MchID = value
	}
	if value, ok := pac.mutation.MchCertSn(); ok {
		_spec.SetField(paymentaccount.FieldMchCertSn, field.TypeString, value)
		_node.MchCertSn = value
	}
	if value, ok := pac.mutation.MchApiv3Key(); ok {
		_spec.SetField(paymentaccount.FieldMchApiv3Key, field.TypeString, value)
		_node.MchApiv3Key = value
	}
	if value, ok := pac.mutation.MchPrivateKey(); ok {
		_spec.SetField(paymentaccount.FieldMchPrivateKey, field.TypeString, value)
		_node.MchPrivateKey = value
	}
	if value, ok := pac.mutation.CreateTime(); ok {
		_spec.SetField(paymentaccount.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := pac.mutation.UpdateTime(); ok {
		_spec.SetField(paymentaccount.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// PaymentAccountCreateBulk is the builder for creating many PaymentAccount entities in bulk.
type PaymentAccountCreateBulk struct {
	config
	err      error
	builders []*PaymentAccountCreate
}

// Save creates the PaymentAccount entities in the database.
func (pacb *PaymentAccountCreateBulk) Save(ctx context.Context) ([]*PaymentAccount, error) {
	if pacb.err != nil {
		return nil, pacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pacb.builders))
	nodes := make([]*PaymentAccount, len(pacb.builders))
	mutators := make([]Mutator, len(pacb.builders))
	for i := range pacb.builders {
		func(i int, root context.Context) {
			builder := pacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PaymentAccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pacb *PaymentAccountCreateBulk) SaveX(ctx context.Context) []*PaymentAccount {
	v, err := pacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pacb *PaymentAccountCreateBulk) Exec(ctx context.Context) error {
	_, err := pacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pacb *PaymentAccountCreateBulk) ExecX(ctx context.Context) {
	if err := pacb.Exec(ctx); err != nil {
		panic(err)
	}
}
