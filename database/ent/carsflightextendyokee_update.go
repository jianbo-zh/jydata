// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/carsflightextendyokee"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarsFlightExtendYokeeUpdate is the builder for updating CarsFlightExtendYokee entities.
type CarsFlightExtendYokeeUpdate struct {
	config
	hooks    []Hook
	mutation *CarsFlightExtendYokeeMutation
}

// Where appends a list predicates to the CarsFlightExtendYokeeUpdate builder.
func (cfeyu *CarsFlightExtendYokeeUpdate) Where(ps ...predicate.CarsFlightExtendYokee) *CarsFlightExtendYokeeUpdate {
	cfeyu.mutation.Where(ps...)
	return cfeyu
}

// SetFlightID sets the "flight_id" field.
func (cfeyu *CarsFlightExtendYokeeUpdate) SetFlightID(i int) *CarsFlightExtendYokeeUpdate {
	cfeyu.mutation.ResetFlightID()
	cfeyu.mutation.SetFlightID(i)
	return cfeyu
}

// SetNillableFlightID sets the "flight_id" field if the given value is not nil.
func (cfeyu *CarsFlightExtendYokeeUpdate) SetNillableFlightID(i *int) *CarsFlightExtendYokeeUpdate {
	if i != nil {
		cfeyu.SetFlightID(*i)
	}
	return cfeyu
}

// AddFlightID adds i to the "flight_id" field.
func (cfeyu *CarsFlightExtendYokeeUpdate) AddFlightID(i int) *CarsFlightExtendYokeeUpdate {
	cfeyu.mutation.AddFlightID(i)
	return cfeyu
}

// SetYokeeDispatchID sets the "yokee_dispatch_id" field.
func (cfeyu *CarsFlightExtendYokeeUpdate) SetYokeeDispatchID(i int) *CarsFlightExtendYokeeUpdate {
	cfeyu.mutation.ResetYokeeDispatchID()
	cfeyu.mutation.SetYokeeDispatchID(i)
	return cfeyu
}

// SetNillableYokeeDispatchID sets the "yokee_dispatch_id" field if the given value is not nil.
func (cfeyu *CarsFlightExtendYokeeUpdate) SetNillableYokeeDispatchID(i *int) *CarsFlightExtendYokeeUpdate {
	if i != nil {
		cfeyu.SetYokeeDispatchID(*i)
	}
	return cfeyu
}

// AddYokeeDispatchID adds i to the "yokee_dispatch_id" field.
func (cfeyu *CarsFlightExtendYokeeUpdate) AddYokeeDispatchID(i int) *CarsFlightExtendYokeeUpdate {
	cfeyu.mutation.AddYokeeDispatchID(i)
	return cfeyu
}

// SetYokeeSpeedLimit sets the "yokee_speed_limit" field.
func (cfeyu *CarsFlightExtendYokeeUpdate) SetYokeeSpeedLimit(i int) *CarsFlightExtendYokeeUpdate {
	cfeyu.mutation.ResetYokeeSpeedLimit()
	cfeyu.mutation.SetYokeeSpeedLimit(i)
	return cfeyu
}

// SetNillableYokeeSpeedLimit sets the "yokee_speed_limit" field if the given value is not nil.
func (cfeyu *CarsFlightExtendYokeeUpdate) SetNillableYokeeSpeedLimit(i *int) *CarsFlightExtendYokeeUpdate {
	if i != nil {
		cfeyu.SetYokeeSpeedLimit(*i)
	}
	return cfeyu
}

// AddYokeeSpeedLimit adds i to the "yokee_speed_limit" field.
func (cfeyu *CarsFlightExtendYokeeUpdate) AddYokeeSpeedLimit(i int) *CarsFlightExtendYokeeUpdate {
	cfeyu.mutation.AddYokeeSpeedLimit(i)
	return cfeyu
}

// SetUpdateTime sets the "update_time" field.
func (cfeyu *CarsFlightExtendYokeeUpdate) SetUpdateTime(t time.Time) *CarsFlightExtendYokeeUpdate {
	cfeyu.mutation.SetUpdateTime(t)
	return cfeyu
}

// Mutation returns the CarsFlightExtendYokeeMutation object of the builder.
func (cfeyu *CarsFlightExtendYokeeUpdate) Mutation() *CarsFlightExtendYokeeMutation {
	return cfeyu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cfeyu *CarsFlightExtendYokeeUpdate) Save(ctx context.Context) (int, error) {
	cfeyu.defaults()
	return withHooks(ctx, cfeyu.sqlSave, cfeyu.mutation, cfeyu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cfeyu *CarsFlightExtendYokeeUpdate) SaveX(ctx context.Context) int {
	affected, err := cfeyu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cfeyu *CarsFlightExtendYokeeUpdate) Exec(ctx context.Context) error {
	_, err := cfeyu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cfeyu *CarsFlightExtendYokeeUpdate) ExecX(ctx context.Context) {
	if err := cfeyu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cfeyu *CarsFlightExtendYokeeUpdate) defaults() {
	if _, ok := cfeyu.mutation.UpdateTime(); !ok {
		v := carsflightextendyokee.UpdateDefaultUpdateTime()
		cfeyu.mutation.SetUpdateTime(v)
	}
}

func (cfeyu *CarsFlightExtendYokeeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(carsflightextendyokee.Table, carsflightextendyokee.Columns, sqlgraph.NewFieldSpec(carsflightextendyokee.FieldID, field.TypeInt))
	if ps := cfeyu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cfeyu.mutation.FlightID(); ok {
		_spec.SetField(carsflightextendyokee.FieldFlightID, field.TypeInt, value)
	}
	if value, ok := cfeyu.mutation.AddedFlightID(); ok {
		_spec.AddField(carsflightextendyokee.FieldFlightID, field.TypeInt, value)
	}
	if value, ok := cfeyu.mutation.YokeeDispatchID(); ok {
		_spec.SetField(carsflightextendyokee.FieldYokeeDispatchID, field.TypeInt, value)
	}
	if value, ok := cfeyu.mutation.AddedYokeeDispatchID(); ok {
		_spec.AddField(carsflightextendyokee.FieldYokeeDispatchID, field.TypeInt, value)
	}
	if value, ok := cfeyu.mutation.YokeeSpeedLimit(); ok {
		_spec.SetField(carsflightextendyokee.FieldYokeeSpeedLimit, field.TypeInt, value)
	}
	if value, ok := cfeyu.mutation.AddedYokeeSpeedLimit(); ok {
		_spec.AddField(carsflightextendyokee.FieldYokeeSpeedLimit, field.TypeInt, value)
	}
	if value, ok := cfeyu.mutation.UpdateTime(); ok {
		_spec.SetField(carsflightextendyokee.FieldUpdateTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cfeyu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carsflightextendyokee.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cfeyu.mutation.done = true
	return n, nil
}

// CarsFlightExtendYokeeUpdateOne is the builder for updating a single CarsFlightExtendYokee entity.
type CarsFlightExtendYokeeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CarsFlightExtendYokeeMutation
}

// SetFlightID sets the "flight_id" field.
func (cfeyuo *CarsFlightExtendYokeeUpdateOne) SetFlightID(i int) *CarsFlightExtendYokeeUpdateOne {
	cfeyuo.mutation.ResetFlightID()
	cfeyuo.mutation.SetFlightID(i)
	return cfeyuo
}

// SetNillableFlightID sets the "flight_id" field if the given value is not nil.
func (cfeyuo *CarsFlightExtendYokeeUpdateOne) SetNillableFlightID(i *int) *CarsFlightExtendYokeeUpdateOne {
	if i != nil {
		cfeyuo.SetFlightID(*i)
	}
	return cfeyuo
}

// AddFlightID adds i to the "flight_id" field.
func (cfeyuo *CarsFlightExtendYokeeUpdateOne) AddFlightID(i int) *CarsFlightExtendYokeeUpdateOne {
	cfeyuo.mutation.AddFlightID(i)
	return cfeyuo
}

// SetYokeeDispatchID sets the "yokee_dispatch_id" field.
func (cfeyuo *CarsFlightExtendYokeeUpdateOne) SetYokeeDispatchID(i int) *CarsFlightExtendYokeeUpdateOne {
	cfeyuo.mutation.ResetYokeeDispatchID()
	cfeyuo.mutation.SetYokeeDispatchID(i)
	return cfeyuo
}

// SetNillableYokeeDispatchID sets the "yokee_dispatch_id" field if the given value is not nil.
func (cfeyuo *CarsFlightExtendYokeeUpdateOne) SetNillableYokeeDispatchID(i *int) *CarsFlightExtendYokeeUpdateOne {
	if i != nil {
		cfeyuo.SetYokeeDispatchID(*i)
	}
	return cfeyuo
}

// AddYokeeDispatchID adds i to the "yokee_dispatch_id" field.
func (cfeyuo *CarsFlightExtendYokeeUpdateOne) AddYokeeDispatchID(i int) *CarsFlightExtendYokeeUpdateOne {
	cfeyuo.mutation.AddYokeeDispatchID(i)
	return cfeyuo
}

// SetYokeeSpeedLimit sets the "yokee_speed_limit" field.
func (cfeyuo *CarsFlightExtendYokeeUpdateOne) SetYokeeSpeedLimit(i int) *CarsFlightExtendYokeeUpdateOne {
	cfeyuo.mutation.ResetYokeeSpeedLimit()
	cfeyuo.mutation.SetYokeeSpeedLimit(i)
	return cfeyuo
}

// SetNillableYokeeSpeedLimit sets the "yokee_speed_limit" field if the given value is not nil.
func (cfeyuo *CarsFlightExtendYokeeUpdateOne) SetNillableYokeeSpeedLimit(i *int) *CarsFlightExtendYokeeUpdateOne {
	if i != nil {
		cfeyuo.SetYokeeSpeedLimit(*i)
	}
	return cfeyuo
}

// AddYokeeSpeedLimit adds i to the "yokee_speed_limit" field.
func (cfeyuo *CarsFlightExtendYokeeUpdateOne) AddYokeeSpeedLimit(i int) *CarsFlightExtendYokeeUpdateOne {
	cfeyuo.mutation.AddYokeeSpeedLimit(i)
	return cfeyuo
}

// SetUpdateTime sets the "update_time" field.
func (cfeyuo *CarsFlightExtendYokeeUpdateOne) SetUpdateTime(t time.Time) *CarsFlightExtendYokeeUpdateOne {
	cfeyuo.mutation.SetUpdateTime(t)
	return cfeyuo
}

// Mutation returns the CarsFlightExtendYokeeMutation object of the builder.
func (cfeyuo *CarsFlightExtendYokeeUpdateOne) Mutation() *CarsFlightExtendYokeeMutation {
	return cfeyuo.mutation
}

// Where appends a list predicates to the CarsFlightExtendYokeeUpdate builder.
func (cfeyuo *CarsFlightExtendYokeeUpdateOne) Where(ps ...predicate.CarsFlightExtendYokee) *CarsFlightExtendYokeeUpdateOne {
	cfeyuo.mutation.Where(ps...)
	return cfeyuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cfeyuo *CarsFlightExtendYokeeUpdateOne) Select(field string, fields ...string) *CarsFlightExtendYokeeUpdateOne {
	cfeyuo.fields = append([]string{field}, fields...)
	return cfeyuo
}

// Save executes the query and returns the updated CarsFlightExtendYokee entity.
func (cfeyuo *CarsFlightExtendYokeeUpdateOne) Save(ctx context.Context) (*CarsFlightExtendYokee, error) {
	cfeyuo.defaults()
	return withHooks(ctx, cfeyuo.sqlSave, cfeyuo.mutation, cfeyuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cfeyuo *CarsFlightExtendYokeeUpdateOne) SaveX(ctx context.Context) *CarsFlightExtendYokee {
	node, err := cfeyuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cfeyuo *CarsFlightExtendYokeeUpdateOne) Exec(ctx context.Context) error {
	_, err := cfeyuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cfeyuo *CarsFlightExtendYokeeUpdateOne) ExecX(ctx context.Context) {
	if err := cfeyuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cfeyuo *CarsFlightExtendYokeeUpdateOne) defaults() {
	if _, ok := cfeyuo.mutation.UpdateTime(); !ok {
		v := carsflightextendyokee.UpdateDefaultUpdateTime()
		cfeyuo.mutation.SetUpdateTime(v)
	}
}

func (cfeyuo *CarsFlightExtendYokeeUpdateOne) sqlSave(ctx context.Context) (_node *CarsFlightExtendYokee, err error) {
	_spec := sqlgraph.NewUpdateSpec(carsflightextendyokee.Table, carsflightextendyokee.Columns, sqlgraph.NewFieldSpec(carsflightextendyokee.FieldID, field.TypeInt))
	id, ok := cfeyuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CarsFlightExtendYokee.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cfeyuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carsflightextendyokee.FieldID)
		for _, f := range fields {
			if !carsflightextendyokee.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != carsflightextendyokee.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cfeyuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cfeyuo.mutation.FlightID(); ok {
		_spec.SetField(carsflightextendyokee.FieldFlightID, field.TypeInt, value)
	}
	if value, ok := cfeyuo.mutation.AddedFlightID(); ok {
		_spec.AddField(carsflightextendyokee.FieldFlightID, field.TypeInt, value)
	}
	if value, ok := cfeyuo.mutation.YokeeDispatchID(); ok {
		_spec.SetField(carsflightextendyokee.FieldYokeeDispatchID, field.TypeInt, value)
	}
	if value, ok := cfeyuo.mutation.AddedYokeeDispatchID(); ok {
		_spec.AddField(carsflightextendyokee.FieldYokeeDispatchID, field.TypeInt, value)
	}
	if value, ok := cfeyuo.mutation.YokeeSpeedLimit(); ok {
		_spec.SetField(carsflightextendyokee.FieldYokeeSpeedLimit, field.TypeInt, value)
	}
	if value, ok := cfeyuo.mutation.AddedYokeeSpeedLimit(); ok {
		_spec.AddField(carsflightextendyokee.FieldYokeeSpeedLimit, field.TypeInt, value)
	}
	if value, ok := cfeyuo.mutation.UpdateTime(); ok {
		_spec.SetField(carsflightextendyokee.FieldUpdateTime, field.TypeTime, value)
	}
	_node = &CarsFlightExtendYokee{config: cfeyuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cfeyuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carsflightextendyokee.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cfeyuo.mutation.done = true
	return _node, nil
}
