// Code generated by ent, DO NOT EDIT.

package statsdaily

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the statsdaily type in the database.
	Label = "stats_daily"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldScenicAreaID holds the string denoting the scenic_area_id field in the database.
	FieldScenicAreaID = "scenic_area_id"
	// FieldY holds the string denoting the y field in the database.
	FieldY = "y"
	// FieldYm holds the string denoting the ym field in the database.
	FieldYm = "ym"
	// FieldYmd holds the string denoting the ymd field in the database.
	FieldYmd = "ymd"
	// FieldOrderAmount holds the string denoting the order_amount field in the database.
	FieldOrderAmount = "order_amount"
	// FieldOrderCount holds the string denoting the order_count field in the database.
	FieldOrderCount = "order_count"
	// FieldOrderDuration holds the string denoting the order_duration field in the database.
	FieldOrderDuration = "order_duration"
	// FieldOrderDistance holds the string denoting the order_distance field in the database.
	FieldOrderDistance = "order_distance"
	// FieldRegisterUserCount holds the string denoting the register_user_count field in the database.
	FieldRegisterUserCount = "register_user_count"
	// FieldOrderUserCount holds the string denoting the order_user_count field in the database.
	FieldOrderUserCount = "order_user_count"
	// FieldOperationCarCount holds the string denoting the operation_car_count field in the database.
	FieldOperationCarCount = "operation_car_count"
	// FieldOperationCarDuration holds the string denoting the operation_car_duration field in the database.
	FieldOperationCarDuration = "operation_car_duration"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// Table holds the table name of the statsdaily in the database.
	Table = "stats_dailies"
)

// Columns holds all SQL columns for statsdaily fields.
var Columns = []string{
	FieldID,
	FieldScenicAreaID,
	FieldY,
	FieldYm,
	FieldYmd,
	FieldOrderAmount,
	FieldOrderCount,
	FieldOrderDuration,
	FieldOrderDistance,
	FieldRegisterUserCount,
	FieldOrderUserCount,
	FieldOperationCarCount,
	FieldOperationCarDuration,
	FieldCreateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultOperationCarDuration holds the default value on creation for the "operation_car_duration" field.
	DefaultOperationCarDuration int
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
)

// OrderOption defines the ordering options for the StatsDaily queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByScenicAreaID orders the results by the scenic_area_id field.
func ByScenicAreaID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScenicAreaID, opts...).ToFunc()
}

// ByY orders the results by the y field.
func ByY(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldY, opts...).ToFunc()
}

// ByYm orders the results by the ym field.
func ByYm(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldYm, opts...).ToFunc()
}

// ByYmd orders the results by the ymd field.
func ByYmd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldYmd, opts...).ToFunc()
}

// ByOrderAmount orders the results by the order_amount field.
func ByOrderAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderAmount, opts...).ToFunc()
}

// ByOrderCount orders the results by the order_count field.
func ByOrderCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderCount, opts...).ToFunc()
}

// ByOrderDuration orders the results by the order_duration field.
func ByOrderDuration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderDuration, opts...).ToFunc()
}

// ByOrderDistance orders the results by the order_distance field.
func ByOrderDistance(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderDistance, opts...).ToFunc()
}

// ByRegisterUserCount orders the results by the register_user_count field.
func ByRegisterUserCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegisterUserCount, opts...).ToFunc()
}

// ByOrderUserCount orders the results by the order_user_count field.
func ByOrderUserCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderUserCount, opts...).ToFunc()
}

// ByOperationCarCount orders the results by the operation_car_count field.
func ByOperationCarCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOperationCarCount, opts...).ToFunc()
}

// ByOperationCarDuration orders the results by the operation_car_duration field.
func ByOperationCarDuration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOperationCarDuration, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}
