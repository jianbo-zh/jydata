// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/carcumulative"
)

// CarCumulativeCreate is the builder for creating a CarCumulative entity.
type CarCumulativeCreate struct {
	config
	mutation *CarCumulativeMutation
	hooks    []Hook
}

// SetCarID sets the "car_id" field.
func (ccc *CarCumulativeCreate) SetCarID(i int) *CarCumulativeCreate {
	ccc.mutation.SetCarID(i)
	return ccc
}

// SetDeviceID sets the "device_id" field.
func (ccc *CarCumulativeCreate) SetDeviceID(s string) *CarCumulativeCreate {
	ccc.mutation.SetDeviceID(s)
	return ccc
}

// SetOperationLockDuration sets the "operation_lock_duration" field.
func (ccc *CarCumulativeCreate) SetOperationLockDuration(f float32) *CarCumulativeCreate {
	ccc.mutation.SetOperationLockDuration(f)
	return ccc
}

// SetNillableOperationLockDuration sets the "operation_lock_duration" field if the given value is not nil.
func (ccc *CarCumulativeCreate) SetNillableOperationLockDuration(f *float32) *CarCumulativeCreate {
	if f != nil {
		ccc.SetOperationLockDuration(*f)
	}
	return ccc
}

// SetOperationManualDuration sets the "operation_manual_duration" field.
func (ccc *CarCumulativeCreate) SetOperationManualDuration(f float32) *CarCumulativeCreate {
	ccc.mutation.SetOperationManualDuration(f)
	return ccc
}

// SetNillableOperationManualDuration sets the "operation_manual_duration" field if the given value is not nil.
func (ccc *CarCumulativeCreate) SetNillableOperationManualDuration(f *float32) *CarCumulativeCreate {
	if f != nil {
		ccc.SetOperationManualDuration(*f)
	}
	return ccc
}

// SetOperationAutoDuration sets the "operation_auto_duration" field.
func (ccc *CarCumulativeCreate) SetOperationAutoDuration(f float32) *CarCumulativeCreate {
	ccc.mutation.SetOperationAutoDuration(f)
	return ccc
}

// SetNillableOperationAutoDuration sets the "operation_auto_duration" field if the given value is not nil.
func (ccc *CarCumulativeCreate) SetNillableOperationAutoDuration(f *float32) *CarCumulativeCreate {
	if f != nil {
		ccc.SetOperationAutoDuration(*f)
	}
	return ccc
}

// SetOperationFaultDuration sets the "operation_fault_duration" field.
func (ccc *CarCumulativeCreate) SetOperationFaultDuration(f float32) *CarCumulativeCreate {
	ccc.mutation.SetOperationFaultDuration(f)
	return ccc
}

// SetNillableOperationFaultDuration sets the "operation_fault_duration" field if the given value is not nil.
func (ccc *CarCumulativeCreate) SetNillableOperationFaultDuration(f *float32) *CarCumulativeCreate {
	if f != nil {
		ccc.SetOperationFaultDuration(*f)
	}
	return ccc
}

// SetOperationLockTimes sets the "operation_lock_times" field.
func (ccc *CarCumulativeCreate) SetOperationLockTimes(u uint32) *CarCumulativeCreate {
	ccc.mutation.SetOperationLockTimes(u)
	return ccc
}

// SetNillableOperationLockTimes sets the "operation_lock_times" field if the given value is not nil.
func (ccc *CarCumulativeCreate) SetNillableOperationLockTimes(u *uint32) *CarCumulativeCreate {
	if u != nil {
		ccc.SetOperationLockTimes(*u)
	}
	return ccc
}

// SetOperationManualTimes sets the "operation_manual_times" field.
func (ccc *CarCumulativeCreate) SetOperationManualTimes(u uint32) *CarCumulativeCreate {
	ccc.mutation.SetOperationManualTimes(u)
	return ccc
}

// SetNillableOperationManualTimes sets the "operation_manual_times" field if the given value is not nil.
func (ccc *CarCumulativeCreate) SetNillableOperationManualTimes(u *uint32) *CarCumulativeCreate {
	if u != nil {
		ccc.SetOperationManualTimes(*u)
	}
	return ccc
}

// SetOperationAutoTimes sets the "operation_auto_times" field.
func (ccc *CarCumulativeCreate) SetOperationAutoTimes(u uint32) *CarCumulativeCreate {
	ccc.mutation.SetOperationAutoTimes(u)
	return ccc
}

// SetNillableOperationAutoTimes sets the "operation_auto_times" field if the given value is not nil.
func (ccc *CarCumulativeCreate) SetNillableOperationAutoTimes(u *uint32) *CarCumulativeCreate {
	if u != nil {
		ccc.SetOperationAutoTimes(*u)
	}
	return ccc
}

// SetOperationFaultTimes sets the "operation_fault_times" field.
func (ccc *CarCumulativeCreate) SetOperationFaultTimes(u uint32) *CarCumulativeCreate {
	ccc.mutation.SetOperationFaultTimes(u)
	return ccc
}

// SetNillableOperationFaultTimes sets the "operation_fault_times" field if the given value is not nil.
func (ccc *CarCumulativeCreate) SetNillableOperationFaultTimes(u *uint32) *CarCumulativeCreate {
	if u != nil {
		ccc.SetOperationFaultTimes(*u)
	}
	return ccc
}

// SetOperationManualMileage sets the "operation_manual_mileage" field.
func (ccc *CarCumulativeCreate) SetOperationManualMileage(f float32) *CarCumulativeCreate {
	ccc.mutation.SetOperationManualMileage(f)
	return ccc
}

// SetNillableOperationManualMileage sets the "operation_manual_mileage" field if the given value is not nil.
func (ccc *CarCumulativeCreate) SetNillableOperationManualMileage(f *float32) *CarCumulativeCreate {
	if f != nil {
		ccc.SetOperationManualMileage(*f)
	}
	return ccc
}

// SetOperationAutoMileage sets the "operation_auto_mileage" field.
func (ccc *CarCumulativeCreate) SetOperationAutoMileage(f float32) *CarCumulativeCreate {
	ccc.mutation.SetOperationAutoMileage(f)
	return ccc
}

// SetNillableOperationAutoMileage sets the "operation_auto_mileage" field if the given value is not nil.
func (ccc *CarCumulativeCreate) SetNillableOperationAutoMileage(f *float32) *CarCumulativeCreate {
	if f != nil {
		ccc.SetOperationAutoMileage(*f)
	}
	return ccc
}

// SetMaintainLockDuration sets the "maintain_lock_duration" field.
func (ccc *CarCumulativeCreate) SetMaintainLockDuration(f float32) *CarCumulativeCreate {
	ccc.mutation.SetMaintainLockDuration(f)
	return ccc
}

// SetNillableMaintainLockDuration sets the "maintain_lock_duration" field if the given value is not nil.
func (ccc *CarCumulativeCreate) SetNillableMaintainLockDuration(f *float32) *CarCumulativeCreate {
	if f != nil {
		ccc.SetMaintainLockDuration(*f)
	}
	return ccc
}

// SetMaintainManualDuration sets the "maintain_manual_duration" field.
func (ccc *CarCumulativeCreate) SetMaintainManualDuration(f float32) *CarCumulativeCreate {
	ccc.mutation.SetMaintainManualDuration(f)
	return ccc
}

// SetNillableMaintainManualDuration sets the "maintain_manual_duration" field if the given value is not nil.
func (ccc *CarCumulativeCreate) SetNillableMaintainManualDuration(f *float32) *CarCumulativeCreate {
	if f != nil {
		ccc.SetMaintainManualDuration(*f)
	}
	return ccc
}

// SetMaintainAutoDuration sets the "maintain_auto_duration" field.
func (ccc *CarCumulativeCreate) SetMaintainAutoDuration(f float32) *CarCumulativeCreate {
	ccc.mutation.SetMaintainAutoDuration(f)
	return ccc
}

// SetNillableMaintainAutoDuration sets the "maintain_auto_duration" field if the given value is not nil.
func (ccc *CarCumulativeCreate) SetNillableMaintainAutoDuration(f *float32) *CarCumulativeCreate {
	if f != nil {
		ccc.SetMaintainAutoDuration(*f)
	}
	return ccc
}

// SetMaintainRemoteDuration sets the "maintain_remote_duration" field.
func (ccc *CarCumulativeCreate) SetMaintainRemoteDuration(f float32) *CarCumulativeCreate {
	ccc.mutation.SetMaintainRemoteDuration(f)
	return ccc
}

// SetNillableMaintainRemoteDuration sets the "maintain_remote_duration" field if the given value is not nil.
func (ccc *CarCumulativeCreate) SetNillableMaintainRemoteDuration(f *float32) *CarCumulativeCreate {
	if f != nil {
		ccc.SetMaintainRemoteDuration(*f)
	}
	return ccc
}

// SetMaintainFaultDuration sets the "maintain_fault_duration" field.
func (ccc *CarCumulativeCreate) SetMaintainFaultDuration(f float32) *CarCumulativeCreate {
	ccc.mutation.SetMaintainFaultDuration(f)
	return ccc
}

// SetNillableMaintainFaultDuration sets the "maintain_fault_duration" field if the given value is not nil.
func (ccc *CarCumulativeCreate) SetNillableMaintainFaultDuration(f *float32) *CarCumulativeCreate {
	if f != nil {
		ccc.SetMaintainFaultDuration(*f)
	}
	return ccc
}

// SetMaintainLockTimes sets the "maintain_lock_times" field.
func (ccc *CarCumulativeCreate) SetMaintainLockTimes(u uint32) *CarCumulativeCreate {
	ccc.mutation.SetMaintainLockTimes(u)
	return ccc
}

// SetNillableMaintainLockTimes sets the "maintain_lock_times" field if the given value is not nil.
func (ccc *CarCumulativeCreate) SetNillableMaintainLockTimes(u *uint32) *CarCumulativeCreate {
	if u != nil {
		ccc.SetMaintainLockTimes(*u)
	}
	return ccc
}

// SetMaintainManualTimes sets the "maintain_manual_times" field.
func (ccc *CarCumulativeCreate) SetMaintainManualTimes(u uint32) *CarCumulativeCreate {
	ccc.mutation.SetMaintainManualTimes(u)
	return ccc
}

// SetNillableMaintainManualTimes sets the "maintain_manual_times" field if the given value is not nil.
func (ccc *CarCumulativeCreate) SetNillableMaintainManualTimes(u *uint32) *CarCumulativeCreate {
	if u != nil {
		ccc.SetMaintainManualTimes(*u)
	}
	return ccc
}

// SetMaintainAutoTimes sets the "maintain_auto_times" field.
func (ccc *CarCumulativeCreate) SetMaintainAutoTimes(u uint32) *CarCumulativeCreate {
	ccc.mutation.SetMaintainAutoTimes(u)
	return ccc
}

// SetNillableMaintainAutoTimes sets the "maintain_auto_times" field if the given value is not nil.
func (ccc *CarCumulativeCreate) SetNillableMaintainAutoTimes(u *uint32) *CarCumulativeCreate {
	if u != nil {
		ccc.SetMaintainAutoTimes(*u)
	}
	return ccc
}

// SetMaintainRemoteTimes sets the "maintain_remote_times" field.
func (ccc *CarCumulativeCreate) SetMaintainRemoteTimes(u uint32) *CarCumulativeCreate {
	ccc.mutation.SetMaintainRemoteTimes(u)
	return ccc
}

// SetNillableMaintainRemoteTimes sets the "maintain_remote_times" field if the given value is not nil.
func (ccc *CarCumulativeCreate) SetNillableMaintainRemoteTimes(u *uint32) *CarCumulativeCreate {
	if u != nil {
		ccc.SetMaintainRemoteTimes(*u)
	}
	return ccc
}

// SetMaintainFaultTimes sets the "maintain_fault_times" field.
func (ccc *CarCumulativeCreate) SetMaintainFaultTimes(u uint32) *CarCumulativeCreate {
	ccc.mutation.SetMaintainFaultTimes(u)
	return ccc
}

// SetNillableMaintainFaultTimes sets the "maintain_fault_times" field if the given value is not nil.
func (ccc *CarCumulativeCreate) SetNillableMaintainFaultTimes(u *uint32) *CarCumulativeCreate {
	if u != nil {
		ccc.SetMaintainFaultTimes(*u)
	}
	return ccc
}

// SetMaintainManualMileage sets the "maintain_manual_mileage" field.
func (ccc *CarCumulativeCreate) SetMaintainManualMileage(f float32) *CarCumulativeCreate {
	ccc.mutation.SetMaintainManualMileage(f)
	return ccc
}

// SetNillableMaintainManualMileage sets the "maintain_manual_mileage" field if the given value is not nil.
func (ccc *CarCumulativeCreate) SetNillableMaintainManualMileage(f *float32) *CarCumulativeCreate {
	if f != nil {
		ccc.SetMaintainManualMileage(*f)
	}
	return ccc
}

// SetMaintainAutoMileage sets the "maintain_auto_mileage" field.
func (ccc *CarCumulativeCreate) SetMaintainAutoMileage(f float32) *CarCumulativeCreate {
	ccc.mutation.SetMaintainAutoMileage(f)
	return ccc
}

// SetNillableMaintainAutoMileage sets the "maintain_auto_mileage" field if the given value is not nil.
func (ccc *CarCumulativeCreate) SetNillableMaintainAutoMileage(f *float32) *CarCumulativeCreate {
	if f != nil {
		ccc.SetMaintainAutoMileage(*f)
	}
	return ccc
}

// SetMaintainRemoteMileage sets the "maintain_remote_mileage" field.
func (ccc *CarCumulativeCreate) SetMaintainRemoteMileage(f float32) *CarCumulativeCreate {
	ccc.mutation.SetMaintainRemoteMileage(f)
	return ccc
}

// SetNillableMaintainRemoteMileage sets the "maintain_remote_mileage" field if the given value is not nil.
func (ccc *CarCumulativeCreate) SetNillableMaintainRemoteMileage(f *float32) *CarCumulativeCreate {
	if f != nil {
		ccc.SetMaintainRemoteMileage(*f)
	}
	return ccc
}

// SetAlarmTimes sets the "alarm_times" field.
func (ccc *CarCumulativeCreate) SetAlarmTimes(u uint32) *CarCumulativeCreate {
	ccc.mutation.SetAlarmTimes(u)
	return ccc
}

// SetNillableAlarmTimes sets the "alarm_times" field if the given value is not nil.
func (ccc *CarCumulativeCreate) SetNillableAlarmTimes(u *uint32) *CarCumulativeCreate {
	if u != nil {
		ccc.SetAlarmTimes(*u)
	}
	return ccc
}

// SetCreateTime sets the "create_time" field.
func (ccc *CarCumulativeCreate) SetCreateTime(t time.Time) *CarCumulativeCreate {
	ccc.mutation.SetCreateTime(t)
	return ccc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ccc *CarCumulativeCreate) SetNillableCreateTime(t *time.Time) *CarCumulativeCreate {
	if t != nil {
		ccc.SetCreateTime(*t)
	}
	return ccc
}

// SetUpdateTime sets the "update_time" field.
func (ccc *CarCumulativeCreate) SetUpdateTime(t time.Time) *CarCumulativeCreate {
	ccc.mutation.SetUpdateTime(t)
	return ccc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ccc *CarCumulativeCreate) SetNillableUpdateTime(t *time.Time) *CarCumulativeCreate {
	if t != nil {
		ccc.SetUpdateTime(*t)
	}
	return ccc
}

// SetID sets the "id" field.
func (ccc *CarCumulativeCreate) SetID(i int) *CarCumulativeCreate {
	ccc.mutation.SetID(i)
	return ccc
}

// Mutation returns the CarCumulativeMutation object of the builder.
func (ccc *CarCumulativeCreate) Mutation() *CarCumulativeMutation {
	return ccc.mutation
}

// Save creates the CarCumulative in the database.
func (ccc *CarCumulativeCreate) Save(ctx context.Context) (*CarCumulative, error) {
	ccc.defaults()
	return withHooks(ctx, ccc.sqlSave, ccc.mutation, ccc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ccc *CarCumulativeCreate) SaveX(ctx context.Context) *CarCumulative {
	v, err := ccc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccc *CarCumulativeCreate) Exec(ctx context.Context) error {
	_, err := ccc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccc *CarCumulativeCreate) ExecX(ctx context.Context) {
	if err := ccc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ccc *CarCumulativeCreate) defaults() {
	if _, ok := ccc.mutation.OperationLockDuration(); !ok {
		v := carcumulative.DefaultOperationLockDuration
		ccc.mutation.SetOperationLockDuration(v)
	}
	if _, ok := ccc.mutation.OperationManualDuration(); !ok {
		v := carcumulative.DefaultOperationManualDuration
		ccc.mutation.SetOperationManualDuration(v)
	}
	if _, ok := ccc.mutation.OperationAutoDuration(); !ok {
		v := carcumulative.DefaultOperationAutoDuration
		ccc.mutation.SetOperationAutoDuration(v)
	}
	if _, ok := ccc.mutation.OperationFaultDuration(); !ok {
		v := carcumulative.DefaultOperationFaultDuration
		ccc.mutation.SetOperationFaultDuration(v)
	}
	if _, ok := ccc.mutation.OperationLockTimes(); !ok {
		v := carcumulative.DefaultOperationLockTimes
		ccc.mutation.SetOperationLockTimes(v)
	}
	if _, ok := ccc.mutation.OperationManualTimes(); !ok {
		v := carcumulative.DefaultOperationManualTimes
		ccc.mutation.SetOperationManualTimes(v)
	}
	if _, ok := ccc.mutation.OperationAutoTimes(); !ok {
		v := carcumulative.DefaultOperationAutoTimes
		ccc.mutation.SetOperationAutoTimes(v)
	}
	if _, ok := ccc.mutation.OperationFaultTimes(); !ok {
		v := carcumulative.DefaultOperationFaultTimes
		ccc.mutation.SetOperationFaultTimes(v)
	}
	if _, ok := ccc.mutation.OperationManualMileage(); !ok {
		v := carcumulative.DefaultOperationManualMileage
		ccc.mutation.SetOperationManualMileage(v)
	}
	if _, ok := ccc.mutation.OperationAutoMileage(); !ok {
		v := carcumulative.DefaultOperationAutoMileage
		ccc.mutation.SetOperationAutoMileage(v)
	}
	if _, ok := ccc.mutation.MaintainLockDuration(); !ok {
		v := carcumulative.DefaultMaintainLockDuration
		ccc.mutation.SetMaintainLockDuration(v)
	}
	if _, ok := ccc.mutation.MaintainManualDuration(); !ok {
		v := carcumulative.DefaultMaintainManualDuration
		ccc.mutation.SetMaintainManualDuration(v)
	}
	if _, ok := ccc.mutation.MaintainAutoDuration(); !ok {
		v := carcumulative.DefaultMaintainAutoDuration
		ccc.mutation.SetMaintainAutoDuration(v)
	}
	if _, ok := ccc.mutation.MaintainRemoteDuration(); !ok {
		v := carcumulative.DefaultMaintainRemoteDuration
		ccc.mutation.SetMaintainRemoteDuration(v)
	}
	if _, ok := ccc.mutation.MaintainFaultDuration(); !ok {
		v := carcumulative.DefaultMaintainFaultDuration
		ccc.mutation.SetMaintainFaultDuration(v)
	}
	if _, ok := ccc.mutation.MaintainLockTimes(); !ok {
		v := carcumulative.DefaultMaintainLockTimes
		ccc.mutation.SetMaintainLockTimes(v)
	}
	if _, ok := ccc.mutation.MaintainManualTimes(); !ok {
		v := carcumulative.DefaultMaintainManualTimes
		ccc.mutation.SetMaintainManualTimes(v)
	}
	if _, ok := ccc.mutation.MaintainAutoTimes(); !ok {
		v := carcumulative.DefaultMaintainAutoTimes
		ccc.mutation.SetMaintainAutoTimes(v)
	}
	if _, ok := ccc.mutation.MaintainRemoteTimes(); !ok {
		v := carcumulative.DefaultMaintainRemoteTimes
		ccc.mutation.SetMaintainRemoteTimes(v)
	}
	if _, ok := ccc.mutation.MaintainFaultTimes(); !ok {
		v := carcumulative.DefaultMaintainFaultTimes
		ccc.mutation.SetMaintainFaultTimes(v)
	}
	if _, ok := ccc.mutation.MaintainManualMileage(); !ok {
		v := carcumulative.DefaultMaintainManualMileage
		ccc.mutation.SetMaintainManualMileage(v)
	}
	if _, ok := ccc.mutation.MaintainAutoMileage(); !ok {
		v := carcumulative.DefaultMaintainAutoMileage
		ccc.mutation.SetMaintainAutoMileage(v)
	}
	if _, ok := ccc.mutation.MaintainRemoteMileage(); !ok {
		v := carcumulative.DefaultMaintainRemoteMileage
		ccc.mutation.SetMaintainRemoteMileage(v)
	}
	if _, ok := ccc.mutation.AlarmTimes(); !ok {
		v := carcumulative.DefaultAlarmTimes
		ccc.mutation.SetAlarmTimes(v)
	}
	if _, ok := ccc.mutation.CreateTime(); !ok {
		v := carcumulative.DefaultCreateTime()
		ccc.mutation.SetCreateTime(v)
	}
	if _, ok := ccc.mutation.UpdateTime(); !ok {
		v := carcumulative.DefaultUpdateTime()
		ccc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccc *CarCumulativeCreate) check() error {
	if _, ok := ccc.mutation.CarID(); !ok {
		return &ValidationError{Name: "car_id", err: errors.New(`ent: missing required field "CarCumulative.car_id"`)}
	}
	if _, ok := ccc.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device_id", err: errors.New(`ent: missing required field "CarCumulative.device_id"`)}
	}
	if _, ok := ccc.mutation.OperationLockDuration(); !ok {
		return &ValidationError{Name: "operation_lock_duration", err: errors.New(`ent: missing required field "CarCumulative.operation_lock_duration"`)}
	}
	if _, ok := ccc.mutation.OperationManualDuration(); !ok {
		return &ValidationError{Name: "operation_manual_duration", err: errors.New(`ent: missing required field "CarCumulative.operation_manual_duration"`)}
	}
	if _, ok := ccc.mutation.OperationAutoDuration(); !ok {
		return &ValidationError{Name: "operation_auto_duration", err: errors.New(`ent: missing required field "CarCumulative.operation_auto_duration"`)}
	}
	if _, ok := ccc.mutation.OperationFaultDuration(); !ok {
		return &ValidationError{Name: "operation_fault_duration", err: errors.New(`ent: missing required field "CarCumulative.operation_fault_duration"`)}
	}
	if _, ok := ccc.mutation.OperationLockTimes(); !ok {
		return &ValidationError{Name: "operation_lock_times", err: errors.New(`ent: missing required field "CarCumulative.operation_lock_times"`)}
	}
	if _, ok := ccc.mutation.OperationManualTimes(); !ok {
		return &ValidationError{Name: "operation_manual_times", err: errors.New(`ent: missing required field "CarCumulative.operation_manual_times"`)}
	}
	if _, ok := ccc.mutation.OperationAutoTimes(); !ok {
		return &ValidationError{Name: "operation_auto_times", err: errors.New(`ent: missing required field "CarCumulative.operation_auto_times"`)}
	}
	if _, ok := ccc.mutation.OperationFaultTimes(); !ok {
		return &ValidationError{Name: "operation_fault_times", err: errors.New(`ent: missing required field "CarCumulative.operation_fault_times"`)}
	}
	if _, ok := ccc.mutation.OperationManualMileage(); !ok {
		return &ValidationError{Name: "operation_manual_mileage", err: errors.New(`ent: missing required field "CarCumulative.operation_manual_mileage"`)}
	}
	if _, ok := ccc.mutation.OperationAutoMileage(); !ok {
		return &ValidationError{Name: "operation_auto_mileage", err: errors.New(`ent: missing required field "CarCumulative.operation_auto_mileage"`)}
	}
	if _, ok := ccc.mutation.MaintainLockDuration(); !ok {
		return &ValidationError{Name: "maintain_lock_duration", err: errors.New(`ent: missing required field "CarCumulative.maintain_lock_duration"`)}
	}
	if _, ok := ccc.mutation.MaintainManualDuration(); !ok {
		return &ValidationError{Name: "maintain_manual_duration", err: errors.New(`ent: missing required field "CarCumulative.maintain_manual_duration"`)}
	}
	if _, ok := ccc.mutation.MaintainAutoDuration(); !ok {
		return &ValidationError{Name: "maintain_auto_duration", err: errors.New(`ent: missing required field "CarCumulative.maintain_auto_duration"`)}
	}
	if _, ok := ccc.mutation.MaintainRemoteDuration(); !ok {
		return &ValidationError{Name: "maintain_remote_duration", err: errors.New(`ent: missing required field "CarCumulative.maintain_remote_duration"`)}
	}
	if _, ok := ccc.mutation.MaintainFaultDuration(); !ok {
		return &ValidationError{Name: "maintain_fault_duration", err: errors.New(`ent: missing required field "CarCumulative.maintain_fault_duration"`)}
	}
	if _, ok := ccc.mutation.MaintainLockTimes(); !ok {
		return &ValidationError{Name: "maintain_lock_times", err: errors.New(`ent: missing required field "CarCumulative.maintain_lock_times"`)}
	}
	if _, ok := ccc.mutation.MaintainManualTimes(); !ok {
		return &ValidationError{Name: "maintain_manual_times", err: errors.New(`ent: missing required field "CarCumulative.maintain_manual_times"`)}
	}
	if _, ok := ccc.mutation.MaintainAutoTimes(); !ok {
		return &ValidationError{Name: "maintain_auto_times", err: errors.New(`ent: missing required field "CarCumulative.maintain_auto_times"`)}
	}
	if _, ok := ccc.mutation.MaintainRemoteTimes(); !ok {
		return &ValidationError{Name: "maintain_remote_times", err: errors.New(`ent: missing required field "CarCumulative.maintain_remote_times"`)}
	}
	if _, ok := ccc.mutation.MaintainFaultTimes(); !ok {
		return &ValidationError{Name: "maintain_fault_times", err: errors.New(`ent: missing required field "CarCumulative.maintain_fault_times"`)}
	}
	if _, ok := ccc.mutation.MaintainManualMileage(); !ok {
		return &ValidationError{Name: "maintain_manual_mileage", err: errors.New(`ent: missing required field "CarCumulative.maintain_manual_mileage"`)}
	}
	if _, ok := ccc.mutation.MaintainAutoMileage(); !ok {
		return &ValidationError{Name: "maintain_auto_mileage", err: errors.New(`ent: missing required field "CarCumulative.maintain_auto_mileage"`)}
	}
	if _, ok := ccc.mutation.MaintainRemoteMileage(); !ok {
		return &ValidationError{Name: "maintain_remote_mileage", err: errors.New(`ent: missing required field "CarCumulative.maintain_remote_mileage"`)}
	}
	if _, ok := ccc.mutation.AlarmTimes(); !ok {
		return &ValidationError{Name: "alarm_times", err: errors.New(`ent: missing required field "CarCumulative.alarm_times"`)}
	}
	if _, ok := ccc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "CarCumulative.create_time"`)}
	}
	if _, ok := ccc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "CarCumulative.update_time"`)}
	}
	return nil
}

func (ccc *CarCumulativeCreate) sqlSave(ctx context.Context) (*CarCumulative, error) {
	if err := ccc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ccc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ccc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	ccc.mutation.id = &_node.ID
	ccc.mutation.done = true
	return _node, nil
}

func (ccc *CarCumulativeCreate) createSpec() (*CarCumulative, *sqlgraph.CreateSpec) {
	var (
		_node = &CarCumulative{config: ccc.config}
		_spec = sqlgraph.NewCreateSpec(carcumulative.Table, sqlgraph.NewFieldSpec(carcumulative.FieldID, field.TypeInt))
	)
	if id, ok := ccc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ccc.mutation.CarID(); ok {
		_spec.SetField(carcumulative.FieldCarID, field.TypeInt, value)
		_node.CarID = value
	}
	if value, ok := ccc.mutation.DeviceID(); ok {
		_spec.SetField(carcumulative.FieldDeviceID, field.TypeString, value)
		_node.DeviceID = value
	}
	if value, ok := ccc.mutation.OperationLockDuration(); ok {
		_spec.SetField(carcumulative.FieldOperationLockDuration, field.TypeFloat32, value)
		_node.OperationLockDuration = value
	}
	if value, ok := ccc.mutation.OperationManualDuration(); ok {
		_spec.SetField(carcumulative.FieldOperationManualDuration, field.TypeFloat32, value)
		_node.OperationManualDuration = value
	}
	if value, ok := ccc.mutation.OperationAutoDuration(); ok {
		_spec.SetField(carcumulative.FieldOperationAutoDuration, field.TypeFloat32, value)
		_node.OperationAutoDuration = value
	}
	if value, ok := ccc.mutation.OperationFaultDuration(); ok {
		_spec.SetField(carcumulative.FieldOperationFaultDuration, field.TypeFloat32, value)
		_node.OperationFaultDuration = value
	}
	if value, ok := ccc.mutation.OperationLockTimes(); ok {
		_spec.SetField(carcumulative.FieldOperationLockTimes, field.TypeUint32, value)
		_node.OperationLockTimes = value
	}
	if value, ok := ccc.mutation.OperationManualTimes(); ok {
		_spec.SetField(carcumulative.FieldOperationManualTimes, field.TypeUint32, value)
		_node.OperationManualTimes = value
	}
	if value, ok := ccc.mutation.OperationAutoTimes(); ok {
		_spec.SetField(carcumulative.FieldOperationAutoTimes, field.TypeUint32, value)
		_node.OperationAutoTimes = value
	}
	if value, ok := ccc.mutation.OperationFaultTimes(); ok {
		_spec.SetField(carcumulative.FieldOperationFaultTimes, field.TypeUint32, value)
		_node.OperationFaultTimes = value
	}
	if value, ok := ccc.mutation.OperationManualMileage(); ok {
		_spec.SetField(carcumulative.FieldOperationManualMileage, field.TypeFloat32, value)
		_node.OperationManualMileage = value
	}
	if value, ok := ccc.mutation.OperationAutoMileage(); ok {
		_spec.SetField(carcumulative.FieldOperationAutoMileage, field.TypeFloat32, value)
		_node.OperationAutoMileage = value
	}
	if value, ok := ccc.mutation.MaintainLockDuration(); ok {
		_spec.SetField(carcumulative.FieldMaintainLockDuration, field.TypeFloat32, value)
		_node.MaintainLockDuration = value
	}
	if value, ok := ccc.mutation.MaintainManualDuration(); ok {
		_spec.SetField(carcumulative.FieldMaintainManualDuration, field.TypeFloat32, value)
		_node.MaintainManualDuration = value
	}
	if value, ok := ccc.mutation.MaintainAutoDuration(); ok {
		_spec.SetField(carcumulative.FieldMaintainAutoDuration, field.TypeFloat32, value)
		_node.MaintainAutoDuration = value
	}
	if value, ok := ccc.mutation.MaintainRemoteDuration(); ok {
		_spec.SetField(carcumulative.FieldMaintainRemoteDuration, field.TypeFloat32, value)
		_node.MaintainRemoteDuration = value
	}
	if value, ok := ccc.mutation.MaintainFaultDuration(); ok {
		_spec.SetField(carcumulative.FieldMaintainFaultDuration, field.TypeFloat32, value)
		_node.MaintainFaultDuration = value
	}
	if value, ok := ccc.mutation.MaintainLockTimes(); ok {
		_spec.SetField(carcumulative.FieldMaintainLockTimes, field.TypeUint32, value)
		_node.MaintainLockTimes = value
	}
	if value, ok := ccc.mutation.MaintainManualTimes(); ok {
		_spec.SetField(carcumulative.FieldMaintainManualTimes, field.TypeUint32, value)
		_node.MaintainManualTimes = value
	}
	if value, ok := ccc.mutation.MaintainAutoTimes(); ok {
		_spec.SetField(carcumulative.FieldMaintainAutoTimes, field.TypeUint32, value)
		_node.MaintainAutoTimes = value
	}
	if value, ok := ccc.mutation.MaintainRemoteTimes(); ok {
		_spec.SetField(carcumulative.FieldMaintainRemoteTimes, field.TypeUint32, value)
		_node.MaintainRemoteTimes = value
	}
	if value, ok := ccc.mutation.MaintainFaultTimes(); ok {
		_spec.SetField(carcumulative.FieldMaintainFaultTimes, field.TypeUint32, value)
		_node.MaintainFaultTimes = value
	}
	if value, ok := ccc.mutation.MaintainManualMileage(); ok {
		_spec.SetField(carcumulative.FieldMaintainManualMileage, field.TypeFloat32, value)
		_node.MaintainManualMileage = value
	}
	if value, ok := ccc.mutation.MaintainAutoMileage(); ok {
		_spec.SetField(carcumulative.FieldMaintainAutoMileage, field.TypeFloat32, value)
		_node.MaintainAutoMileage = value
	}
	if value, ok := ccc.mutation.MaintainRemoteMileage(); ok {
		_spec.SetField(carcumulative.FieldMaintainRemoteMileage, field.TypeFloat32, value)
		_node.MaintainRemoteMileage = value
	}
	if value, ok := ccc.mutation.AlarmTimes(); ok {
		_spec.SetField(carcumulative.FieldAlarmTimes, field.TypeUint32, value)
		_node.AlarmTimes = value
	}
	if value, ok := ccc.mutation.CreateTime(); ok {
		_spec.SetField(carcumulative.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := ccc.mutation.UpdateTime(); ok {
		_spec.SetField(carcumulative.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// CarCumulativeCreateBulk is the builder for creating many CarCumulative entities in bulk.
type CarCumulativeCreateBulk struct {
	config
	err      error
	builders []*CarCumulativeCreate
}

// Save creates the CarCumulative entities in the database.
func (cccb *CarCumulativeCreateBulk) Save(ctx context.Context) ([]*CarCumulative, error) {
	if cccb.err != nil {
		return nil, cccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cccb.builders))
	nodes := make([]*CarCumulative, len(cccb.builders))
	mutators := make([]Mutator, len(cccb.builders))
	for i := range cccb.builders {
		func(i int, root context.Context) {
			builder := cccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CarCumulativeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cccb *CarCumulativeCreateBulk) SaveX(ctx context.Context) []*CarCumulative {
	v, err := cccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cccb *CarCumulativeCreateBulk) Exec(ctx context.Context) error {
	_, err := cccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cccb *CarCumulativeCreateBulk) ExecX(ctx context.Context) {
	if err := cccb.Exec(ctx); err != nil {
		panic(err)
	}
}
