// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/carconfigpack"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CarConfigPack is the model entity for the CarConfigPack schema.
type CarConfigPack struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 景区ID
	ScenicAreaID *int `json:"scenic_area_id,omitempty"`
	// 型号ID
	ModelID *int `json:"model_id,omitempty"`
	// 车辆ID
	CarID *int `json:"car_id,omitempty"`
	// 适配车辆版本，空字符串表示适配所有版本
	CarVersion string `json:"car_version,omitempty"`
	// 配置名称
	Name string `json:"name,omitempty"`
	// 配置备注
	Remark string `json:"remark,omitempty"`
	// 配置版本号
	Version string `json:"version,omitempty"`
	// 配置列表
	ConfigIds []int `json:"config_ids,omitempty"`
	// 创建时间
	CreateTime   time.Time `json:"create_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CarConfigPack) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case carconfigpack.FieldConfigIds:
			values[i] = new([]byte)
		case carconfigpack.FieldID, carconfigpack.FieldScenicAreaID, carconfigpack.FieldModelID, carconfigpack.FieldCarID:
			values[i] = new(sql.NullInt64)
		case carconfigpack.FieldCarVersion, carconfigpack.FieldName, carconfigpack.FieldRemark, carconfigpack.FieldVersion:
			values[i] = new(sql.NullString)
		case carconfigpack.FieldCreateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CarConfigPack fields.
func (ccp *CarConfigPack) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case carconfigpack.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ccp.ID = int(value.Int64)
		case carconfigpack.FieldScenicAreaID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field scenic_area_id", values[i])
			} else if value.Valid {
				ccp.ScenicAreaID = new(int)
				*ccp.ScenicAreaID = int(value.Int64)
			}
		case carconfigpack.FieldModelID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field model_id", values[i])
			} else if value.Valid {
				ccp.ModelID = new(int)
				*ccp.ModelID = int(value.Int64)
			}
		case carconfigpack.FieldCarID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field car_id", values[i])
			} else if value.Valid {
				ccp.CarID = new(int)
				*ccp.CarID = int(value.Int64)
			}
		case carconfigpack.FieldCarVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field car_version", values[i])
			} else if value.Valid {
				ccp.CarVersion = value.String
			}
		case carconfigpack.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ccp.Name = value.String
			}
		case carconfigpack.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				ccp.Remark = value.String
			}
		case carconfigpack.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				ccp.Version = value.String
			}
		case carconfigpack.FieldConfigIds:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field config_ids", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ccp.ConfigIds); err != nil {
					return fmt.Errorf("unmarshal field config_ids: %w", err)
				}
			}
		case carconfigpack.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ccp.CreateTime = value.Time
			}
		default:
			ccp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CarConfigPack.
// This includes values selected through modifiers, order, etc.
func (ccp *CarConfigPack) Value(name string) (ent.Value, error) {
	return ccp.selectValues.Get(name)
}

// Update returns a builder for updating this CarConfigPack.
// Note that you need to call CarConfigPack.Unwrap() before calling this method if this CarConfigPack
// was returned from a transaction, and the transaction was committed or rolled back.
func (ccp *CarConfigPack) Update() *CarConfigPackUpdateOne {
	return NewCarConfigPackClient(ccp.config).UpdateOne(ccp)
}

// Unwrap unwraps the CarConfigPack entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ccp *CarConfigPack) Unwrap() *CarConfigPack {
	_tx, ok := ccp.config.driver.(*txDriver)
	if !ok {
		panic("ent: CarConfigPack is not a transactional entity")
	}
	ccp.config.driver = _tx.drv
	return ccp
}

// String implements the fmt.Stringer.
func (ccp *CarConfigPack) String() string {
	var builder strings.Builder
	builder.WriteString("CarConfigPack(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ccp.ID))
	if v := ccp.ScenicAreaID; v != nil {
		builder.WriteString("scenic_area_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := ccp.ModelID; v != nil {
		builder.WriteString("model_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := ccp.CarID; v != nil {
		builder.WriteString("car_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("car_version=")
	builder.WriteString(ccp.CarVersion)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ccp.Name)
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(ccp.Remark)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(ccp.Version)
	builder.WriteString(", ")
	builder.WriteString("config_ids=")
	builder.WriteString(fmt.Sprintf("%v", ccp.ConfigIds))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(ccp.CreateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CarConfigPacks is a parsable slice of CarConfigPack.
type CarConfigPacks []*CarConfigPack
