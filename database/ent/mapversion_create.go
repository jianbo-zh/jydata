// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/mapversion"
	"github.com/jianbo-zh/jydata/database/ent/scenicarea"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MapVersionCreate is the builder for creating a MapVersion entity.
type MapVersionCreate struct {
	config
	mutation *MapVersionMutation
	hooks    []Hook
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (mvc *MapVersionCreate) SetScenicAreaID(i int) *MapVersionCreate {
	mvc.mutation.SetScenicAreaID(i)
	return mvc
}

// SetFileID sets the "file_id" field.
func (mvc *MapVersionCreate) SetFileID(i int) *MapVersionCreate {
	mvc.mutation.SetFileID(i)
	return mvc
}

// SetFilePath sets the "file_path" field.
func (mvc *MapVersionCreate) SetFilePath(s string) *MapVersionCreate {
	mvc.mutation.SetFilePath(s)
	return mvc
}

// SetVersion sets the "version" field.
func (mvc *MapVersionCreate) SetVersion(s string) *MapVersionCreate {
	mvc.mutation.SetVersion(s)
	return mvc
}

// SetName sets the "name" field.
func (mvc *MapVersionCreate) SetName(s string) *MapVersionCreate {
	mvc.mutation.SetName(s)
	return mvc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mvc *MapVersionCreate) SetNillableName(s *string) *MapVersionCreate {
	if s != nil {
		mvc.SetName(*s)
	}
	return mvc
}

// SetRemark sets the "remark" field.
func (mvc *MapVersionCreate) SetRemark(s string) *MapVersionCreate {
	mvc.mutation.SetRemark(s)
	return mvc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (mvc *MapVersionCreate) SetNillableRemark(s *string) *MapVersionCreate {
	if s != nil {
		mvc.SetRemark(*s)
	}
	return mvc
}

// SetCreateTime sets the "create_time" field.
func (mvc *MapVersionCreate) SetCreateTime(t time.Time) *MapVersionCreate {
	mvc.mutation.SetCreateTime(t)
	return mvc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (mvc *MapVersionCreate) SetNillableCreateTime(t *time.Time) *MapVersionCreate {
	if t != nil {
		mvc.SetCreateTime(*t)
	}
	return mvc
}

// SetUpdateTime sets the "update_time" field.
func (mvc *MapVersionCreate) SetUpdateTime(t time.Time) *MapVersionCreate {
	mvc.mutation.SetUpdateTime(t)
	return mvc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (mvc *MapVersionCreate) SetNillableUpdateTime(t *time.Time) *MapVersionCreate {
	if t != nil {
		mvc.SetUpdateTime(*t)
	}
	return mvc
}

// SetID sets the "id" field.
func (mvc *MapVersionCreate) SetID(i int) *MapVersionCreate {
	mvc.mutation.SetID(i)
	return mvc
}

// SetBackgroundScenicAreaID sets the "background_scenic_area" edge to the ScenicArea entity by ID.
func (mvc *MapVersionCreate) SetBackgroundScenicAreaID(id int) *MapVersionCreate {
	mvc.mutation.SetBackgroundScenicAreaID(id)
	return mvc
}

// SetBackgroundScenicArea sets the "background_scenic_area" edge to the ScenicArea entity.
func (mvc *MapVersionCreate) SetBackgroundScenicArea(s *ScenicArea) *MapVersionCreate {
	return mvc.SetBackgroundScenicAreaID(s.ID)
}

// Mutation returns the MapVersionMutation object of the builder.
func (mvc *MapVersionCreate) Mutation() *MapVersionMutation {
	return mvc.mutation
}

// Save creates the MapVersion in the database.
func (mvc *MapVersionCreate) Save(ctx context.Context) (*MapVersion, error) {
	mvc.defaults()
	return withHooks(ctx, mvc.sqlSave, mvc.mutation, mvc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mvc *MapVersionCreate) SaveX(ctx context.Context) *MapVersion {
	v, err := mvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mvc *MapVersionCreate) Exec(ctx context.Context) error {
	_, err := mvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mvc *MapVersionCreate) ExecX(ctx context.Context) {
	if err := mvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mvc *MapVersionCreate) defaults() {
	if _, ok := mvc.mutation.Name(); !ok {
		v := mapversion.DefaultName
		mvc.mutation.SetName(v)
	}
	if _, ok := mvc.mutation.Remark(); !ok {
		v := mapversion.DefaultRemark
		mvc.mutation.SetRemark(v)
	}
	if _, ok := mvc.mutation.CreateTime(); !ok {
		v := mapversion.DefaultCreateTime()
		mvc.mutation.SetCreateTime(v)
	}
	if _, ok := mvc.mutation.UpdateTime(); !ok {
		v := mapversion.DefaultUpdateTime()
		mvc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mvc *MapVersionCreate) check() error {
	if _, ok := mvc.mutation.ScenicAreaID(); !ok {
		return &ValidationError{Name: "scenic_area_id", err: errors.New(`ent: missing required field "MapVersion.scenic_area_id"`)}
	}
	if _, ok := mvc.mutation.FileID(); !ok {
		return &ValidationError{Name: "file_id", err: errors.New(`ent: missing required field "MapVersion.file_id"`)}
	}
	if _, ok := mvc.mutation.FilePath(); !ok {
		return &ValidationError{Name: "file_path", err: errors.New(`ent: missing required field "MapVersion.file_path"`)}
	}
	if _, ok := mvc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "MapVersion.version"`)}
	}
	if _, ok := mvc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "MapVersion.name"`)}
	}
	if _, ok := mvc.mutation.Remark(); !ok {
		return &ValidationError{Name: "remark", err: errors.New(`ent: missing required field "MapVersion.remark"`)}
	}
	if _, ok := mvc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "MapVersion.create_time"`)}
	}
	if _, ok := mvc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "MapVersion.update_time"`)}
	}
	if len(mvc.mutation.BackgroundScenicAreaIDs()) == 0 {
		return &ValidationError{Name: "background_scenic_area", err: errors.New(`ent: missing required edge "MapVersion.background_scenic_area"`)}
	}
	return nil
}

func (mvc *MapVersionCreate) sqlSave(ctx context.Context) (*MapVersion, error) {
	if err := mvc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mvc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	mvc.mutation.id = &_node.ID
	mvc.mutation.done = true
	return _node, nil
}

func (mvc *MapVersionCreate) createSpec() (*MapVersion, *sqlgraph.CreateSpec) {
	var (
		_node = &MapVersion{config: mvc.config}
		_spec = sqlgraph.NewCreateSpec(mapversion.Table, sqlgraph.NewFieldSpec(mapversion.FieldID, field.TypeInt))
	)
	if id, ok := mvc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mvc.mutation.FileID(); ok {
		_spec.SetField(mapversion.FieldFileID, field.TypeInt, value)
		_node.FileID = value
	}
	if value, ok := mvc.mutation.FilePath(); ok {
		_spec.SetField(mapversion.FieldFilePath, field.TypeString, value)
		_node.FilePath = value
	}
	if value, ok := mvc.mutation.Version(); ok {
		_spec.SetField(mapversion.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := mvc.mutation.Name(); ok {
		_spec.SetField(mapversion.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := mvc.mutation.Remark(); ok {
		_spec.SetField(mapversion.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := mvc.mutation.CreateTime(); ok {
		_spec.SetField(mapversion.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := mvc.mutation.UpdateTime(); ok {
		_spec.SetField(mapversion.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if nodes := mvc.mutation.BackgroundScenicAreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mapversion.BackgroundScenicAreaTable,
			Columns: []string{mapversion.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ScenicAreaID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MapVersionCreateBulk is the builder for creating many MapVersion entities in bulk.
type MapVersionCreateBulk struct {
	config
	err      error
	builders []*MapVersionCreate
}

// Save creates the MapVersion entities in the database.
func (mvcb *MapVersionCreateBulk) Save(ctx context.Context) ([]*MapVersion, error) {
	if mvcb.err != nil {
		return nil, mvcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mvcb.builders))
	nodes := make([]*MapVersion, len(mvcb.builders))
	mutators := make([]Mutator, len(mvcb.builders))
	for i := range mvcb.builders {
		func(i int, root context.Context) {
			builder := mvcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MapVersionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mvcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mvcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mvcb *MapVersionCreateBulk) SaveX(ctx context.Context) []*MapVersion {
	v, err := mvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mvcb *MapVersionCreateBulk) Exec(ctx context.Context) error {
	_, err := mvcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mvcb *MapVersionCreateBulk) ExecX(ctx context.Context) {
	if err := mvcb.Exec(ctx); err != nil {
		panic(err)
	}
}
