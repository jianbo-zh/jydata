// Code generated by ent, DO NOT EDIT.

package scenicarea

import (
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldLTE(FieldID, id))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldEQ(FieldCode, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldEQ(FieldName, v))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldEQ(FieldAddress, v))
}

// Manager applies equality check predicate on the "manager" field. It's identical to ManagerEQ.
func Manager(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldEQ(FieldManager, v))
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldEQ(FieldPhone, v))
}

// MchID applies equality check predicate on the "mch_id" field. It's identical to MchIDEQ.
func MchID(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldEQ(FieldMchID, v))
}

// MchName applies equality check predicate on the "mch_name" field. It's identical to MchNameEQ.
func MchName(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldEQ(FieldMchName, v))
}

// Timezone applies equality check predicate on the "timezone" field. It's identical to TimezoneEQ.
func Timezone(v int) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldEQ(FieldTimezone, v))
}

// WgsLon applies equality check predicate on the "wgs_lon" field. It's identical to WgsLonEQ.
func WgsLon(v float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldEQ(FieldWgsLon, v))
}

// WgsLat applies equality check predicate on the "wgs_lat" field. It's identical to WgsLatEQ.
func WgsLat(v float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldEQ(FieldWgsLat, v))
}

// GcjLon applies equality check predicate on the "gcj_lon" field. It's identical to GcjLonEQ.
func GcjLon(v float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldEQ(FieldGcjLon, v))
}

// GcjLat applies equality check predicate on the "gcj_lat" field. It's identical to GcjLatEQ.
func GcjLat(v float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldEQ(FieldGcjLat, v))
}

// BdLon applies equality check predicate on the "bd_lon" field. It's identical to BdLonEQ.
func BdLon(v float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldEQ(FieldBdLon, v))
}

// BdLat applies equality check predicate on the "bd_lat" field. It's identical to BdLatEQ.
func BdLat(v float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldEQ(FieldBdLat, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldEQ(FieldStatus, v))
}

// ExtendYokeeID applies equality check predicate on the "extend_yokee_id" field. It's identical to ExtendYokeeIDEQ.
func ExtendYokeeID(v int) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldEQ(FieldExtendYokeeID, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldEQ(FieldUpdateTime, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldHasSuffix(FieldCode, v))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldContainsFold(FieldCode, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldContainsFold(FieldName, v))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldContainsFold(FieldAddress, v))
}

// ManagerEQ applies the EQ predicate on the "manager" field.
func ManagerEQ(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldEQ(FieldManager, v))
}

// ManagerNEQ applies the NEQ predicate on the "manager" field.
func ManagerNEQ(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldNEQ(FieldManager, v))
}

// ManagerIn applies the In predicate on the "manager" field.
func ManagerIn(vs ...string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldIn(FieldManager, vs...))
}

// ManagerNotIn applies the NotIn predicate on the "manager" field.
func ManagerNotIn(vs ...string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldNotIn(FieldManager, vs...))
}

// ManagerGT applies the GT predicate on the "manager" field.
func ManagerGT(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldGT(FieldManager, v))
}

// ManagerGTE applies the GTE predicate on the "manager" field.
func ManagerGTE(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldGTE(FieldManager, v))
}

// ManagerLT applies the LT predicate on the "manager" field.
func ManagerLT(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldLT(FieldManager, v))
}

// ManagerLTE applies the LTE predicate on the "manager" field.
func ManagerLTE(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldLTE(FieldManager, v))
}

// ManagerContains applies the Contains predicate on the "manager" field.
func ManagerContains(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldContains(FieldManager, v))
}

// ManagerHasPrefix applies the HasPrefix predicate on the "manager" field.
func ManagerHasPrefix(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldHasPrefix(FieldManager, v))
}

// ManagerHasSuffix applies the HasSuffix predicate on the "manager" field.
func ManagerHasSuffix(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldHasSuffix(FieldManager, v))
}

// ManagerEqualFold applies the EqualFold predicate on the "manager" field.
func ManagerEqualFold(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldEqualFold(FieldManager, v))
}

// ManagerContainsFold applies the ContainsFold predicate on the "manager" field.
func ManagerContainsFold(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldContainsFold(FieldManager, v))
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldEQ(FieldPhone, v))
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldNEQ(FieldPhone, v))
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldIn(FieldPhone, vs...))
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldNotIn(FieldPhone, vs...))
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldGT(FieldPhone, v))
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldGTE(FieldPhone, v))
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldLT(FieldPhone, v))
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldLTE(FieldPhone, v))
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldContains(FieldPhone, v))
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldHasPrefix(FieldPhone, v))
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldHasSuffix(FieldPhone, v))
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldEqualFold(FieldPhone, v))
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldContainsFold(FieldPhone, v))
}

// MchIDEQ applies the EQ predicate on the "mch_id" field.
func MchIDEQ(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldEQ(FieldMchID, v))
}

// MchIDNEQ applies the NEQ predicate on the "mch_id" field.
func MchIDNEQ(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldNEQ(FieldMchID, v))
}

// MchIDIn applies the In predicate on the "mch_id" field.
func MchIDIn(vs ...string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldIn(FieldMchID, vs...))
}

// MchIDNotIn applies the NotIn predicate on the "mch_id" field.
func MchIDNotIn(vs ...string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldNotIn(FieldMchID, vs...))
}

// MchIDGT applies the GT predicate on the "mch_id" field.
func MchIDGT(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldGT(FieldMchID, v))
}

// MchIDGTE applies the GTE predicate on the "mch_id" field.
func MchIDGTE(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldGTE(FieldMchID, v))
}

// MchIDLT applies the LT predicate on the "mch_id" field.
func MchIDLT(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldLT(FieldMchID, v))
}

// MchIDLTE applies the LTE predicate on the "mch_id" field.
func MchIDLTE(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldLTE(FieldMchID, v))
}

// MchIDContains applies the Contains predicate on the "mch_id" field.
func MchIDContains(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldContains(FieldMchID, v))
}

// MchIDHasPrefix applies the HasPrefix predicate on the "mch_id" field.
func MchIDHasPrefix(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldHasPrefix(FieldMchID, v))
}

// MchIDHasSuffix applies the HasSuffix predicate on the "mch_id" field.
func MchIDHasSuffix(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldHasSuffix(FieldMchID, v))
}

// MchIDEqualFold applies the EqualFold predicate on the "mch_id" field.
func MchIDEqualFold(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldEqualFold(FieldMchID, v))
}

// MchIDContainsFold applies the ContainsFold predicate on the "mch_id" field.
func MchIDContainsFold(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldContainsFold(FieldMchID, v))
}

// MchNameEQ applies the EQ predicate on the "mch_name" field.
func MchNameEQ(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldEQ(FieldMchName, v))
}

// MchNameNEQ applies the NEQ predicate on the "mch_name" field.
func MchNameNEQ(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldNEQ(FieldMchName, v))
}

// MchNameIn applies the In predicate on the "mch_name" field.
func MchNameIn(vs ...string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldIn(FieldMchName, vs...))
}

// MchNameNotIn applies the NotIn predicate on the "mch_name" field.
func MchNameNotIn(vs ...string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldNotIn(FieldMchName, vs...))
}

// MchNameGT applies the GT predicate on the "mch_name" field.
func MchNameGT(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldGT(FieldMchName, v))
}

// MchNameGTE applies the GTE predicate on the "mch_name" field.
func MchNameGTE(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldGTE(FieldMchName, v))
}

// MchNameLT applies the LT predicate on the "mch_name" field.
func MchNameLT(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldLT(FieldMchName, v))
}

// MchNameLTE applies the LTE predicate on the "mch_name" field.
func MchNameLTE(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldLTE(FieldMchName, v))
}

// MchNameContains applies the Contains predicate on the "mch_name" field.
func MchNameContains(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldContains(FieldMchName, v))
}

// MchNameHasPrefix applies the HasPrefix predicate on the "mch_name" field.
func MchNameHasPrefix(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldHasPrefix(FieldMchName, v))
}

// MchNameHasSuffix applies the HasSuffix predicate on the "mch_name" field.
func MchNameHasSuffix(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldHasSuffix(FieldMchName, v))
}

// MchNameEqualFold applies the EqualFold predicate on the "mch_name" field.
func MchNameEqualFold(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldEqualFold(FieldMchName, v))
}

// MchNameContainsFold applies the ContainsFold predicate on the "mch_name" field.
func MchNameContainsFold(v string) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldContainsFold(FieldMchName, v))
}

// TimezoneEQ applies the EQ predicate on the "timezone" field.
func TimezoneEQ(v int) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldEQ(FieldTimezone, v))
}

// TimezoneNEQ applies the NEQ predicate on the "timezone" field.
func TimezoneNEQ(v int) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldNEQ(FieldTimezone, v))
}

// TimezoneIn applies the In predicate on the "timezone" field.
func TimezoneIn(vs ...int) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldIn(FieldTimezone, vs...))
}

// TimezoneNotIn applies the NotIn predicate on the "timezone" field.
func TimezoneNotIn(vs ...int) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldNotIn(FieldTimezone, vs...))
}

// TimezoneGT applies the GT predicate on the "timezone" field.
func TimezoneGT(v int) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldGT(FieldTimezone, v))
}

// TimezoneGTE applies the GTE predicate on the "timezone" field.
func TimezoneGTE(v int) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldGTE(FieldTimezone, v))
}

// TimezoneLT applies the LT predicate on the "timezone" field.
func TimezoneLT(v int) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldLT(FieldTimezone, v))
}

// TimezoneLTE applies the LTE predicate on the "timezone" field.
func TimezoneLTE(v int) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldLTE(FieldTimezone, v))
}

// WgsLonEQ applies the EQ predicate on the "wgs_lon" field.
func WgsLonEQ(v float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldEQ(FieldWgsLon, v))
}

// WgsLonNEQ applies the NEQ predicate on the "wgs_lon" field.
func WgsLonNEQ(v float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldNEQ(FieldWgsLon, v))
}

// WgsLonIn applies the In predicate on the "wgs_lon" field.
func WgsLonIn(vs ...float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldIn(FieldWgsLon, vs...))
}

// WgsLonNotIn applies the NotIn predicate on the "wgs_lon" field.
func WgsLonNotIn(vs ...float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldNotIn(FieldWgsLon, vs...))
}

// WgsLonGT applies the GT predicate on the "wgs_lon" field.
func WgsLonGT(v float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldGT(FieldWgsLon, v))
}

// WgsLonGTE applies the GTE predicate on the "wgs_lon" field.
func WgsLonGTE(v float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldGTE(FieldWgsLon, v))
}

// WgsLonLT applies the LT predicate on the "wgs_lon" field.
func WgsLonLT(v float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldLT(FieldWgsLon, v))
}

// WgsLonLTE applies the LTE predicate on the "wgs_lon" field.
func WgsLonLTE(v float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldLTE(FieldWgsLon, v))
}

// WgsLatEQ applies the EQ predicate on the "wgs_lat" field.
func WgsLatEQ(v float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldEQ(FieldWgsLat, v))
}

// WgsLatNEQ applies the NEQ predicate on the "wgs_lat" field.
func WgsLatNEQ(v float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldNEQ(FieldWgsLat, v))
}

// WgsLatIn applies the In predicate on the "wgs_lat" field.
func WgsLatIn(vs ...float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldIn(FieldWgsLat, vs...))
}

// WgsLatNotIn applies the NotIn predicate on the "wgs_lat" field.
func WgsLatNotIn(vs ...float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldNotIn(FieldWgsLat, vs...))
}

// WgsLatGT applies the GT predicate on the "wgs_lat" field.
func WgsLatGT(v float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldGT(FieldWgsLat, v))
}

// WgsLatGTE applies the GTE predicate on the "wgs_lat" field.
func WgsLatGTE(v float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldGTE(FieldWgsLat, v))
}

// WgsLatLT applies the LT predicate on the "wgs_lat" field.
func WgsLatLT(v float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldLT(FieldWgsLat, v))
}

// WgsLatLTE applies the LTE predicate on the "wgs_lat" field.
func WgsLatLTE(v float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldLTE(FieldWgsLat, v))
}

// GcjLonEQ applies the EQ predicate on the "gcj_lon" field.
func GcjLonEQ(v float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldEQ(FieldGcjLon, v))
}

// GcjLonNEQ applies the NEQ predicate on the "gcj_lon" field.
func GcjLonNEQ(v float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldNEQ(FieldGcjLon, v))
}

// GcjLonIn applies the In predicate on the "gcj_lon" field.
func GcjLonIn(vs ...float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldIn(FieldGcjLon, vs...))
}

// GcjLonNotIn applies the NotIn predicate on the "gcj_lon" field.
func GcjLonNotIn(vs ...float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldNotIn(FieldGcjLon, vs...))
}

// GcjLonGT applies the GT predicate on the "gcj_lon" field.
func GcjLonGT(v float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldGT(FieldGcjLon, v))
}

// GcjLonGTE applies the GTE predicate on the "gcj_lon" field.
func GcjLonGTE(v float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldGTE(FieldGcjLon, v))
}

// GcjLonLT applies the LT predicate on the "gcj_lon" field.
func GcjLonLT(v float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldLT(FieldGcjLon, v))
}

// GcjLonLTE applies the LTE predicate on the "gcj_lon" field.
func GcjLonLTE(v float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldLTE(FieldGcjLon, v))
}

// GcjLatEQ applies the EQ predicate on the "gcj_lat" field.
func GcjLatEQ(v float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldEQ(FieldGcjLat, v))
}

// GcjLatNEQ applies the NEQ predicate on the "gcj_lat" field.
func GcjLatNEQ(v float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldNEQ(FieldGcjLat, v))
}

// GcjLatIn applies the In predicate on the "gcj_lat" field.
func GcjLatIn(vs ...float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldIn(FieldGcjLat, vs...))
}

// GcjLatNotIn applies the NotIn predicate on the "gcj_lat" field.
func GcjLatNotIn(vs ...float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldNotIn(FieldGcjLat, vs...))
}

// GcjLatGT applies the GT predicate on the "gcj_lat" field.
func GcjLatGT(v float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldGT(FieldGcjLat, v))
}

// GcjLatGTE applies the GTE predicate on the "gcj_lat" field.
func GcjLatGTE(v float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldGTE(FieldGcjLat, v))
}

// GcjLatLT applies the LT predicate on the "gcj_lat" field.
func GcjLatLT(v float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldLT(FieldGcjLat, v))
}

// GcjLatLTE applies the LTE predicate on the "gcj_lat" field.
func GcjLatLTE(v float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldLTE(FieldGcjLat, v))
}

// BdLonEQ applies the EQ predicate on the "bd_lon" field.
func BdLonEQ(v float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldEQ(FieldBdLon, v))
}

// BdLonNEQ applies the NEQ predicate on the "bd_lon" field.
func BdLonNEQ(v float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldNEQ(FieldBdLon, v))
}

// BdLonIn applies the In predicate on the "bd_lon" field.
func BdLonIn(vs ...float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldIn(FieldBdLon, vs...))
}

// BdLonNotIn applies the NotIn predicate on the "bd_lon" field.
func BdLonNotIn(vs ...float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldNotIn(FieldBdLon, vs...))
}

// BdLonGT applies the GT predicate on the "bd_lon" field.
func BdLonGT(v float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldGT(FieldBdLon, v))
}

// BdLonGTE applies the GTE predicate on the "bd_lon" field.
func BdLonGTE(v float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldGTE(FieldBdLon, v))
}

// BdLonLT applies the LT predicate on the "bd_lon" field.
func BdLonLT(v float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldLT(FieldBdLon, v))
}

// BdLonLTE applies the LTE predicate on the "bd_lon" field.
func BdLonLTE(v float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldLTE(FieldBdLon, v))
}

// BdLatEQ applies the EQ predicate on the "bd_lat" field.
func BdLatEQ(v float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldEQ(FieldBdLat, v))
}

// BdLatNEQ applies the NEQ predicate on the "bd_lat" field.
func BdLatNEQ(v float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldNEQ(FieldBdLat, v))
}

// BdLatIn applies the In predicate on the "bd_lat" field.
func BdLatIn(vs ...float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldIn(FieldBdLat, vs...))
}

// BdLatNotIn applies the NotIn predicate on the "bd_lat" field.
func BdLatNotIn(vs ...float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldNotIn(FieldBdLat, vs...))
}

// BdLatGT applies the GT predicate on the "bd_lat" field.
func BdLatGT(v float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldGT(FieldBdLat, v))
}

// BdLatGTE applies the GTE predicate on the "bd_lat" field.
func BdLatGTE(v float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldGTE(FieldBdLat, v))
}

// BdLatLT applies the LT predicate on the "bd_lat" field.
func BdLatLT(v float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldLT(FieldBdLat, v))
}

// BdLatLTE applies the LTE predicate on the "bd_lat" field.
func BdLatLTE(v float64) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldLTE(FieldBdLat, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldLTE(FieldStatus, v))
}

// ExtendYokeeIDEQ applies the EQ predicate on the "extend_yokee_id" field.
func ExtendYokeeIDEQ(v int) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldEQ(FieldExtendYokeeID, v))
}

// ExtendYokeeIDNEQ applies the NEQ predicate on the "extend_yokee_id" field.
func ExtendYokeeIDNEQ(v int) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldNEQ(FieldExtendYokeeID, v))
}

// ExtendYokeeIDIn applies the In predicate on the "extend_yokee_id" field.
func ExtendYokeeIDIn(vs ...int) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldIn(FieldExtendYokeeID, vs...))
}

// ExtendYokeeIDNotIn applies the NotIn predicate on the "extend_yokee_id" field.
func ExtendYokeeIDNotIn(vs ...int) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldNotIn(FieldExtendYokeeID, vs...))
}

// ExtendYokeeIDGT applies the GT predicate on the "extend_yokee_id" field.
func ExtendYokeeIDGT(v int) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldGT(FieldExtendYokeeID, v))
}

// ExtendYokeeIDGTE applies the GTE predicate on the "extend_yokee_id" field.
func ExtendYokeeIDGTE(v int) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldGTE(FieldExtendYokeeID, v))
}

// ExtendYokeeIDLT applies the LT predicate on the "extend_yokee_id" field.
func ExtendYokeeIDLT(v int) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldLT(FieldExtendYokeeID, v))
}

// ExtendYokeeIDLTE applies the LTE predicate on the "extend_yokee_id" field.
func ExtendYokeeIDLTE(v int) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldLTE(FieldExtendYokeeID, v))
}

// ExtendYokeeIDIsNil applies the IsNil predicate on the "extend_yokee_id" field.
func ExtendYokeeIDIsNil() predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldIsNull(FieldExtendYokeeID))
}

// ExtendYokeeIDNotNil applies the NotNil predicate on the "extend_yokee_id" field.
func ExtendYokeeIDNotNil() predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldNotNull(FieldExtendYokeeID))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.ScenicArea {
	return predicate.ScenicArea(sql.FieldLTE(FieldUpdateTime, v))
}

// HasCars applies the HasEdge predicate on the "cars" edge.
func HasCars() predicate.ScenicArea {
	return predicate.ScenicArea(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CarsTable, CarsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarsWith applies the HasEdge predicate on the "cars" edge with a given conditions (other predicates).
func HasCarsWith(preds ...predicate.Car) predicate.ScenicArea {
	return predicate.ScenicArea(func(s *sql.Selector) {
		step := newCarsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAccounts applies the HasEdge predicate on the "accounts" edge.
func HasAccounts() predicate.ScenicArea {
	return predicate.ScenicArea(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AccountsTable, AccountsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAccountsWith applies the HasEdge predicate on the "accounts" edge with a given conditions (other predicates).
func HasAccountsWith(preds ...predicate.Account) predicate.ScenicArea {
	return predicate.ScenicArea(func(s *sql.Selector) {
		step := newAccountsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPois applies the HasEdge predicate on the "pois" edge.
func HasPois() predicate.ScenicArea {
	return predicate.ScenicArea(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PoisTable, PoisColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPoisWith applies the HasEdge predicate on the "pois" edge with a given conditions (other predicates).
func HasPoisWith(preds ...predicate.Poi) predicate.ScenicArea {
	return predicate.ScenicArea(func(s *sql.Selector) {
		step := newPoisStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProfitReceivers applies the HasEdge predicate on the "profit_receivers" edge.
func HasProfitReceivers() predicate.ScenicArea {
	return predicate.ScenicArea(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProfitReceiversTable, ProfitReceiversColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProfitReceiversWith applies the HasEdge predicate on the "profit_receivers" edge with a given conditions (other predicates).
func HasProfitReceiversWith(preds ...predicate.ProfitReceiver) predicate.ScenicArea {
	return predicate.ScenicArea(func(s *sql.Selector) {
		step := newProfitReceiversStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPayTxBills applies the HasEdge predicate on the "pay_tx_bills" edge.
func HasPayTxBills() predicate.ScenicArea {
	return predicate.ScenicArea(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PayTxBillsTable, PayTxBillsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPayTxBillsWith applies the HasEdge predicate on the "pay_tx_bills" edge with a given conditions (other predicates).
func HasPayTxBillsWith(preds ...predicate.PayTxBill) predicate.ScenicArea {
	return predicate.ScenicArea(func(s *sql.Selector) {
		step := newPayTxBillsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCarBillingStrategies applies the HasEdge predicate on the "car_billing_strategies" edge.
func HasCarBillingStrategies() predicate.ScenicArea {
	return predicate.ScenicArea(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CarBillingStrategiesTable, CarBillingStrategiesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarBillingStrategiesWith applies the HasEdge predicate on the "car_billing_strategies" edge with a given conditions (other predicates).
func HasCarBillingStrategiesWith(preds ...predicate.BillingStrategy) predicate.ScenicArea {
	return predicate.ScenicArea(func(s *sql.Selector) {
		step := newCarBillingStrategiesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMap applies the HasEdge predicate on the "map" edge.
func HasMap() predicate.ScenicArea {
	return predicate.ScenicArea(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, MapTable, MapColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMapWith applies the HasEdge predicate on the "map" edge with a given conditions (other predicates).
func HasMapWith(preds ...predicate.ScenicAreaMap) predicate.ScenicArea {
	return predicate.ScenicArea(func(s *sql.Selector) {
		step := newMapStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMapVersions applies the HasEdge predicate on the "map_versions" edge.
func HasMapVersions() predicate.ScenicArea {
	return predicate.ScenicArea(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MapVersionsTable, MapVersionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMapVersionsWith applies the HasEdge predicate on the "map_versions" edge with a given conditions (other predicates).
func HasMapVersionsWith(preds ...predicate.MapVersion) predicate.ScenicArea {
	return predicate.ScenicArea(func(s *sql.Selector) {
		step := newMapVersionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.ScenicArea {
	return predicate.ScenicArea(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UsersTable, UsersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.User) predicate.ScenicArea {
	return predicate.ScenicArea(func(s *sql.Selector) {
		step := newUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrders applies the HasEdge predicate on the "orders" edge.
func HasOrders() predicate.ScenicArea {
	return predicate.ScenicArea(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrdersTable, OrdersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrdersWith applies the HasEdge predicate on the "orders" edge with a given conditions (other predicates).
func HasOrdersWith(preds ...predicate.Order) predicate.ScenicArea {
	return predicate.ScenicArea(func(s *sql.Selector) {
		step := newOrdersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCarOperateLogs applies the HasEdge predicate on the "car_operate_logs" edge.
func HasCarOperateLogs() predicate.ScenicArea {
	return predicate.ScenicArea(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CarOperateLogsTable, CarOperateLogsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarOperateLogsWith applies the HasEdge predicate on the "car_operate_logs" edge with a given conditions (other predicates).
func HasCarOperateLogsWith(preds ...predicate.CarsOperateLog) predicate.ScenicArea {
	return predicate.ScenicArea(func(s *sql.Selector) {
		step := newCarOperateLogsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStatsHourlyCar applies the HasEdge predicate on the "stats_hourly_car" edge.
func HasStatsHourlyCar() predicate.ScenicArea {
	return predicate.ScenicArea(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, StatsHourlyCarTable, StatsHourlyCarColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStatsHourlyCarWith applies the HasEdge predicate on the "stats_hourly_car" edge with a given conditions (other predicates).
func HasStatsHourlyCarWith(preds ...predicate.StatsHourlyCar) predicate.ScenicArea {
	return predicate.ScenicArea(func(s *sql.Selector) {
		step := newStatsHourlyCarStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasConfigFiles applies the HasEdge predicate on the "config_files" edge.
func HasConfigFiles() predicate.ScenicArea {
	return predicate.ScenicArea(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ConfigFilesTable, ConfigFilesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasConfigFilesWith applies the HasEdge predicate on the "config_files" edge with a given conditions (other predicates).
func HasConfigFilesWith(preds ...predicate.CarConfig) predicate.ScenicArea {
	return predicate.ScenicArea(func(s *sql.Selector) {
		step := newConfigFilesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ScenicArea) predicate.ScenicArea {
	return predicate.ScenicArea(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ScenicArea) predicate.ScenicArea {
	return predicate.ScenicArea(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ScenicArea) predicate.ScenicArea {
	return predicate.ScenicArea(sql.NotPredicates(p))
}
