// Code generated by ent, DO NOT EDIT.

package scenicarea

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the scenicarea type in the database.
	Label = "scenic_area"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldManager holds the string denoting the manager field in the database.
	FieldManager = "manager"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldMchID holds the string denoting the mch_id field in the database.
	FieldMchID = "mch_id"
	// FieldMchName holds the string denoting the mch_name field in the database.
	FieldMchName = "mch_name"
	// FieldTimezone holds the string denoting the timezone field in the database.
	FieldTimezone = "timezone"
	// FieldWgsLon holds the string denoting the wgs_lon field in the database.
	FieldWgsLon = "wgs_lon"
	// FieldWgsLat holds the string denoting the wgs_lat field in the database.
	FieldWgsLat = "wgs_lat"
	// FieldGcjLon holds the string denoting the gcj_lon field in the database.
	FieldGcjLon = "gcj_lon"
	// FieldGcjLat holds the string denoting the gcj_lat field in the database.
	FieldGcjLat = "gcj_lat"
	// FieldBdLon holds the string denoting the bd_lon field in the database.
	FieldBdLon = "bd_lon"
	// FieldBdLat holds the string denoting the bd_lat field in the database.
	FieldBdLat = "bd_lat"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldExtendYokeeID holds the string denoting the extend_yokee_id field in the database.
	FieldExtendYokeeID = "extend_yokee_id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// EdgeCars holds the string denoting the cars edge name in mutations.
	EdgeCars = "cars"
	// EdgeAccounts holds the string denoting the accounts edge name in mutations.
	EdgeAccounts = "accounts"
	// EdgePois holds the string denoting the pois edge name in mutations.
	EdgePois = "pois"
	// EdgeProfitReceivers holds the string denoting the profit_receivers edge name in mutations.
	EdgeProfitReceivers = "profit_receivers"
	// EdgePayTxBills holds the string denoting the pay_tx_bills edge name in mutations.
	EdgePayTxBills = "pay_tx_bills"
	// EdgeCarBillingStrategies holds the string denoting the car_billing_strategies edge name in mutations.
	EdgeCarBillingStrategies = "car_billing_strategies"
	// EdgeMap holds the string denoting the map edge name in mutations.
	EdgeMap = "map"
	// EdgeMapVersions holds the string denoting the map_versions edge name in mutations.
	EdgeMapVersions = "map_versions"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// EdgeOrders holds the string denoting the orders edge name in mutations.
	EdgeOrders = "orders"
	// EdgeCarOperateLogs holds the string denoting the car_operate_logs edge name in mutations.
	EdgeCarOperateLogs = "car_operate_logs"
	// EdgeStatsHourlyCar holds the string denoting the stats_hourly_car edge name in mutations.
	EdgeStatsHourlyCar = "stats_hourly_car"
	// EdgeConfigFiles holds the string denoting the config_files edge name in mutations.
	EdgeConfigFiles = "config_files"
	// Table holds the table name of the scenicarea in the database.
	Table = "scenic_areas"
	// CarsTable is the table that holds the cars relation/edge.
	CarsTable = "cars"
	// CarsInverseTable is the table name for the Car entity.
	// It exists in this package in order to avoid circular dependency with the "car" package.
	CarsInverseTable = "cars"
	// CarsColumn is the table column denoting the cars relation/edge.
	CarsColumn = "scenic_area_id"
	// AccountsTable is the table that holds the accounts relation/edge.
	AccountsTable = "accounts"
	// AccountsInverseTable is the table name for the Account entity.
	// It exists in this package in order to avoid circular dependency with the "account" package.
	AccountsInverseTable = "accounts"
	// AccountsColumn is the table column denoting the accounts relation/edge.
	AccountsColumn = "scenic_area_id"
	// PoisTable is the table that holds the pois relation/edge.
	PoisTable = "pois"
	// PoisInverseTable is the table name for the Poi entity.
	// It exists in this package in order to avoid circular dependency with the "poi" package.
	PoisInverseTable = "pois"
	// PoisColumn is the table column denoting the pois relation/edge.
	PoisColumn = "scenic_area_id"
	// ProfitReceiversTable is the table that holds the profit_receivers relation/edge.
	ProfitReceiversTable = "profit_receivers"
	// ProfitReceiversInverseTable is the table name for the ProfitReceiver entity.
	// It exists in this package in order to avoid circular dependency with the "profitreceiver" package.
	ProfitReceiversInverseTable = "profit_receivers"
	// ProfitReceiversColumn is the table column denoting the profit_receivers relation/edge.
	ProfitReceiversColumn = "scenic_area_id"
	// PayTxBillsTable is the table that holds the pay_tx_bills relation/edge.
	PayTxBillsTable = "pay_tx_bills"
	// PayTxBillsInverseTable is the table name for the PayTxBill entity.
	// It exists in this package in order to avoid circular dependency with the "paytxbill" package.
	PayTxBillsInverseTable = "pay_tx_bills"
	// PayTxBillsColumn is the table column denoting the pay_tx_bills relation/edge.
	PayTxBillsColumn = "scenic_area_id"
	// CarBillingStrategiesTable is the table that holds the car_billing_strategies relation/edge.
	CarBillingStrategiesTable = "billing_strategies"
	// CarBillingStrategiesInverseTable is the table name for the BillingStrategy entity.
	// It exists in this package in order to avoid circular dependency with the "billingstrategy" package.
	CarBillingStrategiesInverseTable = "billing_strategies"
	// CarBillingStrategiesColumn is the table column denoting the car_billing_strategies relation/edge.
	CarBillingStrategiesColumn = "scenic_area_id"
	// MapTable is the table that holds the map relation/edge.
	MapTable = "scenic_area_maps"
	// MapInverseTable is the table name for the ScenicAreaMap entity.
	// It exists in this package in order to avoid circular dependency with the "scenicareamap" package.
	MapInverseTable = "scenic_area_maps"
	// MapColumn is the table column denoting the map relation/edge.
	MapColumn = "scenic_area_id"
	// MapVersionsTable is the table that holds the map_versions relation/edge.
	MapVersionsTable = "map_versions"
	// MapVersionsInverseTable is the table name for the MapVersion entity.
	// It exists in this package in order to avoid circular dependency with the "mapversion" package.
	MapVersionsInverseTable = "map_versions"
	// MapVersionsColumn is the table column denoting the map_versions relation/edge.
	MapVersionsColumn = "scenic_area_id"
	// UsersTable is the table that holds the users relation/edge.
	UsersTable = "users"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
	// UsersColumn is the table column denoting the users relation/edge.
	UsersColumn = "scenic_area_id"
	// OrdersTable is the table that holds the orders relation/edge.
	OrdersTable = "orders"
	// OrdersInverseTable is the table name for the Order entity.
	// It exists in this package in order to avoid circular dependency with the "order" package.
	OrdersInverseTable = "orders"
	// OrdersColumn is the table column denoting the orders relation/edge.
	OrdersColumn = "scenic_area_id"
	// CarOperateLogsTable is the table that holds the car_operate_logs relation/edge.
	CarOperateLogsTable = "cars_operate_logs"
	// CarOperateLogsInverseTable is the table name for the CarsOperateLog entity.
	// It exists in this package in order to avoid circular dependency with the "carsoperatelog" package.
	CarOperateLogsInverseTable = "cars_operate_logs"
	// CarOperateLogsColumn is the table column denoting the car_operate_logs relation/edge.
	CarOperateLogsColumn = "scenic_area_id"
	// StatsHourlyCarTable is the table that holds the stats_hourly_car relation/edge.
	StatsHourlyCarTable = "stats_hourly_cars"
	// StatsHourlyCarInverseTable is the table name for the StatsHourlyCar entity.
	// It exists in this package in order to avoid circular dependency with the "statshourlycar" package.
	StatsHourlyCarInverseTable = "stats_hourly_cars"
	// StatsHourlyCarColumn is the table column denoting the stats_hourly_car relation/edge.
	StatsHourlyCarColumn = "scenic_area_id"
	// ConfigFilesTable is the table that holds the config_files relation/edge.
	ConfigFilesTable = "car_configs"
	// ConfigFilesInverseTable is the table name for the CarConfig entity.
	// It exists in this package in order to avoid circular dependency with the "carconfig" package.
	ConfigFilesInverseTable = "car_configs"
	// ConfigFilesColumn is the table column denoting the config_files relation/edge.
	ConfigFilesColumn = "scenic_area_id"
)

// Columns holds all SQL columns for scenicarea fields.
var Columns = []string{
	FieldID,
	FieldCode,
	FieldName,
	FieldAddress,
	FieldManager,
	FieldPhone,
	FieldMchID,
	FieldMchName,
	FieldTimezone,
	FieldWgsLon,
	FieldWgsLat,
	FieldGcjLon,
	FieldGcjLat,
	FieldBdLon,
	FieldBdLat,
	FieldStatus,
	FieldExtendYokeeID,
	FieldCreateTime,
	FieldUpdateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultMchID holds the default value on creation for the "mch_id" field.
	DefaultMchID string
	// DefaultMchName holds the default value on creation for the "mch_name" field.
	DefaultMchName string
	// DefaultTimezone holds the default value on creation for the "timezone" field.
	DefaultTimezone int
	// DefaultWgsLon holds the default value on creation for the "wgs_lon" field.
	DefaultWgsLon float64
	// DefaultWgsLat holds the default value on creation for the "wgs_lat" field.
	DefaultWgsLat float64
	// DefaultGcjLon holds the default value on creation for the "gcj_lon" field.
	DefaultGcjLon float64
	// DefaultGcjLat holds the default value on creation for the "gcj_lat" field.
	DefaultGcjLat float64
	// DefaultBdLon holds the default value on creation for the "bd_lon" field.
	DefaultBdLon float64
	// DefaultBdLat holds the default value on creation for the "bd_lat" field.
	DefaultBdLat float64
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)

// OrderOption defines the ordering options for the ScenicArea queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByManager orders the results by the manager field.
func ByManager(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldManager, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByMchID orders the results by the mch_id field.
func ByMchID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMchID, opts...).ToFunc()
}

// ByMchName orders the results by the mch_name field.
func ByMchName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMchName, opts...).ToFunc()
}

// ByTimezone orders the results by the timezone field.
func ByTimezone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimezone, opts...).ToFunc()
}

// ByWgsLon orders the results by the wgs_lon field.
func ByWgsLon(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWgsLon, opts...).ToFunc()
}

// ByWgsLat orders the results by the wgs_lat field.
func ByWgsLat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWgsLat, opts...).ToFunc()
}

// ByGcjLon orders the results by the gcj_lon field.
func ByGcjLon(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGcjLon, opts...).ToFunc()
}

// ByGcjLat orders the results by the gcj_lat field.
func ByGcjLat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGcjLat, opts...).ToFunc()
}

// ByBdLon orders the results by the bd_lon field.
func ByBdLon(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBdLon, opts...).ToFunc()
}

// ByBdLat orders the results by the bd_lat field.
func ByBdLat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBdLat, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByExtendYokeeID orders the results by the extend_yokee_id field.
func ByExtendYokeeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExtendYokeeID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByCarsCount orders the results by cars count.
func ByCarsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCarsStep(), opts...)
	}
}

// ByCars orders the results by cars terms.
func ByCars(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAccountsCount orders the results by accounts count.
func ByAccountsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAccountsStep(), opts...)
	}
}

// ByAccounts orders the results by accounts terms.
func ByAccounts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAccountsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPoisCount orders the results by pois count.
func ByPoisCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPoisStep(), opts...)
	}
}

// ByPois orders the results by pois terms.
func ByPois(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPoisStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProfitReceiversCount orders the results by profit_receivers count.
func ByProfitReceiversCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProfitReceiversStep(), opts...)
	}
}

// ByProfitReceivers orders the results by profit_receivers terms.
func ByProfitReceivers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProfitReceiversStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPayTxBillsCount orders the results by pay_tx_bills count.
func ByPayTxBillsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPayTxBillsStep(), opts...)
	}
}

// ByPayTxBills orders the results by pay_tx_bills terms.
func ByPayTxBills(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPayTxBillsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCarBillingStrategiesCount orders the results by car_billing_strategies count.
func ByCarBillingStrategiesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCarBillingStrategiesStep(), opts...)
	}
}

// ByCarBillingStrategies orders the results by car_billing_strategies terms.
func ByCarBillingStrategies(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarBillingStrategiesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMapField orders the results by map field.
func ByMapField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMapStep(), sql.OrderByField(field, opts...))
	}
}

// ByMapVersionsCount orders the results by map_versions count.
func ByMapVersionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMapVersionsStep(), opts...)
	}
}

// ByMapVersions orders the results by map_versions terms.
func ByMapVersions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMapVersionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUsersCount orders the results by users count.
func ByUsersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUsersStep(), opts...)
	}
}

// ByUsers orders the results by users terms.
func ByUsers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOrdersCount orders the results by orders count.
func ByOrdersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrdersStep(), opts...)
	}
}

// ByOrders orders the results by orders terms.
func ByOrders(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrdersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCarOperateLogsCount orders the results by car_operate_logs count.
func ByCarOperateLogsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCarOperateLogsStep(), opts...)
	}
}

// ByCarOperateLogs orders the results by car_operate_logs terms.
func ByCarOperateLogs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarOperateLogsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByStatsHourlyCarCount orders the results by stats_hourly_car count.
func ByStatsHourlyCarCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newStatsHourlyCarStep(), opts...)
	}
}

// ByStatsHourlyCar orders the results by stats_hourly_car terms.
func ByStatsHourlyCar(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStatsHourlyCarStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByConfigFilesCount orders the results by config_files count.
func ByConfigFilesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newConfigFilesStep(), opts...)
	}
}

// ByConfigFiles orders the results by config_files terms.
func ByConfigFiles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newConfigFilesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCarsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CarsTable, CarsColumn),
	)
}
func newAccountsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AccountsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AccountsTable, AccountsColumn),
	)
}
func newPoisStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PoisInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PoisTable, PoisColumn),
	)
}
func newProfitReceiversStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProfitReceiversInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProfitReceiversTable, ProfitReceiversColumn),
	)
}
func newPayTxBillsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PayTxBillsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PayTxBillsTable, PayTxBillsColumn),
	)
}
func newCarBillingStrategiesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarBillingStrategiesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CarBillingStrategiesTable, CarBillingStrategiesColumn),
	)
}
func newMapStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MapInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, MapTable, MapColumn),
	)
}
func newMapVersionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MapVersionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MapVersionsTable, MapVersionsColumn),
	)
}
func newUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UsersTable, UsersColumn),
	)
}
func newOrdersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrdersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OrdersTable, OrdersColumn),
	)
}
func newCarOperateLogsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarOperateLogsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CarOperateLogsTable, CarOperateLogsColumn),
	)
}
func newStatsHourlyCarStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StatsHourlyCarInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, StatsHourlyCarTable, StatsHourlyCarColumn),
	)
}
func newConfigFilesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ConfigFilesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ConfigFilesTable, ConfigFilesColumn),
	)
}
