// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"sync"

	"entgo.io/ent/dialect"
)

// Tx is a transactional client that is created by calling Client.Tx().
type Tx struct {
	config
	// Access is the client for interacting with the Access builders.
	Access *AccessClient
	// Account is the client for interacting with the Account builders.
	Account *AccountClient
	// ActivityOrder is the client for interacting with the ActivityOrder builders.
	ActivityOrder *ActivityOrderClient
	// AppPush is the client for interacting with the AppPush builders.
	AppPush *AppPushClient
	// AppVersion is the client for interacting with the AppVersion builders.
	AppVersion *AppVersionClient
	// BillingStrategy is the client for interacting with the BillingStrategy builders.
	BillingStrategy *BillingStrategyClient
	// Car is the client for interacting with the Car builders.
	Car *CarClient
	// CarAlarm is the client for interacting with the CarAlarm builders.
	CarAlarm *CarAlarmClient
	// CarConfig is the client for interacting with the CarConfig builders.
	CarConfig *CarConfigClient
	// CarConfigDownload is the client for interacting with the CarConfigDownload builders.
	CarConfigDownload *CarConfigDownloadClient
	// CarConfigPack is the client for interacting with the CarConfigPack builders.
	CarConfigPack *CarConfigPackClient
	// CarConfigStatus is the client for interacting with the CarConfigStatus builders.
	CarConfigStatus *CarConfigStatusClient
	// CarCumulative is the client for interacting with the CarCumulative builders.
	CarCumulative *CarCumulativeClient
	// CarExtendYokee is the client for interacting with the CarExtendYokee builders.
	CarExtendYokee *CarExtendYokeeClient
	// CarLogUpload is the client for interacting with the CarLogUpload builders.
	CarLogUpload *CarLogUploadClient
	// CarsFlight is the client for interacting with the CarsFlight builders.
	CarsFlight *CarsFlightClient
	// CarsFlightExtendYokee is the client for interacting with the CarsFlightExtendYokee builders.
	CarsFlightExtendYokee *CarsFlightExtendYokeeClient
	// CarsModels is the client for interacting with the CarsModels builders.
	CarsModels *CarsModelsClient
	// CarsModelsGroups is the client for interacting with the CarsModelsGroups builders.
	CarsModelsGroups *CarsModelsGroupsClient
	// CarsModelsGroupsParams is the client for interacting with the CarsModelsGroupsParams builders.
	CarsModelsGroupsParams *CarsModelsGroupsParamsClient
	// CarsOperateLog is the client for interacting with the CarsOperateLog builders.
	CarsOperateLog *CarsOperateLogClient
	// Coupon is the client for interacting with the Coupon builders.
	Coupon *CouponClient
	// Feedback is the client for interacting with the Feedback builders.
	Feedback *FeedbackClient
	// File is the client for interacting with the File builders.
	File *FileClient
	// MapVersion is the client for interacting with the MapVersion builders.
	MapVersion *MapVersionClient
	// OperationUser is the client for interacting with the OperationUser builders.
	OperationUser *OperationUserClient
	// Order is the client for interacting with the Order builders.
	Order *OrderClient
	// OrderAppeal is the client for interacting with the OrderAppeal builders.
	OrderAppeal *OrderAppealClient
	// OrderBilling is the client for interacting with the OrderBilling builders.
	OrderBilling *OrderBillingClient
	// OrderExtendFlight is the client for interacting with the OrderExtendFlight builders.
	OrderExtendFlight *OrderExtendFlightClient
	// OrderRefund is the client for interacting with the OrderRefund builders.
	OrderRefund *OrderRefundClient
	// OrderSharing is the client for interacting with the OrderSharing builders.
	OrderSharing *OrderSharingClient
	// PayTxBill is the client for interacting with the PayTxBill builders.
	PayTxBill *PayTxBillClient
	// PaymentAccount is the client for interacting with the PaymentAccount builders.
	PaymentAccount *PaymentAccountClient
	// Poi is the client for interacting with the Poi builders.
	Poi *PoiClient
	// PoiExtendYokee is the client for interacting with the PoiExtendYokee builders.
	PoiExtendYokee *PoiExtendYokeeClient
	// ProfitReceiver is the client for interacting with the ProfitReceiver builders.
	ProfitReceiver *ProfitReceiverClient
	// Role is the client for interacting with the Role builders.
	Role *RoleClient
	// Route is the client for interacting with the Route builders.
	Route *RouteClient
	// ScenicArea is the client for interacting with the ScenicArea builders.
	ScenicArea *ScenicAreaClient
	// ScenicAreaExtendYokee is the client for interacting with the ScenicAreaExtendYokee builders.
	ScenicAreaExtendYokee *ScenicAreaExtendYokeeClient
	// ScenicAreaMap is the client for interacting with the ScenicAreaMap builders.
	ScenicAreaMap *ScenicAreaMapClient
	// ScheTask is the client for interacting with the ScheTask builders.
	ScheTask *ScheTaskClient
	// ScheTaskEvent is the client for interacting with the ScheTaskEvent builders.
	ScheTaskEvent *ScheTaskEventClient
	// SshAccount is the client for interacting with the SshAccount builders.
	SshAccount *SshAccountClient
	// StatsDaily is the client for interacting with the StatsDaily builders.
	StatsDaily *StatsDailyClient
	// StatsDailyCar is the client for interacting with the StatsDailyCar builders.
	StatsDailyCar *StatsDailyCarClient
	// StatsDailyScenicArea is the client for interacting with the StatsDailyScenicArea builders.
	StatsDailyScenicArea *StatsDailyScenicAreaClient
	// StatsHourlyCar is the client for interacting with the StatsHourlyCar builders.
	StatsHourlyCar *StatsHourlyCarClient
	// StatsHourlyScenicArea is the client for interacting with the StatsHourlyScenicArea builders.
	StatsHourlyScenicArea *StatsHourlyScenicAreaClient
	// SystemConfig is the client for interacting with the SystemConfig builders.
	SystemConfig *SystemConfigClient
	// SystemLog is the client for interacting with the SystemLog builders.
	SystemLog *SystemLogClient
	// Task is the client for interacting with the Task builders.
	Task *TaskClient
	// User is the client for interacting with the User builders.
	User *UserClient

	// lazily loaded.
	client     *Client
	clientOnce sync.Once
	// ctx lives for the life of the transaction. It is
	// the same context used by the underlying connection.
	ctx context.Context
}

type (
	// Committer is the interface that wraps the Commit method.
	Committer interface {
		Commit(context.Context, *Tx) error
	}

	// The CommitFunc type is an adapter to allow the use of ordinary
	// function as a Committer. If f is a function with the appropriate
	// signature, CommitFunc(f) is a Committer that calls f.
	CommitFunc func(context.Context, *Tx) error

	// CommitHook defines the "commit middleware". A function that gets a Committer
	// and returns a Committer. For example:
	//
	//	hook := func(next ent.Committer) ent.Committer {
	//		return ent.CommitFunc(func(ctx context.Context, tx *ent.Tx) error {
	//			// Do some stuff before.
	//			if err := next.Commit(ctx, tx); err != nil {
	//				return err
	//			}
	//			// Do some stuff after.
	//			return nil
	//		})
	//	}
	//
	CommitHook func(Committer) Committer
)

// Commit calls f(ctx, m).
func (f CommitFunc) Commit(ctx context.Context, tx *Tx) error {
	return f(ctx, tx)
}

// Commit commits the transaction.
func (tx *Tx) Commit() error {
	txDriver := tx.config.driver.(*txDriver)
	var fn Committer = CommitFunc(func(context.Context, *Tx) error {
		return txDriver.tx.Commit()
	})
	txDriver.mu.Lock()
	hooks := append([]CommitHook(nil), txDriver.onCommit...)
	txDriver.mu.Unlock()
	for i := len(hooks) - 1; i >= 0; i-- {
		fn = hooks[i](fn)
	}
	return fn.Commit(tx.ctx, tx)
}

// OnCommit adds a hook to call on commit.
func (tx *Tx) OnCommit(f CommitHook) {
	txDriver := tx.config.driver.(*txDriver)
	txDriver.mu.Lock()
	txDriver.onCommit = append(txDriver.onCommit, f)
	txDriver.mu.Unlock()
}

type (
	// Rollbacker is the interface that wraps the Rollback method.
	Rollbacker interface {
		Rollback(context.Context, *Tx) error
	}

	// The RollbackFunc type is an adapter to allow the use of ordinary
	// function as a Rollbacker. If f is a function with the appropriate
	// signature, RollbackFunc(f) is a Rollbacker that calls f.
	RollbackFunc func(context.Context, *Tx) error

	// RollbackHook defines the "rollback middleware". A function that gets a Rollbacker
	// and returns a Rollbacker. For example:
	//
	//	hook := func(next ent.Rollbacker) ent.Rollbacker {
	//		return ent.RollbackFunc(func(ctx context.Context, tx *ent.Tx) error {
	//			// Do some stuff before.
	//			if err := next.Rollback(ctx, tx); err != nil {
	//				return err
	//			}
	//			// Do some stuff after.
	//			return nil
	//		})
	//	}
	//
	RollbackHook func(Rollbacker) Rollbacker
)

// Rollback calls f(ctx, m).
func (f RollbackFunc) Rollback(ctx context.Context, tx *Tx) error {
	return f(ctx, tx)
}

// Rollback rollbacks the transaction.
func (tx *Tx) Rollback() error {
	txDriver := tx.config.driver.(*txDriver)
	var fn Rollbacker = RollbackFunc(func(context.Context, *Tx) error {
		return txDriver.tx.Rollback()
	})
	txDriver.mu.Lock()
	hooks := append([]RollbackHook(nil), txDriver.onRollback...)
	txDriver.mu.Unlock()
	for i := len(hooks) - 1; i >= 0; i-- {
		fn = hooks[i](fn)
	}
	return fn.Rollback(tx.ctx, tx)
}

// OnRollback adds a hook to call on rollback.
func (tx *Tx) OnRollback(f RollbackHook) {
	txDriver := tx.config.driver.(*txDriver)
	txDriver.mu.Lock()
	txDriver.onRollback = append(txDriver.onRollback, f)
	txDriver.mu.Unlock()
}

// Client returns a Client that binds to current transaction.
func (tx *Tx) Client() *Client {
	tx.clientOnce.Do(func() {
		tx.client = &Client{config: tx.config}
		tx.client.init()
	})
	return tx.client
}

func (tx *Tx) init() {
	tx.Access = NewAccessClient(tx.config)
	tx.Account = NewAccountClient(tx.config)
	tx.ActivityOrder = NewActivityOrderClient(tx.config)
	tx.AppPush = NewAppPushClient(tx.config)
	tx.AppVersion = NewAppVersionClient(tx.config)
	tx.BillingStrategy = NewBillingStrategyClient(tx.config)
	tx.Car = NewCarClient(tx.config)
	tx.CarAlarm = NewCarAlarmClient(tx.config)
	tx.CarConfig = NewCarConfigClient(tx.config)
	tx.CarConfigDownload = NewCarConfigDownloadClient(tx.config)
	tx.CarConfigPack = NewCarConfigPackClient(tx.config)
	tx.CarConfigStatus = NewCarConfigStatusClient(tx.config)
	tx.CarCumulative = NewCarCumulativeClient(tx.config)
	tx.CarExtendYokee = NewCarExtendYokeeClient(tx.config)
	tx.CarLogUpload = NewCarLogUploadClient(tx.config)
	tx.CarsFlight = NewCarsFlightClient(tx.config)
	tx.CarsFlightExtendYokee = NewCarsFlightExtendYokeeClient(tx.config)
	tx.CarsModels = NewCarsModelsClient(tx.config)
	tx.CarsModelsGroups = NewCarsModelsGroupsClient(tx.config)
	tx.CarsModelsGroupsParams = NewCarsModelsGroupsParamsClient(tx.config)
	tx.CarsOperateLog = NewCarsOperateLogClient(tx.config)
	tx.Coupon = NewCouponClient(tx.config)
	tx.Feedback = NewFeedbackClient(tx.config)
	tx.File = NewFileClient(tx.config)
	tx.MapVersion = NewMapVersionClient(tx.config)
	tx.OperationUser = NewOperationUserClient(tx.config)
	tx.Order = NewOrderClient(tx.config)
	tx.OrderAppeal = NewOrderAppealClient(tx.config)
	tx.OrderBilling = NewOrderBillingClient(tx.config)
	tx.OrderExtendFlight = NewOrderExtendFlightClient(tx.config)
	tx.OrderRefund = NewOrderRefundClient(tx.config)
	tx.OrderSharing = NewOrderSharingClient(tx.config)
	tx.PayTxBill = NewPayTxBillClient(tx.config)
	tx.PaymentAccount = NewPaymentAccountClient(tx.config)
	tx.Poi = NewPoiClient(tx.config)
	tx.PoiExtendYokee = NewPoiExtendYokeeClient(tx.config)
	tx.ProfitReceiver = NewProfitReceiverClient(tx.config)
	tx.Role = NewRoleClient(tx.config)
	tx.Route = NewRouteClient(tx.config)
	tx.ScenicArea = NewScenicAreaClient(tx.config)
	tx.ScenicAreaExtendYokee = NewScenicAreaExtendYokeeClient(tx.config)
	tx.ScenicAreaMap = NewScenicAreaMapClient(tx.config)
	tx.ScheTask = NewScheTaskClient(tx.config)
	tx.ScheTaskEvent = NewScheTaskEventClient(tx.config)
	tx.SshAccount = NewSshAccountClient(tx.config)
	tx.StatsDaily = NewStatsDailyClient(tx.config)
	tx.StatsDailyCar = NewStatsDailyCarClient(tx.config)
	tx.StatsDailyScenicArea = NewStatsDailyScenicAreaClient(tx.config)
	tx.StatsHourlyCar = NewStatsHourlyCarClient(tx.config)
	tx.StatsHourlyScenicArea = NewStatsHourlyScenicAreaClient(tx.config)
	tx.SystemConfig = NewSystemConfigClient(tx.config)
	tx.SystemLog = NewSystemLogClient(tx.config)
	tx.Task = NewTaskClient(tx.config)
	tx.User = NewUserClient(tx.config)
}

// txDriver wraps the given dialect.Tx with a nop dialect.Driver implementation.
// The idea is to support transactions without adding any extra code to the builders.
// When a builder calls to driver.Tx(), it gets the same dialect.Tx instance.
// Commit and Rollback are nop for the internal builders and the user must call one
// of them in order to commit or rollback the transaction.
//
// If a closed transaction is embedded in one of the generated entities, and the entity
// applies a query, for example: Access.QueryXXX(), the query will be executed
// through the driver which created this transaction.
//
// Note that txDriver is not goroutine safe.
type txDriver struct {
	// the driver we started the transaction from.
	drv dialect.Driver
	// tx is the underlying transaction.
	tx dialect.Tx
	// completion hooks.
	mu         sync.Mutex
	onCommit   []CommitHook
	onRollback []RollbackHook
}

// newTx creates a new transactional driver.
func newTx(ctx context.Context, drv dialect.Driver) (*txDriver, error) {
	tx, err := drv.Tx(ctx)
	if err != nil {
		return nil, err
	}
	return &txDriver{tx: tx, drv: drv}, nil
}

// Tx returns the transaction wrapper (txDriver) to avoid Commit or Rollback calls
// from the internal builders. Should be called only by the internal builders.
func (tx *txDriver) Tx(context.Context) (dialect.Tx, error) { return tx, nil }

// Dialect returns the dialect of the driver we started the transaction from.
func (tx *txDriver) Dialect() string { return tx.drv.Dialect() }

// Close is a nop close.
func (*txDriver) Close() error { return nil }

// Commit is a nop commit for the internal builders.
// User must call `Tx.Commit` in order to commit the transaction.
func (*txDriver) Commit() error { return nil }

// Rollback is a nop rollback for the internal builders.
// User must call `Tx.Rollback` in order to rollback the transaction.
func (*txDriver) Rollback() error { return nil }

// Exec calls tx.Exec.
func (tx *txDriver) Exec(ctx context.Context, query string, args, v any) error {
	return tx.tx.Exec(ctx, query, args, v)
}

// Query calls tx.Query.
func (tx *txDriver) Query(ctx context.Context, query string, args, v any) error {
	return tx.tx.Query(ctx, query, args, v)
}

var _ dialect.Driver = (*txDriver)(nil)
