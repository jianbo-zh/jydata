// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/systemconfig"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SystemConfig is the model entity for the SystemConfig schema.
type SystemConfig struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 分组
	Group systemconfig.Group `json:"group,omitempty"`
	// 名称
	Name string `json:"name,omitempty"`
	// 键
	Key string `json:"key,omitempty"`
	// 值
	Value string `json:"value,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime   time.Time `json:"update_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SystemConfig) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case systemconfig.FieldID:
			values[i] = new(sql.NullInt64)
		case systemconfig.FieldGroup, systemconfig.FieldName, systemconfig.FieldKey, systemconfig.FieldValue:
			values[i] = new(sql.NullString)
		case systemconfig.FieldCreateTime, systemconfig.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SystemConfig fields.
func (sc *SystemConfig) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case systemconfig.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sc.ID = int(value.Int64)
		case systemconfig.FieldGroup:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field group", values[i])
			} else if value.Valid {
				sc.Group = systemconfig.Group(value.String)
			}
		case systemconfig.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				sc.Name = value.String
			}
		case systemconfig.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				sc.Key = value.String
			}
		case systemconfig.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				sc.Value = value.String
			}
		case systemconfig.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				sc.CreateTime = value.Time
			}
		case systemconfig.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				sc.UpdateTime = value.Time
			}
		default:
			sc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the SystemConfig.
// This includes values selected through modifiers, order, etc.
func (sc *SystemConfig) GetValue(name string) (ent.Value, error) {
	return sc.selectValues.Get(name)
}

// Update returns a builder for updating this SystemConfig.
// Note that you need to call SystemConfig.Unwrap() before calling this method if this SystemConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (sc *SystemConfig) Update() *SystemConfigUpdateOne {
	return NewSystemConfigClient(sc.config).UpdateOne(sc)
}

// Unwrap unwraps the SystemConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sc *SystemConfig) Unwrap() *SystemConfig {
	_tx, ok := sc.config.driver.(*txDriver)
	if !ok {
		panic("ent: SystemConfig is not a transactional entity")
	}
	sc.config.driver = _tx.drv
	return sc
}

// String implements the fmt.Stringer.
func (sc *SystemConfig) String() string {
	var builder strings.Builder
	builder.WriteString("SystemConfig(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sc.ID))
	builder.WriteString("group=")
	builder.WriteString(fmt.Sprintf("%v", sc.Group))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(sc.Name)
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(sc.Key)
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(sc.Value)
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(sc.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(sc.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SystemConfigs is a parsable slice of SystemConfig.
type SystemConfigs []*SystemConfig
