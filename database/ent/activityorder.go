// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jianbo-zh/jydata/database/ent/activityorder"
)

// ActivityOrder is the model entity for the ActivityOrder schema.
type ActivityOrder struct {
	config `json:"-"`
	// ID of the ent.
	// ID
	ID int `json:"id,omitempty"`
	// 订单号
	OrderNo string `json:"order_no,omitempty"`
	// 订单支付ID
	WxTxID string `json:"wx_tx_id,omitempty"`
	// 景区ID
	ScenicAreaID int `json:"scenic_area_id,omitempty"`
	// 商户号
	MchID string `json:"mch_id,omitempty"`
	// 景区名称
	ScenicAreaName string `json:"scenic_area_name,omitempty"`
	// 用户id
	UserID int `json:"user_id,omitempty"`
	// 用户微信OpenID
	OpenID string `json:"open_id,omitempty"`
	// 订单金额
	OrderAmount int `json:"order_amount,omitempty"`
	// 订单状态(0-待支付、1-已支付)
	OrderState int `json:"order_state,omitempty"`
	// 订单备注
	Remark string `json:"remark,omitempty"`
	// 支付时间
	PaidTime time.Time `json:"paid_time,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime   time.Time `json:"update_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ActivityOrder) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case activityorder.FieldID, activityorder.FieldScenicAreaID, activityorder.FieldUserID, activityorder.FieldOrderAmount, activityorder.FieldOrderState:
			values[i] = new(sql.NullInt64)
		case activityorder.FieldOrderNo, activityorder.FieldWxTxID, activityorder.FieldMchID, activityorder.FieldScenicAreaName, activityorder.FieldOpenID, activityorder.FieldRemark:
			values[i] = new(sql.NullString)
		case activityorder.FieldPaidTime, activityorder.FieldCreateTime, activityorder.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ActivityOrder fields.
func (ao *ActivityOrder) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case activityorder.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ao.ID = int(value.Int64)
		case activityorder.FieldOrderNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field order_no", values[i])
			} else if value.Valid {
				ao.OrderNo = value.String
			}
		case activityorder.FieldWxTxID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field wx_tx_id", values[i])
			} else if value.Valid {
				ao.WxTxID = value.String
			}
		case activityorder.FieldScenicAreaID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field scenic_area_id", values[i])
			} else if value.Valid {
				ao.ScenicAreaID = int(value.Int64)
			}
		case activityorder.FieldMchID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mch_id", values[i])
			} else if value.Valid {
				ao.MchID = value.String
			}
		case activityorder.FieldScenicAreaName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scenic_area_name", values[i])
			} else if value.Valid {
				ao.ScenicAreaName = value.String
			}
		case activityorder.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ao.UserID = int(value.Int64)
			}
		case activityorder.FieldOpenID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field open_id", values[i])
			} else if value.Valid {
				ao.OpenID = value.String
			}
		case activityorder.FieldOrderAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_amount", values[i])
			} else if value.Valid {
				ao.OrderAmount = int(value.Int64)
			}
		case activityorder.FieldOrderState:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_state", values[i])
			} else if value.Valid {
				ao.OrderState = int(value.Int64)
			}
		case activityorder.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				ao.Remark = value.String
			}
		case activityorder.FieldPaidTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field paid_time", values[i])
			} else if value.Valid {
				ao.PaidTime = value.Time
			}
		case activityorder.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ao.CreateTime = value.Time
			}
		case activityorder.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ao.UpdateTime = value.Time
			}
		default:
			ao.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ActivityOrder.
// This includes values selected through modifiers, order, etc.
func (ao *ActivityOrder) Value(name string) (ent.Value, error) {
	return ao.selectValues.Get(name)
}

// Update returns a builder for updating this ActivityOrder.
// Note that you need to call ActivityOrder.Unwrap() before calling this method if this ActivityOrder
// was returned from a transaction, and the transaction was committed or rolled back.
func (ao *ActivityOrder) Update() *ActivityOrderUpdateOne {
	return NewActivityOrderClient(ao.config).UpdateOne(ao)
}

// Unwrap unwraps the ActivityOrder entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ao *ActivityOrder) Unwrap() *ActivityOrder {
	_tx, ok := ao.config.driver.(*txDriver)
	if !ok {
		panic("ent: ActivityOrder is not a transactional entity")
	}
	ao.config.driver = _tx.drv
	return ao
}

// String implements the fmt.Stringer.
func (ao *ActivityOrder) String() string {
	var builder strings.Builder
	builder.WriteString("ActivityOrder(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ao.ID))
	builder.WriteString("order_no=")
	builder.WriteString(ao.OrderNo)
	builder.WriteString(", ")
	builder.WriteString("wx_tx_id=")
	builder.WriteString(ao.WxTxID)
	builder.WriteString(", ")
	builder.WriteString("scenic_area_id=")
	builder.WriteString(fmt.Sprintf("%v", ao.ScenicAreaID))
	builder.WriteString(", ")
	builder.WriteString("mch_id=")
	builder.WriteString(ao.MchID)
	builder.WriteString(", ")
	builder.WriteString("scenic_area_name=")
	builder.WriteString(ao.ScenicAreaName)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ao.UserID))
	builder.WriteString(", ")
	builder.WriteString("open_id=")
	builder.WriteString(ao.OpenID)
	builder.WriteString(", ")
	builder.WriteString("order_amount=")
	builder.WriteString(fmt.Sprintf("%v", ao.OrderAmount))
	builder.WriteString(", ")
	builder.WriteString("order_state=")
	builder.WriteString(fmt.Sprintf("%v", ao.OrderState))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(ao.Remark)
	builder.WriteString(", ")
	builder.WriteString("paid_time=")
	builder.WriteString(ao.PaidTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(ao.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(ao.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ActivityOrders is a parsable slice of ActivityOrder.
type ActivityOrders []*ActivityOrder
