// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jianbo-zh/jydata/database/ent/apppush"
)

// AppPush is the model entity for the AppPush schema.
type AppPush struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 用户ID
	User string `json:"user,omitempty"`
	// 消息标题
	Title string `json:"title,omitempty"`
	// 消息内容
	Content string `json:"content,omitempty"`
	// 状态：1-待处理，2-已成功，3-已失败
	State int `json:"state,omitempty"`
	// 备注内容
	Remark string `json:"remark,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime   time.Time `json:"update_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppPush) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case apppush.FieldID, apppush.FieldState:
			values[i] = new(sql.NullInt64)
		case apppush.FieldUser, apppush.FieldTitle, apppush.FieldContent, apppush.FieldRemark:
			values[i] = new(sql.NullString)
		case apppush.FieldCreateTime, apppush.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppPush fields.
func (ap *AppPush) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case apppush.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ap.ID = int(value.Int64)
		case apppush.FieldUser:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user", values[i])
			} else if value.Valid {
				ap.User = value.String
			}
		case apppush.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				ap.Title = value.String
			}
		case apppush.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				ap.Content = value.String
			}
		case apppush.FieldState:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				ap.State = int(value.Int64)
			}
		case apppush.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				ap.Remark = value.String
			}
		case apppush.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ap.CreateTime = value.Time
			}
		case apppush.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ap.UpdateTime = value.Time
			}
		default:
			ap.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AppPush.
// This includes values selected through modifiers, order, etc.
func (ap *AppPush) Value(name string) (ent.Value, error) {
	return ap.selectValues.Get(name)
}

// Update returns a builder for updating this AppPush.
// Note that you need to call AppPush.Unwrap() before calling this method if this AppPush
// was returned from a transaction, and the transaction was committed or rolled back.
func (ap *AppPush) Update() *AppPushUpdateOne {
	return NewAppPushClient(ap.config).UpdateOne(ap)
}

// Unwrap unwraps the AppPush entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ap *AppPush) Unwrap() *AppPush {
	_tx, ok := ap.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppPush is not a transactional entity")
	}
	ap.config.driver = _tx.drv
	return ap
}

// String implements the fmt.Stringer.
func (ap *AppPush) String() string {
	var builder strings.Builder
	builder.WriteString("AppPush(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ap.ID))
	builder.WriteString("user=")
	builder.WriteString(ap.User)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(ap.Title)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(ap.Content)
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(fmt.Sprintf("%v", ap.State))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(ap.Remark)
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(ap.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(ap.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AppPushes is a parsable slice of AppPush.
type AppPushes []*AppPush
