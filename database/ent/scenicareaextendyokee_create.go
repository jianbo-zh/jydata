// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/scenicareaextendyokee"
)

// ScenicAreaExtendYokeeCreate is the builder for creating a ScenicAreaExtendYokee entity.
type ScenicAreaExtendYokeeCreate struct {
	config
	mutation *ScenicAreaExtendYokeeMutation
	hooks    []Hook
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (saeyc *ScenicAreaExtendYokeeCreate) SetScenicAreaID(i int) *ScenicAreaExtendYokeeCreate {
	saeyc.mutation.SetScenicAreaID(i)
	return saeyc
}

// SetYokeeAppID sets the "yokee_app_id" field.
func (saeyc *ScenicAreaExtendYokeeCreate) SetYokeeAppID(s string) *ScenicAreaExtendYokeeCreate {
	saeyc.mutation.SetYokeeAppID(s)
	return saeyc
}

// SetYokeeAppKey sets the "yokee_app_key" field.
func (saeyc *ScenicAreaExtendYokeeCreate) SetYokeeAppKey(s string) *ScenicAreaExtendYokeeCreate {
	saeyc.mutation.SetYokeeAppKey(s)
	return saeyc
}

// SetYokeeOrgID sets the "yokee_org_id" field.
func (saeyc *ScenicAreaExtendYokeeCreate) SetYokeeOrgID(i int) *ScenicAreaExtendYokeeCreate {
	saeyc.mutation.SetYokeeOrgID(i)
	return saeyc
}

// SetYokeeOrgName sets the "yokee_org_name" field.
func (saeyc *ScenicAreaExtendYokeeCreate) SetYokeeOrgName(s string) *ScenicAreaExtendYokeeCreate {
	saeyc.mutation.SetYokeeOrgName(s)
	return saeyc
}

// SetYokeeStationID sets the "yokee_station_id" field.
func (saeyc *ScenicAreaExtendYokeeCreate) SetYokeeStationID(i int) *ScenicAreaExtendYokeeCreate {
	saeyc.mutation.SetYokeeStationID(i)
	return saeyc
}

// SetYokeeStationName sets the "yokee_station_name" field.
func (saeyc *ScenicAreaExtendYokeeCreate) SetYokeeStationName(s string) *ScenicAreaExtendYokeeCreate {
	saeyc.mutation.SetYokeeStationName(s)
	return saeyc
}

// SetCreateTime sets the "create_time" field.
func (saeyc *ScenicAreaExtendYokeeCreate) SetCreateTime(t time.Time) *ScenicAreaExtendYokeeCreate {
	saeyc.mutation.SetCreateTime(t)
	return saeyc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (saeyc *ScenicAreaExtendYokeeCreate) SetNillableCreateTime(t *time.Time) *ScenicAreaExtendYokeeCreate {
	if t != nil {
		saeyc.SetCreateTime(*t)
	}
	return saeyc
}

// SetUpdateTime sets the "update_time" field.
func (saeyc *ScenicAreaExtendYokeeCreate) SetUpdateTime(t time.Time) *ScenicAreaExtendYokeeCreate {
	saeyc.mutation.SetUpdateTime(t)
	return saeyc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (saeyc *ScenicAreaExtendYokeeCreate) SetNillableUpdateTime(t *time.Time) *ScenicAreaExtendYokeeCreate {
	if t != nil {
		saeyc.SetUpdateTime(*t)
	}
	return saeyc
}

// SetID sets the "id" field.
func (saeyc *ScenicAreaExtendYokeeCreate) SetID(i int) *ScenicAreaExtendYokeeCreate {
	saeyc.mutation.SetID(i)
	return saeyc
}

// Mutation returns the ScenicAreaExtendYokeeMutation object of the builder.
func (saeyc *ScenicAreaExtendYokeeCreate) Mutation() *ScenicAreaExtendYokeeMutation {
	return saeyc.mutation
}

// Save creates the ScenicAreaExtendYokee in the database.
func (saeyc *ScenicAreaExtendYokeeCreate) Save(ctx context.Context) (*ScenicAreaExtendYokee, error) {
	saeyc.defaults()
	return withHooks(ctx, saeyc.sqlSave, saeyc.mutation, saeyc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (saeyc *ScenicAreaExtendYokeeCreate) SaveX(ctx context.Context) *ScenicAreaExtendYokee {
	v, err := saeyc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (saeyc *ScenicAreaExtendYokeeCreate) Exec(ctx context.Context) error {
	_, err := saeyc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (saeyc *ScenicAreaExtendYokeeCreate) ExecX(ctx context.Context) {
	if err := saeyc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (saeyc *ScenicAreaExtendYokeeCreate) defaults() {
	if _, ok := saeyc.mutation.CreateTime(); !ok {
		v := scenicareaextendyokee.DefaultCreateTime()
		saeyc.mutation.SetCreateTime(v)
	}
	if _, ok := saeyc.mutation.UpdateTime(); !ok {
		v := scenicareaextendyokee.DefaultUpdateTime()
		saeyc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (saeyc *ScenicAreaExtendYokeeCreate) check() error {
	if _, ok := saeyc.mutation.ScenicAreaID(); !ok {
		return &ValidationError{Name: "scenic_area_id", err: errors.New(`ent: missing required field "ScenicAreaExtendYokee.scenic_area_id"`)}
	}
	if _, ok := saeyc.mutation.YokeeAppID(); !ok {
		return &ValidationError{Name: "yokee_app_id", err: errors.New(`ent: missing required field "ScenicAreaExtendYokee.yokee_app_id"`)}
	}
	if _, ok := saeyc.mutation.YokeeAppKey(); !ok {
		return &ValidationError{Name: "yokee_app_key", err: errors.New(`ent: missing required field "ScenicAreaExtendYokee.yokee_app_key"`)}
	}
	if _, ok := saeyc.mutation.YokeeOrgID(); !ok {
		return &ValidationError{Name: "yokee_org_id", err: errors.New(`ent: missing required field "ScenicAreaExtendYokee.yokee_org_id"`)}
	}
	if _, ok := saeyc.mutation.YokeeOrgName(); !ok {
		return &ValidationError{Name: "yokee_org_name", err: errors.New(`ent: missing required field "ScenicAreaExtendYokee.yokee_org_name"`)}
	}
	if _, ok := saeyc.mutation.YokeeStationID(); !ok {
		return &ValidationError{Name: "yokee_station_id", err: errors.New(`ent: missing required field "ScenicAreaExtendYokee.yokee_station_id"`)}
	}
	if _, ok := saeyc.mutation.YokeeStationName(); !ok {
		return &ValidationError{Name: "yokee_station_name", err: errors.New(`ent: missing required field "ScenicAreaExtendYokee.yokee_station_name"`)}
	}
	if _, ok := saeyc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "ScenicAreaExtendYokee.create_time"`)}
	}
	if _, ok := saeyc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "ScenicAreaExtendYokee.update_time"`)}
	}
	return nil
}

func (saeyc *ScenicAreaExtendYokeeCreate) sqlSave(ctx context.Context) (*ScenicAreaExtendYokee, error) {
	if err := saeyc.check(); err != nil {
		return nil, err
	}
	_node, _spec := saeyc.createSpec()
	if err := sqlgraph.CreateNode(ctx, saeyc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	saeyc.mutation.id = &_node.ID
	saeyc.mutation.done = true
	return _node, nil
}

func (saeyc *ScenicAreaExtendYokeeCreate) createSpec() (*ScenicAreaExtendYokee, *sqlgraph.CreateSpec) {
	var (
		_node = &ScenicAreaExtendYokee{config: saeyc.config}
		_spec = sqlgraph.NewCreateSpec(scenicareaextendyokee.Table, sqlgraph.NewFieldSpec(scenicareaextendyokee.FieldID, field.TypeInt))
	)
	if id, ok := saeyc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := saeyc.mutation.ScenicAreaID(); ok {
		_spec.SetField(scenicareaextendyokee.FieldScenicAreaID, field.TypeInt, value)
		_node.ScenicAreaID = value
	}
	if value, ok := saeyc.mutation.YokeeAppID(); ok {
		_spec.SetField(scenicareaextendyokee.FieldYokeeAppID, field.TypeString, value)
		_node.YokeeAppID = value
	}
	if value, ok := saeyc.mutation.YokeeAppKey(); ok {
		_spec.SetField(scenicareaextendyokee.FieldYokeeAppKey, field.TypeString, value)
		_node.YokeeAppKey = value
	}
	if value, ok := saeyc.mutation.YokeeOrgID(); ok {
		_spec.SetField(scenicareaextendyokee.FieldYokeeOrgID, field.TypeInt, value)
		_node.YokeeOrgID = value
	}
	if value, ok := saeyc.mutation.YokeeOrgName(); ok {
		_spec.SetField(scenicareaextendyokee.FieldYokeeOrgName, field.TypeString, value)
		_node.YokeeOrgName = value
	}
	if value, ok := saeyc.mutation.YokeeStationID(); ok {
		_spec.SetField(scenicareaextendyokee.FieldYokeeStationID, field.TypeInt, value)
		_node.YokeeStationID = value
	}
	if value, ok := saeyc.mutation.YokeeStationName(); ok {
		_spec.SetField(scenicareaextendyokee.FieldYokeeStationName, field.TypeString, value)
		_node.YokeeStationName = value
	}
	if value, ok := saeyc.mutation.CreateTime(); ok {
		_spec.SetField(scenicareaextendyokee.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := saeyc.mutation.UpdateTime(); ok {
		_spec.SetField(scenicareaextendyokee.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// ScenicAreaExtendYokeeCreateBulk is the builder for creating many ScenicAreaExtendYokee entities in bulk.
type ScenicAreaExtendYokeeCreateBulk struct {
	config
	err      error
	builders []*ScenicAreaExtendYokeeCreate
}

// Save creates the ScenicAreaExtendYokee entities in the database.
func (saeycb *ScenicAreaExtendYokeeCreateBulk) Save(ctx context.Context) ([]*ScenicAreaExtendYokee, error) {
	if saeycb.err != nil {
		return nil, saeycb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(saeycb.builders))
	nodes := make([]*ScenicAreaExtendYokee, len(saeycb.builders))
	mutators := make([]Mutator, len(saeycb.builders))
	for i := range saeycb.builders {
		func(i int, root context.Context) {
			builder := saeycb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScenicAreaExtendYokeeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, saeycb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, saeycb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, saeycb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (saeycb *ScenicAreaExtendYokeeCreateBulk) SaveX(ctx context.Context) []*ScenicAreaExtendYokee {
	v, err := saeycb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (saeycb *ScenicAreaExtendYokeeCreateBulk) Exec(ctx context.Context) error {
	_, err := saeycb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (saeycb *ScenicAreaExtendYokeeCreateBulk) ExecX(ctx context.Context) {
	if err := saeycb.Exec(ctx); err != nil {
		panic(err)
	}
}
