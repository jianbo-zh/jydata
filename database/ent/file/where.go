// Code generated by ent, DO NOT EDIT.

package file

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.File {
	return predicate.File(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.File {
	return predicate.File(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.File {
	return predicate.File(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.File {
	return predicate.File(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.File {
	return predicate.File(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.File {
	return predicate.File(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.File {
	return predicate.File(sql.FieldLTE(FieldID, id))
}

// StorageType applies equality check predicate on the "storage_type" field. It's identical to StorageTypeEQ.
func StorageType(v int) predicate.File {
	return predicate.File(sql.FieldEQ(FieldStorageType, v))
}

// CreatorID applies equality check predicate on the "creator_id" field. It's identical to CreatorIDEQ.
func CreatorID(v int) predicate.File {
	return predicate.File(sql.FieldEQ(FieldCreatorID, v))
}

// ScenicAreaID applies equality check predicate on the "scenic_area_id" field. It's identical to ScenicAreaIDEQ.
func ScenicAreaID(v int) predicate.File {
	return predicate.File(sql.FieldEQ(FieldScenicAreaID, v))
}

// FileCategory applies equality check predicate on the "file_category" field. It's identical to FileCategoryEQ.
func FileCategory(v int) predicate.File {
	return predicate.File(sql.FieldEQ(FieldFileCategory, v))
}

// FileType applies equality check predicate on the "file_type" field. It's identical to FileTypeEQ.
func FileType(v int) predicate.File {
	return predicate.File(sql.FieldEQ(FieldFileType, v))
}

// FileSha1 applies equality check predicate on the "file_sha1" field. It's identical to FileSha1EQ.
func FileSha1(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldFileSha1, v))
}

// FilePath applies equality check predicate on the "file_path" field. It's identical to FilePathEQ.
func FilePath(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldFilePath, v))
}

// MimeType applies equality check predicate on the "mime_type" field. It's identical to MimeTypeEQ.
func MimeType(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldMimeType, v))
}

// FileSuffix applies equality check predicate on the "file_suffix" field. It's identical to FileSuffixEQ.
func FileSuffix(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldFileSuffix, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.File {
	return predicate.File(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.File {
	return predicate.File(sql.FieldEQ(FieldUpdateTime, v))
}

// StorageTypeEQ applies the EQ predicate on the "storage_type" field.
func StorageTypeEQ(v int) predicate.File {
	return predicate.File(sql.FieldEQ(FieldStorageType, v))
}

// StorageTypeNEQ applies the NEQ predicate on the "storage_type" field.
func StorageTypeNEQ(v int) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldStorageType, v))
}

// StorageTypeIn applies the In predicate on the "storage_type" field.
func StorageTypeIn(vs ...int) predicate.File {
	return predicate.File(sql.FieldIn(FieldStorageType, vs...))
}

// StorageTypeNotIn applies the NotIn predicate on the "storage_type" field.
func StorageTypeNotIn(vs ...int) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldStorageType, vs...))
}

// StorageTypeGT applies the GT predicate on the "storage_type" field.
func StorageTypeGT(v int) predicate.File {
	return predicate.File(sql.FieldGT(FieldStorageType, v))
}

// StorageTypeGTE applies the GTE predicate on the "storage_type" field.
func StorageTypeGTE(v int) predicate.File {
	return predicate.File(sql.FieldGTE(FieldStorageType, v))
}

// StorageTypeLT applies the LT predicate on the "storage_type" field.
func StorageTypeLT(v int) predicate.File {
	return predicate.File(sql.FieldLT(FieldStorageType, v))
}

// StorageTypeLTE applies the LTE predicate on the "storage_type" field.
func StorageTypeLTE(v int) predicate.File {
	return predicate.File(sql.FieldLTE(FieldStorageType, v))
}

// CreatorIDEQ applies the EQ predicate on the "creator_id" field.
func CreatorIDEQ(v int) predicate.File {
	return predicate.File(sql.FieldEQ(FieldCreatorID, v))
}

// CreatorIDNEQ applies the NEQ predicate on the "creator_id" field.
func CreatorIDNEQ(v int) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldCreatorID, v))
}

// CreatorIDIn applies the In predicate on the "creator_id" field.
func CreatorIDIn(vs ...int) predicate.File {
	return predicate.File(sql.FieldIn(FieldCreatorID, vs...))
}

// CreatorIDNotIn applies the NotIn predicate on the "creator_id" field.
func CreatorIDNotIn(vs ...int) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldCreatorID, vs...))
}

// CreatorIDGT applies the GT predicate on the "creator_id" field.
func CreatorIDGT(v int) predicate.File {
	return predicate.File(sql.FieldGT(FieldCreatorID, v))
}

// CreatorIDGTE applies the GTE predicate on the "creator_id" field.
func CreatorIDGTE(v int) predicate.File {
	return predicate.File(sql.FieldGTE(FieldCreatorID, v))
}

// CreatorIDLT applies the LT predicate on the "creator_id" field.
func CreatorIDLT(v int) predicate.File {
	return predicate.File(sql.FieldLT(FieldCreatorID, v))
}

// CreatorIDLTE applies the LTE predicate on the "creator_id" field.
func CreatorIDLTE(v int) predicate.File {
	return predicate.File(sql.FieldLTE(FieldCreatorID, v))
}

// ScenicAreaIDEQ applies the EQ predicate on the "scenic_area_id" field.
func ScenicAreaIDEQ(v int) predicate.File {
	return predicate.File(sql.FieldEQ(FieldScenicAreaID, v))
}

// ScenicAreaIDNEQ applies the NEQ predicate on the "scenic_area_id" field.
func ScenicAreaIDNEQ(v int) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldScenicAreaID, v))
}

// ScenicAreaIDIn applies the In predicate on the "scenic_area_id" field.
func ScenicAreaIDIn(vs ...int) predicate.File {
	return predicate.File(sql.FieldIn(FieldScenicAreaID, vs...))
}

// ScenicAreaIDNotIn applies the NotIn predicate on the "scenic_area_id" field.
func ScenicAreaIDNotIn(vs ...int) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldScenicAreaID, vs...))
}

// ScenicAreaIDGT applies the GT predicate on the "scenic_area_id" field.
func ScenicAreaIDGT(v int) predicate.File {
	return predicate.File(sql.FieldGT(FieldScenicAreaID, v))
}

// ScenicAreaIDGTE applies the GTE predicate on the "scenic_area_id" field.
func ScenicAreaIDGTE(v int) predicate.File {
	return predicate.File(sql.FieldGTE(FieldScenicAreaID, v))
}

// ScenicAreaIDLT applies the LT predicate on the "scenic_area_id" field.
func ScenicAreaIDLT(v int) predicate.File {
	return predicate.File(sql.FieldLT(FieldScenicAreaID, v))
}

// ScenicAreaIDLTE applies the LTE predicate on the "scenic_area_id" field.
func ScenicAreaIDLTE(v int) predicate.File {
	return predicate.File(sql.FieldLTE(FieldScenicAreaID, v))
}

// FileCategoryEQ applies the EQ predicate on the "file_category" field.
func FileCategoryEQ(v int) predicate.File {
	return predicate.File(sql.FieldEQ(FieldFileCategory, v))
}

// FileCategoryNEQ applies the NEQ predicate on the "file_category" field.
func FileCategoryNEQ(v int) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldFileCategory, v))
}

// FileCategoryIn applies the In predicate on the "file_category" field.
func FileCategoryIn(vs ...int) predicate.File {
	return predicate.File(sql.FieldIn(FieldFileCategory, vs...))
}

// FileCategoryNotIn applies the NotIn predicate on the "file_category" field.
func FileCategoryNotIn(vs ...int) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldFileCategory, vs...))
}

// FileCategoryGT applies the GT predicate on the "file_category" field.
func FileCategoryGT(v int) predicate.File {
	return predicate.File(sql.FieldGT(FieldFileCategory, v))
}

// FileCategoryGTE applies the GTE predicate on the "file_category" field.
func FileCategoryGTE(v int) predicate.File {
	return predicate.File(sql.FieldGTE(FieldFileCategory, v))
}

// FileCategoryLT applies the LT predicate on the "file_category" field.
func FileCategoryLT(v int) predicate.File {
	return predicate.File(sql.FieldLT(FieldFileCategory, v))
}

// FileCategoryLTE applies the LTE predicate on the "file_category" field.
func FileCategoryLTE(v int) predicate.File {
	return predicate.File(sql.FieldLTE(FieldFileCategory, v))
}

// FileTypeEQ applies the EQ predicate on the "file_type" field.
func FileTypeEQ(v int) predicate.File {
	return predicate.File(sql.FieldEQ(FieldFileType, v))
}

// FileTypeNEQ applies the NEQ predicate on the "file_type" field.
func FileTypeNEQ(v int) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldFileType, v))
}

// FileTypeIn applies the In predicate on the "file_type" field.
func FileTypeIn(vs ...int) predicate.File {
	return predicate.File(sql.FieldIn(FieldFileType, vs...))
}

// FileTypeNotIn applies the NotIn predicate on the "file_type" field.
func FileTypeNotIn(vs ...int) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldFileType, vs...))
}

// FileTypeGT applies the GT predicate on the "file_type" field.
func FileTypeGT(v int) predicate.File {
	return predicate.File(sql.FieldGT(FieldFileType, v))
}

// FileTypeGTE applies the GTE predicate on the "file_type" field.
func FileTypeGTE(v int) predicate.File {
	return predicate.File(sql.FieldGTE(FieldFileType, v))
}

// FileTypeLT applies the LT predicate on the "file_type" field.
func FileTypeLT(v int) predicate.File {
	return predicate.File(sql.FieldLT(FieldFileType, v))
}

// FileTypeLTE applies the LTE predicate on the "file_type" field.
func FileTypeLTE(v int) predicate.File {
	return predicate.File(sql.FieldLTE(FieldFileType, v))
}

// FileSha1EQ applies the EQ predicate on the "file_sha1" field.
func FileSha1EQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldFileSha1, v))
}

// FileSha1NEQ applies the NEQ predicate on the "file_sha1" field.
func FileSha1NEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldFileSha1, v))
}

// FileSha1In applies the In predicate on the "file_sha1" field.
func FileSha1In(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldFileSha1, vs...))
}

// FileSha1NotIn applies the NotIn predicate on the "file_sha1" field.
func FileSha1NotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldFileSha1, vs...))
}

// FileSha1GT applies the GT predicate on the "file_sha1" field.
func FileSha1GT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldFileSha1, v))
}

// FileSha1GTE applies the GTE predicate on the "file_sha1" field.
func FileSha1GTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldFileSha1, v))
}

// FileSha1LT applies the LT predicate on the "file_sha1" field.
func FileSha1LT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldFileSha1, v))
}

// FileSha1LTE applies the LTE predicate on the "file_sha1" field.
func FileSha1LTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldFileSha1, v))
}

// FileSha1Contains applies the Contains predicate on the "file_sha1" field.
func FileSha1Contains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldFileSha1, v))
}

// FileSha1HasPrefix applies the HasPrefix predicate on the "file_sha1" field.
func FileSha1HasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldFileSha1, v))
}

// FileSha1HasSuffix applies the HasSuffix predicate on the "file_sha1" field.
func FileSha1HasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldFileSha1, v))
}

// FileSha1EqualFold applies the EqualFold predicate on the "file_sha1" field.
func FileSha1EqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldFileSha1, v))
}

// FileSha1ContainsFold applies the ContainsFold predicate on the "file_sha1" field.
func FileSha1ContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldFileSha1, v))
}

// FilePathEQ applies the EQ predicate on the "file_path" field.
func FilePathEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldFilePath, v))
}

// FilePathNEQ applies the NEQ predicate on the "file_path" field.
func FilePathNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldFilePath, v))
}

// FilePathIn applies the In predicate on the "file_path" field.
func FilePathIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldFilePath, vs...))
}

// FilePathNotIn applies the NotIn predicate on the "file_path" field.
func FilePathNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldFilePath, vs...))
}

// FilePathGT applies the GT predicate on the "file_path" field.
func FilePathGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldFilePath, v))
}

// FilePathGTE applies the GTE predicate on the "file_path" field.
func FilePathGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldFilePath, v))
}

// FilePathLT applies the LT predicate on the "file_path" field.
func FilePathLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldFilePath, v))
}

// FilePathLTE applies the LTE predicate on the "file_path" field.
func FilePathLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldFilePath, v))
}

// FilePathContains applies the Contains predicate on the "file_path" field.
func FilePathContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldFilePath, v))
}

// FilePathHasPrefix applies the HasPrefix predicate on the "file_path" field.
func FilePathHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldFilePath, v))
}

// FilePathHasSuffix applies the HasSuffix predicate on the "file_path" field.
func FilePathHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldFilePath, v))
}

// FilePathEqualFold applies the EqualFold predicate on the "file_path" field.
func FilePathEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldFilePath, v))
}

// FilePathContainsFold applies the ContainsFold predicate on the "file_path" field.
func FilePathContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldFilePath, v))
}

// MimeTypeEQ applies the EQ predicate on the "mime_type" field.
func MimeTypeEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldMimeType, v))
}

// MimeTypeNEQ applies the NEQ predicate on the "mime_type" field.
func MimeTypeNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldMimeType, v))
}

// MimeTypeIn applies the In predicate on the "mime_type" field.
func MimeTypeIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldMimeType, vs...))
}

// MimeTypeNotIn applies the NotIn predicate on the "mime_type" field.
func MimeTypeNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldMimeType, vs...))
}

// MimeTypeGT applies the GT predicate on the "mime_type" field.
func MimeTypeGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldMimeType, v))
}

// MimeTypeGTE applies the GTE predicate on the "mime_type" field.
func MimeTypeGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldMimeType, v))
}

// MimeTypeLT applies the LT predicate on the "mime_type" field.
func MimeTypeLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldMimeType, v))
}

// MimeTypeLTE applies the LTE predicate on the "mime_type" field.
func MimeTypeLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldMimeType, v))
}

// MimeTypeContains applies the Contains predicate on the "mime_type" field.
func MimeTypeContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldMimeType, v))
}

// MimeTypeHasPrefix applies the HasPrefix predicate on the "mime_type" field.
func MimeTypeHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldMimeType, v))
}

// MimeTypeHasSuffix applies the HasSuffix predicate on the "mime_type" field.
func MimeTypeHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldMimeType, v))
}

// MimeTypeEqualFold applies the EqualFold predicate on the "mime_type" field.
func MimeTypeEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldMimeType, v))
}

// MimeTypeContainsFold applies the ContainsFold predicate on the "mime_type" field.
func MimeTypeContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldMimeType, v))
}

// FileSuffixEQ applies the EQ predicate on the "file_suffix" field.
func FileSuffixEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldFileSuffix, v))
}

// FileSuffixNEQ applies the NEQ predicate on the "file_suffix" field.
func FileSuffixNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldFileSuffix, v))
}

// FileSuffixIn applies the In predicate on the "file_suffix" field.
func FileSuffixIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldFileSuffix, vs...))
}

// FileSuffixNotIn applies the NotIn predicate on the "file_suffix" field.
func FileSuffixNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldFileSuffix, vs...))
}

// FileSuffixGT applies the GT predicate on the "file_suffix" field.
func FileSuffixGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldFileSuffix, v))
}

// FileSuffixGTE applies the GTE predicate on the "file_suffix" field.
func FileSuffixGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldFileSuffix, v))
}

// FileSuffixLT applies the LT predicate on the "file_suffix" field.
func FileSuffixLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldFileSuffix, v))
}

// FileSuffixLTE applies the LTE predicate on the "file_suffix" field.
func FileSuffixLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldFileSuffix, v))
}

// FileSuffixContains applies the Contains predicate on the "file_suffix" field.
func FileSuffixContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldFileSuffix, v))
}

// FileSuffixHasPrefix applies the HasPrefix predicate on the "file_suffix" field.
func FileSuffixHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldFileSuffix, v))
}

// FileSuffixHasSuffix applies the HasSuffix predicate on the "file_suffix" field.
func FileSuffixHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldFileSuffix, v))
}

// FileSuffixEqualFold applies the EqualFold predicate on the "file_suffix" field.
func FileSuffixEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldFileSuffix, v))
}

// FileSuffixContainsFold applies the ContainsFold predicate on the "file_suffix" field.
func FileSuffixContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldFileSuffix, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.File {
	return predicate.File(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.File {
	return predicate.File(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.File {
	return predicate.File(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.File {
	return predicate.File(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.File {
	return predicate.File(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.File {
	return predicate.File(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.File {
	return predicate.File(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.File {
	return predicate.File(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.File {
	return predicate.File(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.File {
	return predicate.File(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.File {
	return predicate.File(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.File {
	return predicate.File(sql.FieldLTE(FieldUpdateTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.File) predicate.File {
	return predicate.File(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.File) predicate.File {
	return predicate.File(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.File) predicate.File {
	return predicate.File(sql.NotPredicates(p))
}
