// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/otaversion"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"github.com/jianbo-zh/jydata/database/schema/types"
)

// OtaVersionUpdate is the builder for updating OtaVersion entities.
type OtaVersionUpdate struct {
	config
	hooks    []Hook
	mutation *OtaVersionMutation
}

// Where appends a list predicates to the OtaVersionUpdate builder.
func (ovu *OtaVersionUpdate) Where(ps ...predicate.OtaVersion) *OtaVersionUpdate {
	ovu.mutation.Where(ps...)
	return ovu
}

// SetDeleteTime sets the "delete_time" field.
func (ovu *OtaVersionUpdate) SetDeleteTime(t time.Time) *OtaVersionUpdate {
	ovu.mutation.SetDeleteTime(t)
	return ovu
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (ovu *OtaVersionUpdate) SetNillableDeleteTime(t *time.Time) *OtaVersionUpdate {
	if t != nil {
		ovu.SetDeleteTime(*t)
	}
	return ovu
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (ovu *OtaVersionUpdate) ClearDeleteTime() *OtaVersionUpdate {
	ovu.mutation.ClearDeleteTime()
	return ovu
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (ovu *OtaVersionUpdate) SetScenicAreaID(i int) *OtaVersionUpdate {
	ovu.mutation.ResetScenicAreaID()
	ovu.mutation.SetScenicAreaID(i)
	return ovu
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (ovu *OtaVersionUpdate) SetNillableScenicAreaID(i *int) *OtaVersionUpdate {
	if i != nil {
		ovu.SetScenicAreaID(*i)
	}
	return ovu
}

// AddScenicAreaID adds i to the "scenic_area_id" field.
func (ovu *OtaVersionUpdate) AddScenicAreaID(i int) *OtaVersionUpdate {
	ovu.mutation.AddScenicAreaID(i)
	return ovu
}

// ClearScenicAreaID clears the value of the "scenic_area_id" field.
func (ovu *OtaVersionUpdate) ClearScenicAreaID() *OtaVersionUpdate {
	ovu.mutation.ClearScenicAreaID()
	return ovu
}

// SetModelID sets the "model_id" field.
func (ovu *OtaVersionUpdate) SetModelID(i int) *OtaVersionUpdate {
	ovu.mutation.ResetModelID()
	ovu.mutation.SetModelID(i)
	return ovu
}

// SetNillableModelID sets the "model_id" field if the given value is not nil.
func (ovu *OtaVersionUpdate) SetNillableModelID(i *int) *OtaVersionUpdate {
	if i != nil {
		ovu.SetModelID(*i)
	}
	return ovu
}

// AddModelID adds i to the "model_id" field.
func (ovu *OtaVersionUpdate) AddModelID(i int) *OtaVersionUpdate {
	ovu.mutation.AddModelID(i)
	return ovu
}

// ClearModelID clears the value of the "model_id" field.
func (ovu *OtaVersionUpdate) ClearModelID() *OtaVersionUpdate {
	ovu.mutation.ClearModelID()
	return ovu
}

// SetName sets the "name" field.
func (ovu *OtaVersionUpdate) SetName(s string) *OtaVersionUpdate {
	ovu.mutation.SetName(s)
	return ovu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ovu *OtaVersionUpdate) SetNillableName(s *string) *OtaVersionUpdate {
	if s != nil {
		ovu.SetName(*s)
	}
	return ovu
}

// SetVersion sets the "version" field.
func (ovu *OtaVersionUpdate) SetVersion(s string) *OtaVersionUpdate {
	ovu.mutation.SetVersion(s)
	return ovu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (ovu *OtaVersionUpdate) SetNillableVersion(s *string) *OtaVersionUpdate {
	if s != nil {
		ovu.SetVersion(*s)
	}
	return ovu
}

// SetContent sets the "content" field.
func (ovu *OtaVersionUpdate) SetContent(tc types.OtaContent) *OtaVersionUpdate {
	ovu.mutation.SetContent(tc)
	return ovu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (ovu *OtaVersionUpdate) SetNillableContent(tc *types.OtaContent) *OtaVersionUpdate {
	if tc != nil {
		ovu.SetContent(*tc)
	}
	return ovu
}

// SetState sets the "state" field.
func (ovu *OtaVersionUpdate) SetState(i int) *OtaVersionUpdate {
	ovu.mutation.ResetState()
	ovu.mutation.SetState(i)
	return ovu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (ovu *OtaVersionUpdate) SetNillableState(i *int) *OtaVersionUpdate {
	if i != nil {
		ovu.SetState(*i)
	}
	return ovu
}

// AddState adds i to the "state" field.
func (ovu *OtaVersionUpdate) AddState(i int) *OtaVersionUpdate {
	ovu.mutation.AddState(i)
	return ovu
}

// SetUpdateTime sets the "update_time" field.
func (ovu *OtaVersionUpdate) SetUpdateTime(t time.Time) *OtaVersionUpdate {
	ovu.mutation.SetUpdateTime(t)
	return ovu
}

// Mutation returns the OtaVersionMutation object of the builder.
func (ovu *OtaVersionUpdate) Mutation() *OtaVersionMutation {
	return ovu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ovu *OtaVersionUpdate) Save(ctx context.Context) (int, error) {
	if err := ovu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, ovu.sqlSave, ovu.mutation, ovu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ovu *OtaVersionUpdate) SaveX(ctx context.Context) int {
	affected, err := ovu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ovu *OtaVersionUpdate) Exec(ctx context.Context) error {
	_, err := ovu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ovu *OtaVersionUpdate) ExecX(ctx context.Context) {
	if err := ovu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ovu *OtaVersionUpdate) defaults() error {
	if _, ok := ovu.mutation.UpdateTime(); !ok {
		if otaversion.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized otaversion.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := otaversion.UpdateDefaultUpdateTime()
		ovu.mutation.SetUpdateTime(v)
	}
	return nil
}

func (ovu *OtaVersionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(otaversion.Table, otaversion.Columns, sqlgraph.NewFieldSpec(otaversion.FieldID, field.TypeInt))
	if ps := ovu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ovu.mutation.DeleteTime(); ok {
		_spec.SetField(otaversion.FieldDeleteTime, field.TypeTime, value)
	}
	if ovu.mutation.DeleteTimeCleared() {
		_spec.ClearField(otaversion.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := ovu.mutation.ScenicAreaID(); ok {
		_spec.SetField(otaversion.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := ovu.mutation.AddedScenicAreaID(); ok {
		_spec.AddField(otaversion.FieldScenicAreaID, field.TypeInt, value)
	}
	if ovu.mutation.ScenicAreaIDCleared() {
		_spec.ClearField(otaversion.FieldScenicAreaID, field.TypeInt)
	}
	if value, ok := ovu.mutation.ModelID(); ok {
		_spec.SetField(otaversion.FieldModelID, field.TypeInt, value)
	}
	if value, ok := ovu.mutation.AddedModelID(); ok {
		_spec.AddField(otaversion.FieldModelID, field.TypeInt, value)
	}
	if ovu.mutation.ModelIDCleared() {
		_spec.ClearField(otaversion.FieldModelID, field.TypeInt)
	}
	if value, ok := ovu.mutation.Name(); ok {
		_spec.SetField(otaversion.FieldName, field.TypeString, value)
	}
	if value, ok := ovu.mutation.Version(); ok {
		_spec.SetField(otaversion.FieldVersion, field.TypeString, value)
	}
	if value, ok := ovu.mutation.Content(); ok {
		_spec.SetField(otaversion.FieldContent, field.TypeJSON, value)
	}
	if value, ok := ovu.mutation.State(); ok {
		_spec.SetField(otaversion.FieldState, field.TypeInt, value)
	}
	if value, ok := ovu.mutation.AddedState(); ok {
		_spec.AddField(otaversion.FieldState, field.TypeInt, value)
	}
	if value, ok := ovu.mutation.UpdateTime(); ok {
		_spec.SetField(otaversion.FieldUpdateTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ovu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{otaversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ovu.mutation.done = true
	return n, nil
}

// OtaVersionUpdateOne is the builder for updating a single OtaVersion entity.
type OtaVersionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OtaVersionMutation
}

// SetDeleteTime sets the "delete_time" field.
func (ovuo *OtaVersionUpdateOne) SetDeleteTime(t time.Time) *OtaVersionUpdateOne {
	ovuo.mutation.SetDeleteTime(t)
	return ovuo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (ovuo *OtaVersionUpdateOne) SetNillableDeleteTime(t *time.Time) *OtaVersionUpdateOne {
	if t != nil {
		ovuo.SetDeleteTime(*t)
	}
	return ovuo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (ovuo *OtaVersionUpdateOne) ClearDeleteTime() *OtaVersionUpdateOne {
	ovuo.mutation.ClearDeleteTime()
	return ovuo
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (ovuo *OtaVersionUpdateOne) SetScenicAreaID(i int) *OtaVersionUpdateOne {
	ovuo.mutation.ResetScenicAreaID()
	ovuo.mutation.SetScenicAreaID(i)
	return ovuo
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (ovuo *OtaVersionUpdateOne) SetNillableScenicAreaID(i *int) *OtaVersionUpdateOne {
	if i != nil {
		ovuo.SetScenicAreaID(*i)
	}
	return ovuo
}

// AddScenicAreaID adds i to the "scenic_area_id" field.
func (ovuo *OtaVersionUpdateOne) AddScenicAreaID(i int) *OtaVersionUpdateOne {
	ovuo.mutation.AddScenicAreaID(i)
	return ovuo
}

// ClearScenicAreaID clears the value of the "scenic_area_id" field.
func (ovuo *OtaVersionUpdateOne) ClearScenicAreaID() *OtaVersionUpdateOne {
	ovuo.mutation.ClearScenicAreaID()
	return ovuo
}

// SetModelID sets the "model_id" field.
func (ovuo *OtaVersionUpdateOne) SetModelID(i int) *OtaVersionUpdateOne {
	ovuo.mutation.ResetModelID()
	ovuo.mutation.SetModelID(i)
	return ovuo
}

// SetNillableModelID sets the "model_id" field if the given value is not nil.
func (ovuo *OtaVersionUpdateOne) SetNillableModelID(i *int) *OtaVersionUpdateOne {
	if i != nil {
		ovuo.SetModelID(*i)
	}
	return ovuo
}

// AddModelID adds i to the "model_id" field.
func (ovuo *OtaVersionUpdateOne) AddModelID(i int) *OtaVersionUpdateOne {
	ovuo.mutation.AddModelID(i)
	return ovuo
}

// ClearModelID clears the value of the "model_id" field.
func (ovuo *OtaVersionUpdateOne) ClearModelID() *OtaVersionUpdateOne {
	ovuo.mutation.ClearModelID()
	return ovuo
}

// SetName sets the "name" field.
func (ovuo *OtaVersionUpdateOne) SetName(s string) *OtaVersionUpdateOne {
	ovuo.mutation.SetName(s)
	return ovuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ovuo *OtaVersionUpdateOne) SetNillableName(s *string) *OtaVersionUpdateOne {
	if s != nil {
		ovuo.SetName(*s)
	}
	return ovuo
}

// SetVersion sets the "version" field.
func (ovuo *OtaVersionUpdateOne) SetVersion(s string) *OtaVersionUpdateOne {
	ovuo.mutation.SetVersion(s)
	return ovuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (ovuo *OtaVersionUpdateOne) SetNillableVersion(s *string) *OtaVersionUpdateOne {
	if s != nil {
		ovuo.SetVersion(*s)
	}
	return ovuo
}

// SetContent sets the "content" field.
func (ovuo *OtaVersionUpdateOne) SetContent(tc types.OtaContent) *OtaVersionUpdateOne {
	ovuo.mutation.SetContent(tc)
	return ovuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (ovuo *OtaVersionUpdateOne) SetNillableContent(tc *types.OtaContent) *OtaVersionUpdateOne {
	if tc != nil {
		ovuo.SetContent(*tc)
	}
	return ovuo
}

// SetState sets the "state" field.
func (ovuo *OtaVersionUpdateOne) SetState(i int) *OtaVersionUpdateOne {
	ovuo.mutation.ResetState()
	ovuo.mutation.SetState(i)
	return ovuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (ovuo *OtaVersionUpdateOne) SetNillableState(i *int) *OtaVersionUpdateOne {
	if i != nil {
		ovuo.SetState(*i)
	}
	return ovuo
}

// AddState adds i to the "state" field.
func (ovuo *OtaVersionUpdateOne) AddState(i int) *OtaVersionUpdateOne {
	ovuo.mutation.AddState(i)
	return ovuo
}

// SetUpdateTime sets the "update_time" field.
func (ovuo *OtaVersionUpdateOne) SetUpdateTime(t time.Time) *OtaVersionUpdateOne {
	ovuo.mutation.SetUpdateTime(t)
	return ovuo
}

// Mutation returns the OtaVersionMutation object of the builder.
func (ovuo *OtaVersionUpdateOne) Mutation() *OtaVersionMutation {
	return ovuo.mutation
}

// Where appends a list predicates to the OtaVersionUpdate builder.
func (ovuo *OtaVersionUpdateOne) Where(ps ...predicate.OtaVersion) *OtaVersionUpdateOne {
	ovuo.mutation.Where(ps...)
	return ovuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ovuo *OtaVersionUpdateOne) Select(field string, fields ...string) *OtaVersionUpdateOne {
	ovuo.fields = append([]string{field}, fields...)
	return ovuo
}

// Save executes the query and returns the updated OtaVersion entity.
func (ovuo *OtaVersionUpdateOne) Save(ctx context.Context) (*OtaVersion, error) {
	if err := ovuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ovuo.sqlSave, ovuo.mutation, ovuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ovuo *OtaVersionUpdateOne) SaveX(ctx context.Context) *OtaVersion {
	node, err := ovuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ovuo *OtaVersionUpdateOne) Exec(ctx context.Context) error {
	_, err := ovuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ovuo *OtaVersionUpdateOne) ExecX(ctx context.Context) {
	if err := ovuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ovuo *OtaVersionUpdateOne) defaults() error {
	if _, ok := ovuo.mutation.UpdateTime(); !ok {
		if otaversion.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized otaversion.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := otaversion.UpdateDefaultUpdateTime()
		ovuo.mutation.SetUpdateTime(v)
	}
	return nil
}

func (ovuo *OtaVersionUpdateOne) sqlSave(ctx context.Context) (_node *OtaVersion, err error) {
	_spec := sqlgraph.NewUpdateSpec(otaversion.Table, otaversion.Columns, sqlgraph.NewFieldSpec(otaversion.FieldID, field.TypeInt))
	id, ok := ovuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OtaVersion.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ovuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, otaversion.FieldID)
		for _, f := range fields {
			if !otaversion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != otaversion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ovuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ovuo.mutation.DeleteTime(); ok {
		_spec.SetField(otaversion.FieldDeleteTime, field.TypeTime, value)
	}
	if ovuo.mutation.DeleteTimeCleared() {
		_spec.ClearField(otaversion.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := ovuo.mutation.ScenicAreaID(); ok {
		_spec.SetField(otaversion.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := ovuo.mutation.AddedScenicAreaID(); ok {
		_spec.AddField(otaversion.FieldScenicAreaID, field.TypeInt, value)
	}
	if ovuo.mutation.ScenicAreaIDCleared() {
		_spec.ClearField(otaversion.FieldScenicAreaID, field.TypeInt)
	}
	if value, ok := ovuo.mutation.ModelID(); ok {
		_spec.SetField(otaversion.FieldModelID, field.TypeInt, value)
	}
	if value, ok := ovuo.mutation.AddedModelID(); ok {
		_spec.AddField(otaversion.FieldModelID, field.TypeInt, value)
	}
	if ovuo.mutation.ModelIDCleared() {
		_spec.ClearField(otaversion.FieldModelID, field.TypeInt)
	}
	if value, ok := ovuo.mutation.Name(); ok {
		_spec.SetField(otaversion.FieldName, field.TypeString, value)
	}
	if value, ok := ovuo.mutation.Version(); ok {
		_spec.SetField(otaversion.FieldVersion, field.TypeString, value)
	}
	if value, ok := ovuo.mutation.Content(); ok {
		_spec.SetField(otaversion.FieldContent, field.TypeJSON, value)
	}
	if value, ok := ovuo.mutation.State(); ok {
		_spec.SetField(otaversion.FieldState, field.TypeInt, value)
	}
	if value, ok := ovuo.mutation.AddedState(); ok {
		_spec.AddField(otaversion.FieldState, field.TypeInt, value)
	}
	if value, ok := ovuo.mutation.UpdateTime(); ok {
		_spec.SetField(otaversion.FieldUpdateTime, field.TypeTime, value)
	}
	_node = &OtaVersion{config: ovuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ovuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{otaversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ovuo.mutation.done = true
	return _node, nil
}
