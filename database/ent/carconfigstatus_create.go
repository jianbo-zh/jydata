// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/carconfigstatus"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarConfigStatusCreate is the builder for creating a CarConfigStatus entity.
type CarConfigStatusCreate struct {
	config
	mutation *CarConfigStatusMutation
	hooks    []Hook
}

// SetCarID sets the "car_id" field.
func (ccsc *CarConfigStatusCreate) SetCarID(i int) *CarConfigStatusCreate {
	ccsc.mutation.SetCarID(i)
	return ccsc
}

// SetDeviceID sets the "device_id" field.
func (ccsc *CarConfigStatusCreate) SetDeviceID(s string) *CarConfigStatusCreate {
	ccsc.mutation.SetDeviceID(s)
	return ccsc
}

// SetConfigPath sets the "config_path" field.
func (ccsc *CarConfigStatusCreate) SetConfigPath(s string) *CarConfigStatusCreate {
	ccsc.mutation.SetConfigPath(s)
	return ccsc
}

// SetVersion sets the "version" field.
func (ccsc *CarConfigStatusCreate) SetVersion(s string) *CarConfigStatusCreate {
	ccsc.mutation.SetVersion(s)
	return ccsc
}

// SetRemark sets the "remark" field.
func (ccsc *CarConfigStatusCreate) SetRemark(s string) *CarConfigStatusCreate {
	ccsc.mutation.SetRemark(s)
	return ccsc
}

// SetCreateTime sets the "create_time" field.
func (ccsc *CarConfigStatusCreate) SetCreateTime(t time.Time) *CarConfigStatusCreate {
	ccsc.mutation.SetCreateTime(t)
	return ccsc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ccsc *CarConfigStatusCreate) SetNillableCreateTime(t *time.Time) *CarConfigStatusCreate {
	if t != nil {
		ccsc.SetCreateTime(*t)
	}
	return ccsc
}

// SetUpdateTime sets the "update_time" field.
func (ccsc *CarConfigStatusCreate) SetUpdateTime(t time.Time) *CarConfigStatusCreate {
	ccsc.mutation.SetUpdateTime(t)
	return ccsc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ccsc *CarConfigStatusCreate) SetNillableUpdateTime(t *time.Time) *CarConfigStatusCreate {
	if t != nil {
		ccsc.SetUpdateTime(*t)
	}
	return ccsc
}

// SetID sets the "id" field.
func (ccsc *CarConfigStatusCreate) SetID(i int) *CarConfigStatusCreate {
	ccsc.mutation.SetID(i)
	return ccsc
}

// Mutation returns the CarConfigStatusMutation object of the builder.
func (ccsc *CarConfigStatusCreate) Mutation() *CarConfigStatusMutation {
	return ccsc.mutation
}

// Save creates the CarConfigStatus in the database.
func (ccsc *CarConfigStatusCreate) Save(ctx context.Context) (*CarConfigStatus, error) {
	ccsc.defaults()
	return withHooks(ctx, ccsc.sqlSave, ccsc.mutation, ccsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ccsc *CarConfigStatusCreate) SaveX(ctx context.Context) *CarConfigStatus {
	v, err := ccsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccsc *CarConfigStatusCreate) Exec(ctx context.Context) error {
	_, err := ccsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccsc *CarConfigStatusCreate) ExecX(ctx context.Context) {
	if err := ccsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ccsc *CarConfigStatusCreate) defaults() {
	if _, ok := ccsc.mutation.CreateTime(); !ok {
		v := carconfigstatus.DefaultCreateTime()
		ccsc.mutation.SetCreateTime(v)
	}
	if _, ok := ccsc.mutation.UpdateTime(); !ok {
		v := carconfigstatus.DefaultUpdateTime()
		ccsc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccsc *CarConfigStatusCreate) check() error {
	if _, ok := ccsc.mutation.CarID(); !ok {
		return &ValidationError{Name: "car_id", err: errors.New(`ent: missing required field "CarConfigStatus.car_id"`)}
	}
	if _, ok := ccsc.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device_id", err: errors.New(`ent: missing required field "CarConfigStatus.device_id"`)}
	}
	if _, ok := ccsc.mutation.ConfigPath(); !ok {
		return &ValidationError{Name: "config_path", err: errors.New(`ent: missing required field "CarConfigStatus.config_path"`)}
	}
	if _, ok := ccsc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "CarConfigStatus.version"`)}
	}
	if _, ok := ccsc.mutation.Remark(); !ok {
		return &ValidationError{Name: "remark", err: errors.New(`ent: missing required field "CarConfigStatus.remark"`)}
	}
	if _, ok := ccsc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "CarConfigStatus.create_time"`)}
	}
	if _, ok := ccsc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "CarConfigStatus.update_time"`)}
	}
	return nil
}

func (ccsc *CarConfigStatusCreate) sqlSave(ctx context.Context) (*CarConfigStatus, error) {
	if err := ccsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ccsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ccsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	ccsc.mutation.id = &_node.ID
	ccsc.mutation.done = true
	return _node, nil
}

func (ccsc *CarConfigStatusCreate) createSpec() (*CarConfigStatus, *sqlgraph.CreateSpec) {
	var (
		_node = &CarConfigStatus{config: ccsc.config}
		_spec = sqlgraph.NewCreateSpec(carconfigstatus.Table, sqlgraph.NewFieldSpec(carconfigstatus.FieldID, field.TypeInt))
	)
	if id, ok := ccsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ccsc.mutation.CarID(); ok {
		_spec.SetField(carconfigstatus.FieldCarID, field.TypeInt, value)
		_node.CarID = value
	}
	if value, ok := ccsc.mutation.DeviceID(); ok {
		_spec.SetField(carconfigstatus.FieldDeviceID, field.TypeString, value)
		_node.DeviceID = value
	}
	if value, ok := ccsc.mutation.ConfigPath(); ok {
		_spec.SetField(carconfigstatus.FieldConfigPath, field.TypeString, value)
		_node.ConfigPath = value
	}
	if value, ok := ccsc.mutation.Version(); ok {
		_spec.SetField(carconfigstatus.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := ccsc.mutation.Remark(); ok {
		_spec.SetField(carconfigstatus.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := ccsc.mutation.CreateTime(); ok {
		_spec.SetField(carconfigstatus.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := ccsc.mutation.UpdateTime(); ok {
		_spec.SetField(carconfigstatus.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// CarConfigStatusCreateBulk is the builder for creating many CarConfigStatus entities in bulk.
type CarConfigStatusCreateBulk struct {
	config
	err      error
	builders []*CarConfigStatusCreate
}

// Save creates the CarConfigStatus entities in the database.
func (ccscb *CarConfigStatusCreateBulk) Save(ctx context.Context) ([]*CarConfigStatus, error) {
	if ccscb.err != nil {
		return nil, ccscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccscb.builders))
	nodes := make([]*CarConfigStatus, len(ccscb.builders))
	mutators := make([]Mutator, len(ccscb.builders))
	for i := range ccscb.builders {
		func(i int, root context.Context) {
			builder := ccscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CarConfigStatusMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccscb *CarConfigStatusCreateBulk) SaveX(ctx context.Context) []*CarConfigStatus {
	v, err := ccscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccscb *CarConfigStatusCreateBulk) Exec(ctx context.Context) error {
	_, err := ccscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccscb *CarConfigStatusCreateBulk) ExecX(ctx context.Context) {
	if err := ccscb.Exec(ctx); err != nil {
		panic(err)
	}
}
