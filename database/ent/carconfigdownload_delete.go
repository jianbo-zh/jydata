// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"github.com/jianbo-zh/jydata/database/ent/carconfigdownload"
	"github.com/jianbo-zh/jydata/database/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarConfigDownloadDelete is the builder for deleting a CarConfigDownload entity.
type CarConfigDownloadDelete struct {
	config
	hooks    []Hook
	mutation *CarConfigDownloadMutation
}

// Where appends a list predicates to the CarConfigDownloadDelete builder.
func (ccdd *CarConfigDownloadDelete) Where(ps ...predicate.CarConfigDownload) *CarConfigDownloadDelete {
	ccdd.mutation.Where(ps...)
	return ccdd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ccdd *CarConfigDownloadDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ccdd.sqlExec, ccdd.mutation, ccdd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ccdd *CarConfigDownloadDelete) ExecX(ctx context.Context) int {
	n, err := ccdd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ccdd *CarConfigDownloadDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(carconfigdownload.Table, sqlgraph.NewFieldSpec(carconfigdownload.FieldID, field.TypeInt))
	if ps := ccdd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ccdd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ccdd.mutation.done = true
	return affected, err
}

// CarConfigDownloadDeleteOne is the builder for deleting a single CarConfigDownload entity.
type CarConfigDownloadDeleteOne struct {
	ccdd *CarConfigDownloadDelete
}

// Where appends a list predicates to the CarConfigDownloadDelete builder.
func (ccddo *CarConfigDownloadDeleteOne) Where(ps ...predicate.CarConfigDownload) *CarConfigDownloadDeleteOne {
	ccddo.ccdd.mutation.Where(ps...)
	return ccddo
}

// Exec executes the deletion query.
func (ccddo *CarConfigDownloadDeleteOne) Exec(ctx context.Context) error {
	n, err := ccddo.ccdd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{carconfigdownload.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ccddo *CarConfigDownloadDeleteOne) ExecX(ctx context.Context) {
	if err := ccddo.Exec(ctx); err != nil {
		panic(err)
	}
}
