// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/mapversion"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"github.com/jianbo-zh/jydata/database/ent/scenicarea"
)

// MapVersionUpdate is the builder for updating MapVersion entities.
type MapVersionUpdate struct {
	config
	hooks    []Hook
	mutation *MapVersionMutation
}

// Where appends a list predicates to the MapVersionUpdate builder.
func (mvu *MapVersionUpdate) Where(ps ...predicate.MapVersion) *MapVersionUpdate {
	mvu.mutation.Where(ps...)
	return mvu
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (mvu *MapVersionUpdate) SetScenicAreaID(i int) *MapVersionUpdate {
	mvu.mutation.SetScenicAreaID(i)
	return mvu
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (mvu *MapVersionUpdate) SetNillableScenicAreaID(i *int) *MapVersionUpdate {
	if i != nil {
		mvu.SetScenicAreaID(*i)
	}
	return mvu
}

// SetFileID sets the "file_id" field.
func (mvu *MapVersionUpdate) SetFileID(i int) *MapVersionUpdate {
	mvu.mutation.ResetFileID()
	mvu.mutation.SetFileID(i)
	return mvu
}

// SetNillableFileID sets the "file_id" field if the given value is not nil.
func (mvu *MapVersionUpdate) SetNillableFileID(i *int) *MapVersionUpdate {
	if i != nil {
		mvu.SetFileID(*i)
	}
	return mvu
}

// AddFileID adds i to the "file_id" field.
func (mvu *MapVersionUpdate) AddFileID(i int) *MapVersionUpdate {
	mvu.mutation.AddFileID(i)
	return mvu
}

// SetFilePath sets the "file_path" field.
func (mvu *MapVersionUpdate) SetFilePath(s string) *MapVersionUpdate {
	mvu.mutation.SetFilePath(s)
	return mvu
}

// SetNillableFilePath sets the "file_path" field if the given value is not nil.
func (mvu *MapVersionUpdate) SetNillableFilePath(s *string) *MapVersionUpdate {
	if s != nil {
		mvu.SetFilePath(*s)
	}
	return mvu
}

// SetVersion sets the "version" field.
func (mvu *MapVersionUpdate) SetVersion(s string) *MapVersionUpdate {
	mvu.mutation.SetVersion(s)
	return mvu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (mvu *MapVersionUpdate) SetNillableVersion(s *string) *MapVersionUpdate {
	if s != nil {
		mvu.SetVersion(*s)
	}
	return mvu
}

// SetName sets the "name" field.
func (mvu *MapVersionUpdate) SetName(s string) *MapVersionUpdate {
	mvu.mutation.SetName(s)
	return mvu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mvu *MapVersionUpdate) SetNillableName(s *string) *MapVersionUpdate {
	if s != nil {
		mvu.SetName(*s)
	}
	return mvu
}

// SetRemark sets the "remark" field.
func (mvu *MapVersionUpdate) SetRemark(s string) *MapVersionUpdate {
	mvu.mutation.SetRemark(s)
	return mvu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (mvu *MapVersionUpdate) SetNillableRemark(s *string) *MapVersionUpdate {
	if s != nil {
		mvu.SetRemark(*s)
	}
	return mvu
}

// SetUpdateTime sets the "update_time" field.
func (mvu *MapVersionUpdate) SetUpdateTime(t time.Time) *MapVersionUpdate {
	mvu.mutation.SetUpdateTime(t)
	return mvu
}

// SetBackgroundScenicAreaID sets the "background_scenic_area" edge to the ScenicArea entity by ID.
func (mvu *MapVersionUpdate) SetBackgroundScenicAreaID(id int) *MapVersionUpdate {
	mvu.mutation.SetBackgroundScenicAreaID(id)
	return mvu
}

// SetBackgroundScenicArea sets the "background_scenic_area" edge to the ScenicArea entity.
func (mvu *MapVersionUpdate) SetBackgroundScenicArea(s *ScenicArea) *MapVersionUpdate {
	return mvu.SetBackgroundScenicAreaID(s.ID)
}

// Mutation returns the MapVersionMutation object of the builder.
func (mvu *MapVersionUpdate) Mutation() *MapVersionMutation {
	return mvu.mutation
}

// ClearBackgroundScenicArea clears the "background_scenic_area" edge to the ScenicArea entity.
func (mvu *MapVersionUpdate) ClearBackgroundScenicArea() *MapVersionUpdate {
	mvu.mutation.ClearBackgroundScenicArea()
	return mvu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mvu *MapVersionUpdate) Save(ctx context.Context) (int, error) {
	mvu.defaults()
	return withHooks(ctx, mvu.sqlSave, mvu.mutation, mvu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mvu *MapVersionUpdate) SaveX(ctx context.Context) int {
	affected, err := mvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mvu *MapVersionUpdate) Exec(ctx context.Context) error {
	_, err := mvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mvu *MapVersionUpdate) ExecX(ctx context.Context) {
	if err := mvu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mvu *MapVersionUpdate) defaults() {
	if _, ok := mvu.mutation.UpdateTime(); !ok {
		v := mapversion.UpdateDefaultUpdateTime()
		mvu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mvu *MapVersionUpdate) check() error {
	if mvu.mutation.BackgroundScenicAreaCleared() && len(mvu.mutation.BackgroundScenicAreaIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MapVersion.background_scenic_area"`)
	}
	return nil
}

func (mvu *MapVersionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mvu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(mapversion.Table, mapversion.Columns, sqlgraph.NewFieldSpec(mapversion.FieldID, field.TypeInt))
	if ps := mvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mvu.mutation.FileID(); ok {
		_spec.SetField(mapversion.FieldFileID, field.TypeInt, value)
	}
	if value, ok := mvu.mutation.AddedFileID(); ok {
		_spec.AddField(mapversion.FieldFileID, field.TypeInt, value)
	}
	if value, ok := mvu.mutation.FilePath(); ok {
		_spec.SetField(mapversion.FieldFilePath, field.TypeString, value)
	}
	if value, ok := mvu.mutation.Version(); ok {
		_spec.SetField(mapversion.FieldVersion, field.TypeString, value)
	}
	if value, ok := mvu.mutation.Name(); ok {
		_spec.SetField(mapversion.FieldName, field.TypeString, value)
	}
	if value, ok := mvu.mutation.Remark(); ok {
		_spec.SetField(mapversion.FieldRemark, field.TypeString, value)
	}
	if value, ok := mvu.mutation.UpdateTime(); ok {
		_spec.SetField(mapversion.FieldUpdateTime, field.TypeTime, value)
	}
	if mvu.mutation.BackgroundScenicAreaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mapversion.BackgroundScenicAreaTable,
			Columns: []string{mapversion.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mvu.mutation.BackgroundScenicAreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mapversion.BackgroundScenicAreaTable,
			Columns: []string{mapversion.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mapversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mvu.mutation.done = true
	return n, nil
}

// MapVersionUpdateOne is the builder for updating a single MapVersion entity.
type MapVersionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MapVersionMutation
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (mvuo *MapVersionUpdateOne) SetScenicAreaID(i int) *MapVersionUpdateOne {
	mvuo.mutation.SetScenicAreaID(i)
	return mvuo
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (mvuo *MapVersionUpdateOne) SetNillableScenicAreaID(i *int) *MapVersionUpdateOne {
	if i != nil {
		mvuo.SetScenicAreaID(*i)
	}
	return mvuo
}

// SetFileID sets the "file_id" field.
func (mvuo *MapVersionUpdateOne) SetFileID(i int) *MapVersionUpdateOne {
	mvuo.mutation.ResetFileID()
	mvuo.mutation.SetFileID(i)
	return mvuo
}

// SetNillableFileID sets the "file_id" field if the given value is not nil.
func (mvuo *MapVersionUpdateOne) SetNillableFileID(i *int) *MapVersionUpdateOne {
	if i != nil {
		mvuo.SetFileID(*i)
	}
	return mvuo
}

// AddFileID adds i to the "file_id" field.
func (mvuo *MapVersionUpdateOne) AddFileID(i int) *MapVersionUpdateOne {
	mvuo.mutation.AddFileID(i)
	return mvuo
}

// SetFilePath sets the "file_path" field.
func (mvuo *MapVersionUpdateOne) SetFilePath(s string) *MapVersionUpdateOne {
	mvuo.mutation.SetFilePath(s)
	return mvuo
}

// SetNillableFilePath sets the "file_path" field if the given value is not nil.
func (mvuo *MapVersionUpdateOne) SetNillableFilePath(s *string) *MapVersionUpdateOne {
	if s != nil {
		mvuo.SetFilePath(*s)
	}
	return mvuo
}

// SetVersion sets the "version" field.
func (mvuo *MapVersionUpdateOne) SetVersion(s string) *MapVersionUpdateOne {
	mvuo.mutation.SetVersion(s)
	return mvuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (mvuo *MapVersionUpdateOne) SetNillableVersion(s *string) *MapVersionUpdateOne {
	if s != nil {
		mvuo.SetVersion(*s)
	}
	return mvuo
}

// SetName sets the "name" field.
func (mvuo *MapVersionUpdateOne) SetName(s string) *MapVersionUpdateOne {
	mvuo.mutation.SetName(s)
	return mvuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mvuo *MapVersionUpdateOne) SetNillableName(s *string) *MapVersionUpdateOne {
	if s != nil {
		mvuo.SetName(*s)
	}
	return mvuo
}

// SetRemark sets the "remark" field.
func (mvuo *MapVersionUpdateOne) SetRemark(s string) *MapVersionUpdateOne {
	mvuo.mutation.SetRemark(s)
	return mvuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (mvuo *MapVersionUpdateOne) SetNillableRemark(s *string) *MapVersionUpdateOne {
	if s != nil {
		mvuo.SetRemark(*s)
	}
	return mvuo
}

// SetUpdateTime sets the "update_time" field.
func (mvuo *MapVersionUpdateOne) SetUpdateTime(t time.Time) *MapVersionUpdateOne {
	mvuo.mutation.SetUpdateTime(t)
	return mvuo
}

// SetBackgroundScenicAreaID sets the "background_scenic_area" edge to the ScenicArea entity by ID.
func (mvuo *MapVersionUpdateOne) SetBackgroundScenicAreaID(id int) *MapVersionUpdateOne {
	mvuo.mutation.SetBackgroundScenicAreaID(id)
	return mvuo
}

// SetBackgroundScenicArea sets the "background_scenic_area" edge to the ScenicArea entity.
func (mvuo *MapVersionUpdateOne) SetBackgroundScenicArea(s *ScenicArea) *MapVersionUpdateOne {
	return mvuo.SetBackgroundScenicAreaID(s.ID)
}

// Mutation returns the MapVersionMutation object of the builder.
func (mvuo *MapVersionUpdateOne) Mutation() *MapVersionMutation {
	return mvuo.mutation
}

// ClearBackgroundScenicArea clears the "background_scenic_area" edge to the ScenicArea entity.
func (mvuo *MapVersionUpdateOne) ClearBackgroundScenicArea() *MapVersionUpdateOne {
	mvuo.mutation.ClearBackgroundScenicArea()
	return mvuo
}

// Where appends a list predicates to the MapVersionUpdate builder.
func (mvuo *MapVersionUpdateOne) Where(ps ...predicate.MapVersion) *MapVersionUpdateOne {
	mvuo.mutation.Where(ps...)
	return mvuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mvuo *MapVersionUpdateOne) Select(field string, fields ...string) *MapVersionUpdateOne {
	mvuo.fields = append([]string{field}, fields...)
	return mvuo
}

// Save executes the query and returns the updated MapVersion entity.
func (mvuo *MapVersionUpdateOne) Save(ctx context.Context) (*MapVersion, error) {
	mvuo.defaults()
	return withHooks(ctx, mvuo.sqlSave, mvuo.mutation, mvuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mvuo *MapVersionUpdateOne) SaveX(ctx context.Context) *MapVersion {
	node, err := mvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mvuo *MapVersionUpdateOne) Exec(ctx context.Context) error {
	_, err := mvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mvuo *MapVersionUpdateOne) ExecX(ctx context.Context) {
	if err := mvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mvuo *MapVersionUpdateOne) defaults() {
	if _, ok := mvuo.mutation.UpdateTime(); !ok {
		v := mapversion.UpdateDefaultUpdateTime()
		mvuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mvuo *MapVersionUpdateOne) check() error {
	if mvuo.mutation.BackgroundScenicAreaCleared() && len(mvuo.mutation.BackgroundScenicAreaIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MapVersion.background_scenic_area"`)
	}
	return nil
}

func (mvuo *MapVersionUpdateOne) sqlSave(ctx context.Context) (_node *MapVersion, err error) {
	if err := mvuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(mapversion.Table, mapversion.Columns, sqlgraph.NewFieldSpec(mapversion.FieldID, field.TypeInt))
	id, ok := mvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MapVersion.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mvuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mapversion.FieldID)
		for _, f := range fields {
			if !mapversion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != mapversion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mvuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mvuo.mutation.FileID(); ok {
		_spec.SetField(mapversion.FieldFileID, field.TypeInt, value)
	}
	if value, ok := mvuo.mutation.AddedFileID(); ok {
		_spec.AddField(mapversion.FieldFileID, field.TypeInt, value)
	}
	if value, ok := mvuo.mutation.FilePath(); ok {
		_spec.SetField(mapversion.FieldFilePath, field.TypeString, value)
	}
	if value, ok := mvuo.mutation.Version(); ok {
		_spec.SetField(mapversion.FieldVersion, field.TypeString, value)
	}
	if value, ok := mvuo.mutation.Name(); ok {
		_spec.SetField(mapversion.FieldName, field.TypeString, value)
	}
	if value, ok := mvuo.mutation.Remark(); ok {
		_spec.SetField(mapversion.FieldRemark, field.TypeString, value)
	}
	if value, ok := mvuo.mutation.UpdateTime(); ok {
		_spec.SetField(mapversion.FieldUpdateTime, field.TypeTime, value)
	}
	if mvuo.mutation.BackgroundScenicAreaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mapversion.BackgroundScenicAreaTable,
			Columns: []string{mapversion.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mvuo.mutation.BackgroundScenicAreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mapversion.BackgroundScenicAreaTable,
			Columns: []string{mapversion.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MapVersion{config: mvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mapversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mvuo.mutation.done = true
	return _node, nil
}
