// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/carconfigpack"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
)

// CarConfigPackUpdate is the builder for updating CarConfigPack entities.
type CarConfigPackUpdate struct {
	config
	hooks    []Hook
	mutation *CarConfigPackMutation
}

// Where appends a list predicates to the CarConfigPackUpdate builder.
func (ccpu *CarConfigPackUpdate) Where(ps ...predicate.CarConfigPack) *CarConfigPackUpdate {
	ccpu.mutation.Where(ps...)
	return ccpu
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (ccpu *CarConfigPackUpdate) SetScenicAreaID(i int) *CarConfigPackUpdate {
	ccpu.mutation.ResetScenicAreaID()
	ccpu.mutation.SetScenicAreaID(i)
	return ccpu
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (ccpu *CarConfigPackUpdate) SetNillableScenicAreaID(i *int) *CarConfigPackUpdate {
	if i != nil {
		ccpu.SetScenicAreaID(*i)
	}
	return ccpu
}

// AddScenicAreaID adds i to the "scenic_area_id" field.
func (ccpu *CarConfigPackUpdate) AddScenicAreaID(i int) *CarConfigPackUpdate {
	ccpu.mutation.AddScenicAreaID(i)
	return ccpu
}

// ClearScenicAreaID clears the value of the "scenic_area_id" field.
func (ccpu *CarConfigPackUpdate) ClearScenicAreaID() *CarConfigPackUpdate {
	ccpu.mutation.ClearScenicAreaID()
	return ccpu
}

// SetModelID sets the "model_id" field.
func (ccpu *CarConfigPackUpdate) SetModelID(i int) *CarConfigPackUpdate {
	ccpu.mutation.ResetModelID()
	ccpu.mutation.SetModelID(i)
	return ccpu
}

// SetNillableModelID sets the "model_id" field if the given value is not nil.
func (ccpu *CarConfigPackUpdate) SetNillableModelID(i *int) *CarConfigPackUpdate {
	if i != nil {
		ccpu.SetModelID(*i)
	}
	return ccpu
}

// AddModelID adds i to the "model_id" field.
func (ccpu *CarConfigPackUpdate) AddModelID(i int) *CarConfigPackUpdate {
	ccpu.mutation.AddModelID(i)
	return ccpu
}

// ClearModelID clears the value of the "model_id" field.
func (ccpu *CarConfigPackUpdate) ClearModelID() *CarConfigPackUpdate {
	ccpu.mutation.ClearModelID()
	return ccpu
}

// SetCarID sets the "car_id" field.
func (ccpu *CarConfigPackUpdate) SetCarID(i int) *CarConfigPackUpdate {
	ccpu.mutation.ResetCarID()
	ccpu.mutation.SetCarID(i)
	return ccpu
}

// SetNillableCarID sets the "car_id" field if the given value is not nil.
func (ccpu *CarConfigPackUpdate) SetNillableCarID(i *int) *CarConfigPackUpdate {
	if i != nil {
		ccpu.SetCarID(*i)
	}
	return ccpu
}

// AddCarID adds i to the "car_id" field.
func (ccpu *CarConfigPackUpdate) AddCarID(i int) *CarConfigPackUpdate {
	ccpu.mutation.AddCarID(i)
	return ccpu
}

// ClearCarID clears the value of the "car_id" field.
func (ccpu *CarConfigPackUpdate) ClearCarID() *CarConfigPackUpdate {
	ccpu.mutation.ClearCarID()
	return ccpu
}

// SetCarVersion sets the "car_version" field.
func (ccpu *CarConfigPackUpdate) SetCarVersion(s string) *CarConfigPackUpdate {
	ccpu.mutation.SetCarVersion(s)
	return ccpu
}

// SetNillableCarVersion sets the "car_version" field if the given value is not nil.
func (ccpu *CarConfigPackUpdate) SetNillableCarVersion(s *string) *CarConfigPackUpdate {
	if s != nil {
		ccpu.SetCarVersion(*s)
	}
	return ccpu
}

// SetName sets the "name" field.
func (ccpu *CarConfigPackUpdate) SetName(s string) *CarConfigPackUpdate {
	ccpu.mutation.SetName(s)
	return ccpu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ccpu *CarConfigPackUpdate) SetNillableName(s *string) *CarConfigPackUpdate {
	if s != nil {
		ccpu.SetName(*s)
	}
	return ccpu
}

// SetRemark sets the "remark" field.
func (ccpu *CarConfigPackUpdate) SetRemark(s string) *CarConfigPackUpdate {
	ccpu.mutation.SetRemark(s)
	return ccpu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ccpu *CarConfigPackUpdate) SetNillableRemark(s *string) *CarConfigPackUpdate {
	if s != nil {
		ccpu.SetRemark(*s)
	}
	return ccpu
}

// SetVersion sets the "version" field.
func (ccpu *CarConfigPackUpdate) SetVersion(s string) *CarConfigPackUpdate {
	ccpu.mutation.SetVersion(s)
	return ccpu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (ccpu *CarConfigPackUpdate) SetNillableVersion(s *string) *CarConfigPackUpdate {
	if s != nil {
		ccpu.SetVersion(*s)
	}
	return ccpu
}

// SetConfigIds sets the "config_ids" field.
func (ccpu *CarConfigPackUpdate) SetConfigIds(i []int) *CarConfigPackUpdate {
	ccpu.mutation.SetConfigIds(i)
	return ccpu
}

// AppendConfigIds appends i to the "config_ids" field.
func (ccpu *CarConfigPackUpdate) AppendConfigIds(i []int) *CarConfigPackUpdate {
	ccpu.mutation.AppendConfigIds(i)
	return ccpu
}

// ClearConfigIds clears the value of the "config_ids" field.
func (ccpu *CarConfigPackUpdate) ClearConfigIds() *CarConfigPackUpdate {
	ccpu.mutation.ClearConfigIds()
	return ccpu
}

// Mutation returns the CarConfigPackMutation object of the builder.
func (ccpu *CarConfigPackUpdate) Mutation() *CarConfigPackMutation {
	return ccpu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ccpu *CarConfigPackUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ccpu.sqlSave, ccpu.mutation, ccpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ccpu *CarConfigPackUpdate) SaveX(ctx context.Context) int {
	affected, err := ccpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ccpu *CarConfigPackUpdate) Exec(ctx context.Context) error {
	_, err := ccpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccpu *CarConfigPackUpdate) ExecX(ctx context.Context) {
	if err := ccpu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ccpu *CarConfigPackUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(carconfigpack.Table, carconfigpack.Columns, sqlgraph.NewFieldSpec(carconfigpack.FieldID, field.TypeInt))
	if ps := ccpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccpu.mutation.ScenicAreaID(); ok {
		_spec.SetField(carconfigpack.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := ccpu.mutation.AddedScenicAreaID(); ok {
		_spec.AddField(carconfigpack.FieldScenicAreaID, field.TypeInt, value)
	}
	if ccpu.mutation.ScenicAreaIDCleared() {
		_spec.ClearField(carconfigpack.FieldScenicAreaID, field.TypeInt)
	}
	if value, ok := ccpu.mutation.ModelID(); ok {
		_spec.SetField(carconfigpack.FieldModelID, field.TypeInt, value)
	}
	if value, ok := ccpu.mutation.AddedModelID(); ok {
		_spec.AddField(carconfigpack.FieldModelID, field.TypeInt, value)
	}
	if ccpu.mutation.ModelIDCleared() {
		_spec.ClearField(carconfigpack.FieldModelID, field.TypeInt)
	}
	if value, ok := ccpu.mutation.CarID(); ok {
		_spec.SetField(carconfigpack.FieldCarID, field.TypeInt, value)
	}
	if value, ok := ccpu.mutation.AddedCarID(); ok {
		_spec.AddField(carconfigpack.FieldCarID, field.TypeInt, value)
	}
	if ccpu.mutation.CarIDCleared() {
		_spec.ClearField(carconfigpack.FieldCarID, field.TypeInt)
	}
	if value, ok := ccpu.mutation.CarVersion(); ok {
		_spec.SetField(carconfigpack.FieldCarVersion, field.TypeString, value)
	}
	if value, ok := ccpu.mutation.Name(); ok {
		_spec.SetField(carconfigpack.FieldName, field.TypeString, value)
	}
	if value, ok := ccpu.mutation.Remark(); ok {
		_spec.SetField(carconfigpack.FieldRemark, field.TypeString, value)
	}
	if value, ok := ccpu.mutation.Version(); ok {
		_spec.SetField(carconfigpack.FieldVersion, field.TypeString, value)
	}
	if value, ok := ccpu.mutation.ConfigIds(); ok {
		_spec.SetField(carconfigpack.FieldConfigIds, field.TypeJSON, value)
	}
	if value, ok := ccpu.mutation.AppendedConfigIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, carconfigpack.FieldConfigIds, value)
		})
	}
	if ccpu.mutation.ConfigIdsCleared() {
		_spec.ClearField(carconfigpack.FieldConfigIds, field.TypeJSON)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ccpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carconfigpack.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ccpu.mutation.done = true
	return n, nil
}

// CarConfigPackUpdateOne is the builder for updating a single CarConfigPack entity.
type CarConfigPackUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CarConfigPackMutation
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (ccpuo *CarConfigPackUpdateOne) SetScenicAreaID(i int) *CarConfigPackUpdateOne {
	ccpuo.mutation.ResetScenicAreaID()
	ccpuo.mutation.SetScenicAreaID(i)
	return ccpuo
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (ccpuo *CarConfigPackUpdateOne) SetNillableScenicAreaID(i *int) *CarConfigPackUpdateOne {
	if i != nil {
		ccpuo.SetScenicAreaID(*i)
	}
	return ccpuo
}

// AddScenicAreaID adds i to the "scenic_area_id" field.
func (ccpuo *CarConfigPackUpdateOne) AddScenicAreaID(i int) *CarConfigPackUpdateOne {
	ccpuo.mutation.AddScenicAreaID(i)
	return ccpuo
}

// ClearScenicAreaID clears the value of the "scenic_area_id" field.
func (ccpuo *CarConfigPackUpdateOne) ClearScenicAreaID() *CarConfigPackUpdateOne {
	ccpuo.mutation.ClearScenicAreaID()
	return ccpuo
}

// SetModelID sets the "model_id" field.
func (ccpuo *CarConfigPackUpdateOne) SetModelID(i int) *CarConfigPackUpdateOne {
	ccpuo.mutation.ResetModelID()
	ccpuo.mutation.SetModelID(i)
	return ccpuo
}

// SetNillableModelID sets the "model_id" field if the given value is not nil.
func (ccpuo *CarConfigPackUpdateOne) SetNillableModelID(i *int) *CarConfigPackUpdateOne {
	if i != nil {
		ccpuo.SetModelID(*i)
	}
	return ccpuo
}

// AddModelID adds i to the "model_id" field.
func (ccpuo *CarConfigPackUpdateOne) AddModelID(i int) *CarConfigPackUpdateOne {
	ccpuo.mutation.AddModelID(i)
	return ccpuo
}

// ClearModelID clears the value of the "model_id" field.
func (ccpuo *CarConfigPackUpdateOne) ClearModelID() *CarConfigPackUpdateOne {
	ccpuo.mutation.ClearModelID()
	return ccpuo
}

// SetCarID sets the "car_id" field.
func (ccpuo *CarConfigPackUpdateOne) SetCarID(i int) *CarConfigPackUpdateOne {
	ccpuo.mutation.ResetCarID()
	ccpuo.mutation.SetCarID(i)
	return ccpuo
}

// SetNillableCarID sets the "car_id" field if the given value is not nil.
func (ccpuo *CarConfigPackUpdateOne) SetNillableCarID(i *int) *CarConfigPackUpdateOne {
	if i != nil {
		ccpuo.SetCarID(*i)
	}
	return ccpuo
}

// AddCarID adds i to the "car_id" field.
func (ccpuo *CarConfigPackUpdateOne) AddCarID(i int) *CarConfigPackUpdateOne {
	ccpuo.mutation.AddCarID(i)
	return ccpuo
}

// ClearCarID clears the value of the "car_id" field.
func (ccpuo *CarConfigPackUpdateOne) ClearCarID() *CarConfigPackUpdateOne {
	ccpuo.mutation.ClearCarID()
	return ccpuo
}

// SetCarVersion sets the "car_version" field.
func (ccpuo *CarConfigPackUpdateOne) SetCarVersion(s string) *CarConfigPackUpdateOne {
	ccpuo.mutation.SetCarVersion(s)
	return ccpuo
}

// SetNillableCarVersion sets the "car_version" field if the given value is not nil.
func (ccpuo *CarConfigPackUpdateOne) SetNillableCarVersion(s *string) *CarConfigPackUpdateOne {
	if s != nil {
		ccpuo.SetCarVersion(*s)
	}
	return ccpuo
}

// SetName sets the "name" field.
func (ccpuo *CarConfigPackUpdateOne) SetName(s string) *CarConfigPackUpdateOne {
	ccpuo.mutation.SetName(s)
	return ccpuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ccpuo *CarConfigPackUpdateOne) SetNillableName(s *string) *CarConfigPackUpdateOne {
	if s != nil {
		ccpuo.SetName(*s)
	}
	return ccpuo
}

// SetRemark sets the "remark" field.
func (ccpuo *CarConfigPackUpdateOne) SetRemark(s string) *CarConfigPackUpdateOne {
	ccpuo.mutation.SetRemark(s)
	return ccpuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ccpuo *CarConfigPackUpdateOne) SetNillableRemark(s *string) *CarConfigPackUpdateOne {
	if s != nil {
		ccpuo.SetRemark(*s)
	}
	return ccpuo
}

// SetVersion sets the "version" field.
func (ccpuo *CarConfigPackUpdateOne) SetVersion(s string) *CarConfigPackUpdateOne {
	ccpuo.mutation.SetVersion(s)
	return ccpuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (ccpuo *CarConfigPackUpdateOne) SetNillableVersion(s *string) *CarConfigPackUpdateOne {
	if s != nil {
		ccpuo.SetVersion(*s)
	}
	return ccpuo
}

// SetConfigIds sets the "config_ids" field.
func (ccpuo *CarConfigPackUpdateOne) SetConfigIds(i []int) *CarConfigPackUpdateOne {
	ccpuo.mutation.SetConfigIds(i)
	return ccpuo
}

// AppendConfigIds appends i to the "config_ids" field.
func (ccpuo *CarConfigPackUpdateOne) AppendConfigIds(i []int) *CarConfigPackUpdateOne {
	ccpuo.mutation.AppendConfigIds(i)
	return ccpuo
}

// ClearConfigIds clears the value of the "config_ids" field.
func (ccpuo *CarConfigPackUpdateOne) ClearConfigIds() *CarConfigPackUpdateOne {
	ccpuo.mutation.ClearConfigIds()
	return ccpuo
}

// Mutation returns the CarConfigPackMutation object of the builder.
func (ccpuo *CarConfigPackUpdateOne) Mutation() *CarConfigPackMutation {
	return ccpuo.mutation
}

// Where appends a list predicates to the CarConfigPackUpdate builder.
func (ccpuo *CarConfigPackUpdateOne) Where(ps ...predicate.CarConfigPack) *CarConfigPackUpdateOne {
	ccpuo.mutation.Where(ps...)
	return ccpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ccpuo *CarConfigPackUpdateOne) Select(field string, fields ...string) *CarConfigPackUpdateOne {
	ccpuo.fields = append([]string{field}, fields...)
	return ccpuo
}

// Save executes the query and returns the updated CarConfigPack entity.
func (ccpuo *CarConfigPackUpdateOne) Save(ctx context.Context) (*CarConfigPack, error) {
	return withHooks(ctx, ccpuo.sqlSave, ccpuo.mutation, ccpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ccpuo *CarConfigPackUpdateOne) SaveX(ctx context.Context) *CarConfigPack {
	node, err := ccpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ccpuo *CarConfigPackUpdateOne) Exec(ctx context.Context) error {
	_, err := ccpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccpuo *CarConfigPackUpdateOne) ExecX(ctx context.Context) {
	if err := ccpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ccpuo *CarConfigPackUpdateOne) sqlSave(ctx context.Context) (_node *CarConfigPack, err error) {
	_spec := sqlgraph.NewUpdateSpec(carconfigpack.Table, carconfigpack.Columns, sqlgraph.NewFieldSpec(carconfigpack.FieldID, field.TypeInt))
	id, ok := ccpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CarConfigPack.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ccpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carconfigpack.FieldID)
		for _, f := range fields {
			if !carconfigpack.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != carconfigpack.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ccpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccpuo.mutation.ScenicAreaID(); ok {
		_spec.SetField(carconfigpack.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := ccpuo.mutation.AddedScenicAreaID(); ok {
		_spec.AddField(carconfigpack.FieldScenicAreaID, field.TypeInt, value)
	}
	if ccpuo.mutation.ScenicAreaIDCleared() {
		_spec.ClearField(carconfigpack.FieldScenicAreaID, field.TypeInt)
	}
	if value, ok := ccpuo.mutation.ModelID(); ok {
		_spec.SetField(carconfigpack.FieldModelID, field.TypeInt, value)
	}
	if value, ok := ccpuo.mutation.AddedModelID(); ok {
		_spec.AddField(carconfigpack.FieldModelID, field.TypeInt, value)
	}
	if ccpuo.mutation.ModelIDCleared() {
		_spec.ClearField(carconfigpack.FieldModelID, field.TypeInt)
	}
	if value, ok := ccpuo.mutation.CarID(); ok {
		_spec.SetField(carconfigpack.FieldCarID, field.TypeInt, value)
	}
	if value, ok := ccpuo.mutation.AddedCarID(); ok {
		_spec.AddField(carconfigpack.FieldCarID, field.TypeInt, value)
	}
	if ccpuo.mutation.CarIDCleared() {
		_spec.ClearField(carconfigpack.FieldCarID, field.TypeInt)
	}
	if value, ok := ccpuo.mutation.CarVersion(); ok {
		_spec.SetField(carconfigpack.FieldCarVersion, field.TypeString, value)
	}
	if value, ok := ccpuo.mutation.Name(); ok {
		_spec.SetField(carconfigpack.FieldName, field.TypeString, value)
	}
	if value, ok := ccpuo.mutation.Remark(); ok {
		_spec.SetField(carconfigpack.FieldRemark, field.TypeString, value)
	}
	if value, ok := ccpuo.mutation.Version(); ok {
		_spec.SetField(carconfigpack.FieldVersion, field.TypeString, value)
	}
	if value, ok := ccpuo.mutation.ConfigIds(); ok {
		_spec.SetField(carconfigpack.FieldConfigIds, field.TypeJSON, value)
	}
	if value, ok := ccpuo.mutation.AppendedConfigIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, carconfigpack.FieldConfigIds, value)
		})
	}
	if ccpuo.mutation.ConfigIdsCleared() {
		_spec.ClearField(carconfigpack.FieldConfigIds, field.TypeJSON)
	}
	_node = &CarConfigPack{config: ccpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ccpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carconfigpack.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ccpuo.mutation.done = true
	return _node, nil
}
