// Code generated by ent, DO NOT EDIT.

package carsoperatelog

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldLTE(FieldID, id))
}

// ScenicAreaID applies equality check predicate on the "scenic_area_id" field. It's identical to ScenicAreaIDEQ.
func ScenicAreaID(v int) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldEQ(FieldScenicAreaID, v))
}

// Origin applies equality check predicate on the "origin" field. It's identical to OriginEQ.
func Origin(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldEQ(FieldOrigin, v))
}

// OriginUID applies equality check predicate on the "origin_uid" field. It's identical to OriginUIDEQ.
func OriginUID(v int) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldEQ(FieldOriginUID, v))
}

// OriginIP applies equality check predicate on the "origin_ip" field. It's identical to OriginIPEQ.
func OriginIP(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldEQ(FieldOriginIP, v))
}

// OperateAction applies equality check predicate on the "operate_action" field. It's identical to OperateActionEQ.
func OperateAction(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldEQ(FieldOperateAction, v))
}

// CarID applies equality check predicate on the "car_id" field. It's identical to CarIDEQ.
func CarID(v int) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldEQ(FieldCarID, v))
}

// DeviceID applies equality check predicate on the "device_id" field. It's identical to DeviceIDEQ.
func DeviceID(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldEQ(FieldDeviceID, v))
}

// CarLongitude applies equality check predicate on the "car_longitude" field. It's identical to CarLongitudeEQ.
func CarLongitude(v float64) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldEQ(FieldCarLongitude, v))
}

// CarLatitude applies equality check predicate on the "car_latitude" field. It's identical to CarLatitudeEQ.
func CarLatitude(v float64) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldEQ(FieldCarLatitude, v))
}

// CarMileage applies equality check predicate on the "car_mileage" field. It's identical to CarMileageEQ.
func CarMileage(v float64) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldEQ(FieldCarMileage, v))
}

// CarSpeed applies equality check predicate on the "car_speed" field. It's identical to CarSpeedEQ.
func CarSpeed(v float64) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldEQ(FieldCarSpeed, v))
}

// CarPower applies equality check predicate on the "car_power" field. It's identical to CarPowerEQ.
func CarPower(v float64) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldEQ(FieldCarPower, v))
}

// CarStatus applies equality check predicate on the "car_status" field. It's identical to CarStatusEQ.
func CarStatus(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldEQ(FieldCarStatus, v))
}

// OperateResult applies equality check predicate on the "operate_result" field. It's identical to OperateResultEQ.
func OperateResult(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldEQ(FieldOperateResult, v))
}

// OperateState applies equality check predicate on the "operate_state" field. It's identical to OperateStateEQ.
func OperateState(v int) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldEQ(FieldOperateState, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldEQ(FieldUpdateTime, v))
}

// ScenicAreaIDEQ applies the EQ predicate on the "scenic_area_id" field.
func ScenicAreaIDEQ(v int) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldEQ(FieldScenicAreaID, v))
}

// ScenicAreaIDNEQ applies the NEQ predicate on the "scenic_area_id" field.
func ScenicAreaIDNEQ(v int) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldNEQ(FieldScenicAreaID, v))
}

// ScenicAreaIDIn applies the In predicate on the "scenic_area_id" field.
func ScenicAreaIDIn(vs ...int) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldIn(FieldScenicAreaID, vs...))
}

// ScenicAreaIDNotIn applies the NotIn predicate on the "scenic_area_id" field.
func ScenicAreaIDNotIn(vs ...int) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldNotIn(FieldScenicAreaID, vs...))
}

// OriginEQ applies the EQ predicate on the "origin" field.
func OriginEQ(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldEQ(FieldOrigin, v))
}

// OriginNEQ applies the NEQ predicate on the "origin" field.
func OriginNEQ(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldNEQ(FieldOrigin, v))
}

// OriginIn applies the In predicate on the "origin" field.
func OriginIn(vs ...string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldIn(FieldOrigin, vs...))
}

// OriginNotIn applies the NotIn predicate on the "origin" field.
func OriginNotIn(vs ...string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldNotIn(FieldOrigin, vs...))
}

// OriginGT applies the GT predicate on the "origin" field.
func OriginGT(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldGT(FieldOrigin, v))
}

// OriginGTE applies the GTE predicate on the "origin" field.
func OriginGTE(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldGTE(FieldOrigin, v))
}

// OriginLT applies the LT predicate on the "origin" field.
func OriginLT(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldLT(FieldOrigin, v))
}

// OriginLTE applies the LTE predicate on the "origin" field.
func OriginLTE(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldLTE(FieldOrigin, v))
}

// OriginContains applies the Contains predicate on the "origin" field.
func OriginContains(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldContains(FieldOrigin, v))
}

// OriginHasPrefix applies the HasPrefix predicate on the "origin" field.
func OriginHasPrefix(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldHasPrefix(FieldOrigin, v))
}

// OriginHasSuffix applies the HasSuffix predicate on the "origin" field.
func OriginHasSuffix(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldHasSuffix(FieldOrigin, v))
}

// OriginEqualFold applies the EqualFold predicate on the "origin" field.
func OriginEqualFold(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldEqualFold(FieldOrigin, v))
}

// OriginContainsFold applies the ContainsFold predicate on the "origin" field.
func OriginContainsFold(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldContainsFold(FieldOrigin, v))
}

// OriginUIDEQ applies the EQ predicate on the "origin_uid" field.
func OriginUIDEQ(v int) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldEQ(FieldOriginUID, v))
}

// OriginUIDNEQ applies the NEQ predicate on the "origin_uid" field.
func OriginUIDNEQ(v int) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldNEQ(FieldOriginUID, v))
}

// OriginUIDIn applies the In predicate on the "origin_uid" field.
func OriginUIDIn(vs ...int) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldIn(FieldOriginUID, vs...))
}

// OriginUIDNotIn applies the NotIn predicate on the "origin_uid" field.
func OriginUIDNotIn(vs ...int) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldNotIn(FieldOriginUID, vs...))
}

// OriginUIDGT applies the GT predicate on the "origin_uid" field.
func OriginUIDGT(v int) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldGT(FieldOriginUID, v))
}

// OriginUIDGTE applies the GTE predicate on the "origin_uid" field.
func OriginUIDGTE(v int) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldGTE(FieldOriginUID, v))
}

// OriginUIDLT applies the LT predicate on the "origin_uid" field.
func OriginUIDLT(v int) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldLT(FieldOriginUID, v))
}

// OriginUIDLTE applies the LTE predicate on the "origin_uid" field.
func OriginUIDLTE(v int) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldLTE(FieldOriginUID, v))
}

// OriginIPEQ applies the EQ predicate on the "origin_ip" field.
func OriginIPEQ(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldEQ(FieldOriginIP, v))
}

// OriginIPNEQ applies the NEQ predicate on the "origin_ip" field.
func OriginIPNEQ(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldNEQ(FieldOriginIP, v))
}

// OriginIPIn applies the In predicate on the "origin_ip" field.
func OriginIPIn(vs ...string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldIn(FieldOriginIP, vs...))
}

// OriginIPNotIn applies the NotIn predicate on the "origin_ip" field.
func OriginIPNotIn(vs ...string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldNotIn(FieldOriginIP, vs...))
}

// OriginIPGT applies the GT predicate on the "origin_ip" field.
func OriginIPGT(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldGT(FieldOriginIP, v))
}

// OriginIPGTE applies the GTE predicate on the "origin_ip" field.
func OriginIPGTE(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldGTE(FieldOriginIP, v))
}

// OriginIPLT applies the LT predicate on the "origin_ip" field.
func OriginIPLT(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldLT(FieldOriginIP, v))
}

// OriginIPLTE applies the LTE predicate on the "origin_ip" field.
func OriginIPLTE(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldLTE(FieldOriginIP, v))
}

// OriginIPContains applies the Contains predicate on the "origin_ip" field.
func OriginIPContains(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldContains(FieldOriginIP, v))
}

// OriginIPHasPrefix applies the HasPrefix predicate on the "origin_ip" field.
func OriginIPHasPrefix(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldHasPrefix(FieldOriginIP, v))
}

// OriginIPHasSuffix applies the HasSuffix predicate on the "origin_ip" field.
func OriginIPHasSuffix(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldHasSuffix(FieldOriginIP, v))
}

// OriginIPEqualFold applies the EqualFold predicate on the "origin_ip" field.
func OriginIPEqualFold(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldEqualFold(FieldOriginIP, v))
}

// OriginIPContainsFold applies the ContainsFold predicate on the "origin_ip" field.
func OriginIPContainsFold(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldContainsFold(FieldOriginIP, v))
}

// OperateActionEQ applies the EQ predicate on the "operate_action" field.
func OperateActionEQ(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldEQ(FieldOperateAction, v))
}

// OperateActionNEQ applies the NEQ predicate on the "operate_action" field.
func OperateActionNEQ(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldNEQ(FieldOperateAction, v))
}

// OperateActionIn applies the In predicate on the "operate_action" field.
func OperateActionIn(vs ...string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldIn(FieldOperateAction, vs...))
}

// OperateActionNotIn applies the NotIn predicate on the "operate_action" field.
func OperateActionNotIn(vs ...string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldNotIn(FieldOperateAction, vs...))
}

// OperateActionGT applies the GT predicate on the "operate_action" field.
func OperateActionGT(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldGT(FieldOperateAction, v))
}

// OperateActionGTE applies the GTE predicate on the "operate_action" field.
func OperateActionGTE(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldGTE(FieldOperateAction, v))
}

// OperateActionLT applies the LT predicate on the "operate_action" field.
func OperateActionLT(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldLT(FieldOperateAction, v))
}

// OperateActionLTE applies the LTE predicate on the "operate_action" field.
func OperateActionLTE(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldLTE(FieldOperateAction, v))
}

// OperateActionContains applies the Contains predicate on the "operate_action" field.
func OperateActionContains(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldContains(FieldOperateAction, v))
}

// OperateActionHasPrefix applies the HasPrefix predicate on the "operate_action" field.
func OperateActionHasPrefix(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldHasPrefix(FieldOperateAction, v))
}

// OperateActionHasSuffix applies the HasSuffix predicate on the "operate_action" field.
func OperateActionHasSuffix(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldHasSuffix(FieldOperateAction, v))
}

// OperateActionEqualFold applies the EqualFold predicate on the "operate_action" field.
func OperateActionEqualFold(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldEqualFold(FieldOperateAction, v))
}

// OperateActionContainsFold applies the ContainsFold predicate on the "operate_action" field.
func OperateActionContainsFold(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldContainsFold(FieldOperateAction, v))
}

// CarIDEQ applies the EQ predicate on the "car_id" field.
func CarIDEQ(v int) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldEQ(FieldCarID, v))
}

// CarIDNEQ applies the NEQ predicate on the "car_id" field.
func CarIDNEQ(v int) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldNEQ(FieldCarID, v))
}

// CarIDIn applies the In predicate on the "car_id" field.
func CarIDIn(vs ...int) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldIn(FieldCarID, vs...))
}

// CarIDNotIn applies the NotIn predicate on the "car_id" field.
func CarIDNotIn(vs ...int) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldNotIn(FieldCarID, vs...))
}

// DeviceIDEQ applies the EQ predicate on the "device_id" field.
func DeviceIDEQ(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldEQ(FieldDeviceID, v))
}

// DeviceIDNEQ applies the NEQ predicate on the "device_id" field.
func DeviceIDNEQ(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldNEQ(FieldDeviceID, v))
}

// DeviceIDIn applies the In predicate on the "device_id" field.
func DeviceIDIn(vs ...string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldIn(FieldDeviceID, vs...))
}

// DeviceIDNotIn applies the NotIn predicate on the "device_id" field.
func DeviceIDNotIn(vs ...string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldNotIn(FieldDeviceID, vs...))
}

// DeviceIDGT applies the GT predicate on the "device_id" field.
func DeviceIDGT(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldGT(FieldDeviceID, v))
}

// DeviceIDGTE applies the GTE predicate on the "device_id" field.
func DeviceIDGTE(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldGTE(FieldDeviceID, v))
}

// DeviceIDLT applies the LT predicate on the "device_id" field.
func DeviceIDLT(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldLT(FieldDeviceID, v))
}

// DeviceIDLTE applies the LTE predicate on the "device_id" field.
func DeviceIDLTE(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldLTE(FieldDeviceID, v))
}

// DeviceIDContains applies the Contains predicate on the "device_id" field.
func DeviceIDContains(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldContains(FieldDeviceID, v))
}

// DeviceIDHasPrefix applies the HasPrefix predicate on the "device_id" field.
func DeviceIDHasPrefix(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldHasPrefix(FieldDeviceID, v))
}

// DeviceIDHasSuffix applies the HasSuffix predicate on the "device_id" field.
func DeviceIDHasSuffix(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldHasSuffix(FieldDeviceID, v))
}

// DeviceIDEqualFold applies the EqualFold predicate on the "device_id" field.
func DeviceIDEqualFold(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldEqualFold(FieldDeviceID, v))
}

// DeviceIDContainsFold applies the ContainsFold predicate on the "device_id" field.
func DeviceIDContainsFold(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldContainsFold(FieldDeviceID, v))
}

// CarLongitudeEQ applies the EQ predicate on the "car_longitude" field.
func CarLongitudeEQ(v float64) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldEQ(FieldCarLongitude, v))
}

// CarLongitudeNEQ applies the NEQ predicate on the "car_longitude" field.
func CarLongitudeNEQ(v float64) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldNEQ(FieldCarLongitude, v))
}

// CarLongitudeIn applies the In predicate on the "car_longitude" field.
func CarLongitudeIn(vs ...float64) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldIn(FieldCarLongitude, vs...))
}

// CarLongitudeNotIn applies the NotIn predicate on the "car_longitude" field.
func CarLongitudeNotIn(vs ...float64) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldNotIn(FieldCarLongitude, vs...))
}

// CarLongitudeGT applies the GT predicate on the "car_longitude" field.
func CarLongitudeGT(v float64) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldGT(FieldCarLongitude, v))
}

// CarLongitudeGTE applies the GTE predicate on the "car_longitude" field.
func CarLongitudeGTE(v float64) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldGTE(FieldCarLongitude, v))
}

// CarLongitudeLT applies the LT predicate on the "car_longitude" field.
func CarLongitudeLT(v float64) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldLT(FieldCarLongitude, v))
}

// CarLongitudeLTE applies the LTE predicate on the "car_longitude" field.
func CarLongitudeLTE(v float64) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldLTE(FieldCarLongitude, v))
}

// CarLongitudeIsNil applies the IsNil predicate on the "car_longitude" field.
func CarLongitudeIsNil() predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldIsNull(FieldCarLongitude))
}

// CarLongitudeNotNil applies the NotNil predicate on the "car_longitude" field.
func CarLongitudeNotNil() predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldNotNull(FieldCarLongitude))
}

// CarLatitudeEQ applies the EQ predicate on the "car_latitude" field.
func CarLatitudeEQ(v float64) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldEQ(FieldCarLatitude, v))
}

// CarLatitudeNEQ applies the NEQ predicate on the "car_latitude" field.
func CarLatitudeNEQ(v float64) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldNEQ(FieldCarLatitude, v))
}

// CarLatitudeIn applies the In predicate on the "car_latitude" field.
func CarLatitudeIn(vs ...float64) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldIn(FieldCarLatitude, vs...))
}

// CarLatitudeNotIn applies the NotIn predicate on the "car_latitude" field.
func CarLatitudeNotIn(vs ...float64) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldNotIn(FieldCarLatitude, vs...))
}

// CarLatitudeGT applies the GT predicate on the "car_latitude" field.
func CarLatitudeGT(v float64) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldGT(FieldCarLatitude, v))
}

// CarLatitudeGTE applies the GTE predicate on the "car_latitude" field.
func CarLatitudeGTE(v float64) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldGTE(FieldCarLatitude, v))
}

// CarLatitudeLT applies the LT predicate on the "car_latitude" field.
func CarLatitudeLT(v float64) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldLT(FieldCarLatitude, v))
}

// CarLatitudeLTE applies the LTE predicate on the "car_latitude" field.
func CarLatitudeLTE(v float64) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldLTE(FieldCarLatitude, v))
}

// CarLatitudeIsNil applies the IsNil predicate on the "car_latitude" field.
func CarLatitudeIsNil() predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldIsNull(FieldCarLatitude))
}

// CarLatitudeNotNil applies the NotNil predicate on the "car_latitude" field.
func CarLatitudeNotNil() predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldNotNull(FieldCarLatitude))
}

// CarMileageEQ applies the EQ predicate on the "car_mileage" field.
func CarMileageEQ(v float64) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldEQ(FieldCarMileage, v))
}

// CarMileageNEQ applies the NEQ predicate on the "car_mileage" field.
func CarMileageNEQ(v float64) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldNEQ(FieldCarMileage, v))
}

// CarMileageIn applies the In predicate on the "car_mileage" field.
func CarMileageIn(vs ...float64) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldIn(FieldCarMileage, vs...))
}

// CarMileageNotIn applies the NotIn predicate on the "car_mileage" field.
func CarMileageNotIn(vs ...float64) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldNotIn(FieldCarMileage, vs...))
}

// CarMileageGT applies the GT predicate on the "car_mileage" field.
func CarMileageGT(v float64) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldGT(FieldCarMileage, v))
}

// CarMileageGTE applies the GTE predicate on the "car_mileage" field.
func CarMileageGTE(v float64) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldGTE(FieldCarMileage, v))
}

// CarMileageLT applies the LT predicate on the "car_mileage" field.
func CarMileageLT(v float64) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldLT(FieldCarMileage, v))
}

// CarMileageLTE applies the LTE predicate on the "car_mileage" field.
func CarMileageLTE(v float64) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldLTE(FieldCarMileage, v))
}

// CarMileageIsNil applies the IsNil predicate on the "car_mileage" field.
func CarMileageIsNil() predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldIsNull(FieldCarMileage))
}

// CarMileageNotNil applies the NotNil predicate on the "car_mileage" field.
func CarMileageNotNil() predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldNotNull(FieldCarMileage))
}

// CarSpeedEQ applies the EQ predicate on the "car_speed" field.
func CarSpeedEQ(v float64) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldEQ(FieldCarSpeed, v))
}

// CarSpeedNEQ applies the NEQ predicate on the "car_speed" field.
func CarSpeedNEQ(v float64) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldNEQ(FieldCarSpeed, v))
}

// CarSpeedIn applies the In predicate on the "car_speed" field.
func CarSpeedIn(vs ...float64) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldIn(FieldCarSpeed, vs...))
}

// CarSpeedNotIn applies the NotIn predicate on the "car_speed" field.
func CarSpeedNotIn(vs ...float64) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldNotIn(FieldCarSpeed, vs...))
}

// CarSpeedGT applies the GT predicate on the "car_speed" field.
func CarSpeedGT(v float64) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldGT(FieldCarSpeed, v))
}

// CarSpeedGTE applies the GTE predicate on the "car_speed" field.
func CarSpeedGTE(v float64) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldGTE(FieldCarSpeed, v))
}

// CarSpeedLT applies the LT predicate on the "car_speed" field.
func CarSpeedLT(v float64) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldLT(FieldCarSpeed, v))
}

// CarSpeedLTE applies the LTE predicate on the "car_speed" field.
func CarSpeedLTE(v float64) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldLTE(FieldCarSpeed, v))
}

// CarSpeedIsNil applies the IsNil predicate on the "car_speed" field.
func CarSpeedIsNil() predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldIsNull(FieldCarSpeed))
}

// CarSpeedNotNil applies the NotNil predicate on the "car_speed" field.
func CarSpeedNotNil() predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldNotNull(FieldCarSpeed))
}

// CarPowerEQ applies the EQ predicate on the "car_power" field.
func CarPowerEQ(v float64) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldEQ(FieldCarPower, v))
}

// CarPowerNEQ applies the NEQ predicate on the "car_power" field.
func CarPowerNEQ(v float64) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldNEQ(FieldCarPower, v))
}

// CarPowerIn applies the In predicate on the "car_power" field.
func CarPowerIn(vs ...float64) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldIn(FieldCarPower, vs...))
}

// CarPowerNotIn applies the NotIn predicate on the "car_power" field.
func CarPowerNotIn(vs ...float64) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldNotIn(FieldCarPower, vs...))
}

// CarPowerGT applies the GT predicate on the "car_power" field.
func CarPowerGT(v float64) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldGT(FieldCarPower, v))
}

// CarPowerGTE applies the GTE predicate on the "car_power" field.
func CarPowerGTE(v float64) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldGTE(FieldCarPower, v))
}

// CarPowerLT applies the LT predicate on the "car_power" field.
func CarPowerLT(v float64) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldLT(FieldCarPower, v))
}

// CarPowerLTE applies the LTE predicate on the "car_power" field.
func CarPowerLTE(v float64) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldLTE(FieldCarPower, v))
}

// CarPowerIsNil applies the IsNil predicate on the "car_power" field.
func CarPowerIsNil() predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldIsNull(FieldCarPower))
}

// CarPowerNotNil applies the NotNil predicate on the "car_power" field.
func CarPowerNotNil() predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldNotNull(FieldCarPower))
}

// CarStatusEQ applies the EQ predicate on the "car_status" field.
func CarStatusEQ(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldEQ(FieldCarStatus, v))
}

// CarStatusNEQ applies the NEQ predicate on the "car_status" field.
func CarStatusNEQ(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldNEQ(FieldCarStatus, v))
}

// CarStatusIn applies the In predicate on the "car_status" field.
func CarStatusIn(vs ...string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldIn(FieldCarStatus, vs...))
}

// CarStatusNotIn applies the NotIn predicate on the "car_status" field.
func CarStatusNotIn(vs ...string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldNotIn(FieldCarStatus, vs...))
}

// CarStatusGT applies the GT predicate on the "car_status" field.
func CarStatusGT(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldGT(FieldCarStatus, v))
}

// CarStatusGTE applies the GTE predicate on the "car_status" field.
func CarStatusGTE(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldGTE(FieldCarStatus, v))
}

// CarStatusLT applies the LT predicate on the "car_status" field.
func CarStatusLT(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldLT(FieldCarStatus, v))
}

// CarStatusLTE applies the LTE predicate on the "car_status" field.
func CarStatusLTE(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldLTE(FieldCarStatus, v))
}

// CarStatusContains applies the Contains predicate on the "car_status" field.
func CarStatusContains(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldContains(FieldCarStatus, v))
}

// CarStatusHasPrefix applies the HasPrefix predicate on the "car_status" field.
func CarStatusHasPrefix(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldHasPrefix(FieldCarStatus, v))
}

// CarStatusHasSuffix applies the HasSuffix predicate on the "car_status" field.
func CarStatusHasSuffix(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldHasSuffix(FieldCarStatus, v))
}

// CarStatusIsNil applies the IsNil predicate on the "car_status" field.
func CarStatusIsNil() predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldIsNull(FieldCarStatus))
}

// CarStatusNotNil applies the NotNil predicate on the "car_status" field.
func CarStatusNotNil() predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldNotNull(FieldCarStatus))
}

// CarStatusEqualFold applies the EqualFold predicate on the "car_status" field.
func CarStatusEqualFold(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldEqualFold(FieldCarStatus, v))
}

// CarStatusContainsFold applies the ContainsFold predicate on the "car_status" field.
func CarStatusContainsFold(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldContainsFold(FieldCarStatus, v))
}

// OperateResultEQ applies the EQ predicate on the "operate_result" field.
func OperateResultEQ(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldEQ(FieldOperateResult, v))
}

// OperateResultNEQ applies the NEQ predicate on the "operate_result" field.
func OperateResultNEQ(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldNEQ(FieldOperateResult, v))
}

// OperateResultIn applies the In predicate on the "operate_result" field.
func OperateResultIn(vs ...string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldIn(FieldOperateResult, vs...))
}

// OperateResultNotIn applies the NotIn predicate on the "operate_result" field.
func OperateResultNotIn(vs ...string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldNotIn(FieldOperateResult, vs...))
}

// OperateResultGT applies the GT predicate on the "operate_result" field.
func OperateResultGT(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldGT(FieldOperateResult, v))
}

// OperateResultGTE applies the GTE predicate on the "operate_result" field.
func OperateResultGTE(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldGTE(FieldOperateResult, v))
}

// OperateResultLT applies the LT predicate on the "operate_result" field.
func OperateResultLT(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldLT(FieldOperateResult, v))
}

// OperateResultLTE applies the LTE predicate on the "operate_result" field.
func OperateResultLTE(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldLTE(FieldOperateResult, v))
}

// OperateResultContains applies the Contains predicate on the "operate_result" field.
func OperateResultContains(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldContains(FieldOperateResult, v))
}

// OperateResultHasPrefix applies the HasPrefix predicate on the "operate_result" field.
func OperateResultHasPrefix(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldHasPrefix(FieldOperateResult, v))
}

// OperateResultHasSuffix applies the HasSuffix predicate on the "operate_result" field.
func OperateResultHasSuffix(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldHasSuffix(FieldOperateResult, v))
}

// OperateResultEqualFold applies the EqualFold predicate on the "operate_result" field.
func OperateResultEqualFold(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldEqualFold(FieldOperateResult, v))
}

// OperateResultContainsFold applies the ContainsFold predicate on the "operate_result" field.
func OperateResultContainsFold(v string) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldContainsFold(FieldOperateResult, v))
}

// OperateStateEQ applies the EQ predicate on the "operate_state" field.
func OperateStateEQ(v int) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldEQ(FieldOperateState, v))
}

// OperateStateNEQ applies the NEQ predicate on the "operate_state" field.
func OperateStateNEQ(v int) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldNEQ(FieldOperateState, v))
}

// OperateStateIn applies the In predicate on the "operate_state" field.
func OperateStateIn(vs ...int) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldIn(FieldOperateState, vs...))
}

// OperateStateNotIn applies the NotIn predicate on the "operate_state" field.
func OperateStateNotIn(vs ...int) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldNotIn(FieldOperateState, vs...))
}

// OperateStateGT applies the GT predicate on the "operate_state" field.
func OperateStateGT(v int) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldGT(FieldOperateState, v))
}

// OperateStateGTE applies the GTE predicate on the "operate_state" field.
func OperateStateGTE(v int) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldGTE(FieldOperateState, v))
}

// OperateStateLT applies the LT predicate on the "operate_state" field.
func OperateStateLT(v int) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldLT(FieldOperateState, v))
}

// OperateStateLTE applies the LTE predicate on the "operate_state" field.
func OperateStateLTE(v int) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldLTE(FieldOperateState, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.FieldLTE(FieldUpdateTime, v))
}

// HasBackgroundScenicArea applies the HasEdge predicate on the "background_scenic_area" edge.
func HasBackgroundScenicArea() predicate.CarsOperateLog {
	return predicate.CarsOperateLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BackgroundScenicAreaTable, BackgroundScenicAreaColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBackgroundScenicAreaWith applies the HasEdge predicate on the "background_scenic_area" edge with a given conditions (other predicates).
func HasBackgroundScenicAreaWith(preds ...predicate.ScenicArea) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(func(s *sql.Selector) {
		step := newBackgroundScenicAreaStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCar applies the HasEdge predicate on the "car" edge.
func HasCar() predicate.CarsOperateLog {
	return predicate.CarsOperateLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CarTable, CarColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarWith applies the HasEdge predicate on the "car" edge with a given conditions (other predicates).
func HasCarWith(preds ...predicate.Car) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(func(s *sql.Selector) {
		step := newCarStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CarsOperateLog) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CarsOperateLog) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CarsOperateLog) predicate.CarsOperateLog {
	return predicate.CarsOperateLog(sql.NotPredicates(p))
}
