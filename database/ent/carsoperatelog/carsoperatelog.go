// Code generated by ent, DO NOT EDIT.

package carsoperatelog

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the carsoperatelog type in the database.
	Label = "cars_operate_log"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldScenicAreaID holds the string denoting the scenic_area_id field in the database.
	FieldScenicAreaID = "scenic_area_id"
	// FieldOrigin holds the string denoting the origin field in the database.
	FieldOrigin = "origin"
	// FieldOriginUID holds the string denoting the origin_uid field in the database.
	FieldOriginUID = "origin_uid"
	// FieldOriginIP holds the string denoting the origin_ip field in the database.
	FieldOriginIP = "origin_ip"
	// FieldOperateAction holds the string denoting the operate_action field in the database.
	FieldOperateAction = "operate_action"
	// FieldCarID holds the string denoting the car_id field in the database.
	FieldCarID = "car_id"
	// FieldDeviceID holds the string denoting the device_id field in the database.
	FieldDeviceID = "device_id"
	// FieldCarLongitude holds the string denoting the car_longitude field in the database.
	FieldCarLongitude = "car_longitude"
	// FieldCarLatitude holds the string denoting the car_latitude field in the database.
	FieldCarLatitude = "car_latitude"
	// FieldCarMileage holds the string denoting the car_mileage field in the database.
	FieldCarMileage = "car_mileage"
	// FieldCarSpeed holds the string denoting the car_speed field in the database.
	FieldCarSpeed = "car_speed"
	// FieldCarPower holds the string denoting the car_power field in the database.
	FieldCarPower = "car_power"
	// FieldCarStatus holds the string denoting the car_status field in the database.
	FieldCarStatus = "car_status"
	// FieldOperateResult holds the string denoting the operate_result field in the database.
	FieldOperateResult = "operate_result"
	// FieldOperateState holds the string denoting the operate_state field in the database.
	FieldOperateState = "operate_state"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// EdgeBackgroundScenicArea holds the string denoting the background_scenic_area edge name in mutations.
	EdgeBackgroundScenicArea = "background_scenic_area"
	// EdgeCar holds the string denoting the car edge name in mutations.
	EdgeCar = "car"
	// Table holds the table name of the carsoperatelog in the database.
	Table = "cars_operate_logs"
	// BackgroundScenicAreaTable is the table that holds the background_scenic_area relation/edge.
	BackgroundScenicAreaTable = "cars_operate_logs"
	// BackgroundScenicAreaInverseTable is the table name for the ScenicArea entity.
	// It exists in this package in order to avoid circular dependency with the "scenicarea" package.
	BackgroundScenicAreaInverseTable = "scenic_areas"
	// BackgroundScenicAreaColumn is the table column denoting the background_scenic_area relation/edge.
	BackgroundScenicAreaColumn = "scenic_area_id"
	// CarTable is the table that holds the car relation/edge.
	CarTable = "cars_operate_logs"
	// CarInverseTable is the table name for the Car entity.
	// It exists in this package in order to avoid circular dependency with the "car" package.
	CarInverseTable = "cars"
	// CarColumn is the table column denoting the car relation/edge.
	CarColumn = "car_id"
)

// Columns holds all SQL columns for carsoperatelog fields.
var Columns = []string{
	FieldID,
	FieldScenicAreaID,
	FieldOrigin,
	FieldOriginUID,
	FieldOriginIP,
	FieldOperateAction,
	FieldCarID,
	FieldDeviceID,
	FieldCarLongitude,
	FieldCarLatitude,
	FieldCarMileage,
	FieldCarSpeed,
	FieldCarPower,
	FieldCarStatus,
	FieldOperateResult,
	FieldOperateState,
	FieldCreateTime,
	FieldUpdateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultScenicAreaID holds the default value on creation for the "scenic_area_id" field.
	DefaultScenicAreaID int
	// DefaultOperateState holds the default value on creation for the "operate_state" field.
	DefaultOperateState int
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)

// OrderOption defines the ordering options for the CarsOperateLog queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByScenicAreaID orders the results by the scenic_area_id field.
func ByScenicAreaID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScenicAreaID, opts...).ToFunc()
}

// ByOrigin orders the results by the origin field.
func ByOrigin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrigin, opts...).ToFunc()
}

// ByOriginUID orders the results by the origin_uid field.
func ByOriginUID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOriginUID, opts...).ToFunc()
}

// ByOriginIP orders the results by the origin_ip field.
func ByOriginIP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOriginIP, opts...).ToFunc()
}

// ByOperateAction orders the results by the operate_action field.
func ByOperateAction(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOperateAction, opts...).ToFunc()
}

// ByCarID orders the results by the car_id field.
func ByCarID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCarID, opts...).ToFunc()
}

// ByDeviceID orders the results by the device_id field.
func ByDeviceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceID, opts...).ToFunc()
}

// ByCarLongitude orders the results by the car_longitude field.
func ByCarLongitude(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCarLongitude, opts...).ToFunc()
}

// ByCarLatitude orders the results by the car_latitude field.
func ByCarLatitude(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCarLatitude, opts...).ToFunc()
}

// ByCarMileage orders the results by the car_mileage field.
func ByCarMileage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCarMileage, opts...).ToFunc()
}

// ByCarSpeed orders the results by the car_speed field.
func ByCarSpeed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCarSpeed, opts...).ToFunc()
}

// ByCarPower orders the results by the car_power field.
func ByCarPower(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCarPower, opts...).ToFunc()
}

// ByCarStatus orders the results by the car_status field.
func ByCarStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCarStatus, opts...).ToFunc()
}

// ByOperateResult orders the results by the operate_result field.
func ByOperateResult(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOperateResult, opts...).ToFunc()
}

// ByOperateState orders the results by the operate_state field.
func ByOperateState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOperateState, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByBackgroundScenicAreaField orders the results by background_scenic_area field.
func ByBackgroundScenicAreaField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBackgroundScenicAreaStep(), sql.OrderByField(field, opts...))
	}
}

// ByCarField orders the results by car field.
func ByCarField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarStep(), sql.OrderByField(field, opts...))
	}
}
func newBackgroundScenicAreaStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BackgroundScenicAreaInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BackgroundScenicAreaTable, BackgroundScenicAreaColumn),
	)
}
func newCarStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CarTable, CarColumn),
	)
}
