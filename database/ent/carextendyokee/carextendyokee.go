// Code generated by ent, DO NOT EDIT.

package carextendyokee

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the carextendyokee type in the database.
	Label = "car_extend_yokee"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDeleteTime holds the string denoting the delete_time field in the database.
	FieldDeleteTime = "delete_time"
	// FieldCarID holds the string denoting the car_id field in the database.
	FieldCarID = "car_id"
	// FieldYokeeVehicleID holds the string denoting the yokee_vehicle_id field in the database.
	FieldYokeeVehicleID = "yokee_vehicle_id"
	// FieldYokeeVehicleName holds the string denoting the yokee_vehicle_name field in the database.
	FieldYokeeVehicleName = "yokee_vehicle_name"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// Table holds the table name of the carextendyokee in the database.
	Table = "car_extend_yokees"
)

// Columns holds all SQL columns for carextendyokee fields.
var Columns = []string{
	FieldID,
	FieldDeleteTime,
	FieldCarID,
	FieldYokeeVehicleID,
	FieldYokeeVehicleName,
	FieldCreateTime,
	FieldUpdateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/jianbo-zh/jydata/database/ent/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)

// OrderOption defines the ordering options for the CarExtendYokee queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDeleteTime orders the results by the delete_time field.
func ByDeleteTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeleteTime, opts...).ToFunc()
}

// ByCarID orders the results by the car_id field.
func ByCarID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCarID, opts...).ToFunc()
}

// ByYokeeVehicleID orders the results by the yokee_vehicle_id field.
func ByYokeeVehicleID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldYokeeVehicleID, opts...).ToFunc()
}

// ByYokeeVehicleName orders the results by the yokee_vehicle_name field.
func ByYokeeVehicleName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldYokeeVehicleName, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}
