// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jianbo-zh/jydata/database/ent/scenicarea"
	"github.com/jianbo-zh/jydata/database/ent/scenicareamap"
)

// ScenicArea is the model entity for the ScenicArea schema.
type ScenicArea struct {
	config `json:"-"`
	// ID of the ent.
	// 景区id
	ID int `json:"id,omitempty"`
	// 景区编号
	Code string `json:"code,omitempty"`
	// 景区名称
	Name string `json:"name,omitempty"`
	// 景区地址
	Address string `json:"address,omitempty"`
	// 负责人
	Manager string `json:"manager,omitempty"`
	// 联系电话
	Phone string `json:"phone,omitempty"`
	// 商户号
	MchID string `json:"mch_id,omitempty"`
	// 商户名称
	MchName string `json:"mch_name,omitempty"`
	// 时区
	Timezone int `json:"timezone,omitempty"`
	// 经度(地球坐标系)
	WgsLon float64 `json:"wgs_lon,omitempty"`
	// 纬度(地球坐标系)
	WgsLat float64 `json:"wgs_lat,omitempty"`
	// 经度(火星坐标系)
	GcjLon float64 `json:"gcj_lon,omitempty"`
	// 纬度(火星坐标系)
	GcjLat float64 `json:"gcj_lat,omitempty"`
	// 经度(百度坐标系)
	BdLon float64 `json:"bd_lon,omitempty"`
	// 纬度(百度坐标系)
	BdLat float64 `json:"bd_lat,omitempty"`
	// 景区状态
	Status int `json:"status,omitempty"`
	// Yokee扩展ID
	ExtendYokeeID *int `json:"extend_yokee_id,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ScenicAreaQuery when eager-loading is set.
	Edges        ScenicAreaEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ScenicAreaEdges holds the relations/edges for other nodes in the graph.
type ScenicAreaEdges struct {
	// Cars holds the value of the cars edge.
	Cars []*Car `json:"cars,omitempty"`
	// Accounts holds the value of the accounts edge.
	Accounts []*Account `json:"accounts,omitempty"`
	// Pois holds the value of the pois edge.
	Pois []*Poi `json:"pois,omitempty"`
	// ProfitReceivers holds the value of the profit_receivers edge.
	ProfitReceivers []*ProfitReceiver `json:"profit_receivers,omitempty"`
	// PayTxBills holds the value of the pay_tx_bills edge.
	PayTxBills []*PayTxBill `json:"pay_tx_bills,omitempty"`
	// CarBillingStrategies holds the value of the car_billing_strategies edge.
	CarBillingStrategies []*BillingStrategy `json:"car_billing_strategies,omitempty"`
	// Map holds the value of the map edge.
	Map *ScenicAreaMap `json:"map,omitempty"`
	// MapVersions holds the value of the map_versions edge.
	MapVersions []*MapVersion `json:"map_versions,omitempty"`
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// Orders holds the value of the orders edge.
	Orders []*Order `json:"orders,omitempty"`
	// CarOperateLogs holds the value of the car_operate_logs edge.
	CarOperateLogs []*CarsOperateLog `json:"car_operate_logs,omitempty"`
	// StatsHourlyCar holds the value of the stats_hourly_car edge.
	StatsHourlyCar []*StatsHourlyCar `json:"stats_hourly_car,omitempty"`
	// ConfigFiles holds the value of the config_files edge.
	ConfigFiles []*CarConfig `json:"config_files,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [13]bool
}

// CarsOrErr returns the Cars value or an error if the edge
// was not loaded in eager-loading.
func (e ScenicAreaEdges) CarsOrErr() ([]*Car, error) {
	if e.loadedTypes[0] {
		return e.Cars, nil
	}
	return nil, &NotLoadedError{edge: "cars"}
}

// AccountsOrErr returns the Accounts value or an error if the edge
// was not loaded in eager-loading.
func (e ScenicAreaEdges) AccountsOrErr() ([]*Account, error) {
	if e.loadedTypes[1] {
		return e.Accounts, nil
	}
	return nil, &NotLoadedError{edge: "accounts"}
}

// PoisOrErr returns the Pois value or an error if the edge
// was not loaded in eager-loading.
func (e ScenicAreaEdges) PoisOrErr() ([]*Poi, error) {
	if e.loadedTypes[2] {
		return e.Pois, nil
	}
	return nil, &NotLoadedError{edge: "pois"}
}

// ProfitReceiversOrErr returns the ProfitReceivers value or an error if the edge
// was not loaded in eager-loading.
func (e ScenicAreaEdges) ProfitReceiversOrErr() ([]*ProfitReceiver, error) {
	if e.loadedTypes[3] {
		return e.ProfitReceivers, nil
	}
	return nil, &NotLoadedError{edge: "profit_receivers"}
}

// PayTxBillsOrErr returns the PayTxBills value or an error if the edge
// was not loaded in eager-loading.
func (e ScenicAreaEdges) PayTxBillsOrErr() ([]*PayTxBill, error) {
	if e.loadedTypes[4] {
		return e.PayTxBills, nil
	}
	return nil, &NotLoadedError{edge: "pay_tx_bills"}
}

// CarBillingStrategiesOrErr returns the CarBillingStrategies value or an error if the edge
// was not loaded in eager-loading.
func (e ScenicAreaEdges) CarBillingStrategiesOrErr() ([]*BillingStrategy, error) {
	if e.loadedTypes[5] {
		return e.CarBillingStrategies, nil
	}
	return nil, &NotLoadedError{edge: "car_billing_strategies"}
}

// MapOrErr returns the Map value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScenicAreaEdges) MapOrErr() (*ScenicAreaMap, error) {
	if e.Map != nil {
		return e.Map, nil
	} else if e.loadedTypes[6] {
		return nil, &NotFoundError{label: scenicareamap.Label}
	}
	return nil, &NotLoadedError{edge: "map"}
}

// MapVersionsOrErr returns the MapVersions value or an error if the edge
// was not loaded in eager-loading.
func (e ScenicAreaEdges) MapVersionsOrErr() ([]*MapVersion, error) {
	if e.loadedTypes[7] {
		return e.MapVersions, nil
	}
	return nil, &NotLoadedError{edge: "map_versions"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e ScenicAreaEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[8] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// OrdersOrErr returns the Orders value or an error if the edge
// was not loaded in eager-loading.
func (e ScenicAreaEdges) OrdersOrErr() ([]*Order, error) {
	if e.loadedTypes[9] {
		return e.Orders, nil
	}
	return nil, &NotLoadedError{edge: "orders"}
}

// CarOperateLogsOrErr returns the CarOperateLogs value or an error if the edge
// was not loaded in eager-loading.
func (e ScenicAreaEdges) CarOperateLogsOrErr() ([]*CarsOperateLog, error) {
	if e.loadedTypes[10] {
		return e.CarOperateLogs, nil
	}
	return nil, &NotLoadedError{edge: "car_operate_logs"}
}

// StatsHourlyCarOrErr returns the StatsHourlyCar value or an error if the edge
// was not loaded in eager-loading.
func (e ScenicAreaEdges) StatsHourlyCarOrErr() ([]*StatsHourlyCar, error) {
	if e.loadedTypes[11] {
		return e.StatsHourlyCar, nil
	}
	return nil, &NotLoadedError{edge: "stats_hourly_car"}
}

// ConfigFilesOrErr returns the ConfigFiles value or an error if the edge
// was not loaded in eager-loading.
func (e ScenicAreaEdges) ConfigFilesOrErr() ([]*CarConfig, error) {
	if e.loadedTypes[12] {
		return e.ConfigFiles, nil
	}
	return nil, &NotLoadedError{edge: "config_files"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ScenicArea) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case scenicarea.FieldWgsLon, scenicarea.FieldWgsLat, scenicarea.FieldGcjLon, scenicarea.FieldGcjLat, scenicarea.FieldBdLon, scenicarea.FieldBdLat:
			values[i] = new(sql.NullFloat64)
		case scenicarea.FieldID, scenicarea.FieldTimezone, scenicarea.FieldStatus, scenicarea.FieldExtendYokeeID:
			values[i] = new(sql.NullInt64)
		case scenicarea.FieldCode, scenicarea.FieldName, scenicarea.FieldAddress, scenicarea.FieldManager, scenicarea.FieldPhone, scenicarea.FieldMchID, scenicarea.FieldMchName:
			values[i] = new(sql.NullString)
		case scenicarea.FieldCreateTime, scenicarea.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ScenicArea fields.
func (sa *ScenicArea) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case scenicarea.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sa.ID = int(value.Int64)
		case scenicarea.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				sa.Code = value.String
			}
		case scenicarea.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				sa.Name = value.String
			}
		case scenicarea.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				sa.Address = value.String
			}
		case scenicarea.FieldManager:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field manager", values[i])
			} else if value.Valid {
				sa.Manager = value.String
			}
		case scenicarea.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				sa.Phone = value.String
			}
		case scenicarea.FieldMchID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mch_id", values[i])
			} else if value.Valid {
				sa.MchID = value.String
			}
		case scenicarea.FieldMchName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mch_name", values[i])
			} else if value.Valid {
				sa.MchName = value.String
			}
		case scenicarea.FieldTimezone:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field timezone", values[i])
			} else if value.Valid {
				sa.Timezone = int(value.Int64)
			}
		case scenicarea.FieldWgsLon:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field wgs_lon", values[i])
			} else if value.Valid {
				sa.WgsLon = value.Float64
			}
		case scenicarea.FieldWgsLat:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field wgs_lat", values[i])
			} else if value.Valid {
				sa.WgsLat = value.Float64
			}
		case scenicarea.FieldGcjLon:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field gcj_lon", values[i])
			} else if value.Valid {
				sa.GcjLon = value.Float64
			}
		case scenicarea.FieldGcjLat:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field gcj_lat", values[i])
			} else if value.Valid {
				sa.GcjLat = value.Float64
			}
		case scenicarea.FieldBdLon:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field bd_lon", values[i])
			} else if value.Valid {
				sa.BdLon = value.Float64
			}
		case scenicarea.FieldBdLat:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field bd_lat", values[i])
			} else if value.Valid {
				sa.BdLat = value.Float64
			}
		case scenicarea.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				sa.Status = int(value.Int64)
			}
		case scenicarea.FieldExtendYokeeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field extend_yokee_id", values[i])
			} else if value.Valid {
				sa.ExtendYokeeID = new(int)
				*sa.ExtendYokeeID = int(value.Int64)
			}
		case scenicarea.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				sa.CreateTime = value.Time
			}
		case scenicarea.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				sa.UpdateTime = value.Time
			}
		default:
			sa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ScenicArea.
// This includes values selected through modifiers, order, etc.
func (sa *ScenicArea) Value(name string) (ent.Value, error) {
	return sa.selectValues.Get(name)
}

// QueryCars queries the "cars" edge of the ScenicArea entity.
func (sa *ScenicArea) QueryCars() *CarQuery {
	return NewScenicAreaClient(sa.config).QueryCars(sa)
}

// QueryAccounts queries the "accounts" edge of the ScenicArea entity.
func (sa *ScenicArea) QueryAccounts() *AccountQuery {
	return NewScenicAreaClient(sa.config).QueryAccounts(sa)
}

// QueryPois queries the "pois" edge of the ScenicArea entity.
func (sa *ScenicArea) QueryPois() *PoiQuery {
	return NewScenicAreaClient(sa.config).QueryPois(sa)
}

// QueryProfitReceivers queries the "profit_receivers" edge of the ScenicArea entity.
func (sa *ScenicArea) QueryProfitReceivers() *ProfitReceiverQuery {
	return NewScenicAreaClient(sa.config).QueryProfitReceivers(sa)
}

// QueryPayTxBills queries the "pay_tx_bills" edge of the ScenicArea entity.
func (sa *ScenicArea) QueryPayTxBills() *PayTxBillQuery {
	return NewScenicAreaClient(sa.config).QueryPayTxBills(sa)
}

// QueryCarBillingStrategies queries the "car_billing_strategies" edge of the ScenicArea entity.
func (sa *ScenicArea) QueryCarBillingStrategies() *BillingStrategyQuery {
	return NewScenicAreaClient(sa.config).QueryCarBillingStrategies(sa)
}

// QueryMap queries the "map" edge of the ScenicArea entity.
func (sa *ScenicArea) QueryMap() *ScenicAreaMapQuery {
	return NewScenicAreaClient(sa.config).QueryMap(sa)
}

// QueryMapVersions queries the "map_versions" edge of the ScenicArea entity.
func (sa *ScenicArea) QueryMapVersions() *MapVersionQuery {
	return NewScenicAreaClient(sa.config).QueryMapVersions(sa)
}

// QueryUsers queries the "users" edge of the ScenicArea entity.
func (sa *ScenicArea) QueryUsers() *UserQuery {
	return NewScenicAreaClient(sa.config).QueryUsers(sa)
}

// QueryOrders queries the "orders" edge of the ScenicArea entity.
func (sa *ScenicArea) QueryOrders() *OrderQuery {
	return NewScenicAreaClient(sa.config).QueryOrders(sa)
}

// QueryCarOperateLogs queries the "car_operate_logs" edge of the ScenicArea entity.
func (sa *ScenicArea) QueryCarOperateLogs() *CarsOperateLogQuery {
	return NewScenicAreaClient(sa.config).QueryCarOperateLogs(sa)
}

// QueryStatsHourlyCar queries the "stats_hourly_car" edge of the ScenicArea entity.
func (sa *ScenicArea) QueryStatsHourlyCar() *StatsHourlyCarQuery {
	return NewScenicAreaClient(sa.config).QueryStatsHourlyCar(sa)
}

// QueryConfigFiles queries the "config_files" edge of the ScenicArea entity.
func (sa *ScenicArea) QueryConfigFiles() *CarConfigQuery {
	return NewScenicAreaClient(sa.config).QueryConfigFiles(sa)
}

// Update returns a builder for updating this ScenicArea.
// Note that you need to call ScenicArea.Unwrap() before calling this method if this ScenicArea
// was returned from a transaction, and the transaction was committed or rolled back.
func (sa *ScenicArea) Update() *ScenicAreaUpdateOne {
	return NewScenicAreaClient(sa.config).UpdateOne(sa)
}

// Unwrap unwraps the ScenicArea entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sa *ScenicArea) Unwrap() *ScenicArea {
	_tx, ok := sa.config.driver.(*txDriver)
	if !ok {
		panic("ent: ScenicArea is not a transactional entity")
	}
	sa.config.driver = _tx.drv
	return sa
}

// String implements the fmt.Stringer.
func (sa *ScenicArea) String() string {
	var builder strings.Builder
	builder.WriteString("ScenicArea(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sa.ID))
	builder.WriteString("code=")
	builder.WriteString(sa.Code)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(sa.Name)
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(sa.Address)
	builder.WriteString(", ")
	builder.WriteString("manager=")
	builder.WriteString(sa.Manager)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(sa.Phone)
	builder.WriteString(", ")
	builder.WriteString("mch_id=")
	builder.WriteString(sa.MchID)
	builder.WriteString(", ")
	builder.WriteString("mch_name=")
	builder.WriteString(sa.MchName)
	builder.WriteString(", ")
	builder.WriteString("timezone=")
	builder.WriteString(fmt.Sprintf("%v", sa.Timezone))
	builder.WriteString(", ")
	builder.WriteString("wgs_lon=")
	builder.WriteString(fmt.Sprintf("%v", sa.WgsLon))
	builder.WriteString(", ")
	builder.WriteString("wgs_lat=")
	builder.WriteString(fmt.Sprintf("%v", sa.WgsLat))
	builder.WriteString(", ")
	builder.WriteString("gcj_lon=")
	builder.WriteString(fmt.Sprintf("%v", sa.GcjLon))
	builder.WriteString(", ")
	builder.WriteString("gcj_lat=")
	builder.WriteString(fmt.Sprintf("%v", sa.GcjLat))
	builder.WriteString(", ")
	builder.WriteString("bd_lon=")
	builder.WriteString(fmt.Sprintf("%v", sa.BdLon))
	builder.WriteString(", ")
	builder.WriteString("bd_lat=")
	builder.WriteString(fmt.Sprintf("%v", sa.BdLat))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", sa.Status))
	builder.WriteString(", ")
	if v := sa.ExtendYokeeID; v != nil {
		builder.WriteString("extend_yokee_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(sa.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(sa.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ScenicAreas is a parsable slice of ScenicArea.
type ScenicAreas []*ScenicArea
