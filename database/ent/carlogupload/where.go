// Code generated by ent, DO NOT EDIT.

package carlogupload

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldLTE(FieldID, id))
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v int64) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldEQ(FieldUUID, v))
}

// CarID applies equality check predicate on the "car_id" field. It's identical to CarIDEQ.
func CarID(v int) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldEQ(FieldCarID, v))
}

// DeviceID applies equality check predicate on the "device_id" field. It's identical to DeviceIDEQ.
func DeviceID(v string) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldEQ(FieldDeviceID, v))
}

// UploadState applies equality check predicate on the "upload_state" field. It's identical to UploadStateEQ.
func UploadState(v string) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldEQ(FieldUploadState, v))
}

// UploadProcess applies equality check predicate on the "upload_process" field. It's identical to UploadProcessEQ.
func UploadProcess(v int) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldEQ(FieldUploadProcess, v))
}

// DownloadURL applies equality check predicate on the "download_url" field. It's identical to DownloadURLEQ.
func DownloadURL(v string) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldEQ(FieldDownloadURL, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldEQ(FieldUpdateTime, v))
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v int64) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldEQ(FieldUUID, v))
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v int64) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldNEQ(FieldUUID, v))
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...int64) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldIn(FieldUUID, vs...))
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...int64) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldNotIn(FieldUUID, vs...))
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v int64) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldGT(FieldUUID, v))
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v int64) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldGTE(FieldUUID, v))
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v int64) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldLT(FieldUUID, v))
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v int64) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldLTE(FieldUUID, v))
}

// CarIDEQ applies the EQ predicate on the "car_id" field.
func CarIDEQ(v int) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldEQ(FieldCarID, v))
}

// CarIDNEQ applies the NEQ predicate on the "car_id" field.
func CarIDNEQ(v int) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldNEQ(FieldCarID, v))
}

// CarIDIn applies the In predicate on the "car_id" field.
func CarIDIn(vs ...int) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldIn(FieldCarID, vs...))
}

// CarIDNotIn applies the NotIn predicate on the "car_id" field.
func CarIDNotIn(vs ...int) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldNotIn(FieldCarID, vs...))
}

// CarIDGT applies the GT predicate on the "car_id" field.
func CarIDGT(v int) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldGT(FieldCarID, v))
}

// CarIDGTE applies the GTE predicate on the "car_id" field.
func CarIDGTE(v int) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldGTE(FieldCarID, v))
}

// CarIDLT applies the LT predicate on the "car_id" field.
func CarIDLT(v int) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldLT(FieldCarID, v))
}

// CarIDLTE applies the LTE predicate on the "car_id" field.
func CarIDLTE(v int) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldLTE(FieldCarID, v))
}

// DeviceIDEQ applies the EQ predicate on the "device_id" field.
func DeviceIDEQ(v string) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldEQ(FieldDeviceID, v))
}

// DeviceIDNEQ applies the NEQ predicate on the "device_id" field.
func DeviceIDNEQ(v string) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldNEQ(FieldDeviceID, v))
}

// DeviceIDIn applies the In predicate on the "device_id" field.
func DeviceIDIn(vs ...string) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldIn(FieldDeviceID, vs...))
}

// DeviceIDNotIn applies the NotIn predicate on the "device_id" field.
func DeviceIDNotIn(vs ...string) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldNotIn(FieldDeviceID, vs...))
}

// DeviceIDGT applies the GT predicate on the "device_id" field.
func DeviceIDGT(v string) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldGT(FieldDeviceID, v))
}

// DeviceIDGTE applies the GTE predicate on the "device_id" field.
func DeviceIDGTE(v string) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldGTE(FieldDeviceID, v))
}

// DeviceIDLT applies the LT predicate on the "device_id" field.
func DeviceIDLT(v string) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldLT(FieldDeviceID, v))
}

// DeviceIDLTE applies the LTE predicate on the "device_id" field.
func DeviceIDLTE(v string) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldLTE(FieldDeviceID, v))
}

// DeviceIDContains applies the Contains predicate on the "device_id" field.
func DeviceIDContains(v string) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldContains(FieldDeviceID, v))
}

// DeviceIDHasPrefix applies the HasPrefix predicate on the "device_id" field.
func DeviceIDHasPrefix(v string) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldHasPrefix(FieldDeviceID, v))
}

// DeviceIDHasSuffix applies the HasSuffix predicate on the "device_id" field.
func DeviceIDHasSuffix(v string) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldHasSuffix(FieldDeviceID, v))
}

// DeviceIDEqualFold applies the EqualFold predicate on the "device_id" field.
func DeviceIDEqualFold(v string) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldEqualFold(FieldDeviceID, v))
}

// DeviceIDContainsFold applies the ContainsFold predicate on the "device_id" field.
func DeviceIDContainsFold(v string) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldContainsFold(FieldDeviceID, v))
}

// UploadStateEQ applies the EQ predicate on the "upload_state" field.
func UploadStateEQ(v string) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldEQ(FieldUploadState, v))
}

// UploadStateNEQ applies the NEQ predicate on the "upload_state" field.
func UploadStateNEQ(v string) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldNEQ(FieldUploadState, v))
}

// UploadStateIn applies the In predicate on the "upload_state" field.
func UploadStateIn(vs ...string) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldIn(FieldUploadState, vs...))
}

// UploadStateNotIn applies the NotIn predicate on the "upload_state" field.
func UploadStateNotIn(vs ...string) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldNotIn(FieldUploadState, vs...))
}

// UploadStateGT applies the GT predicate on the "upload_state" field.
func UploadStateGT(v string) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldGT(FieldUploadState, v))
}

// UploadStateGTE applies the GTE predicate on the "upload_state" field.
func UploadStateGTE(v string) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldGTE(FieldUploadState, v))
}

// UploadStateLT applies the LT predicate on the "upload_state" field.
func UploadStateLT(v string) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldLT(FieldUploadState, v))
}

// UploadStateLTE applies the LTE predicate on the "upload_state" field.
func UploadStateLTE(v string) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldLTE(FieldUploadState, v))
}

// UploadStateContains applies the Contains predicate on the "upload_state" field.
func UploadStateContains(v string) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldContains(FieldUploadState, v))
}

// UploadStateHasPrefix applies the HasPrefix predicate on the "upload_state" field.
func UploadStateHasPrefix(v string) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldHasPrefix(FieldUploadState, v))
}

// UploadStateHasSuffix applies the HasSuffix predicate on the "upload_state" field.
func UploadStateHasSuffix(v string) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldHasSuffix(FieldUploadState, v))
}

// UploadStateEqualFold applies the EqualFold predicate on the "upload_state" field.
func UploadStateEqualFold(v string) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldEqualFold(FieldUploadState, v))
}

// UploadStateContainsFold applies the ContainsFold predicate on the "upload_state" field.
func UploadStateContainsFold(v string) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldContainsFold(FieldUploadState, v))
}

// UploadProcessEQ applies the EQ predicate on the "upload_process" field.
func UploadProcessEQ(v int) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldEQ(FieldUploadProcess, v))
}

// UploadProcessNEQ applies the NEQ predicate on the "upload_process" field.
func UploadProcessNEQ(v int) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldNEQ(FieldUploadProcess, v))
}

// UploadProcessIn applies the In predicate on the "upload_process" field.
func UploadProcessIn(vs ...int) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldIn(FieldUploadProcess, vs...))
}

// UploadProcessNotIn applies the NotIn predicate on the "upload_process" field.
func UploadProcessNotIn(vs ...int) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldNotIn(FieldUploadProcess, vs...))
}

// UploadProcessGT applies the GT predicate on the "upload_process" field.
func UploadProcessGT(v int) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldGT(FieldUploadProcess, v))
}

// UploadProcessGTE applies the GTE predicate on the "upload_process" field.
func UploadProcessGTE(v int) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldGTE(FieldUploadProcess, v))
}

// UploadProcessLT applies the LT predicate on the "upload_process" field.
func UploadProcessLT(v int) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldLT(FieldUploadProcess, v))
}

// UploadProcessLTE applies the LTE predicate on the "upload_process" field.
func UploadProcessLTE(v int) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldLTE(FieldUploadProcess, v))
}

// DownloadURLEQ applies the EQ predicate on the "download_url" field.
func DownloadURLEQ(v string) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldEQ(FieldDownloadURL, v))
}

// DownloadURLNEQ applies the NEQ predicate on the "download_url" field.
func DownloadURLNEQ(v string) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldNEQ(FieldDownloadURL, v))
}

// DownloadURLIn applies the In predicate on the "download_url" field.
func DownloadURLIn(vs ...string) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldIn(FieldDownloadURL, vs...))
}

// DownloadURLNotIn applies the NotIn predicate on the "download_url" field.
func DownloadURLNotIn(vs ...string) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldNotIn(FieldDownloadURL, vs...))
}

// DownloadURLGT applies the GT predicate on the "download_url" field.
func DownloadURLGT(v string) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldGT(FieldDownloadURL, v))
}

// DownloadURLGTE applies the GTE predicate on the "download_url" field.
func DownloadURLGTE(v string) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldGTE(FieldDownloadURL, v))
}

// DownloadURLLT applies the LT predicate on the "download_url" field.
func DownloadURLLT(v string) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldLT(FieldDownloadURL, v))
}

// DownloadURLLTE applies the LTE predicate on the "download_url" field.
func DownloadURLLTE(v string) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldLTE(FieldDownloadURL, v))
}

// DownloadURLContains applies the Contains predicate on the "download_url" field.
func DownloadURLContains(v string) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldContains(FieldDownloadURL, v))
}

// DownloadURLHasPrefix applies the HasPrefix predicate on the "download_url" field.
func DownloadURLHasPrefix(v string) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldHasPrefix(FieldDownloadURL, v))
}

// DownloadURLHasSuffix applies the HasSuffix predicate on the "download_url" field.
func DownloadURLHasSuffix(v string) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldHasSuffix(FieldDownloadURL, v))
}

// DownloadURLEqualFold applies the EqualFold predicate on the "download_url" field.
func DownloadURLEqualFold(v string) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldEqualFold(FieldDownloadURL, v))
}

// DownloadURLContainsFold applies the ContainsFold predicate on the "download_url" field.
func DownloadURLContainsFold(v string) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldContainsFold(FieldDownloadURL, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.FieldLTE(FieldUpdateTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CarLogUpload) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CarLogUpload) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CarLogUpload) predicate.CarLogUpload {
	return predicate.CarLogUpload(sql.NotPredicates(p))
}
