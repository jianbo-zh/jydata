// Code generated by ent, DO NOT EDIT.

package paytxbill

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the paytxbill type in the database.
	Label = "pay_tx_bill"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTxID holds the string denoting the tx_id field in the database.
	FieldTxID = "tx_id"
	// FieldOrderID holds the string denoting the order_id field in the database.
	FieldOrderID = "order_id"
	// FieldOrderNo holds the string denoting the order_no field in the database.
	FieldOrderNo = "order_no"
	// FieldScenicAreaID holds the string denoting the scenic_area_id field in the database.
	FieldScenicAreaID = "scenic_area_id"
	// FieldScenicAreaName holds the string denoting the scenic_area_name field in the database.
	FieldScenicAreaName = "scenic_area_name"
	// FieldTxType holds the string denoting the tx_type field in the database.
	FieldTxType = "tx_type"
	// FieldTxChannel holds the string denoting the tx_channel field in the database.
	FieldTxChannel = "tx_channel"
	// FieldTxAccount holds the string denoting the tx_account field in the database.
	FieldTxAccount = "tx_account"
	// FieldTxAccountName holds the string denoting the tx_account_name field in the database.
	FieldTxAccountName = "tx_account_name"
	// FieldTxAmount holds the string denoting the tx_amount field in the database.
	FieldTxAmount = "tx_amount"
	// FieldTxTime holds the string denoting the tx_time field in the database.
	FieldTxTime = "tx_time"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// EdgeBackgroundScenicArea holds the string denoting the background_scenic_area edge name in mutations.
	EdgeBackgroundScenicArea = "background_scenic_area"
	// Table holds the table name of the paytxbill in the database.
	Table = "pay_tx_bills"
	// BackgroundScenicAreaTable is the table that holds the background_scenic_area relation/edge.
	BackgroundScenicAreaTable = "pay_tx_bills"
	// BackgroundScenicAreaInverseTable is the table name for the ScenicArea entity.
	// It exists in this package in order to avoid circular dependency with the "scenicarea" package.
	BackgroundScenicAreaInverseTable = "scenic_areas"
	// BackgroundScenicAreaColumn is the table column denoting the background_scenic_area relation/edge.
	BackgroundScenicAreaColumn = "scenic_area_id"
)

// Columns holds all SQL columns for paytxbill fields.
var Columns = []string{
	FieldID,
	FieldTxID,
	FieldOrderID,
	FieldOrderNo,
	FieldScenicAreaID,
	FieldScenicAreaName,
	FieldTxType,
	FieldTxChannel,
	FieldTxAccount,
	FieldTxAccountName,
	FieldTxAmount,
	FieldTxTime,
	FieldRemark,
	FieldCreateTime,
	FieldUpdateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)

// OrderOption defines the ordering options for the PayTxBill queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTxID orders the results by the tx_id field.
func ByTxID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTxID, opts...).ToFunc()
}

// ByOrderID orders the results by the order_id field.
func ByOrderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderID, opts...).ToFunc()
}

// ByOrderNo orders the results by the order_no field.
func ByOrderNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderNo, opts...).ToFunc()
}

// ByScenicAreaID orders the results by the scenic_area_id field.
func ByScenicAreaID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScenicAreaID, opts...).ToFunc()
}

// ByScenicAreaName orders the results by the scenic_area_name field.
func ByScenicAreaName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScenicAreaName, opts...).ToFunc()
}

// ByTxType orders the results by the tx_type field.
func ByTxType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTxType, opts...).ToFunc()
}

// ByTxChannel orders the results by the tx_channel field.
func ByTxChannel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTxChannel, opts...).ToFunc()
}

// ByTxAccount orders the results by the tx_account field.
func ByTxAccount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTxAccount, opts...).ToFunc()
}

// ByTxAccountName orders the results by the tx_account_name field.
func ByTxAccountName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTxAccountName, opts...).ToFunc()
}

// ByTxAmount orders the results by the tx_amount field.
func ByTxAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTxAmount, opts...).ToFunc()
}

// ByTxTime orders the results by the tx_time field.
func ByTxTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTxTime, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByBackgroundScenicAreaField orders the results by background_scenic_area field.
func ByBackgroundScenicAreaField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBackgroundScenicAreaStep(), sql.OrderByField(field, opts...))
	}
}
func newBackgroundScenicAreaStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BackgroundScenicAreaInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BackgroundScenicAreaTable, BackgroundScenicAreaColumn),
	)
}
