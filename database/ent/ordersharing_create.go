// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/order"
	"github.com/jianbo-zh/jydata/database/ent/ordersharing"
	"github.com/jianbo-zh/jydata/database/schema/types"
)

// OrderSharingCreate is the builder for creating a OrderSharing entity.
type OrderSharingCreate struct {
	config
	mutation *OrderSharingMutation
	hooks    []Hook
}

// SetOrderID sets the "order_id" field.
func (osc *OrderSharingCreate) SetOrderID(i int) *OrderSharingCreate {
	osc.mutation.SetOrderID(i)
	return osc
}

// SetSharingNo sets the "sharing_no" field.
func (osc *OrderSharingCreate) SetSharingNo(s string) *OrderSharingCreate {
	osc.mutation.SetSharingNo(s)
	return osc
}

// SetWxSharingID sets the "wx_sharing_id" field.
func (osc *OrderSharingCreate) SetWxSharingID(s string) *OrderSharingCreate {
	osc.mutation.SetWxSharingID(s)
	return osc
}

// SetNillableWxSharingID sets the "wx_sharing_id" field if the given value is not nil.
func (osc *OrderSharingCreate) SetNillableWxSharingID(s *string) *OrderSharingCreate {
	if s != nil {
		osc.SetWxSharingID(*s)
	}
	return osc
}

// SetSharingAmount sets the "sharing_amount" field.
func (osc *OrderSharingCreate) SetSharingAmount(i int) *OrderSharingCreate {
	osc.mutation.SetSharingAmount(i)
	return osc
}

// SetNillableSharingAmount sets the "sharing_amount" field if the given value is not nil.
func (osc *OrderSharingCreate) SetNillableSharingAmount(i *int) *OrderSharingCreate {
	if i != nil {
		osc.SetSharingAmount(*i)
	}
	return osc
}

// SetReceivers sets the "receivers" field.
func (osc *OrderSharingCreate) SetReceivers(tsr []types.OrderSharingReceiver) *OrderSharingCreate {
	osc.mutation.SetReceivers(tsr)
	return osc
}

// SetState sets the "state" field.
func (osc *OrderSharingCreate) SetState(i int) *OrderSharingCreate {
	osc.mutation.SetState(i)
	return osc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (osc *OrderSharingCreate) SetNillableState(i *int) *OrderSharingCreate {
	if i != nil {
		osc.SetState(*i)
	}
	return osc
}

// SetRemark sets the "remark" field.
func (osc *OrderSharingCreate) SetRemark(s string) *OrderSharingCreate {
	osc.mutation.SetRemark(s)
	return osc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (osc *OrderSharingCreate) SetNillableRemark(s *string) *OrderSharingCreate {
	if s != nil {
		osc.SetRemark(*s)
	}
	return osc
}

// SetCreateTime sets the "create_time" field.
func (osc *OrderSharingCreate) SetCreateTime(t time.Time) *OrderSharingCreate {
	osc.mutation.SetCreateTime(t)
	return osc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (osc *OrderSharingCreate) SetNillableCreateTime(t *time.Time) *OrderSharingCreate {
	if t != nil {
		osc.SetCreateTime(*t)
	}
	return osc
}

// SetUpdateTime sets the "update_time" field.
func (osc *OrderSharingCreate) SetUpdateTime(t time.Time) *OrderSharingCreate {
	osc.mutation.SetUpdateTime(t)
	return osc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (osc *OrderSharingCreate) SetNillableUpdateTime(t *time.Time) *OrderSharingCreate {
	if t != nil {
		osc.SetUpdateTime(*t)
	}
	return osc
}

// SetID sets the "id" field.
func (osc *OrderSharingCreate) SetID(i int) *OrderSharingCreate {
	osc.mutation.SetID(i)
	return osc
}

// SetOrder sets the "order" edge to the Order entity.
func (osc *OrderSharingCreate) SetOrder(o *Order) *OrderSharingCreate {
	return osc.SetOrderID(o.ID)
}

// Mutation returns the OrderSharingMutation object of the builder.
func (osc *OrderSharingCreate) Mutation() *OrderSharingMutation {
	return osc.mutation
}

// Save creates the OrderSharing in the database.
func (osc *OrderSharingCreate) Save(ctx context.Context) (*OrderSharing, error) {
	osc.defaults()
	return withHooks(ctx, osc.sqlSave, osc.mutation, osc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (osc *OrderSharingCreate) SaveX(ctx context.Context) *OrderSharing {
	v, err := osc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (osc *OrderSharingCreate) Exec(ctx context.Context) error {
	_, err := osc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osc *OrderSharingCreate) ExecX(ctx context.Context) {
	if err := osc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (osc *OrderSharingCreate) defaults() {
	if _, ok := osc.mutation.WxSharingID(); !ok {
		v := ordersharing.DefaultWxSharingID
		osc.mutation.SetWxSharingID(v)
	}
	if _, ok := osc.mutation.SharingAmount(); !ok {
		v := ordersharing.DefaultSharingAmount
		osc.mutation.SetSharingAmount(v)
	}
	if _, ok := osc.mutation.State(); !ok {
		v := ordersharing.DefaultState
		osc.mutation.SetState(v)
	}
	if _, ok := osc.mutation.Remark(); !ok {
		v := ordersharing.DefaultRemark
		osc.mutation.SetRemark(v)
	}
	if _, ok := osc.mutation.CreateTime(); !ok {
		v := ordersharing.DefaultCreateTime()
		osc.mutation.SetCreateTime(v)
	}
	if _, ok := osc.mutation.UpdateTime(); !ok {
		v := ordersharing.DefaultUpdateTime()
		osc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (osc *OrderSharingCreate) check() error {
	if _, ok := osc.mutation.OrderID(); !ok {
		return &ValidationError{Name: "order_id", err: errors.New(`ent: missing required field "OrderSharing.order_id"`)}
	}
	if _, ok := osc.mutation.SharingNo(); !ok {
		return &ValidationError{Name: "sharing_no", err: errors.New(`ent: missing required field "OrderSharing.sharing_no"`)}
	}
	if _, ok := osc.mutation.WxSharingID(); !ok {
		return &ValidationError{Name: "wx_sharing_id", err: errors.New(`ent: missing required field "OrderSharing.wx_sharing_id"`)}
	}
	if _, ok := osc.mutation.SharingAmount(); !ok {
		return &ValidationError{Name: "sharing_amount", err: errors.New(`ent: missing required field "OrderSharing.sharing_amount"`)}
	}
	if _, ok := osc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "OrderSharing.state"`)}
	}
	if _, ok := osc.mutation.Remark(); !ok {
		return &ValidationError{Name: "remark", err: errors.New(`ent: missing required field "OrderSharing.remark"`)}
	}
	if _, ok := osc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "OrderSharing.create_time"`)}
	}
	if _, ok := osc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "OrderSharing.update_time"`)}
	}
	if len(osc.mutation.OrderIDs()) == 0 {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required edge "OrderSharing.order"`)}
	}
	return nil
}

func (osc *OrderSharingCreate) sqlSave(ctx context.Context) (*OrderSharing, error) {
	if err := osc.check(); err != nil {
		return nil, err
	}
	_node, _spec := osc.createSpec()
	if err := sqlgraph.CreateNode(ctx, osc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	osc.mutation.id = &_node.ID
	osc.mutation.done = true
	return _node, nil
}

func (osc *OrderSharingCreate) createSpec() (*OrderSharing, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderSharing{config: osc.config}
		_spec = sqlgraph.NewCreateSpec(ordersharing.Table, sqlgraph.NewFieldSpec(ordersharing.FieldID, field.TypeInt))
	)
	if id, ok := osc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := osc.mutation.SharingNo(); ok {
		_spec.SetField(ordersharing.FieldSharingNo, field.TypeString, value)
		_node.SharingNo = value
	}
	if value, ok := osc.mutation.WxSharingID(); ok {
		_spec.SetField(ordersharing.FieldWxSharingID, field.TypeString, value)
		_node.WxSharingID = value
	}
	if value, ok := osc.mutation.SharingAmount(); ok {
		_spec.SetField(ordersharing.FieldSharingAmount, field.TypeInt, value)
		_node.SharingAmount = value
	}
	if value, ok := osc.mutation.Receivers(); ok {
		_spec.SetField(ordersharing.FieldReceivers, field.TypeJSON, value)
		_node.Receivers = value
	}
	if value, ok := osc.mutation.State(); ok {
		_spec.SetField(ordersharing.FieldState, field.TypeInt, value)
		_node.State = value
	}
	if value, ok := osc.mutation.Remark(); ok {
		_spec.SetField(ordersharing.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := osc.mutation.CreateTime(); ok {
		_spec.SetField(ordersharing.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := osc.mutation.UpdateTime(); ok {
		_spec.SetField(ordersharing.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if nodes := osc.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   ordersharing.OrderTable,
			Columns: []string{ordersharing.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OrderSharingCreateBulk is the builder for creating many OrderSharing entities in bulk.
type OrderSharingCreateBulk struct {
	config
	err      error
	builders []*OrderSharingCreate
}

// Save creates the OrderSharing entities in the database.
func (oscb *OrderSharingCreateBulk) Save(ctx context.Context) ([]*OrderSharing, error) {
	if oscb.err != nil {
		return nil, oscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(oscb.builders))
	nodes := make([]*OrderSharing, len(oscb.builders))
	mutators := make([]Mutator, len(oscb.builders))
	for i := range oscb.builders {
		func(i int, root context.Context) {
			builder := oscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderSharingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oscb *OrderSharingCreateBulk) SaveX(ctx context.Context) []*OrderSharing {
	v, err := oscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oscb *OrderSharingCreateBulk) Exec(ctx context.Context) error {
	_, err := oscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oscb *OrderSharingCreateBulk) ExecX(ctx context.Context) {
	if err := oscb.Exec(ctx); err != nil {
		panic(err)
	}
}
