// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"github.com/jianbo-zh/jydata/database/ent/profitreceiver"
	"github.com/jianbo-zh/jydata/database/ent/scenicarea"
)

// ProfitReceiverUpdate is the builder for updating ProfitReceiver entities.
type ProfitReceiverUpdate struct {
	config
	hooks    []Hook
	mutation *ProfitReceiverMutation
}

// Where appends a list predicates to the ProfitReceiverUpdate builder.
func (pru *ProfitReceiverUpdate) Where(ps ...predicate.ProfitReceiver) *ProfitReceiverUpdate {
	pru.mutation.Where(ps...)
	return pru
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (pru *ProfitReceiverUpdate) SetScenicAreaID(i int) *ProfitReceiverUpdate {
	pru.mutation.SetScenicAreaID(i)
	return pru
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (pru *ProfitReceiverUpdate) SetNillableScenicAreaID(i *int) *ProfitReceiverUpdate {
	if i != nil {
		pru.SetScenicAreaID(*i)
	}
	return pru
}

// SetMchID sets the "mch_id" field.
func (pru *ProfitReceiverUpdate) SetMchID(s string) *ProfitReceiverUpdate {
	pru.mutation.SetMchID(s)
	return pru
}

// SetNillableMchID sets the "mch_id" field if the given value is not nil.
func (pru *ProfitReceiverUpdate) SetNillableMchID(s *string) *ProfitReceiverUpdate {
	if s != nil {
		pru.SetMchID(*s)
	}
	return pru
}

// SetPhone sets the "phone" field.
func (pru *ProfitReceiverUpdate) SetPhone(s string) *ProfitReceiverUpdate {
	pru.mutation.SetPhone(s)
	return pru
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (pru *ProfitReceiverUpdate) SetNillablePhone(s *string) *ProfitReceiverUpdate {
	if s != nil {
		pru.SetPhone(*s)
	}
	return pru
}

// SetReceiverType sets the "receiver_type" field.
func (pru *ProfitReceiverUpdate) SetReceiverType(i int) *ProfitReceiverUpdate {
	pru.mutation.ResetReceiverType()
	pru.mutation.SetReceiverType(i)
	return pru
}

// SetNillableReceiverType sets the "receiver_type" field if the given value is not nil.
func (pru *ProfitReceiverUpdate) SetNillableReceiverType(i *int) *ProfitReceiverUpdate {
	if i != nil {
		pru.SetReceiverType(*i)
	}
	return pru
}

// AddReceiverType adds i to the "receiver_type" field.
func (pru *ProfitReceiverUpdate) AddReceiverType(i int) *ProfitReceiverUpdate {
	pru.mutation.AddReceiverType(i)
	return pru
}

// SetReceiverAccount sets the "receiver_account" field.
func (pru *ProfitReceiverUpdate) SetReceiverAccount(s string) *ProfitReceiverUpdate {
	pru.mutation.SetReceiverAccount(s)
	return pru
}

// SetNillableReceiverAccount sets the "receiver_account" field if the given value is not nil.
func (pru *ProfitReceiverUpdate) SetNillableReceiverAccount(s *string) *ProfitReceiverUpdate {
	if s != nil {
		pru.SetReceiverAccount(*s)
	}
	return pru
}

// SetReceiverName sets the "receiver_name" field.
func (pru *ProfitReceiverUpdate) SetReceiverName(s string) *ProfitReceiverUpdate {
	pru.mutation.SetReceiverName(s)
	return pru
}

// SetNillableReceiverName sets the "receiver_name" field if the given value is not nil.
func (pru *ProfitReceiverUpdate) SetNillableReceiverName(s *string) *ProfitReceiverUpdate {
	if s != nil {
		pru.SetReceiverName(*s)
	}
	return pru
}

// SetSharingRatio sets the "sharing_ratio" field.
func (pru *ProfitReceiverUpdate) SetSharingRatio(f float64) *ProfitReceiverUpdate {
	pru.mutation.ResetSharingRatio()
	pru.mutation.SetSharingRatio(f)
	return pru
}

// SetNillableSharingRatio sets the "sharing_ratio" field if the given value is not nil.
func (pru *ProfitReceiverUpdate) SetNillableSharingRatio(f *float64) *ProfitReceiverUpdate {
	if f != nil {
		pru.SetSharingRatio(*f)
	}
	return pru
}

// AddSharingRatio adds f to the "sharing_ratio" field.
func (pru *ProfitReceiverUpdate) AddSharingRatio(f float64) *ProfitReceiverUpdate {
	pru.mutation.AddSharingRatio(f)
	return pru
}

// SetState sets the "state" field.
func (pru *ProfitReceiverUpdate) SetState(i int) *ProfitReceiverUpdate {
	pru.mutation.ResetState()
	pru.mutation.SetState(i)
	return pru
}

// SetNillableState sets the "state" field if the given value is not nil.
func (pru *ProfitReceiverUpdate) SetNillableState(i *int) *ProfitReceiverUpdate {
	if i != nil {
		pru.SetState(*i)
	}
	return pru
}

// AddState adds i to the "state" field.
func (pru *ProfitReceiverUpdate) AddState(i int) *ProfitReceiverUpdate {
	pru.mutation.AddState(i)
	return pru
}

// SetUpdateTime sets the "update_time" field.
func (pru *ProfitReceiverUpdate) SetUpdateTime(t time.Time) *ProfitReceiverUpdate {
	pru.mutation.SetUpdateTime(t)
	return pru
}

// SetBackgroundScenicAreaID sets the "background_scenic_area" edge to the ScenicArea entity by ID.
func (pru *ProfitReceiverUpdate) SetBackgroundScenicAreaID(id int) *ProfitReceiverUpdate {
	pru.mutation.SetBackgroundScenicAreaID(id)
	return pru
}

// SetBackgroundScenicArea sets the "background_scenic_area" edge to the ScenicArea entity.
func (pru *ProfitReceiverUpdate) SetBackgroundScenicArea(s *ScenicArea) *ProfitReceiverUpdate {
	return pru.SetBackgroundScenicAreaID(s.ID)
}

// Mutation returns the ProfitReceiverMutation object of the builder.
func (pru *ProfitReceiverUpdate) Mutation() *ProfitReceiverMutation {
	return pru.mutation
}

// ClearBackgroundScenicArea clears the "background_scenic_area" edge to the ScenicArea entity.
func (pru *ProfitReceiverUpdate) ClearBackgroundScenicArea() *ProfitReceiverUpdate {
	pru.mutation.ClearBackgroundScenicArea()
	return pru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pru *ProfitReceiverUpdate) Save(ctx context.Context) (int, error) {
	pru.defaults()
	return withHooks(ctx, pru.sqlSave, pru.mutation, pru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pru *ProfitReceiverUpdate) SaveX(ctx context.Context) int {
	affected, err := pru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pru *ProfitReceiverUpdate) Exec(ctx context.Context) error {
	_, err := pru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pru *ProfitReceiverUpdate) ExecX(ctx context.Context) {
	if err := pru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pru *ProfitReceiverUpdate) defaults() {
	if _, ok := pru.mutation.UpdateTime(); !ok {
		v := profitreceiver.UpdateDefaultUpdateTime()
		pru.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pru *ProfitReceiverUpdate) check() error {
	if pru.mutation.BackgroundScenicAreaCleared() && len(pru.mutation.BackgroundScenicAreaIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProfitReceiver.background_scenic_area"`)
	}
	return nil
}

func (pru *ProfitReceiverUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(profitreceiver.Table, profitreceiver.Columns, sqlgraph.NewFieldSpec(profitreceiver.FieldID, field.TypeInt))
	if ps := pru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pru.mutation.MchID(); ok {
		_spec.SetField(profitreceiver.FieldMchID, field.TypeString, value)
	}
	if value, ok := pru.mutation.Phone(); ok {
		_spec.SetField(profitreceiver.FieldPhone, field.TypeString, value)
	}
	if value, ok := pru.mutation.ReceiverType(); ok {
		_spec.SetField(profitreceiver.FieldReceiverType, field.TypeInt, value)
	}
	if value, ok := pru.mutation.AddedReceiverType(); ok {
		_spec.AddField(profitreceiver.FieldReceiverType, field.TypeInt, value)
	}
	if value, ok := pru.mutation.ReceiverAccount(); ok {
		_spec.SetField(profitreceiver.FieldReceiverAccount, field.TypeString, value)
	}
	if value, ok := pru.mutation.ReceiverName(); ok {
		_spec.SetField(profitreceiver.FieldReceiverName, field.TypeString, value)
	}
	if value, ok := pru.mutation.SharingRatio(); ok {
		_spec.SetField(profitreceiver.FieldSharingRatio, field.TypeFloat64, value)
	}
	if value, ok := pru.mutation.AddedSharingRatio(); ok {
		_spec.AddField(profitreceiver.FieldSharingRatio, field.TypeFloat64, value)
	}
	if value, ok := pru.mutation.State(); ok {
		_spec.SetField(profitreceiver.FieldState, field.TypeInt, value)
	}
	if value, ok := pru.mutation.AddedState(); ok {
		_spec.AddField(profitreceiver.FieldState, field.TypeInt, value)
	}
	if value, ok := pru.mutation.UpdateTime(); ok {
		_spec.SetField(profitreceiver.FieldUpdateTime, field.TypeTime, value)
	}
	if pru.mutation.BackgroundScenicAreaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   profitreceiver.BackgroundScenicAreaTable,
			Columns: []string{profitreceiver.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pru.mutation.BackgroundScenicAreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   profitreceiver.BackgroundScenicAreaTable,
			Columns: []string{profitreceiver.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{profitreceiver.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pru.mutation.done = true
	return n, nil
}

// ProfitReceiverUpdateOne is the builder for updating a single ProfitReceiver entity.
type ProfitReceiverUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProfitReceiverMutation
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (pruo *ProfitReceiverUpdateOne) SetScenicAreaID(i int) *ProfitReceiverUpdateOne {
	pruo.mutation.SetScenicAreaID(i)
	return pruo
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (pruo *ProfitReceiverUpdateOne) SetNillableScenicAreaID(i *int) *ProfitReceiverUpdateOne {
	if i != nil {
		pruo.SetScenicAreaID(*i)
	}
	return pruo
}

// SetMchID sets the "mch_id" field.
func (pruo *ProfitReceiverUpdateOne) SetMchID(s string) *ProfitReceiverUpdateOne {
	pruo.mutation.SetMchID(s)
	return pruo
}

// SetNillableMchID sets the "mch_id" field if the given value is not nil.
func (pruo *ProfitReceiverUpdateOne) SetNillableMchID(s *string) *ProfitReceiverUpdateOne {
	if s != nil {
		pruo.SetMchID(*s)
	}
	return pruo
}

// SetPhone sets the "phone" field.
func (pruo *ProfitReceiverUpdateOne) SetPhone(s string) *ProfitReceiverUpdateOne {
	pruo.mutation.SetPhone(s)
	return pruo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (pruo *ProfitReceiverUpdateOne) SetNillablePhone(s *string) *ProfitReceiverUpdateOne {
	if s != nil {
		pruo.SetPhone(*s)
	}
	return pruo
}

// SetReceiverType sets the "receiver_type" field.
func (pruo *ProfitReceiverUpdateOne) SetReceiverType(i int) *ProfitReceiverUpdateOne {
	pruo.mutation.ResetReceiverType()
	pruo.mutation.SetReceiverType(i)
	return pruo
}

// SetNillableReceiverType sets the "receiver_type" field if the given value is not nil.
func (pruo *ProfitReceiverUpdateOne) SetNillableReceiverType(i *int) *ProfitReceiverUpdateOne {
	if i != nil {
		pruo.SetReceiverType(*i)
	}
	return pruo
}

// AddReceiverType adds i to the "receiver_type" field.
func (pruo *ProfitReceiverUpdateOne) AddReceiverType(i int) *ProfitReceiverUpdateOne {
	pruo.mutation.AddReceiverType(i)
	return pruo
}

// SetReceiverAccount sets the "receiver_account" field.
func (pruo *ProfitReceiverUpdateOne) SetReceiverAccount(s string) *ProfitReceiverUpdateOne {
	pruo.mutation.SetReceiverAccount(s)
	return pruo
}

// SetNillableReceiverAccount sets the "receiver_account" field if the given value is not nil.
func (pruo *ProfitReceiverUpdateOne) SetNillableReceiverAccount(s *string) *ProfitReceiverUpdateOne {
	if s != nil {
		pruo.SetReceiverAccount(*s)
	}
	return pruo
}

// SetReceiverName sets the "receiver_name" field.
func (pruo *ProfitReceiverUpdateOne) SetReceiverName(s string) *ProfitReceiverUpdateOne {
	pruo.mutation.SetReceiverName(s)
	return pruo
}

// SetNillableReceiverName sets the "receiver_name" field if the given value is not nil.
func (pruo *ProfitReceiverUpdateOne) SetNillableReceiverName(s *string) *ProfitReceiverUpdateOne {
	if s != nil {
		pruo.SetReceiverName(*s)
	}
	return pruo
}

// SetSharingRatio sets the "sharing_ratio" field.
func (pruo *ProfitReceiverUpdateOne) SetSharingRatio(f float64) *ProfitReceiverUpdateOne {
	pruo.mutation.ResetSharingRatio()
	pruo.mutation.SetSharingRatio(f)
	return pruo
}

// SetNillableSharingRatio sets the "sharing_ratio" field if the given value is not nil.
func (pruo *ProfitReceiverUpdateOne) SetNillableSharingRatio(f *float64) *ProfitReceiverUpdateOne {
	if f != nil {
		pruo.SetSharingRatio(*f)
	}
	return pruo
}

// AddSharingRatio adds f to the "sharing_ratio" field.
func (pruo *ProfitReceiverUpdateOne) AddSharingRatio(f float64) *ProfitReceiverUpdateOne {
	pruo.mutation.AddSharingRatio(f)
	return pruo
}

// SetState sets the "state" field.
func (pruo *ProfitReceiverUpdateOne) SetState(i int) *ProfitReceiverUpdateOne {
	pruo.mutation.ResetState()
	pruo.mutation.SetState(i)
	return pruo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (pruo *ProfitReceiverUpdateOne) SetNillableState(i *int) *ProfitReceiverUpdateOne {
	if i != nil {
		pruo.SetState(*i)
	}
	return pruo
}

// AddState adds i to the "state" field.
func (pruo *ProfitReceiverUpdateOne) AddState(i int) *ProfitReceiverUpdateOne {
	pruo.mutation.AddState(i)
	return pruo
}

// SetUpdateTime sets the "update_time" field.
func (pruo *ProfitReceiverUpdateOne) SetUpdateTime(t time.Time) *ProfitReceiverUpdateOne {
	pruo.mutation.SetUpdateTime(t)
	return pruo
}

// SetBackgroundScenicAreaID sets the "background_scenic_area" edge to the ScenicArea entity by ID.
func (pruo *ProfitReceiverUpdateOne) SetBackgroundScenicAreaID(id int) *ProfitReceiverUpdateOne {
	pruo.mutation.SetBackgroundScenicAreaID(id)
	return pruo
}

// SetBackgroundScenicArea sets the "background_scenic_area" edge to the ScenicArea entity.
func (pruo *ProfitReceiverUpdateOne) SetBackgroundScenicArea(s *ScenicArea) *ProfitReceiverUpdateOne {
	return pruo.SetBackgroundScenicAreaID(s.ID)
}

// Mutation returns the ProfitReceiverMutation object of the builder.
func (pruo *ProfitReceiverUpdateOne) Mutation() *ProfitReceiverMutation {
	return pruo.mutation
}

// ClearBackgroundScenicArea clears the "background_scenic_area" edge to the ScenicArea entity.
func (pruo *ProfitReceiverUpdateOne) ClearBackgroundScenicArea() *ProfitReceiverUpdateOne {
	pruo.mutation.ClearBackgroundScenicArea()
	return pruo
}

// Where appends a list predicates to the ProfitReceiverUpdate builder.
func (pruo *ProfitReceiverUpdateOne) Where(ps ...predicate.ProfitReceiver) *ProfitReceiverUpdateOne {
	pruo.mutation.Where(ps...)
	return pruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pruo *ProfitReceiverUpdateOne) Select(field string, fields ...string) *ProfitReceiverUpdateOne {
	pruo.fields = append([]string{field}, fields...)
	return pruo
}

// Save executes the query and returns the updated ProfitReceiver entity.
func (pruo *ProfitReceiverUpdateOne) Save(ctx context.Context) (*ProfitReceiver, error) {
	pruo.defaults()
	return withHooks(ctx, pruo.sqlSave, pruo.mutation, pruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pruo *ProfitReceiverUpdateOne) SaveX(ctx context.Context) *ProfitReceiver {
	node, err := pruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pruo *ProfitReceiverUpdateOne) Exec(ctx context.Context) error {
	_, err := pruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pruo *ProfitReceiverUpdateOne) ExecX(ctx context.Context) {
	if err := pruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pruo *ProfitReceiverUpdateOne) defaults() {
	if _, ok := pruo.mutation.UpdateTime(); !ok {
		v := profitreceiver.UpdateDefaultUpdateTime()
		pruo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pruo *ProfitReceiverUpdateOne) check() error {
	if pruo.mutation.BackgroundScenicAreaCleared() && len(pruo.mutation.BackgroundScenicAreaIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProfitReceiver.background_scenic_area"`)
	}
	return nil
}

func (pruo *ProfitReceiverUpdateOne) sqlSave(ctx context.Context) (_node *ProfitReceiver, err error) {
	if err := pruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(profitreceiver.Table, profitreceiver.Columns, sqlgraph.NewFieldSpec(profitreceiver.FieldID, field.TypeInt))
	id, ok := pruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProfitReceiver.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, profitreceiver.FieldID)
		for _, f := range fields {
			if !profitreceiver.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != profitreceiver.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pruo.mutation.MchID(); ok {
		_spec.SetField(profitreceiver.FieldMchID, field.TypeString, value)
	}
	if value, ok := pruo.mutation.Phone(); ok {
		_spec.SetField(profitreceiver.FieldPhone, field.TypeString, value)
	}
	if value, ok := pruo.mutation.ReceiverType(); ok {
		_spec.SetField(profitreceiver.FieldReceiverType, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.AddedReceiverType(); ok {
		_spec.AddField(profitreceiver.FieldReceiverType, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.ReceiverAccount(); ok {
		_spec.SetField(profitreceiver.FieldReceiverAccount, field.TypeString, value)
	}
	if value, ok := pruo.mutation.ReceiverName(); ok {
		_spec.SetField(profitreceiver.FieldReceiverName, field.TypeString, value)
	}
	if value, ok := pruo.mutation.SharingRatio(); ok {
		_spec.SetField(profitreceiver.FieldSharingRatio, field.TypeFloat64, value)
	}
	if value, ok := pruo.mutation.AddedSharingRatio(); ok {
		_spec.AddField(profitreceiver.FieldSharingRatio, field.TypeFloat64, value)
	}
	if value, ok := pruo.mutation.State(); ok {
		_spec.SetField(profitreceiver.FieldState, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.AddedState(); ok {
		_spec.AddField(profitreceiver.FieldState, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.UpdateTime(); ok {
		_spec.SetField(profitreceiver.FieldUpdateTime, field.TypeTime, value)
	}
	if pruo.mutation.BackgroundScenicAreaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   profitreceiver.BackgroundScenicAreaTable,
			Columns: []string{profitreceiver.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pruo.mutation.BackgroundScenicAreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   profitreceiver.BackgroundScenicAreaTable,
			Columns: []string{profitreceiver.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProfitReceiver{config: pruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{profitreceiver.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pruo.mutation.done = true
	return _node, nil
}
