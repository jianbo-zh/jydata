// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/feedback"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FeedbackUpdate is the builder for updating Feedback entities.
type FeedbackUpdate struct {
	config
	hooks    []Hook
	mutation *FeedbackMutation
}

// Where appends a list predicates to the FeedbackUpdate builder.
func (fu *FeedbackUpdate) Where(ps ...predicate.Feedback) *FeedbackUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetUserID sets the "user_id" field.
func (fu *FeedbackUpdate) SetUserID(i int) *FeedbackUpdate {
	fu.mutation.ResetUserID()
	fu.mutation.SetUserID(i)
	return fu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (fu *FeedbackUpdate) SetNillableUserID(i *int) *FeedbackUpdate {
	if i != nil {
		fu.SetUserID(*i)
	}
	return fu
}

// AddUserID adds i to the "user_id" field.
func (fu *FeedbackUpdate) AddUserID(i int) *FeedbackUpdate {
	fu.mutation.AddUserID(i)
	return fu
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (fu *FeedbackUpdate) SetScenicAreaID(i int) *FeedbackUpdate {
	fu.mutation.ResetScenicAreaID()
	fu.mutation.SetScenicAreaID(i)
	return fu
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (fu *FeedbackUpdate) SetNillableScenicAreaID(i *int) *FeedbackUpdate {
	if i != nil {
		fu.SetScenicAreaID(*i)
	}
	return fu
}

// AddScenicAreaID adds i to the "scenic_area_id" field.
func (fu *FeedbackUpdate) AddScenicAreaID(i int) *FeedbackUpdate {
	fu.mutation.AddScenicAreaID(i)
	return fu
}

// SetContent sets the "content" field.
func (fu *FeedbackUpdate) SetContent(s string) *FeedbackUpdate {
	fu.mutation.SetContent(s)
	return fu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (fu *FeedbackUpdate) SetNillableContent(s *string) *FeedbackUpdate {
	if s != nil {
		fu.SetContent(*s)
	}
	return fu
}

// SetState sets the "state" field.
func (fu *FeedbackUpdate) SetState(i int) *FeedbackUpdate {
	fu.mutation.ResetState()
	fu.mutation.SetState(i)
	return fu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (fu *FeedbackUpdate) SetNillableState(i *int) *FeedbackUpdate {
	if i != nil {
		fu.SetState(*i)
	}
	return fu
}

// AddState adds i to the "state" field.
func (fu *FeedbackUpdate) AddState(i int) *FeedbackUpdate {
	fu.mutation.AddState(i)
	return fu
}

// SetUpdateTime sets the "update_time" field.
func (fu *FeedbackUpdate) SetUpdateTime(t time.Time) *FeedbackUpdate {
	fu.mutation.SetUpdateTime(t)
	return fu
}

// Mutation returns the FeedbackMutation object of the builder.
func (fu *FeedbackUpdate) Mutation() *FeedbackMutation {
	return fu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FeedbackUpdate) Save(ctx context.Context) (int, error) {
	fu.defaults()
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FeedbackUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FeedbackUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FeedbackUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fu *FeedbackUpdate) defaults() {
	if _, ok := fu.mutation.UpdateTime(); !ok {
		v := feedback.UpdateDefaultUpdateTime()
		fu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *FeedbackUpdate) check() error {
	if v, ok := fu.mutation.Content(); ok {
		if err := feedback.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "Feedback.content": %w`, err)}
		}
	}
	return nil
}

func (fu *FeedbackUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(feedback.Table, feedback.Columns, sqlgraph.NewFieldSpec(feedback.FieldID, field.TypeInt))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.UserID(); ok {
		_spec.SetField(feedback.FieldUserID, field.TypeInt, value)
	}
	if value, ok := fu.mutation.AddedUserID(); ok {
		_spec.AddField(feedback.FieldUserID, field.TypeInt, value)
	}
	if value, ok := fu.mutation.ScenicAreaID(); ok {
		_spec.SetField(feedback.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := fu.mutation.AddedScenicAreaID(); ok {
		_spec.AddField(feedback.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := fu.mutation.Content(); ok {
		_spec.SetField(feedback.FieldContent, field.TypeString, value)
	}
	if value, ok := fu.mutation.State(); ok {
		_spec.SetField(feedback.FieldState, field.TypeInt, value)
	}
	if value, ok := fu.mutation.AddedState(); ok {
		_spec.AddField(feedback.FieldState, field.TypeInt, value)
	}
	if value, ok := fu.mutation.UpdateTime(); ok {
		_spec.SetField(feedback.FieldUpdateTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feedback.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FeedbackUpdateOne is the builder for updating a single Feedback entity.
type FeedbackUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FeedbackMutation
}

// SetUserID sets the "user_id" field.
func (fuo *FeedbackUpdateOne) SetUserID(i int) *FeedbackUpdateOne {
	fuo.mutation.ResetUserID()
	fuo.mutation.SetUserID(i)
	return fuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (fuo *FeedbackUpdateOne) SetNillableUserID(i *int) *FeedbackUpdateOne {
	if i != nil {
		fuo.SetUserID(*i)
	}
	return fuo
}

// AddUserID adds i to the "user_id" field.
func (fuo *FeedbackUpdateOne) AddUserID(i int) *FeedbackUpdateOne {
	fuo.mutation.AddUserID(i)
	return fuo
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (fuo *FeedbackUpdateOne) SetScenicAreaID(i int) *FeedbackUpdateOne {
	fuo.mutation.ResetScenicAreaID()
	fuo.mutation.SetScenicAreaID(i)
	return fuo
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (fuo *FeedbackUpdateOne) SetNillableScenicAreaID(i *int) *FeedbackUpdateOne {
	if i != nil {
		fuo.SetScenicAreaID(*i)
	}
	return fuo
}

// AddScenicAreaID adds i to the "scenic_area_id" field.
func (fuo *FeedbackUpdateOne) AddScenicAreaID(i int) *FeedbackUpdateOne {
	fuo.mutation.AddScenicAreaID(i)
	return fuo
}

// SetContent sets the "content" field.
func (fuo *FeedbackUpdateOne) SetContent(s string) *FeedbackUpdateOne {
	fuo.mutation.SetContent(s)
	return fuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (fuo *FeedbackUpdateOne) SetNillableContent(s *string) *FeedbackUpdateOne {
	if s != nil {
		fuo.SetContent(*s)
	}
	return fuo
}

// SetState sets the "state" field.
func (fuo *FeedbackUpdateOne) SetState(i int) *FeedbackUpdateOne {
	fuo.mutation.ResetState()
	fuo.mutation.SetState(i)
	return fuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (fuo *FeedbackUpdateOne) SetNillableState(i *int) *FeedbackUpdateOne {
	if i != nil {
		fuo.SetState(*i)
	}
	return fuo
}

// AddState adds i to the "state" field.
func (fuo *FeedbackUpdateOne) AddState(i int) *FeedbackUpdateOne {
	fuo.mutation.AddState(i)
	return fuo
}

// SetUpdateTime sets the "update_time" field.
func (fuo *FeedbackUpdateOne) SetUpdateTime(t time.Time) *FeedbackUpdateOne {
	fuo.mutation.SetUpdateTime(t)
	return fuo
}

// Mutation returns the FeedbackMutation object of the builder.
func (fuo *FeedbackUpdateOne) Mutation() *FeedbackMutation {
	return fuo.mutation
}

// Where appends a list predicates to the FeedbackUpdate builder.
func (fuo *FeedbackUpdateOne) Where(ps ...predicate.Feedback) *FeedbackUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FeedbackUpdateOne) Select(field string, fields ...string) *FeedbackUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Feedback entity.
func (fuo *FeedbackUpdateOne) Save(ctx context.Context) (*Feedback, error) {
	fuo.defaults()
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FeedbackUpdateOne) SaveX(ctx context.Context) *Feedback {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FeedbackUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FeedbackUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuo *FeedbackUpdateOne) defaults() {
	if _, ok := fuo.mutation.UpdateTime(); !ok {
		v := feedback.UpdateDefaultUpdateTime()
		fuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FeedbackUpdateOne) check() error {
	if v, ok := fuo.mutation.Content(); ok {
		if err := feedback.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "Feedback.content": %w`, err)}
		}
	}
	return nil
}

func (fuo *FeedbackUpdateOne) sqlSave(ctx context.Context) (_node *Feedback, err error) {
	if err := fuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(feedback.Table, feedback.Columns, sqlgraph.NewFieldSpec(feedback.FieldID, field.TypeInt))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Feedback.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, feedback.FieldID)
		for _, f := range fields {
			if !feedback.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != feedback.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.UserID(); ok {
		_spec.SetField(feedback.FieldUserID, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.AddedUserID(); ok {
		_spec.AddField(feedback.FieldUserID, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.ScenicAreaID(); ok {
		_spec.SetField(feedback.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.AddedScenicAreaID(); ok {
		_spec.AddField(feedback.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.Content(); ok {
		_spec.SetField(feedback.FieldContent, field.TypeString, value)
	}
	if value, ok := fuo.mutation.State(); ok {
		_spec.SetField(feedback.FieldState, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.AddedState(); ok {
		_spec.AddField(feedback.FieldState, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.UpdateTime(); ok {
		_spec.SetField(feedback.FieldUpdateTime, field.TypeTime, value)
	}
	_node = &Feedback{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feedback.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
