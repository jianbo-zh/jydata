// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/account"
	"github.com/jianbo-zh/jydata/database/ent/billingstrategy"
	"github.com/jianbo-zh/jydata/database/ent/car"
	"github.com/jianbo-zh/jydata/database/ent/carconfig"
	"github.com/jianbo-zh/jydata/database/ent/carsoperatelog"
	"github.com/jianbo-zh/jydata/database/ent/mapversion"
	"github.com/jianbo-zh/jydata/database/ent/order"
	"github.com/jianbo-zh/jydata/database/ent/paytxbill"
	"github.com/jianbo-zh/jydata/database/ent/poi"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"github.com/jianbo-zh/jydata/database/ent/profitreceiver"
	"github.com/jianbo-zh/jydata/database/ent/scenicarea"
	"github.com/jianbo-zh/jydata/database/ent/scenicareamap"
	"github.com/jianbo-zh/jydata/database/ent/statshourlycar"
	"github.com/jianbo-zh/jydata/database/ent/user"
)

// ScenicAreaQuery is the builder for querying ScenicArea entities.
type ScenicAreaQuery struct {
	config
	ctx                      *QueryContext
	order                    []scenicarea.OrderOption
	inters                   []Interceptor
	predicates               []predicate.ScenicArea
	withCars                 *CarQuery
	withAccounts             *AccountQuery
	withPois                 *PoiQuery
	withProfitReceivers      *ProfitReceiverQuery
	withPayTxBills           *PayTxBillQuery
	withCarBillingStrategies *BillingStrategyQuery
	withMap                  *ScenicAreaMapQuery
	withMapVersions          *MapVersionQuery
	withUsers                *UserQuery
	withOrders               *OrderQuery
	withCarOperateLogs       *CarsOperateLogQuery
	withStatsHourlyCar       *StatsHourlyCarQuery
	withConfigFiles          *CarConfigQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ScenicAreaQuery builder.
func (saq *ScenicAreaQuery) Where(ps ...predicate.ScenicArea) *ScenicAreaQuery {
	saq.predicates = append(saq.predicates, ps...)
	return saq
}

// Limit the number of records to be returned by this query.
func (saq *ScenicAreaQuery) Limit(limit int) *ScenicAreaQuery {
	saq.ctx.Limit = &limit
	return saq
}

// Offset to start from.
func (saq *ScenicAreaQuery) Offset(offset int) *ScenicAreaQuery {
	saq.ctx.Offset = &offset
	return saq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (saq *ScenicAreaQuery) Unique(unique bool) *ScenicAreaQuery {
	saq.ctx.Unique = &unique
	return saq
}

// Order specifies how the records should be ordered.
func (saq *ScenicAreaQuery) Order(o ...scenicarea.OrderOption) *ScenicAreaQuery {
	saq.order = append(saq.order, o...)
	return saq
}

// QueryCars chains the current query on the "cars" edge.
func (saq *ScenicAreaQuery) QueryCars() *CarQuery {
	query := (&CarClient{config: saq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := saq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := saq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(scenicarea.Table, scenicarea.FieldID, selector),
			sqlgraph.To(car.Table, car.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, scenicarea.CarsTable, scenicarea.CarsColumn),
		)
		fromU = sqlgraph.SetNeighbors(saq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAccounts chains the current query on the "accounts" edge.
func (saq *ScenicAreaQuery) QueryAccounts() *AccountQuery {
	query := (&AccountClient{config: saq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := saq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := saq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(scenicarea.Table, scenicarea.FieldID, selector),
			sqlgraph.To(account.Table, account.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, scenicarea.AccountsTable, scenicarea.AccountsColumn),
		)
		fromU = sqlgraph.SetNeighbors(saq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPois chains the current query on the "pois" edge.
func (saq *ScenicAreaQuery) QueryPois() *PoiQuery {
	query := (&PoiClient{config: saq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := saq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := saq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(scenicarea.Table, scenicarea.FieldID, selector),
			sqlgraph.To(poi.Table, poi.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, scenicarea.PoisTable, scenicarea.PoisColumn),
		)
		fromU = sqlgraph.SetNeighbors(saq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProfitReceivers chains the current query on the "profit_receivers" edge.
func (saq *ScenicAreaQuery) QueryProfitReceivers() *ProfitReceiverQuery {
	query := (&ProfitReceiverClient{config: saq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := saq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := saq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(scenicarea.Table, scenicarea.FieldID, selector),
			sqlgraph.To(profitreceiver.Table, profitreceiver.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, scenicarea.ProfitReceiversTable, scenicarea.ProfitReceiversColumn),
		)
		fromU = sqlgraph.SetNeighbors(saq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPayTxBills chains the current query on the "pay_tx_bills" edge.
func (saq *ScenicAreaQuery) QueryPayTxBills() *PayTxBillQuery {
	query := (&PayTxBillClient{config: saq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := saq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := saq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(scenicarea.Table, scenicarea.FieldID, selector),
			sqlgraph.To(paytxbill.Table, paytxbill.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, scenicarea.PayTxBillsTable, scenicarea.PayTxBillsColumn),
		)
		fromU = sqlgraph.SetNeighbors(saq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCarBillingStrategies chains the current query on the "car_billing_strategies" edge.
func (saq *ScenicAreaQuery) QueryCarBillingStrategies() *BillingStrategyQuery {
	query := (&BillingStrategyClient{config: saq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := saq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := saq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(scenicarea.Table, scenicarea.FieldID, selector),
			sqlgraph.To(billingstrategy.Table, billingstrategy.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, scenicarea.CarBillingStrategiesTable, scenicarea.CarBillingStrategiesColumn),
		)
		fromU = sqlgraph.SetNeighbors(saq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMap chains the current query on the "map" edge.
func (saq *ScenicAreaQuery) QueryMap() *ScenicAreaMapQuery {
	query := (&ScenicAreaMapClient{config: saq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := saq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := saq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(scenicarea.Table, scenicarea.FieldID, selector),
			sqlgraph.To(scenicareamap.Table, scenicareamap.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, scenicarea.MapTable, scenicarea.MapColumn),
		)
		fromU = sqlgraph.SetNeighbors(saq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMapVersions chains the current query on the "map_versions" edge.
func (saq *ScenicAreaQuery) QueryMapVersions() *MapVersionQuery {
	query := (&MapVersionClient{config: saq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := saq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := saq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(scenicarea.Table, scenicarea.FieldID, selector),
			sqlgraph.To(mapversion.Table, mapversion.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, scenicarea.MapVersionsTable, scenicarea.MapVersionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(saq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUsers chains the current query on the "users" edge.
func (saq *ScenicAreaQuery) QueryUsers() *UserQuery {
	query := (&UserClient{config: saq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := saq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := saq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(scenicarea.Table, scenicarea.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, scenicarea.UsersTable, scenicarea.UsersColumn),
		)
		fromU = sqlgraph.SetNeighbors(saq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrders chains the current query on the "orders" edge.
func (saq *ScenicAreaQuery) QueryOrders() *OrderQuery {
	query := (&OrderClient{config: saq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := saq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := saq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(scenicarea.Table, scenicarea.FieldID, selector),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, scenicarea.OrdersTable, scenicarea.OrdersColumn),
		)
		fromU = sqlgraph.SetNeighbors(saq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCarOperateLogs chains the current query on the "car_operate_logs" edge.
func (saq *ScenicAreaQuery) QueryCarOperateLogs() *CarsOperateLogQuery {
	query := (&CarsOperateLogClient{config: saq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := saq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := saq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(scenicarea.Table, scenicarea.FieldID, selector),
			sqlgraph.To(carsoperatelog.Table, carsoperatelog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, scenicarea.CarOperateLogsTable, scenicarea.CarOperateLogsColumn),
		)
		fromU = sqlgraph.SetNeighbors(saq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStatsHourlyCar chains the current query on the "stats_hourly_car" edge.
func (saq *ScenicAreaQuery) QueryStatsHourlyCar() *StatsHourlyCarQuery {
	query := (&StatsHourlyCarClient{config: saq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := saq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := saq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(scenicarea.Table, scenicarea.FieldID, selector),
			sqlgraph.To(statshourlycar.Table, statshourlycar.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, scenicarea.StatsHourlyCarTable, scenicarea.StatsHourlyCarColumn),
		)
		fromU = sqlgraph.SetNeighbors(saq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryConfigFiles chains the current query on the "config_files" edge.
func (saq *ScenicAreaQuery) QueryConfigFiles() *CarConfigQuery {
	query := (&CarConfigClient{config: saq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := saq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := saq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(scenicarea.Table, scenicarea.FieldID, selector),
			sqlgraph.To(carconfig.Table, carconfig.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, scenicarea.ConfigFilesTable, scenicarea.ConfigFilesColumn),
		)
		fromU = sqlgraph.SetNeighbors(saq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ScenicArea entity from the query.
// Returns a *NotFoundError when no ScenicArea was found.
func (saq *ScenicAreaQuery) First(ctx context.Context) (*ScenicArea, error) {
	nodes, err := saq.Limit(1).All(setContextOp(ctx, saq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{scenicarea.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (saq *ScenicAreaQuery) FirstX(ctx context.Context) *ScenicArea {
	node, err := saq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ScenicArea ID from the query.
// Returns a *NotFoundError when no ScenicArea ID was found.
func (saq *ScenicAreaQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = saq.Limit(1).IDs(setContextOp(ctx, saq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{scenicarea.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (saq *ScenicAreaQuery) FirstIDX(ctx context.Context) int {
	id, err := saq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ScenicArea entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ScenicArea entity is found.
// Returns a *NotFoundError when no ScenicArea entities are found.
func (saq *ScenicAreaQuery) Only(ctx context.Context) (*ScenicArea, error) {
	nodes, err := saq.Limit(2).All(setContextOp(ctx, saq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{scenicarea.Label}
	default:
		return nil, &NotSingularError{scenicarea.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (saq *ScenicAreaQuery) OnlyX(ctx context.Context) *ScenicArea {
	node, err := saq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ScenicArea ID in the query.
// Returns a *NotSingularError when more than one ScenicArea ID is found.
// Returns a *NotFoundError when no entities are found.
func (saq *ScenicAreaQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = saq.Limit(2).IDs(setContextOp(ctx, saq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{scenicarea.Label}
	default:
		err = &NotSingularError{scenicarea.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (saq *ScenicAreaQuery) OnlyIDX(ctx context.Context) int {
	id, err := saq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ScenicAreas.
func (saq *ScenicAreaQuery) All(ctx context.Context) ([]*ScenicArea, error) {
	ctx = setContextOp(ctx, saq.ctx, ent.OpQueryAll)
	if err := saq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ScenicArea, *ScenicAreaQuery]()
	return withInterceptors[[]*ScenicArea](ctx, saq, qr, saq.inters)
}

// AllX is like All, but panics if an error occurs.
func (saq *ScenicAreaQuery) AllX(ctx context.Context) []*ScenicArea {
	nodes, err := saq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ScenicArea IDs.
func (saq *ScenicAreaQuery) IDs(ctx context.Context) (ids []int, err error) {
	if saq.ctx.Unique == nil && saq.path != nil {
		saq.Unique(true)
	}
	ctx = setContextOp(ctx, saq.ctx, ent.OpQueryIDs)
	if err = saq.Select(scenicarea.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (saq *ScenicAreaQuery) IDsX(ctx context.Context) []int {
	ids, err := saq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (saq *ScenicAreaQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, saq.ctx, ent.OpQueryCount)
	if err := saq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, saq, querierCount[*ScenicAreaQuery](), saq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (saq *ScenicAreaQuery) CountX(ctx context.Context) int {
	count, err := saq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (saq *ScenicAreaQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, saq.ctx, ent.OpQueryExist)
	switch _, err := saq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (saq *ScenicAreaQuery) ExistX(ctx context.Context) bool {
	exist, err := saq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ScenicAreaQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (saq *ScenicAreaQuery) Clone() *ScenicAreaQuery {
	if saq == nil {
		return nil
	}
	return &ScenicAreaQuery{
		config:                   saq.config,
		ctx:                      saq.ctx.Clone(),
		order:                    append([]scenicarea.OrderOption{}, saq.order...),
		inters:                   append([]Interceptor{}, saq.inters...),
		predicates:               append([]predicate.ScenicArea{}, saq.predicates...),
		withCars:                 saq.withCars.Clone(),
		withAccounts:             saq.withAccounts.Clone(),
		withPois:                 saq.withPois.Clone(),
		withProfitReceivers:      saq.withProfitReceivers.Clone(),
		withPayTxBills:           saq.withPayTxBills.Clone(),
		withCarBillingStrategies: saq.withCarBillingStrategies.Clone(),
		withMap:                  saq.withMap.Clone(),
		withMapVersions:          saq.withMapVersions.Clone(),
		withUsers:                saq.withUsers.Clone(),
		withOrders:               saq.withOrders.Clone(),
		withCarOperateLogs:       saq.withCarOperateLogs.Clone(),
		withStatsHourlyCar:       saq.withStatsHourlyCar.Clone(),
		withConfigFiles:          saq.withConfigFiles.Clone(),
		// clone intermediate query.
		sql:  saq.sql.Clone(),
		path: saq.path,
	}
}

// WithCars tells the query-builder to eager-load the nodes that are connected to
// the "cars" edge. The optional arguments are used to configure the query builder of the edge.
func (saq *ScenicAreaQuery) WithCars(opts ...func(*CarQuery)) *ScenicAreaQuery {
	query := (&CarClient{config: saq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	saq.withCars = query
	return saq
}

// WithAccounts tells the query-builder to eager-load the nodes that are connected to
// the "accounts" edge. The optional arguments are used to configure the query builder of the edge.
func (saq *ScenicAreaQuery) WithAccounts(opts ...func(*AccountQuery)) *ScenicAreaQuery {
	query := (&AccountClient{config: saq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	saq.withAccounts = query
	return saq
}

// WithPois tells the query-builder to eager-load the nodes that are connected to
// the "pois" edge. The optional arguments are used to configure the query builder of the edge.
func (saq *ScenicAreaQuery) WithPois(opts ...func(*PoiQuery)) *ScenicAreaQuery {
	query := (&PoiClient{config: saq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	saq.withPois = query
	return saq
}

// WithProfitReceivers tells the query-builder to eager-load the nodes that are connected to
// the "profit_receivers" edge. The optional arguments are used to configure the query builder of the edge.
func (saq *ScenicAreaQuery) WithProfitReceivers(opts ...func(*ProfitReceiverQuery)) *ScenicAreaQuery {
	query := (&ProfitReceiverClient{config: saq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	saq.withProfitReceivers = query
	return saq
}

// WithPayTxBills tells the query-builder to eager-load the nodes that are connected to
// the "pay_tx_bills" edge. The optional arguments are used to configure the query builder of the edge.
func (saq *ScenicAreaQuery) WithPayTxBills(opts ...func(*PayTxBillQuery)) *ScenicAreaQuery {
	query := (&PayTxBillClient{config: saq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	saq.withPayTxBills = query
	return saq
}

// WithCarBillingStrategies tells the query-builder to eager-load the nodes that are connected to
// the "car_billing_strategies" edge. The optional arguments are used to configure the query builder of the edge.
func (saq *ScenicAreaQuery) WithCarBillingStrategies(opts ...func(*BillingStrategyQuery)) *ScenicAreaQuery {
	query := (&BillingStrategyClient{config: saq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	saq.withCarBillingStrategies = query
	return saq
}

// WithMap tells the query-builder to eager-load the nodes that are connected to
// the "map" edge. The optional arguments are used to configure the query builder of the edge.
func (saq *ScenicAreaQuery) WithMap(opts ...func(*ScenicAreaMapQuery)) *ScenicAreaQuery {
	query := (&ScenicAreaMapClient{config: saq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	saq.withMap = query
	return saq
}

// WithMapVersions tells the query-builder to eager-load the nodes that are connected to
// the "map_versions" edge. The optional arguments are used to configure the query builder of the edge.
func (saq *ScenicAreaQuery) WithMapVersions(opts ...func(*MapVersionQuery)) *ScenicAreaQuery {
	query := (&MapVersionClient{config: saq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	saq.withMapVersions = query
	return saq
}

// WithUsers tells the query-builder to eager-load the nodes that are connected to
// the "users" edge. The optional arguments are used to configure the query builder of the edge.
func (saq *ScenicAreaQuery) WithUsers(opts ...func(*UserQuery)) *ScenicAreaQuery {
	query := (&UserClient{config: saq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	saq.withUsers = query
	return saq
}

// WithOrders tells the query-builder to eager-load the nodes that are connected to
// the "orders" edge. The optional arguments are used to configure the query builder of the edge.
func (saq *ScenicAreaQuery) WithOrders(opts ...func(*OrderQuery)) *ScenicAreaQuery {
	query := (&OrderClient{config: saq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	saq.withOrders = query
	return saq
}

// WithCarOperateLogs tells the query-builder to eager-load the nodes that are connected to
// the "car_operate_logs" edge. The optional arguments are used to configure the query builder of the edge.
func (saq *ScenicAreaQuery) WithCarOperateLogs(opts ...func(*CarsOperateLogQuery)) *ScenicAreaQuery {
	query := (&CarsOperateLogClient{config: saq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	saq.withCarOperateLogs = query
	return saq
}

// WithStatsHourlyCar tells the query-builder to eager-load the nodes that are connected to
// the "stats_hourly_car" edge. The optional arguments are used to configure the query builder of the edge.
func (saq *ScenicAreaQuery) WithStatsHourlyCar(opts ...func(*StatsHourlyCarQuery)) *ScenicAreaQuery {
	query := (&StatsHourlyCarClient{config: saq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	saq.withStatsHourlyCar = query
	return saq
}

// WithConfigFiles tells the query-builder to eager-load the nodes that are connected to
// the "config_files" edge. The optional arguments are used to configure the query builder of the edge.
func (saq *ScenicAreaQuery) WithConfigFiles(opts ...func(*CarConfigQuery)) *ScenicAreaQuery {
	query := (&CarConfigClient{config: saq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	saq.withConfigFiles = query
	return saq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Code string `json:"code,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ScenicArea.Query().
//		GroupBy(scenicarea.FieldCode).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (saq *ScenicAreaQuery) GroupBy(field string, fields ...string) *ScenicAreaGroupBy {
	saq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ScenicAreaGroupBy{build: saq}
	grbuild.flds = &saq.ctx.Fields
	grbuild.label = scenicarea.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Code string `json:"code,omitempty"`
//	}
//
//	client.ScenicArea.Query().
//		Select(scenicarea.FieldCode).
//		Scan(ctx, &v)
func (saq *ScenicAreaQuery) Select(fields ...string) *ScenicAreaSelect {
	saq.ctx.Fields = append(saq.ctx.Fields, fields...)
	sbuild := &ScenicAreaSelect{ScenicAreaQuery: saq}
	sbuild.label = scenicarea.Label
	sbuild.flds, sbuild.scan = &saq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ScenicAreaSelect configured with the given aggregations.
func (saq *ScenicAreaQuery) Aggregate(fns ...AggregateFunc) *ScenicAreaSelect {
	return saq.Select().Aggregate(fns...)
}

func (saq *ScenicAreaQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range saq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, saq); err != nil {
				return err
			}
		}
	}
	for _, f := range saq.ctx.Fields {
		if !scenicarea.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if saq.path != nil {
		prev, err := saq.path(ctx)
		if err != nil {
			return err
		}
		saq.sql = prev
	}
	return nil
}

func (saq *ScenicAreaQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ScenicArea, error) {
	var (
		nodes       = []*ScenicArea{}
		_spec       = saq.querySpec()
		loadedTypes = [13]bool{
			saq.withCars != nil,
			saq.withAccounts != nil,
			saq.withPois != nil,
			saq.withProfitReceivers != nil,
			saq.withPayTxBills != nil,
			saq.withCarBillingStrategies != nil,
			saq.withMap != nil,
			saq.withMapVersions != nil,
			saq.withUsers != nil,
			saq.withOrders != nil,
			saq.withCarOperateLogs != nil,
			saq.withStatsHourlyCar != nil,
			saq.withConfigFiles != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ScenicArea).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ScenicArea{config: saq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, saq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := saq.withCars; query != nil {
		if err := saq.loadCars(ctx, query, nodes,
			func(n *ScenicArea) { n.Edges.Cars = []*Car{} },
			func(n *ScenicArea, e *Car) { n.Edges.Cars = append(n.Edges.Cars, e) }); err != nil {
			return nil, err
		}
	}
	if query := saq.withAccounts; query != nil {
		if err := saq.loadAccounts(ctx, query, nodes,
			func(n *ScenicArea) { n.Edges.Accounts = []*Account{} },
			func(n *ScenicArea, e *Account) { n.Edges.Accounts = append(n.Edges.Accounts, e) }); err != nil {
			return nil, err
		}
	}
	if query := saq.withPois; query != nil {
		if err := saq.loadPois(ctx, query, nodes,
			func(n *ScenicArea) { n.Edges.Pois = []*Poi{} },
			func(n *ScenicArea, e *Poi) { n.Edges.Pois = append(n.Edges.Pois, e) }); err != nil {
			return nil, err
		}
	}
	if query := saq.withProfitReceivers; query != nil {
		if err := saq.loadProfitReceivers(ctx, query, nodes,
			func(n *ScenicArea) { n.Edges.ProfitReceivers = []*ProfitReceiver{} },
			func(n *ScenicArea, e *ProfitReceiver) { n.Edges.ProfitReceivers = append(n.Edges.ProfitReceivers, e) }); err != nil {
			return nil, err
		}
	}
	if query := saq.withPayTxBills; query != nil {
		if err := saq.loadPayTxBills(ctx, query, nodes,
			func(n *ScenicArea) { n.Edges.PayTxBills = []*PayTxBill{} },
			func(n *ScenicArea, e *PayTxBill) { n.Edges.PayTxBills = append(n.Edges.PayTxBills, e) }); err != nil {
			return nil, err
		}
	}
	if query := saq.withCarBillingStrategies; query != nil {
		if err := saq.loadCarBillingStrategies(ctx, query, nodes,
			func(n *ScenicArea) { n.Edges.CarBillingStrategies = []*BillingStrategy{} },
			func(n *ScenicArea, e *BillingStrategy) {
				n.Edges.CarBillingStrategies = append(n.Edges.CarBillingStrategies, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := saq.withMap; query != nil {
		if err := saq.loadMap(ctx, query, nodes, nil,
			func(n *ScenicArea, e *ScenicAreaMap) { n.Edges.Map = e }); err != nil {
			return nil, err
		}
	}
	if query := saq.withMapVersions; query != nil {
		if err := saq.loadMapVersions(ctx, query, nodes,
			func(n *ScenicArea) { n.Edges.MapVersions = []*MapVersion{} },
			func(n *ScenicArea, e *MapVersion) { n.Edges.MapVersions = append(n.Edges.MapVersions, e) }); err != nil {
			return nil, err
		}
	}
	if query := saq.withUsers; query != nil {
		if err := saq.loadUsers(ctx, query, nodes,
			func(n *ScenicArea) { n.Edges.Users = []*User{} },
			func(n *ScenicArea, e *User) { n.Edges.Users = append(n.Edges.Users, e) }); err != nil {
			return nil, err
		}
	}
	if query := saq.withOrders; query != nil {
		if err := saq.loadOrders(ctx, query, nodes,
			func(n *ScenicArea) { n.Edges.Orders = []*Order{} },
			func(n *ScenicArea, e *Order) { n.Edges.Orders = append(n.Edges.Orders, e) }); err != nil {
			return nil, err
		}
	}
	if query := saq.withCarOperateLogs; query != nil {
		if err := saq.loadCarOperateLogs(ctx, query, nodes,
			func(n *ScenicArea) { n.Edges.CarOperateLogs = []*CarsOperateLog{} },
			func(n *ScenicArea, e *CarsOperateLog) { n.Edges.CarOperateLogs = append(n.Edges.CarOperateLogs, e) }); err != nil {
			return nil, err
		}
	}
	if query := saq.withStatsHourlyCar; query != nil {
		if err := saq.loadStatsHourlyCar(ctx, query, nodes,
			func(n *ScenicArea) { n.Edges.StatsHourlyCar = []*StatsHourlyCar{} },
			func(n *ScenicArea, e *StatsHourlyCar) { n.Edges.StatsHourlyCar = append(n.Edges.StatsHourlyCar, e) }); err != nil {
			return nil, err
		}
	}
	if query := saq.withConfigFiles; query != nil {
		if err := saq.loadConfigFiles(ctx, query, nodes,
			func(n *ScenicArea) { n.Edges.ConfigFiles = []*CarConfig{} },
			func(n *ScenicArea, e *CarConfig) { n.Edges.ConfigFiles = append(n.Edges.ConfigFiles, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (saq *ScenicAreaQuery) loadCars(ctx context.Context, query *CarQuery, nodes []*ScenicArea, init func(*ScenicArea), assign func(*ScenicArea, *Car)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*ScenicArea)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(car.FieldScenicAreaID)
	}
	query.Where(predicate.Car(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(scenicarea.CarsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ScenicAreaID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "scenic_area_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (saq *ScenicAreaQuery) loadAccounts(ctx context.Context, query *AccountQuery, nodes []*ScenicArea, init func(*ScenicArea), assign func(*ScenicArea, *Account)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*ScenicArea)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(account.FieldScenicAreaID)
	}
	query.Where(predicate.Account(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(scenicarea.AccountsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ScenicAreaID
		if fk == nil {
			return fmt.Errorf(`foreign-key "scenic_area_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "scenic_area_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (saq *ScenicAreaQuery) loadPois(ctx context.Context, query *PoiQuery, nodes []*ScenicArea, init func(*ScenicArea), assign func(*ScenicArea, *Poi)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*ScenicArea)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(poi.FieldScenicAreaID)
	}
	query.Where(predicate.Poi(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(scenicarea.PoisColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ScenicAreaID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "scenic_area_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (saq *ScenicAreaQuery) loadProfitReceivers(ctx context.Context, query *ProfitReceiverQuery, nodes []*ScenicArea, init func(*ScenicArea), assign func(*ScenicArea, *ProfitReceiver)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*ScenicArea)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(profitreceiver.FieldScenicAreaID)
	}
	query.Where(predicate.ProfitReceiver(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(scenicarea.ProfitReceiversColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ScenicAreaID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "scenic_area_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (saq *ScenicAreaQuery) loadPayTxBills(ctx context.Context, query *PayTxBillQuery, nodes []*ScenicArea, init func(*ScenicArea), assign func(*ScenicArea, *PayTxBill)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*ScenicArea)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(paytxbill.FieldScenicAreaID)
	}
	query.Where(predicate.PayTxBill(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(scenicarea.PayTxBillsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ScenicAreaID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "scenic_area_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (saq *ScenicAreaQuery) loadCarBillingStrategies(ctx context.Context, query *BillingStrategyQuery, nodes []*ScenicArea, init func(*ScenicArea), assign func(*ScenicArea, *BillingStrategy)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*ScenicArea)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(billingstrategy.FieldScenicAreaID)
	}
	query.Where(predicate.BillingStrategy(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(scenicarea.CarBillingStrategiesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ScenicAreaID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "scenic_area_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (saq *ScenicAreaQuery) loadMap(ctx context.Context, query *ScenicAreaMapQuery, nodes []*ScenicArea, init func(*ScenicArea), assign func(*ScenicArea, *ScenicAreaMap)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*ScenicArea)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(scenicareamap.FieldScenicAreaID)
	}
	query.Where(predicate.ScenicAreaMap(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(scenicarea.MapColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ScenicAreaID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "scenic_area_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (saq *ScenicAreaQuery) loadMapVersions(ctx context.Context, query *MapVersionQuery, nodes []*ScenicArea, init func(*ScenicArea), assign func(*ScenicArea, *MapVersion)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*ScenicArea)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(mapversion.FieldScenicAreaID)
	}
	query.Where(predicate.MapVersion(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(scenicarea.MapVersionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ScenicAreaID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "scenic_area_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (saq *ScenicAreaQuery) loadUsers(ctx context.Context, query *UserQuery, nodes []*ScenicArea, init func(*ScenicArea), assign func(*ScenicArea, *User)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*ScenicArea)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(user.FieldScenicAreaID)
	}
	query.Where(predicate.User(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(scenicarea.UsersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ScenicAreaID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "scenic_area_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (saq *ScenicAreaQuery) loadOrders(ctx context.Context, query *OrderQuery, nodes []*ScenicArea, init func(*ScenicArea), assign func(*ScenicArea, *Order)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*ScenicArea)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(order.FieldScenicAreaID)
	}
	query.Where(predicate.Order(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(scenicarea.OrdersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ScenicAreaID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "scenic_area_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (saq *ScenicAreaQuery) loadCarOperateLogs(ctx context.Context, query *CarsOperateLogQuery, nodes []*ScenicArea, init func(*ScenicArea), assign func(*ScenicArea, *CarsOperateLog)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*ScenicArea)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(carsoperatelog.FieldScenicAreaID)
	}
	query.Where(predicate.CarsOperateLog(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(scenicarea.CarOperateLogsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ScenicAreaID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "scenic_area_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (saq *ScenicAreaQuery) loadStatsHourlyCar(ctx context.Context, query *StatsHourlyCarQuery, nodes []*ScenicArea, init func(*ScenicArea), assign func(*ScenicArea, *StatsHourlyCar)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*ScenicArea)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(statshourlycar.FieldScenicAreaID)
	}
	query.Where(predicate.StatsHourlyCar(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(scenicarea.StatsHourlyCarColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ScenicAreaID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "scenic_area_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (saq *ScenicAreaQuery) loadConfigFiles(ctx context.Context, query *CarConfigQuery, nodes []*ScenicArea, init func(*ScenicArea), assign func(*ScenicArea, *CarConfig)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*ScenicArea)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(carconfig.FieldScenicAreaID)
	}
	query.Where(predicate.CarConfig(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(scenicarea.ConfigFilesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ScenicAreaID
		if fk == nil {
			return fmt.Errorf(`foreign-key "scenic_area_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "scenic_area_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (saq *ScenicAreaQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := saq.querySpec()
	_spec.Node.Columns = saq.ctx.Fields
	if len(saq.ctx.Fields) > 0 {
		_spec.Unique = saq.ctx.Unique != nil && *saq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, saq.driver, _spec)
}

func (saq *ScenicAreaQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(scenicarea.Table, scenicarea.Columns, sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt))
	_spec.From = saq.sql
	if unique := saq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if saq.path != nil {
		_spec.Unique = true
	}
	if fields := saq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, scenicarea.FieldID)
		for i := range fields {
			if fields[i] != scenicarea.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := saq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := saq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := saq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := saq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (saq *ScenicAreaQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(saq.driver.Dialect())
	t1 := builder.Table(scenicarea.Table)
	columns := saq.ctx.Fields
	if len(columns) == 0 {
		columns = scenicarea.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if saq.sql != nil {
		selector = saq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if saq.ctx.Unique != nil && *saq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range saq.predicates {
		p(selector)
	}
	for _, p := range saq.order {
		p(selector)
	}
	if offset := saq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := saq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ScenicAreaGroupBy is the group-by builder for ScenicArea entities.
type ScenicAreaGroupBy struct {
	selector
	build *ScenicAreaQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sagb *ScenicAreaGroupBy) Aggregate(fns ...AggregateFunc) *ScenicAreaGroupBy {
	sagb.fns = append(sagb.fns, fns...)
	return sagb
}

// Scan applies the selector query and scans the result into the given value.
func (sagb *ScenicAreaGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sagb.build.ctx, ent.OpQueryGroupBy)
	if err := sagb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ScenicAreaQuery, *ScenicAreaGroupBy](ctx, sagb.build, sagb, sagb.build.inters, v)
}

func (sagb *ScenicAreaGroupBy) sqlScan(ctx context.Context, root *ScenicAreaQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(sagb.fns))
	for _, fn := range sagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*sagb.flds)+len(sagb.fns))
		for _, f := range *sagb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*sagb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sagb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ScenicAreaSelect is the builder for selecting fields of ScenicArea entities.
type ScenicAreaSelect struct {
	*ScenicAreaQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (sas *ScenicAreaSelect) Aggregate(fns ...AggregateFunc) *ScenicAreaSelect {
	sas.fns = append(sas.fns, fns...)
	return sas
}

// Scan applies the selector query and scans the result into the given value.
func (sas *ScenicAreaSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sas.ctx, ent.OpQuerySelect)
	if err := sas.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ScenicAreaQuery, *ScenicAreaSelect](ctx, sas.ScenicAreaQuery, sas, sas.inters, v)
}

func (sas *ScenicAreaSelect) sqlScan(ctx context.Context, root *ScenicAreaQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(sas.fns))
	for _, fn := range sas.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*sas.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
