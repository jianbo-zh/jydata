// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jianbo-zh/jydata/database/ent/coupon"
)

// Coupon is the model entity for the Coupon schema.
type Coupon struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// DeleteTime holds the value of the "delete_time" field.
	DeleteTime time.Time `json:"delete_time,omitempty"`
	// 景区ID
	ScenicAreaID *int `json:"scenic_area_id,omitempty"`
	// 名称
	Name string `json:"name,omitempty"`
	// 优惠卷编号
	CouponNo string `json:"coupon_no,omitempty"`
	// 用户编号
	UserID int `json:"user_id,omitempty"`
	// 限制金额（单位：分）
	LimitAmount int `json:"limit_amount,omitempty"`
	// 优惠金额（单位：分）
	CouponAmount int `json:"coupon_amount,omitempty"`
	// 绑定订单ID
	BindOrderID *int `json:"bind_order_id,omitempty"`
	// 使用状态（1-未使用、2-已使用、3-已过期）
	State int `json:"state,omitempty"`
	// 有效期开始时间
	ValidStartTime time.Time `json:"valid_start_time,omitempty"`
	// 有效期结束时间
	ValidEndTime time.Time `json:"valid_end_time,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime   time.Time `json:"update_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Coupon) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case coupon.FieldID, coupon.FieldScenicAreaID, coupon.FieldUserID, coupon.FieldLimitAmount, coupon.FieldCouponAmount, coupon.FieldBindOrderID, coupon.FieldState:
			values[i] = new(sql.NullInt64)
		case coupon.FieldName, coupon.FieldCouponNo:
			values[i] = new(sql.NullString)
		case coupon.FieldDeleteTime, coupon.FieldValidStartTime, coupon.FieldValidEndTime, coupon.FieldCreateTime, coupon.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Coupon fields.
func (c *Coupon) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case coupon.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case coupon.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				c.DeleteTime = value.Time
			}
		case coupon.FieldScenicAreaID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field scenic_area_id", values[i])
			} else if value.Valid {
				c.ScenicAreaID = new(int)
				*c.ScenicAreaID = int(value.Int64)
			}
		case coupon.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case coupon.FieldCouponNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field coupon_no", values[i])
			} else if value.Valid {
				c.CouponNo = value.String
			}
		case coupon.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				c.UserID = int(value.Int64)
			}
		case coupon.FieldLimitAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field limit_amount", values[i])
			} else if value.Valid {
				c.LimitAmount = int(value.Int64)
			}
		case coupon.FieldCouponAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field coupon_amount", values[i])
			} else if value.Valid {
				c.CouponAmount = int(value.Int64)
			}
		case coupon.FieldBindOrderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field bind_order_id", values[i])
			} else if value.Valid {
				c.BindOrderID = new(int)
				*c.BindOrderID = int(value.Int64)
			}
		case coupon.FieldState:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				c.State = int(value.Int64)
			}
		case coupon.FieldValidStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field valid_start_time", values[i])
			} else if value.Valid {
				c.ValidStartTime = value.Time
			}
		case coupon.FieldValidEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field valid_end_time", values[i])
			} else if value.Valid {
				c.ValidEndTime = value.Time
			}
		case coupon.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				c.CreateTime = value.Time
			}
		case coupon.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				c.UpdateTime = value.Time
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Coupon.
// This includes values selected through modifiers, order, etc.
func (c *Coupon) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// Update returns a builder for updating this Coupon.
// Note that you need to call Coupon.Unwrap() before calling this method if this Coupon
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Coupon) Update() *CouponUpdateOne {
	return NewCouponClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Coupon entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Coupon) Unwrap() *Coupon {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Coupon is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Coupon) String() string {
	var builder strings.Builder
	builder.WriteString("Coupon(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("delete_time=")
	builder.WriteString(c.DeleteTime.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := c.ScenicAreaID; v != nil {
		builder.WriteString("scenic_area_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("coupon_no=")
	builder.WriteString(c.CouponNo)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", c.UserID))
	builder.WriteString(", ")
	builder.WriteString("limit_amount=")
	builder.WriteString(fmt.Sprintf("%v", c.LimitAmount))
	builder.WriteString(", ")
	builder.WriteString("coupon_amount=")
	builder.WriteString(fmt.Sprintf("%v", c.CouponAmount))
	builder.WriteString(", ")
	if v := c.BindOrderID; v != nil {
		builder.WriteString("bind_order_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(fmt.Sprintf("%v", c.State))
	builder.WriteString(", ")
	builder.WriteString("valid_start_time=")
	builder.WriteString(c.ValidStartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("valid_end_time=")
	builder.WriteString(c.ValidEndTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(c.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(c.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Coupons is a parsable slice of Coupon.
type Coupons []*Coupon
