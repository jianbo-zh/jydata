// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jianbo-zh/jydata/database/ent/mapversion"
	"github.com/jianbo-zh/jydata/database/ent/scenicarea"
)

// MapVersion is the model entity for the MapVersion schema.
type MapVersion struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 景区ID
	ScenicAreaID int `json:"scenic_area_id,omitempty"`
	// 文件ID
	FileID int `json:"file_id,omitempty"`
	// 文件路径
	FilePath string `json:"file_path,omitempty"`
	// 版本号
	Version string `json:"version,omitempty"`
	// 版本名称
	Name string `json:"name,omitempty"`
	// 版本备注
	Remark string `json:"remark,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MapVersionQuery when eager-loading is set.
	Edges        MapVersionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MapVersionEdges holds the relations/edges for other nodes in the graph.
type MapVersionEdges struct {
	// BackgroundScenicArea holds the value of the background_scenic_area edge.
	BackgroundScenicArea *ScenicArea `json:"background_scenic_area,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BackgroundScenicAreaOrErr returns the BackgroundScenicArea value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MapVersionEdges) BackgroundScenicAreaOrErr() (*ScenicArea, error) {
	if e.BackgroundScenicArea != nil {
		return e.BackgroundScenicArea, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: scenicarea.Label}
	}
	return nil, &NotLoadedError{edge: "background_scenic_area"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MapVersion) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case mapversion.FieldID, mapversion.FieldScenicAreaID, mapversion.FieldFileID:
			values[i] = new(sql.NullInt64)
		case mapversion.FieldFilePath, mapversion.FieldVersion, mapversion.FieldName, mapversion.FieldRemark:
			values[i] = new(sql.NullString)
		case mapversion.FieldCreateTime, mapversion.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MapVersion fields.
func (mv *MapVersion) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case mapversion.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mv.ID = int(value.Int64)
		case mapversion.FieldScenicAreaID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field scenic_area_id", values[i])
			} else if value.Valid {
				mv.ScenicAreaID = int(value.Int64)
			}
		case mapversion.FieldFileID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field file_id", values[i])
			} else if value.Valid {
				mv.FileID = int(value.Int64)
			}
		case mapversion.FieldFilePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_path", values[i])
			} else if value.Valid {
				mv.FilePath = value.String
			}
		case mapversion.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				mv.Version = value.String
			}
		case mapversion.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				mv.Name = value.String
			}
		case mapversion.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				mv.Remark = value.String
			}
		case mapversion.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				mv.CreateTime = value.Time
			}
		case mapversion.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				mv.UpdateTime = value.Time
			}
		default:
			mv.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MapVersion.
// This includes values selected through modifiers, order, etc.
func (mv *MapVersion) Value(name string) (ent.Value, error) {
	return mv.selectValues.Get(name)
}

// QueryBackgroundScenicArea queries the "background_scenic_area" edge of the MapVersion entity.
func (mv *MapVersion) QueryBackgroundScenicArea() *ScenicAreaQuery {
	return NewMapVersionClient(mv.config).QueryBackgroundScenicArea(mv)
}

// Update returns a builder for updating this MapVersion.
// Note that you need to call MapVersion.Unwrap() before calling this method if this MapVersion
// was returned from a transaction, and the transaction was committed or rolled back.
func (mv *MapVersion) Update() *MapVersionUpdateOne {
	return NewMapVersionClient(mv.config).UpdateOne(mv)
}

// Unwrap unwraps the MapVersion entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mv *MapVersion) Unwrap() *MapVersion {
	_tx, ok := mv.config.driver.(*txDriver)
	if !ok {
		panic("ent: MapVersion is not a transactional entity")
	}
	mv.config.driver = _tx.drv
	return mv
}

// String implements the fmt.Stringer.
func (mv *MapVersion) String() string {
	var builder strings.Builder
	builder.WriteString("MapVersion(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mv.ID))
	builder.WriteString("scenic_area_id=")
	builder.WriteString(fmt.Sprintf("%v", mv.ScenicAreaID))
	builder.WriteString(", ")
	builder.WriteString("file_id=")
	builder.WriteString(fmt.Sprintf("%v", mv.FileID))
	builder.WriteString(", ")
	builder.WriteString("file_path=")
	builder.WriteString(mv.FilePath)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(mv.Version)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(mv.Name)
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(mv.Remark)
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(mv.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(mv.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// MapVersions is a parsable slice of MapVersion.
type MapVersions []*MapVersion
