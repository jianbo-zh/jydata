// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/carsmodels"
	"github.com/jianbo-zh/jydata/database/ent/carsmodelsgroups"
	"github.com/jianbo-zh/jydata/database/ent/carsmodelsgroupsparams"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
)

// CarsModelsGroupsQuery is the builder for querying CarsModelsGroups entities.
type CarsModelsGroupsQuery struct {
	config
	ctx        *QueryContext
	order      []carsmodelsgroups.OrderOption
	inters     []Interceptor
	predicates []predicate.CarsModelsGroups
	withModel  *CarsModelsQuery
	withParams *CarsModelsGroupsParamsQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CarsModelsGroupsQuery builder.
func (cmgq *CarsModelsGroupsQuery) Where(ps ...predicate.CarsModelsGroups) *CarsModelsGroupsQuery {
	cmgq.predicates = append(cmgq.predicates, ps...)
	return cmgq
}

// Limit the number of records to be returned by this query.
func (cmgq *CarsModelsGroupsQuery) Limit(limit int) *CarsModelsGroupsQuery {
	cmgq.ctx.Limit = &limit
	return cmgq
}

// Offset to start from.
func (cmgq *CarsModelsGroupsQuery) Offset(offset int) *CarsModelsGroupsQuery {
	cmgq.ctx.Offset = &offset
	return cmgq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cmgq *CarsModelsGroupsQuery) Unique(unique bool) *CarsModelsGroupsQuery {
	cmgq.ctx.Unique = &unique
	return cmgq
}

// Order specifies how the records should be ordered.
func (cmgq *CarsModelsGroupsQuery) Order(o ...carsmodelsgroups.OrderOption) *CarsModelsGroupsQuery {
	cmgq.order = append(cmgq.order, o...)
	return cmgq
}

// QueryModel chains the current query on the "model" edge.
func (cmgq *CarsModelsGroupsQuery) QueryModel() *CarsModelsQuery {
	query := (&CarsModelsClient{config: cmgq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cmgq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cmgq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carsmodelsgroups.Table, carsmodelsgroups.FieldID, selector),
			sqlgraph.To(carsmodels.Table, carsmodels.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, carsmodelsgroups.ModelTable, carsmodelsgroups.ModelColumn),
		)
		fromU = sqlgraph.SetNeighbors(cmgq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryParams chains the current query on the "params" edge.
func (cmgq *CarsModelsGroupsQuery) QueryParams() *CarsModelsGroupsParamsQuery {
	query := (&CarsModelsGroupsParamsClient{config: cmgq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cmgq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cmgq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carsmodelsgroups.Table, carsmodelsgroups.FieldID, selector),
			sqlgraph.To(carsmodelsgroupsparams.Table, carsmodelsgroupsparams.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, carsmodelsgroups.ParamsTable, carsmodelsgroups.ParamsColumn),
		)
		fromU = sqlgraph.SetNeighbors(cmgq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CarsModelsGroups entity from the query.
// Returns a *NotFoundError when no CarsModelsGroups was found.
func (cmgq *CarsModelsGroupsQuery) First(ctx context.Context) (*CarsModelsGroups, error) {
	nodes, err := cmgq.Limit(1).All(setContextOp(ctx, cmgq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{carsmodelsgroups.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cmgq *CarsModelsGroupsQuery) FirstX(ctx context.Context) *CarsModelsGroups {
	node, err := cmgq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CarsModelsGroups ID from the query.
// Returns a *NotFoundError when no CarsModelsGroups ID was found.
func (cmgq *CarsModelsGroupsQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = cmgq.Limit(1).IDs(setContextOp(ctx, cmgq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{carsmodelsgroups.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cmgq *CarsModelsGroupsQuery) FirstIDX(ctx context.Context) int {
	id, err := cmgq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CarsModelsGroups entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CarsModelsGroups entity is found.
// Returns a *NotFoundError when no CarsModelsGroups entities are found.
func (cmgq *CarsModelsGroupsQuery) Only(ctx context.Context) (*CarsModelsGroups, error) {
	nodes, err := cmgq.Limit(2).All(setContextOp(ctx, cmgq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{carsmodelsgroups.Label}
	default:
		return nil, &NotSingularError{carsmodelsgroups.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cmgq *CarsModelsGroupsQuery) OnlyX(ctx context.Context) *CarsModelsGroups {
	node, err := cmgq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CarsModelsGroups ID in the query.
// Returns a *NotSingularError when more than one CarsModelsGroups ID is found.
// Returns a *NotFoundError when no entities are found.
func (cmgq *CarsModelsGroupsQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = cmgq.Limit(2).IDs(setContextOp(ctx, cmgq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{carsmodelsgroups.Label}
	default:
		err = &NotSingularError{carsmodelsgroups.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cmgq *CarsModelsGroupsQuery) OnlyIDX(ctx context.Context) int {
	id, err := cmgq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CarsModelsGroupsSlice.
func (cmgq *CarsModelsGroupsQuery) All(ctx context.Context) ([]*CarsModelsGroups, error) {
	ctx = setContextOp(ctx, cmgq.ctx, ent.OpQueryAll)
	if err := cmgq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*CarsModelsGroups, *CarsModelsGroupsQuery]()
	return withInterceptors[[]*CarsModelsGroups](ctx, cmgq, qr, cmgq.inters)
}

// AllX is like All, but panics if an error occurs.
func (cmgq *CarsModelsGroupsQuery) AllX(ctx context.Context) []*CarsModelsGroups {
	nodes, err := cmgq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CarsModelsGroups IDs.
func (cmgq *CarsModelsGroupsQuery) IDs(ctx context.Context) (ids []int, err error) {
	if cmgq.ctx.Unique == nil && cmgq.path != nil {
		cmgq.Unique(true)
	}
	ctx = setContextOp(ctx, cmgq.ctx, ent.OpQueryIDs)
	if err = cmgq.Select(carsmodelsgroups.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cmgq *CarsModelsGroupsQuery) IDsX(ctx context.Context) []int {
	ids, err := cmgq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cmgq *CarsModelsGroupsQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, cmgq.ctx, ent.OpQueryCount)
	if err := cmgq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, cmgq, querierCount[*CarsModelsGroupsQuery](), cmgq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (cmgq *CarsModelsGroupsQuery) CountX(ctx context.Context) int {
	count, err := cmgq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cmgq *CarsModelsGroupsQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, cmgq.ctx, ent.OpQueryExist)
	switch _, err := cmgq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (cmgq *CarsModelsGroupsQuery) ExistX(ctx context.Context) bool {
	exist, err := cmgq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CarsModelsGroupsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cmgq *CarsModelsGroupsQuery) Clone() *CarsModelsGroupsQuery {
	if cmgq == nil {
		return nil
	}
	return &CarsModelsGroupsQuery{
		config:     cmgq.config,
		ctx:        cmgq.ctx.Clone(),
		order:      append([]carsmodelsgroups.OrderOption{}, cmgq.order...),
		inters:     append([]Interceptor{}, cmgq.inters...),
		predicates: append([]predicate.CarsModelsGroups{}, cmgq.predicates...),
		withModel:  cmgq.withModel.Clone(),
		withParams: cmgq.withParams.Clone(),
		// clone intermediate query.
		sql:  cmgq.sql.Clone(),
		path: cmgq.path,
	}
}

// WithModel tells the query-builder to eager-load the nodes that are connected to
// the "model" edge. The optional arguments are used to configure the query builder of the edge.
func (cmgq *CarsModelsGroupsQuery) WithModel(opts ...func(*CarsModelsQuery)) *CarsModelsGroupsQuery {
	query := (&CarsModelsClient{config: cmgq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cmgq.withModel = query
	return cmgq
}

// WithParams tells the query-builder to eager-load the nodes that are connected to
// the "params" edge. The optional arguments are used to configure the query builder of the edge.
func (cmgq *CarsModelsGroupsQuery) WithParams(opts ...func(*CarsModelsGroupsParamsQuery)) *CarsModelsGroupsQuery {
	query := (&CarsModelsGroupsParamsClient{config: cmgq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cmgq.withParams = query
	return cmgq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ModelID int `json:"model_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CarsModelsGroups.Query().
//		GroupBy(carsmodelsgroups.FieldModelID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (cmgq *CarsModelsGroupsQuery) GroupBy(field string, fields ...string) *CarsModelsGroupsGroupBy {
	cmgq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CarsModelsGroupsGroupBy{build: cmgq}
	grbuild.flds = &cmgq.ctx.Fields
	grbuild.label = carsmodelsgroups.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ModelID int `json:"model_id,omitempty"`
//	}
//
//	client.CarsModelsGroups.Query().
//		Select(carsmodelsgroups.FieldModelID).
//		Scan(ctx, &v)
func (cmgq *CarsModelsGroupsQuery) Select(fields ...string) *CarsModelsGroupsSelect {
	cmgq.ctx.Fields = append(cmgq.ctx.Fields, fields...)
	sbuild := &CarsModelsGroupsSelect{CarsModelsGroupsQuery: cmgq}
	sbuild.label = carsmodelsgroups.Label
	sbuild.flds, sbuild.scan = &cmgq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CarsModelsGroupsSelect configured with the given aggregations.
func (cmgq *CarsModelsGroupsQuery) Aggregate(fns ...AggregateFunc) *CarsModelsGroupsSelect {
	return cmgq.Select().Aggregate(fns...)
}

func (cmgq *CarsModelsGroupsQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range cmgq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, cmgq); err != nil {
				return err
			}
		}
	}
	for _, f := range cmgq.ctx.Fields {
		if !carsmodelsgroups.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if cmgq.path != nil {
		prev, err := cmgq.path(ctx)
		if err != nil {
			return err
		}
		cmgq.sql = prev
	}
	return nil
}

func (cmgq *CarsModelsGroupsQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CarsModelsGroups, error) {
	var (
		nodes       = []*CarsModelsGroups{}
		_spec       = cmgq.querySpec()
		loadedTypes = [2]bool{
			cmgq.withModel != nil,
			cmgq.withParams != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CarsModelsGroups).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CarsModelsGroups{config: cmgq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cmgq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := cmgq.withModel; query != nil {
		if err := cmgq.loadModel(ctx, query, nodes, nil,
			func(n *CarsModelsGroups, e *CarsModels) { n.Edges.Model = e }); err != nil {
			return nil, err
		}
	}
	if query := cmgq.withParams; query != nil {
		if err := cmgq.loadParams(ctx, query, nodes,
			func(n *CarsModelsGroups) { n.Edges.Params = []*CarsModelsGroupsParams{} },
			func(n *CarsModelsGroups, e *CarsModelsGroupsParams) { n.Edges.Params = append(n.Edges.Params, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (cmgq *CarsModelsGroupsQuery) loadModel(ctx context.Context, query *CarsModelsQuery, nodes []*CarsModelsGroups, init func(*CarsModelsGroups), assign func(*CarsModelsGroups, *CarsModels)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*CarsModelsGroups)
	for i := range nodes {
		fk := nodes[i].ModelID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(carsmodels.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "model_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cmgq *CarsModelsGroupsQuery) loadParams(ctx context.Context, query *CarsModelsGroupsParamsQuery, nodes []*CarsModelsGroups, init func(*CarsModelsGroups), assign func(*CarsModelsGroups, *CarsModelsGroupsParams)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*CarsModelsGroups)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(carsmodelsgroupsparams.FieldGroupID)
	}
	query.Where(predicate.CarsModelsGroupsParams(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(carsmodelsgroups.ParamsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.GroupID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "group_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (cmgq *CarsModelsGroupsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cmgq.querySpec()
	_spec.Node.Columns = cmgq.ctx.Fields
	if len(cmgq.ctx.Fields) > 0 {
		_spec.Unique = cmgq.ctx.Unique != nil && *cmgq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, cmgq.driver, _spec)
}

func (cmgq *CarsModelsGroupsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(carsmodelsgroups.Table, carsmodelsgroups.Columns, sqlgraph.NewFieldSpec(carsmodelsgroups.FieldID, field.TypeInt))
	_spec.From = cmgq.sql
	if unique := cmgq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if cmgq.path != nil {
		_spec.Unique = true
	}
	if fields := cmgq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carsmodelsgroups.FieldID)
		for i := range fields {
			if fields[i] != carsmodelsgroups.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if cmgq.withModel != nil {
			_spec.Node.AddColumnOnce(carsmodelsgroups.FieldModelID)
		}
	}
	if ps := cmgq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cmgq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cmgq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cmgq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cmgq *CarsModelsGroupsQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cmgq.driver.Dialect())
	t1 := builder.Table(carsmodelsgroups.Table)
	columns := cmgq.ctx.Fields
	if len(columns) == 0 {
		columns = carsmodelsgroups.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cmgq.sql != nil {
		selector = cmgq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cmgq.ctx.Unique != nil && *cmgq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range cmgq.predicates {
		p(selector)
	}
	for _, p := range cmgq.order {
		p(selector)
	}
	if offset := cmgq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cmgq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// CarsModelsGroupsGroupBy is the group-by builder for CarsModelsGroups entities.
type CarsModelsGroupsGroupBy struct {
	selector
	build *CarsModelsGroupsQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cmggb *CarsModelsGroupsGroupBy) Aggregate(fns ...AggregateFunc) *CarsModelsGroupsGroupBy {
	cmggb.fns = append(cmggb.fns, fns...)
	return cmggb
}

// Scan applies the selector query and scans the result into the given value.
func (cmggb *CarsModelsGroupsGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cmggb.build.ctx, ent.OpQueryGroupBy)
	if err := cmggb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CarsModelsGroupsQuery, *CarsModelsGroupsGroupBy](ctx, cmggb.build, cmggb, cmggb.build.inters, v)
}

func (cmggb *CarsModelsGroupsGroupBy) sqlScan(ctx context.Context, root *CarsModelsGroupsQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cmggb.fns))
	for _, fn := range cmggb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cmggb.flds)+len(cmggb.fns))
		for _, f := range *cmggb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cmggb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cmggb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CarsModelsGroupsSelect is the builder for selecting fields of CarsModelsGroups entities.
type CarsModelsGroupsSelect struct {
	*CarsModelsGroupsQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cmgs *CarsModelsGroupsSelect) Aggregate(fns ...AggregateFunc) *CarsModelsGroupsSelect {
	cmgs.fns = append(cmgs.fns, fns...)
	return cmgs
}

// Scan applies the selector query and scans the result into the given value.
func (cmgs *CarsModelsGroupsSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cmgs.ctx, ent.OpQuerySelect)
	if err := cmgs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CarsModelsGroupsQuery, *CarsModelsGroupsSelect](ctx, cmgs.CarsModelsGroupsQuery, cmgs, cmgs.inters, v)
}

func (cmgs *CarsModelsGroupsSelect) sqlScan(ctx context.Context, root *CarsModelsGroupsQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cmgs.fns))
	for _, fn := range cmgs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cmgs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cmgs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
