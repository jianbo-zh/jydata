// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/scenicarea"
	"github.com/jianbo-zh/jydata/database/ent/scenicareamap"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScenicAreaMapCreate is the builder for creating a ScenicAreaMap entity.
type ScenicAreaMapCreate struct {
	config
	mutation *ScenicAreaMapMutation
	hooks    []Hook
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (samc *ScenicAreaMapCreate) SetScenicAreaID(i int) *ScenicAreaMapCreate {
	samc.mutation.SetScenicAreaID(i)
	return samc
}

// SetName sets the "name" field.
func (samc *ScenicAreaMapCreate) SetName(s string) *ScenicAreaMapCreate {
	samc.mutation.SetName(s)
	return samc
}

// SetBaseMapFileID sets the "base_map_file_id" field.
func (samc *ScenicAreaMapCreate) SetBaseMapFileID(i int) *ScenicAreaMapCreate {
	samc.mutation.SetBaseMapFileID(i)
	return samc
}

// SetRoutingMapFileID sets the "routing_map_file_id" field.
func (samc *ScenicAreaMapCreate) SetRoutingMapFileID(i int) *ScenicAreaMapCreate {
	samc.mutation.SetRoutingMapFileID(i)
	return samc
}

// SetSimMapFileID sets the "sim_map_file_id" field.
func (samc *ScenicAreaMapCreate) SetSimMapFileID(i int) *ScenicAreaMapCreate {
	samc.mutation.SetSimMapFileID(i)
	return samc
}

// SetFenceMapFileID sets the "fence_map_file_id" field.
func (samc *ScenicAreaMapCreate) SetFenceMapFileID(i int) *ScenicAreaMapCreate {
	samc.mutation.SetFenceMapFileID(i)
	return samc
}

// SetCaruiMapFileID sets the "carui_map_file_id" field.
func (samc *ScenicAreaMapCreate) SetCaruiMapFileID(i int) *ScenicAreaMapCreate {
	samc.mutation.SetCaruiMapFileID(i)
	return samc
}

// SetNillableCaruiMapFileID sets the "carui_map_file_id" field if the given value is not nil.
func (samc *ScenicAreaMapCreate) SetNillableCaruiMapFileID(i *int) *ScenicAreaMapCreate {
	if i != nil {
		samc.SetCaruiMapFileID(*i)
	}
	return samc
}

// SetCaruiNeCoord sets the "carui_ne_coord" field.
func (samc *ScenicAreaMapCreate) SetCaruiNeCoord(s string) *ScenicAreaMapCreate {
	samc.mutation.SetCaruiNeCoord(s)
	return samc
}

// SetNillableCaruiNeCoord sets the "carui_ne_coord" field if the given value is not nil.
func (samc *ScenicAreaMapCreate) SetNillableCaruiNeCoord(s *string) *ScenicAreaMapCreate {
	if s != nil {
		samc.SetCaruiNeCoord(*s)
	}
	return samc
}

// SetCaruiSwCoord sets the "carui_sw_coord" field.
func (samc *ScenicAreaMapCreate) SetCaruiSwCoord(s string) *ScenicAreaMapCreate {
	samc.mutation.SetCaruiSwCoord(s)
	return samc
}

// SetNillableCaruiSwCoord sets the "carui_sw_coord" field if the given value is not nil.
func (samc *ScenicAreaMapCreate) SetNillableCaruiSwCoord(s *string) *ScenicAreaMapCreate {
	if s != nil {
		samc.SetCaruiSwCoord(*s)
	}
	return samc
}

// SetCreateTime sets the "create_time" field.
func (samc *ScenicAreaMapCreate) SetCreateTime(t time.Time) *ScenicAreaMapCreate {
	samc.mutation.SetCreateTime(t)
	return samc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (samc *ScenicAreaMapCreate) SetNillableCreateTime(t *time.Time) *ScenicAreaMapCreate {
	if t != nil {
		samc.SetCreateTime(*t)
	}
	return samc
}

// SetUpdateTime sets the "update_time" field.
func (samc *ScenicAreaMapCreate) SetUpdateTime(t time.Time) *ScenicAreaMapCreate {
	samc.mutation.SetUpdateTime(t)
	return samc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (samc *ScenicAreaMapCreate) SetNillableUpdateTime(t *time.Time) *ScenicAreaMapCreate {
	if t != nil {
		samc.SetUpdateTime(*t)
	}
	return samc
}

// SetID sets the "id" field.
func (samc *ScenicAreaMapCreate) SetID(i int) *ScenicAreaMapCreate {
	samc.mutation.SetID(i)
	return samc
}

// SetBackgroundScenicAreaID sets the "background_scenic_area" edge to the ScenicArea entity by ID.
func (samc *ScenicAreaMapCreate) SetBackgroundScenicAreaID(id int) *ScenicAreaMapCreate {
	samc.mutation.SetBackgroundScenicAreaID(id)
	return samc
}

// SetBackgroundScenicArea sets the "background_scenic_area" edge to the ScenicArea entity.
func (samc *ScenicAreaMapCreate) SetBackgroundScenicArea(s *ScenicArea) *ScenicAreaMapCreate {
	return samc.SetBackgroundScenicAreaID(s.ID)
}

// Mutation returns the ScenicAreaMapMutation object of the builder.
func (samc *ScenicAreaMapCreate) Mutation() *ScenicAreaMapMutation {
	return samc.mutation
}

// Save creates the ScenicAreaMap in the database.
func (samc *ScenicAreaMapCreate) Save(ctx context.Context) (*ScenicAreaMap, error) {
	samc.defaults()
	return withHooks(ctx, samc.sqlSave, samc.mutation, samc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (samc *ScenicAreaMapCreate) SaveX(ctx context.Context) *ScenicAreaMap {
	v, err := samc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (samc *ScenicAreaMapCreate) Exec(ctx context.Context) error {
	_, err := samc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (samc *ScenicAreaMapCreate) ExecX(ctx context.Context) {
	if err := samc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (samc *ScenicAreaMapCreate) defaults() {
	if _, ok := samc.mutation.CaruiMapFileID(); !ok {
		v := scenicareamap.DefaultCaruiMapFileID
		samc.mutation.SetCaruiMapFileID(v)
	}
	if _, ok := samc.mutation.CaruiNeCoord(); !ok {
		v := scenicareamap.DefaultCaruiNeCoord
		samc.mutation.SetCaruiNeCoord(v)
	}
	if _, ok := samc.mutation.CaruiSwCoord(); !ok {
		v := scenicareamap.DefaultCaruiSwCoord
		samc.mutation.SetCaruiSwCoord(v)
	}
	if _, ok := samc.mutation.CreateTime(); !ok {
		v := scenicareamap.DefaultCreateTime()
		samc.mutation.SetCreateTime(v)
	}
	if _, ok := samc.mutation.UpdateTime(); !ok {
		v := scenicareamap.DefaultUpdateTime()
		samc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (samc *ScenicAreaMapCreate) check() error {
	if _, ok := samc.mutation.ScenicAreaID(); !ok {
		return &ValidationError{Name: "scenic_area_id", err: errors.New(`ent: missing required field "ScenicAreaMap.scenic_area_id"`)}
	}
	if _, ok := samc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "ScenicAreaMap.name"`)}
	}
	if _, ok := samc.mutation.BaseMapFileID(); !ok {
		return &ValidationError{Name: "base_map_file_id", err: errors.New(`ent: missing required field "ScenicAreaMap.base_map_file_id"`)}
	}
	if _, ok := samc.mutation.RoutingMapFileID(); !ok {
		return &ValidationError{Name: "routing_map_file_id", err: errors.New(`ent: missing required field "ScenicAreaMap.routing_map_file_id"`)}
	}
	if _, ok := samc.mutation.SimMapFileID(); !ok {
		return &ValidationError{Name: "sim_map_file_id", err: errors.New(`ent: missing required field "ScenicAreaMap.sim_map_file_id"`)}
	}
	if _, ok := samc.mutation.FenceMapFileID(); !ok {
		return &ValidationError{Name: "fence_map_file_id", err: errors.New(`ent: missing required field "ScenicAreaMap.fence_map_file_id"`)}
	}
	if _, ok := samc.mutation.CaruiMapFileID(); !ok {
		return &ValidationError{Name: "carui_map_file_id", err: errors.New(`ent: missing required field "ScenicAreaMap.carui_map_file_id"`)}
	}
	if _, ok := samc.mutation.CaruiNeCoord(); !ok {
		return &ValidationError{Name: "carui_ne_coord", err: errors.New(`ent: missing required field "ScenicAreaMap.carui_ne_coord"`)}
	}
	if _, ok := samc.mutation.CaruiSwCoord(); !ok {
		return &ValidationError{Name: "carui_sw_coord", err: errors.New(`ent: missing required field "ScenicAreaMap.carui_sw_coord"`)}
	}
	if _, ok := samc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "ScenicAreaMap.create_time"`)}
	}
	if _, ok := samc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "ScenicAreaMap.update_time"`)}
	}
	if len(samc.mutation.BackgroundScenicAreaIDs()) == 0 {
		return &ValidationError{Name: "background_scenic_area", err: errors.New(`ent: missing required edge "ScenicAreaMap.background_scenic_area"`)}
	}
	return nil
}

func (samc *ScenicAreaMapCreate) sqlSave(ctx context.Context) (*ScenicAreaMap, error) {
	if err := samc.check(); err != nil {
		return nil, err
	}
	_node, _spec := samc.createSpec()
	if err := sqlgraph.CreateNode(ctx, samc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	samc.mutation.id = &_node.ID
	samc.mutation.done = true
	return _node, nil
}

func (samc *ScenicAreaMapCreate) createSpec() (*ScenicAreaMap, *sqlgraph.CreateSpec) {
	var (
		_node = &ScenicAreaMap{config: samc.config}
		_spec = sqlgraph.NewCreateSpec(scenicareamap.Table, sqlgraph.NewFieldSpec(scenicareamap.FieldID, field.TypeInt))
	)
	if id, ok := samc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := samc.mutation.Name(); ok {
		_spec.SetField(scenicareamap.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := samc.mutation.BaseMapFileID(); ok {
		_spec.SetField(scenicareamap.FieldBaseMapFileID, field.TypeInt, value)
		_node.BaseMapFileID = value
	}
	if value, ok := samc.mutation.RoutingMapFileID(); ok {
		_spec.SetField(scenicareamap.FieldRoutingMapFileID, field.TypeInt, value)
		_node.RoutingMapFileID = value
	}
	if value, ok := samc.mutation.SimMapFileID(); ok {
		_spec.SetField(scenicareamap.FieldSimMapFileID, field.TypeInt, value)
		_node.SimMapFileID = value
	}
	if value, ok := samc.mutation.FenceMapFileID(); ok {
		_spec.SetField(scenicareamap.FieldFenceMapFileID, field.TypeInt, value)
		_node.FenceMapFileID = value
	}
	if value, ok := samc.mutation.CaruiMapFileID(); ok {
		_spec.SetField(scenicareamap.FieldCaruiMapFileID, field.TypeInt, value)
		_node.CaruiMapFileID = value
	}
	if value, ok := samc.mutation.CaruiNeCoord(); ok {
		_spec.SetField(scenicareamap.FieldCaruiNeCoord, field.TypeString, value)
		_node.CaruiNeCoord = value
	}
	if value, ok := samc.mutation.CaruiSwCoord(); ok {
		_spec.SetField(scenicareamap.FieldCaruiSwCoord, field.TypeString, value)
		_node.CaruiSwCoord = value
	}
	if value, ok := samc.mutation.CreateTime(); ok {
		_spec.SetField(scenicareamap.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := samc.mutation.UpdateTime(); ok {
		_spec.SetField(scenicareamap.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if nodes := samc.mutation.BackgroundScenicAreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   scenicareamap.BackgroundScenicAreaTable,
			Columns: []string{scenicareamap.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ScenicAreaID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ScenicAreaMapCreateBulk is the builder for creating many ScenicAreaMap entities in bulk.
type ScenicAreaMapCreateBulk struct {
	config
	err      error
	builders []*ScenicAreaMapCreate
}

// Save creates the ScenicAreaMap entities in the database.
func (samcb *ScenicAreaMapCreateBulk) Save(ctx context.Context) ([]*ScenicAreaMap, error) {
	if samcb.err != nil {
		return nil, samcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(samcb.builders))
	nodes := make([]*ScenicAreaMap, len(samcb.builders))
	mutators := make([]Mutator, len(samcb.builders))
	for i := range samcb.builders {
		func(i int, root context.Context) {
			builder := samcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScenicAreaMapMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, samcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, samcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, samcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (samcb *ScenicAreaMapCreateBulk) SaveX(ctx context.Context) []*ScenicAreaMap {
	v, err := samcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (samcb *ScenicAreaMapCreateBulk) Exec(ctx context.Context) error {
	_, err := samcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (samcb *ScenicAreaMapCreateBulk) ExecX(ctx context.Context) {
	if err := samcb.Exec(ctx); err != nil {
		panic(err)
	}
}
