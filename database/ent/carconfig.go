// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jianbo-zh/jydata/database/ent/car"
	"github.com/jianbo-zh/jydata/database/ent/carconfig"
	"github.com/jianbo-zh/jydata/database/ent/carsmodels"
	"github.com/jianbo-zh/jydata/database/ent/scenicarea"
)

// CarConfig is the model entity for the CarConfig schema.
type CarConfig struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 景区ID
	ScenicAreaID *int `json:"scenic_area_id,omitempty"`
	// 型号ID
	ModelID *int `json:"model_id,omitempty"`
	// 车辆ID
	CarID *int `json:"car_id,omitempty"`
	// 适配车辆版本，*表示适配所有版本
	CarVersion string `json:"car_version,omitempty"`
	// 配置名称
	Name string `json:"name,omitempty"`
	// 配置备注
	Remark string `json:"remark,omitempty"`
	// 配置版本号
	Version string `json:"version,omitempty"`
	// 配置存储路径
	SavePath string `json:"save_path,omitempty"`
	// 配置类型（1-基础配置 2-景区配置 3-高精度地图 4-POI配置 5-CarUI）
	ContentType int `json:"content_type,omitempty"`
	// 配置内容字段（1-file_id 2-pbtext）
	ContentField int `json:"content_field,omitempty"`
	// 配置文件ID
	ContentFileID *int `json:"content_file_id,omitempty"`
	// 配置内容
	ContentPbtext string `json:"content_pbtext,omitempty"`
	// 内容sha1校验码
	ContentSha1 string `json:"content_sha1,omitempty"`
	// 资源清单列表
	ResourceFileIds []int `json:"resource_file_ids,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CarConfigQuery when eager-loading is set.
	Edges        CarConfigEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CarConfigEdges holds the relations/edges for other nodes in the graph.
type CarConfigEdges struct {
	// BackgroundScenicArea holds the value of the background_scenic_area edge.
	BackgroundScenicArea *ScenicArea `json:"background_scenic_area,omitempty"`
	// CarsModels holds the value of the cars_models edge.
	CarsModels *CarsModels `json:"cars_models,omitempty"`
	// Car holds the value of the car edge.
	Car *Car `json:"car,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// BackgroundScenicAreaOrErr returns the BackgroundScenicArea value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CarConfigEdges) BackgroundScenicAreaOrErr() (*ScenicArea, error) {
	if e.BackgroundScenicArea != nil {
		return e.BackgroundScenicArea, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: scenicarea.Label}
	}
	return nil, &NotLoadedError{edge: "background_scenic_area"}
}

// CarsModelsOrErr returns the CarsModels value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CarConfigEdges) CarsModelsOrErr() (*CarsModels, error) {
	if e.CarsModels != nil {
		return e.CarsModels, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: carsmodels.Label}
	}
	return nil, &NotLoadedError{edge: "cars_models"}
}

// CarOrErr returns the Car value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CarConfigEdges) CarOrErr() (*Car, error) {
	if e.Car != nil {
		return e.Car, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: car.Label}
	}
	return nil, &NotLoadedError{edge: "car"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CarConfig) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case carconfig.FieldResourceFileIds:
			values[i] = new([]byte)
		case carconfig.FieldID, carconfig.FieldScenicAreaID, carconfig.FieldModelID, carconfig.FieldCarID, carconfig.FieldContentType, carconfig.FieldContentField, carconfig.FieldContentFileID:
			values[i] = new(sql.NullInt64)
		case carconfig.FieldCarVersion, carconfig.FieldName, carconfig.FieldRemark, carconfig.FieldVersion, carconfig.FieldSavePath, carconfig.FieldContentPbtext, carconfig.FieldContentSha1:
			values[i] = new(sql.NullString)
		case carconfig.FieldCreateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CarConfig fields.
func (cc *CarConfig) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case carconfig.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cc.ID = int(value.Int64)
		case carconfig.FieldScenicAreaID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field scenic_area_id", values[i])
			} else if value.Valid {
				cc.ScenicAreaID = new(int)
				*cc.ScenicAreaID = int(value.Int64)
			}
		case carconfig.FieldModelID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field model_id", values[i])
			} else if value.Valid {
				cc.ModelID = new(int)
				*cc.ModelID = int(value.Int64)
			}
		case carconfig.FieldCarID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field car_id", values[i])
			} else if value.Valid {
				cc.CarID = new(int)
				*cc.CarID = int(value.Int64)
			}
		case carconfig.FieldCarVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field car_version", values[i])
			} else if value.Valid {
				cc.CarVersion = value.String
			}
		case carconfig.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				cc.Name = value.String
			}
		case carconfig.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				cc.Remark = value.String
			}
		case carconfig.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				cc.Version = value.String
			}
		case carconfig.FieldSavePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field save_path", values[i])
			} else if value.Valid {
				cc.SavePath = value.String
			}
		case carconfig.FieldContentType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field content_type", values[i])
			} else if value.Valid {
				cc.ContentType = int(value.Int64)
			}
		case carconfig.FieldContentField:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field content_field", values[i])
			} else if value.Valid {
				cc.ContentField = int(value.Int64)
			}
		case carconfig.FieldContentFileID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field content_file_id", values[i])
			} else if value.Valid {
				cc.ContentFileID = new(int)
				*cc.ContentFileID = int(value.Int64)
			}
		case carconfig.FieldContentPbtext:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content_pbtext", values[i])
			} else if value.Valid {
				cc.ContentPbtext = value.String
			}
		case carconfig.FieldContentSha1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content_sha1", values[i])
			} else if value.Valid {
				cc.ContentSha1 = value.String
			}
		case carconfig.FieldResourceFileIds:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field resource_file_ids", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &cc.ResourceFileIds); err != nil {
					return fmt.Errorf("unmarshal field resource_file_ids: %w", err)
				}
			}
		case carconfig.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				cc.CreateTime = value.Time
			}
		default:
			cc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CarConfig.
// This includes values selected through modifiers, order, etc.
func (cc *CarConfig) Value(name string) (ent.Value, error) {
	return cc.selectValues.Get(name)
}

// QueryBackgroundScenicArea queries the "background_scenic_area" edge of the CarConfig entity.
func (cc *CarConfig) QueryBackgroundScenicArea() *ScenicAreaQuery {
	return NewCarConfigClient(cc.config).QueryBackgroundScenicArea(cc)
}

// QueryCarsModels queries the "cars_models" edge of the CarConfig entity.
func (cc *CarConfig) QueryCarsModels() *CarsModelsQuery {
	return NewCarConfigClient(cc.config).QueryCarsModels(cc)
}

// QueryCar queries the "car" edge of the CarConfig entity.
func (cc *CarConfig) QueryCar() *CarQuery {
	return NewCarConfigClient(cc.config).QueryCar(cc)
}

// Update returns a builder for updating this CarConfig.
// Note that you need to call CarConfig.Unwrap() before calling this method if this CarConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (cc *CarConfig) Update() *CarConfigUpdateOne {
	return NewCarConfigClient(cc.config).UpdateOne(cc)
}

// Unwrap unwraps the CarConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cc *CarConfig) Unwrap() *CarConfig {
	_tx, ok := cc.config.driver.(*txDriver)
	if !ok {
		panic("ent: CarConfig is not a transactional entity")
	}
	cc.config.driver = _tx.drv
	return cc
}

// String implements the fmt.Stringer.
func (cc *CarConfig) String() string {
	var builder strings.Builder
	builder.WriteString("CarConfig(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cc.ID))
	if v := cc.ScenicAreaID; v != nil {
		builder.WriteString("scenic_area_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := cc.ModelID; v != nil {
		builder.WriteString("model_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := cc.CarID; v != nil {
		builder.WriteString("car_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("car_version=")
	builder.WriteString(cc.CarVersion)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(cc.Name)
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(cc.Remark)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(cc.Version)
	builder.WriteString(", ")
	builder.WriteString("save_path=")
	builder.WriteString(cc.SavePath)
	builder.WriteString(", ")
	builder.WriteString("content_type=")
	builder.WriteString(fmt.Sprintf("%v", cc.ContentType))
	builder.WriteString(", ")
	builder.WriteString("content_field=")
	builder.WriteString(fmt.Sprintf("%v", cc.ContentField))
	builder.WriteString(", ")
	if v := cc.ContentFileID; v != nil {
		builder.WriteString("content_file_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("content_pbtext=")
	builder.WriteString(cc.ContentPbtext)
	builder.WriteString(", ")
	builder.WriteString("content_sha1=")
	builder.WriteString(cc.ContentSha1)
	builder.WriteString(", ")
	builder.WriteString("resource_file_ids=")
	builder.WriteString(fmt.Sprintf("%v", cc.ResourceFileIds))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(cc.CreateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CarConfigs is a parsable slice of CarConfig.
type CarConfigs []*CarConfig
