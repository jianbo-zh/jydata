// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/carconfigstatus"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
)

// CarConfigStatusUpdate is the builder for updating CarConfigStatus entities.
type CarConfigStatusUpdate struct {
	config
	hooks    []Hook
	mutation *CarConfigStatusMutation
}

// Where appends a list predicates to the CarConfigStatusUpdate builder.
func (ccsu *CarConfigStatusUpdate) Where(ps ...predicate.CarConfigStatus) *CarConfigStatusUpdate {
	ccsu.mutation.Where(ps...)
	return ccsu
}

// SetCarID sets the "car_id" field.
func (ccsu *CarConfigStatusUpdate) SetCarID(i int) *CarConfigStatusUpdate {
	ccsu.mutation.ResetCarID()
	ccsu.mutation.SetCarID(i)
	return ccsu
}

// SetNillableCarID sets the "car_id" field if the given value is not nil.
func (ccsu *CarConfigStatusUpdate) SetNillableCarID(i *int) *CarConfigStatusUpdate {
	if i != nil {
		ccsu.SetCarID(*i)
	}
	return ccsu
}

// AddCarID adds i to the "car_id" field.
func (ccsu *CarConfigStatusUpdate) AddCarID(i int) *CarConfigStatusUpdate {
	ccsu.mutation.AddCarID(i)
	return ccsu
}

// SetDeviceID sets the "device_id" field.
func (ccsu *CarConfigStatusUpdate) SetDeviceID(s string) *CarConfigStatusUpdate {
	ccsu.mutation.SetDeviceID(s)
	return ccsu
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (ccsu *CarConfigStatusUpdate) SetNillableDeviceID(s *string) *CarConfigStatusUpdate {
	if s != nil {
		ccsu.SetDeviceID(*s)
	}
	return ccsu
}

// SetConfigPath sets the "config_path" field.
func (ccsu *CarConfigStatusUpdate) SetConfigPath(s string) *CarConfigStatusUpdate {
	ccsu.mutation.SetConfigPath(s)
	return ccsu
}

// SetNillableConfigPath sets the "config_path" field if the given value is not nil.
func (ccsu *CarConfigStatusUpdate) SetNillableConfigPath(s *string) *CarConfigStatusUpdate {
	if s != nil {
		ccsu.SetConfigPath(*s)
	}
	return ccsu
}

// SetVersion sets the "version" field.
func (ccsu *CarConfigStatusUpdate) SetVersion(s string) *CarConfigStatusUpdate {
	ccsu.mutation.SetVersion(s)
	return ccsu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (ccsu *CarConfigStatusUpdate) SetNillableVersion(s *string) *CarConfigStatusUpdate {
	if s != nil {
		ccsu.SetVersion(*s)
	}
	return ccsu
}

// SetRemark sets the "remark" field.
func (ccsu *CarConfigStatusUpdate) SetRemark(s string) *CarConfigStatusUpdate {
	ccsu.mutation.SetRemark(s)
	return ccsu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ccsu *CarConfigStatusUpdate) SetNillableRemark(s *string) *CarConfigStatusUpdate {
	if s != nil {
		ccsu.SetRemark(*s)
	}
	return ccsu
}

// SetUpdateTime sets the "update_time" field.
func (ccsu *CarConfigStatusUpdate) SetUpdateTime(t time.Time) *CarConfigStatusUpdate {
	ccsu.mutation.SetUpdateTime(t)
	return ccsu
}

// Mutation returns the CarConfigStatusMutation object of the builder.
func (ccsu *CarConfigStatusUpdate) Mutation() *CarConfigStatusMutation {
	return ccsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ccsu *CarConfigStatusUpdate) Save(ctx context.Context) (int, error) {
	ccsu.defaults()
	return withHooks(ctx, ccsu.sqlSave, ccsu.mutation, ccsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ccsu *CarConfigStatusUpdate) SaveX(ctx context.Context) int {
	affected, err := ccsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ccsu *CarConfigStatusUpdate) Exec(ctx context.Context) error {
	_, err := ccsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccsu *CarConfigStatusUpdate) ExecX(ctx context.Context) {
	if err := ccsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ccsu *CarConfigStatusUpdate) defaults() {
	if _, ok := ccsu.mutation.UpdateTime(); !ok {
		v := carconfigstatus.UpdateDefaultUpdateTime()
		ccsu.mutation.SetUpdateTime(v)
	}
}

func (ccsu *CarConfigStatusUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(carconfigstatus.Table, carconfigstatus.Columns, sqlgraph.NewFieldSpec(carconfigstatus.FieldID, field.TypeInt))
	if ps := ccsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccsu.mutation.CarID(); ok {
		_spec.SetField(carconfigstatus.FieldCarID, field.TypeInt, value)
	}
	if value, ok := ccsu.mutation.AddedCarID(); ok {
		_spec.AddField(carconfigstatus.FieldCarID, field.TypeInt, value)
	}
	if value, ok := ccsu.mutation.DeviceID(); ok {
		_spec.SetField(carconfigstatus.FieldDeviceID, field.TypeString, value)
	}
	if value, ok := ccsu.mutation.ConfigPath(); ok {
		_spec.SetField(carconfigstatus.FieldConfigPath, field.TypeString, value)
	}
	if value, ok := ccsu.mutation.Version(); ok {
		_spec.SetField(carconfigstatus.FieldVersion, field.TypeString, value)
	}
	if value, ok := ccsu.mutation.Remark(); ok {
		_spec.SetField(carconfigstatus.FieldRemark, field.TypeString, value)
	}
	if value, ok := ccsu.mutation.UpdateTime(); ok {
		_spec.SetField(carconfigstatus.FieldUpdateTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ccsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carconfigstatus.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ccsu.mutation.done = true
	return n, nil
}

// CarConfigStatusUpdateOne is the builder for updating a single CarConfigStatus entity.
type CarConfigStatusUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CarConfigStatusMutation
}

// SetCarID sets the "car_id" field.
func (ccsuo *CarConfigStatusUpdateOne) SetCarID(i int) *CarConfigStatusUpdateOne {
	ccsuo.mutation.ResetCarID()
	ccsuo.mutation.SetCarID(i)
	return ccsuo
}

// SetNillableCarID sets the "car_id" field if the given value is not nil.
func (ccsuo *CarConfigStatusUpdateOne) SetNillableCarID(i *int) *CarConfigStatusUpdateOne {
	if i != nil {
		ccsuo.SetCarID(*i)
	}
	return ccsuo
}

// AddCarID adds i to the "car_id" field.
func (ccsuo *CarConfigStatusUpdateOne) AddCarID(i int) *CarConfigStatusUpdateOne {
	ccsuo.mutation.AddCarID(i)
	return ccsuo
}

// SetDeviceID sets the "device_id" field.
func (ccsuo *CarConfigStatusUpdateOne) SetDeviceID(s string) *CarConfigStatusUpdateOne {
	ccsuo.mutation.SetDeviceID(s)
	return ccsuo
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (ccsuo *CarConfigStatusUpdateOne) SetNillableDeviceID(s *string) *CarConfigStatusUpdateOne {
	if s != nil {
		ccsuo.SetDeviceID(*s)
	}
	return ccsuo
}

// SetConfigPath sets the "config_path" field.
func (ccsuo *CarConfigStatusUpdateOne) SetConfigPath(s string) *CarConfigStatusUpdateOne {
	ccsuo.mutation.SetConfigPath(s)
	return ccsuo
}

// SetNillableConfigPath sets the "config_path" field if the given value is not nil.
func (ccsuo *CarConfigStatusUpdateOne) SetNillableConfigPath(s *string) *CarConfigStatusUpdateOne {
	if s != nil {
		ccsuo.SetConfigPath(*s)
	}
	return ccsuo
}

// SetVersion sets the "version" field.
func (ccsuo *CarConfigStatusUpdateOne) SetVersion(s string) *CarConfigStatusUpdateOne {
	ccsuo.mutation.SetVersion(s)
	return ccsuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (ccsuo *CarConfigStatusUpdateOne) SetNillableVersion(s *string) *CarConfigStatusUpdateOne {
	if s != nil {
		ccsuo.SetVersion(*s)
	}
	return ccsuo
}

// SetRemark sets the "remark" field.
func (ccsuo *CarConfigStatusUpdateOne) SetRemark(s string) *CarConfigStatusUpdateOne {
	ccsuo.mutation.SetRemark(s)
	return ccsuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ccsuo *CarConfigStatusUpdateOne) SetNillableRemark(s *string) *CarConfigStatusUpdateOne {
	if s != nil {
		ccsuo.SetRemark(*s)
	}
	return ccsuo
}

// SetUpdateTime sets the "update_time" field.
func (ccsuo *CarConfigStatusUpdateOne) SetUpdateTime(t time.Time) *CarConfigStatusUpdateOne {
	ccsuo.mutation.SetUpdateTime(t)
	return ccsuo
}

// Mutation returns the CarConfigStatusMutation object of the builder.
func (ccsuo *CarConfigStatusUpdateOne) Mutation() *CarConfigStatusMutation {
	return ccsuo.mutation
}

// Where appends a list predicates to the CarConfigStatusUpdate builder.
func (ccsuo *CarConfigStatusUpdateOne) Where(ps ...predicate.CarConfigStatus) *CarConfigStatusUpdateOne {
	ccsuo.mutation.Where(ps...)
	return ccsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ccsuo *CarConfigStatusUpdateOne) Select(field string, fields ...string) *CarConfigStatusUpdateOne {
	ccsuo.fields = append([]string{field}, fields...)
	return ccsuo
}

// Save executes the query and returns the updated CarConfigStatus entity.
func (ccsuo *CarConfigStatusUpdateOne) Save(ctx context.Context) (*CarConfigStatus, error) {
	ccsuo.defaults()
	return withHooks(ctx, ccsuo.sqlSave, ccsuo.mutation, ccsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ccsuo *CarConfigStatusUpdateOne) SaveX(ctx context.Context) *CarConfigStatus {
	node, err := ccsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ccsuo *CarConfigStatusUpdateOne) Exec(ctx context.Context) error {
	_, err := ccsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccsuo *CarConfigStatusUpdateOne) ExecX(ctx context.Context) {
	if err := ccsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ccsuo *CarConfigStatusUpdateOne) defaults() {
	if _, ok := ccsuo.mutation.UpdateTime(); !ok {
		v := carconfigstatus.UpdateDefaultUpdateTime()
		ccsuo.mutation.SetUpdateTime(v)
	}
}

func (ccsuo *CarConfigStatusUpdateOne) sqlSave(ctx context.Context) (_node *CarConfigStatus, err error) {
	_spec := sqlgraph.NewUpdateSpec(carconfigstatus.Table, carconfigstatus.Columns, sqlgraph.NewFieldSpec(carconfigstatus.FieldID, field.TypeInt))
	id, ok := ccsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CarConfigStatus.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ccsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carconfigstatus.FieldID)
		for _, f := range fields {
			if !carconfigstatus.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != carconfigstatus.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ccsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccsuo.mutation.CarID(); ok {
		_spec.SetField(carconfigstatus.FieldCarID, field.TypeInt, value)
	}
	if value, ok := ccsuo.mutation.AddedCarID(); ok {
		_spec.AddField(carconfigstatus.FieldCarID, field.TypeInt, value)
	}
	if value, ok := ccsuo.mutation.DeviceID(); ok {
		_spec.SetField(carconfigstatus.FieldDeviceID, field.TypeString, value)
	}
	if value, ok := ccsuo.mutation.ConfigPath(); ok {
		_spec.SetField(carconfigstatus.FieldConfigPath, field.TypeString, value)
	}
	if value, ok := ccsuo.mutation.Version(); ok {
		_spec.SetField(carconfigstatus.FieldVersion, field.TypeString, value)
	}
	if value, ok := ccsuo.mutation.Remark(); ok {
		_spec.SetField(carconfigstatus.FieldRemark, field.TypeString, value)
	}
	if value, ok := ccsuo.mutation.UpdateTime(); ok {
		_spec.SetField(carconfigstatus.FieldUpdateTime, field.TypeTime, value)
	}
	_node = &CarConfigStatus{config: ccsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ccsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carconfigstatus.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ccsuo.mutation.done = true
	return _node, nil
}
