// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/carlogupload"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
)

// CarLogUploadUpdate is the builder for updating CarLogUpload entities.
type CarLogUploadUpdate struct {
	config
	hooks    []Hook
	mutation *CarLogUploadMutation
}

// Where appends a list predicates to the CarLogUploadUpdate builder.
func (cluu *CarLogUploadUpdate) Where(ps ...predicate.CarLogUpload) *CarLogUploadUpdate {
	cluu.mutation.Where(ps...)
	return cluu
}

// SetUUID sets the "uuid" field.
func (cluu *CarLogUploadUpdate) SetUUID(i int64) *CarLogUploadUpdate {
	cluu.mutation.ResetUUID()
	cluu.mutation.SetUUID(i)
	return cluu
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (cluu *CarLogUploadUpdate) SetNillableUUID(i *int64) *CarLogUploadUpdate {
	if i != nil {
		cluu.SetUUID(*i)
	}
	return cluu
}

// AddUUID adds i to the "uuid" field.
func (cluu *CarLogUploadUpdate) AddUUID(i int64) *CarLogUploadUpdate {
	cluu.mutation.AddUUID(i)
	return cluu
}

// SetCarID sets the "car_id" field.
func (cluu *CarLogUploadUpdate) SetCarID(i int) *CarLogUploadUpdate {
	cluu.mutation.ResetCarID()
	cluu.mutation.SetCarID(i)
	return cluu
}

// SetNillableCarID sets the "car_id" field if the given value is not nil.
func (cluu *CarLogUploadUpdate) SetNillableCarID(i *int) *CarLogUploadUpdate {
	if i != nil {
		cluu.SetCarID(*i)
	}
	return cluu
}

// AddCarID adds i to the "car_id" field.
func (cluu *CarLogUploadUpdate) AddCarID(i int) *CarLogUploadUpdate {
	cluu.mutation.AddCarID(i)
	return cluu
}

// SetDeviceID sets the "device_id" field.
func (cluu *CarLogUploadUpdate) SetDeviceID(s string) *CarLogUploadUpdate {
	cluu.mutation.SetDeviceID(s)
	return cluu
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (cluu *CarLogUploadUpdate) SetNillableDeviceID(s *string) *CarLogUploadUpdate {
	if s != nil {
		cluu.SetDeviceID(*s)
	}
	return cluu
}

// SetUploadState sets the "upload_state" field.
func (cluu *CarLogUploadUpdate) SetUploadState(s string) *CarLogUploadUpdate {
	cluu.mutation.SetUploadState(s)
	return cluu
}

// SetNillableUploadState sets the "upload_state" field if the given value is not nil.
func (cluu *CarLogUploadUpdate) SetNillableUploadState(s *string) *CarLogUploadUpdate {
	if s != nil {
		cluu.SetUploadState(*s)
	}
	return cluu
}

// SetUploadProcess sets the "upload_process" field.
func (cluu *CarLogUploadUpdate) SetUploadProcess(i int) *CarLogUploadUpdate {
	cluu.mutation.ResetUploadProcess()
	cluu.mutation.SetUploadProcess(i)
	return cluu
}

// SetNillableUploadProcess sets the "upload_process" field if the given value is not nil.
func (cluu *CarLogUploadUpdate) SetNillableUploadProcess(i *int) *CarLogUploadUpdate {
	if i != nil {
		cluu.SetUploadProcess(*i)
	}
	return cluu
}

// AddUploadProcess adds i to the "upload_process" field.
func (cluu *CarLogUploadUpdate) AddUploadProcess(i int) *CarLogUploadUpdate {
	cluu.mutation.AddUploadProcess(i)
	return cluu
}

// SetDownloadURL sets the "download_url" field.
func (cluu *CarLogUploadUpdate) SetDownloadURL(s string) *CarLogUploadUpdate {
	cluu.mutation.SetDownloadURL(s)
	return cluu
}

// SetNillableDownloadURL sets the "download_url" field if the given value is not nil.
func (cluu *CarLogUploadUpdate) SetNillableDownloadURL(s *string) *CarLogUploadUpdate {
	if s != nil {
		cluu.SetDownloadURL(*s)
	}
	return cluu
}

// SetUpdateTime sets the "update_time" field.
func (cluu *CarLogUploadUpdate) SetUpdateTime(t time.Time) *CarLogUploadUpdate {
	cluu.mutation.SetUpdateTime(t)
	return cluu
}

// Mutation returns the CarLogUploadMutation object of the builder.
func (cluu *CarLogUploadUpdate) Mutation() *CarLogUploadMutation {
	return cluu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cluu *CarLogUploadUpdate) Save(ctx context.Context) (int, error) {
	cluu.defaults()
	return withHooks(ctx, cluu.sqlSave, cluu.mutation, cluu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cluu *CarLogUploadUpdate) SaveX(ctx context.Context) int {
	affected, err := cluu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cluu *CarLogUploadUpdate) Exec(ctx context.Context) error {
	_, err := cluu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cluu *CarLogUploadUpdate) ExecX(ctx context.Context) {
	if err := cluu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cluu *CarLogUploadUpdate) defaults() {
	if _, ok := cluu.mutation.UpdateTime(); !ok {
		v := carlogupload.UpdateDefaultUpdateTime()
		cluu.mutation.SetUpdateTime(v)
	}
}

func (cluu *CarLogUploadUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(carlogupload.Table, carlogupload.Columns, sqlgraph.NewFieldSpec(carlogupload.FieldID, field.TypeInt))
	if ps := cluu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cluu.mutation.UUID(); ok {
		_spec.SetField(carlogupload.FieldUUID, field.TypeInt64, value)
	}
	if value, ok := cluu.mutation.AddedUUID(); ok {
		_spec.AddField(carlogupload.FieldUUID, field.TypeInt64, value)
	}
	if value, ok := cluu.mutation.CarID(); ok {
		_spec.SetField(carlogupload.FieldCarID, field.TypeInt, value)
	}
	if value, ok := cluu.mutation.AddedCarID(); ok {
		_spec.AddField(carlogupload.FieldCarID, field.TypeInt, value)
	}
	if value, ok := cluu.mutation.DeviceID(); ok {
		_spec.SetField(carlogupload.FieldDeviceID, field.TypeString, value)
	}
	if value, ok := cluu.mutation.UploadState(); ok {
		_spec.SetField(carlogupload.FieldUploadState, field.TypeString, value)
	}
	if value, ok := cluu.mutation.UploadProcess(); ok {
		_spec.SetField(carlogupload.FieldUploadProcess, field.TypeInt, value)
	}
	if value, ok := cluu.mutation.AddedUploadProcess(); ok {
		_spec.AddField(carlogupload.FieldUploadProcess, field.TypeInt, value)
	}
	if value, ok := cluu.mutation.DownloadURL(); ok {
		_spec.SetField(carlogupload.FieldDownloadURL, field.TypeString, value)
	}
	if value, ok := cluu.mutation.UpdateTime(); ok {
		_spec.SetField(carlogupload.FieldUpdateTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cluu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carlogupload.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cluu.mutation.done = true
	return n, nil
}

// CarLogUploadUpdateOne is the builder for updating a single CarLogUpload entity.
type CarLogUploadUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CarLogUploadMutation
}

// SetUUID sets the "uuid" field.
func (cluuo *CarLogUploadUpdateOne) SetUUID(i int64) *CarLogUploadUpdateOne {
	cluuo.mutation.ResetUUID()
	cluuo.mutation.SetUUID(i)
	return cluuo
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (cluuo *CarLogUploadUpdateOne) SetNillableUUID(i *int64) *CarLogUploadUpdateOne {
	if i != nil {
		cluuo.SetUUID(*i)
	}
	return cluuo
}

// AddUUID adds i to the "uuid" field.
func (cluuo *CarLogUploadUpdateOne) AddUUID(i int64) *CarLogUploadUpdateOne {
	cluuo.mutation.AddUUID(i)
	return cluuo
}

// SetCarID sets the "car_id" field.
func (cluuo *CarLogUploadUpdateOne) SetCarID(i int) *CarLogUploadUpdateOne {
	cluuo.mutation.ResetCarID()
	cluuo.mutation.SetCarID(i)
	return cluuo
}

// SetNillableCarID sets the "car_id" field if the given value is not nil.
func (cluuo *CarLogUploadUpdateOne) SetNillableCarID(i *int) *CarLogUploadUpdateOne {
	if i != nil {
		cluuo.SetCarID(*i)
	}
	return cluuo
}

// AddCarID adds i to the "car_id" field.
func (cluuo *CarLogUploadUpdateOne) AddCarID(i int) *CarLogUploadUpdateOne {
	cluuo.mutation.AddCarID(i)
	return cluuo
}

// SetDeviceID sets the "device_id" field.
func (cluuo *CarLogUploadUpdateOne) SetDeviceID(s string) *CarLogUploadUpdateOne {
	cluuo.mutation.SetDeviceID(s)
	return cluuo
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (cluuo *CarLogUploadUpdateOne) SetNillableDeviceID(s *string) *CarLogUploadUpdateOne {
	if s != nil {
		cluuo.SetDeviceID(*s)
	}
	return cluuo
}

// SetUploadState sets the "upload_state" field.
func (cluuo *CarLogUploadUpdateOne) SetUploadState(s string) *CarLogUploadUpdateOne {
	cluuo.mutation.SetUploadState(s)
	return cluuo
}

// SetNillableUploadState sets the "upload_state" field if the given value is not nil.
func (cluuo *CarLogUploadUpdateOne) SetNillableUploadState(s *string) *CarLogUploadUpdateOne {
	if s != nil {
		cluuo.SetUploadState(*s)
	}
	return cluuo
}

// SetUploadProcess sets the "upload_process" field.
func (cluuo *CarLogUploadUpdateOne) SetUploadProcess(i int) *CarLogUploadUpdateOne {
	cluuo.mutation.ResetUploadProcess()
	cluuo.mutation.SetUploadProcess(i)
	return cluuo
}

// SetNillableUploadProcess sets the "upload_process" field if the given value is not nil.
func (cluuo *CarLogUploadUpdateOne) SetNillableUploadProcess(i *int) *CarLogUploadUpdateOne {
	if i != nil {
		cluuo.SetUploadProcess(*i)
	}
	return cluuo
}

// AddUploadProcess adds i to the "upload_process" field.
func (cluuo *CarLogUploadUpdateOne) AddUploadProcess(i int) *CarLogUploadUpdateOne {
	cluuo.mutation.AddUploadProcess(i)
	return cluuo
}

// SetDownloadURL sets the "download_url" field.
func (cluuo *CarLogUploadUpdateOne) SetDownloadURL(s string) *CarLogUploadUpdateOne {
	cluuo.mutation.SetDownloadURL(s)
	return cluuo
}

// SetNillableDownloadURL sets the "download_url" field if the given value is not nil.
func (cluuo *CarLogUploadUpdateOne) SetNillableDownloadURL(s *string) *CarLogUploadUpdateOne {
	if s != nil {
		cluuo.SetDownloadURL(*s)
	}
	return cluuo
}

// SetUpdateTime sets the "update_time" field.
func (cluuo *CarLogUploadUpdateOne) SetUpdateTime(t time.Time) *CarLogUploadUpdateOne {
	cluuo.mutation.SetUpdateTime(t)
	return cluuo
}

// Mutation returns the CarLogUploadMutation object of the builder.
func (cluuo *CarLogUploadUpdateOne) Mutation() *CarLogUploadMutation {
	return cluuo.mutation
}

// Where appends a list predicates to the CarLogUploadUpdate builder.
func (cluuo *CarLogUploadUpdateOne) Where(ps ...predicate.CarLogUpload) *CarLogUploadUpdateOne {
	cluuo.mutation.Where(ps...)
	return cluuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cluuo *CarLogUploadUpdateOne) Select(field string, fields ...string) *CarLogUploadUpdateOne {
	cluuo.fields = append([]string{field}, fields...)
	return cluuo
}

// Save executes the query and returns the updated CarLogUpload entity.
func (cluuo *CarLogUploadUpdateOne) Save(ctx context.Context) (*CarLogUpload, error) {
	cluuo.defaults()
	return withHooks(ctx, cluuo.sqlSave, cluuo.mutation, cluuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cluuo *CarLogUploadUpdateOne) SaveX(ctx context.Context) *CarLogUpload {
	node, err := cluuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cluuo *CarLogUploadUpdateOne) Exec(ctx context.Context) error {
	_, err := cluuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cluuo *CarLogUploadUpdateOne) ExecX(ctx context.Context) {
	if err := cluuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cluuo *CarLogUploadUpdateOne) defaults() {
	if _, ok := cluuo.mutation.UpdateTime(); !ok {
		v := carlogupload.UpdateDefaultUpdateTime()
		cluuo.mutation.SetUpdateTime(v)
	}
}

func (cluuo *CarLogUploadUpdateOne) sqlSave(ctx context.Context) (_node *CarLogUpload, err error) {
	_spec := sqlgraph.NewUpdateSpec(carlogupload.Table, carlogupload.Columns, sqlgraph.NewFieldSpec(carlogupload.FieldID, field.TypeInt))
	id, ok := cluuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CarLogUpload.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cluuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carlogupload.FieldID)
		for _, f := range fields {
			if !carlogupload.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != carlogupload.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cluuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cluuo.mutation.UUID(); ok {
		_spec.SetField(carlogupload.FieldUUID, field.TypeInt64, value)
	}
	if value, ok := cluuo.mutation.AddedUUID(); ok {
		_spec.AddField(carlogupload.FieldUUID, field.TypeInt64, value)
	}
	if value, ok := cluuo.mutation.CarID(); ok {
		_spec.SetField(carlogupload.FieldCarID, field.TypeInt, value)
	}
	if value, ok := cluuo.mutation.AddedCarID(); ok {
		_spec.AddField(carlogupload.FieldCarID, field.TypeInt, value)
	}
	if value, ok := cluuo.mutation.DeviceID(); ok {
		_spec.SetField(carlogupload.FieldDeviceID, field.TypeString, value)
	}
	if value, ok := cluuo.mutation.UploadState(); ok {
		_spec.SetField(carlogupload.FieldUploadState, field.TypeString, value)
	}
	if value, ok := cluuo.mutation.UploadProcess(); ok {
		_spec.SetField(carlogupload.FieldUploadProcess, field.TypeInt, value)
	}
	if value, ok := cluuo.mutation.AddedUploadProcess(); ok {
		_spec.AddField(carlogupload.FieldUploadProcess, field.TypeInt, value)
	}
	if value, ok := cluuo.mutation.DownloadURL(); ok {
		_spec.SetField(carlogupload.FieldDownloadURL, field.TypeString, value)
	}
	if value, ok := cluuo.mutation.UpdateTime(); ok {
		_spec.SetField(carlogupload.FieldUpdateTime, field.TypeTime, value)
	}
	_node = &CarLogUpload{config: cluuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cluuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carlogupload.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cluuo.mutation.done = true
	return _node, nil
}
