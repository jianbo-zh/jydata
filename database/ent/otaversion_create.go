// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/otaversion"
	"github.com/jianbo-zh/jydata/database/schema/types"
)

// OtaVersionCreate is the builder for creating a OtaVersion entity.
type OtaVersionCreate struct {
	config
	mutation *OtaVersionMutation
	hooks    []Hook
}

// SetDeleteTime sets the "delete_time" field.
func (ovc *OtaVersionCreate) SetDeleteTime(t time.Time) *OtaVersionCreate {
	ovc.mutation.SetDeleteTime(t)
	return ovc
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (ovc *OtaVersionCreate) SetNillableDeleteTime(t *time.Time) *OtaVersionCreate {
	if t != nil {
		ovc.SetDeleteTime(*t)
	}
	return ovc
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (ovc *OtaVersionCreate) SetScenicAreaID(i int) *OtaVersionCreate {
	ovc.mutation.SetScenicAreaID(i)
	return ovc
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (ovc *OtaVersionCreate) SetNillableScenicAreaID(i *int) *OtaVersionCreate {
	if i != nil {
		ovc.SetScenicAreaID(*i)
	}
	return ovc
}

// SetModelID sets the "model_id" field.
func (ovc *OtaVersionCreate) SetModelID(i int) *OtaVersionCreate {
	ovc.mutation.SetModelID(i)
	return ovc
}

// SetNillableModelID sets the "model_id" field if the given value is not nil.
func (ovc *OtaVersionCreate) SetNillableModelID(i *int) *OtaVersionCreate {
	if i != nil {
		ovc.SetModelID(*i)
	}
	return ovc
}

// SetName sets the "name" field.
func (ovc *OtaVersionCreate) SetName(s string) *OtaVersionCreate {
	ovc.mutation.SetName(s)
	return ovc
}

// SetVersion sets the "version" field.
func (ovc *OtaVersionCreate) SetVersion(s string) *OtaVersionCreate {
	ovc.mutation.SetVersion(s)
	return ovc
}

// SetContent sets the "content" field.
func (ovc *OtaVersionCreate) SetContent(tc types.OtaContent) *OtaVersionCreate {
	ovc.mutation.SetContent(tc)
	return ovc
}

// SetState sets the "state" field.
func (ovc *OtaVersionCreate) SetState(i int) *OtaVersionCreate {
	ovc.mutation.SetState(i)
	return ovc
}

// SetCreateTime sets the "create_time" field.
func (ovc *OtaVersionCreate) SetCreateTime(t time.Time) *OtaVersionCreate {
	ovc.mutation.SetCreateTime(t)
	return ovc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ovc *OtaVersionCreate) SetNillableCreateTime(t *time.Time) *OtaVersionCreate {
	if t != nil {
		ovc.SetCreateTime(*t)
	}
	return ovc
}

// SetUpdateTime sets the "update_time" field.
func (ovc *OtaVersionCreate) SetUpdateTime(t time.Time) *OtaVersionCreate {
	ovc.mutation.SetUpdateTime(t)
	return ovc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ovc *OtaVersionCreate) SetNillableUpdateTime(t *time.Time) *OtaVersionCreate {
	if t != nil {
		ovc.SetUpdateTime(*t)
	}
	return ovc
}

// SetID sets the "id" field.
func (ovc *OtaVersionCreate) SetID(i int) *OtaVersionCreate {
	ovc.mutation.SetID(i)
	return ovc
}

// Mutation returns the OtaVersionMutation object of the builder.
func (ovc *OtaVersionCreate) Mutation() *OtaVersionMutation {
	return ovc.mutation
}

// Save creates the OtaVersion in the database.
func (ovc *OtaVersionCreate) Save(ctx context.Context) (*OtaVersion, error) {
	if err := ovc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ovc.sqlSave, ovc.mutation, ovc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ovc *OtaVersionCreate) SaveX(ctx context.Context) *OtaVersion {
	v, err := ovc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ovc *OtaVersionCreate) Exec(ctx context.Context) error {
	_, err := ovc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ovc *OtaVersionCreate) ExecX(ctx context.Context) {
	if err := ovc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ovc *OtaVersionCreate) defaults() error {
	if _, ok := ovc.mutation.CreateTime(); !ok {
		if otaversion.DefaultCreateTime == nil {
			return fmt.Errorf("ent: uninitialized otaversion.DefaultCreateTime (forgotten import ent/runtime?)")
		}
		v := otaversion.DefaultCreateTime()
		ovc.mutation.SetCreateTime(v)
	}
	if _, ok := ovc.mutation.UpdateTime(); !ok {
		if otaversion.DefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized otaversion.DefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := otaversion.DefaultUpdateTime()
		ovc.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ovc *OtaVersionCreate) check() error {
	if _, ok := ovc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "OtaVersion.name"`)}
	}
	if _, ok := ovc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "OtaVersion.version"`)}
	}
	if _, ok := ovc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "OtaVersion.content"`)}
	}
	if _, ok := ovc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "OtaVersion.state"`)}
	}
	if _, ok := ovc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "OtaVersion.create_time"`)}
	}
	if _, ok := ovc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "OtaVersion.update_time"`)}
	}
	return nil
}

func (ovc *OtaVersionCreate) sqlSave(ctx context.Context) (*OtaVersion, error) {
	if err := ovc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ovc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ovc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	ovc.mutation.id = &_node.ID
	ovc.mutation.done = true
	return _node, nil
}

func (ovc *OtaVersionCreate) createSpec() (*OtaVersion, *sqlgraph.CreateSpec) {
	var (
		_node = &OtaVersion{config: ovc.config}
		_spec = sqlgraph.NewCreateSpec(otaversion.Table, sqlgraph.NewFieldSpec(otaversion.FieldID, field.TypeInt))
	)
	if id, ok := ovc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ovc.mutation.DeleteTime(); ok {
		_spec.SetField(otaversion.FieldDeleteTime, field.TypeTime, value)
		_node.DeleteTime = value
	}
	if value, ok := ovc.mutation.ScenicAreaID(); ok {
		_spec.SetField(otaversion.FieldScenicAreaID, field.TypeInt, value)
		_node.ScenicAreaID = &value
	}
	if value, ok := ovc.mutation.ModelID(); ok {
		_spec.SetField(otaversion.FieldModelID, field.TypeInt, value)
		_node.ModelID = &value
	}
	if value, ok := ovc.mutation.Name(); ok {
		_spec.SetField(otaversion.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ovc.mutation.Version(); ok {
		_spec.SetField(otaversion.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := ovc.mutation.Content(); ok {
		_spec.SetField(otaversion.FieldContent, field.TypeJSON, value)
		_node.Content = value
	}
	if value, ok := ovc.mutation.State(); ok {
		_spec.SetField(otaversion.FieldState, field.TypeInt, value)
		_node.State = value
	}
	if value, ok := ovc.mutation.CreateTime(); ok {
		_spec.SetField(otaversion.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := ovc.mutation.UpdateTime(); ok {
		_spec.SetField(otaversion.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// OtaVersionCreateBulk is the builder for creating many OtaVersion entities in bulk.
type OtaVersionCreateBulk struct {
	config
	err      error
	builders []*OtaVersionCreate
}

// Save creates the OtaVersion entities in the database.
func (ovcb *OtaVersionCreateBulk) Save(ctx context.Context) ([]*OtaVersion, error) {
	if ovcb.err != nil {
		return nil, ovcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ovcb.builders))
	nodes := make([]*OtaVersion, len(ovcb.builders))
	mutators := make([]Mutator, len(ovcb.builders))
	for i := range ovcb.builders {
		func(i int, root context.Context) {
			builder := ovcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OtaVersionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ovcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ovcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ovcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ovcb *OtaVersionCreateBulk) SaveX(ctx context.Context) []*OtaVersion {
	v, err := ovcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ovcb *OtaVersionCreateBulk) Exec(ctx context.Context) error {
	_, err := ovcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ovcb *OtaVersionCreateBulk) ExecX(ctx context.Context) {
	if err := ovcb.Exec(ctx); err != nil {
		panic(err)
	}
}
