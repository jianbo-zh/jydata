// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/paymentaccount"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
)

// PaymentAccountUpdate is the builder for updating PaymentAccount entities.
type PaymentAccountUpdate struct {
	config
	hooks    []Hook
	mutation *PaymentAccountMutation
}

// Where appends a list predicates to the PaymentAccountUpdate builder.
func (pau *PaymentAccountUpdate) Where(ps ...predicate.PaymentAccount) *PaymentAccountUpdate {
	pau.mutation.Where(ps...)
	return pau
}

// SetMchName sets the "mch_name" field.
func (pau *PaymentAccountUpdate) SetMchName(s string) *PaymentAccountUpdate {
	pau.mutation.SetMchName(s)
	return pau
}

// SetNillableMchName sets the "mch_name" field if the given value is not nil.
func (pau *PaymentAccountUpdate) SetNillableMchName(s *string) *PaymentAccountUpdate {
	if s != nil {
		pau.SetMchName(*s)
	}
	return pau
}

// SetMchID sets the "mch_id" field.
func (pau *PaymentAccountUpdate) SetMchID(s string) *PaymentAccountUpdate {
	pau.mutation.SetMchID(s)
	return pau
}

// SetNillableMchID sets the "mch_id" field if the given value is not nil.
func (pau *PaymentAccountUpdate) SetNillableMchID(s *string) *PaymentAccountUpdate {
	if s != nil {
		pau.SetMchID(*s)
	}
	return pau
}

// SetMchCertSn sets the "mch_cert_sn" field.
func (pau *PaymentAccountUpdate) SetMchCertSn(s string) *PaymentAccountUpdate {
	pau.mutation.SetMchCertSn(s)
	return pau
}

// SetNillableMchCertSn sets the "mch_cert_sn" field if the given value is not nil.
func (pau *PaymentAccountUpdate) SetNillableMchCertSn(s *string) *PaymentAccountUpdate {
	if s != nil {
		pau.SetMchCertSn(*s)
	}
	return pau
}

// SetMchApiv3Key sets the "mch_apiv3_key" field.
func (pau *PaymentAccountUpdate) SetMchApiv3Key(s string) *PaymentAccountUpdate {
	pau.mutation.SetMchApiv3Key(s)
	return pau
}

// SetNillableMchApiv3Key sets the "mch_apiv3_key" field if the given value is not nil.
func (pau *PaymentAccountUpdate) SetNillableMchApiv3Key(s *string) *PaymentAccountUpdate {
	if s != nil {
		pau.SetMchApiv3Key(*s)
	}
	return pau
}

// SetMchPrivateKey sets the "mch_private_key" field.
func (pau *PaymentAccountUpdate) SetMchPrivateKey(s string) *PaymentAccountUpdate {
	pau.mutation.SetMchPrivateKey(s)
	return pau
}

// SetNillableMchPrivateKey sets the "mch_private_key" field if the given value is not nil.
func (pau *PaymentAccountUpdate) SetNillableMchPrivateKey(s *string) *PaymentAccountUpdate {
	if s != nil {
		pau.SetMchPrivateKey(*s)
	}
	return pau
}

// SetUpdateTime sets the "update_time" field.
func (pau *PaymentAccountUpdate) SetUpdateTime(t time.Time) *PaymentAccountUpdate {
	pau.mutation.SetUpdateTime(t)
	return pau
}

// Mutation returns the PaymentAccountMutation object of the builder.
func (pau *PaymentAccountUpdate) Mutation() *PaymentAccountMutation {
	return pau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pau *PaymentAccountUpdate) Save(ctx context.Context) (int, error) {
	pau.defaults()
	return withHooks(ctx, pau.sqlSave, pau.mutation, pau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pau *PaymentAccountUpdate) SaveX(ctx context.Context) int {
	affected, err := pau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pau *PaymentAccountUpdate) Exec(ctx context.Context) error {
	_, err := pau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pau *PaymentAccountUpdate) ExecX(ctx context.Context) {
	if err := pau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pau *PaymentAccountUpdate) defaults() {
	if _, ok := pau.mutation.UpdateTime(); !ok {
		v := paymentaccount.UpdateDefaultUpdateTime()
		pau.mutation.SetUpdateTime(v)
	}
}

func (pau *PaymentAccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(paymentaccount.Table, paymentaccount.Columns, sqlgraph.NewFieldSpec(paymentaccount.FieldID, field.TypeInt))
	if ps := pau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pau.mutation.MchName(); ok {
		_spec.SetField(paymentaccount.FieldMchName, field.TypeString, value)
	}
	if value, ok := pau.mutation.MchID(); ok {
		_spec.SetField(paymentaccount.FieldMchID, field.TypeString, value)
	}
	if value, ok := pau.mutation.MchCertSn(); ok {
		_spec.SetField(paymentaccount.FieldMchCertSn, field.TypeString, value)
	}
	if value, ok := pau.mutation.MchApiv3Key(); ok {
		_spec.SetField(paymentaccount.FieldMchApiv3Key, field.TypeString, value)
	}
	if value, ok := pau.mutation.MchPrivateKey(); ok {
		_spec.SetField(paymentaccount.FieldMchPrivateKey, field.TypeString, value)
	}
	if value, ok := pau.mutation.UpdateTime(); ok {
		_spec.SetField(paymentaccount.FieldUpdateTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymentaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pau.mutation.done = true
	return n, nil
}

// PaymentAccountUpdateOne is the builder for updating a single PaymentAccount entity.
type PaymentAccountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PaymentAccountMutation
}

// SetMchName sets the "mch_name" field.
func (pauo *PaymentAccountUpdateOne) SetMchName(s string) *PaymentAccountUpdateOne {
	pauo.mutation.SetMchName(s)
	return pauo
}

// SetNillableMchName sets the "mch_name" field if the given value is not nil.
func (pauo *PaymentAccountUpdateOne) SetNillableMchName(s *string) *PaymentAccountUpdateOne {
	if s != nil {
		pauo.SetMchName(*s)
	}
	return pauo
}

// SetMchID sets the "mch_id" field.
func (pauo *PaymentAccountUpdateOne) SetMchID(s string) *PaymentAccountUpdateOne {
	pauo.mutation.SetMchID(s)
	return pauo
}

// SetNillableMchID sets the "mch_id" field if the given value is not nil.
func (pauo *PaymentAccountUpdateOne) SetNillableMchID(s *string) *PaymentAccountUpdateOne {
	if s != nil {
		pauo.SetMchID(*s)
	}
	return pauo
}

// SetMchCertSn sets the "mch_cert_sn" field.
func (pauo *PaymentAccountUpdateOne) SetMchCertSn(s string) *PaymentAccountUpdateOne {
	pauo.mutation.SetMchCertSn(s)
	return pauo
}

// SetNillableMchCertSn sets the "mch_cert_sn" field if the given value is not nil.
func (pauo *PaymentAccountUpdateOne) SetNillableMchCertSn(s *string) *PaymentAccountUpdateOne {
	if s != nil {
		pauo.SetMchCertSn(*s)
	}
	return pauo
}

// SetMchApiv3Key sets the "mch_apiv3_key" field.
func (pauo *PaymentAccountUpdateOne) SetMchApiv3Key(s string) *PaymentAccountUpdateOne {
	pauo.mutation.SetMchApiv3Key(s)
	return pauo
}

// SetNillableMchApiv3Key sets the "mch_apiv3_key" field if the given value is not nil.
func (pauo *PaymentAccountUpdateOne) SetNillableMchApiv3Key(s *string) *PaymentAccountUpdateOne {
	if s != nil {
		pauo.SetMchApiv3Key(*s)
	}
	return pauo
}

// SetMchPrivateKey sets the "mch_private_key" field.
func (pauo *PaymentAccountUpdateOne) SetMchPrivateKey(s string) *PaymentAccountUpdateOne {
	pauo.mutation.SetMchPrivateKey(s)
	return pauo
}

// SetNillableMchPrivateKey sets the "mch_private_key" field if the given value is not nil.
func (pauo *PaymentAccountUpdateOne) SetNillableMchPrivateKey(s *string) *PaymentAccountUpdateOne {
	if s != nil {
		pauo.SetMchPrivateKey(*s)
	}
	return pauo
}

// SetUpdateTime sets the "update_time" field.
func (pauo *PaymentAccountUpdateOne) SetUpdateTime(t time.Time) *PaymentAccountUpdateOne {
	pauo.mutation.SetUpdateTime(t)
	return pauo
}

// Mutation returns the PaymentAccountMutation object of the builder.
func (pauo *PaymentAccountUpdateOne) Mutation() *PaymentAccountMutation {
	return pauo.mutation
}

// Where appends a list predicates to the PaymentAccountUpdate builder.
func (pauo *PaymentAccountUpdateOne) Where(ps ...predicate.PaymentAccount) *PaymentAccountUpdateOne {
	pauo.mutation.Where(ps...)
	return pauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pauo *PaymentAccountUpdateOne) Select(field string, fields ...string) *PaymentAccountUpdateOne {
	pauo.fields = append([]string{field}, fields...)
	return pauo
}

// Save executes the query and returns the updated PaymentAccount entity.
func (pauo *PaymentAccountUpdateOne) Save(ctx context.Context) (*PaymentAccount, error) {
	pauo.defaults()
	return withHooks(ctx, pauo.sqlSave, pauo.mutation, pauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pauo *PaymentAccountUpdateOne) SaveX(ctx context.Context) *PaymentAccount {
	node, err := pauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pauo *PaymentAccountUpdateOne) Exec(ctx context.Context) error {
	_, err := pauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pauo *PaymentAccountUpdateOne) ExecX(ctx context.Context) {
	if err := pauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pauo *PaymentAccountUpdateOne) defaults() {
	if _, ok := pauo.mutation.UpdateTime(); !ok {
		v := paymentaccount.UpdateDefaultUpdateTime()
		pauo.mutation.SetUpdateTime(v)
	}
}

func (pauo *PaymentAccountUpdateOne) sqlSave(ctx context.Context) (_node *PaymentAccount, err error) {
	_spec := sqlgraph.NewUpdateSpec(paymentaccount.Table, paymentaccount.Columns, sqlgraph.NewFieldSpec(paymentaccount.FieldID, field.TypeInt))
	id, ok := pauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PaymentAccount.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, paymentaccount.FieldID)
		for _, f := range fields {
			if !paymentaccount.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != paymentaccount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pauo.mutation.MchName(); ok {
		_spec.SetField(paymentaccount.FieldMchName, field.TypeString, value)
	}
	if value, ok := pauo.mutation.MchID(); ok {
		_spec.SetField(paymentaccount.FieldMchID, field.TypeString, value)
	}
	if value, ok := pauo.mutation.MchCertSn(); ok {
		_spec.SetField(paymentaccount.FieldMchCertSn, field.TypeString, value)
	}
	if value, ok := pauo.mutation.MchApiv3Key(); ok {
		_spec.SetField(paymentaccount.FieldMchApiv3Key, field.TypeString, value)
	}
	if value, ok := pauo.mutation.MchPrivateKey(); ok {
		_spec.SetField(paymentaccount.FieldMchPrivateKey, field.TypeString, value)
	}
	if value, ok := pauo.mutation.UpdateTime(); ok {
		_spec.SetField(paymentaccount.FieldUpdateTime, field.TypeTime, value)
	}
	_node = &PaymentAccount{config: pauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymentaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pauo.mutation.done = true
	return _node, nil
}
