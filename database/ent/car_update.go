// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/car"
	"github.com/jianbo-zh/jydata/database/ent/carconfig"
	"github.com/jianbo-zh/jydata/database/ent/carconfigdownload"
	"github.com/jianbo-zh/jydata/database/ent/carsmodels"
	"github.com/jianbo-zh/jydata/database/ent/carsoperatelog"
	"github.com/jianbo-zh/jydata/database/ent/order"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"github.com/jianbo-zh/jydata/database/ent/scenicarea"
	"github.com/jianbo-zh/jydata/database/ent/schetask"
	"github.com/jianbo-zh/jydata/database/ent/statshourlycar"
)

// CarUpdate is the builder for updating Car entities.
type CarUpdate struct {
	config
	hooks    []Hook
	mutation *CarMutation
}

// Where appends a list predicates to the CarUpdate builder.
func (cu *CarUpdate) Where(ps ...predicate.Car) *CarUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetDeleteTime sets the "delete_time" field.
func (cu *CarUpdate) SetDeleteTime(t time.Time) *CarUpdate {
	cu.mutation.SetDeleteTime(t)
	return cu
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (cu *CarUpdate) SetNillableDeleteTime(t *time.Time) *CarUpdate {
	if t != nil {
		cu.SetDeleteTime(*t)
	}
	return cu
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (cu *CarUpdate) ClearDeleteTime() *CarUpdate {
	cu.mutation.ClearDeleteTime()
	return cu
}

// SetOperationMode sets the "operation_mode" field.
func (cu *CarUpdate) SetOperationMode(i int) *CarUpdate {
	cu.mutation.ResetOperationMode()
	cu.mutation.SetOperationMode(i)
	return cu
}

// SetNillableOperationMode sets the "operation_mode" field if the given value is not nil.
func (cu *CarUpdate) SetNillableOperationMode(i *int) *CarUpdate {
	if i != nil {
		cu.SetOperationMode(*i)
	}
	return cu
}

// AddOperationMode adds i to the "operation_mode" field.
func (cu *CarUpdate) AddOperationMode(i int) *CarUpdate {
	cu.mutation.AddOperationMode(i)
	return cu
}

// SetCarName sets the "car_name" field.
func (cu *CarUpdate) SetCarName(s string) *CarUpdate {
	cu.mutation.SetCarName(s)
	return cu
}

// SetNillableCarName sets the "car_name" field if the given value is not nil.
func (cu *CarUpdate) SetNillableCarName(s *string) *CarUpdate {
	if s != nil {
		cu.SetCarName(*s)
	}
	return cu
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (cu *CarUpdate) SetScenicAreaID(i int) *CarUpdate {
	cu.mutation.SetScenicAreaID(i)
	return cu
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (cu *CarUpdate) SetNillableScenicAreaID(i *int) *CarUpdate {
	if i != nil {
		cu.SetScenicAreaID(*i)
	}
	return cu
}

// SetDeviceID sets the "device_id" field.
func (cu *CarUpdate) SetDeviceID(s string) *CarUpdate {
	cu.mutation.SetDeviceID(s)
	return cu
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (cu *CarUpdate) SetNillableDeviceID(s *string) *CarUpdate {
	if s != nil {
		cu.SetDeviceID(*s)
	}
	return cu
}

// SetModelID sets the "model_id" field.
func (cu *CarUpdate) SetModelID(i int) *CarUpdate {
	cu.mutation.SetModelID(i)
	return cu
}

// SetNillableModelID sets the "model_id" field if the given value is not nil.
func (cu *CarUpdate) SetNillableModelID(i *int) *CarUpdate {
	if i != nil {
		cu.SetModelID(*i)
	}
	return cu
}

// SetImages sets the "images" field.
func (cu *CarUpdate) SetImages(i []int) *CarUpdate {
	cu.mutation.SetImages(i)
	return cu
}

// AppendImages appends i to the "images" field.
func (cu *CarUpdate) AppendImages(i []int) *CarUpdate {
	cu.mutation.AppendImages(i)
	return cu
}

// SetLicensePlate sets the "license_plate" field.
func (cu *CarUpdate) SetLicensePlate(s string) *CarUpdate {
	cu.mutation.SetLicensePlate(s)
	return cu
}

// SetNillableLicensePlate sets the "license_plate" field if the given value is not nil.
func (cu *CarUpdate) SetNillableLicensePlate(s *string) *CarUpdate {
	if s != nil {
		cu.SetLicensePlate(*s)
	}
	return cu
}

// SetPassengers sets the "passengers" field.
func (cu *CarUpdate) SetPassengers(i int) *CarUpdate {
	cu.mutation.ResetPassengers()
	cu.mutation.SetPassengers(i)
	return cu
}

// SetNillablePassengers sets the "passengers" field if the given value is not nil.
func (cu *CarUpdate) SetNillablePassengers(i *int) *CarUpdate {
	if i != nil {
		cu.SetPassengers(*i)
	}
	return cu
}

// AddPassengers adds i to the "passengers" field.
func (cu *CarUpdate) AddPassengers(i int) *CarUpdate {
	cu.mutation.AddPassengers(i)
	return cu
}

// SetReservedSeats sets the "reserved_seats" field.
func (cu *CarUpdate) SetReservedSeats(i int) *CarUpdate {
	cu.mutation.ResetReservedSeats()
	cu.mutation.SetReservedSeats(i)
	return cu
}

// SetNillableReservedSeats sets the "reserved_seats" field if the given value is not nil.
func (cu *CarUpdate) SetNillableReservedSeats(i *int) *CarUpdate {
	if i != nil {
		cu.SetReservedSeats(*i)
	}
	return cu
}

// AddReservedSeats adds i to the "reserved_seats" field.
func (cu *CarUpdate) AddReservedSeats(i int) *CarUpdate {
	cu.mutation.AddReservedSeats(i)
	return cu
}

// SetProduceTime sets the "produce_time" field.
func (cu *CarUpdate) SetProduceTime(t time.Time) *CarUpdate {
	cu.mutation.SetProduceTime(t)
	return cu
}

// SetNillableProduceTime sets the "produce_time" field if the given value is not nil.
func (cu *CarUpdate) SetNillableProduceTime(t *time.Time) *CarUpdate {
	if t != nil {
		cu.SetProduceTime(*t)
	}
	return cu
}

// SetPowerThreshold sets the "power_threshold" field.
func (cu *CarUpdate) SetPowerThreshold(i int) *CarUpdate {
	cu.mutation.ResetPowerThreshold()
	cu.mutation.SetPowerThreshold(i)
	return cu
}

// SetNillablePowerThreshold sets the "power_threshold" field if the given value is not nil.
func (cu *CarUpdate) SetNillablePowerThreshold(i *int) *CarUpdate {
	if i != nil {
		cu.SetPowerThreshold(*i)
	}
	return cu
}

// AddPowerThreshold adds i to the "power_threshold" field.
func (cu *CarUpdate) AddPowerThreshold(i int) *CarUpdate {
	cu.mutation.AddPowerThreshold(i)
	return cu
}

// SetActivateCode sets the "activate_code" field.
func (cu *CarUpdate) SetActivateCode(s string) *CarUpdate {
	cu.mutation.SetActivateCode(s)
	return cu
}

// SetNillableActivateCode sets the "activate_code" field if the given value is not nil.
func (cu *CarUpdate) SetNillableActivateCode(s *string) *CarUpdate {
	if s != nil {
		cu.SetActivateCode(*s)
	}
	return cu
}

// SetState sets the "state" field.
func (cu *CarUpdate) SetState(i int) *CarUpdate {
	cu.mutation.ResetState()
	cu.mutation.SetState(i)
	return cu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (cu *CarUpdate) SetNillableState(i *int) *CarUpdate {
	if i != nil {
		cu.SetState(*i)
	}
	return cu
}

// AddState adds i to the "state" field.
func (cu *CarUpdate) AddState(i int) *CarUpdate {
	cu.mutation.AddState(i)
	return cu
}

// SetUseState sets the "use_state" field.
func (cu *CarUpdate) SetUseState(i int) *CarUpdate {
	cu.mutation.ResetUseState()
	cu.mutation.SetUseState(i)
	return cu
}

// SetNillableUseState sets the "use_state" field if the given value is not nil.
func (cu *CarUpdate) SetNillableUseState(i *int) *CarUpdate {
	if i != nil {
		cu.SetUseState(*i)
	}
	return cu
}

// AddUseState adds i to the "use_state" field.
func (cu *CarUpdate) AddUseState(i int) *CarUpdate {
	cu.mutation.AddUseState(i)
	return cu
}

// SetDrivingState sets the "driving_state" field.
func (cu *CarUpdate) SetDrivingState(i int) *CarUpdate {
	cu.mutation.ResetDrivingState()
	cu.mutation.SetDrivingState(i)
	return cu
}

// SetNillableDrivingState sets the "driving_state" field if the given value is not nil.
func (cu *CarUpdate) SetNillableDrivingState(i *int) *CarUpdate {
	if i != nil {
		cu.SetDrivingState(*i)
	}
	return cu
}

// AddDrivingState adds i to the "driving_state" field.
func (cu *CarUpdate) AddDrivingState(i int) *CarUpdate {
	cu.mutation.AddDrivingState(i)
	return cu
}

// SetEmergencyState sets the "emergency_state" field.
func (cu *CarUpdate) SetEmergencyState(i int) *CarUpdate {
	cu.mutation.ResetEmergencyState()
	cu.mutation.SetEmergencyState(i)
	return cu
}

// SetNillableEmergencyState sets the "emergency_state" field if the given value is not nil.
func (cu *CarUpdate) SetNillableEmergencyState(i *int) *CarUpdate {
	if i != nil {
		cu.SetEmergencyState(*i)
	}
	return cu
}

// AddEmergencyState adds i to the "emergency_state" field.
func (cu *CarUpdate) AddEmergencyState(i int) *CarUpdate {
	cu.mutation.AddEmergencyState(i)
	return cu
}

// SetUseOrderID sets the "use_order_id" field.
func (cu *CarUpdate) SetUseOrderID(i int) *CarUpdate {
	cu.mutation.ResetUseOrderID()
	cu.mutation.SetUseOrderID(i)
	return cu
}

// SetNillableUseOrderID sets the "use_order_id" field if the given value is not nil.
func (cu *CarUpdate) SetNillableUseOrderID(i *int) *CarUpdate {
	if i != nil {
		cu.SetUseOrderID(*i)
	}
	return cu
}

// AddUseOrderID adds i to the "use_order_id" field.
func (cu *CarUpdate) AddUseOrderID(i int) *CarUpdate {
	cu.mutation.AddUseOrderID(i)
	return cu
}

// SetUseFlightID sets the "use_flight_id" field.
func (cu *CarUpdate) SetUseFlightID(i int) *CarUpdate {
	cu.mutation.ResetUseFlightID()
	cu.mutation.SetUseFlightID(i)
	return cu
}

// SetNillableUseFlightID sets the "use_flight_id" field if the given value is not nil.
func (cu *CarUpdate) SetNillableUseFlightID(i *int) *CarUpdate {
	if i != nil {
		cu.SetUseFlightID(*i)
	}
	return cu
}

// AddUseFlightID adds i to the "use_flight_id" field.
func (cu *CarUpdate) AddUseFlightID(i int) *CarUpdate {
	cu.mutation.AddUseFlightID(i)
	return cu
}

// SetDispatchTaskID sets the "dispatch_task_id" field.
func (cu *CarUpdate) SetDispatchTaskID(i int) *CarUpdate {
	cu.mutation.ResetDispatchTaskID()
	cu.mutation.SetDispatchTaskID(i)
	return cu
}

// SetNillableDispatchTaskID sets the "dispatch_task_id" field if the given value is not nil.
func (cu *CarUpdate) SetNillableDispatchTaskID(i *int) *CarUpdate {
	if i != nil {
		cu.SetDispatchTaskID(*i)
	}
	return cu
}

// AddDispatchTaskID adds i to the "dispatch_task_id" field.
func (cu *CarUpdate) AddDispatchTaskID(i int) *CarUpdate {
	cu.mutation.AddDispatchTaskID(i)
	return cu
}

// SetDispatchScheMode sets the "dispatch_sche_mode" field.
func (cu *CarUpdate) SetDispatchScheMode(i int) *CarUpdate {
	cu.mutation.ResetDispatchScheMode()
	cu.mutation.SetDispatchScheMode(i)
	return cu
}

// SetNillableDispatchScheMode sets the "dispatch_sche_mode" field if the given value is not nil.
func (cu *CarUpdate) SetNillableDispatchScheMode(i *int) *CarUpdate {
	if i != nil {
		cu.SetDispatchScheMode(*i)
	}
	return cu
}

// AddDispatchScheMode adds i to the "dispatch_sche_mode" field.
func (cu *CarUpdate) AddDispatchScheMode(i int) *CarUpdate {
	cu.mutation.AddDispatchScheMode(i)
	return cu
}

// SetBindOrderCount sets the "bind_order_count" field.
func (cu *CarUpdate) SetBindOrderCount(i int) *CarUpdate {
	cu.mutation.ResetBindOrderCount()
	cu.mutation.SetBindOrderCount(i)
	return cu
}

// SetNillableBindOrderCount sets the "bind_order_count" field if the given value is not nil.
func (cu *CarUpdate) SetNillableBindOrderCount(i *int) *CarUpdate {
	if i != nil {
		cu.SetBindOrderCount(*i)
	}
	return cu
}

// AddBindOrderCount adds i to the "bind_order_count" field.
func (cu *CarUpdate) AddBindOrderCount(i int) *CarUpdate {
	cu.mutation.AddBindOrderCount(i)
	return cu
}

// SetTotalOrderMileage sets the "total_order_mileage" field.
func (cu *CarUpdate) SetTotalOrderMileage(i int) *CarUpdate {
	cu.mutation.ResetTotalOrderMileage()
	cu.mutation.SetTotalOrderMileage(i)
	return cu
}

// SetNillableTotalOrderMileage sets the "total_order_mileage" field if the given value is not nil.
func (cu *CarUpdate) SetNillableTotalOrderMileage(i *int) *CarUpdate {
	if i != nil {
		cu.SetTotalOrderMileage(*i)
	}
	return cu
}

// AddTotalOrderMileage adds i to the "total_order_mileage" field.
func (cu *CarUpdate) AddTotalOrderMileage(i int) *CarUpdate {
	cu.mutation.AddTotalOrderMileage(i)
	return cu
}

// SetTotalOrderTime sets the "total_order_time" field.
func (cu *CarUpdate) SetTotalOrderTime(i int) *CarUpdate {
	cu.mutation.ResetTotalOrderTime()
	cu.mutation.SetTotalOrderTime(i)
	return cu
}

// SetNillableTotalOrderTime sets the "total_order_time" field if the given value is not nil.
func (cu *CarUpdate) SetNillableTotalOrderTime(i *int) *CarUpdate {
	if i != nil {
		cu.SetTotalOrderTime(*i)
	}
	return cu
}

// AddTotalOrderTime adds i to the "total_order_time" field.
func (cu *CarUpdate) AddTotalOrderTime(i int) *CarUpdate {
	cu.mutation.AddTotalOrderTime(i)
	return cu
}

// SetTotalOrderCount sets the "total_order_count" field.
func (cu *CarUpdate) SetTotalOrderCount(i int) *CarUpdate {
	cu.mutation.ResetTotalOrderCount()
	cu.mutation.SetTotalOrderCount(i)
	return cu
}

// SetNillableTotalOrderCount sets the "total_order_count" field if the given value is not nil.
func (cu *CarUpdate) SetNillableTotalOrderCount(i *int) *CarUpdate {
	if i != nil {
		cu.SetTotalOrderCount(*i)
	}
	return cu
}

// AddTotalOrderCount adds i to the "total_order_count" field.
func (cu *CarUpdate) AddTotalOrderCount(i int) *CarUpdate {
	cu.mutation.AddTotalOrderCount(i)
	return cu
}

// SetTotalOrderAmount sets the "total_order_amount" field.
func (cu *CarUpdate) SetTotalOrderAmount(i int) *CarUpdate {
	cu.mutation.ResetTotalOrderAmount()
	cu.mutation.SetTotalOrderAmount(i)
	return cu
}

// SetNillableTotalOrderAmount sets the "total_order_amount" field if the given value is not nil.
func (cu *CarUpdate) SetNillableTotalOrderAmount(i *int) *CarUpdate {
	if i != nil {
		cu.SetTotalOrderAmount(*i)
	}
	return cu
}

// AddTotalOrderAmount adds i to the "total_order_amount" field.
func (cu *CarUpdate) AddTotalOrderAmount(i int) *CarUpdate {
	cu.mutation.AddTotalOrderAmount(i)
	return cu
}

// SetPowerRemaining sets the "power_remaining" field.
func (cu *CarUpdate) SetPowerRemaining(i int) *CarUpdate {
	cu.mutation.ResetPowerRemaining()
	cu.mutation.SetPowerRemaining(i)
	return cu
}

// SetNillablePowerRemaining sets the "power_remaining" field if the given value is not nil.
func (cu *CarUpdate) SetNillablePowerRemaining(i *int) *CarUpdate {
	if i != nil {
		cu.SetPowerRemaining(*i)
	}
	return cu
}

// AddPowerRemaining adds i to the "power_remaining" field.
func (cu *CarUpdate) AddPowerRemaining(i int) *CarUpdate {
	cu.mutation.AddPowerRemaining(i)
	return cu
}

// SetErrorCount sets the "error_count" field.
func (cu *CarUpdate) SetErrorCount(i int) *CarUpdate {
	cu.mutation.ResetErrorCount()
	cu.mutation.SetErrorCount(i)
	return cu
}

// SetNillableErrorCount sets the "error_count" field if the given value is not nil.
func (cu *CarUpdate) SetNillableErrorCount(i *int) *CarUpdate {
	if i != nil {
		cu.SetErrorCount(*i)
	}
	return cu
}

// AddErrorCount adds i to the "error_count" field.
func (cu *CarUpdate) AddErrorCount(i int) *CarUpdate {
	cu.mutation.AddErrorCount(i)
	return cu
}

// SetErrorMessage sets the "error_message" field.
func (cu *CarUpdate) SetErrorMessage(s string) *CarUpdate {
	cu.mutation.SetErrorMessage(s)
	return cu
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (cu *CarUpdate) SetNillableErrorMessage(s *string) *CarUpdate {
	if s != nil {
		cu.SetErrorMessage(*s)
	}
	return cu
}

// SetIsDeleted sets the "is_deleted" field.
func (cu *CarUpdate) SetIsDeleted(i int) *CarUpdate {
	cu.mutation.ResetIsDeleted()
	cu.mutation.SetIsDeleted(i)
	return cu
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (cu *CarUpdate) SetNillableIsDeleted(i *int) *CarUpdate {
	if i != nil {
		cu.SetIsDeleted(*i)
	}
	return cu
}

// AddIsDeleted adds i to the "is_deleted" field.
func (cu *CarUpdate) AddIsDeleted(i int) *CarUpdate {
	cu.mutation.AddIsDeleted(i)
	return cu
}

// SetIsCommercialCar sets the "is_commercial_car" field.
func (cu *CarUpdate) SetIsCommercialCar(i int) *CarUpdate {
	cu.mutation.ResetIsCommercialCar()
	cu.mutation.SetIsCommercialCar(i)
	return cu
}

// SetNillableIsCommercialCar sets the "is_commercial_car" field if the given value is not nil.
func (cu *CarUpdate) SetNillableIsCommercialCar(i *int) *CarUpdate {
	if i != nil {
		cu.SetIsCommercialCar(*i)
	}
	return cu
}

// AddIsCommercialCar adds i to the "is_commercial_car" field.
func (cu *CarUpdate) AddIsCommercialCar(i int) *CarUpdate {
	cu.mutation.AddIsCommercialCar(i)
	return cu
}

// SetIsDrivingStateValid sets the "is_driving_state_valid" field.
func (cu *CarUpdate) SetIsDrivingStateValid(i int) *CarUpdate {
	cu.mutation.ResetIsDrivingStateValid()
	cu.mutation.SetIsDrivingStateValid(i)
	return cu
}

// SetNillableIsDrivingStateValid sets the "is_driving_state_valid" field if the given value is not nil.
func (cu *CarUpdate) SetNillableIsDrivingStateValid(i *int) *CarUpdate {
	if i != nil {
		cu.SetIsDrivingStateValid(*i)
	}
	return cu
}

// AddIsDrivingStateValid adds i to the "is_driving_state_valid" field.
func (cu *CarUpdate) AddIsDrivingStateValid(i int) *CarUpdate {
	cu.mutation.AddIsDrivingStateValid(i)
	return cu
}

// SetMapVersion sets the "map_version" field.
func (cu *CarUpdate) SetMapVersion(s string) *CarUpdate {
	cu.mutation.SetMapVersion(s)
	return cu
}

// SetNillableMapVersion sets the "map_version" field if the given value is not nil.
func (cu *CarUpdate) SetNillableMapVersion(s *string) *CarUpdate {
	if s != nil {
		cu.SetMapVersion(*s)
	}
	return cu
}

// SetNextMapVersion sets the "next_map_version" field.
func (cu *CarUpdate) SetNextMapVersion(s string) *CarUpdate {
	cu.mutation.SetNextMapVersion(s)
	return cu
}

// SetNillableNextMapVersion sets the "next_map_version" field if the given value is not nil.
func (cu *CarUpdate) SetNillableNextMapVersion(s *string) *CarUpdate {
	if s != nil {
		cu.SetNextMapVersion(*s)
	}
	return cu
}

// SetNextMapVersionState sets the "next_map_version_state" field.
func (cu *CarUpdate) SetNextMapVersionState(s string) *CarUpdate {
	cu.mutation.SetNextMapVersionState(s)
	return cu
}

// SetNillableNextMapVersionState sets the "next_map_version_state" field if the given value is not nil.
func (cu *CarUpdate) SetNillableNextMapVersionState(s *string) *CarUpdate {
	if s != nil {
		cu.SetNextMapVersionState(*s)
	}
	return cu
}

// SetNextMapVersionProcess sets the "next_map_version_process" field.
func (cu *CarUpdate) SetNextMapVersionProcess(i int) *CarUpdate {
	cu.mutation.ResetNextMapVersionProcess()
	cu.mutation.SetNextMapVersionProcess(i)
	return cu
}

// SetNillableNextMapVersionProcess sets the "next_map_version_process" field if the given value is not nil.
func (cu *CarUpdate) SetNillableNextMapVersionProcess(i *int) *CarUpdate {
	if i != nil {
		cu.SetNextMapVersionProcess(*i)
	}
	return cu
}

// AddNextMapVersionProcess adds i to the "next_map_version_process" field.
func (cu *CarUpdate) AddNextMapVersionProcess(i int) *CarUpdate {
	cu.mutation.AddNextMapVersionProcess(i)
	return cu
}

// SetGrAutoVersion sets the "gr_auto_version" field.
func (cu *CarUpdate) SetGrAutoVersion(s string) *CarUpdate {
	cu.mutation.SetGrAutoVersion(s)
	return cu
}

// SetNillableGrAutoVersion sets the "gr_auto_version" field if the given value is not nil.
func (cu *CarUpdate) SetNillableGrAutoVersion(s *string) *CarUpdate {
	if s != nil {
		cu.SetGrAutoVersion(*s)
	}
	return cu
}

// SetGrUIVersion sets the "gr_ui_version" field.
func (cu *CarUpdate) SetGrUIVersion(s string) *CarUpdate {
	cu.mutation.SetGrUIVersion(s)
	return cu
}

// SetNillableGrUIVersion sets the "gr_ui_version" field if the given value is not nil.
func (cu *CarUpdate) SetNillableGrUIVersion(s *string) *CarUpdate {
	if s != nil {
		cu.SetGrUIVersion(*s)
	}
	return cu
}

// SetCarproxyID sets the "carproxy_id" field.
func (cu *CarUpdate) SetCarproxyID(s string) *CarUpdate {
	cu.mutation.SetCarproxyID(s)
	return cu
}

// SetNillableCarproxyID sets the "carproxy_id" field if the given value is not nil.
func (cu *CarUpdate) SetNillableCarproxyID(s *string) *CarUpdate {
	if s != nil {
		cu.SetCarproxyID(*s)
	}
	return cu
}

// SetExtendYokeeID sets the "extend_yokee_id" field.
func (cu *CarUpdate) SetExtendYokeeID(i int) *CarUpdate {
	cu.mutation.ResetExtendYokeeID()
	cu.mutation.SetExtendYokeeID(i)
	return cu
}

// SetNillableExtendYokeeID sets the "extend_yokee_id" field if the given value is not nil.
func (cu *CarUpdate) SetNillableExtendYokeeID(i *int) *CarUpdate {
	if i != nil {
		cu.SetExtendYokeeID(*i)
	}
	return cu
}

// AddExtendYokeeID adds i to the "extend_yokee_id" field.
func (cu *CarUpdate) AddExtendYokeeID(i int) *CarUpdate {
	cu.mutation.AddExtendYokeeID(i)
	return cu
}

// ClearExtendYokeeID clears the value of the "extend_yokee_id" field.
func (cu *CarUpdate) ClearExtendYokeeID() *CarUpdate {
	cu.mutation.ClearExtendYokeeID()
	return cu
}

// SetMaxSpeedLimit sets the "max_speed_limit" field.
func (cu *CarUpdate) SetMaxSpeedLimit(f float32) *CarUpdate {
	cu.mutation.ResetMaxSpeedLimit()
	cu.mutation.SetMaxSpeedLimit(f)
	return cu
}

// SetNillableMaxSpeedLimit sets the "max_speed_limit" field if the given value is not nil.
func (cu *CarUpdate) SetNillableMaxSpeedLimit(f *float32) *CarUpdate {
	if f != nil {
		cu.SetMaxSpeedLimit(*f)
	}
	return cu
}

// AddMaxSpeedLimit adds f to the "max_speed_limit" field.
func (cu *CarUpdate) AddMaxSpeedLimit(f float32) *CarUpdate {
	cu.mutation.AddMaxSpeedLimit(f)
	return cu
}

// SetAliveTime sets the "alive_time" field.
func (cu *CarUpdate) SetAliveTime(t time.Time) *CarUpdate {
	cu.mutation.SetAliveTime(t)
	return cu
}

// SetNillableAliveTime sets the "alive_time" field if the given value is not nil.
func (cu *CarUpdate) SetNillableAliveTime(t *time.Time) *CarUpdate {
	if t != nil {
		cu.SetAliveTime(*t)
	}
	return cu
}

// ClearAliveTime clears the value of the "alive_time" field.
func (cu *CarUpdate) ClearAliveTime() *CarUpdate {
	cu.mutation.ClearAliveTime()
	return cu
}

// SetRegisterTime sets the "register_time" field.
func (cu *CarUpdate) SetRegisterTime(t time.Time) *CarUpdate {
	cu.mutation.SetRegisterTime(t)
	return cu
}

// SetNillableRegisterTime sets the "register_time" field if the given value is not nil.
func (cu *CarUpdate) SetNillableRegisterTime(t *time.Time) *CarUpdate {
	if t != nil {
		cu.SetRegisterTime(*t)
	}
	return cu
}

// ClearRegisterTime clears the value of the "register_time" field.
func (cu *CarUpdate) ClearRegisterTime() *CarUpdate {
	cu.mutation.ClearRegisterTime()
	return cu
}

// SetDrivingStateTime sets the "driving_state_time" field.
func (cu *CarUpdate) SetDrivingStateTime(t time.Time) *CarUpdate {
	cu.mutation.SetDrivingStateTime(t)
	return cu
}

// SetNillableDrivingStateTime sets the "driving_state_time" field if the given value is not nil.
func (cu *CarUpdate) SetNillableDrivingStateTime(t *time.Time) *CarUpdate {
	if t != nil {
		cu.SetDrivingStateTime(*t)
	}
	return cu
}

// ClearDrivingStateTime clears the value of the "driving_state_time" field.
func (cu *CarUpdate) ClearDrivingStateTime() *CarUpdate {
	cu.mutation.ClearDrivingStateTime()
	return cu
}

// SetUpdateTime sets the "update_time" field.
func (cu *CarUpdate) SetUpdateTime(t time.Time) *CarUpdate {
	cu.mutation.SetUpdateTime(t)
	return cu
}

// SetBackgroundScenicAreaID sets the "background_scenic_area" edge to the ScenicArea entity by ID.
func (cu *CarUpdate) SetBackgroundScenicAreaID(id int) *CarUpdate {
	cu.mutation.SetBackgroundScenicAreaID(id)
	return cu
}

// SetBackgroundScenicArea sets the "background_scenic_area" edge to the ScenicArea entity.
func (cu *CarUpdate) SetBackgroundScenicArea(s *ScenicArea) *CarUpdate {
	return cu.SetBackgroundScenicAreaID(s.ID)
}

// SetCarsModelsID sets the "cars_models" edge to the CarsModels entity by ID.
func (cu *CarUpdate) SetCarsModelsID(id int) *CarUpdate {
	cu.mutation.SetCarsModelsID(id)
	return cu
}

// SetCarsModels sets the "cars_models" edge to the CarsModels entity.
func (cu *CarUpdate) SetCarsModels(c *CarsModels) *CarUpdate {
	return cu.SetCarsModelsID(c.ID)
}

// AddCarOperateLogIDs adds the "car_operate_logs" edge to the CarsOperateLog entity by IDs.
func (cu *CarUpdate) AddCarOperateLogIDs(ids ...int) *CarUpdate {
	cu.mutation.AddCarOperateLogIDs(ids...)
	return cu
}

// AddCarOperateLogs adds the "car_operate_logs" edges to the CarsOperateLog entity.
func (cu *CarUpdate) AddCarOperateLogs(c ...*CarsOperateLog) *CarUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCarOperateLogIDs(ids...)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (cu *CarUpdate) AddOrderIDs(ids ...int) *CarUpdate {
	cu.mutation.AddOrderIDs(ids...)
	return cu
}

// AddOrders adds the "orders" edges to the Order entity.
func (cu *CarUpdate) AddOrders(o ...*Order) *CarUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cu.AddOrderIDs(ids...)
}

// AddStatsHourlyCarIDs adds the "stats_hourly_car" edge to the StatsHourlyCar entity by IDs.
func (cu *CarUpdate) AddStatsHourlyCarIDs(ids ...int) *CarUpdate {
	cu.mutation.AddStatsHourlyCarIDs(ids...)
	return cu
}

// AddStatsHourlyCar adds the "stats_hourly_car" edges to the StatsHourlyCar entity.
func (cu *CarUpdate) AddStatsHourlyCar(s ...*StatsHourlyCar) *CarUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.AddStatsHourlyCarIDs(ids...)
}

// AddScheTaskIDs adds the "sche_task" edge to the ScheTask entity by IDs.
func (cu *CarUpdate) AddScheTaskIDs(ids ...int) *CarUpdate {
	cu.mutation.AddScheTaskIDs(ids...)
	return cu
}

// AddScheTask adds the "sche_task" edges to the ScheTask entity.
func (cu *CarUpdate) AddScheTask(s ...*ScheTask) *CarUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.AddScheTaskIDs(ids...)
}

// AddConfigFileIDs adds the "config_files" edge to the CarConfig entity by IDs.
func (cu *CarUpdate) AddConfigFileIDs(ids ...int) *CarUpdate {
	cu.mutation.AddConfigFileIDs(ids...)
	return cu
}

// AddConfigFiles adds the "config_files" edges to the CarConfig entity.
func (cu *CarUpdate) AddConfigFiles(c ...*CarConfig) *CarUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddConfigFileIDs(ids...)
}

// AddCarConfigIDs adds the "car_configs" edge to the CarConfigDownload entity by IDs.
func (cu *CarUpdate) AddCarConfigIDs(ids ...int) *CarUpdate {
	cu.mutation.AddCarConfigIDs(ids...)
	return cu
}

// AddCarConfigs adds the "car_configs" edges to the CarConfigDownload entity.
func (cu *CarUpdate) AddCarConfigs(c ...*CarConfigDownload) *CarUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCarConfigIDs(ids...)
}

// Mutation returns the CarMutation object of the builder.
func (cu *CarUpdate) Mutation() *CarMutation {
	return cu.mutation
}

// ClearBackgroundScenicArea clears the "background_scenic_area" edge to the ScenicArea entity.
func (cu *CarUpdate) ClearBackgroundScenicArea() *CarUpdate {
	cu.mutation.ClearBackgroundScenicArea()
	return cu
}

// ClearCarsModels clears the "cars_models" edge to the CarsModels entity.
func (cu *CarUpdate) ClearCarsModels() *CarUpdate {
	cu.mutation.ClearCarsModels()
	return cu
}

// ClearCarOperateLogs clears all "car_operate_logs" edges to the CarsOperateLog entity.
func (cu *CarUpdate) ClearCarOperateLogs() *CarUpdate {
	cu.mutation.ClearCarOperateLogs()
	return cu
}

// RemoveCarOperateLogIDs removes the "car_operate_logs" edge to CarsOperateLog entities by IDs.
func (cu *CarUpdate) RemoveCarOperateLogIDs(ids ...int) *CarUpdate {
	cu.mutation.RemoveCarOperateLogIDs(ids...)
	return cu
}

// RemoveCarOperateLogs removes "car_operate_logs" edges to CarsOperateLog entities.
func (cu *CarUpdate) RemoveCarOperateLogs(c ...*CarsOperateLog) *CarUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCarOperateLogIDs(ids...)
}

// ClearOrders clears all "orders" edges to the Order entity.
func (cu *CarUpdate) ClearOrders() *CarUpdate {
	cu.mutation.ClearOrders()
	return cu
}

// RemoveOrderIDs removes the "orders" edge to Order entities by IDs.
func (cu *CarUpdate) RemoveOrderIDs(ids ...int) *CarUpdate {
	cu.mutation.RemoveOrderIDs(ids...)
	return cu
}

// RemoveOrders removes "orders" edges to Order entities.
func (cu *CarUpdate) RemoveOrders(o ...*Order) *CarUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cu.RemoveOrderIDs(ids...)
}

// ClearStatsHourlyCar clears all "stats_hourly_car" edges to the StatsHourlyCar entity.
func (cu *CarUpdate) ClearStatsHourlyCar() *CarUpdate {
	cu.mutation.ClearStatsHourlyCar()
	return cu
}

// RemoveStatsHourlyCarIDs removes the "stats_hourly_car" edge to StatsHourlyCar entities by IDs.
func (cu *CarUpdate) RemoveStatsHourlyCarIDs(ids ...int) *CarUpdate {
	cu.mutation.RemoveStatsHourlyCarIDs(ids...)
	return cu
}

// RemoveStatsHourlyCar removes "stats_hourly_car" edges to StatsHourlyCar entities.
func (cu *CarUpdate) RemoveStatsHourlyCar(s ...*StatsHourlyCar) *CarUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.RemoveStatsHourlyCarIDs(ids...)
}

// ClearScheTask clears all "sche_task" edges to the ScheTask entity.
func (cu *CarUpdate) ClearScheTask() *CarUpdate {
	cu.mutation.ClearScheTask()
	return cu
}

// RemoveScheTaskIDs removes the "sche_task" edge to ScheTask entities by IDs.
func (cu *CarUpdate) RemoveScheTaskIDs(ids ...int) *CarUpdate {
	cu.mutation.RemoveScheTaskIDs(ids...)
	return cu
}

// RemoveScheTask removes "sche_task" edges to ScheTask entities.
func (cu *CarUpdate) RemoveScheTask(s ...*ScheTask) *CarUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.RemoveScheTaskIDs(ids...)
}

// ClearConfigFiles clears all "config_files" edges to the CarConfig entity.
func (cu *CarUpdate) ClearConfigFiles() *CarUpdate {
	cu.mutation.ClearConfigFiles()
	return cu
}

// RemoveConfigFileIDs removes the "config_files" edge to CarConfig entities by IDs.
func (cu *CarUpdate) RemoveConfigFileIDs(ids ...int) *CarUpdate {
	cu.mutation.RemoveConfigFileIDs(ids...)
	return cu
}

// RemoveConfigFiles removes "config_files" edges to CarConfig entities.
func (cu *CarUpdate) RemoveConfigFiles(c ...*CarConfig) *CarUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveConfigFileIDs(ids...)
}

// ClearCarConfigs clears all "car_configs" edges to the CarConfigDownload entity.
func (cu *CarUpdate) ClearCarConfigs() *CarUpdate {
	cu.mutation.ClearCarConfigs()
	return cu
}

// RemoveCarConfigIDs removes the "car_configs" edge to CarConfigDownload entities by IDs.
func (cu *CarUpdate) RemoveCarConfigIDs(ids ...int) *CarUpdate {
	cu.mutation.RemoveCarConfigIDs(ids...)
	return cu
}

// RemoveCarConfigs removes "car_configs" edges to CarConfigDownload entities.
func (cu *CarUpdate) RemoveCarConfigs(c ...*CarConfigDownload) *CarUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCarConfigIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CarUpdate) Save(ctx context.Context) (int, error) {
	if err := cu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CarUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CarUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CarUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CarUpdate) defaults() error {
	if _, ok := cu.mutation.UpdateTime(); !ok {
		if car.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized car.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := car.UpdateDefaultUpdateTime()
		cu.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cu *CarUpdate) check() error {
	if cu.mutation.BackgroundScenicAreaCleared() && len(cu.mutation.BackgroundScenicAreaIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Car.background_scenic_area"`)
	}
	if cu.mutation.CarsModelsCleared() && len(cu.mutation.CarsModelsIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Car.cars_models"`)
	}
	return nil
}

func (cu *CarUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(car.Table, car.Columns, sqlgraph.NewFieldSpec(car.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.DeleteTime(); ok {
		_spec.SetField(car.FieldDeleteTime, field.TypeTime, value)
	}
	if cu.mutation.DeleteTimeCleared() {
		_spec.ClearField(car.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := cu.mutation.OperationMode(); ok {
		_spec.SetField(car.FieldOperationMode, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedOperationMode(); ok {
		_spec.AddField(car.FieldOperationMode, field.TypeInt, value)
	}
	if value, ok := cu.mutation.CarName(); ok {
		_spec.SetField(car.FieldCarName, field.TypeString, value)
	}
	if value, ok := cu.mutation.DeviceID(); ok {
		_spec.SetField(car.FieldDeviceID, field.TypeString, value)
	}
	if value, ok := cu.mutation.Images(); ok {
		_spec.SetField(car.FieldImages, field.TypeJSON, value)
	}
	if value, ok := cu.mutation.AppendedImages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, car.FieldImages, value)
		})
	}
	if value, ok := cu.mutation.LicensePlate(); ok {
		_spec.SetField(car.FieldLicensePlate, field.TypeString, value)
	}
	if value, ok := cu.mutation.Passengers(); ok {
		_spec.SetField(car.FieldPassengers, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedPassengers(); ok {
		_spec.AddField(car.FieldPassengers, field.TypeInt, value)
	}
	if value, ok := cu.mutation.ReservedSeats(); ok {
		_spec.SetField(car.FieldReservedSeats, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedReservedSeats(); ok {
		_spec.AddField(car.FieldReservedSeats, field.TypeInt, value)
	}
	if value, ok := cu.mutation.ProduceTime(); ok {
		_spec.SetField(car.FieldProduceTime, field.TypeTime, value)
	}
	if value, ok := cu.mutation.PowerThreshold(); ok {
		_spec.SetField(car.FieldPowerThreshold, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedPowerThreshold(); ok {
		_spec.AddField(car.FieldPowerThreshold, field.TypeInt, value)
	}
	if value, ok := cu.mutation.ActivateCode(); ok {
		_spec.SetField(car.FieldActivateCode, field.TypeString, value)
	}
	if value, ok := cu.mutation.State(); ok {
		_spec.SetField(car.FieldState, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedState(); ok {
		_spec.AddField(car.FieldState, field.TypeInt, value)
	}
	if value, ok := cu.mutation.UseState(); ok {
		_spec.SetField(car.FieldUseState, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedUseState(); ok {
		_spec.AddField(car.FieldUseState, field.TypeInt, value)
	}
	if value, ok := cu.mutation.DrivingState(); ok {
		_spec.SetField(car.FieldDrivingState, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedDrivingState(); ok {
		_spec.AddField(car.FieldDrivingState, field.TypeInt, value)
	}
	if value, ok := cu.mutation.EmergencyState(); ok {
		_spec.SetField(car.FieldEmergencyState, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedEmergencyState(); ok {
		_spec.AddField(car.FieldEmergencyState, field.TypeInt, value)
	}
	if value, ok := cu.mutation.UseOrderID(); ok {
		_spec.SetField(car.FieldUseOrderID, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedUseOrderID(); ok {
		_spec.AddField(car.FieldUseOrderID, field.TypeInt, value)
	}
	if value, ok := cu.mutation.UseFlightID(); ok {
		_spec.SetField(car.FieldUseFlightID, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedUseFlightID(); ok {
		_spec.AddField(car.FieldUseFlightID, field.TypeInt, value)
	}
	if value, ok := cu.mutation.DispatchTaskID(); ok {
		_spec.SetField(car.FieldDispatchTaskID, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedDispatchTaskID(); ok {
		_spec.AddField(car.FieldDispatchTaskID, field.TypeInt, value)
	}
	if value, ok := cu.mutation.DispatchScheMode(); ok {
		_spec.SetField(car.FieldDispatchScheMode, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedDispatchScheMode(); ok {
		_spec.AddField(car.FieldDispatchScheMode, field.TypeInt, value)
	}
	if value, ok := cu.mutation.BindOrderCount(); ok {
		_spec.SetField(car.FieldBindOrderCount, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedBindOrderCount(); ok {
		_spec.AddField(car.FieldBindOrderCount, field.TypeInt, value)
	}
	if value, ok := cu.mutation.TotalOrderMileage(); ok {
		_spec.SetField(car.FieldTotalOrderMileage, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedTotalOrderMileage(); ok {
		_spec.AddField(car.FieldTotalOrderMileage, field.TypeInt, value)
	}
	if value, ok := cu.mutation.TotalOrderTime(); ok {
		_spec.SetField(car.FieldTotalOrderTime, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedTotalOrderTime(); ok {
		_spec.AddField(car.FieldTotalOrderTime, field.TypeInt, value)
	}
	if value, ok := cu.mutation.TotalOrderCount(); ok {
		_spec.SetField(car.FieldTotalOrderCount, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedTotalOrderCount(); ok {
		_spec.AddField(car.FieldTotalOrderCount, field.TypeInt, value)
	}
	if value, ok := cu.mutation.TotalOrderAmount(); ok {
		_spec.SetField(car.FieldTotalOrderAmount, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedTotalOrderAmount(); ok {
		_spec.AddField(car.FieldTotalOrderAmount, field.TypeInt, value)
	}
	if value, ok := cu.mutation.PowerRemaining(); ok {
		_spec.SetField(car.FieldPowerRemaining, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedPowerRemaining(); ok {
		_spec.AddField(car.FieldPowerRemaining, field.TypeInt, value)
	}
	if value, ok := cu.mutation.ErrorCount(); ok {
		_spec.SetField(car.FieldErrorCount, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedErrorCount(); ok {
		_spec.AddField(car.FieldErrorCount, field.TypeInt, value)
	}
	if value, ok := cu.mutation.ErrorMessage(); ok {
		_spec.SetField(car.FieldErrorMessage, field.TypeString, value)
	}
	if value, ok := cu.mutation.IsDeleted(); ok {
		_spec.SetField(car.FieldIsDeleted, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedIsDeleted(); ok {
		_spec.AddField(car.FieldIsDeleted, field.TypeInt, value)
	}
	if value, ok := cu.mutation.IsCommercialCar(); ok {
		_spec.SetField(car.FieldIsCommercialCar, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedIsCommercialCar(); ok {
		_spec.AddField(car.FieldIsCommercialCar, field.TypeInt, value)
	}
	if value, ok := cu.mutation.IsDrivingStateValid(); ok {
		_spec.SetField(car.FieldIsDrivingStateValid, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedIsDrivingStateValid(); ok {
		_spec.AddField(car.FieldIsDrivingStateValid, field.TypeInt, value)
	}
	if value, ok := cu.mutation.MapVersion(); ok {
		_spec.SetField(car.FieldMapVersion, field.TypeString, value)
	}
	if value, ok := cu.mutation.NextMapVersion(); ok {
		_spec.SetField(car.FieldNextMapVersion, field.TypeString, value)
	}
	if value, ok := cu.mutation.NextMapVersionState(); ok {
		_spec.SetField(car.FieldNextMapVersionState, field.TypeString, value)
	}
	if value, ok := cu.mutation.NextMapVersionProcess(); ok {
		_spec.SetField(car.FieldNextMapVersionProcess, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedNextMapVersionProcess(); ok {
		_spec.AddField(car.FieldNextMapVersionProcess, field.TypeInt, value)
	}
	if value, ok := cu.mutation.GrAutoVersion(); ok {
		_spec.SetField(car.FieldGrAutoVersion, field.TypeString, value)
	}
	if value, ok := cu.mutation.GrUIVersion(); ok {
		_spec.SetField(car.FieldGrUIVersion, field.TypeString, value)
	}
	if value, ok := cu.mutation.CarproxyID(); ok {
		_spec.SetField(car.FieldCarproxyID, field.TypeString, value)
	}
	if value, ok := cu.mutation.ExtendYokeeID(); ok {
		_spec.SetField(car.FieldExtendYokeeID, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedExtendYokeeID(); ok {
		_spec.AddField(car.FieldExtendYokeeID, field.TypeInt, value)
	}
	if cu.mutation.ExtendYokeeIDCleared() {
		_spec.ClearField(car.FieldExtendYokeeID, field.TypeInt)
	}
	if value, ok := cu.mutation.MaxSpeedLimit(); ok {
		_spec.SetField(car.FieldMaxSpeedLimit, field.TypeFloat32, value)
	}
	if value, ok := cu.mutation.AddedMaxSpeedLimit(); ok {
		_spec.AddField(car.FieldMaxSpeedLimit, field.TypeFloat32, value)
	}
	if value, ok := cu.mutation.AliveTime(); ok {
		_spec.SetField(car.FieldAliveTime, field.TypeTime, value)
	}
	if cu.mutation.AliveTimeCleared() {
		_spec.ClearField(car.FieldAliveTime, field.TypeTime)
	}
	if value, ok := cu.mutation.RegisterTime(); ok {
		_spec.SetField(car.FieldRegisterTime, field.TypeTime, value)
	}
	if cu.mutation.RegisterTimeCleared() {
		_spec.ClearField(car.FieldRegisterTime, field.TypeTime)
	}
	if value, ok := cu.mutation.DrivingStateTime(); ok {
		_spec.SetField(car.FieldDrivingStateTime, field.TypeTime, value)
	}
	if cu.mutation.DrivingStateTimeCleared() {
		_spec.ClearField(car.FieldDrivingStateTime, field.TypeTime)
	}
	if value, ok := cu.mutation.UpdateTime(); ok {
		_spec.SetField(car.FieldUpdateTime, field.TypeTime, value)
	}
	if cu.mutation.BackgroundScenicAreaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   car.BackgroundScenicAreaTable,
			Columns: []string{car.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.BackgroundScenicAreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   car.BackgroundScenicAreaTable,
			Columns: []string{car.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CarsModelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   car.CarsModelsTable,
			Columns: []string{car.CarsModelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsmodels.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CarsModelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   car.CarsModelsTable,
			Columns: []string{car.CarsModelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsmodels.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CarOperateLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.CarOperateLogsTable,
			Columns: []string{car.CarOperateLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsoperatelog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCarOperateLogsIDs(); len(nodes) > 0 && !cu.mutation.CarOperateLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.CarOperateLogsTable,
			Columns: []string{car.CarOperateLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsoperatelog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CarOperateLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.CarOperateLogsTable,
			Columns: []string{car.CarOperateLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsoperatelog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.OrdersTable,
			Columns: []string{car.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !cu.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.OrdersTable,
			Columns: []string{car.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.OrdersTable,
			Columns: []string{car.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.StatsHourlyCarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.StatsHourlyCarTable,
			Columns: []string{car.StatsHourlyCarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statshourlycar.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedStatsHourlyCarIDs(); len(nodes) > 0 && !cu.mutation.StatsHourlyCarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.StatsHourlyCarTable,
			Columns: []string{car.StatsHourlyCarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statshourlycar.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.StatsHourlyCarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.StatsHourlyCarTable,
			Columns: []string{car.StatsHourlyCarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statshourlycar.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ScheTaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.ScheTaskTable,
			Columns: []string{car.ScheTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schetask.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedScheTaskIDs(); len(nodes) > 0 && !cu.mutation.ScheTaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.ScheTaskTable,
			Columns: []string{car.ScheTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schetask.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ScheTaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.ScheTaskTable,
			Columns: []string{car.ScheTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schetask.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ConfigFilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.ConfigFilesTable,
			Columns: []string{car.ConfigFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carconfig.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedConfigFilesIDs(); len(nodes) > 0 && !cu.mutation.ConfigFilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.ConfigFilesTable,
			Columns: []string{car.ConfigFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carconfig.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ConfigFilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.ConfigFilesTable,
			Columns: []string{car.ConfigFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carconfig.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CarConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.CarConfigsTable,
			Columns: []string{car.CarConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carconfigdownload.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCarConfigsIDs(); len(nodes) > 0 && !cu.mutation.CarConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.CarConfigsTable,
			Columns: []string{car.CarConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carconfigdownload.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CarConfigsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.CarConfigsTable,
			Columns: []string{car.CarConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carconfigdownload.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{car.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CarUpdateOne is the builder for updating a single Car entity.
type CarUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CarMutation
}

// SetDeleteTime sets the "delete_time" field.
func (cuo *CarUpdateOne) SetDeleteTime(t time.Time) *CarUpdateOne {
	cuo.mutation.SetDeleteTime(t)
	return cuo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableDeleteTime(t *time.Time) *CarUpdateOne {
	if t != nil {
		cuo.SetDeleteTime(*t)
	}
	return cuo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (cuo *CarUpdateOne) ClearDeleteTime() *CarUpdateOne {
	cuo.mutation.ClearDeleteTime()
	return cuo
}

// SetOperationMode sets the "operation_mode" field.
func (cuo *CarUpdateOne) SetOperationMode(i int) *CarUpdateOne {
	cuo.mutation.ResetOperationMode()
	cuo.mutation.SetOperationMode(i)
	return cuo
}

// SetNillableOperationMode sets the "operation_mode" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableOperationMode(i *int) *CarUpdateOne {
	if i != nil {
		cuo.SetOperationMode(*i)
	}
	return cuo
}

// AddOperationMode adds i to the "operation_mode" field.
func (cuo *CarUpdateOne) AddOperationMode(i int) *CarUpdateOne {
	cuo.mutation.AddOperationMode(i)
	return cuo
}

// SetCarName sets the "car_name" field.
func (cuo *CarUpdateOne) SetCarName(s string) *CarUpdateOne {
	cuo.mutation.SetCarName(s)
	return cuo
}

// SetNillableCarName sets the "car_name" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableCarName(s *string) *CarUpdateOne {
	if s != nil {
		cuo.SetCarName(*s)
	}
	return cuo
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (cuo *CarUpdateOne) SetScenicAreaID(i int) *CarUpdateOne {
	cuo.mutation.SetScenicAreaID(i)
	return cuo
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableScenicAreaID(i *int) *CarUpdateOne {
	if i != nil {
		cuo.SetScenicAreaID(*i)
	}
	return cuo
}

// SetDeviceID sets the "device_id" field.
func (cuo *CarUpdateOne) SetDeviceID(s string) *CarUpdateOne {
	cuo.mutation.SetDeviceID(s)
	return cuo
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableDeviceID(s *string) *CarUpdateOne {
	if s != nil {
		cuo.SetDeviceID(*s)
	}
	return cuo
}

// SetModelID sets the "model_id" field.
func (cuo *CarUpdateOne) SetModelID(i int) *CarUpdateOne {
	cuo.mutation.SetModelID(i)
	return cuo
}

// SetNillableModelID sets the "model_id" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableModelID(i *int) *CarUpdateOne {
	if i != nil {
		cuo.SetModelID(*i)
	}
	return cuo
}

// SetImages sets the "images" field.
func (cuo *CarUpdateOne) SetImages(i []int) *CarUpdateOne {
	cuo.mutation.SetImages(i)
	return cuo
}

// AppendImages appends i to the "images" field.
func (cuo *CarUpdateOne) AppendImages(i []int) *CarUpdateOne {
	cuo.mutation.AppendImages(i)
	return cuo
}

// SetLicensePlate sets the "license_plate" field.
func (cuo *CarUpdateOne) SetLicensePlate(s string) *CarUpdateOne {
	cuo.mutation.SetLicensePlate(s)
	return cuo
}

// SetNillableLicensePlate sets the "license_plate" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableLicensePlate(s *string) *CarUpdateOne {
	if s != nil {
		cuo.SetLicensePlate(*s)
	}
	return cuo
}

// SetPassengers sets the "passengers" field.
func (cuo *CarUpdateOne) SetPassengers(i int) *CarUpdateOne {
	cuo.mutation.ResetPassengers()
	cuo.mutation.SetPassengers(i)
	return cuo
}

// SetNillablePassengers sets the "passengers" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillablePassengers(i *int) *CarUpdateOne {
	if i != nil {
		cuo.SetPassengers(*i)
	}
	return cuo
}

// AddPassengers adds i to the "passengers" field.
func (cuo *CarUpdateOne) AddPassengers(i int) *CarUpdateOne {
	cuo.mutation.AddPassengers(i)
	return cuo
}

// SetReservedSeats sets the "reserved_seats" field.
func (cuo *CarUpdateOne) SetReservedSeats(i int) *CarUpdateOne {
	cuo.mutation.ResetReservedSeats()
	cuo.mutation.SetReservedSeats(i)
	return cuo
}

// SetNillableReservedSeats sets the "reserved_seats" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableReservedSeats(i *int) *CarUpdateOne {
	if i != nil {
		cuo.SetReservedSeats(*i)
	}
	return cuo
}

// AddReservedSeats adds i to the "reserved_seats" field.
func (cuo *CarUpdateOne) AddReservedSeats(i int) *CarUpdateOne {
	cuo.mutation.AddReservedSeats(i)
	return cuo
}

// SetProduceTime sets the "produce_time" field.
func (cuo *CarUpdateOne) SetProduceTime(t time.Time) *CarUpdateOne {
	cuo.mutation.SetProduceTime(t)
	return cuo
}

// SetNillableProduceTime sets the "produce_time" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableProduceTime(t *time.Time) *CarUpdateOne {
	if t != nil {
		cuo.SetProduceTime(*t)
	}
	return cuo
}

// SetPowerThreshold sets the "power_threshold" field.
func (cuo *CarUpdateOne) SetPowerThreshold(i int) *CarUpdateOne {
	cuo.mutation.ResetPowerThreshold()
	cuo.mutation.SetPowerThreshold(i)
	return cuo
}

// SetNillablePowerThreshold sets the "power_threshold" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillablePowerThreshold(i *int) *CarUpdateOne {
	if i != nil {
		cuo.SetPowerThreshold(*i)
	}
	return cuo
}

// AddPowerThreshold adds i to the "power_threshold" field.
func (cuo *CarUpdateOne) AddPowerThreshold(i int) *CarUpdateOne {
	cuo.mutation.AddPowerThreshold(i)
	return cuo
}

// SetActivateCode sets the "activate_code" field.
func (cuo *CarUpdateOne) SetActivateCode(s string) *CarUpdateOne {
	cuo.mutation.SetActivateCode(s)
	return cuo
}

// SetNillableActivateCode sets the "activate_code" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableActivateCode(s *string) *CarUpdateOne {
	if s != nil {
		cuo.SetActivateCode(*s)
	}
	return cuo
}

// SetState sets the "state" field.
func (cuo *CarUpdateOne) SetState(i int) *CarUpdateOne {
	cuo.mutation.ResetState()
	cuo.mutation.SetState(i)
	return cuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableState(i *int) *CarUpdateOne {
	if i != nil {
		cuo.SetState(*i)
	}
	return cuo
}

// AddState adds i to the "state" field.
func (cuo *CarUpdateOne) AddState(i int) *CarUpdateOne {
	cuo.mutation.AddState(i)
	return cuo
}

// SetUseState sets the "use_state" field.
func (cuo *CarUpdateOne) SetUseState(i int) *CarUpdateOne {
	cuo.mutation.ResetUseState()
	cuo.mutation.SetUseState(i)
	return cuo
}

// SetNillableUseState sets the "use_state" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableUseState(i *int) *CarUpdateOne {
	if i != nil {
		cuo.SetUseState(*i)
	}
	return cuo
}

// AddUseState adds i to the "use_state" field.
func (cuo *CarUpdateOne) AddUseState(i int) *CarUpdateOne {
	cuo.mutation.AddUseState(i)
	return cuo
}

// SetDrivingState sets the "driving_state" field.
func (cuo *CarUpdateOne) SetDrivingState(i int) *CarUpdateOne {
	cuo.mutation.ResetDrivingState()
	cuo.mutation.SetDrivingState(i)
	return cuo
}

// SetNillableDrivingState sets the "driving_state" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableDrivingState(i *int) *CarUpdateOne {
	if i != nil {
		cuo.SetDrivingState(*i)
	}
	return cuo
}

// AddDrivingState adds i to the "driving_state" field.
func (cuo *CarUpdateOne) AddDrivingState(i int) *CarUpdateOne {
	cuo.mutation.AddDrivingState(i)
	return cuo
}

// SetEmergencyState sets the "emergency_state" field.
func (cuo *CarUpdateOne) SetEmergencyState(i int) *CarUpdateOne {
	cuo.mutation.ResetEmergencyState()
	cuo.mutation.SetEmergencyState(i)
	return cuo
}

// SetNillableEmergencyState sets the "emergency_state" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableEmergencyState(i *int) *CarUpdateOne {
	if i != nil {
		cuo.SetEmergencyState(*i)
	}
	return cuo
}

// AddEmergencyState adds i to the "emergency_state" field.
func (cuo *CarUpdateOne) AddEmergencyState(i int) *CarUpdateOne {
	cuo.mutation.AddEmergencyState(i)
	return cuo
}

// SetUseOrderID sets the "use_order_id" field.
func (cuo *CarUpdateOne) SetUseOrderID(i int) *CarUpdateOne {
	cuo.mutation.ResetUseOrderID()
	cuo.mutation.SetUseOrderID(i)
	return cuo
}

// SetNillableUseOrderID sets the "use_order_id" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableUseOrderID(i *int) *CarUpdateOne {
	if i != nil {
		cuo.SetUseOrderID(*i)
	}
	return cuo
}

// AddUseOrderID adds i to the "use_order_id" field.
func (cuo *CarUpdateOne) AddUseOrderID(i int) *CarUpdateOne {
	cuo.mutation.AddUseOrderID(i)
	return cuo
}

// SetUseFlightID sets the "use_flight_id" field.
func (cuo *CarUpdateOne) SetUseFlightID(i int) *CarUpdateOne {
	cuo.mutation.ResetUseFlightID()
	cuo.mutation.SetUseFlightID(i)
	return cuo
}

// SetNillableUseFlightID sets the "use_flight_id" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableUseFlightID(i *int) *CarUpdateOne {
	if i != nil {
		cuo.SetUseFlightID(*i)
	}
	return cuo
}

// AddUseFlightID adds i to the "use_flight_id" field.
func (cuo *CarUpdateOne) AddUseFlightID(i int) *CarUpdateOne {
	cuo.mutation.AddUseFlightID(i)
	return cuo
}

// SetDispatchTaskID sets the "dispatch_task_id" field.
func (cuo *CarUpdateOne) SetDispatchTaskID(i int) *CarUpdateOne {
	cuo.mutation.ResetDispatchTaskID()
	cuo.mutation.SetDispatchTaskID(i)
	return cuo
}

// SetNillableDispatchTaskID sets the "dispatch_task_id" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableDispatchTaskID(i *int) *CarUpdateOne {
	if i != nil {
		cuo.SetDispatchTaskID(*i)
	}
	return cuo
}

// AddDispatchTaskID adds i to the "dispatch_task_id" field.
func (cuo *CarUpdateOne) AddDispatchTaskID(i int) *CarUpdateOne {
	cuo.mutation.AddDispatchTaskID(i)
	return cuo
}

// SetDispatchScheMode sets the "dispatch_sche_mode" field.
func (cuo *CarUpdateOne) SetDispatchScheMode(i int) *CarUpdateOne {
	cuo.mutation.ResetDispatchScheMode()
	cuo.mutation.SetDispatchScheMode(i)
	return cuo
}

// SetNillableDispatchScheMode sets the "dispatch_sche_mode" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableDispatchScheMode(i *int) *CarUpdateOne {
	if i != nil {
		cuo.SetDispatchScheMode(*i)
	}
	return cuo
}

// AddDispatchScheMode adds i to the "dispatch_sche_mode" field.
func (cuo *CarUpdateOne) AddDispatchScheMode(i int) *CarUpdateOne {
	cuo.mutation.AddDispatchScheMode(i)
	return cuo
}

// SetBindOrderCount sets the "bind_order_count" field.
func (cuo *CarUpdateOne) SetBindOrderCount(i int) *CarUpdateOne {
	cuo.mutation.ResetBindOrderCount()
	cuo.mutation.SetBindOrderCount(i)
	return cuo
}

// SetNillableBindOrderCount sets the "bind_order_count" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableBindOrderCount(i *int) *CarUpdateOne {
	if i != nil {
		cuo.SetBindOrderCount(*i)
	}
	return cuo
}

// AddBindOrderCount adds i to the "bind_order_count" field.
func (cuo *CarUpdateOne) AddBindOrderCount(i int) *CarUpdateOne {
	cuo.mutation.AddBindOrderCount(i)
	return cuo
}

// SetTotalOrderMileage sets the "total_order_mileage" field.
func (cuo *CarUpdateOne) SetTotalOrderMileage(i int) *CarUpdateOne {
	cuo.mutation.ResetTotalOrderMileage()
	cuo.mutation.SetTotalOrderMileage(i)
	return cuo
}

// SetNillableTotalOrderMileage sets the "total_order_mileage" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableTotalOrderMileage(i *int) *CarUpdateOne {
	if i != nil {
		cuo.SetTotalOrderMileage(*i)
	}
	return cuo
}

// AddTotalOrderMileage adds i to the "total_order_mileage" field.
func (cuo *CarUpdateOne) AddTotalOrderMileage(i int) *CarUpdateOne {
	cuo.mutation.AddTotalOrderMileage(i)
	return cuo
}

// SetTotalOrderTime sets the "total_order_time" field.
func (cuo *CarUpdateOne) SetTotalOrderTime(i int) *CarUpdateOne {
	cuo.mutation.ResetTotalOrderTime()
	cuo.mutation.SetTotalOrderTime(i)
	return cuo
}

// SetNillableTotalOrderTime sets the "total_order_time" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableTotalOrderTime(i *int) *CarUpdateOne {
	if i != nil {
		cuo.SetTotalOrderTime(*i)
	}
	return cuo
}

// AddTotalOrderTime adds i to the "total_order_time" field.
func (cuo *CarUpdateOne) AddTotalOrderTime(i int) *CarUpdateOne {
	cuo.mutation.AddTotalOrderTime(i)
	return cuo
}

// SetTotalOrderCount sets the "total_order_count" field.
func (cuo *CarUpdateOne) SetTotalOrderCount(i int) *CarUpdateOne {
	cuo.mutation.ResetTotalOrderCount()
	cuo.mutation.SetTotalOrderCount(i)
	return cuo
}

// SetNillableTotalOrderCount sets the "total_order_count" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableTotalOrderCount(i *int) *CarUpdateOne {
	if i != nil {
		cuo.SetTotalOrderCount(*i)
	}
	return cuo
}

// AddTotalOrderCount adds i to the "total_order_count" field.
func (cuo *CarUpdateOne) AddTotalOrderCount(i int) *CarUpdateOne {
	cuo.mutation.AddTotalOrderCount(i)
	return cuo
}

// SetTotalOrderAmount sets the "total_order_amount" field.
func (cuo *CarUpdateOne) SetTotalOrderAmount(i int) *CarUpdateOne {
	cuo.mutation.ResetTotalOrderAmount()
	cuo.mutation.SetTotalOrderAmount(i)
	return cuo
}

// SetNillableTotalOrderAmount sets the "total_order_amount" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableTotalOrderAmount(i *int) *CarUpdateOne {
	if i != nil {
		cuo.SetTotalOrderAmount(*i)
	}
	return cuo
}

// AddTotalOrderAmount adds i to the "total_order_amount" field.
func (cuo *CarUpdateOne) AddTotalOrderAmount(i int) *CarUpdateOne {
	cuo.mutation.AddTotalOrderAmount(i)
	return cuo
}

// SetPowerRemaining sets the "power_remaining" field.
func (cuo *CarUpdateOne) SetPowerRemaining(i int) *CarUpdateOne {
	cuo.mutation.ResetPowerRemaining()
	cuo.mutation.SetPowerRemaining(i)
	return cuo
}

// SetNillablePowerRemaining sets the "power_remaining" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillablePowerRemaining(i *int) *CarUpdateOne {
	if i != nil {
		cuo.SetPowerRemaining(*i)
	}
	return cuo
}

// AddPowerRemaining adds i to the "power_remaining" field.
func (cuo *CarUpdateOne) AddPowerRemaining(i int) *CarUpdateOne {
	cuo.mutation.AddPowerRemaining(i)
	return cuo
}

// SetErrorCount sets the "error_count" field.
func (cuo *CarUpdateOne) SetErrorCount(i int) *CarUpdateOne {
	cuo.mutation.ResetErrorCount()
	cuo.mutation.SetErrorCount(i)
	return cuo
}

// SetNillableErrorCount sets the "error_count" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableErrorCount(i *int) *CarUpdateOne {
	if i != nil {
		cuo.SetErrorCount(*i)
	}
	return cuo
}

// AddErrorCount adds i to the "error_count" field.
func (cuo *CarUpdateOne) AddErrorCount(i int) *CarUpdateOne {
	cuo.mutation.AddErrorCount(i)
	return cuo
}

// SetErrorMessage sets the "error_message" field.
func (cuo *CarUpdateOne) SetErrorMessage(s string) *CarUpdateOne {
	cuo.mutation.SetErrorMessage(s)
	return cuo
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableErrorMessage(s *string) *CarUpdateOne {
	if s != nil {
		cuo.SetErrorMessage(*s)
	}
	return cuo
}

// SetIsDeleted sets the "is_deleted" field.
func (cuo *CarUpdateOne) SetIsDeleted(i int) *CarUpdateOne {
	cuo.mutation.ResetIsDeleted()
	cuo.mutation.SetIsDeleted(i)
	return cuo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableIsDeleted(i *int) *CarUpdateOne {
	if i != nil {
		cuo.SetIsDeleted(*i)
	}
	return cuo
}

// AddIsDeleted adds i to the "is_deleted" field.
func (cuo *CarUpdateOne) AddIsDeleted(i int) *CarUpdateOne {
	cuo.mutation.AddIsDeleted(i)
	return cuo
}

// SetIsCommercialCar sets the "is_commercial_car" field.
func (cuo *CarUpdateOne) SetIsCommercialCar(i int) *CarUpdateOne {
	cuo.mutation.ResetIsCommercialCar()
	cuo.mutation.SetIsCommercialCar(i)
	return cuo
}

// SetNillableIsCommercialCar sets the "is_commercial_car" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableIsCommercialCar(i *int) *CarUpdateOne {
	if i != nil {
		cuo.SetIsCommercialCar(*i)
	}
	return cuo
}

// AddIsCommercialCar adds i to the "is_commercial_car" field.
func (cuo *CarUpdateOne) AddIsCommercialCar(i int) *CarUpdateOne {
	cuo.mutation.AddIsCommercialCar(i)
	return cuo
}

// SetIsDrivingStateValid sets the "is_driving_state_valid" field.
func (cuo *CarUpdateOne) SetIsDrivingStateValid(i int) *CarUpdateOne {
	cuo.mutation.ResetIsDrivingStateValid()
	cuo.mutation.SetIsDrivingStateValid(i)
	return cuo
}

// SetNillableIsDrivingStateValid sets the "is_driving_state_valid" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableIsDrivingStateValid(i *int) *CarUpdateOne {
	if i != nil {
		cuo.SetIsDrivingStateValid(*i)
	}
	return cuo
}

// AddIsDrivingStateValid adds i to the "is_driving_state_valid" field.
func (cuo *CarUpdateOne) AddIsDrivingStateValid(i int) *CarUpdateOne {
	cuo.mutation.AddIsDrivingStateValid(i)
	return cuo
}

// SetMapVersion sets the "map_version" field.
func (cuo *CarUpdateOne) SetMapVersion(s string) *CarUpdateOne {
	cuo.mutation.SetMapVersion(s)
	return cuo
}

// SetNillableMapVersion sets the "map_version" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableMapVersion(s *string) *CarUpdateOne {
	if s != nil {
		cuo.SetMapVersion(*s)
	}
	return cuo
}

// SetNextMapVersion sets the "next_map_version" field.
func (cuo *CarUpdateOne) SetNextMapVersion(s string) *CarUpdateOne {
	cuo.mutation.SetNextMapVersion(s)
	return cuo
}

// SetNillableNextMapVersion sets the "next_map_version" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableNextMapVersion(s *string) *CarUpdateOne {
	if s != nil {
		cuo.SetNextMapVersion(*s)
	}
	return cuo
}

// SetNextMapVersionState sets the "next_map_version_state" field.
func (cuo *CarUpdateOne) SetNextMapVersionState(s string) *CarUpdateOne {
	cuo.mutation.SetNextMapVersionState(s)
	return cuo
}

// SetNillableNextMapVersionState sets the "next_map_version_state" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableNextMapVersionState(s *string) *CarUpdateOne {
	if s != nil {
		cuo.SetNextMapVersionState(*s)
	}
	return cuo
}

// SetNextMapVersionProcess sets the "next_map_version_process" field.
func (cuo *CarUpdateOne) SetNextMapVersionProcess(i int) *CarUpdateOne {
	cuo.mutation.ResetNextMapVersionProcess()
	cuo.mutation.SetNextMapVersionProcess(i)
	return cuo
}

// SetNillableNextMapVersionProcess sets the "next_map_version_process" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableNextMapVersionProcess(i *int) *CarUpdateOne {
	if i != nil {
		cuo.SetNextMapVersionProcess(*i)
	}
	return cuo
}

// AddNextMapVersionProcess adds i to the "next_map_version_process" field.
func (cuo *CarUpdateOne) AddNextMapVersionProcess(i int) *CarUpdateOne {
	cuo.mutation.AddNextMapVersionProcess(i)
	return cuo
}

// SetGrAutoVersion sets the "gr_auto_version" field.
func (cuo *CarUpdateOne) SetGrAutoVersion(s string) *CarUpdateOne {
	cuo.mutation.SetGrAutoVersion(s)
	return cuo
}

// SetNillableGrAutoVersion sets the "gr_auto_version" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableGrAutoVersion(s *string) *CarUpdateOne {
	if s != nil {
		cuo.SetGrAutoVersion(*s)
	}
	return cuo
}

// SetGrUIVersion sets the "gr_ui_version" field.
func (cuo *CarUpdateOne) SetGrUIVersion(s string) *CarUpdateOne {
	cuo.mutation.SetGrUIVersion(s)
	return cuo
}

// SetNillableGrUIVersion sets the "gr_ui_version" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableGrUIVersion(s *string) *CarUpdateOne {
	if s != nil {
		cuo.SetGrUIVersion(*s)
	}
	return cuo
}

// SetCarproxyID sets the "carproxy_id" field.
func (cuo *CarUpdateOne) SetCarproxyID(s string) *CarUpdateOne {
	cuo.mutation.SetCarproxyID(s)
	return cuo
}

// SetNillableCarproxyID sets the "carproxy_id" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableCarproxyID(s *string) *CarUpdateOne {
	if s != nil {
		cuo.SetCarproxyID(*s)
	}
	return cuo
}

// SetExtendYokeeID sets the "extend_yokee_id" field.
func (cuo *CarUpdateOne) SetExtendYokeeID(i int) *CarUpdateOne {
	cuo.mutation.ResetExtendYokeeID()
	cuo.mutation.SetExtendYokeeID(i)
	return cuo
}

// SetNillableExtendYokeeID sets the "extend_yokee_id" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableExtendYokeeID(i *int) *CarUpdateOne {
	if i != nil {
		cuo.SetExtendYokeeID(*i)
	}
	return cuo
}

// AddExtendYokeeID adds i to the "extend_yokee_id" field.
func (cuo *CarUpdateOne) AddExtendYokeeID(i int) *CarUpdateOne {
	cuo.mutation.AddExtendYokeeID(i)
	return cuo
}

// ClearExtendYokeeID clears the value of the "extend_yokee_id" field.
func (cuo *CarUpdateOne) ClearExtendYokeeID() *CarUpdateOne {
	cuo.mutation.ClearExtendYokeeID()
	return cuo
}

// SetMaxSpeedLimit sets the "max_speed_limit" field.
func (cuo *CarUpdateOne) SetMaxSpeedLimit(f float32) *CarUpdateOne {
	cuo.mutation.ResetMaxSpeedLimit()
	cuo.mutation.SetMaxSpeedLimit(f)
	return cuo
}

// SetNillableMaxSpeedLimit sets the "max_speed_limit" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableMaxSpeedLimit(f *float32) *CarUpdateOne {
	if f != nil {
		cuo.SetMaxSpeedLimit(*f)
	}
	return cuo
}

// AddMaxSpeedLimit adds f to the "max_speed_limit" field.
func (cuo *CarUpdateOne) AddMaxSpeedLimit(f float32) *CarUpdateOne {
	cuo.mutation.AddMaxSpeedLimit(f)
	return cuo
}

// SetAliveTime sets the "alive_time" field.
func (cuo *CarUpdateOne) SetAliveTime(t time.Time) *CarUpdateOne {
	cuo.mutation.SetAliveTime(t)
	return cuo
}

// SetNillableAliveTime sets the "alive_time" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableAliveTime(t *time.Time) *CarUpdateOne {
	if t != nil {
		cuo.SetAliveTime(*t)
	}
	return cuo
}

// ClearAliveTime clears the value of the "alive_time" field.
func (cuo *CarUpdateOne) ClearAliveTime() *CarUpdateOne {
	cuo.mutation.ClearAliveTime()
	return cuo
}

// SetRegisterTime sets the "register_time" field.
func (cuo *CarUpdateOne) SetRegisterTime(t time.Time) *CarUpdateOne {
	cuo.mutation.SetRegisterTime(t)
	return cuo
}

// SetNillableRegisterTime sets the "register_time" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableRegisterTime(t *time.Time) *CarUpdateOne {
	if t != nil {
		cuo.SetRegisterTime(*t)
	}
	return cuo
}

// ClearRegisterTime clears the value of the "register_time" field.
func (cuo *CarUpdateOne) ClearRegisterTime() *CarUpdateOne {
	cuo.mutation.ClearRegisterTime()
	return cuo
}

// SetDrivingStateTime sets the "driving_state_time" field.
func (cuo *CarUpdateOne) SetDrivingStateTime(t time.Time) *CarUpdateOne {
	cuo.mutation.SetDrivingStateTime(t)
	return cuo
}

// SetNillableDrivingStateTime sets the "driving_state_time" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableDrivingStateTime(t *time.Time) *CarUpdateOne {
	if t != nil {
		cuo.SetDrivingStateTime(*t)
	}
	return cuo
}

// ClearDrivingStateTime clears the value of the "driving_state_time" field.
func (cuo *CarUpdateOne) ClearDrivingStateTime() *CarUpdateOne {
	cuo.mutation.ClearDrivingStateTime()
	return cuo
}

// SetUpdateTime sets the "update_time" field.
func (cuo *CarUpdateOne) SetUpdateTime(t time.Time) *CarUpdateOne {
	cuo.mutation.SetUpdateTime(t)
	return cuo
}

// SetBackgroundScenicAreaID sets the "background_scenic_area" edge to the ScenicArea entity by ID.
func (cuo *CarUpdateOne) SetBackgroundScenicAreaID(id int) *CarUpdateOne {
	cuo.mutation.SetBackgroundScenicAreaID(id)
	return cuo
}

// SetBackgroundScenicArea sets the "background_scenic_area" edge to the ScenicArea entity.
func (cuo *CarUpdateOne) SetBackgroundScenicArea(s *ScenicArea) *CarUpdateOne {
	return cuo.SetBackgroundScenicAreaID(s.ID)
}

// SetCarsModelsID sets the "cars_models" edge to the CarsModels entity by ID.
func (cuo *CarUpdateOne) SetCarsModelsID(id int) *CarUpdateOne {
	cuo.mutation.SetCarsModelsID(id)
	return cuo
}

// SetCarsModels sets the "cars_models" edge to the CarsModels entity.
func (cuo *CarUpdateOne) SetCarsModels(c *CarsModels) *CarUpdateOne {
	return cuo.SetCarsModelsID(c.ID)
}

// AddCarOperateLogIDs adds the "car_operate_logs" edge to the CarsOperateLog entity by IDs.
func (cuo *CarUpdateOne) AddCarOperateLogIDs(ids ...int) *CarUpdateOne {
	cuo.mutation.AddCarOperateLogIDs(ids...)
	return cuo
}

// AddCarOperateLogs adds the "car_operate_logs" edges to the CarsOperateLog entity.
func (cuo *CarUpdateOne) AddCarOperateLogs(c ...*CarsOperateLog) *CarUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCarOperateLogIDs(ids...)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (cuo *CarUpdateOne) AddOrderIDs(ids ...int) *CarUpdateOne {
	cuo.mutation.AddOrderIDs(ids...)
	return cuo
}

// AddOrders adds the "orders" edges to the Order entity.
func (cuo *CarUpdateOne) AddOrders(o ...*Order) *CarUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cuo.AddOrderIDs(ids...)
}

// AddStatsHourlyCarIDs adds the "stats_hourly_car" edge to the StatsHourlyCar entity by IDs.
func (cuo *CarUpdateOne) AddStatsHourlyCarIDs(ids ...int) *CarUpdateOne {
	cuo.mutation.AddStatsHourlyCarIDs(ids...)
	return cuo
}

// AddStatsHourlyCar adds the "stats_hourly_car" edges to the StatsHourlyCar entity.
func (cuo *CarUpdateOne) AddStatsHourlyCar(s ...*StatsHourlyCar) *CarUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.AddStatsHourlyCarIDs(ids...)
}

// AddScheTaskIDs adds the "sche_task" edge to the ScheTask entity by IDs.
func (cuo *CarUpdateOne) AddScheTaskIDs(ids ...int) *CarUpdateOne {
	cuo.mutation.AddScheTaskIDs(ids...)
	return cuo
}

// AddScheTask adds the "sche_task" edges to the ScheTask entity.
func (cuo *CarUpdateOne) AddScheTask(s ...*ScheTask) *CarUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.AddScheTaskIDs(ids...)
}

// AddConfigFileIDs adds the "config_files" edge to the CarConfig entity by IDs.
func (cuo *CarUpdateOne) AddConfigFileIDs(ids ...int) *CarUpdateOne {
	cuo.mutation.AddConfigFileIDs(ids...)
	return cuo
}

// AddConfigFiles adds the "config_files" edges to the CarConfig entity.
func (cuo *CarUpdateOne) AddConfigFiles(c ...*CarConfig) *CarUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddConfigFileIDs(ids...)
}

// AddCarConfigIDs adds the "car_configs" edge to the CarConfigDownload entity by IDs.
func (cuo *CarUpdateOne) AddCarConfigIDs(ids ...int) *CarUpdateOne {
	cuo.mutation.AddCarConfigIDs(ids...)
	return cuo
}

// AddCarConfigs adds the "car_configs" edges to the CarConfigDownload entity.
func (cuo *CarUpdateOne) AddCarConfigs(c ...*CarConfigDownload) *CarUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCarConfigIDs(ids...)
}

// Mutation returns the CarMutation object of the builder.
func (cuo *CarUpdateOne) Mutation() *CarMutation {
	return cuo.mutation
}

// ClearBackgroundScenicArea clears the "background_scenic_area" edge to the ScenicArea entity.
func (cuo *CarUpdateOne) ClearBackgroundScenicArea() *CarUpdateOne {
	cuo.mutation.ClearBackgroundScenicArea()
	return cuo
}

// ClearCarsModels clears the "cars_models" edge to the CarsModels entity.
func (cuo *CarUpdateOne) ClearCarsModels() *CarUpdateOne {
	cuo.mutation.ClearCarsModels()
	return cuo
}

// ClearCarOperateLogs clears all "car_operate_logs" edges to the CarsOperateLog entity.
func (cuo *CarUpdateOne) ClearCarOperateLogs() *CarUpdateOne {
	cuo.mutation.ClearCarOperateLogs()
	return cuo
}

// RemoveCarOperateLogIDs removes the "car_operate_logs" edge to CarsOperateLog entities by IDs.
func (cuo *CarUpdateOne) RemoveCarOperateLogIDs(ids ...int) *CarUpdateOne {
	cuo.mutation.RemoveCarOperateLogIDs(ids...)
	return cuo
}

// RemoveCarOperateLogs removes "car_operate_logs" edges to CarsOperateLog entities.
func (cuo *CarUpdateOne) RemoveCarOperateLogs(c ...*CarsOperateLog) *CarUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCarOperateLogIDs(ids...)
}

// ClearOrders clears all "orders" edges to the Order entity.
func (cuo *CarUpdateOne) ClearOrders() *CarUpdateOne {
	cuo.mutation.ClearOrders()
	return cuo
}

// RemoveOrderIDs removes the "orders" edge to Order entities by IDs.
func (cuo *CarUpdateOne) RemoveOrderIDs(ids ...int) *CarUpdateOne {
	cuo.mutation.RemoveOrderIDs(ids...)
	return cuo
}

// RemoveOrders removes "orders" edges to Order entities.
func (cuo *CarUpdateOne) RemoveOrders(o ...*Order) *CarUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cuo.RemoveOrderIDs(ids...)
}

// ClearStatsHourlyCar clears all "stats_hourly_car" edges to the StatsHourlyCar entity.
func (cuo *CarUpdateOne) ClearStatsHourlyCar() *CarUpdateOne {
	cuo.mutation.ClearStatsHourlyCar()
	return cuo
}

// RemoveStatsHourlyCarIDs removes the "stats_hourly_car" edge to StatsHourlyCar entities by IDs.
func (cuo *CarUpdateOne) RemoveStatsHourlyCarIDs(ids ...int) *CarUpdateOne {
	cuo.mutation.RemoveStatsHourlyCarIDs(ids...)
	return cuo
}

// RemoveStatsHourlyCar removes "stats_hourly_car" edges to StatsHourlyCar entities.
func (cuo *CarUpdateOne) RemoveStatsHourlyCar(s ...*StatsHourlyCar) *CarUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.RemoveStatsHourlyCarIDs(ids...)
}

// ClearScheTask clears all "sche_task" edges to the ScheTask entity.
func (cuo *CarUpdateOne) ClearScheTask() *CarUpdateOne {
	cuo.mutation.ClearScheTask()
	return cuo
}

// RemoveScheTaskIDs removes the "sche_task" edge to ScheTask entities by IDs.
func (cuo *CarUpdateOne) RemoveScheTaskIDs(ids ...int) *CarUpdateOne {
	cuo.mutation.RemoveScheTaskIDs(ids...)
	return cuo
}

// RemoveScheTask removes "sche_task" edges to ScheTask entities.
func (cuo *CarUpdateOne) RemoveScheTask(s ...*ScheTask) *CarUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.RemoveScheTaskIDs(ids...)
}

// ClearConfigFiles clears all "config_files" edges to the CarConfig entity.
func (cuo *CarUpdateOne) ClearConfigFiles() *CarUpdateOne {
	cuo.mutation.ClearConfigFiles()
	return cuo
}

// RemoveConfigFileIDs removes the "config_files" edge to CarConfig entities by IDs.
func (cuo *CarUpdateOne) RemoveConfigFileIDs(ids ...int) *CarUpdateOne {
	cuo.mutation.RemoveConfigFileIDs(ids...)
	return cuo
}

// RemoveConfigFiles removes "config_files" edges to CarConfig entities.
func (cuo *CarUpdateOne) RemoveConfigFiles(c ...*CarConfig) *CarUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveConfigFileIDs(ids...)
}

// ClearCarConfigs clears all "car_configs" edges to the CarConfigDownload entity.
func (cuo *CarUpdateOne) ClearCarConfigs() *CarUpdateOne {
	cuo.mutation.ClearCarConfigs()
	return cuo
}

// RemoveCarConfigIDs removes the "car_configs" edge to CarConfigDownload entities by IDs.
func (cuo *CarUpdateOne) RemoveCarConfigIDs(ids ...int) *CarUpdateOne {
	cuo.mutation.RemoveCarConfigIDs(ids...)
	return cuo
}

// RemoveCarConfigs removes "car_configs" edges to CarConfigDownload entities.
func (cuo *CarUpdateOne) RemoveCarConfigs(c ...*CarConfigDownload) *CarUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCarConfigIDs(ids...)
}

// Where appends a list predicates to the CarUpdate builder.
func (cuo *CarUpdateOne) Where(ps ...predicate.Car) *CarUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CarUpdateOne) Select(field string, fields ...string) *CarUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Car entity.
func (cuo *CarUpdateOne) Save(ctx context.Context) (*Car, error) {
	if err := cuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CarUpdateOne) SaveX(ctx context.Context) *Car {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CarUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CarUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CarUpdateOne) defaults() error {
	if _, ok := cuo.mutation.UpdateTime(); !ok {
		if car.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized car.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := car.UpdateDefaultUpdateTime()
		cuo.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CarUpdateOne) check() error {
	if cuo.mutation.BackgroundScenicAreaCleared() && len(cuo.mutation.BackgroundScenicAreaIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Car.background_scenic_area"`)
	}
	if cuo.mutation.CarsModelsCleared() && len(cuo.mutation.CarsModelsIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Car.cars_models"`)
	}
	return nil
}

func (cuo *CarUpdateOne) sqlSave(ctx context.Context) (_node *Car, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(car.Table, car.Columns, sqlgraph.NewFieldSpec(car.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Car.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, car.FieldID)
		for _, f := range fields {
			if !car.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != car.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.DeleteTime(); ok {
		_spec.SetField(car.FieldDeleteTime, field.TypeTime, value)
	}
	if cuo.mutation.DeleteTimeCleared() {
		_spec.ClearField(car.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := cuo.mutation.OperationMode(); ok {
		_spec.SetField(car.FieldOperationMode, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedOperationMode(); ok {
		_spec.AddField(car.FieldOperationMode, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.CarName(); ok {
		_spec.SetField(car.FieldCarName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.DeviceID(); ok {
		_spec.SetField(car.FieldDeviceID, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Images(); ok {
		_spec.SetField(car.FieldImages, field.TypeJSON, value)
	}
	if value, ok := cuo.mutation.AppendedImages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, car.FieldImages, value)
		})
	}
	if value, ok := cuo.mutation.LicensePlate(); ok {
		_spec.SetField(car.FieldLicensePlate, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Passengers(); ok {
		_spec.SetField(car.FieldPassengers, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedPassengers(); ok {
		_spec.AddField(car.FieldPassengers, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.ReservedSeats(); ok {
		_spec.SetField(car.FieldReservedSeats, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedReservedSeats(); ok {
		_spec.AddField(car.FieldReservedSeats, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.ProduceTime(); ok {
		_spec.SetField(car.FieldProduceTime, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.PowerThreshold(); ok {
		_spec.SetField(car.FieldPowerThreshold, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedPowerThreshold(); ok {
		_spec.AddField(car.FieldPowerThreshold, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.ActivateCode(); ok {
		_spec.SetField(car.FieldActivateCode, field.TypeString, value)
	}
	if value, ok := cuo.mutation.State(); ok {
		_spec.SetField(car.FieldState, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedState(); ok {
		_spec.AddField(car.FieldState, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.UseState(); ok {
		_spec.SetField(car.FieldUseState, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedUseState(); ok {
		_spec.AddField(car.FieldUseState, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.DrivingState(); ok {
		_spec.SetField(car.FieldDrivingState, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedDrivingState(); ok {
		_spec.AddField(car.FieldDrivingState, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.EmergencyState(); ok {
		_spec.SetField(car.FieldEmergencyState, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedEmergencyState(); ok {
		_spec.AddField(car.FieldEmergencyState, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.UseOrderID(); ok {
		_spec.SetField(car.FieldUseOrderID, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedUseOrderID(); ok {
		_spec.AddField(car.FieldUseOrderID, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.UseFlightID(); ok {
		_spec.SetField(car.FieldUseFlightID, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedUseFlightID(); ok {
		_spec.AddField(car.FieldUseFlightID, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.DispatchTaskID(); ok {
		_spec.SetField(car.FieldDispatchTaskID, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedDispatchTaskID(); ok {
		_spec.AddField(car.FieldDispatchTaskID, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.DispatchScheMode(); ok {
		_spec.SetField(car.FieldDispatchScheMode, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedDispatchScheMode(); ok {
		_spec.AddField(car.FieldDispatchScheMode, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.BindOrderCount(); ok {
		_spec.SetField(car.FieldBindOrderCount, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedBindOrderCount(); ok {
		_spec.AddField(car.FieldBindOrderCount, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.TotalOrderMileage(); ok {
		_spec.SetField(car.FieldTotalOrderMileage, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedTotalOrderMileage(); ok {
		_spec.AddField(car.FieldTotalOrderMileage, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.TotalOrderTime(); ok {
		_spec.SetField(car.FieldTotalOrderTime, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedTotalOrderTime(); ok {
		_spec.AddField(car.FieldTotalOrderTime, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.TotalOrderCount(); ok {
		_spec.SetField(car.FieldTotalOrderCount, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedTotalOrderCount(); ok {
		_spec.AddField(car.FieldTotalOrderCount, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.TotalOrderAmount(); ok {
		_spec.SetField(car.FieldTotalOrderAmount, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedTotalOrderAmount(); ok {
		_spec.AddField(car.FieldTotalOrderAmount, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.PowerRemaining(); ok {
		_spec.SetField(car.FieldPowerRemaining, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedPowerRemaining(); ok {
		_spec.AddField(car.FieldPowerRemaining, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.ErrorCount(); ok {
		_spec.SetField(car.FieldErrorCount, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedErrorCount(); ok {
		_spec.AddField(car.FieldErrorCount, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.ErrorMessage(); ok {
		_spec.SetField(car.FieldErrorMessage, field.TypeString, value)
	}
	if value, ok := cuo.mutation.IsDeleted(); ok {
		_spec.SetField(car.FieldIsDeleted, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedIsDeleted(); ok {
		_spec.AddField(car.FieldIsDeleted, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.IsCommercialCar(); ok {
		_spec.SetField(car.FieldIsCommercialCar, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedIsCommercialCar(); ok {
		_spec.AddField(car.FieldIsCommercialCar, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.IsDrivingStateValid(); ok {
		_spec.SetField(car.FieldIsDrivingStateValid, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedIsDrivingStateValid(); ok {
		_spec.AddField(car.FieldIsDrivingStateValid, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.MapVersion(); ok {
		_spec.SetField(car.FieldMapVersion, field.TypeString, value)
	}
	if value, ok := cuo.mutation.NextMapVersion(); ok {
		_spec.SetField(car.FieldNextMapVersion, field.TypeString, value)
	}
	if value, ok := cuo.mutation.NextMapVersionState(); ok {
		_spec.SetField(car.FieldNextMapVersionState, field.TypeString, value)
	}
	if value, ok := cuo.mutation.NextMapVersionProcess(); ok {
		_spec.SetField(car.FieldNextMapVersionProcess, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedNextMapVersionProcess(); ok {
		_spec.AddField(car.FieldNextMapVersionProcess, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.GrAutoVersion(); ok {
		_spec.SetField(car.FieldGrAutoVersion, field.TypeString, value)
	}
	if value, ok := cuo.mutation.GrUIVersion(); ok {
		_spec.SetField(car.FieldGrUIVersion, field.TypeString, value)
	}
	if value, ok := cuo.mutation.CarproxyID(); ok {
		_spec.SetField(car.FieldCarproxyID, field.TypeString, value)
	}
	if value, ok := cuo.mutation.ExtendYokeeID(); ok {
		_spec.SetField(car.FieldExtendYokeeID, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedExtendYokeeID(); ok {
		_spec.AddField(car.FieldExtendYokeeID, field.TypeInt, value)
	}
	if cuo.mutation.ExtendYokeeIDCleared() {
		_spec.ClearField(car.FieldExtendYokeeID, field.TypeInt)
	}
	if value, ok := cuo.mutation.MaxSpeedLimit(); ok {
		_spec.SetField(car.FieldMaxSpeedLimit, field.TypeFloat32, value)
	}
	if value, ok := cuo.mutation.AddedMaxSpeedLimit(); ok {
		_spec.AddField(car.FieldMaxSpeedLimit, field.TypeFloat32, value)
	}
	if value, ok := cuo.mutation.AliveTime(); ok {
		_spec.SetField(car.FieldAliveTime, field.TypeTime, value)
	}
	if cuo.mutation.AliveTimeCleared() {
		_spec.ClearField(car.FieldAliveTime, field.TypeTime)
	}
	if value, ok := cuo.mutation.RegisterTime(); ok {
		_spec.SetField(car.FieldRegisterTime, field.TypeTime, value)
	}
	if cuo.mutation.RegisterTimeCleared() {
		_spec.ClearField(car.FieldRegisterTime, field.TypeTime)
	}
	if value, ok := cuo.mutation.DrivingStateTime(); ok {
		_spec.SetField(car.FieldDrivingStateTime, field.TypeTime, value)
	}
	if cuo.mutation.DrivingStateTimeCleared() {
		_spec.ClearField(car.FieldDrivingStateTime, field.TypeTime)
	}
	if value, ok := cuo.mutation.UpdateTime(); ok {
		_spec.SetField(car.FieldUpdateTime, field.TypeTime, value)
	}
	if cuo.mutation.BackgroundScenicAreaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   car.BackgroundScenicAreaTable,
			Columns: []string{car.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.BackgroundScenicAreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   car.BackgroundScenicAreaTable,
			Columns: []string{car.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CarsModelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   car.CarsModelsTable,
			Columns: []string{car.CarsModelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsmodels.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CarsModelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   car.CarsModelsTable,
			Columns: []string{car.CarsModelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsmodels.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CarOperateLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.CarOperateLogsTable,
			Columns: []string{car.CarOperateLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsoperatelog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCarOperateLogsIDs(); len(nodes) > 0 && !cuo.mutation.CarOperateLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.CarOperateLogsTable,
			Columns: []string{car.CarOperateLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsoperatelog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CarOperateLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.CarOperateLogsTable,
			Columns: []string{car.CarOperateLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsoperatelog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.OrdersTable,
			Columns: []string{car.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !cuo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.OrdersTable,
			Columns: []string{car.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.OrdersTable,
			Columns: []string{car.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.StatsHourlyCarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.StatsHourlyCarTable,
			Columns: []string{car.StatsHourlyCarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statshourlycar.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedStatsHourlyCarIDs(); len(nodes) > 0 && !cuo.mutation.StatsHourlyCarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.StatsHourlyCarTable,
			Columns: []string{car.StatsHourlyCarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statshourlycar.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.StatsHourlyCarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.StatsHourlyCarTable,
			Columns: []string{car.StatsHourlyCarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statshourlycar.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ScheTaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.ScheTaskTable,
			Columns: []string{car.ScheTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schetask.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedScheTaskIDs(); len(nodes) > 0 && !cuo.mutation.ScheTaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.ScheTaskTable,
			Columns: []string{car.ScheTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schetask.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ScheTaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.ScheTaskTable,
			Columns: []string{car.ScheTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schetask.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ConfigFilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.ConfigFilesTable,
			Columns: []string{car.ConfigFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carconfig.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedConfigFilesIDs(); len(nodes) > 0 && !cuo.mutation.ConfigFilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.ConfigFilesTable,
			Columns: []string{car.ConfigFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carconfig.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ConfigFilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.ConfigFilesTable,
			Columns: []string{car.ConfigFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carconfig.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CarConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.CarConfigsTable,
			Columns: []string{car.CarConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carconfigdownload.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCarConfigsIDs(); len(nodes) > 0 && !cuo.mutation.CarConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.CarConfigsTable,
			Columns: []string{car.CarConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carconfigdownload.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CarConfigsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.CarConfigsTable,
			Columns: []string{car.CarConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carconfigdownload.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Car{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{car.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
