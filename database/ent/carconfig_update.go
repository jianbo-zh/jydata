// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/car"
	"github.com/jianbo-zh/jydata/database/ent/carconfig"
	"github.com/jianbo-zh/jydata/database/ent/carsmodels"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"github.com/jianbo-zh/jydata/database/ent/scenicarea"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// CarConfigUpdate is the builder for updating CarConfig entities.
type CarConfigUpdate struct {
	config
	hooks    []Hook
	mutation *CarConfigMutation
}

// Where appends a list predicates to the CarConfigUpdate builder.
func (ccu *CarConfigUpdate) Where(ps ...predicate.CarConfig) *CarConfigUpdate {
	ccu.mutation.Where(ps...)
	return ccu
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (ccu *CarConfigUpdate) SetScenicAreaID(i int) *CarConfigUpdate {
	ccu.mutation.SetScenicAreaID(i)
	return ccu
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (ccu *CarConfigUpdate) SetNillableScenicAreaID(i *int) *CarConfigUpdate {
	if i != nil {
		ccu.SetScenicAreaID(*i)
	}
	return ccu
}

// ClearScenicAreaID clears the value of the "scenic_area_id" field.
func (ccu *CarConfigUpdate) ClearScenicAreaID() *CarConfigUpdate {
	ccu.mutation.ClearScenicAreaID()
	return ccu
}

// SetModelID sets the "model_id" field.
func (ccu *CarConfigUpdate) SetModelID(i int) *CarConfigUpdate {
	ccu.mutation.SetModelID(i)
	return ccu
}

// SetNillableModelID sets the "model_id" field if the given value is not nil.
func (ccu *CarConfigUpdate) SetNillableModelID(i *int) *CarConfigUpdate {
	if i != nil {
		ccu.SetModelID(*i)
	}
	return ccu
}

// ClearModelID clears the value of the "model_id" field.
func (ccu *CarConfigUpdate) ClearModelID() *CarConfigUpdate {
	ccu.mutation.ClearModelID()
	return ccu
}

// SetCarID sets the "car_id" field.
func (ccu *CarConfigUpdate) SetCarID(i int) *CarConfigUpdate {
	ccu.mutation.SetCarID(i)
	return ccu
}

// SetNillableCarID sets the "car_id" field if the given value is not nil.
func (ccu *CarConfigUpdate) SetNillableCarID(i *int) *CarConfigUpdate {
	if i != nil {
		ccu.SetCarID(*i)
	}
	return ccu
}

// ClearCarID clears the value of the "car_id" field.
func (ccu *CarConfigUpdate) ClearCarID() *CarConfigUpdate {
	ccu.mutation.ClearCarID()
	return ccu
}

// SetCarVersion sets the "car_version" field.
func (ccu *CarConfigUpdate) SetCarVersion(s string) *CarConfigUpdate {
	ccu.mutation.SetCarVersion(s)
	return ccu
}

// SetNillableCarVersion sets the "car_version" field if the given value is not nil.
func (ccu *CarConfigUpdate) SetNillableCarVersion(s *string) *CarConfigUpdate {
	if s != nil {
		ccu.SetCarVersion(*s)
	}
	return ccu
}

// SetName sets the "name" field.
func (ccu *CarConfigUpdate) SetName(s string) *CarConfigUpdate {
	ccu.mutation.SetName(s)
	return ccu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ccu *CarConfigUpdate) SetNillableName(s *string) *CarConfigUpdate {
	if s != nil {
		ccu.SetName(*s)
	}
	return ccu
}

// SetRemark sets the "remark" field.
func (ccu *CarConfigUpdate) SetRemark(s string) *CarConfigUpdate {
	ccu.mutation.SetRemark(s)
	return ccu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ccu *CarConfigUpdate) SetNillableRemark(s *string) *CarConfigUpdate {
	if s != nil {
		ccu.SetRemark(*s)
	}
	return ccu
}

// SetVersion sets the "version" field.
func (ccu *CarConfigUpdate) SetVersion(s string) *CarConfigUpdate {
	ccu.mutation.SetVersion(s)
	return ccu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (ccu *CarConfigUpdate) SetNillableVersion(s *string) *CarConfigUpdate {
	if s != nil {
		ccu.SetVersion(*s)
	}
	return ccu
}

// SetSavePath sets the "save_path" field.
func (ccu *CarConfigUpdate) SetSavePath(s string) *CarConfigUpdate {
	ccu.mutation.SetSavePath(s)
	return ccu
}

// SetNillableSavePath sets the "save_path" field if the given value is not nil.
func (ccu *CarConfigUpdate) SetNillableSavePath(s *string) *CarConfigUpdate {
	if s != nil {
		ccu.SetSavePath(*s)
	}
	return ccu
}

// SetContentType sets the "content_type" field.
func (ccu *CarConfigUpdate) SetContentType(i int) *CarConfigUpdate {
	ccu.mutation.ResetContentType()
	ccu.mutation.SetContentType(i)
	return ccu
}

// SetNillableContentType sets the "content_type" field if the given value is not nil.
func (ccu *CarConfigUpdate) SetNillableContentType(i *int) *CarConfigUpdate {
	if i != nil {
		ccu.SetContentType(*i)
	}
	return ccu
}

// AddContentType adds i to the "content_type" field.
func (ccu *CarConfigUpdate) AddContentType(i int) *CarConfigUpdate {
	ccu.mutation.AddContentType(i)
	return ccu
}

// SetContentField sets the "content_field" field.
func (ccu *CarConfigUpdate) SetContentField(i int) *CarConfigUpdate {
	ccu.mutation.ResetContentField()
	ccu.mutation.SetContentField(i)
	return ccu
}

// SetNillableContentField sets the "content_field" field if the given value is not nil.
func (ccu *CarConfigUpdate) SetNillableContentField(i *int) *CarConfigUpdate {
	if i != nil {
		ccu.SetContentField(*i)
	}
	return ccu
}

// AddContentField adds i to the "content_field" field.
func (ccu *CarConfigUpdate) AddContentField(i int) *CarConfigUpdate {
	ccu.mutation.AddContentField(i)
	return ccu
}

// SetContentFileID sets the "content_file_id" field.
func (ccu *CarConfigUpdate) SetContentFileID(i int) *CarConfigUpdate {
	ccu.mutation.ResetContentFileID()
	ccu.mutation.SetContentFileID(i)
	return ccu
}

// SetNillableContentFileID sets the "content_file_id" field if the given value is not nil.
func (ccu *CarConfigUpdate) SetNillableContentFileID(i *int) *CarConfigUpdate {
	if i != nil {
		ccu.SetContentFileID(*i)
	}
	return ccu
}

// AddContentFileID adds i to the "content_file_id" field.
func (ccu *CarConfigUpdate) AddContentFileID(i int) *CarConfigUpdate {
	ccu.mutation.AddContentFileID(i)
	return ccu
}

// ClearContentFileID clears the value of the "content_file_id" field.
func (ccu *CarConfigUpdate) ClearContentFileID() *CarConfigUpdate {
	ccu.mutation.ClearContentFileID()
	return ccu
}

// SetContentPbtext sets the "content_pbtext" field.
func (ccu *CarConfigUpdate) SetContentPbtext(s string) *CarConfigUpdate {
	ccu.mutation.SetContentPbtext(s)
	return ccu
}

// SetNillableContentPbtext sets the "content_pbtext" field if the given value is not nil.
func (ccu *CarConfigUpdate) SetNillableContentPbtext(s *string) *CarConfigUpdate {
	if s != nil {
		ccu.SetContentPbtext(*s)
	}
	return ccu
}

// SetContentSha1 sets the "content_sha1" field.
func (ccu *CarConfigUpdate) SetContentSha1(s string) *CarConfigUpdate {
	ccu.mutation.SetContentSha1(s)
	return ccu
}

// SetNillableContentSha1 sets the "content_sha1" field if the given value is not nil.
func (ccu *CarConfigUpdate) SetNillableContentSha1(s *string) *CarConfigUpdate {
	if s != nil {
		ccu.SetContentSha1(*s)
	}
	return ccu
}

// SetResourceFileIds sets the "resource_file_ids" field.
func (ccu *CarConfigUpdate) SetResourceFileIds(i []int) *CarConfigUpdate {
	ccu.mutation.SetResourceFileIds(i)
	return ccu
}

// AppendResourceFileIds appends i to the "resource_file_ids" field.
func (ccu *CarConfigUpdate) AppendResourceFileIds(i []int) *CarConfigUpdate {
	ccu.mutation.AppendResourceFileIds(i)
	return ccu
}

// ClearResourceFileIds clears the value of the "resource_file_ids" field.
func (ccu *CarConfigUpdate) ClearResourceFileIds() *CarConfigUpdate {
	ccu.mutation.ClearResourceFileIds()
	return ccu
}

// SetBackgroundScenicAreaID sets the "background_scenic_area" edge to the ScenicArea entity by ID.
func (ccu *CarConfigUpdate) SetBackgroundScenicAreaID(id int) *CarConfigUpdate {
	ccu.mutation.SetBackgroundScenicAreaID(id)
	return ccu
}

// SetNillableBackgroundScenicAreaID sets the "background_scenic_area" edge to the ScenicArea entity by ID if the given value is not nil.
func (ccu *CarConfigUpdate) SetNillableBackgroundScenicAreaID(id *int) *CarConfigUpdate {
	if id != nil {
		ccu = ccu.SetBackgroundScenicAreaID(*id)
	}
	return ccu
}

// SetBackgroundScenicArea sets the "background_scenic_area" edge to the ScenicArea entity.
func (ccu *CarConfigUpdate) SetBackgroundScenicArea(s *ScenicArea) *CarConfigUpdate {
	return ccu.SetBackgroundScenicAreaID(s.ID)
}

// SetCarsModelsID sets the "cars_models" edge to the CarsModels entity by ID.
func (ccu *CarConfigUpdate) SetCarsModelsID(id int) *CarConfigUpdate {
	ccu.mutation.SetCarsModelsID(id)
	return ccu
}

// SetNillableCarsModelsID sets the "cars_models" edge to the CarsModels entity by ID if the given value is not nil.
func (ccu *CarConfigUpdate) SetNillableCarsModelsID(id *int) *CarConfigUpdate {
	if id != nil {
		ccu = ccu.SetCarsModelsID(*id)
	}
	return ccu
}

// SetCarsModels sets the "cars_models" edge to the CarsModels entity.
func (ccu *CarConfigUpdate) SetCarsModels(c *CarsModels) *CarConfigUpdate {
	return ccu.SetCarsModelsID(c.ID)
}

// SetCar sets the "car" edge to the Car entity.
func (ccu *CarConfigUpdate) SetCar(c *Car) *CarConfigUpdate {
	return ccu.SetCarID(c.ID)
}

// Mutation returns the CarConfigMutation object of the builder.
func (ccu *CarConfigUpdate) Mutation() *CarConfigMutation {
	return ccu.mutation
}

// ClearBackgroundScenicArea clears the "background_scenic_area" edge to the ScenicArea entity.
func (ccu *CarConfigUpdate) ClearBackgroundScenicArea() *CarConfigUpdate {
	ccu.mutation.ClearBackgroundScenicArea()
	return ccu
}

// ClearCarsModels clears the "cars_models" edge to the CarsModels entity.
func (ccu *CarConfigUpdate) ClearCarsModels() *CarConfigUpdate {
	ccu.mutation.ClearCarsModels()
	return ccu
}

// ClearCar clears the "car" edge to the Car entity.
func (ccu *CarConfigUpdate) ClearCar() *CarConfigUpdate {
	ccu.mutation.ClearCar()
	return ccu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ccu *CarConfigUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ccu.sqlSave, ccu.mutation, ccu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ccu *CarConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := ccu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ccu *CarConfigUpdate) Exec(ctx context.Context) error {
	_, err := ccu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccu *CarConfigUpdate) ExecX(ctx context.Context) {
	if err := ccu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ccu *CarConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(carconfig.Table, carconfig.Columns, sqlgraph.NewFieldSpec(carconfig.FieldID, field.TypeInt))
	if ps := ccu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccu.mutation.CarVersion(); ok {
		_spec.SetField(carconfig.FieldCarVersion, field.TypeString, value)
	}
	if value, ok := ccu.mutation.Name(); ok {
		_spec.SetField(carconfig.FieldName, field.TypeString, value)
	}
	if value, ok := ccu.mutation.Remark(); ok {
		_spec.SetField(carconfig.FieldRemark, field.TypeString, value)
	}
	if value, ok := ccu.mutation.Version(); ok {
		_spec.SetField(carconfig.FieldVersion, field.TypeString, value)
	}
	if value, ok := ccu.mutation.SavePath(); ok {
		_spec.SetField(carconfig.FieldSavePath, field.TypeString, value)
	}
	if value, ok := ccu.mutation.ContentType(); ok {
		_spec.SetField(carconfig.FieldContentType, field.TypeInt, value)
	}
	if value, ok := ccu.mutation.AddedContentType(); ok {
		_spec.AddField(carconfig.FieldContentType, field.TypeInt, value)
	}
	if value, ok := ccu.mutation.ContentField(); ok {
		_spec.SetField(carconfig.FieldContentField, field.TypeInt, value)
	}
	if value, ok := ccu.mutation.AddedContentField(); ok {
		_spec.AddField(carconfig.FieldContentField, field.TypeInt, value)
	}
	if value, ok := ccu.mutation.ContentFileID(); ok {
		_spec.SetField(carconfig.FieldContentFileID, field.TypeInt, value)
	}
	if value, ok := ccu.mutation.AddedContentFileID(); ok {
		_spec.AddField(carconfig.FieldContentFileID, field.TypeInt, value)
	}
	if ccu.mutation.ContentFileIDCleared() {
		_spec.ClearField(carconfig.FieldContentFileID, field.TypeInt)
	}
	if value, ok := ccu.mutation.ContentPbtext(); ok {
		_spec.SetField(carconfig.FieldContentPbtext, field.TypeString, value)
	}
	if value, ok := ccu.mutation.ContentSha1(); ok {
		_spec.SetField(carconfig.FieldContentSha1, field.TypeString, value)
	}
	if value, ok := ccu.mutation.ResourceFileIds(); ok {
		_spec.SetField(carconfig.FieldResourceFileIds, field.TypeJSON, value)
	}
	if value, ok := ccu.mutation.AppendedResourceFileIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, carconfig.FieldResourceFileIds, value)
		})
	}
	if ccu.mutation.ResourceFileIdsCleared() {
		_spec.ClearField(carconfig.FieldResourceFileIds, field.TypeJSON)
	}
	if ccu.mutation.BackgroundScenicAreaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carconfig.BackgroundScenicAreaTable,
			Columns: []string{carconfig.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccu.mutation.BackgroundScenicAreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carconfig.BackgroundScenicAreaTable,
			Columns: []string{carconfig.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ccu.mutation.CarsModelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carconfig.CarsModelsTable,
			Columns: []string{carconfig.CarsModelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsmodels.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccu.mutation.CarsModelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carconfig.CarsModelsTable,
			Columns: []string{carconfig.CarsModelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsmodels.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ccu.mutation.CarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carconfig.CarTable,
			Columns: []string{carconfig.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccu.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carconfig.CarTable,
			Columns: []string{carconfig.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ccu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ccu.mutation.done = true
	return n, nil
}

// CarConfigUpdateOne is the builder for updating a single CarConfig entity.
type CarConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CarConfigMutation
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (ccuo *CarConfigUpdateOne) SetScenicAreaID(i int) *CarConfigUpdateOne {
	ccuo.mutation.SetScenicAreaID(i)
	return ccuo
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (ccuo *CarConfigUpdateOne) SetNillableScenicAreaID(i *int) *CarConfigUpdateOne {
	if i != nil {
		ccuo.SetScenicAreaID(*i)
	}
	return ccuo
}

// ClearScenicAreaID clears the value of the "scenic_area_id" field.
func (ccuo *CarConfigUpdateOne) ClearScenicAreaID() *CarConfigUpdateOne {
	ccuo.mutation.ClearScenicAreaID()
	return ccuo
}

// SetModelID sets the "model_id" field.
func (ccuo *CarConfigUpdateOne) SetModelID(i int) *CarConfigUpdateOne {
	ccuo.mutation.SetModelID(i)
	return ccuo
}

// SetNillableModelID sets the "model_id" field if the given value is not nil.
func (ccuo *CarConfigUpdateOne) SetNillableModelID(i *int) *CarConfigUpdateOne {
	if i != nil {
		ccuo.SetModelID(*i)
	}
	return ccuo
}

// ClearModelID clears the value of the "model_id" field.
func (ccuo *CarConfigUpdateOne) ClearModelID() *CarConfigUpdateOne {
	ccuo.mutation.ClearModelID()
	return ccuo
}

// SetCarID sets the "car_id" field.
func (ccuo *CarConfigUpdateOne) SetCarID(i int) *CarConfigUpdateOne {
	ccuo.mutation.SetCarID(i)
	return ccuo
}

// SetNillableCarID sets the "car_id" field if the given value is not nil.
func (ccuo *CarConfigUpdateOne) SetNillableCarID(i *int) *CarConfigUpdateOne {
	if i != nil {
		ccuo.SetCarID(*i)
	}
	return ccuo
}

// ClearCarID clears the value of the "car_id" field.
func (ccuo *CarConfigUpdateOne) ClearCarID() *CarConfigUpdateOne {
	ccuo.mutation.ClearCarID()
	return ccuo
}

// SetCarVersion sets the "car_version" field.
func (ccuo *CarConfigUpdateOne) SetCarVersion(s string) *CarConfigUpdateOne {
	ccuo.mutation.SetCarVersion(s)
	return ccuo
}

// SetNillableCarVersion sets the "car_version" field if the given value is not nil.
func (ccuo *CarConfigUpdateOne) SetNillableCarVersion(s *string) *CarConfigUpdateOne {
	if s != nil {
		ccuo.SetCarVersion(*s)
	}
	return ccuo
}

// SetName sets the "name" field.
func (ccuo *CarConfigUpdateOne) SetName(s string) *CarConfigUpdateOne {
	ccuo.mutation.SetName(s)
	return ccuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ccuo *CarConfigUpdateOne) SetNillableName(s *string) *CarConfigUpdateOne {
	if s != nil {
		ccuo.SetName(*s)
	}
	return ccuo
}

// SetRemark sets the "remark" field.
func (ccuo *CarConfigUpdateOne) SetRemark(s string) *CarConfigUpdateOne {
	ccuo.mutation.SetRemark(s)
	return ccuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ccuo *CarConfigUpdateOne) SetNillableRemark(s *string) *CarConfigUpdateOne {
	if s != nil {
		ccuo.SetRemark(*s)
	}
	return ccuo
}

// SetVersion sets the "version" field.
func (ccuo *CarConfigUpdateOne) SetVersion(s string) *CarConfigUpdateOne {
	ccuo.mutation.SetVersion(s)
	return ccuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (ccuo *CarConfigUpdateOne) SetNillableVersion(s *string) *CarConfigUpdateOne {
	if s != nil {
		ccuo.SetVersion(*s)
	}
	return ccuo
}

// SetSavePath sets the "save_path" field.
func (ccuo *CarConfigUpdateOne) SetSavePath(s string) *CarConfigUpdateOne {
	ccuo.mutation.SetSavePath(s)
	return ccuo
}

// SetNillableSavePath sets the "save_path" field if the given value is not nil.
func (ccuo *CarConfigUpdateOne) SetNillableSavePath(s *string) *CarConfigUpdateOne {
	if s != nil {
		ccuo.SetSavePath(*s)
	}
	return ccuo
}

// SetContentType sets the "content_type" field.
func (ccuo *CarConfigUpdateOne) SetContentType(i int) *CarConfigUpdateOne {
	ccuo.mutation.ResetContentType()
	ccuo.mutation.SetContentType(i)
	return ccuo
}

// SetNillableContentType sets the "content_type" field if the given value is not nil.
func (ccuo *CarConfigUpdateOne) SetNillableContentType(i *int) *CarConfigUpdateOne {
	if i != nil {
		ccuo.SetContentType(*i)
	}
	return ccuo
}

// AddContentType adds i to the "content_type" field.
func (ccuo *CarConfigUpdateOne) AddContentType(i int) *CarConfigUpdateOne {
	ccuo.mutation.AddContentType(i)
	return ccuo
}

// SetContentField sets the "content_field" field.
func (ccuo *CarConfigUpdateOne) SetContentField(i int) *CarConfigUpdateOne {
	ccuo.mutation.ResetContentField()
	ccuo.mutation.SetContentField(i)
	return ccuo
}

// SetNillableContentField sets the "content_field" field if the given value is not nil.
func (ccuo *CarConfigUpdateOne) SetNillableContentField(i *int) *CarConfigUpdateOne {
	if i != nil {
		ccuo.SetContentField(*i)
	}
	return ccuo
}

// AddContentField adds i to the "content_field" field.
func (ccuo *CarConfigUpdateOne) AddContentField(i int) *CarConfigUpdateOne {
	ccuo.mutation.AddContentField(i)
	return ccuo
}

// SetContentFileID sets the "content_file_id" field.
func (ccuo *CarConfigUpdateOne) SetContentFileID(i int) *CarConfigUpdateOne {
	ccuo.mutation.ResetContentFileID()
	ccuo.mutation.SetContentFileID(i)
	return ccuo
}

// SetNillableContentFileID sets the "content_file_id" field if the given value is not nil.
func (ccuo *CarConfigUpdateOne) SetNillableContentFileID(i *int) *CarConfigUpdateOne {
	if i != nil {
		ccuo.SetContentFileID(*i)
	}
	return ccuo
}

// AddContentFileID adds i to the "content_file_id" field.
func (ccuo *CarConfigUpdateOne) AddContentFileID(i int) *CarConfigUpdateOne {
	ccuo.mutation.AddContentFileID(i)
	return ccuo
}

// ClearContentFileID clears the value of the "content_file_id" field.
func (ccuo *CarConfigUpdateOne) ClearContentFileID() *CarConfigUpdateOne {
	ccuo.mutation.ClearContentFileID()
	return ccuo
}

// SetContentPbtext sets the "content_pbtext" field.
func (ccuo *CarConfigUpdateOne) SetContentPbtext(s string) *CarConfigUpdateOne {
	ccuo.mutation.SetContentPbtext(s)
	return ccuo
}

// SetNillableContentPbtext sets the "content_pbtext" field if the given value is not nil.
func (ccuo *CarConfigUpdateOne) SetNillableContentPbtext(s *string) *CarConfigUpdateOne {
	if s != nil {
		ccuo.SetContentPbtext(*s)
	}
	return ccuo
}

// SetContentSha1 sets the "content_sha1" field.
func (ccuo *CarConfigUpdateOne) SetContentSha1(s string) *CarConfigUpdateOne {
	ccuo.mutation.SetContentSha1(s)
	return ccuo
}

// SetNillableContentSha1 sets the "content_sha1" field if the given value is not nil.
func (ccuo *CarConfigUpdateOne) SetNillableContentSha1(s *string) *CarConfigUpdateOne {
	if s != nil {
		ccuo.SetContentSha1(*s)
	}
	return ccuo
}

// SetResourceFileIds sets the "resource_file_ids" field.
func (ccuo *CarConfigUpdateOne) SetResourceFileIds(i []int) *CarConfigUpdateOne {
	ccuo.mutation.SetResourceFileIds(i)
	return ccuo
}

// AppendResourceFileIds appends i to the "resource_file_ids" field.
func (ccuo *CarConfigUpdateOne) AppendResourceFileIds(i []int) *CarConfigUpdateOne {
	ccuo.mutation.AppendResourceFileIds(i)
	return ccuo
}

// ClearResourceFileIds clears the value of the "resource_file_ids" field.
func (ccuo *CarConfigUpdateOne) ClearResourceFileIds() *CarConfigUpdateOne {
	ccuo.mutation.ClearResourceFileIds()
	return ccuo
}

// SetBackgroundScenicAreaID sets the "background_scenic_area" edge to the ScenicArea entity by ID.
func (ccuo *CarConfigUpdateOne) SetBackgroundScenicAreaID(id int) *CarConfigUpdateOne {
	ccuo.mutation.SetBackgroundScenicAreaID(id)
	return ccuo
}

// SetNillableBackgroundScenicAreaID sets the "background_scenic_area" edge to the ScenicArea entity by ID if the given value is not nil.
func (ccuo *CarConfigUpdateOne) SetNillableBackgroundScenicAreaID(id *int) *CarConfigUpdateOne {
	if id != nil {
		ccuo = ccuo.SetBackgroundScenicAreaID(*id)
	}
	return ccuo
}

// SetBackgroundScenicArea sets the "background_scenic_area" edge to the ScenicArea entity.
func (ccuo *CarConfigUpdateOne) SetBackgroundScenicArea(s *ScenicArea) *CarConfigUpdateOne {
	return ccuo.SetBackgroundScenicAreaID(s.ID)
}

// SetCarsModelsID sets the "cars_models" edge to the CarsModels entity by ID.
func (ccuo *CarConfigUpdateOne) SetCarsModelsID(id int) *CarConfigUpdateOne {
	ccuo.mutation.SetCarsModelsID(id)
	return ccuo
}

// SetNillableCarsModelsID sets the "cars_models" edge to the CarsModels entity by ID if the given value is not nil.
func (ccuo *CarConfigUpdateOne) SetNillableCarsModelsID(id *int) *CarConfigUpdateOne {
	if id != nil {
		ccuo = ccuo.SetCarsModelsID(*id)
	}
	return ccuo
}

// SetCarsModels sets the "cars_models" edge to the CarsModels entity.
func (ccuo *CarConfigUpdateOne) SetCarsModels(c *CarsModels) *CarConfigUpdateOne {
	return ccuo.SetCarsModelsID(c.ID)
}

// SetCar sets the "car" edge to the Car entity.
func (ccuo *CarConfigUpdateOne) SetCar(c *Car) *CarConfigUpdateOne {
	return ccuo.SetCarID(c.ID)
}

// Mutation returns the CarConfigMutation object of the builder.
func (ccuo *CarConfigUpdateOne) Mutation() *CarConfigMutation {
	return ccuo.mutation
}

// ClearBackgroundScenicArea clears the "background_scenic_area" edge to the ScenicArea entity.
func (ccuo *CarConfigUpdateOne) ClearBackgroundScenicArea() *CarConfigUpdateOne {
	ccuo.mutation.ClearBackgroundScenicArea()
	return ccuo
}

// ClearCarsModels clears the "cars_models" edge to the CarsModels entity.
func (ccuo *CarConfigUpdateOne) ClearCarsModels() *CarConfigUpdateOne {
	ccuo.mutation.ClearCarsModels()
	return ccuo
}

// ClearCar clears the "car" edge to the Car entity.
func (ccuo *CarConfigUpdateOne) ClearCar() *CarConfigUpdateOne {
	ccuo.mutation.ClearCar()
	return ccuo
}

// Where appends a list predicates to the CarConfigUpdate builder.
func (ccuo *CarConfigUpdateOne) Where(ps ...predicate.CarConfig) *CarConfigUpdateOne {
	ccuo.mutation.Where(ps...)
	return ccuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ccuo *CarConfigUpdateOne) Select(field string, fields ...string) *CarConfigUpdateOne {
	ccuo.fields = append([]string{field}, fields...)
	return ccuo
}

// Save executes the query and returns the updated CarConfig entity.
func (ccuo *CarConfigUpdateOne) Save(ctx context.Context) (*CarConfig, error) {
	return withHooks(ctx, ccuo.sqlSave, ccuo.mutation, ccuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ccuo *CarConfigUpdateOne) SaveX(ctx context.Context) *CarConfig {
	node, err := ccuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ccuo *CarConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := ccuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccuo *CarConfigUpdateOne) ExecX(ctx context.Context) {
	if err := ccuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ccuo *CarConfigUpdateOne) sqlSave(ctx context.Context) (_node *CarConfig, err error) {
	_spec := sqlgraph.NewUpdateSpec(carconfig.Table, carconfig.Columns, sqlgraph.NewFieldSpec(carconfig.FieldID, field.TypeInt))
	id, ok := ccuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CarConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ccuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carconfig.FieldID)
		for _, f := range fields {
			if !carconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != carconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ccuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccuo.mutation.CarVersion(); ok {
		_spec.SetField(carconfig.FieldCarVersion, field.TypeString, value)
	}
	if value, ok := ccuo.mutation.Name(); ok {
		_spec.SetField(carconfig.FieldName, field.TypeString, value)
	}
	if value, ok := ccuo.mutation.Remark(); ok {
		_spec.SetField(carconfig.FieldRemark, field.TypeString, value)
	}
	if value, ok := ccuo.mutation.Version(); ok {
		_spec.SetField(carconfig.FieldVersion, field.TypeString, value)
	}
	if value, ok := ccuo.mutation.SavePath(); ok {
		_spec.SetField(carconfig.FieldSavePath, field.TypeString, value)
	}
	if value, ok := ccuo.mutation.ContentType(); ok {
		_spec.SetField(carconfig.FieldContentType, field.TypeInt, value)
	}
	if value, ok := ccuo.mutation.AddedContentType(); ok {
		_spec.AddField(carconfig.FieldContentType, field.TypeInt, value)
	}
	if value, ok := ccuo.mutation.ContentField(); ok {
		_spec.SetField(carconfig.FieldContentField, field.TypeInt, value)
	}
	if value, ok := ccuo.mutation.AddedContentField(); ok {
		_spec.AddField(carconfig.FieldContentField, field.TypeInt, value)
	}
	if value, ok := ccuo.mutation.ContentFileID(); ok {
		_spec.SetField(carconfig.FieldContentFileID, field.TypeInt, value)
	}
	if value, ok := ccuo.mutation.AddedContentFileID(); ok {
		_spec.AddField(carconfig.FieldContentFileID, field.TypeInt, value)
	}
	if ccuo.mutation.ContentFileIDCleared() {
		_spec.ClearField(carconfig.FieldContentFileID, field.TypeInt)
	}
	if value, ok := ccuo.mutation.ContentPbtext(); ok {
		_spec.SetField(carconfig.FieldContentPbtext, field.TypeString, value)
	}
	if value, ok := ccuo.mutation.ContentSha1(); ok {
		_spec.SetField(carconfig.FieldContentSha1, field.TypeString, value)
	}
	if value, ok := ccuo.mutation.ResourceFileIds(); ok {
		_spec.SetField(carconfig.FieldResourceFileIds, field.TypeJSON, value)
	}
	if value, ok := ccuo.mutation.AppendedResourceFileIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, carconfig.FieldResourceFileIds, value)
		})
	}
	if ccuo.mutation.ResourceFileIdsCleared() {
		_spec.ClearField(carconfig.FieldResourceFileIds, field.TypeJSON)
	}
	if ccuo.mutation.BackgroundScenicAreaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carconfig.BackgroundScenicAreaTable,
			Columns: []string{carconfig.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccuo.mutation.BackgroundScenicAreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carconfig.BackgroundScenicAreaTable,
			Columns: []string{carconfig.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ccuo.mutation.CarsModelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carconfig.CarsModelsTable,
			Columns: []string{carconfig.CarsModelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsmodels.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccuo.mutation.CarsModelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carconfig.CarsModelsTable,
			Columns: []string{carconfig.CarsModelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsmodels.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ccuo.mutation.CarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carconfig.CarTable,
			Columns: []string{carconfig.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccuo.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carconfig.CarTable,
			Columns: []string{carconfig.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CarConfig{config: ccuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ccuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ccuo.mutation.done = true
	return _node, nil
}
