// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/carconfigdownload"
)

// CarConfigDownloadCreate is the builder for creating a CarConfigDownload entity.
type CarConfigDownloadCreate struct {
	config
	mutation *CarConfigDownloadMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (ccdc *CarConfigDownloadCreate) SetUUID(i int64) *CarConfigDownloadCreate {
	ccdc.mutation.SetUUID(i)
	return ccdc
}

// SetCarID sets the "car_id" field.
func (ccdc *CarConfigDownloadCreate) SetCarID(i int) *CarConfigDownloadCreate {
	ccdc.mutation.SetCarID(i)
	return ccdc
}

// SetDeviceID sets the "device_id" field.
func (ccdc *CarConfigDownloadCreate) SetDeviceID(s string) *CarConfigDownloadCreate {
	ccdc.mutation.SetDeviceID(s)
	return ccdc
}

// SetDownloadState sets the "download_state" field.
func (ccdc *CarConfigDownloadCreate) SetDownloadState(s string) *CarConfigDownloadCreate {
	ccdc.mutation.SetDownloadState(s)
	return ccdc
}

// SetNillableDownloadState sets the "download_state" field if the given value is not nil.
func (ccdc *CarConfigDownloadCreate) SetNillableDownloadState(s *string) *CarConfigDownloadCreate {
	if s != nil {
		ccdc.SetDownloadState(*s)
	}
	return ccdc
}

// SetDownloadProcess sets the "download_process" field.
func (ccdc *CarConfigDownloadCreate) SetDownloadProcess(i int) *CarConfigDownloadCreate {
	ccdc.mutation.SetDownloadProcess(i)
	return ccdc
}

// SetNillableDownloadProcess sets the "download_process" field if the given value is not nil.
func (ccdc *CarConfigDownloadCreate) SetNillableDownloadProcess(i *int) *CarConfigDownloadCreate {
	if i != nil {
		ccdc.SetDownloadProcess(*i)
	}
	return ccdc
}

// SetConfigIds sets the "config_ids" field.
func (ccdc *CarConfigDownloadCreate) SetConfigIds(i []int) *CarConfigDownloadCreate {
	ccdc.mutation.SetConfigIds(i)
	return ccdc
}

// SetRemark sets the "remark" field.
func (ccdc *CarConfigDownloadCreate) SetRemark(s string) *CarConfigDownloadCreate {
	ccdc.mutation.SetRemark(s)
	return ccdc
}

// SetCreateTime sets the "create_time" field.
func (ccdc *CarConfigDownloadCreate) SetCreateTime(t time.Time) *CarConfigDownloadCreate {
	ccdc.mutation.SetCreateTime(t)
	return ccdc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ccdc *CarConfigDownloadCreate) SetNillableCreateTime(t *time.Time) *CarConfigDownloadCreate {
	if t != nil {
		ccdc.SetCreateTime(*t)
	}
	return ccdc
}

// SetUpdateTime sets the "update_time" field.
func (ccdc *CarConfigDownloadCreate) SetUpdateTime(t time.Time) *CarConfigDownloadCreate {
	ccdc.mutation.SetUpdateTime(t)
	return ccdc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ccdc *CarConfigDownloadCreate) SetNillableUpdateTime(t *time.Time) *CarConfigDownloadCreate {
	if t != nil {
		ccdc.SetUpdateTime(*t)
	}
	return ccdc
}

// SetID sets the "id" field.
func (ccdc *CarConfigDownloadCreate) SetID(i int) *CarConfigDownloadCreate {
	ccdc.mutation.SetID(i)
	return ccdc
}

// Mutation returns the CarConfigDownloadMutation object of the builder.
func (ccdc *CarConfigDownloadCreate) Mutation() *CarConfigDownloadMutation {
	return ccdc.mutation
}

// Save creates the CarConfigDownload in the database.
func (ccdc *CarConfigDownloadCreate) Save(ctx context.Context) (*CarConfigDownload, error) {
	ccdc.defaults()
	return withHooks(ctx, ccdc.sqlSave, ccdc.mutation, ccdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ccdc *CarConfigDownloadCreate) SaveX(ctx context.Context) *CarConfigDownload {
	v, err := ccdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccdc *CarConfigDownloadCreate) Exec(ctx context.Context) error {
	_, err := ccdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccdc *CarConfigDownloadCreate) ExecX(ctx context.Context) {
	if err := ccdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ccdc *CarConfigDownloadCreate) defaults() {
	if _, ok := ccdc.mutation.DownloadState(); !ok {
		v := carconfigdownload.DefaultDownloadState
		ccdc.mutation.SetDownloadState(v)
	}
	if _, ok := ccdc.mutation.DownloadProcess(); !ok {
		v := carconfigdownload.DefaultDownloadProcess
		ccdc.mutation.SetDownloadProcess(v)
	}
	if _, ok := ccdc.mutation.CreateTime(); !ok {
		v := carconfigdownload.DefaultCreateTime()
		ccdc.mutation.SetCreateTime(v)
	}
	if _, ok := ccdc.mutation.UpdateTime(); !ok {
		v := carconfigdownload.DefaultUpdateTime()
		ccdc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccdc *CarConfigDownloadCreate) check() error {
	if _, ok := ccdc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`ent: missing required field "CarConfigDownload.uuid"`)}
	}
	if _, ok := ccdc.mutation.CarID(); !ok {
		return &ValidationError{Name: "car_id", err: errors.New(`ent: missing required field "CarConfigDownload.car_id"`)}
	}
	if _, ok := ccdc.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device_id", err: errors.New(`ent: missing required field "CarConfigDownload.device_id"`)}
	}
	if _, ok := ccdc.mutation.DownloadState(); !ok {
		return &ValidationError{Name: "download_state", err: errors.New(`ent: missing required field "CarConfigDownload.download_state"`)}
	}
	if _, ok := ccdc.mutation.DownloadProcess(); !ok {
		return &ValidationError{Name: "download_process", err: errors.New(`ent: missing required field "CarConfigDownload.download_process"`)}
	}
	if _, ok := ccdc.mutation.ConfigIds(); !ok {
		return &ValidationError{Name: "config_ids", err: errors.New(`ent: missing required field "CarConfigDownload.config_ids"`)}
	}
	if _, ok := ccdc.mutation.Remark(); !ok {
		return &ValidationError{Name: "remark", err: errors.New(`ent: missing required field "CarConfigDownload.remark"`)}
	}
	if _, ok := ccdc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "CarConfigDownload.create_time"`)}
	}
	if _, ok := ccdc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "CarConfigDownload.update_time"`)}
	}
	return nil
}

func (ccdc *CarConfigDownloadCreate) sqlSave(ctx context.Context) (*CarConfigDownload, error) {
	if err := ccdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ccdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ccdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	ccdc.mutation.id = &_node.ID
	ccdc.mutation.done = true
	return _node, nil
}

func (ccdc *CarConfigDownloadCreate) createSpec() (*CarConfigDownload, *sqlgraph.CreateSpec) {
	var (
		_node = &CarConfigDownload{config: ccdc.config}
		_spec = sqlgraph.NewCreateSpec(carconfigdownload.Table, sqlgraph.NewFieldSpec(carconfigdownload.FieldID, field.TypeInt))
	)
	if id, ok := ccdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ccdc.mutation.UUID(); ok {
		_spec.SetField(carconfigdownload.FieldUUID, field.TypeInt64, value)
		_node.UUID = value
	}
	if value, ok := ccdc.mutation.CarID(); ok {
		_spec.SetField(carconfigdownload.FieldCarID, field.TypeInt, value)
		_node.CarID = value
	}
	if value, ok := ccdc.mutation.DeviceID(); ok {
		_spec.SetField(carconfigdownload.FieldDeviceID, field.TypeString, value)
		_node.DeviceID = value
	}
	if value, ok := ccdc.mutation.DownloadState(); ok {
		_spec.SetField(carconfigdownload.FieldDownloadState, field.TypeString, value)
		_node.DownloadState = value
	}
	if value, ok := ccdc.mutation.DownloadProcess(); ok {
		_spec.SetField(carconfigdownload.FieldDownloadProcess, field.TypeInt, value)
		_node.DownloadProcess = value
	}
	if value, ok := ccdc.mutation.ConfigIds(); ok {
		_spec.SetField(carconfigdownload.FieldConfigIds, field.TypeJSON, value)
		_node.ConfigIds = value
	}
	if value, ok := ccdc.mutation.Remark(); ok {
		_spec.SetField(carconfigdownload.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := ccdc.mutation.CreateTime(); ok {
		_spec.SetField(carconfigdownload.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := ccdc.mutation.UpdateTime(); ok {
		_spec.SetField(carconfigdownload.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// CarConfigDownloadCreateBulk is the builder for creating many CarConfigDownload entities in bulk.
type CarConfigDownloadCreateBulk struct {
	config
	err      error
	builders []*CarConfigDownloadCreate
}

// Save creates the CarConfigDownload entities in the database.
func (ccdcb *CarConfigDownloadCreateBulk) Save(ctx context.Context) ([]*CarConfigDownload, error) {
	if ccdcb.err != nil {
		return nil, ccdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccdcb.builders))
	nodes := make([]*CarConfigDownload, len(ccdcb.builders))
	mutators := make([]Mutator, len(ccdcb.builders))
	for i := range ccdcb.builders {
		func(i int, root context.Context) {
			builder := ccdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CarConfigDownloadMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccdcb *CarConfigDownloadCreateBulk) SaveX(ctx context.Context) []*CarConfigDownload {
	v, err := ccdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccdcb *CarConfigDownloadCreateBulk) Exec(ctx context.Context) error {
	_, err := ccdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccdcb *CarConfigDownloadCreateBulk) ExecX(ctx context.Context) {
	if err := ccdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
