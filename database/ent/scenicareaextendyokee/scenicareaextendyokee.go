// Code generated by ent, DO NOT EDIT.

package scenicareaextendyokee

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the scenicareaextendyokee type in the database.
	Label = "scenic_area_extend_yokee"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldScenicAreaID holds the string denoting the scenic_area_id field in the database.
	FieldScenicAreaID = "scenic_area_id"
	// FieldYokeeAppID holds the string denoting the yokee_app_id field in the database.
	FieldYokeeAppID = "yokee_app_id"
	// FieldYokeeAppKey holds the string denoting the yokee_app_key field in the database.
	FieldYokeeAppKey = "yokee_app_key"
	// FieldYokeeOrgID holds the string denoting the yokee_org_id field in the database.
	FieldYokeeOrgID = "yokee_org_id"
	// FieldYokeeOrgName holds the string denoting the yokee_org_name field in the database.
	FieldYokeeOrgName = "yokee_org_name"
	// FieldYokeeStationID holds the string denoting the yokee_station_id field in the database.
	FieldYokeeStationID = "yokee_station_id"
	// FieldYokeeStationName holds the string denoting the yokee_station_name field in the database.
	FieldYokeeStationName = "yokee_station_name"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// Table holds the table name of the scenicareaextendyokee in the database.
	Table = "scenic_area_extend_yokees"
)

// Columns holds all SQL columns for scenicareaextendyokee fields.
var Columns = []string{
	FieldID,
	FieldScenicAreaID,
	FieldYokeeAppID,
	FieldYokeeAppKey,
	FieldYokeeOrgID,
	FieldYokeeOrgName,
	FieldYokeeStationID,
	FieldYokeeStationName,
	FieldCreateTime,
	FieldUpdateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)

// OrderOption defines the ordering options for the ScenicAreaExtendYokee queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByScenicAreaID orders the results by the scenic_area_id field.
func ByScenicAreaID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScenicAreaID, opts...).ToFunc()
}

// ByYokeeAppID orders the results by the yokee_app_id field.
func ByYokeeAppID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldYokeeAppID, opts...).ToFunc()
}

// ByYokeeAppKey orders the results by the yokee_app_key field.
func ByYokeeAppKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldYokeeAppKey, opts...).ToFunc()
}

// ByYokeeOrgID orders the results by the yokee_org_id field.
func ByYokeeOrgID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldYokeeOrgID, opts...).ToFunc()
}

// ByYokeeOrgName orders the results by the yokee_org_name field.
func ByYokeeOrgName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldYokeeOrgName, opts...).ToFunc()
}

// ByYokeeStationID orders the results by the yokee_station_id field.
func ByYokeeStationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldYokeeStationID, opts...).ToFunc()
}

// ByYokeeStationName orders the results by the yokee_station_name field.
func ByYokeeStationName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldYokeeStationName, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}
