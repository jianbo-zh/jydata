// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/poi"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"github.com/jianbo-zh/jydata/database/ent/scenicarea"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// PoiUpdate is the builder for updating Poi entities.
type PoiUpdate struct {
	config
	hooks    []Hook
	mutation *PoiMutation
}

// Where appends a list predicates to the PoiUpdate builder.
func (pu *PoiUpdate) Where(ps ...predicate.Poi) *PoiUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *PoiUpdate) SetName(s string) *PoiUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *PoiUpdate) SetNillableName(s *string) *PoiUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetAlias sets the "alias" field.
func (pu *PoiUpdate) SetAlias(s string) *PoiUpdate {
	pu.mutation.SetAlias(s)
	return pu
}

// SetNillableAlias sets the "alias" field if the given value is not nil.
func (pu *PoiUpdate) SetNillableAlias(s *string) *PoiUpdate {
	if s != nil {
		pu.SetAlias(*s)
	}
	return pu
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (pu *PoiUpdate) SetScenicAreaID(i int) *PoiUpdate {
	pu.mutation.SetScenicAreaID(i)
	return pu
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (pu *PoiUpdate) SetNillableScenicAreaID(i *int) *PoiUpdate {
	if i != nil {
		pu.SetScenicAreaID(*i)
	}
	return pu
}

// SetType sets the "type" field.
func (pu *PoiUpdate) SetType(i int) *PoiUpdate {
	pu.mutation.ResetType()
	pu.mutation.SetType(i)
	return pu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (pu *PoiUpdate) SetNillableType(i *int) *PoiUpdate {
	if i != nil {
		pu.SetType(*i)
	}
	return pu
}

// AddType adds i to the "type" field.
func (pu *PoiUpdate) AddType(i int) *PoiUpdate {
	pu.mutation.AddType(i)
	return pu
}

// SetWgsLon sets the "wgs_lon" field.
func (pu *PoiUpdate) SetWgsLon(f float64) *PoiUpdate {
	pu.mutation.ResetWgsLon()
	pu.mutation.SetWgsLon(f)
	return pu
}

// SetNillableWgsLon sets the "wgs_lon" field if the given value is not nil.
func (pu *PoiUpdate) SetNillableWgsLon(f *float64) *PoiUpdate {
	if f != nil {
		pu.SetWgsLon(*f)
	}
	return pu
}

// AddWgsLon adds f to the "wgs_lon" field.
func (pu *PoiUpdate) AddWgsLon(f float64) *PoiUpdate {
	pu.mutation.AddWgsLon(f)
	return pu
}

// SetWgsLat sets the "wgs_lat" field.
func (pu *PoiUpdate) SetWgsLat(f float64) *PoiUpdate {
	pu.mutation.ResetWgsLat()
	pu.mutation.SetWgsLat(f)
	return pu
}

// SetNillableWgsLat sets the "wgs_lat" field if the given value is not nil.
func (pu *PoiUpdate) SetNillableWgsLat(f *float64) *PoiUpdate {
	if f != nil {
		pu.SetWgsLat(*f)
	}
	return pu
}

// AddWgsLat adds f to the "wgs_lat" field.
func (pu *PoiUpdate) AddWgsLat(f float64) *PoiUpdate {
	pu.mutation.AddWgsLat(f)
	return pu
}

// SetGcjLon sets the "gcj_lon" field.
func (pu *PoiUpdate) SetGcjLon(f float64) *PoiUpdate {
	pu.mutation.ResetGcjLon()
	pu.mutation.SetGcjLon(f)
	return pu
}

// SetNillableGcjLon sets the "gcj_lon" field if the given value is not nil.
func (pu *PoiUpdate) SetNillableGcjLon(f *float64) *PoiUpdate {
	if f != nil {
		pu.SetGcjLon(*f)
	}
	return pu
}

// AddGcjLon adds f to the "gcj_lon" field.
func (pu *PoiUpdate) AddGcjLon(f float64) *PoiUpdate {
	pu.mutation.AddGcjLon(f)
	return pu
}

// SetGcjLat sets the "gcj_lat" field.
func (pu *PoiUpdate) SetGcjLat(f float64) *PoiUpdate {
	pu.mutation.ResetGcjLat()
	pu.mutation.SetGcjLat(f)
	return pu
}

// SetNillableGcjLat sets the "gcj_lat" field if the given value is not nil.
func (pu *PoiUpdate) SetNillableGcjLat(f *float64) *PoiUpdate {
	if f != nil {
		pu.SetGcjLat(*f)
	}
	return pu
}

// AddGcjLat adds f to the "gcj_lat" field.
func (pu *PoiUpdate) AddGcjLat(f float64) *PoiUpdate {
	pu.mutation.AddGcjLat(f)
	return pu
}

// SetBdLon sets the "bd_lon" field.
func (pu *PoiUpdate) SetBdLon(f float64) *PoiUpdate {
	pu.mutation.ResetBdLon()
	pu.mutation.SetBdLon(f)
	return pu
}

// SetNillableBdLon sets the "bd_lon" field if the given value is not nil.
func (pu *PoiUpdate) SetNillableBdLon(f *float64) *PoiUpdate {
	if f != nil {
		pu.SetBdLon(*f)
	}
	return pu
}

// AddBdLon adds f to the "bd_lon" field.
func (pu *PoiUpdate) AddBdLon(f float64) *PoiUpdate {
	pu.mutation.AddBdLon(f)
	return pu
}

// SetBdLat sets the "bd_lat" field.
func (pu *PoiUpdate) SetBdLat(f float64) *PoiUpdate {
	pu.mutation.ResetBdLat()
	pu.mutation.SetBdLat(f)
	return pu
}

// SetNillableBdLat sets the "bd_lat" field if the given value is not nil.
func (pu *PoiUpdate) SetNillableBdLat(f *float64) *PoiUpdate {
	if f != nil {
		pu.SetBdLat(*f)
	}
	return pu
}

// AddBdLat adds f to the "bd_lat" field.
func (pu *PoiUpdate) AddBdLat(f float64) *PoiUpdate {
	pu.mutation.AddBdLat(f)
	return pu
}

// SetStopHeading sets the "stop_heading" field.
func (pu *PoiUpdate) SetStopHeading(f float64) *PoiUpdate {
	pu.mutation.ResetStopHeading()
	pu.mutation.SetStopHeading(f)
	return pu
}

// SetNillableStopHeading sets the "stop_heading" field if the given value is not nil.
func (pu *PoiUpdate) SetNillableStopHeading(f *float64) *PoiUpdate {
	if f != nil {
		pu.SetStopHeading(*f)
	}
	return pu
}

// AddStopHeading adds f to the "stop_heading" field.
func (pu *PoiUpdate) AddStopHeading(f float64) *PoiUpdate {
	pu.mutation.AddStopHeading(f)
	return pu
}

// SetIntroText sets the "intro_text" field.
func (pu *PoiUpdate) SetIntroText(s string) *PoiUpdate {
	pu.mutation.SetIntroText(s)
	return pu
}

// SetNillableIntroText sets the "intro_text" field if the given value is not nil.
func (pu *PoiUpdate) SetNillableIntroText(s *string) *PoiUpdate {
	if s != nil {
		pu.SetIntroText(*s)
	}
	return pu
}

// SetImageIds sets the "image_ids" field.
func (pu *PoiUpdate) SetImageIds(i []int) *PoiUpdate {
	pu.mutation.SetImageIds(i)
	return pu
}

// AppendImageIds appends i to the "image_ids" field.
func (pu *PoiUpdate) AppendImageIds(i []int) *PoiUpdate {
	pu.mutation.AppendImageIds(i)
	return pu
}

// SetAudioID sets the "audio_id" field.
func (pu *PoiUpdate) SetAudioID(i int) *PoiUpdate {
	pu.mutation.ResetAudioID()
	pu.mutation.SetAudioID(i)
	return pu
}

// SetNillableAudioID sets the "audio_id" field if the given value is not nil.
func (pu *PoiUpdate) SetNillableAudioID(i *int) *PoiUpdate {
	if i != nil {
		pu.SetAudioID(*i)
	}
	return pu
}

// AddAudioID adds i to the "audio_id" field.
func (pu *PoiUpdate) AddAudioID(i int) *PoiUpdate {
	pu.mutation.AddAudioID(i)
	return pu
}

// SetVideoID sets the "video_id" field.
func (pu *PoiUpdate) SetVideoID(i int) *PoiUpdate {
	pu.mutation.ResetVideoID()
	pu.mutation.SetVideoID(i)
	return pu
}

// SetNillableVideoID sets the "video_id" field if the given value is not nil.
func (pu *PoiUpdate) SetNillableVideoID(i *int) *PoiUpdate {
	if i != nil {
		pu.SetVideoID(*i)
	}
	return pu
}

// AddVideoID adds i to the "video_id" field.
func (pu *PoiUpdate) AddVideoID(i int) *PoiUpdate {
	pu.mutation.AddVideoID(i)
	return pu
}

// SetBroadcastRadius sets the "broadcast_radius" field.
func (pu *PoiUpdate) SetBroadcastRadius(i int) *PoiUpdate {
	pu.mutation.ResetBroadcastRadius()
	pu.mutation.SetBroadcastRadius(i)
	return pu
}

// SetNillableBroadcastRadius sets the "broadcast_radius" field if the given value is not nil.
func (pu *PoiUpdate) SetNillableBroadcastRadius(i *int) *PoiUpdate {
	if i != nil {
		pu.SetBroadcastRadius(*i)
	}
	return pu
}

// AddBroadcastRadius adds i to the "broadcast_radius" field.
func (pu *PoiUpdate) AddBroadcastRadius(i int) *PoiUpdate {
	pu.mutation.AddBroadcastRadius(i)
	return pu
}

// SetParkingRadius sets the "parking_radius" field.
func (pu *PoiUpdate) SetParkingRadius(i int) *PoiUpdate {
	pu.mutation.ResetParkingRadius()
	pu.mutation.SetParkingRadius(i)
	return pu
}

// SetNillableParkingRadius sets the "parking_radius" field if the given value is not nil.
func (pu *PoiUpdate) SetNillableParkingRadius(i *int) *PoiUpdate {
	if i != nil {
		pu.SetParkingRadius(*i)
	}
	return pu
}

// AddParkingRadius adds i to the "parking_radius" field.
func (pu *PoiUpdate) AddParkingRadius(i int) *PoiUpdate {
	pu.mutation.AddParkingRadius(i)
	return pu
}

// SetLevel sets the "level" field.
func (pu *PoiUpdate) SetLevel(i int) *PoiUpdate {
	pu.mutation.ResetLevel()
	pu.mutation.SetLevel(i)
	return pu
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (pu *PoiUpdate) SetNillableLevel(i *int) *PoiUpdate {
	if i != nil {
		pu.SetLevel(*i)
	}
	return pu
}

// AddLevel adds i to the "level" field.
func (pu *PoiUpdate) AddLevel(i int) *PoiUpdate {
	pu.mutation.AddLevel(i)
	return pu
}

// SetExtendYokeeID sets the "extend_yokee_id" field.
func (pu *PoiUpdate) SetExtendYokeeID(i int) *PoiUpdate {
	pu.mutation.ResetExtendYokeeID()
	pu.mutation.SetExtendYokeeID(i)
	return pu
}

// SetNillableExtendYokeeID sets the "extend_yokee_id" field if the given value is not nil.
func (pu *PoiUpdate) SetNillableExtendYokeeID(i *int) *PoiUpdate {
	if i != nil {
		pu.SetExtendYokeeID(*i)
	}
	return pu
}

// AddExtendYokeeID adds i to the "extend_yokee_id" field.
func (pu *PoiUpdate) AddExtendYokeeID(i int) *PoiUpdate {
	pu.mutation.AddExtendYokeeID(i)
	return pu
}

// ClearExtendYokeeID clears the value of the "extend_yokee_id" field.
func (pu *PoiUpdate) ClearExtendYokeeID() *PoiUpdate {
	pu.mutation.ClearExtendYokeeID()
	return pu
}

// SetUpdateTime sets the "update_time" field.
func (pu *PoiUpdate) SetUpdateTime(t time.Time) *PoiUpdate {
	pu.mutation.SetUpdateTime(t)
	return pu
}

// SetBackgroundScenicAreaID sets the "background_scenic_area" edge to the ScenicArea entity by ID.
func (pu *PoiUpdate) SetBackgroundScenicAreaID(id int) *PoiUpdate {
	pu.mutation.SetBackgroundScenicAreaID(id)
	return pu
}

// SetBackgroundScenicArea sets the "background_scenic_area" edge to the ScenicArea entity.
func (pu *PoiUpdate) SetBackgroundScenicArea(s *ScenicArea) *PoiUpdate {
	return pu.SetBackgroundScenicAreaID(s.ID)
}

// Mutation returns the PoiMutation object of the builder.
func (pu *PoiUpdate) Mutation() *PoiMutation {
	return pu.mutation
}

// ClearBackgroundScenicArea clears the "background_scenic_area" edge to the ScenicArea entity.
func (pu *PoiUpdate) ClearBackgroundScenicArea() *PoiUpdate {
	pu.mutation.ClearBackgroundScenicArea()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PoiUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PoiUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PoiUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PoiUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PoiUpdate) defaults() {
	if _, ok := pu.mutation.UpdateTime(); !ok {
		v := poi.UpdateDefaultUpdateTime()
		pu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PoiUpdate) check() error {
	if pu.mutation.BackgroundScenicAreaCleared() && len(pu.mutation.BackgroundScenicAreaIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Poi.background_scenic_area"`)
	}
	return nil
}

func (pu *PoiUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(poi.Table, poi.Columns, sqlgraph.NewFieldSpec(poi.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(poi.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Alias(); ok {
		_spec.SetField(poi.FieldAlias, field.TypeString, value)
	}
	if value, ok := pu.mutation.GetType(); ok {
		_spec.SetField(poi.FieldType, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedType(); ok {
		_spec.AddField(poi.FieldType, field.TypeInt, value)
	}
	if value, ok := pu.mutation.WgsLon(); ok {
		_spec.SetField(poi.FieldWgsLon, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedWgsLon(); ok {
		_spec.AddField(poi.FieldWgsLon, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.WgsLat(); ok {
		_spec.SetField(poi.FieldWgsLat, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedWgsLat(); ok {
		_spec.AddField(poi.FieldWgsLat, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.GcjLon(); ok {
		_spec.SetField(poi.FieldGcjLon, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedGcjLon(); ok {
		_spec.AddField(poi.FieldGcjLon, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.GcjLat(); ok {
		_spec.SetField(poi.FieldGcjLat, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedGcjLat(); ok {
		_spec.AddField(poi.FieldGcjLat, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.BdLon(); ok {
		_spec.SetField(poi.FieldBdLon, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedBdLon(); ok {
		_spec.AddField(poi.FieldBdLon, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.BdLat(); ok {
		_spec.SetField(poi.FieldBdLat, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedBdLat(); ok {
		_spec.AddField(poi.FieldBdLat, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.StopHeading(); ok {
		_spec.SetField(poi.FieldStopHeading, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedStopHeading(); ok {
		_spec.AddField(poi.FieldStopHeading, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.IntroText(); ok {
		_spec.SetField(poi.FieldIntroText, field.TypeString, value)
	}
	if value, ok := pu.mutation.ImageIds(); ok {
		_spec.SetField(poi.FieldImageIds, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedImageIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, poi.FieldImageIds, value)
		})
	}
	if value, ok := pu.mutation.AudioID(); ok {
		_spec.SetField(poi.FieldAudioID, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedAudioID(); ok {
		_spec.AddField(poi.FieldAudioID, field.TypeInt, value)
	}
	if value, ok := pu.mutation.VideoID(); ok {
		_spec.SetField(poi.FieldVideoID, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedVideoID(); ok {
		_spec.AddField(poi.FieldVideoID, field.TypeInt, value)
	}
	if value, ok := pu.mutation.BroadcastRadius(); ok {
		_spec.SetField(poi.FieldBroadcastRadius, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedBroadcastRadius(); ok {
		_spec.AddField(poi.FieldBroadcastRadius, field.TypeInt, value)
	}
	if value, ok := pu.mutation.ParkingRadius(); ok {
		_spec.SetField(poi.FieldParkingRadius, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedParkingRadius(); ok {
		_spec.AddField(poi.FieldParkingRadius, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Level(); ok {
		_spec.SetField(poi.FieldLevel, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedLevel(); ok {
		_spec.AddField(poi.FieldLevel, field.TypeInt, value)
	}
	if value, ok := pu.mutation.ExtendYokeeID(); ok {
		_spec.SetField(poi.FieldExtendYokeeID, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedExtendYokeeID(); ok {
		_spec.AddField(poi.FieldExtendYokeeID, field.TypeInt, value)
	}
	if pu.mutation.ExtendYokeeIDCleared() {
		_spec.ClearField(poi.FieldExtendYokeeID, field.TypeInt)
	}
	if value, ok := pu.mutation.UpdateTime(); ok {
		_spec.SetField(poi.FieldUpdateTime, field.TypeTime, value)
	}
	if pu.mutation.BackgroundScenicAreaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   poi.BackgroundScenicAreaTable,
			Columns: []string{poi.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.BackgroundScenicAreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   poi.BackgroundScenicAreaTable,
			Columns: []string{poi.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{poi.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PoiUpdateOne is the builder for updating a single Poi entity.
type PoiUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PoiMutation
}

// SetName sets the "name" field.
func (puo *PoiUpdateOne) SetName(s string) *PoiUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *PoiUpdateOne) SetNillableName(s *string) *PoiUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetAlias sets the "alias" field.
func (puo *PoiUpdateOne) SetAlias(s string) *PoiUpdateOne {
	puo.mutation.SetAlias(s)
	return puo
}

// SetNillableAlias sets the "alias" field if the given value is not nil.
func (puo *PoiUpdateOne) SetNillableAlias(s *string) *PoiUpdateOne {
	if s != nil {
		puo.SetAlias(*s)
	}
	return puo
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (puo *PoiUpdateOne) SetScenicAreaID(i int) *PoiUpdateOne {
	puo.mutation.SetScenicAreaID(i)
	return puo
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (puo *PoiUpdateOne) SetNillableScenicAreaID(i *int) *PoiUpdateOne {
	if i != nil {
		puo.SetScenicAreaID(*i)
	}
	return puo
}

// SetType sets the "type" field.
func (puo *PoiUpdateOne) SetType(i int) *PoiUpdateOne {
	puo.mutation.ResetType()
	puo.mutation.SetType(i)
	return puo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (puo *PoiUpdateOne) SetNillableType(i *int) *PoiUpdateOne {
	if i != nil {
		puo.SetType(*i)
	}
	return puo
}

// AddType adds i to the "type" field.
func (puo *PoiUpdateOne) AddType(i int) *PoiUpdateOne {
	puo.mutation.AddType(i)
	return puo
}

// SetWgsLon sets the "wgs_lon" field.
func (puo *PoiUpdateOne) SetWgsLon(f float64) *PoiUpdateOne {
	puo.mutation.ResetWgsLon()
	puo.mutation.SetWgsLon(f)
	return puo
}

// SetNillableWgsLon sets the "wgs_lon" field if the given value is not nil.
func (puo *PoiUpdateOne) SetNillableWgsLon(f *float64) *PoiUpdateOne {
	if f != nil {
		puo.SetWgsLon(*f)
	}
	return puo
}

// AddWgsLon adds f to the "wgs_lon" field.
func (puo *PoiUpdateOne) AddWgsLon(f float64) *PoiUpdateOne {
	puo.mutation.AddWgsLon(f)
	return puo
}

// SetWgsLat sets the "wgs_lat" field.
func (puo *PoiUpdateOne) SetWgsLat(f float64) *PoiUpdateOne {
	puo.mutation.ResetWgsLat()
	puo.mutation.SetWgsLat(f)
	return puo
}

// SetNillableWgsLat sets the "wgs_lat" field if the given value is not nil.
func (puo *PoiUpdateOne) SetNillableWgsLat(f *float64) *PoiUpdateOne {
	if f != nil {
		puo.SetWgsLat(*f)
	}
	return puo
}

// AddWgsLat adds f to the "wgs_lat" field.
func (puo *PoiUpdateOne) AddWgsLat(f float64) *PoiUpdateOne {
	puo.mutation.AddWgsLat(f)
	return puo
}

// SetGcjLon sets the "gcj_lon" field.
func (puo *PoiUpdateOne) SetGcjLon(f float64) *PoiUpdateOne {
	puo.mutation.ResetGcjLon()
	puo.mutation.SetGcjLon(f)
	return puo
}

// SetNillableGcjLon sets the "gcj_lon" field if the given value is not nil.
func (puo *PoiUpdateOne) SetNillableGcjLon(f *float64) *PoiUpdateOne {
	if f != nil {
		puo.SetGcjLon(*f)
	}
	return puo
}

// AddGcjLon adds f to the "gcj_lon" field.
func (puo *PoiUpdateOne) AddGcjLon(f float64) *PoiUpdateOne {
	puo.mutation.AddGcjLon(f)
	return puo
}

// SetGcjLat sets the "gcj_lat" field.
func (puo *PoiUpdateOne) SetGcjLat(f float64) *PoiUpdateOne {
	puo.mutation.ResetGcjLat()
	puo.mutation.SetGcjLat(f)
	return puo
}

// SetNillableGcjLat sets the "gcj_lat" field if the given value is not nil.
func (puo *PoiUpdateOne) SetNillableGcjLat(f *float64) *PoiUpdateOne {
	if f != nil {
		puo.SetGcjLat(*f)
	}
	return puo
}

// AddGcjLat adds f to the "gcj_lat" field.
func (puo *PoiUpdateOne) AddGcjLat(f float64) *PoiUpdateOne {
	puo.mutation.AddGcjLat(f)
	return puo
}

// SetBdLon sets the "bd_lon" field.
func (puo *PoiUpdateOne) SetBdLon(f float64) *PoiUpdateOne {
	puo.mutation.ResetBdLon()
	puo.mutation.SetBdLon(f)
	return puo
}

// SetNillableBdLon sets the "bd_lon" field if the given value is not nil.
func (puo *PoiUpdateOne) SetNillableBdLon(f *float64) *PoiUpdateOne {
	if f != nil {
		puo.SetBdLon(*f)
	}
	return puo
}

// AddBdLon adds f to the "bd_lon" field.
func (puo *PoiUpdateOne) AddBdLon(f float64) *PoiUpdateOne {
	puo.mutation.AddBdLon(f)
	return puo
}

// SetBdLat sets the "bd_lat" field.
func (puo *PoiUpdateOne) SetBdLat(f float64) *PoiUpdateOne {
	puo.mutation.ResetBdLat()
	puo.mutation.SetBdLat(f)
	return puo
}

// SetNillableBdLat sets the "bd_lat" field if the given value is not nil.
func (puo *PoiUpdateOne) SetNillableBdLat(f *float64) *PoiUpdateOne {
	if f != nil {
		puo.SetBdLat(*f)
	}
	return puo
}

// AddBdLat adds f to the "bd_lat" field.
func (puo *PoiUpdateOne) AddBdLat(f float64) *PoiUpdateOne {
	puo.mutation.AddBdLat(f)
	return puo
}

// SetStopHeading sets the "stop_heading" field.
func (puo *PoiUpdateOne) SetStopHeading(f float64) *PoiUpdateOne {
	puo.mutation.ResetStopHeading()
	puo.mutation.SetStopHeading(f)
	return puo
}

// SetNillableStopHeading sets the "stop_heading" field if the given value is not nil.
func (puo *PoiUpdateOne) SetNillableStopHeading(f *float64) *PoiUpdateOne {
	if f != nil {
		puo.SetStopHeading(*f)
	}
	return puo
}

// AddStopHeading adds f to the "stop_heading" field.
func (puo *PoiUpdateOne) AddStopHeading(f float64) *PoiUpdateOne {
	puo.mutation.AddStopHeading(f)
	return puo
}

// SetIntroText sets the "intro_text" field.
func (puo *PoiUpdateOne) SetIntroText(s string) *PoiUpdateOne {
	puo.mutation.SetIntroText(s)
	return puo
}

// SetNillableIntroText sets the "intro_text" field if the given value is not nil.
func (puo *PoiUpdateOne) SetNillableIntroText(s *string) *PoiUpdateOne {
	if s != nil {
		puo.SetIntroText(*s)
	}
	return puo
}

// SetImageIds sets the "image_ids" field.
func (puo *PoiUpdateOne) SetImageIds(i []int) *PoiUpdateOne {
	puo.mutation.SetImageIds(i)
	return puo
}

// AppendImageIds appends i to the "image_ids" field.
func (puo *PoiUpdateOne) AppendImageIds(i []int) *PoiUpdateOne {
	puo.mutation.AppendImageIds(i)
	return puo
}

// SetAudioID sets the "audio_id" field.
func (puo *PoiUpdateOne) SetAudioID(i int) *PoiUpdateOne {
	puo.mutation.ResetAudioID()
	puo.mutation.SetAudioID(i)
	return puo
}

// SetNillableAudioID sets the "audio_id" field if the given value is not nil.
func (puo *PoiUpdateOne) SetNillableAudioID(i *int) *PoiUpdateOne {
	if i != nil {
		puo.SetAudioID(*i)
	}
	return puo
}

// AddAudioID adds i to the "audio_id" field.
func (puo *PoiUpdateOne) AddAudioID(i int) *PoiUpdateOne {
	puo.mutation.AddAudioID(i)
	return puo
}

// SetVideoID sets the "video_id" field.
func (puo *PoiUpdateOne) SetVideoID(i int) *PoiUpdateOne {
	puo.mutation.ResetVideoID()
	puo.mutation.SetVideoID(i)
	return puo
}

// SetNillableVideoID sets the "video_id" field if the given value is not nil.
func (puo *PoiUpdateOne) SetNillableVideoID(i *int) *PoiUpdateOne {
	if i != nil {
		puo.SetVideoID(*i)
	}
	return puo
}

// AddVideoID adds i to the "video_id" field.
func (puo *PoiUpdateOne) AddVideoID(i int) *PoiUpdateOne {
	puo.mutation.AddVideoID(i)
	return puo
}

// SetBroadcastRadius sets the "broadcast_radius" field.
func (puo *PoiUpdateOne) SetBroadcastRadius(i int) *PoiUpdateOne {
	puo.mutation.ResetBroadcastRadius()
	puo.mutation.SetBroadcastRadius(i)
	return puo
}

// SetNillableBroadcastRadius sets the "broadcast_radius" field if the given value is not nil.
func (puo *PoiUpdateOne) SetNillableBroadcastRadius(i *int) *PoiUpdateOne {
	if i != nil {
		puo.SetBroadcastRadius(*i)
	}
	return puo
}

// AddBroadcastRadius adds i to the "broadcast_radius" field.
func (puo *PoiUpdateOne) AddBroadcastRadius(i int) *PoiUpdateOne {
	puo.mutation.AddBroadcastRadius(i)
	return puo
}

// SetParkingRadius sets the "parking_radius" field.
func (puo *PoiUpdateOne) SetParkingRadius(i int) *PoiUpdateOne {
	puo.mutation.ResetParkingRadius()
	puo.mutation.SetParkingRadius(i)
	return puo
}

// SetNillableParkingRadius sets the "parking_radius" field if the given value is not nil.
func (puo *PoiUpdateOne) SetNillableParkingRadius(i *int) *PoiUpdateOne {
	if i != nil {
		puo.SetParkingRadius(*i)
	}
	return puo
}

// AddParkingRadius adds i to the "parking_radius" field.
func (puo *PoiUpdateOne) AddParkingRadius(i int) *PoiUpdateOne {
	puo.mutation.AddParkingRadius(i)
	return puo
}

// SetLevel sets the "level" field.
func (puo *PoiUpdateOne) SetLevel(i int) *PoiUpdateOne {
	puo.mutation.ResetLevel()
	puo.mutation.SetLevel(i)
	return puo
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (puo *PoiUpdateOne) SetNillableLevel(i *int) *PoiUpdateOne {
	if i != nil {
		puo.SetLevel(*i)
	}
	return puo
}

// AddLevel adds i to the "level" field.
func (puo *PoiUpdateOne) AddLevel(i int) *PoiUpdateOne {
	puo.mutation.AddLevel(i)
	return puo
}

// SetExtendYokeeID sets the "extend_yokee_id" field.
func (puo *PoiUpdateOne) SetExtendYokeeID(i int) *PoiUpdateOne {
	puo.mutation.ResetExtendYokeeID()
	puo.mutation.SetExtendYokeeID(i)
	return puo
}

// SetNillableExtendYokeeID sets the "extend_yokee_id" field if the given value is not nil.
func (puo *PoiUpdateOne) SetNillableExtendYokeeID(i *int) *PoiUpdateOne {
	if i != nil {
		puo.SetExtendYokeeID(*i)
	}
	return puo
}

// AddExtendYokeeID adds i to the "extend_yokee_id" field.
func (puo *PoiUpdateOne) AddExtendYokeeID(i int) *PoiUpdateOne {
	puo.mutation.AddExtendYokeeID(i)
	return puo
}

// ClearExtendYokeeID clears the value of the "extend_yokee_id" field.
func (puo *PoiUpdateOne) ClearExtendYokeeID() *PoiUpdateOne {
	puo.mutation.ClearExtendYokeeID()
	return puo
}

// SetUpdateTime sets the "update_time" field.
func (puo *PoiUpdateOne) SetUpdateTime(t time.Time) *PoiUpdateOne {
	puo.mutation.SetUpdateTime(t)
	return puo
}

// SetBackgroundScenicAreaID sets the "background_scenic_area" edge to the ScenicArea entity by ID.
func (puo *PoiUpdateOne) SetBackgroundScenicAreaID(id int) *PoiUpdateOne {
	puo.mutation.SetBackgroundScenicAreaID(id)
	return puo
}

// SetBackgroundScenicArea sets the "background_scenic_area" edge to the ScenicArea entity.
func (puo *PoiUpdateOne) SetBackgroundScenicArea(s *ScenicArea) *PoiUpdateOne {
	return puo.SetBackgroundScenicAreaID(s.ID)
}

// Mutation returns the PoiMutation object of the builder.
func (puo *PoiUpdateOne) Mutation() *PoiMutation {
	return puo.mutation
}

// ClearBackgroundScenicArea clears the "background_scenic_area" edge to the ScenicArea entity.
func (puo *PoiUpdateOne) ClearBackgroundScenicArea() *PoiUpdateOne {
	puo.mutation.ClearBackgroundScenicArea()
	return puo
}

// Where appends a list predicates to the PoiUpdate builder.
func (puo *PoiUpdateOne) Where(ps ...predicate.Poi) *PoiUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PoiUpdateOne) Select(field string, fields ...string) *PoiUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Poi entity.
func (puo *PoiUpdateOne) Save(ctx context.Context) (*Poi, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PoiUpdateOne) SaveX(ctx context.Context) *Poi {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PoiUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PoiUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PoiUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdateTime(); !ok {
		v := poi.UpdateDefaultUpdateTime()
		puo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PoiUpdateOne) check() error {
	if puo.mutation.BackgroundScenicAreaCleared() && len(puo.mutation.BackgroundScenicAreaIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Poi.background_scenic_area"`)
	}
	return nil
}

func (puo *PoiUpdateOne) sqlSave(ctx context.Context) (_node *Poi, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(poi.Table, poi.Columns, sqlgraph.NewFieldSpec(poi.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Poi.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, poi.FieldID)
		for _, f := range fields {
			if !poi.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != poi.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(poi.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Alias(); ok {
		_spec.SetField(poi.FieldAlias, field.TypeString, value)
	}
	if value, ok := puo.mutation.GetType(); ok {
		_spec.SetField(poi.FieldType, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedType(); ok {
		_spec.AddField(poi.FieldType, field.TypeInt, value)
	}
	if value, ok := puo.mutation.WgsLon(); ok {
		_spec.SetField(poi.FieldWgsLon, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedWgsLon(); ok {
		_spec.AddField(poi.FieldWgsLon, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.WgsLat(); ok {
		_spec.SetField(poi.FieldWgsLat, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedWgsLat(); ok {
		_spec.AddField(poi.FieldWgsLat, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.GcjLon(); ok {
		_spec.SetField(poi.FieldGcjLon, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedGcjLon(); ok {
		_spec.AddField(poi.FieldGcjLon, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.GcjLat(); ok {
		_spec.SetField(poi.FieldGcjLat, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedGcjLat(); ok {
		_spec.AddField(poi.FieldGcjLat, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.BdLon(); ok {
		_spec.SetField(poi.FieldBdLon, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedBdLon(); ok {
		_spec.AddField(poi.FieldBdLon, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.BdLat(); ok {
		_spec.SetField(poi.FieldBdLat, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedBdLat(); ok {
		_spec.AddField(poi.FieldBdLat, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.StopHeading(); ok {
		_spec.SetField(poi.FieldStopHeading, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedStopHeading(); ok {
		_spec.AddField(poi.FieldStopHeading, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.IntroText(); ok {
		_spec.SetField(poi.FieldIntroText, field.TypeString, value)
	}
	if value, ok := puo.mutation.ImageIds(); ok {
		_spec.SetField(poi.FieldImageIds, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedImageIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, poi.FieldImageIds, value)
		})
	}
	if value, ok := puo.mutation.AudioID(); ok {
		_spec.SetField(poi.FieldAudioID, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedAudioID(); ok {
		_spec.AddField(poi.FieldAudioID, field.TypeInt, value)
	}
	if value, ok := puo.mutation.VideoID(); ok {
		_spec.SetField(poi.FieldVideoID, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedVideoID(); ok {
		_spec.AddField(poi.FieldVideoID, field.TypeInt, value)
	}
	if value, ok := puo.mutation.BroadcastRadius(); ok {
		_spec.SetField(poi.FieldBroadcastRadius, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedBroadcastRadius(); ok {
		_spec.AddField(poi.FieldBroadcastRadius, field.TypeInt, value)
	}
	if value, ok := puo.mutation.ParkingRadius(); ok {
		_spec.SetField(poi.FieldParkingRadius, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedParkingRadius(); ok {
		_spec.AddField(poi.FieldParkingRadius, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Level(); ok {
		_spec.SetField(poi.FieldLevel, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedLevel(); ok {
		_spec.AddField(poi.FieldLevel, field.TypeInt, value)
	}
	if value, ok := puo.mutation.ExtendYokeeID(); ok {
		_spec.SetField(poi.FieldExtendYokeeID, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedExtendYokeeID(); ok {
		_spec.AddField(poi.FieldExtendYokeeID, field.TypeInt, value)
	}
	if puo.mutation.ExtendYokeeIDCleared() {
		_spec.ClearField(poi.FieldExtendYokeeID, field.TypeInt)
	}
	if value, ok := puo.mutation.UpdateTime(); ok {
		_spec.SetField(poi.FieldUpdateTime, field.TypeTime, value)
	}
	if puo.mutation.BackgroundScenicAreaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   poi.BackgroundScenicAreaTable,
			Columns: []string{poi.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.BackgroundScenicAreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   poi.BackgroundScenicAreaTable,
			Columns: []string{poi.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Poi{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{poi.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
