// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jianbo-zh/jydata/database/ent/otaversion"
	"github.com/jianbo-zh/jydata/database/schema/types"
)

// OtaVersion is the model entity for the OtaVersion schema.
type OtaVersion struct {
	config `json:"-"`
	// ID of the ent.
	// ID
	ID int `json:"id,omitempty"`
	// DeleteTime holds the value of the "delete_time" field.
	DeleteTime time.Time `json:"delete_time,omitempty"`
	// 景区ID
	ScenicAreaID *int `json:"scenic_area_id,omitempty"`
	// 景区ID
	ModelID *int `json:"model_id,omitempty"`
	// 名称
	Name string `json:"name,omitempty"`
	// 版本号
	Version string `json:"version,omitempty"`
	// OTA内容
	Content types.OtaContent `json:"content,omitempty"`
	// 升级状态（1-待升级 2-升级中 3-部分失败 4-升级成功 5-升级失败）
	State int `json:"state,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime   time.Time `json:"update_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OtaVersion) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case otaversion.FieldContent:
			values[i] = new([]byte)
		case otaversion.FieldID, otaversion.FieldScenicAreaID, otaversion.FieldModelID, otaversion.FieldState:
			values[i] = new(sql.NullInt64)
		case otaversion.FieldName, otaversion.FieldVersion:
			values[i] = new(sql.NullString)
		case otaversion.FieldDeleteTime, otaversion.FieldCreateTime, otaversion.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OtaVersion fields.
func (ov *OtaVersion) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case otaversion.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ov.ID = int(value.Int64)
		case otaversion.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				ov.DeleteTime = value.Time
			}
		case otaversion.FieldScenicAreaID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field scenic_area_id", values[i])
			} else if value.Valid {
				ov.ScenicAreaID = new(int)
				*ov.ScenicAreaID = int(value.Int64)
			}
		case otaversion.FieldModelID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field model_id", values[i])
			} else if value.Valid {
				ov.ModelID = new(int)
				*ov.ModelID = int(value.Int64)
			}
		case otaversion.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ov.Name = value.String
			}
		case otaversion.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				ov.Version = value.String
			}
		case otaversion.FieldContent:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ov.Content); err != nil {
					return fmt.Errorf("unmarshal field content: %w", err)
				}
			}
		case otaversion.FieldState:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				ov.State = int(value.Int64)
			}
		case otaversion.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ov.CreateTime = value.Time
			}
		case otaversion.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ov.UpdateTime = value.Time
			}
		default:
			ov.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OtaVersion.
// This includes values selected through modifiers, order, etc.
func (ov *OtaVersion) Value(name string) (ent.Value, error) {
	return ov.selectValues.Get(name)
}

// Update returns a builder for updating this OtaVersion.
// Note that you need to call OtaVersion.Unwrap() before calling this method if this OtaVersion
// was returned from a transaction, and the transaction was committed or rolled back.
func (ov *OtaVersion) Update() *OtaVersionUpdateOne {
	return NewOtaVersionClient(ov.config).UpdateOne(ov)
}

// Unwrap unwraps the OtaVersion entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ov *OtaVersion) Unwrap() *OtaVersion {
	_tx, ok := ov.config.driver.(*txDriver)
	if !ok {
		panic("ent: OtaVersion is not a transactional entity")
	}
	ov.config.driver = _tx.drv
	return ov
}

// String implements the fmt.Stringer.
func (ov *OtaVersion) String() string {
	var builder strings.Builder
	builder.WriteString("OtaVersion(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ov.ID))
	builder.WriteString("delete_time=")
	builder.WriteString(ov.DeleteTime.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := ov.ScenicAreaID; v != nil {
		builder.WriteString("scenic_area_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := ov.ModelID; v != nil {
		builder.WriteString("model_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ov.Name)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(ov.Version)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(fmt.Sprintf("%v", ov.Content))
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(fmt.Sprintf("%v", ov.State))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(ov.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(ov.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// OtaVersions is a parsable slice of OtaVersion.
type OtaVersions []*OtaVersion
