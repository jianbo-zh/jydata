// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jianbo-zh/jydata/database/ent/paytxbill"
	"github.com/jianbo-zh/jydata/database/ent/scenicarea"
)

// PayTxBill is the model entity for the PayTxBill schema.
type PayTxBill struct {
	config `json:"-"`
	// ID of the ent.
	// ID
	ID int `json:"id,omitempty"`
	// 支付流水号
	TxID string `json:"tx_id,omitempty"`
	// 订单ID
	OrderID int `json:"order_id,omitempty"`
	// 订单号
	OrderNo string `json:"order_no,omitempty"`
	// 景区ID
	ScenicAreaID int `json:"scenic_area_id,omitempty"`
	// 景区名称
	ScenicAreaName string `json:"scenic_area_name,omitempty"`
	// 类型（1-收入 0-支出）
	TxType int `json:"tx_type,omitempty"`
	// 渠道（1-用车押金、2-用车费用、3-用车退款 4-微信分账）
	TxChannel int `json:"tx_channel,omitempty"`
	// 对方账号
	TxAccount string `json:"tx_account,omitempty"`
	// 对方姓名
	TxAccountName string `json:"tx_account_name,omitempty"`
	// 交易金额(单位: 分)
	TxAmount int `json:"tx_amount,omitempty"`
	// 交易时间
	TxTime time.Time `json:"tx_time,omitempty"`
	// 备注
	Remark string `json:"remark,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PayTxBillQuery when eager-loading is set.
	Edges        PayTxBillEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PayTxBillEdges holds the relations/edges for other nodes in the graph.
type PayTxBillEdges struct {
	// BackgroundScenicArea holds the value of the background_scenic_area edge.
	BackgroundScenicArea *ScenicArea `json:"background_scenic_area,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BackgroundScenicAreaOrErr returns the BackgroundScenicArea value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PayTxBillEdges) BackgroundScenicAreaOrErr() (*ScenicArea, error) {
	if e.BackgroundScenicArea != nil {
		return e.BackgroundScenicArea, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: scenicarea.Label}
	}
	return nil, &NotLoadedError{edge: "background_scenic_area"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PayTxBill) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case paytxbill.FieldID, paytxbill.FieldOrderID, paytxbill.FieldScenicAreaID, paytxbill.FieldTxType, paytxbill.FieldTxChannel, paytxbill.FieldTxAmount:
			values[i] = new(sql.NullInt64)
		case paytxbill.FieldTxID, paytxbill.FieldOrderNo, paytxbill.FieldScenicAreaName, paytxbill.FieldTxAccount, paytxbill.FieldTxAccountName, paytxbill.FieldRemark:
			values[i] = new(sql.NullString)
		case paytxbill.FieldTxTime, paytxbill.FieldCreateTime, paytxbill.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PayTxBill fields.
func (ptb *PayTxBill) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case paytxbill.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ptb.ID = int(value.Int64)
		case paytxbill.FieldTxID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tx_id", values[i])
			} else if value.Valid {
				ptb.TxID = value.String
			}
		case paytxbill.FieldOrderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value.Valid {
				ptb.OrderID = int(value.Int64)
			}
		case paytxbill.FieldOrderNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field order_no", values[i])
			} else if value.Valid {
				ptb.OrderNo = value.String
			}
		case paytxbill.FieldScenicAreaID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field scenic_area_id", values[i])
			} else if value.Valid {
				ptb.ScenicAreaID = int(value.Int64)
			}
		case paytxbill.FieldScenicAreaName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scenic_area_name", values[i])
			} else if value.Valid {
				ptb.ScenicAreaName = value.String
			}
		case paytxbill.FieldTxType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tx_type", values[i])
			} else if value.Valid {
				ptb.TxType = int(value.Int64)
			}
		case paytxbill.FieldTxChannel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tx_channel", values[i])
			} else if value.Valid {
				ptb.TxChannel = int(value.Int64)
			}
		case paytxbill.FieldTxAccount:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tx_account", values[i])
			} else if value.Valid {
				ptb.TxAccount = value.String
			}
		case paytxbill.FieldTxAccountName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tx_account_name", values[i])
			} else if value.Valid {
				ptb.TxAccountName = value.String
			}
		case paytxbill.FieldTxAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tx_amount", values[i])
			} else if value.Valid {
				ptb.TxAmount = int(value.Int64)
			}
		case paytxbill.FieldTxTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field tx_time", values[i])
			} else if value.Valid {
				ptb.TxTime = value.Time
			}
		case paytxbill.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				ptb.Remark = value.String
			}
		case paytxbill.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ptb.CreateTime = value.Time
			}
		case paytxbill.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ptb.UpdateTime = value.Time
			}
		default:
			ptb.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PayTxBill.
// This includes values selected through modifiers, order, etc.
func (ptb *PayTxBill) Value(name string) (ent.Value, error) {
	return ptb.selectValues.Get(name)
}

// QueryBackgroundScenicArea queries the "background_scenic_area" edge of the PayTxBill entity.
func (ptb *PayTxBill) QueryBackgroundScenicArea() *ScenicAreaQuery {
	return NewPayTxBillClient(ptb.config).QueryBackgroundScenicArea(ptb)
}

// Update returns a builder for updating this PayTxBill.
// Note that you need to call PayTxBill.Unwrap() before calling this method if this PayTxBill
// was returned from a transaction, and the transaction was committed or rolled back.
func (ptb *PayTxBill) Update() *PayTxBillUpdateOne {
	return NewPayTxBillClient(ptb.config).UpdateOne(ptb)
}

// Unwrap unwraps the PayTxBill entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ptb *PayTxBill) Unwrap() *PayTxBill {
	_tx, ok := ptb.config.driver.(*txDriver)
	if !ok {
		panic("ent: PayTxBill is not a transactional entity")
	}
	ptb.config.driver = _tx.drv
	return ptb
}

// String implements the fmt.Stringer.
func (ptb *PayTxBill) String() string {
	var builder strings.Builder
	builder.WriteString("PayTxBill(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ptb.ID))
	builder.WriteString("tx_id=")
	builder.WriteString(ptb.TxID)
	builder.WriteString(", ")
	builder.WriteString("order_id=")
	builder.WriteString(fmt.Sprintf("%v", ptb.OrderID))
	builder.WriteString(", ")
	builder.WriteString("order_no=")
	builder.WriteString(ptb.OrderNo)
	builder.WriteString(", ")
	builder.WriteString("scenic_area_id=")
	builder.WriteString(fmt.Sprintf("%v", ptb.ScenicAreaID))
	builder.WriteString(", ")
	builder.WriteString("scenic_area_name=")
	builder.WriteString(ptb.ScenicAreaName)
	builder.WriteString(", ")
	builder.WriteString("tx_type=")
	builder.WriteString(fmt.Sprintf("%v", ptb.TxType))
	builder.WriteString(", ")
	builder.WriteString("tx_channel=")
	builder.WriteString(fmt.Sprintf("%v", ptb.TxChannel))
	builder.WriteString(", ")
	builder.WriteString("tx_account=")
	builder.WriteString(ptb.TxAccount)
	builder.WriteString(", ")
	builder.WriteString("tx_account_name=")
	builder.WriteString(ptb.TxAccountName)
	builder.WriteString(", ")
	builder.WriteString("tx_amount=")
	builder.WriteString(fmt.Sprintf("%v", ptb.TxAmount))
	builder.WriteString(", ")
	builder.WriteString("tx_time=")
	builder.WriteString(ptb.TxTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(ptb.Remark)
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(ptb.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(ptb.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// PayTxBills is a parsable slice of PayTxBill.
type PayTxBills []*PayTxBill
