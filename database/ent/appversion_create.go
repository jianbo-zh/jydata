// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/appversion"
)

// AppVersionCreate is the builder for creating a AppVersion entity.
type AppVersionCreate struct {
	config
	mutation *AppVersionMutation
	hooks    []Hook
}

// SetPlatform sets the "platform" field.
func (avc *AppVersionCreate) SetPlatform(s string) *AppVersionCreate {
	avc.mutation.SetPlatform(s)
	return avc
}

// SetAppName sets the "app_name" field.
func (avc *AppVersionCreate) SetAppName(s string) *AppVersionCreate {
	avc.mutation.SetAppName(s)
	return avc
}

// SetVersion sets the "version" field.
func (avc *AppVersionCreate) SetVersion(s string) *AppVersionCreate {
	avc.mutation.SetVersion(s)
	return avc
}

// SetContent sets the "content" field.
func (avc *AppVersionCreate) SetContent(s string) *AppVersionCreate {
	avc.mutation.SetContent(s)
	return avc
}

// SetIsForceUpgrade sets the "is_force_upgrade" field.
func (avc *AppVersionCreate) SetIsForceUpgrade(b bool) *AppVersionCreate {
	avc.mutation.SetIsForceUpgrade(b)
	return avc
}

// SetFileID sets the "file_id" field.
func (avc *AppVersionCreate) SetFileID(i int) *AppVersionCreate {
	avc.mutation.SetFileID(i)
	return avc
}

// SetState sets the "state" field.
func (avc *AppVersionCreate) SetState(i int) *AppVersionCreate {
	avc.mutation.SetState(i)
	return avc
}

// SetPublishTime sets the "publish_time" field.
func (avc *AppVersionCreate) SetPublishTime(t time.Time) *AppVersionCreate {
	avc.mutation.SetPublishTime(t)
	return avc
}

// SetNillablePublishTime sets the "publish_time" field if the given value is not nil.
func (avc *AppVersionCreate) SetNillablePublishTime(t *time.Time) *AppVersionCreate {
	if t != nil {
		avc.SetPublishTime(*t)
	}
	return avc
}

// SetCreateTime sets the "create_time" field.
func (avc *AppVersionCreate) SetCreateTime(t time.Time) *AppVersionCreate {
	avc.mutation.SetCreateTime(t)
	return avc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (avc *AppVersionCreate) SetNillableCreateTime(t *time.Time) *AppVersionCreate {
	if t != nil {
		avc.SetCreateTime(*t)
	}
	return avc
}

// SetUpdateTime sets the "update_time" field.
func (avc *AppVersionCreate) SetUpdateTime(t time.Time) *AppVersionCreate {
	avc.mutation.SetUpdateTime(t)
	return avc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (avc *AppVersionCreate) SetNillableUpdateTime(t *time.Time) *AppVersionCreate {
	if t != nil {
		avc.SetUpdateTime(*t)
	}
	return avc
}

// SetID sets the "id" field.
func (avc *AppVersionCreate) SetID(i int) *AppVersionCreate {
	avc.mutation.SetID(i)
	return avc
}

// Mutation returns the AppVersionMutation object of the builder.
func (avc *AppVersionCreate) Mutation() *AppVersionMutation {
	return avc.mutation
}

// Save creates the AppVersion in the database.
func (avc *AppVersionCreate) Save(ctx context.Context) (*AppVersion, error) {
	avc.defaults()
	return withHooks(ctx, avc.sqlSave, avc.mutation, avc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (avc *AppVersionCreate) SaveX(ctx context.Context) *AppVersion {
	v, err := avc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (avc *AppVersionCreate) Exec(ctx context.Context) error {
	_, err := avc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (avc *AppVersionCreate) ExecX(ctx context.Context) {
	if err := avc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (avc *AppVersionCreate) defaults() {
	if _, ok := avc.mutation.PublishTime(); !ok {
		v := appversion.DefaultPublishTime
		avc.mutation.SetPublishTime(v)
	}
	if _, ok := avc.mutation.CreateTime(); !ok {
		v := appversion.DefaultCreateTime()
		avc.mutation.SetCreateTime(v)
	}
	if _, ok := avc.mutation.UpdateTime(); !ok {
		v := appversion.DefaultUpdateTime()
		avc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (avc *AppVersionCreate) check() error {
	if _, ok := avc.mutation.Platform(); !ok {
		return &ValidationError{Name: "platform", err: errors.New(`ent: missing required field "AppVersion.platform"`)}
	}
	if _, ok := avc.mutation.AppName(); !ok {
		return &ValidationError{Name: "app_name", err: errors.New(`ent: missing required field "AppVersion.app_name"`)}
	}
	if _, ok := avc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "AppVersion.version"`)}
	}
	if _, ok := avc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "AppVersion.content"`)}
	}
	if _, ok := avc.mutation.IsForceUpgrade(); !ok {
		return &ValidationError{Name: "is_force_upgrade", err: errors.New(`ent: missing required field "AppVersion.is_force_upgrade"`)}
	}
	if _, ok := avc.mutation.FileID(); !ok {
		return &ValidationError{Name: "file_id", err: errors.New(`ent: missing required field "AppVersion.file_id"`)}
	}
	if _, ok := avc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "AppVersion.state"`)}
	}
	if _, ok := avc.mutation.PublishTime(); !ok {
		return &ValidationError{Name: "publish_time", err: errors.New(`ent: missing required field "AppVersion.publish_time"`)}
	}
	if _, ok := avc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "AppVersion.create_time"`)}
	}
	if _, ok := avc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "AppVersion.update_time"`)}
	}
	return nil
}

func (avc *AppVersionCreate) sqlSave(ctx context.Context) (*AppVersion, error) {
	if err := avc.check(); err != nil {
		return nil, err
	}
	_node, _spec := avc.createSpec()
	if err := sqlgraph.CreateNode(ctx, avc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	avc.mutation.id = &_node.ID
	avc.mutation.done = true
	return _node, nil
}

func (avc *AppVersionCreate) createSpec() (*AppVersion, *sqlgraph.CreateSpec) {
	var (
		_node = &AppVersion{config: avc.config}
		_spec = sqlgraph.NewCreateSpec(appversion.Table, sqlgraph.NewFieldSpec(appversion.FieldID, field.TypeInt))
	)
	if id, ok := avc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := avc.mutation.Platform(); ok {
		_spec.SetField(appversion.FieldPlatform, field.TypeString, value)
		_node.Platform = value
	}
	if value, ok := avc.mutation.AppName(); ok {
		_spec.SetField(appversion.FieldAppName, field.TypeString, value)
		_node.AppName = value
	}
	if value, ok := avc.mutation.Version(); ok {
		_spec.SetField(appversion.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := avc.mutation.Content(); ok {
		_spec.SetField(appversion.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := avc.mutation.IsForceUpgrade(); ok {
		_spec.SetField(appversion.FieldIsForceUpgrade, field.TypeBool, value)
		_node.IsForceUpgrade = value
	}
	if value, ok := avc.mutation.FileID(); ok {
		_spec.SetField(appversion.FieldFileID, field.TypeInt, value)
		_node.FileID = value
	}
	if value, ok := avc.mutation.State(); ok {
		_spec.SetField(appversion.FieldState, field.TypeInt, value)
		_node.State = value
	}
	if value, ok := avc.mutation.PublishTime(); ok {
		_spec.SetField(appversion.FieldPublishTime, field.TypeTime, value)
		_node.PublishTime = value
	}
	if value, ok := avc.mutation.CreateTime(); ok {
		_spec.SetField(appversion.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := avc.mutation.UpdateTime(); ok {
		_spec.SetField(appversion.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// AppVersionCreateBulk is the builder for creating many AppVersion entities in bulk.
type AppVersionCreateBulk struct {
	config
	err      error
	builders []*AppVersionCreate
}

// Save creates the AppVersion entities in the database.
func (avcb *AppVersionCreateBulk) Save(ctx context.Context) ([]*AppVersion, error) {
	if avcb.err != nil {
		return nil, avcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(avcb.builders))
	nodes := make([]*AppVersion, len(avcb.builders))
	mutators := make([]Mutator, len(avcb.builders))
	for i := range avcb.builders {
		func(i int, root context.Context) {
			builder := avcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppVersionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, avcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, avcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, avcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (avcb *AppVersionCreateBulk) SaveX(ctx context.Context) []*AppVersion {
	v, err := avcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (avcb *AppVersionCreateBulk) Exec(ctx context.Context) error {
	_, err := avcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (avcb *AppVersionCreateBulk) ExecX(ctx context.Context) {
	if err := avcb.Exec(ctx); err != nil {
		panic(err)
	}
}
