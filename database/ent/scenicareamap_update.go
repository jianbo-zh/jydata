// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"github.com/jianbo-zh/jydata/database/ent/scenicarea"
	"github.com/jianbo-zh/jydata/database/ent/scenicareamap"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScenicAreaMapUpdate is the builder for updating ScenicAreaMap entities.
type ScenicAreaMapUpdate struct {
	config
	hooks    []Hook
	mutation *ScenicAreaMapMutation
}

// Where appends a list predicates to the ScenicAreaMapUpdate builder.
func (samu *ScenicAreaMapUpdate) Where(ps ...predicate.ScenicAreaMap) *ScenicAreaMapUpdate {
	samu.mutation.Where(ps...)
	return samu
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (samu *ScenicAreaMapUpdate) SetScenicAreaID(i int) *ScenicAreaMapUpdate {
	samu.mutation.SetScenicAreaID(i)
	return samu
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (samu *ScenicAreaMapUpdate) SetNillableScenicAreaID(i *int) *ScenicAreaMapUpdate {
	if i != nil {
		samu.SetScenicAreaID(*i)
	}
	return samu
}

// SetName sets the "name" field.
func (samu *ScenicAreaMapUpdate) SetName(s string) *ScenicAreaMapUpdate {
	samu.mutation.SetName(s)
	return samu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (samu *ScenicAreaMapUpdate) SetNillableName(s *string) *ScenicAreaMapUpdate {
	if s != nil {
		samu.SetName(*s)
	}
	return samu
}

// SetBaseMapFileID sets the "base_map_file_id" field.
func (samu *ScenicAreaMapUpdate) SetBaseMapFileID(i int) *ScenicAreaMapUpdate {
	samu.mutation.ResetBaseMapFileID()
	samu.mutation.SetBaseMapFileID(i)
	return samu
}

// SetNillableBaseMapFileID sets the "base_map_file_id" field if the given value is not nil.
func (samu *ScenicAreaMapUpdate) SetNillableBaseMapFileID(i *int) *ScenicAreaMapUpdate {
	if i != nil {
		samu.SetBaseMapFileID(*i)
	}
	return samu
}

// AddBaseMapFileID adds i to the "base_map_file_id" field.
func (samu *ScenicAreaMapUpdate) AddBaseMapFileID(i int) *ScenicAreaMapUpdate {
	samu.mutation.AddBaseMapFileID(i)
	return samu
}

// SetRoutingMapFileID sets the "routing_map_file_id" field.
func (samu *ScenicAreaMapUpdate) SetRoutingMapFileID(i int) *ScenicAreaMapUpdate {
	samu.mutation.ResetRoutingMapFileID()
	samu.mutation.SetRoutingMapFileID(i)
	return samu
}

// SetNillableRoutingMapFileID sets the "routing_map_file_id" field if the given value is not nil.
func (samu *ScenicAreaMapUpdate) SetNillableRoutingMapFileID(i *int) *ScenicAreaMapUpdate {
	if i != nil {
		samu.SetRoutingMapFileID(*i)
	}
	return samu
}

// AddRoutingMapFileID adds i to the "routing_map_file_id" field.
func (samu *ScenicAreaMapUpdate) AddRoutingMapFileID(i int) *ScenicAreaMapUpdate {
	samu.mutation.AddRoutingMapFileID(i)
	return samu
}

// SetSimMapFileID sets the "sim_map_file_id" field.
func (samu *ScenicAreaMapUpdate) SetSimMapFileID(i int) *ScenicAreaMapUpdate {
	samu.mutation.ResetSimMapFileID()
	samu.mutation.SetSimMapFileID(i)
	return samu
}

// SetNillableSimMapFileID sets the "sim_map_file_id" field if the given value is not nil.
func (samu *ScenicAreaMapUpdate) SetNillableSimMapFileID(i *int) *ScenicAreaMapUpdate {
	if i != nil {
		samu.SetSimMapFileID(*i)
	}
	return samu
}

// AddSimMapFileID adds i to the "sim_map_file_id" field.
func (samu *ScenicAreaMapUpdate) AddSimMapFileID(i int) *ScenicAreaMapUpdate {
	samu.mutation.AddSimMapFileID(i)
	return samu
}

// SetFenceMapFileID sets the "fence_map_file_id" field.
func (samu *ScenicAreaMapUpdate) SetFenceMapFileID(i int) *ScenicAreaMapUpdate {
	samu.mutation.ResetFenceMapFileID()
	samu.mutation.SetFenceMapFileID(i)
	return samu
}

// SetNillableFenceMapFileID sets the "fence_map_file_id" field if the given value is not nil.
func (samu *ScenicAreaMapUpdate) SetNillableFenceMapFileID(i *int) *ScenicAreaMapUpdate {
	if i != nil {
		samu.SetFenceMapFileID(*i)
	}
	return samu
}

// AddFenceMapFileID adds i to the "fence_map_file_id" field.
func (samu *ScenicAreaMapUpdate) AddFenceMapFileID(i int) *ScenicAreaMapUpdate {
	samu.mutation.AddFenceMapFileID(i)
	return samu
}

// SetCaruiMapFileID sets the "carui_map_file_id" field.
func (samu *ScenicAreaMapUpdate) SetCaruiMapFileID(i int) *ScenicAreaMapUpdate {
	samu.mutation.ResetCaruiMapFileID()
	samu.mutation.SetCaruiMapFileID(i)
	return samu
}

// SetNillableCaruiMapFileID sets the "carui_map_file_id" field if the given value is not nil.
func (samu *ScenicAreaMapUpdate) SetNillableCaruiMapFileID(i *int) *ScenicAreaMapUpdate {
	if i != nil {
		samu.SetCaruiMapFileID(*i)
	}
	return samu
}

// AddCaruiMapFileID adds i to the "carui_map_file_id" field.
func (samu *ScenicAreaMapUpdate) AddCaruiMapFileID(i int) *ScenicAreaMapUpdate {
	samu.mutation.AddCaruiMapFileID(i)
	return samu
}

// SetCaruiNeCoord sets the "carui_ne_coord" field.
func (samu *ScenicAreaMapUpdate) SetCaruiNeCoord(s string) *ScenicAreaMapUpdate {
	samu.mutation.SetCaruiNeCoord(s)
	return samu
}

// SetNillableCaruiNeCoord sets the "carui_ne_coord" field if the given value is not nil.
func (samu *ScenicAreaMapUpdate) SetNillableCaruiNeCoord(s *string) *ScenicAreaMapUpdate {
	if s != nil {
		samu.SetCaruiNeCoord(*s)
	}
	return samu
}

// SetCaruiSwCoord sets the "carui_sw_coord" field.
func (samu *ScenicAreaMapUpdate) SetCaruiSwCoord(s string) *ScenicAreaMapUpdate {
	samu.mutation.SetCaruiSwCoord(s)
	return samu
}

// SetNillableCaruiSwCoord sets the "carui_sw_coord" field if the given value is not nil.
func (samu *ScenicAreaMapUpdate) SetNillableCaruiSwCoord(s *string) *ScenicAreaMapUpdate {
	if s != nil {
		samu.SetCaruiSwCoord(*s)
	}
	return samu
}

// SetUpdateTime sets the "update_time" field.
func (samu *ScenicAreaMapUpdate) SetUpdateTime(t time.Time) *ScenicAreaMapUpdate {
	samu.mutation.SetUpdateTime(t)
	return samu
}

// SetBackgroundScenicAreaID sets the "background_scenic_area" edge to the ScenicArea entity by ID.
func (samu *ScenicAreaMapUpdate) SetBackgroundScenicAreaID(id int) *ScenicAreaMapUpdate {
	samu.mutation.SetBackgroundScenicAreaID(id)
	return samu
}

// SetBackgroundScenicArea sets the "background_scenic_area" edge to the ScenicArea entity.
func (samu *ScenicAreaMapUpdate) SetBackgroundScenicArea(s *ScenicArea) *ScenicAreaMapUpdate {
	return samu.SetBackgroundScenicAreaID(s.ID)
}

// Mutation returns the ScenicAreaMapMutation object of the builder.
func (samu *ScenicAreaMapUpdate) Mutation() *ScenicAreaMapMutation {
	return samu.mutation
}

// ClearBackgroundScenicArea clears the "background_scenic_area" edge to the ScenicArea entity.
func (samu *ScenicAreaMapUpdate) ClearBackgroundScenicArea() *ScenicAreaMapUpdate {
	samu.mutation.ClearBackgroundScenicArea()
	return samu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (samu *ScenicAreaMapUpdate) Save(ctx context.Context) (int, error) {
	samu.defaults()
	return withHooks(ctx, samu.sqlSave, samu.mutation, samu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (samu *ScenicAreaMapUpdate) SaveX(ctx context.Context) int {
	affected, err := samu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (samu *ScenicAreaMapUpdate) Exec(ctx context.Context) error {
	_, err := samu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (samu *ScenicAreaMapUpdate) ExecX(ctx context.Context) {
	if err := samu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (samu *ScenicAreaMapUpdate) defaults() {
	if _, ok := samu.mutation.UpdateTime(); !ok {
		v := scenicareamap.UpdateDefaultUpdateTime()
		samu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (samu *ScenicAreaMapUpdate) check() error {
	if samu.mutation.BackgroundScenicAreaCleared() && len(samu.mutation.BackgroundScenicAreaIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ScenicAreaMap.background_scenic_area"`)
	}
	return nil
}

func (samu *ScenicAreaMapUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := samu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(scenicareamap.Table, scenicareamap.Columns, sqlgraph.NewFieldSpec(scenicareamap.FieldID, field.TypeInt))
	if ps := samu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := samu.mutation.Name(); ok {
		_spec.SetField(scenicareamap.FieldName, field.TypeString, value)
	}
	if value, ok := samu.mutation.BaseMapFileID(); ok {
		_spec.SetField(scenicareamap.FieldBaseMapFileID, field.TypeInt, value)
	}
	if value, ok := samu.mutation.AddedBaseMapFileID(); ok {
		_spec.AddField(scenicareamap.FieldBaseMapFileID, field.TypeInt, value)
	}
	if value, ok := samu.mutation.RoutingMapFileID(); ok {
		_spec.SetField(scenicareamap.FieldRoutingMapFileID, field.TypeInt, value)
	}
	if value, ok := samu.mutation.AddedRoutingMapFileID(); ok {
		_spec.AddField(scenicareamap.FieldRoutingMapFileID, field.TypeInt, value)
	}
	if value, ok := samu.mutation.SimMapFileID(); ok {
		_spec.SetField(scenicareamap.FieldSimMapFileID, field.TypeInt, value)
	}
	if value, ok := samu.mutation.AddedSimMapFileID(); ok {
		_spec.AddField(scenicareamap.FieldSimMapFileID, field.TypeInt, value)
	}
	if value, ok := samu.mutation.FenceMapFileID(); ok {
		_spec.SetField(scenicareamap.FieldFenceMapFileID, field.TypeInt, value)
	}
	if value, ok := samu.mutation.AddedFenceMapFileID(); ok {
		_spec.AddField(scenicareamap.FieldFenceMapFileID, field.TypeInt, value)
	}
	if value, ok := samu.mutation.CaruiMapFileID(); ok {
		_spec.SetField(scenicareamap.FieldCaruiMapFileID, field.TypeInt, value)
	}
	if value, ok := samu.mutation.AddedCaruiMapFileID(); ok {
		_spec.AddField(scenicareamap.FieldCaruiMapFileID, field.TypeInt, value)
	}
	if value, ok := samu.mutation.CaruiNeCoord(); ok {
		_spec.SetField(scenicareamap.FieldCaruiNeCoord, field.TypeString, value)
	}
	if value, ok := samu.mutation.CaruiSwCoord(); ok {
		_spec.SetField(scenicareamap.FieldCaruiSwCoord, field.TypeString, value)
	}
	if value, ok := samu.mutation.UpdateTime(); ok {
		_spec.SetField(scenicareamap.FieldUpdateTime, field.TypeTime, value)
	}
	if samu.mutation.BackgroundScenicAreaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   scenicareamap.BackgroundScenicAreaTable,
			Columns: []string{scenicareamap.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := samu.mutation.BackgroundScenicAreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   scenicareamap.BackgroundScenicAreaTable,
			Columns: []string{scenicareamap.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, samu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scenicareamap.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	samu.mutation.done = true
	return n, nil
}

// ScenicAreaMapUpdateOne is the builder for updating a single ScenicAreaMap entity.
type ScenicAreaMapUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ScenicAreaMapMutation
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (samuo *ScenicAreaMapUpdateOne) SetScenicAreaID(i int) *ScenicAreaMapUpdateOne {
	samuo.mutation.SetScenicAreaID(i)
	return samuo
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (samuo *ScenicAreaMapUpdateOne) SetNillableScenicAreaID(i *int) *ScenicAreaMapUpdateOne {
	if i != nil {
		samuo.SetScenicAreaID(*i)
	}
	return samuo
}

// SetName sets the "name" field.
func (samuo *ScenicAreaMapUpdateOne) SetName(s string) *ScenicAreaMapUpdateOne {
	samuo.mutation.SetName(s)
	return samuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (samuo *ScenicAreaMapUpdateOne) SetNillableName(s *string) *ScenicAreaMapUpdateOne {
	if s != nil {
		samuo.SetName(*s)
	}
	return samuo
}

// SetBaseMapFileID sets the "base_map_file_id" field.
func (samuo *ScenicAreaMapUpdateOne) SetBaseMapFileID(i int) *ScenicAreaMapUpdateOne {
	samuo.mutation.ResetBaseMapFileID()
	samuo.mutation.SetBaseMapFileID(i)
	return samuo
}

// SetNillableBaseMapFileID sets the "base_map_file_id" field if the given value is not nil.
func (samuo *ScenicAreaMapUpdateOne) SetNillableBaseMapFileID(i *int) *ScenicAreaMapUpdateOne {
	if i != nil {
		samuo.SetBaseMapFileID(*i)
	}
	return samuo
}

// AddBaseMapFileID adds i to the "base_map_file_id" field.
func (samuo *ScenicAreaMapUpdateOne) AddBaseMapFileID(i int) *ScenicAreaMapUpdateOne {
	samuo.mutation.AddBaseMapFileID(i)
	return samuo
}

// SetRoutingMapFileID sets the "routing_map_file_id" field.
func (samuo *ScenicAreaMapUpdateOne) SetRoutingMapFileID(i int) *ScenicAreaMapUpdateOne {
	samuo.mutation.ResetRoutingMapFileID()
	samuo.mutation.SetRoutingMapFileID(i)
	return samuo
}

// SetNillableRoutingMapFileID sets the "routing_map_file_id" field if the given value is not nil.
func (samuo *ScenicAreaMapUpdateOne) SetNillableRoutingMapFileID(i *int) *ScenicAreaMapUpdateOne {
	if i != nil {
		samuo.SetRoutingMapFileID(*i)
	}
	return samuo
}

// AddRoutingMapFileID adds i to the "routing_map_file_id" field.
func (samuo *ScenicAreaMapUpdateOne) AddRoutingMapFileID(i int) *ScenicAreaMapUpdateOne {
	samuo.mutation.AddRoutingMapFileID(i)
	return samuo
}

// SetSimMapFileID sets the "sim_map_file_id" field.
func (samuo *ScenicAreaMapUpdateOne) SetSimMapFileID(i int) *ScenicAreaMapUpdateOne {
	samuo.mutation.ResetSimMapFileID()
	samuo.mutation.SetSimMapFileID(i)
	return samuo
}

// SetNillableSimMapFileID sets the "sim_map_file_id" field if the given value is not nil.
func (samuo *ScenicAreaMapUpdateOne) SetNillableSimMapFileID(i *int) *ScenicAreaMapUpdateOne {
	if i != nil {
		samuo.SetSimMapFileID(*i)
	}
	return samuo
}

// AddSimMapFileID adds i to the "sim_map_file_id" field.
func (samuo *ScenicAreaMapUpdateOne) AddSimMapFileID(i int) *ScenicAreaMapUpdateOne {
	samuo.mutation.AddSimMapFileID(i)
	return samuo
}

// SetFenceMapFileID sets the "fence_map_file_id" field.
func (samuo *ScenicAreaMapUpdateOne) SetFenceMapFileID(i int) *ScenicAreaMapUpdateOne {
	samuo.mutation.ResetFenceMapFileID()
	samuo.mutation.SetFenceMapFileID(i)
	return samuo
}

// SetNillableFenceMapFileID sets the "fence_map_file_id" field if the given value is not nil.
func (samuo *ScenicAreaMapUpdateOne) SetNillableFenceMapFileID(i *int) *ScenicAreaMapUpdateOne {
	if i != nil {
		samuo.SetFenceMapFileID(*i)
	}
	return samuo
}

// AddFenceMapFileID adds i to the "fence_map_file_id" field.
func (samuo *ScenicAreaMapUpdateOne) AddFenceMapFileID(i int) *ScenicAreaMapUpdateOne {
	samuo.mutation.AddFenceMapFileID(i)
	return samuo
}

// SetCaruiMapFileID sets the "carui_map_file_id" field.
func (samuo *ScenicAreaMapUpdateOne) SetCaruiMapFileID(i int) *ScenicAreaMapUpdateOne {
	samuo.mutation.ResetCaruiMapFileID()
	samuo.mutation.SetCaruiMapFileID(i)
	return samuo
}

// SetNillableCaruiMapFileID sets the "carui_map_file_id" field if the given value is not nil.
func (samuo *ScenicAreaMapUpdateOne) SetNillableCaruiMapFileID(i *int) *ScenicAreaMapUpdateOne {
	if i != nil {
		samuo.SetCaruiMapFileID(*i)
	}
	return samuo
}

// AddCaruiMapFileID adds i to the "carui_map_file_id" field.
func (samuo *ScenicAreaMapUpdateOne) AddCaruiMapFileID(i int) *ScenicAreaMapUpdateOne {
	samuo.mutation.AddCaruiMapFileID(i)
	return samuo
}

// SetCaruiNeCoord sets the "carui_ne_coord" field.
func (samuo *ScenicAreaMapUpdateOne) SetCaruiNeCoord(s string) *ScenicAreaMapUpdateOne {
	samuo.mutation.SetCaruiNeCoord(s)
	return samuo
}

// SetNillableCaruiNeCoord sets the "carui_ne_coord" field if the given value is not nil.
func (samuo *ScenicAreaMapUpdateOne) SetNillableCaruiNeCoord(s *string) *ScenicAreaMapUpdateOne {
	if s != nil {
		samuo.SetCaruiNeCoord(*s)
	}
	return samuo
}

// SetCaruiSwCoord sets the "carui_sw_coord" field.
func (samuo *ScenicAreaMapUpdateOne) SetCaruiSwCoord(s string) *ScenicAreaMapUpdateOne {
	samuo.mutation.SetCaruiSwCoord(s)
	return samuo
}

// SetNillableCaruiSwCoord sets the "carui_sw_coord" field if the given value is not nil.
func (samuo *ScenicAreaMapUpdateOne) SetNillableCaruiSwCoord(s *string) *ScenicAreaMapUpdateOne {
	if s != nil {
		samuo.SetCaruiSwCoord(*s)
	}
	return samuo
}

// SetUpdateTime sets the "update_time" field.
func (samuo *ScenicAreaMapUpdateOne) SetUpdateTime(t time.Time) *ScenicAreaMapUpdateOne {
	samuo.mutation.SetUpdateTime(t)
	return samuo
}

// SetBackgroundScenicAreaID sets the "background_scenic_area" edge to the ScenicArea entity by ID.
func (samuo *ScenicAreaMapUpdateOne) SetBackgroundScenicAreaID(id int) *ScenicAreaMapUpdateOne {
	samuo.mutation.SetBackgroundScenicAreaID(id)
	return samuo
}

// SetBackgroundScenicArea sets the "background_scenic_area" edge to the ScenicArea entity.
func (samuo *ScenicAreaMapUpdateOne) SetBackgroundScenicArea(s *ScenicArea) *ScenicAreaMapUpdateOne {
	return samuo.SetBackgroundScenicAreaID(s.ID)
}

// Mutation returns the ScenicAreaMapMutation object of the builder.
func (samuo *ScenicAreaMapUpdateOne) Mutation() *ScenicAreaMapMutation {
	return samuo.mutation
}

// ClearBackgroundScenicArea clears the "background_scenic_area" edge to the ScenicArea entity.
func (samuo *ScenicAreaMapUpdateOne) ClearBackgroundScenicArea() *ScenicAreaMapUpdateOne {
	samuo.mutation.ClearBackgroundScenicArea()
	return samuo
}

// Where appends a list predicates to the ScenicAreaMapUpdate builder.
func (samuo *ScenicAreaMapUpdateOne) Where(ps ...predicate.ScenicAreaMap) *ScenicAreaMapUpdateOne {
	samuo.mutation.Where(ps...)
	return samuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (samuo *ScenicAreaMapUpdateOne) Select(field string, fields ...string) *ScenicAreaMapUpdateOne {
	samuo.fields = append([]string{field}, fields...)
	return samuo
}

// Save executes the query and returns the updated ScenicAreaMap entity.
func (samuo *ScenicAreaMapUpdateOne) Save(ctx context.Context) (*ScenicAreaMap, error) {
	samuo.defaults()
	return withHooks(ctx, samuo.sqlSave, samuo.mutation, samuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (samuo *ScenicAreaMapUpdateOne) SaveX(ctx context.Context) *ScenicAreaMap {
	node, err := samuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (samuo *ScenicAreaMapUpdateOne) Exec(ctx context.Context) error {
	_, err := samuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (samuo *ScenicAreaMapUpdateOne) ExecX(ctx context.Context) {
	if err := samuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (samuo *ScenicAreaMapUpdateOne) defaults() {
	if _, ok := samuo.mutation.UpdateTime(); !ok {
		v := scenicareamap.UpdateDefaultUpdateTime()
		samuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (samuo *ScenicAreaMapUpdateOne) check() error {
	if samuo.mutation.BackgroundScenicAreaCleared() && len(samuo.mutation.BackgroundScenicAreaIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ScenicAreaMap.background_scenic_area"`)
	}
	return nil
}

func (samuo *ScenicAreaMapUpdateOne) sqlSave(ctx context.Context) (_node *ScenicAreaMap, err error) {
	if err := samuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(scenicareamap.Table, scenicareamap.Columns, sqlgraph.NewFieldSpec(scenicareamap.FieldID, field.TypeInt))
	id, ok := samuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ScenicAreaMap.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := samuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, scenicareamap.FieldID)
		for _, f := range fields {
			if !scenicareamap.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != scenicareamap.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := samuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := samuo.mutation.Name(); ok {
		_spec.SetField(scenicareamap.FieldName, field.TypeString, value)
	}
	if value, ok := samuo.mutation.BaseMapFileID(); ok {
		_spec.SetField(scenicareamap.FieldBaseMapFileID, field.TypeInt, value)
	}
	if value, ok := samuo.mutation.AddedBaseMapFileID(); ok {
		_spec.AddField(scenicareamap.FieldBaseMapFileID, field.TypeInt, value)
	}
	if value, ok := samuo.mutation.RoutingMapFileID(); ok {
		_spec.SetField(scenicareamap.FieldRoutingMapFileID, field.TypeInt, value)
	}
	if value, ok := samuo.mutation.AddedRoutingMapFileID(); ok {
		_spec.AddField(scenicareamap.FieldRoutingMapFileID, field.TypeInt, value)
	}
	if value, ok := samuo.mutation.SimMapFileID(); ok {
		_spec.SetField(scenicareamap.FieldSimMapFileID, field.TypeInt, value)
	}
	if value, ok := samuo.mutation.AddedSimMapFileID(); ok {
		_spec.AddField(scenicareamap.FieldSimMapFileID, field.TypeInt, value)
	}
	if value, ok := samuo.mutation.FenceMapFileID(); ok {
		_spec.SetField(scenicareamap.FieldFenceMapFileID, field.TypeInt, value)
	}
	if value, ok := samuo.mutation.AddedFenceMapFileID(); ok {
		_spec.AddField(scenicareamap.FieldFenceMapFileID, field.TypeInt, value)
	}
	if value, ok := samuo.mutation.CaruiMapFileID(); ok {
		_spec.SetField(scenicareamap.FieldCaruiMapFileID, field.TypeInt, value)
	}
	if value, ok := samuo.mutation.AddedCaruiMapFileID(); ok {
		_spec.AddField(scenicareamap.FieldCaruiMapFileID, field.TypeInt, value)
	}
	if value, ok := samuo.mutation.CaruiNeCoord(); ok {
		_spec.SetField(scenicareamap.FieldCaruiNeCoord, field.TypeString, value)
	}
	if value, ok := samuo.mutation.CaruiSwCoord(); ok {
		_spec.SetField(scenicareamap.FieldCaruiSwCoord, field.TypeString, value)
	}
	if value, ok := samuo.mutation.UpdateTime(); ok {
		_spec.SetField(scenicareamap.FieldUpdateTime, field.TypeTime, value)
	}
	if samuo.mutation.BackgroundScenicAreaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   scenicareamap.BackgroundScenicAreaTable,
			Columns: []string{scenicareamap.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := samuo.mutation.BackgroundScenicAreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   scenicareamap.BackgroundScenicAreaTable,
			Columns: []string{scenicareamap.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ScenicAreaMap{config: samuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, samuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scenicareamap.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	samuo.mutation.done = true
	return _node, nil
}
