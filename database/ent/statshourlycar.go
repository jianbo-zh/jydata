// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/car"
	"github.com/jianbo-zh/jydata/database/ent/scenicarea"
	"github.com/jianbo-zh/jydata/database/ent/statshourlycar"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// StatsHourlyCar is the model entity for the StatsHourlyCar schema.
type StatsHourlyCar struct {
	config `json:"-"`
	// ID of the ent.
	// ID
	ID int `json:"id,omitempty"`
	// 景区ID
	ScenicAreaID int `json:"scenic_area_id,omitempty"`
	// 车辆ID
	CarID int `json:"car_id,omitempty"`
	// 年
	Y int `json:"y,omitempty"`
	// 月
	M int `json:"m,omitempty"`
	// 日
	D int `json:"d,omitempty"`
	// 时
	H int `json:"h,omitempty"`
	// 第几周
	Week int `json:"week,omitempty"`
	// 星期几(1,2,3,4,5,6,7)
	Weekday int `json:"weekday,omitempty"`
	// 时间段(1-工作日、2-周末、3-节假日)
	Period int `json:"period,omitempty"`
	// 新建订单数
	OrderCountCreate int `json:"order_count_create,omitempty"`
	// 完成订单数
	OrderCountFinish int `json:"order_count_finish,omitempty"`
	// 取消订单数
	OrderCountCancel int `json:"order_count_cancel,omitempty"`
	// 完成订单额
	OrderAmount int `json:"order_amount,omitempty"`
	// 完成订单时长
	OrderDuration int `json:"order_duration,omitempty"`
	// 完成订单距离
	OrderMileage int `json:"order_mileage,omitempty"`
	// 订单评分
	OrderScore int `json:"order_score,omitempty"`
	// 累积运营锁车时长（秒）
	CumulativeOperationLockDuration float32 `json:"cumulative_operation_lock_duration,omitempty"`
	// 累积运营手动时长（秒）
	CumulativeOperationManualDuration float32 `json:"cumulative_operation_manual_duration,omitempty"`
	// 累积运营自动时长（秒）
	CumulativeOperationAutoDuration float32 `json:"cumulative_operation_auto_duration,omitempty"`
	// 累积运营故障时长（秒）
	CumulativeOperationFaultDuration float32 `json:"cumulative_operation_fault_duration,omitempty"`
	// 累积运营锁车次数
	CumulativeOperationLockTimes uint32 `json:"cumulative_operation_lock_times,omitempty"`
	// 累积运营手动次数
	CumulativeOperationManualTimes uint32 `json:"cumulative_operation_manual_times,omitempty"`
	// 累积运营自动次数
	CumulativeOperationAutoTimes uint32 `json:"cumulative_operation_auto_times,omitempty"`
	// 累积运营故障次数
	CumulativeOperationFaultTimes uint32 `json:"cumulative_operation_fault_times,omitempty"`
	// 累积运营手动里程（米）
	CumulativeOperationManualMileage float32 `json:"cumulative_operation_manual_mileage,omitempty"`
	// 累积运营自动里程（米）
	CumulativeOperationAutoMileage float32 `json:"cumulative_operation_auto_mileage,omitempty"`
	// 累积运维锁车时长（秒）
	CumulativeMaintainLockDuration float32 `json:"cumulative_maintain_lock_duration,omitempty"`
	// 累积运维手动时长（秒）
	CumulativeMaintainManualDuration float32 `json:"cumulative_maintain_manual_duration,omitempty"`
	// 累积运维自动时长（秒）
	CumulativeMaintainAutoDuration float32 `json:"cumulative_maintain_auto_duration,omitempty"`
	// 累积运维远程时长（秒）
	CumulativeMaintainRemoteDuration float32 `json:"cumulative_maintain_remote_duration,omitempty"`
	// 累积运维故障时长（秒）
	CumulativeMaintainFaultDuration float32 `json:"cumulative_maintain_fault_duration,omitempty"`
	// 累积运维锁车次数
	CumulativeMaintainLockTimes uint32 `json:"cumulative_maintain_lock_times,omitempty"`
	// 累积运维手动次数
	CumulativeMaintainManualTimes uint32 `json:"cumulative_maintain_manual_times,omitempty"`
	// 累积运维自动次数
	CumulativeMaintainAutoTimes uint32 `json:"cumulative_maintain_auto_times,omitempty"`
	// 累积运维远程次数
	CumulativeMaintainRemoteTimes uint32 `json:"cumulative_maintain_remote_times,omitempty"`
	// 累积运维故障次数
	CumulativeMaintainFaultTimes uint32 `json:"cumulative_maintain_fault_times,omitempty"`
	// 累积运维手动里程（米）
	CumulativeMaintainManualMileage float32 `json:"cumulative_maintain_manual_mileage,omitempty"`
	// 累积运维自动里程（米）
	CumulativeMaintainAutoMileage float32 `json:"cumulative_maintain_auto_mileage,omitempty"`
	// 累积运维远程里程（米）
	CumulativeMaintainRemoteMileage float32 `json:"cumulative_maintain_remote_mileage,omitempty"`
	// 累积告警次数
	CumulativeAlarmTimes uint32 `json:"cumulative_alarm_times,omitempty"`
	// 运营锁车时长（秒）
	OperationLockDuration float32 `json:"operation_lock_duration,omitempty"`
	// 运营手动时长（秒）
	OperationManualDuration float32 `json:"operation_manual_duration,omitempty"`
	// 运营自动时长（秒）
	OperationAutoDuration float32 `json:"operation_auto_duration,omitempty"`
	// 运营故障时长（秒）
	OperationFaultDuration float32 `json:"operation_fault_duration,omitempty"`
	// 运营锁车次数
	OperationLockTimes uint32 `json:"operation_lock_times,omitempty"`
	// 运营手动次数
	OperationManualTimes uint32 `json:"operation_manual_times,omitempty"`
	// 运营自动次数
	OperationAutoTimes uint32 `json:"operation_auto_times,omitempty"`
	// 运营故障次数
	OperationFaultTimes uint32 `json:"operation_fault_times,omitempty"`
	// 运营手动里程（米）
	OperationManualMileage float32 `json:"operation_manual_mileage,omitempty"`
	// 运营自动里程（米）
	OperationAutoMileage float32 `json:"operation_auto_mileage,omitempty"`
	// 运维锁车时长（秒）
	MaintainLockDuration float32 `json:"maintain_lock_duration,omitempty"`
	// 运维手动时长（秒）
	MaintainManualDuration float32 `json:"maintain_manual_duration,omitempty"`
	// 运维自动时长（秒）
	MaintainAutoDuration float32 `json:"maintain_auto_duration,omitempty"`
	// 运维远程时长（秒）
	MaintainRemoteDuration float32 `json:"maintain_remote_duration,omitempty"`
	// 运维故障时长（秒）
	MaintainFaultDuration float32 `json:"maintain_fault_duration,omitempty"`
	// 运维锁车次数
	MaintainLockTimes uint32 `json:"maintain_lock_times,omitempty"`
	// 运维手动次数
	MaintainManualTimes uint32 `json:"maintain_manual_times,omitempty"`
	// 运维自动次数
	MaintainAutoTimes uint32 `json:"maintain_auto_times,omitempty"`
	// 运维远程次数
	MaintainRemoteTimes uint32 `json:"maintain_remote_times,omitempty"`
	// 运维故障次数
	MaintainFaultTimes uint32 `json:"maintain_fault_times,omitempty"`
	// 运维手动里程（米）
	MaintainManualMileage float32 `json:"maintain_manual_mileage,omitempty"`
	// 运维自动里程（米）
	MaintainAutoMileage float32 `json:"maintain_auto_mileage,omitempty"`
	// 运维远程里程（米）
	MaintainRemoteMileage float32 `json:"maintain_remote_mileage,omitempty"`
	// 告警次数
	AlarmTimes uint32 `json:"alarm_times,omitempty"`
	// 统计的时间
	StatsTime time.Time `json:"stats_time,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StatsHourlyCarQuery when eager-loading is set.
	Edges        StatsHourlyCarEdges `json:"edges"`
	selectValues sql.SelectValues
}

// StatsHourlyCarEdges holds the relations/edges for other nodes in the graph.
type StatsHourlyCarEdges struct {
	// BackgroundScenicArea holds the value of the background_scenic_area edge.
	BackgroundScenicArea *ScenicArea `json:"background_scenic_area,omitempty"`
	// Car holds the value of the car edge.
	Car *Car `json:"car,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// BackgroundScenicAreaOrErr returns the BackgroundScenicArea value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StatsHourlyCarEdges) BackgroundScenicAreaOrErr() (*ScenicArea, error) {
	if e.BackgroundScenicArea != nil {
		return e.BackgroundScenicArea, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: scenicarea.Label}
	}
	return nil, &NotLoadedError{edge: "background_scenic_area"}
}

// CarOrErr returns the Car value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StatsHourlyCarEdges) CarOrErr() (*Car, error) {
	if e.Car != nil {
		return e.Car, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: car.Label}
	}
	return nil, &NotLoadedError{edge: "car"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StatsHourlyCar) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case statshourlycar.FieldCumulativeOperationLockDuration, statshourlycar.FieldCumulativeOperationManualDuration, statshourlycar.FieldCumulativeOperationAutoDuration, statshourlycar.FieldCumulativeOperationFaultDuration, statshourlycar.FieldCumulativeOperationManualMileage, statshourlycar.FieldCumulativeOperationAutoMileage, statshourlycar.FieldCumulativeMaintainLockDuration, statshourlycar.FieldCumulativeMaintainManualDuration, statshourlycar.FieldCumulativeMaintainAutoDuration, statshourlycar.FieldCumulativeMaintainRemoteDuration, statshourlycar.FieldCumulativeMaintainFaultDuration, statshourlycar.FieldCumulativeMaintainManualMileage, statshourlycar.FieldCumulativeMaintainAutoMileage, statshourlycar.FieldCumulativeMaintainRemoteMileage, statshourlycar.FieldOperationLockDuration, statshourlycar.FieldOperationManualDuration, statshourlycar.FieldOperationAutoDuration, statshourlycar.FieldOperationFaultDuration, statshourlycar.FieldOperationManualMileage, statshourlycar.FieldOperationAutoMileage, statshourlycar.FieldMaintainLockDuration, statshourlycar.FieldMaintainManualDuration, statshourlycar.FieldMaintainAutoDuration, statshourlycar.FieldMaintainRemoteDuration, statshourlycar.FieldMaintainFaultDuration, statshourlycar.FieldMaintainManualMileage, statshourlycar.FieldMaintainAutoMileage, statshourlycar.FieldMaintainRemoteMileage:
			values[i] = new(sql.NullFloat64)
		case statshourlycar.FieldID, statshourlycar.FieldScenicAreaID, statshourlycar.FieldCarID, statshourlycar.FieldY, statshourlycar.FieldM, statshourlycar.FieldD, statshourlycar.FieldH, statshourlycar.FieldWeek, statshourlycar.FieldWeekday, statshourlycar.FieldPeriod, statshourlycar.FieldOrderCountCreate, statshourlycar.FieldOrderCountFinish, statshourlycar.FieldOrderCountCancel, statshourlycar.FieldOrderAmount, statshourlycar.FieldOrderDuration, statshourlycar.FieldOrderMileage, statshourlycar.FieldOrderScore, statshourlycar.FieldCumulativeOperationLockTimes, statshourlycar.FieldCumulativeOperationManualTimes, statshourlycar.FieldCumulativeOperationAutoTimes, statshourlycar.FieldCumulativeOperationFaultTimes, statshourlycar.FieldCumulativeMaintainLockTimes, statshourlycar.FieldCumulativeMaintainManualTimes, statshourlycar.FieldCumulativeMaintainAutoTimes, statshourlycar.FieldCumulativeMaintainRemoteTimes, statshourlycar.FieldCumulativeMaintainFaultTimes, statshourlycar.FieldCumulativeAlarmTimes, statshourlycar.FieldOperationLockTimes, statshourlycar.FieldOperationManualTimes, statshourlycar.FieldOperationAutoTimes, statshourlycar.FieldOperationFaultTimes, statshourlycar.FieldMaintainLockTimes, statshourlycar.FieldMaintainManualTimes, statshourlycar.FieldMaintainAutoTimes, statshourlycar.FieldMaintainRemoteTimes, statshourlycar.FieldMaintainFaultTimes, statshourlycar.FieldAlarmTimes:
			values[i] = new(sql.NullInt64)
		case statshourlycar.FieldStatsTime, statshourlycar.FieldCreateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StatsHourlyCar fields.
func (shc *StatsHourlyCar) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case statshourlycar.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			shc.ID = int(value.Int64)
		case statshourlycar.FieldScenicAreaID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field scenic_area_id", values[i])
			} else if value.Valid {
				shc.ScenicAreaID = int(value.Int64)
			}
		case statshourlycar.FieldCarID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field car_id", values[i])
			} else if value.Valid {
				shc.CarID = int(value.Int64)
			}
		case statshourlycar.FieldY:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field y", values[i])
			} else if value.Valid {
				shc.Y = int(value.Int64)
			}
		case statshourlycar.FieldM:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field m", values[i])
			} else if value.Valid {
				shc.M = int(value.Int64)
			}
		case statshourlycar.FieldD:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field d", values[i])
			} else if value.Valid {
				shc.D = int(value.Int64)
			}
		case statshourlycar.FieldH:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field h", values[i])
			} else if value.Valid {
				shc.H = int(value.Int64)
			}
		case statshourlycar.FieldWeek:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field week", values[i])
			} else if value.Valid {
				shc.Week = int(value.Int64)
			}
		case statshourlycar.FieldWeekday:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field weekday", values[i])
			} else if value.Valid {
				shc.Weekday = int(value.Int64)
			}
		case statshourlycar.FieldPeriod:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field period", values[i])
			} else if value.Valid {
				shc.Period = int(value.Int64)
			}
		case statshourlycar.FieldOrderCountCreate:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_count_create", values[i])
			} else if value.Valid {
				shc.OrderCountCreate = int(value.Int64)
			}
		case statshourlycar.FieldOrderCountFinish:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_count_finish", values[i])
			} else if value.Valid {
				shc.OrderCountFinish = int(value.Int64)
			}
		case statshourlycar.FieldOrderCountCancel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_count_cancel", values[i])
			} else if value.Valid {
				shc.OrderCountCancel = int(value.Int64)
			}
		case statshourlycar.FieldOrderAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_amount", values[i])
			} else if value.Valid {
				shc.OrderAmount = int(value.Int64)
			}
		case statshourlycar.FieldOrderDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_duration", values[i])
			} else if value.Valid {
				shc.OrderDuration = int(value.Int64)
			}
		case statshourlycar.FieldOrderMileage:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_mileage", values[i])
			} else if value.Valid {
				shc.OrderMileage = int(value.Int64)
			}
		case statshourlycar.FieldOrderScore:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_score", values[i])
			} else if value.Valid {
				shc.OrderScore = int(value.Int64)
			}
		case statshourlycar.FieldCumulativeOperationLockDuration:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field cumulative_operation_lock_duration", values[i])
			} else if value.Valid {
				shc.CumulativeOperationLockDuration = float32(value.Float64)
			}
		case statshourlycar.FieldCumulativeOperationManualDuration:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field cumulative_operation_manual_duration", values[i])
			} else if value.Valid {
				shc.CumulativeOperationManualDuration = float32(value.Float64)
			}
		case statshourlycar.FieldCumulativeOperationAutoDuration:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field cumulative_operation_auto_duration", values[i])
			} else if value.Valid {
				shc.CumulativeOperationAutoDuration = float32(value.Float64)
			}
		case statshourlycar.FieldCumulativeOperationFaultDuration:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field cumulative_operation_fault_duration", values[i])
			} else if value.Valid {
				shc.CumulativeOperationFaultDuration = float32(value.Float64)
			}
		case statshourlycar.FieldCumulativeOperationLockTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cumulative_operation_lock_times", values[i])
			} else if value.Valid {
				shc.CumulativeOperationLockTimes = uint32(value.Int64)
			}
		case statshourlycar.FieldCumulativeOperationManualTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cumulative_operation_manual_times", values[i])
			} else if value.Valid {
				shc.CumulativeOperationManualTimes = uint32(value.Int64)
			}
		case statshourlycar.FieldCumulativeOperationAutoTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cumulative_operation_auto_times", values[i])
			} else if value.Valid {
				shc.CumulativeOperationAutoTimes = uint32(value.Int64)
			}
		case statshourlycar.FieldCumulativeOperationFaultTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cumulative_operation_fault_times", values[i])
			} else if value.Valid {
				shc.CumulativeOperationFaultTimes = uint32(value.Int64)
			}
		case statshourlycar.FieldCumulativeOperationManualMileage:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field cumulative_operation_manual_mileage", values[i])
			} else if value.Valid {
				shc.CumulativeOperationManualMileage = float32(value.Float64)
			}
		case statshourlycar.FieldCumulativeOperationAutoMileage:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field cumulative_operation_auto_mileage", values[i])
			} else if value.Valid {
				shc.CumulativeOperationAutoMileage = float32(value.Float64)
			}
		case statshourlycar.FieldCumulativeMaintainLockDuration:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field cumulative_maintain_lock_duration", values[i])
			} else if value.Valid {
				shc.CumulativeMaintainLockDuration = float32(value.Float64)
			}
		case statshourlycar.FieldCumulativeMaintainManualDuration:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field cumulative_maintain_manual_duration", values[i])
			} else if value.Valid {
				shc.CumulativeMaintainManualDuration = float32(value.Float64)
			}
		case statshourlycar.FieldCumulativeMaintainAutoDuration:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field cumulative_maintain_auto_duration", values[i])
			} else if value.Valid {
				shc.CumulativeMaintainAutoDuration = float32(value.Float64)
			}
		case statshourlycar.FieldCumulativeMaintainRemoteDuration:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field cumulative_maintain_remote_duration", values[i])
			} else if value.Valid {
				shc.CumulativeMaintainRemoteDuration = float32(value.Float64)
			}
		case statshourlycar.FieldCumulativeMaintainFaultDuration:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field cumulative_maintain_fault_duration", values[i])
			} else if value.Valid {
				shc.CumulativeMaintainFaultDuration = float32(value.Float64)
			}
		case statshourlycar.FieldCumulativeMaintainLockTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cumulative_maintain_lock_times", values[i])
			} else if value.Valid {
				shc.CumulativeMaintainLockTimes = uint32(value.Int64)
			}
		case statshourlycar.FieldCumulativeMaintainManualTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cumulative_maintain_manual_times", values[i])
			} else if value.Valid {
				shc.CumulativeMaintainManualTimes = uint32(value.Int64)
			}
		case statshourlycar.FieldCumulativeMaintainAutoTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cumulative_maintain_auto_times", values[i])
			} else if value.Valid {
				shc.CumulativeMaintainAutoTimes = uint32(value.Int64)
			}
		case statshourlycar.FieldCumulativeMaintainRemoteTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cumulative_maintain_remote_times", values[i])
			} else if value.Valid {
				shc.CumulativeMaintainRemoteTimes = uint32(value.Int64)
			}
		case statshourlycar.FieldCumulativeMaintainFaultTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cumulative_maintain_fault_times", values[i])
			} else if value.Valid {
				shc.CumulativeMaintainFaultTimes = uint32(value.Int64)
			}
		case statshourlycar.FieldCumulativeMaintainManualMileage:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field cumulative_maintain_manual_mileage", values[i])
			} else if value.Valid {
				shc.CumulativeMaintainManualMileage = float32(value.Float64)
			}
		case statshourlycar.FieldCumulativeMaintainAutoMileage:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field cumulative_maintain_auto_mileage", values[i])
			} else if value.Valid {
				shc.CumulativeMaintainAutoMileage = float32(value.Float64)
			}
		case statshourlycar.FieldCumulativeMaintainRemoteMileage:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field cumulative_maintain_remote_mileage", values[i])
			} else if value.Valid {
				shc.CumulativeMaintainRemoteMileage = float32(value.Float64)
			}
		case statshourlycar.FieldCumulativeAlarmTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cumulative_alarm_times", values[i])
			} else if value.Valid {
				shc.CumulativeAlarmTimes = uint32(value.Int64)
			}
		case statshourlycar.FieldOperationLockDuration:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field operation_lock_duration", values[i])
			} else if value.Valid {
				shc.OperationLockDuration = float32(value.Float64)
			}
		case statshourlycar.FieldOperationManualDuration:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field operation_manual_duration", values[i])
			} else if value.Valid {
				shc.OperationManualDuration = float32(value.Float64)
			}
		case statshourlycar.FieldOperationAutoDuration:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field operation_auto_duration", values[i])
			} else if value.Valid {
				shc.OperationAutoDuration = float32(value.Float64)
			}
		case statshourlycar.FieldOperationFaultDuration:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field operation_fault_duration", values[i])
			} else if value.Valid {
				shc.OperationFaultDuration = float32(value.Float64)
			}
		case statshourlycar.FieldOperationLockTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field operation_lock_times", values[i])
			} else if value.Valid {
				shc.OperationLockTimes = uint32(value.Int64)
			}
		case statshourlycar.FieldOperationManualTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field operation_manual_times", values[i])
			} else if value.Valid {
				shc.OperationManualTimes = uint32(value.Int64)
			}
		case statshourlycar.FieldOperationAutoTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field operation_auto_times", values[i])
			} else if value.Valid {
				shc.OperationAutoTimes = uint32(value.Int64)
			}
		case statshourlycar.FieldOperationFaultTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field operation_fault_times", values[i])
			} else if value.Valid {
				shc.OperationFaultTimes = uint32(value.Int64)
			}
		case statshourlycar.FieldOperationManualMileage:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field operation_manual_mileage", values[i])
			} else if value.Valid {
				shc.OperationManualMileage = float32(value.Float64)
			}
		case statshourlycar.FieldOperationAutoMileage:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field operation_auto_mileage", values[i])
			} else if value.Valid {
				shc.OperationAutoMileage = float32(value.Float64)
			}
		case statshourlycar.FieldMaintainLockDuration:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field maintain_lock_duration", values[i])
			} else if value.Valid {
				shc.MaintainLockDuration = float32(value.Float64)
			}
		case statshourlycar.FieldMaintainManualDuration:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field maintain_manual_duration", values[i])
			} else if value.Valid {
				shc.MaintainManualDuration = float32(value.Float64)
			}
		case statshourlycar.FieldMaintainAutoDuration:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field maintain_auto_duration", values[i])
			} else if value.Valid {
				shc.MaintainAutoDuration = float32(value.Float64)
			}
		case statshourlycar.FieldMaintainRemoteDuration:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field maintain_remote_duration", values[i])
			} else if value.Valid {
				shc.MaintainRemoteDuration = float32(value.Float64)
			}
		case statshourlycar.FieldMaintainFaultDuration:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field maintain_fault_duration", values[i])
			} else if value.Valid {
				shc.MaintainFaultDuration = float32(value.Float64)
			}
		case statshourlycar.FieldMaintainLockTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field maintain_lock_times", values[i])
			} else if value.Valid {
				shc.MaintainLockTimes = uint32(value.Int64)
			}
		case statshourlycar.FieldMaintainManualTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field maintain_manual_times", values[i])
			} else if value.Valid {
				shc.MaintainManualTimes = uint32(value.Int64)
			}
		case statshourlycar.FieldMaintainAutoTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field maintain_auto_times", values[i])
			} else if value.Valid {
				shc.MaintainAutoTimes = uint32(value.Int64)
			}
		case statshourlycar.FieldMaintainRemoteTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field maintain_remote_times", values[i])
			} else if value.Valid {
				shc.MaintainRemoteTimes = uint32(value.Int64)
			}
		case statshourlycar.FieldMaintainFaultTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field maintain_fault_times", values[i])
			} else if value.Valid {
				shc.MaintainFaultTimes = uint32(value.Int64)
			}
		case statshourlycar.FieldMaintainManualMileage:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field maintain_manual_mileage", values[i])
			} else if value.Valid {
				shc.MaintainManualMileage = float32(value.Float64)
			}
		case statshourlycar.FieldMaintainAutoMileage:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field maintain_auto_mileage", values[i])
			} else if value.Valid {
				shc.MaintainAutoMileage = float32(value.Float64)
			}
		case statshourlycar.FieldMaintainRemoteMileage:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field maintain_remote_mileage", values[i])
			} else if value.Valid {
				shc.MaintainRemoteMileage = float32(value.Float64)
			}
		case statshourlycar.FieldAlarmTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field alarm_times", values[i])
			} else if value.Valid {
				shc.AlarmTimes = uint32(value.Int64)
			}
		case statshourlycar.FieldStatsTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field stats_time", values[i])
			} else if value.Valid {
				shc.StatsTime = value.Time
			}
		case statshourlycar.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				shc.CreateTime = value.Time
			}
		default:
			shc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the StatsHourlyCar.
// This includes values selected through modifiers, order, etc.
func (shc *StatsHourlyCar) Value(name string) (ent.Value, error) {
	return shc.selectValues.Get(name)
}

// QueryBackgroundScenicArea queries the "background_scenic_area" edge of the StatsHourlyCar entity.
func (shc *StatsHourlyCar) QueryBackgroundScenicArea() *ScenicAreaQuery {
	return NewStatsHourlyCarClient(shc.config).QueryBackgroundScenicArea(shc)
}

// QueryCar queries the "car" edge of the StatsHourlyCar entity.
func (shc *StatsHourlyCar) QueryCar() *CarQuery {
	return NewStatsHourlyCarClient(shc.config).QueryCar(shc)
}

// Update returns a builder for updating this StatsHourlyCar.
// Note that you need to call StatsHourlyCar.Unwrap() before calling this method if this StatsHourlyCar
// was returned from a transaction, and the transaction was committed or rolled back.
func (shc *StatsHourlyCar) Update() *StatsHourlyCarUpdateOne {
	return NewStatsHourlyCarClient(shc.config).UpdateOne(shc)
}

// Unwrap unwraps the StatsHourlyCar entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (shc *StatsHourlyCar) Unwrap() *StatsHourlyCar {
	_tx, ok := shc.config.driver.(*txDriver)
	if !ok {
		panic("ent: StatsHourlyCar is not a transactional entity")
	}
	shc.config.driver = _tx.drv
	return shc
}

// String implements the fmt.Stringer.
func (shc *StatsHourlyCar) String() string {
	var builder strings.Builder
	builder.WriteString("StatsHourlyCar(")
	builder.WriteString(fmt.Sprintf("id=%v, ", shc.ID))
	builder.WriteString("scenic_area_id=")
	builder.WriteString(fmt.Sprintf("%v", shc.ScenicAreaID))
	builder.WriteString(", ")
	builder.WriteString("car_id=")
	builder.WriteString(fmt.Sprintf("%v", shc.CarID))
	builder.WriteString(", ")
	builder.WriteString("y=")
	builder.WriteString(fmt.Sprintf("%v", shc.Y))
	builder.WriteString(", ")
	builder.WriteString("m=")
	builder.WriteString(fmt.Sprintf("%v", shc.M))
	builder.WriteString(", ")
	builder.WriteString("d=")
	builder.WriteString(fmt.Sprintf("%v", shc.D))
	builder.WriteString(", ")
	builder.WriteString("h=")
	builder.WriteString(fmt.Sprintf("%v", shc.H))
	builder.WriteString(", ")
	builder.WriteString("week=")
	builder.WriteString(fmt.Sprintf("%v", shc.Week))
	builder.WriteString(", ")
	builder.WriteString("weekday=")
	builder.WriteString(fmt.Sprintf("%v", shc.Weekday))
	builder.WriteString(", ")
	builder.WriteString("period=")
	builder.WriteString(fmt.Sprintf("%v", shc.Period))
	builder.WriteString(", ")
	builder.WriteString("order_count_create=")
	builder.WriteString(fmt.Sprintf("%v", shc.OrderCountCreate))
	builder.WriteString(", ")
	builder.WriteString("order_count_finish=")
	builder.WriteString(fmt.Sprintf("%v", shc.OrderCountFinish))
	builder.WriteString(", ")
	builder.WriteString("order_count_cancel=")
	builder.WriteString(fmt.Sprintf("%v", shc.OrderCountCancel))
	builder.WriteString(", ")
	builder.WriteString("order_amount=")
	builder.WriteString(fmt.Sprintf("%v", shc.OrderAmount))
	builder.WriteString(", ")
	builder.WriteString("order_duration=")
	builder.WriteString(fmt.Sprintf("%v", shc.OrderDuration))
	builder.WriteString(", ")
	builder.WriteString("order_mileage=")
	builder.WriteString(fmt.Sprintf("%v", shc.OrderMileage))
	builder.WriteString(", ")
	builder.WriteString("order_score=")
	builder.WriteString(fmt.Sprintf("%v", shc.OrderScore))
	builder.WriteString(", ")
	builder.WriteString("cumulative_operation_lock_duration=")
	builder.WriteString(fmt.Sprintf("%v", shc.CumulativeOperationLockDuration))
	builder.WriteString(", ")
	builder.WriteString("cumulative_operation_manual_duration=")
	builder.WriteString(fmt.Sprintf("%v", shc.CumulativeOperationManualDuration))
	builder.WriteString(", ")
	builder.WriteString("cumulative_operation_auto_duration=")
	builder.WriteString(fmt.Sprintf("%v", shc.CumulativeOperationAutoDuration))
	builder.WriteString(", ")
	builder.WriteString("cumulative_operation_fault_duration=")
	builder.WriteString(fmt.Sprintf("%v", shc.CumulativeOperationFaultDuration))
	builder.WriteString(", ")
	builder.WriteString("cumulative_operation_lock_times=")
	builder.WriteString(fmt.Sprintf("%v", shc.CumulativeOperationLockTimes))
	builder.WriteString(", ")
	builder.WriteString("cumulative_operation_manual_times=")
	builder.WriteString(fmt.Sprintf("%v", shc.CumulativeOperationManualTimes))
	builder.WriteString(", ")
	builder.WriteString("cumulative_operation_auto_times=")
	builder.WriteString(fmt.Sprintf("%v", shc.CumulativeOperationAutoTimes))
	builder.WriteString(", ")
	builder.WriteString("cumulative_operation_fault_times=")
	builder.WriteString(fmt.Sprintf("%v", shc.CumulativeOperationFaultTimes))
	builder.WriteString(", ")
	builder.WriteString("cumulative_operation_manual_mileage=")
	builder.WriteString(fmt.Sprintf("%v", shc.CumulativeOperationManualMileage))
	builder.WriteString(", ")
	builder.WriteString("cumulative_operation_auto_mileage=")
	builder.WriteString(fmt.Sprintf("%v", shc.CumulativeOperationAutoMileage))
	builder.WriteString(", ")
	builder.WriteString("cumulative_maintain_lock_duration=")
	builder.WriteString(fmt.Sprintf("%v", shc.CumulativeMaintainLockDuration))
	builder.WriteString(", ")
	builder.WriteString("cumulative_maintain_manual_duration=")
	builder.WriteString(fmt.Sprintf("%v", shc.CumulativeMaintainManualDuration))
	builder.WriteString(", ")
	builder.WriteString("cumulative_maintain_auto_duration=")
	builder.WriteString(fmt.Sprintf("%v", shc.CumulativeMaintainAutoDuration))
	builder.WriteString(", ")
	builder.WriteString("cumulative_maintain_remote_duration=")
	builder.WriteString(fmt.Sprintf("%v", shc.CumulativeMaintainRemoteDuration))
	builder.WriteString(", ")
	builder.WriteString("cumulative_maintain_fault_duration=")
	builder.WriteString(fmt.Sprintf("%v", shc.CumulativeMaintainFaultDuration))
	builder.WriteString(", ")
	builder.WriteString("cumulative_maintain_lock_times=")
	builder.WriteString(fmt.Sprintf("%v", shc.CumulativeMaintainLockTimes))
	builder.WriteString(", ")
	builder.WriteString("cumulative_maintain_manual_times=")
	builder.WriteString(fmt.Sprintf("%v", shc.CumulativeMaintainManualTimes))
	builder.WriteString(", ")
	builder.WriteString("cumulative_maintain_auto_times=")
	builder.WriteString(fmt.Sprintf("%v", shc.CumulativeMaintainAutoTimes))
	builder.WriteString(", ")
	builder.WriteString("cumulative_maintain_remote_times=")
	builder.WriteString(fmt.Sprintf("%v", shc.CumulativeMaintainRemoteTimes))
	builder.WriteString(", ")
	builder.WriteString("cumulative_maintain_fault_times=")
	builder.WriteString(fmt.Sprintf("%v", shc.CumulativeMaintainFaultTimes))
	builder.WriteString(", ")
	builder.WriteString("cumulative_maintain_manual_mileage=")
	builder.WriteString(fmt.Sprintf("%v", shc.CumulativeMaintainManualMileage))
	builder.WriteString(", ")
	builder.WriteString("cumulative_maintain_auto_mileage=")
	builder.WriteString(fmt.Sprintf("%v", shc.CumulativeMaintainAutoMileage))
	builder.WriteString(", ")
	builder.WriteString("cumulative_maintain_remote_mileage=")
	builder.WriteString(fmt.Sprintf("%v", shc.CumulativeMaintainRemoteMileage))
	builder.WriteString(", ")
	builder.WriteString("cumulative_alarm_times=")
	builder.WriteString(fmt.Sprintf("%v", shc.CumulativeAlarmTimes))
	builder.WriteString(", ")
	builder.WriteString("operation_lock_duration=")
	builder.WriteString(fmt.Sprintf("%v", shc.OperationLockDuration))
	builder.WriteString(", ")
	builder.WriteString("operation_manual_duration=")
	builder.WriteString(fmt.Sprintf("%v", shc.OperationManualDuration))
	builder.WriteString(", ")
	builder.WriteString("operation_auto_duration=")
	builder.WriteString(fmt.Sprintf("%v", shc.OperationAutoDuration))
	builder.WriteString(", ")
	builder.WriteString("operation_fault_duration=")
	builder.WriteString(fmt.Sprintf("%v", shc.OperationFaultDuration))
	builder.WriteString(", ")
	builder.WriteString("operation_lock_times=")
	builder.WriteString(fmt.Sprintf("%v", shc.OperationLockTimes))
	builder.WriteString(", ")
	builder.WriteString("operation_manual_times=")
	builder.WriteString(fmt.Sprintf("%v", shc.OperationManualTimes))
	builder.WriteString(", ")
	builder.WriteString("operation_auto_times=")
	builder.WriteString(fmt.Sprintf("%v", shc.OperationAutoTimes))
	builder.WriteString(", ")
	builder.WriteString("operation_fault_times=")
	builder.WriteString(fmt.Sprintf("%v", shc.OperationFaultTimes))
	builder.WriteString(", ")
	builder.WriteString("operation_manual_mileage=")
	builder.WriteString(fmt.Sprintf("%v", shc.OperationManualMileage))
	builder.WriteString(", ")
	builder.WriteString("operation_auto_mileage=")
	builder.WriteString(fmt.Sprintf("%v", shc.OperationAutoMileage))
	builder.WriteString(", ")
	builder.WriteString("maintain_lock_duration=")
	builder.WriteString(fmt.Sprintf("%v", shc.MaintainLockDuration))
	builder.WriteString(", ")
	builder.WriteString("maintain_manual_duration=")
	builder.WriteString(fmt.Sprintf("%v", shc.MaintainManualDuration))
	builder.WriteString(", ")
	builder.WriteString("maintain_auto_duration=")
	builder.WriteString(fmt.Sprintf("%v", shc.MaintainAutoDuration))
	builder.WriteString(", ")
	builder.WriteString("maintain_remote_duration=")
	builder.WriteString(fmt.Sprintf("%v", shc.MaintainRemoteDuration))
	builder.WriteString(", ")
	builder.WriteString("maintain_fault_duration=")
	builder.WriteString(fmt.Sprintf("%v", shc.MaintainFaultDuration))
	builder.WriteString(", ")
	builder.WriteString("maintain_lock_times=")
	builder.WriteString(fmt.Sprintf("%v", shc.MaintainLockTimes))
	builder.WriteString(", ")
	builder.WriteString("maintain_manual_times=")
	builder.WriteString(fmt.Sprintf("%v", shc.MaintainManualTimes))
	builder.WriteString(", ")
	builder.WriteString("maintain_auto_times=")
	builder.WriteString(fmt.Sprintf("%v", shc.MaintainAutoTimes))
	builder.WriteString(", ")
	builder.WriteString("maintain_remote_times=")
	builder.WriteString(fmt.Sprintf("%v", shc.MaintainRemoteTimes))
	builder.WriteString(", ")
	builder.WriteString("maintain_fault_times=")
	builder.WriteString(fmt.Sprintf("%v", shc.MaintainFaultTimes))
	builder.WriteString(", ")
	builder.WriteString("maintain_manual_mileage=")
	builder.WriteString(fmt.Sprintf("%v", shc.MaintainManualMileage))
	builder.WriteString(", ")
	builder.WriteString("maintain_auto_mileage=")
	builder.WriteString(fmt.Sprintf("%v", shc.MaintainAutoMileage))
	builder.WriteString(", ")
	builder.WriteString("maintain_remote_mileage=")
	builder.WriteString(fmt.Sprintf("%v", shc.MaintainRemoteMileage))
	builder.WriteString(", ")
	builder.WriteString("alarm_times=")
	builder.WriteString(fmt.Sprintf("%v", shc.AlarmTimes))
	builder.WriteString(", ")
	builder.WriteString("stats_time=")
	builder.WriteString(shc.StatsTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(shc.CreateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// StatsHourlyCars is a parsable slice of StatsHourlyCar.
type StatsHourlyCars []*StatsHourlyCar
