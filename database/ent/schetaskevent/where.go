// Code generated by ent, DO NOT EDIT.

package schetaskevent

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldLTE(FieldID, id))
}

// ScheTaskID applies equality check predicate on the "sche_task_id" field. It's identical to ScheTaskIDEQ.
func ScheTaskID(v int) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldEQ(FieldScheTaskID, v))
}

// ScenicAreaID applies equality check predicate on the "scenic_area_id" field. It's identical to ScenicAreaIDEQ.
func ScenicAreaID(v int) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldEQ(FieldScenicAreaID, v))
}

// CarID applies equality check predicate on the "car_id" field. It's identical to CarIDEQ.
func CarID(v int) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldEQ(FieldCarID, v))
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v int) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldEQ(FieldState, v))
}

// AbnormalState applies equality check predicate on the "abnormal_state" field. It's identical to AbnormalStateEQ.
func AbnormalState(v int) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldEQ(FieldAbnormalState, v))
}

// LonWgs84 applies equality check predicate on the "lon_wgs84" field. It's identical to LonWgs84EQ.
func LonWgs84(v float64) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldEQ(FieldLonWgs84, v))
}

// LatWgs84 applies equality check predicate on the "lat_wgs84" field. It's identical to LatWgs84EQ.
func LatWgs84(v float64) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldEQ(FieldLatWgs84, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldEQ(FieldRemark, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldEQ(FieldCreateTime, v))
}

// ScheTaskIDEQ applies the EQ predicate on the "sche_task_id" field.
func ScheTaskIDEQ(v int) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldEQ(FieldScheTaskID, v))
}

// ScheTaskIDNEQ applies the NEQ predicate on the "sche_task_id" field.
func ScheTaskIDNEQ(v int) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldNEQ(FieldScheTaskID, v))
}

// ScheTaskIDIn applies the In predicate on the "sche_task_id" field.
func ScheTaskIDIn(vs ...int) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldIn(FieldScheTaskID, vs...))
}

// ScheTaskIDNotIn applies the NotIn predicate on the "sche_task_id" field.
func ScheTaskIDNotIn(vs ...int) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldNotIn(FieldScheTaskID, vs...))
}

// ScenicAreaIDEQ applies the EQ predicate on the "scenic_area_id" field.
func ScenicAreaIDEQ(v int) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldEQ(FieldScenicAreaID, v))
}

// ScenicAreaIDNEQ applies the NEQ predicate on the "scenic_area_id" field.
func ScenicAreaIDNEQ(v int) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldNEQ(FieldScenicAreaID, v))
}

// ScenicAreaIDIn applies the In predicate on the "scenic_area_id" field.
func ScenicAreaIDIn(vs ...int) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldIn(FieldScenicAreaID, vs...))
}

// ScenicAreaIDNotIn applies the NotIn predicate on the "scenic_area_id" field.
func ScenicAreaIDNotIn(vs ...int) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldNotIn(FieldScenicAreaID, vs...))
}

// ScenicAreaIDGT applies the GT predicate on the "scenic_area_id" field.
func ScenicAreaIDGT(v int) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldGT(FieldScenicAreaID, v))
}

// ScenicAreaIDGTE applies the GTE predicate on the "scenic_area_id" field.
func ScenicAreaIDGTE(v int) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldGTE(FieldScenicAreaID, v))
}

// ScenicAreaIDLT applies the LT predicate on the "scenic_area_id" field.
func ScenicAreaIDLT(v int) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldLT(FieldScenicAreaID, v))
}

// ScenicAreaIDLTE applies the LTE predicate on the "scenic_area_id" field.
func ScenicAreaIDLTE(v int) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldLTE(FieldScenicAreaID, v))
}

// CarIDEQ applies the EQ predicate on the "car_id" field.
func CarIDEQ(v int) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldEQ(FieldCarID, v))
}

// CarIDNEQ applies the NEQ predicate on the "car_id" field.
func CarIDNEQ(v int) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldNEQ(FieldCarID, v))
}

// CarIDIn applies the In predicate on the "car_id" field.
func CarIDIn(vs ...int) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldIn(FieldCarID, vs...))
}

// CarIDNotIn applies the NotIn predicate on the "car_id" field.
func CarIDNotIn(vs ...int) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldNotIn(FieldCarID, vs...))
}

// CarIDGT applies the GT predicate on the "car_id" field.
func CarIDGT(v int) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldGT(FieldCarID, v))
}

// CarIDGTE applies the GTE predicate on the "car_id" field.
func CarIDGTE(v int) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldGTE(FieldCarID, v))
}

// CarIDLT applies the LT predicate on the "car_id" field.
func CarIDLT(v int) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldLT(FieldCarID, v))
}

// CarIDLTE applies the LTE predicate on the "car_id" field.
func CarIDLTE(v int) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldLTE(FieldCarID, v))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v int) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v int) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...int) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...int) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v int) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v int) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v int) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v int) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldLTE(FieldState, v))
}

// AbnormalStateEQ applies the EQ predicate on the "abnormal_state" field.
func AbnormalStateEQ(v int) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldEQ(FieldAbnormalState, v))
}

// AbnormalStateNEQ applies the NEQ predicate on the "abnormal_state" field.
func AbnormalStateNEQ(v int) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldNEQ(FieldAbnormalState, v))
}

// AbnormalStateIn applies the In predicate on the "abnormal_state" field.
func AbnormalStateIn(vs ...int) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldIn(FieldAbnormalState, vs...))
}

// AbnormalStateNotIn applies the NotIn predicate on the "abnormal_state" field.
func AbnormalStateNotIn(vs ...int) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldNotIn(FieldAbnormalState, vs...))
}

// AbnormalStateGT applies the GT predicate on the "abnormal_state" field.
func AbnormalStateGT(v int) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldGT(FieldAbnormalState, v))
}

// AbnormalStateGTE applies the GTE predicate on the "abnormal_state" field.
func AbnormalStateGTE(v int) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldGTE(FieldAbnormalState, v))
}

// AbnormalStateLT applies the LT predicate on the "abnormal_state" field.
func AbnormalStateLT(v int) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldLT(FieldAbnormalState, v))
}

// AbnormalStateLTE applies the LTE predicate on the "abnormal_state" field.
func AbnormalStateLTE(v int) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldLTE(FieldAbnormalState, v))
}

// LonWgs84EQ applies the EQ predicate on the "lon_wgs84" field.
func LonWgs84EQ(v float64) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldEQ(FieldLonWgs84, v))
}

// LonWgs84NEQ applies the NEQ predicate on the "lon_wgs84" field.
func LonWgs84NEQ(v float64) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldNEQ(FieldLonWgs84, v))
}

// LonWgs84In applies the In predicate on the "lon_wgs84" field.
func LonWgs84In(vs ...float64) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldIn(FieldLonWgs84, vs...))
}

// LonWgs84NotIn applies the NotIn predicate on the "lon_wgs84" field.
func LonWgs84NotIn(vs ...float64) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldNotIn(FieldLonWgs84, vs...))
}

// LonWgs84GT applies the GT predicate on the "lon_wgs84" field.
func LonWgs84GT(v float64) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldGT(FieldLonWgs84, v))
}

// LonWgs84GTE applies the GTE predicate on the "lon_wgs84" field.
func LonWgs84GTE(v float64) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldGTE(FieldLonWgs84, v))
}

// LonWgs84LT applies the LT predicate on the "lon_wgs84" field.
func LonWgs84LT(v float64) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldLT(FieldLonWgs84, v))
}

// LonWgs84LTE applies the LTE predicate on the "lon_wgs84" field.
func LonWgs84LTE(v float64) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldLTE(FieldLonWgs84, v))
}

// LatWgs84EQ applies the EQ predicate on the "lat_wgs84" field.
func LatWgs84EQ(v float64) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldEQ(FieldLatWgs84, v))
}

// LatWgs84NEQ applies the NEQ predicate on the "lat_wgs84" field.
func LatWgs84NEQ(v float64) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldNEQ(FieldLatWgs84, v))
}

// LatWgs84In applies the In predicate on the "lat_wgs84" field.
func LatWgs84In(vs ...float64) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldIn(FieldLatWgs84, vs...))
}

// LatWgs84NotIn applies the NotIn predicate on the "lat_wgs84" field.
func LatWgs84NotIn(vs ...float64) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldNotIn(FieldLatWgs84, vs...))
}

// LatWgs84GT applies the GT predicate on the "lat_wgs84" field.
func LatWgs84GT(v float64) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldGT(FieldLatWgs84, v))
}

// LatWgs84GTE applies the GTE predicate on the "lat_wgs84" field.
func LatWgs84GTE(v float64) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldGTE(FieldLatWgs84, v))
}

// LatWgs84LT applies the LT predicate on the "lat_wgs84" field.
func LatWgs84LT(v float64) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldLT(FieldLatWgs84, v))
}

// LatWgs84LTE applies the LTE predicate on the "lat_wgs84" field.
func LatWgs84LTE(v float64) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldLTE(FieldLatWgs84, v))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldContainsFold(FieldRemark, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.FieldLTE(FieldCreateTime, v))
}

// HasScheTask applies the HasEdge predicate on the "sche_task" edge.
func HasScheTask() predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ScheTaskTable, ScheTaskColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasScheTaskWith applies the HasEdge predicate on the "sche_task" edge with a given conditions (other predicates).
func HasScheTaskWith(preds ...predicate.ScheTask) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(func(s *sql.Selector) {
		step := newScheTaskStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ScheTaskEvent) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ScheTaskEvent) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ScheTaskEvent) predicate.ScheTaskEvent {
	return predicate.ScheTaskEvent(sql.NotPredicates(p))
}
