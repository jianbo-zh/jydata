// Code generated by ent, DO NOT EDIT.

package schetaskevent

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the schetaskevent type in the database.
	Label = "sche_task_event"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldScheTaskID holds the string denoting the sche_task_id field in the database.
	FieldScheTaskID = "sche_task_id"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldAbnormalState holds the string denoting the abnormal_state field in the database.
	FieldAbnormalState = "abnormal_state"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// EdgeScheTask holds the string denoting the sche_task edge name in mutations.
	EdgeScheTask = "sche_task"
	// Table holds the table name of the schetaskevent in the database.
	Table = "sche_task_events"
	// ScheTaskTable is the table that holds the sche_task relation/edge.
	ScheTaskTable = "sche_task_events"
	// ScheTaskInverseTable is the table name for the ScheTask entity.
	// It exists in this package in order to avoid circular dependency with the "schetask" package.
	ScheTaskInverseTable = "sche_tasks"
	// ScheTaskColumn is the table column denoting the sche_task relation/edge.
	ScheTaskColumn = "sche_task_id"
)

// Columns holds all SQL columns for schetaskevent fields.
var Columns = []string{
	FieldID,
	FieldScheTaskID,
	FieldState,
	FieldAbnormalState,
	FieldRemark,
	FieldCreateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultAbnormalState holds the default value on creation for the "abnormal_state" field.
	DefaultAbnormalState int
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
)

// OrderOption defines the ordering options for the ScheTaskEvent queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByScheTaskID orders the results by the sche_task_id field.
func ByScheTaskID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScheTaskID, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByAbnormalState orders the results by the abnormal_state field.
func ByAbnormalState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAbnormalState, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByScheTaskField orders the results by sche_task field.
func ByScheTaskField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newScheTaskStep(), sql.OrderByField(field, opts...))
	}
}
func newScheTaskStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ScheTaskInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ScheTaskTable, ScheTaskColumn),
	)
}
