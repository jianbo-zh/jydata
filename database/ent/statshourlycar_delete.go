// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"github.com/jianbo-zh/jydata/database/ent/statshourlycar"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StatsHourlyCarDelete is the builder for deleting a StatsHourlyCar entity.
type StatsHourlyCarDelete struct {
	config
	hooks    []Hook
	mutation *StatsHourlyCarMutation
}

// Where appends a list predicates to the StatsHourlyCarDelete builder.
func (shcd *StatsHourlyCarDelete) Where(ps ...predicate.StatsHourlyCar) *StatsHourlyCarDelete {
	shcd.mutation.Where(ps...)
	return shcd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (shcd *StatsHourlyCarDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, shcd.sqlExec, shcd.mutation, shcd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (shcd *StatsHourlyCarDelete) ExecX(ctx context.Context) int {
	n, err := shcd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (shcd *StatsHourlyCarDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(statshourlycar.Table, sqlgraph.NewFieldSpec(statshourlycar.FieldID, field.TypeInt))
	if ps := shcd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, shcd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	shcd.mutation.done = true
	return affected, err
}

// StatsHourlyCarDeleteOne is the builder for deleting a single StatsHourlyCar entity.
type StatsHourlyCarDeleteOne struct {
	shcd *StatsHourlyCarDelete
}

// Where appends a list predicates to the StatsHourlyCarDelete builder.
func (shcdo *StatsHourlyCarDeleteOne) Where(ps ...predicate.StatsHourlyCar) *StatsHourlyCarDeleteOne {
	shcdo.shcd.mutation.Where(ps...)
	return shcdo
}

// Exec executes the deletion query.
func (shcdo *StatsHourlyCarDeleteOne) Exec(ctx context.Context) error {
	n, err := shcdo.shcd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{statshourlycar.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (shcdo *StatsHourlyCarDeleteOne) ExecX(ctx context.Context) {
	if err := shcdo.Exec(ctx); err != nil {
		panic(err)
	}
}
