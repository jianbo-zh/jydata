// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/order"
	"github.com/jianbo-zh/jydata/database/ent/ordersharing"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"github.com/jianbo-zh/jydata/database/schema/types"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// OrderSharingUpdate is the builder for updating OrderSharing entities.
type OrderSharingUpdate struct {
	config
	hooks    []Hook
	mutation *OrderSharingMutation
}

// Where appends a list predicates to the OrderSharingUpdate builder.
func (osu *OrderSharingUpdate) Where(ps ...predicate.OrderSharing) *OrderSharingUpdate {
	osu.mutation.Where(ps...)
	return osu
}

// SetOrderID sets the "order_id" field.
func (osu *OrderSharingUpdate) SetOrderID(i int) *OrderSharingUpdate {
	osu.mutation.SetOrderID(i)
	return osu
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (osu *OrderSharingUpdate) SetNillableOrderID(i *int) *OrderSharingUpdate {
	if i != nil {
		osu.SetOrderID(*i)
	}
	return osu
}

// SetSharingNo sets the "sharing_no" field.
func (osu *OrderSharingUpdate) SetSharingNo(s string) *OrderSharingUpdate {
	osu.mutation.SetSharingNo(s)
	return osu
}

// SetNillableSharingNo sets the "sharing_no" field if the given value is not nil.
func (osu *OrderSharingUpdate) SetNillableSharingNo(s *string) *OrderSharingUpdate {
	if s != nil {
		osu.SetSharingNo(*s)
	}
	return osu
}

// SetWxSharingID sets the "wx_sharing_id" field.
func (osu *OrderSharingUpdate) SetWxSharingID(s string) *OrderSharingUpdate {
	osu.mutation.SetWxSharingID(s)
	return osu
}

// SetNillableWxSharingID sets the "wx_sharing_id" field if the given value is not nil.
func (osu *OrderSharingUpdate) SetNillableWxSharingID(s *string) *OrderSharingUpdate {
	if s != nil {
		osu.SetWxSharingID(*s)
	}
	return osu
}

// SetSharingAmount sets the "sharing_amount" field.
func (osu *OrderSharingUpdate) SetSharingAmount(i int) *OrderSharingUpdate {
	osu.mutation.ResetSharingAmount()
	osu.mutation.SetSharingAmount(i)
	return osu
}

// SetNillableSharingAmount sets the "sharing_amount" field if the given value is not nil.
func (osu *OrderSharingUpdate) SetNillableSharingAmount(i *int) *OrderSharingUpdate {
	if i != nil {
		osu.SetSharingAmount(*i)
	}
	return osu
}

// AddSharingAmount adds i to the "sharing_amount" field.
func (osu *OrderSharingUpdate) AddSharingAmount(i int) *OrderSharingUpdate {
	osu.mutation.AddSharingAmount(i)
	return osu
}

// SetReceivers sets the "receivers" field.
func (osu *OrderSharingUpdate) SetReceivers(tsr []types.OrderSharingReceiver) *OrderSharingUpdate {
	osu.mutation.SetReceivers(tsr)
	return osu
}

// AppendReceivers appends tsr to the "receivers" field.
func (osu *OrderSharingUpdate) AppendReceivers(tsr []types.OrderSharingReceiver) *OrderSharingUpdate {
	osu.mutation.AppendReceivers(tsr)
	return osu
}

// ClearReceivers clears the value of the "receivers" field.
func (osu *OrderSharingUpdate) ClearReceivers() *OrderSharingUpdate {
	osu.mutation.ClearReceivers()
	return osu
}

// SetState sets the "state" field.
func (osu *OrderSharingUpdate) SetState(i int) *OrderSharingUpdate {
	osu.mutation.ResetState()
	osu.mutation.SetState(i)
	return osu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (osu *OrderSharingUpdate) SetNillableState(i *int) *OrderSharingUpdate {
	if i != nil {
		osu.SetState(*i)
	}
	return osu
}

// AddState adds i to the "state" field.
func (osu *OrderSharingUpdate) AddState(i int) *OrderSharingUpdate {
	osu.mutation.AddState(i)
	return osu
}

// SetRemark sets the "remark" field.
func (osu *OrderSharingUpdate) SetRemark(s string) *OrderSharingUpdate {
	osu.mutation.SetRemark(s)
	return osu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (osu *OrderSharingUpdate) SetNillableRemark(s *string) *OrderSharingUpdate {
	if s != nil {
		osu.SetRemark(*s)
	}
	return osu
}

// SetUpdateTime sets the "update_time" field.
func (osu *OrderSharingUpdate) SetUpdateTime(t time.Time) *OrderSharingUpdate {
	osu.mutation.SetUpdateTime(t)
	return osu
}

// SetOrder sets the "order" edge to the Order entity.
func (osu *OrderSharingUpdate) SetOrder(o *Order) *OrderSharingUpdate {
	return osu.SetOrderID(o.ID)
}

// Mutation returns the OrderSharingMutation object of the builder.
func (osu *OrderSharingUpdate) Mutation() *OrderSharingMutation {
	return osu.mutation
}

// ClearOrder clears the "order" edge to the Order entity.
func (osu *OrderSharingUpdate) ClearOrder() *OrderSharingUpdate {
	osu.mutation.ClearOrder()
	return osu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (osu *OrderSharingUpdate) Save(ctx context.Context) (int, error) {
	osu.defaults()
	return withHooks(ctx, osu.sqlSave, osu.mutation, osu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (osu *OrderSharingUpdate) SaveX(ctx context.Context) int {
	affected, err := osu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (osu *OrderSharingUpdate) Exec(ctx context.Context) error {
	_, err := osu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osu *OrderSharingUpdate) ExecX(ctx context.Context) {
	if err := osu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (osu *OrderSharingUpdate) defaults() {
	if _, ok := osu.mutation.UpdateTime(); !ok {
		v := ordersharing.UpdateDefaultUpdateTime()
		osu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (osu *OrderSharingUpdate) check() error {
	if osu.mutation.OrderCleared() && len(osu.mutation.OrderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OrderSharing.order"`)
	}
	return nil
}

func (osu *OrderSharingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := osu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(ordersharing.Table, ordersharing.Columns, sqlgraph.NewFieldSpec(ordersharing.FieldID, field.TypeInt))
	if ps := osu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := osu.mutation.SharingNo(); ok {
		_spec.SetField(ordersharing.FieldSharingNo, field.TypeString, value)
	}
	if value, ok := osu.mutation.WxSharingID(); ok {
		_spec.SetField(ordersharing.FieldWxSharingID, field.TypeString, value)
	}
	if value, ok := osu.mutation.SharingAmount(); ok {
		_spec.SetField(ordersharing.FieldSharingAmount, field.TypeInt, value)
	}
	if value, ok := osu.mutation.AddedSharingAmount(); ok {
		_spec.AddField(ordersharing.FieldSharingAmount, field.TypeInt, value)
	}
	if value, ok := osu.mutation.Receivers(); ok {
		_spec.SetField(ordersharing.FieldReceivers, field.TypeJSON, value)
	}
	if value, ok := osu.mutation.AppendedReceivers(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, ordersharing.FieldReceivers, value)
		})
	}
	if osu.mutation.ReceiversCleared() {
		_spec.ClearField(ordersharing.FieldReceivers, field.TypeJSON)
	}
	if value, ok := osu.mutation.State(); ok {
		_spec.SetField(ordersharing.FieldState, field.TypeInt, value)
	}
	if value, ok := osu.mutation.AddedState(); ok {
		_spec.AddField(ordersharing.FieldState, field.TypeInt, value)
	}
	if value, ok := osu.mutation.Remark(); ok {
		_spec.SetField(ordersharing.FieldRemark, field.TypeString, value)
	}
	if value, ok := osu.mutation.UpdateTime(); ok {
		_spec.SetField(ordersharing.FieldUpdateTime, field.TypeTime, value)
	}
	if osu.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   ordersharing.OrderTable,
			Columns: []string{ordersharing.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osu.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   ordersharing.OrderTable,
			Columns: []string{ordersharing.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, osu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ordersharing.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	osu.mutation.done = true
	return n, nil
}

// OrderSharingUpdateOne is the builder for updating a single OrderSharing entity.
type OrderSharingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderSharingMutation
}

// SetOrderID sets the "order_id" field.
func (osuo *OrderSharingUpdateOne) SetOrderID(i int) *OrderSharingUpdateOne {
	osuo.mutation.SetOrderID(i)
	return osuo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (osuo *OrderSharingUpdateOne) SetNillableOrderID(i *int) *OrderSharingUpdateOne {
	if i != nil {
		osuo.SetOrderID(*i)
	}
	return osuo
}

// SetSharingNo sets the "sharing_no" field.
func (osuo *OrderSharingUpdateOne) SetSharingNo(s string) *OrderSharingUpdateOne {
	osuo.mutation.SetSharingNo(s)
	return osuo
}

// SetNillableSharingNo sets the "sharing_no" field if the given value is not nil.
func (osuo *OrderSharingUpdateOne) SetNillableSharingNo(s *string) *OrderSharingUpdateOne {
	if s != nil {
		osuo.SetSharingNo(*s)
	}
	return osuo
}

// SetWxSharingID sets the "wx_sharing_id" field.
func (osuo *OrderSharingUpdateOne) SetWxSharingID(s string) *OrderSharingUpdateOne {
	osuo.mutation.SetWxSharingID(s)
	return osuo
}

// SetNillableWxSharingID sets the "wx_sharing_id" field if the given value is not nil.
func (osuo *OrderSharingUpdateOne) SetNillableWxSharingID(s *string) *OrderSharingUpdateOne {
	if s != nil {
		osuo.SetWxSharingID(*s)
	}
	return osuo
}

// SetSharingAmount sets the "sharing_amount" field.
func (osuo *OrderSharingUpdateOne) SetSharingAmount(i int) *OrderSharingUpdateOne {
	osuo.mutation.ResetSharingAmount()
	osuo.mutation.SetSharingAmount(i)
	return osuo
}

// SetNillableSharingAmount sets the "sharing_amount" field if the given value is not nil.
func (osuo *OrderSharingUpdateOne) SetNillableSharingAmount(i *int) *OrderSharingUpdateOne {
	if i != nil {
		osuo.SetSharingAmount(*i)
	}
	return osuo
}

// AddSharingAmount adds i to the "sharing_amount" field.
func (osuo *OrderSharingUpdateOne) AddSharingAmount(i int) *OrderSharingUpdateOne {
	osuo.mutation.AddSharingAmount(i)
	return osuo
}

// SetReceivers sets the "receivers" field.
func (osuo *OrderSharingUpdateOne) SetReceivers(tsr []types.OrderSharingReceiver) *OrderSharingUpdateOne {
	osuo.mutation.SetReceivers(tsr)
	return osuo
}

// AppendReceivers appends tsr to the "receivers" field.
func (osuo *OrderSharingUpdateOne) AppendReceivers(tsr []types.OrderSharingReceiver) *OrderSharingUpdateOne {
	osuo.mutation.AppendReceivers(tsr)
	return osuo
}

// ClearReceivers clears the value of the "receivers" field.
func (osuo *OrderSharingUpdateOne) ClearReceivers() *OrderSharingUpdateOne {
	osuo.mutation.ClearReceivers()
	return osuo
}

// SetState sets the "state" field.
func (osuo *OrderSharingUpdateOne) SetState(i int) *OrderSharingUpdateOne {
	osuo.mutation.ResetState()
	osuo.mutation.SetState(i)
	return osuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (osuo *OrderSharingUpdateOne) SetNillableState(i *int) *OrderSharingUpdateOne {
	if i != nil {
		osuo.SetState(*i)
	}
	return osuo
}

// AddState adds i to the "state" field.
func (osuo *OrderSharingUpdateOne) AddState(i int) *OrderSharingUpdateOne {
	osuo.mutation.AddState(i)
	return osuo
}

// SetRemark sets the "remark" field.
func (osuo *OrderSharingUpdateOne) SetRemark(s string) *OrderSharingUpdateOne {
	osuo.mutation.SetRemark(s)
	return osuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (osuo *OrderSharingUpdateOne) SetNillableRemark(s *string) *OrderSharingUpdateOne {
	if s != nil {
		osuo.SetRemark(*s)
	}
	return osuo
}

// SetUpdateTime sets the "update_time" field.
func (osuo *OrderSharingUpdateOne) SetUpdateTime(t time.Time) *OrderSharingUpdateOne {
	osuo.mutation.SetUpdateTime(t)
	return osuo
}

// SetOrder sets the "order" edge to the Order entity.
func (osuo *OrderSharingUpdateOne) SetOrder(o *Order) *OrderSharingUpdateOne {
	return osuo.SetOrderID(o.ID)
}

// Mutation returns the OrderSharingMutation object of the builder.
func (osuo *OrderSharingUpdateOne) Mutation() *OrderSharingMutation {
	return osuo.mutation
}

// ClearOrder clears the "order" edge to the Order entity.
func (osuo *OrderSharingUpdateOne) ClearOrder() *OrderSharingUpdateOne {
	osuo.mutation.ClearOrder()
	return osuo
}

// Where appends a list predicates to the OrderSharingUpdate builder.
func (osuo *OrderSharingUpdateOne) Where(ps ...predicate.OrderSharing) *OrderSharingUpdateOne {
	osuo.mutation.Where(ps...)
	return osuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (osuo *OrderSharingUpdateOne) Select(field string, fields ...string) *OrderSharingUpdateOne {
	osuo.fields = append([]string{field}, fields...)
	return osuo
}

// Save executes the query and returns the updated OrderSharing entity.
func (osuo *OrderSharingUpdateOne) Save(ctx context.Context) (*OrderSharing, error) {
	osuo.defaults()
	return withHooks(ctx, osuo.sqlSave, osuo.mutation, osuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (osuo *OrderSharingUpdateOne) SaveX(ctx context.Context) *OrderSharing {
	node, err := osuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (osuo *OrderSharingUpdateOne) Exec(ctx context.Context) error {
	_, err := osuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osuo *OrderSharingUpdateOne) ExecX(ctx context.Context) {
	if err := osuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (osuo *OrderSharingUpdateOne) defaults() {
	if _, ok := osuo.mutation.UpdateTime(); !ok {
		v := ordersharing.UpdateDefaultUpdateTime()
		osuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (osuo *OrderSharingUpdateOne) check() error {
	if osuo.mutation.OrderCleared() && len(osuo.mutation.OrderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OrderSharing.order"`)
	}
	return nil
}

func (osuo *OrderSharingUpdateOne) sqlSave(ctx context.Context) (_node *OrderSharing, err error) {
	if err := osuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(ordersharing.Table, ordersharing.Columns, sqlgraph.NewFieldSpec(ordersharing.FieldID, field.TypeInt))
	id, ok := osuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrderSharing.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := osuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ordersharing.FieldID)
		for _, f := range fields {
			if !ordersharing.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ordersharing.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := osuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := osuo.mutation.SharingNo(); ok {
		_spec.SetField(ordersharing.FieldSharingNo, field.TypeString, value)
	}
	if value, ok := osuo.mutation.WxSharingID(); ok {
		_spec.SetField(ordersharing.FieldWxSharingID, field.TypeString, value)
	}
	if value, ok := osuo.mutation.SharingAmount(); ok {
		_spec.SetField(ordersharing.FieldSharingAmount, field.TypeInt, value)
	}
	if value, ok := osuo.mutation.AddedSharingAmount(); ok {
		_spec.AddField(ordersharing.FieldSharingAmount, field.TypeInt, value)
	}
	if value, ok := osuo.mutation.Receivers(); ok {
		_spec.SetField(ordersharing.FieldReceivers, field.TypeJSON, value)
	}
	if value, ok := osuo.mutation.AppendedReceivers(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, ordersharing.FieldReceivers, value)
		})
	}
	if osuo.mutation.ReceiversCleared() {
		_spec.ClearField(ordersharing.FieldReceivers, field.TypeJSON)
	}
	if value, ok := osuo.mutation.State(); ok {
		_spec.SetField(ordersharing.FieldState, field.TypeInt, value)
	}
	if value, ok := osuo.mutation.AddedState(); ok {
		_spec.AddField(ordersharing.FieldState, field.TypeInt, value)
	}
	if value, ok := osuo.mutation.Remark(); ok {
		_spec.SetField(ordersharing.FieldRemark, field.TypeString, value)
	}
	if value, ok := osuo.mutation.UpdateTime(); ok {
		_spec.SetField(ordersharing.FieldUpdateTime, field.TypeTime, value)
	}
	if osuo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   ordersharing.OrderTable,
			Columns: []string{ordersharing.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osuo.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   ordersharing.OrderTable,
			Columns: []string{ordersharing.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrderSharing{config: osuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, osuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ordersharing.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	osuo.mutation.done = true
	return _node, nil
}
