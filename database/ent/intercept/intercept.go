// Code generated by ent, DO NOT EDIT.

package intercept

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"github.com/jianbo-zh/jydata/database/ent"
	"github.com/jianbo-zh/jydata/database/ent/access"
	"github.com/jianbo-zh/jydata/database/ent/account"
	"github.com/jianbo-zh/jydata/database/ent/activityorder"
	"github.com/jianbo-zh/jydata/database/ent/apppush"
	"github.com/jianbo-zh/jydata/database/ent/appversion"
	"github.com/jianbo-zh/jydata/database/ent/billingstrategy"
	"github.com/jianbo-zh/jydata/database/ent/car"
	"github.com/jianbo-zh/jydata/database/ent/caralarm"
	"github.com/jianbo-zh/jydata/database/ent/carconfig"
	"github.com/jianbo-zh/jydata/database/ent/carconfigdownload"
	"github.com/jianbo-zh/jydata/database/ent/carconfigpack"
	"github.com/jianbo-zh/jydata/database/ent/carconfigstatus"
	"github.com/jianbo-zh/jydata/database/ent/carcumulative"
	"github.com/jianbo-zh/jydata/database/ent/carextendyokee"
	"github.com/jianbo-zh/jydata/database/ent/carlogupload"
	"github.com/jianbo-zh/jydata/database/ent/carsflight"
	"github.com/jianbo-zh/jydata/database/ent/carsflightextendyokee"
	"github.com/jianbo-zh/jydata/database/ent/carsmodels"
	"github.com/jianbo-zh/jydata/database/ent/carsmodelsgroups"
	"github.com/jianbo-zh/jydata/database/ent/carsmodelsgroupsparams"
	"github.com/jianbo-zh/jydata/database/ent/carsoperatelog"
	"github.com/jianbo-zh/jydata/database/ent/coupon"
	"github.com/jianbo-zh/jydata/database/ent/feedback"
	"github.com/jianbo-zh/jydata/database/ent/file"
	"github.com/jianbo-zh/jydata/database/ent/mapversion"
	"github.com/jianbo-zh/jydata/database/ent/operationuser"
	"github.com/jianbo-zh/jydata/database/ent/order"
	"github.com/jianbo-zh/jydata/database/ent/orderappeal"
	"github.com/jianbo-zh/jydata/database/ent/orderbilling"
	"github.com/jianbo-zh/jydata/database/ent/orderextendflight"
	"github.com/jianbo-zh/jydata/database/ent/orderrefund"
	"github.com/jianbo-zh/jydata/database/ent/ordersharing"
	"github.com/jianbo-zh/jydata/database/ent/paymentaccount"
	"github.com/jianbo-zh/jydata/database/ent/paytxbill"
	"github.com/jianbo-zh/jydata/database/ent/poi"
	"github.com/jianbo-zh/jydata/database/ent/poiextendyokee"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"github.com/jianbo-zh/jydata/database/ent/profitreceiver"
	"github.com/jianbo-zh/jydata/database/ent/role"
	"github.com/jianbo-zh/jydata/database/ent/route"
	"github.com/jianbo-zh/jydata/database/ent/scenicarea"
	"github.com/jianbo-zh/jydata/database/ent/scenicareaextendyokee"
	"github.com/jianbo-zh/jydata/database/ent/scenicareamap"
	"github.com/jianbo-zh/jydata/database/ent/schetask"
	"github.com/jianbo-zh/jydata/database/ent/schetaskevent"
	"github.com/jianbo-zh/jydata/database/ent/statsdaily"
	"github.com/jianbo-zh/jydata/database/ent/statsdailycar"
	"github.com/jianbo-zh/jydata/database/ent/statsdailyscenicarea"
	"github.com/jianbo-zh/jydata/database/ent/statshourlycar"
	"github.com/jianbo-zh/jydata/database/ent/statshourlyscenicarea"
	"github.com/jianbo-zh/jydata/database/ent/systemconfig"
	"github.com/jianbo-zh/jydata/database/ent/systemlog"
	"github.com/jianbo-zh/jydata/database/ent/task"
	"github.com/jianbo-zh/jydata/database/ent/user"
)

// The Query interface represents an operation that queries a graph.
// By using this interface, users can write generic code that manipulates
// query builders of different types.
type Query interface {
	// Type returns the string representation of the query type.
	Type() string
	// Limit the number of records to be returned by this query.
	Limit(int)
	// Offset to start from.
	Offset(int)
	// Unique configures the query builder to filter duplicate records.
	Unique(bool)
	// Order specifies how the records should be ordered.
	Order(...func(*sql.Selector))
	// WhereP appends storage-level predicates to the query builder. Using this method, users
	// can use type-assertion to append predicates that do not depend on any generated package.
	WhereP(...func(*sql.Selector))
}

// The Func type is an adapter that allows ordinary functions to be used as interceptors.
// Unlike traversal functions, interceptors are skipped during graph traversals. Note that the
// implementation of Func is different from the one defined in entgo.io/ent.InterceptFunc.
type Func func(context.Context, Query) error

// Intercept calls f(ctx, q) and then applied the next Querier.
func (f Func) Intercept(next ent.Querier) ent.Querier {
	return ent.QuerierFunc(func(ctx context.Context, q ent.Query) (ent.Value, error) {
		query, err := NewQuery(q)
		if err != nil {
			return nil, err
		}
		if err := f(ctx, query); err != nil {
			return nil, err
		}
		return next.Query(ctx, q)
	})
}

// The TraverseFunc type is an adapter to allow the use of ordinary function as Traverser.
// If f is a function with the appropriate signature, TraverseFunc(f) is a Traverser that calls f.
type TraverseFunc func(context.Context, Query) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFunc) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFunc) Traverse(ctx context.Context, q ent.Query) error {
	query, err := NewQuery(q)
	if err != nil {
		return err
	}
	return f(ctx, query)
}

// The AccessFunc type is an adapter to allow the use of ordinary function as a Querier.
type AccessFunc func(context.Context, *ent.AccessQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f AccessFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.AccessQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.AccessQuery", q)
}

// The TraverseAccess type is an adapter to allow the use of ordinary function as Traverser.
type TraverseAccess func(context.Context, *ent.AccessQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseAccess) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseAccess) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AccessQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.AccessQuery", q)
}

// The AccountFunc type is an adapter to allow the use of ordinary function as a Querier.
type AccountFunc func(context.Context, *ent.AccountQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f AccountFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.AccountQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.AccountQuery", q)
}

// The TraverseAccount type is an adapter to allow the use of ordinary function as Traverser.
type TraverseAccount func(context.Context, *ent.AccountQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseAccount) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseAccount) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AccountQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.AccountQuery", q)
}

// The ActivityOrderFunc type is an adapter to allow the use of ordinary function as a Querier.
type ActivityOrderFunc func(context.Context, *ent.ActivityOrderQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ActivityOrderFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ActivityOrderQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ActivityOrderQuery", q)
}

// The TraverseActivityOrder type is an adapter to allow the use of ordinary function as Traverser.
type TraverseActivityOrder func(context.Context, *ent.ActivityOrderQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseActivityOrder) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseActivityOrder) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ActivityOrderQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ActivityOrderQuery", q)
}

// The AppPushFunc type is an adapter to allow the use of ordinary function as a Querier.
type AppPushFunc func(context.Context, *ent.AppPushQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f AppPushFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.AppPushQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.AppPushQuery", q)
}

// The TraverseAppPush type is an adapter to allow the use of ordinary function as Traverser.
type TraverseAppPush func(context.Context, *ent.AppPushQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseAppPush) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseAppPush) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AppPushQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.AppPushQuery", q)
}

// The AppVersionFunc type is an adapter to allow the use of ordinary function as a Querier.
type AppVersionFunc func(context.Context, *ent.AppVersionQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f AppVersionFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.AppVersionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.AppVersionQuery", q)
}

// The TraverseAppVersion type is an adapter to allow the use of ordinary function as Traverser.
type TraverseAppVersion func(context.Context, *ent.AppVersionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseAppVersion) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseAppVersion) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AppVersionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.AppVersionQuery", q)
}

// The BillingStrategyFunc type is an adapter to allow the use of ordinary function as a Querier.
type BillingStrategyFunc func(context.Context, *ent.BillingStrategyQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f BillingStrategyFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.BillingStrategyQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.BillingStrategyQuery", q)
}

// The TraverseBillingStrategy type is an adapter to allow the use of ordinary function as Traverser.
type TraverseBillingStrategy func(context.Context, *ent.BillingStrategyQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseBillingStrategy) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseBillingStrategy) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BillingStrategyQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.BillingStrategyQuery", q)
}

// The CarFunc type is an adapter to allow the use of ordinary function as a Querier.
type CarFunc func(context.Context, *ent.CarQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CarFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CarQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CarQuery", q)
}

// The TraverseCar type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCar func(context.Context, *ent.CarQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCar) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCar) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CarQuery", q)
}

// The CarAlarmFunc type is an adapter to allow the use of ordinary function as a Querier.
type CarAlarmFunc func(context.Context, *ent.CarAlarmQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CarAlarmFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CarAlarmQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CarAlarmQuery", q)
}

// The TraverseCarAlarm type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCarAlarm func(context.Context, *ent.CarAlarmQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCarAlarm) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCarAlarm) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarAlarmQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CarAlarmQuery", q)
}

// The CarConfigFunc type is an adapter to allow the use of ordinary function as a Querier.
type CarConfigFunc func(context.Context, *ent.CarConfigQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CarConfigFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CarConfigQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CarConfigQuery", q)
}

// The TraverseCarConfig type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCarConfig func(context.Context, *ent.CarConfigQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCarConfig) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCarConfig) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarConfigQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CarConfigQuery", q)
}

// The CarConfigDownloadFunc type is an adapter to allow the use of ordinary function as a Querier.
type CarConfigDownloadFunc func(context.Context, *ent.CarConfigDownloadQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CarConfigDownloadFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CarConfigDownloadQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CarConfigDownloadQuery", q)
}

// The TraverseCarConfigDownload type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCarConfigDownload func(context.Context, *ent.CarConfigDownloadQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCarConfigDownload) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCarConfigDownload) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarConfigDownloadQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CarConfigDownloadQuery", q)
}

// The CarConfigPackFunc type is an adapter to allow the use of ordinary function as a Querier.
type CarConfigPackFunc func(context.Context, *ent.CarConfigPackQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CarConfigPackFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CarConfigPackQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CarConfigPackQuery", q)
}

// The TraverseCarConfigPack type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCarConfigPack func(context.Context, *ent.CarConfigPackQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCarConfigPack) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCarConfigPack) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarConfigPackQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CarConfigPackQuery", q)
}

// The CarConfigStatusFunc type is an adapter to allow the use of ordinary function as a Querier.
type CarConfigStatusFunc func(context.Context, *ent.CarConfigStatusQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CarConfigStatusFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CarConfigStatusQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CarConfigStatusQuery", q)
}

// The TraverseCarConfigStatus type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCarConfigStatus func(context.Context, *ent.CarConfigStatusQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCarConfigStatus) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCarConfigStatus) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarConfigStatusQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CarConfigStatusQuery", q)
}

// The CarCumulativeFunc type is an adapter to allow the use of ordinary function as a Querier.
type CarCumulativeFunc func(context.Context, *ent.CarCumulativeQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CarCumulativeFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CarCumulativeQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CarCumulativeQuery", q)
}

// The TraverseCarCumulative type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCarCumulative func(context.Context, *ent.CarCumulativeQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCarCumulative) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCarCumulative) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarCumulativeQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CarCumulativeQuery", q)
}

// The CarExtendYokeeFunc type is an adapter to allow the use of ordinary function as a Querier.
type CarExtendYokeeFunc func(context.Context, *ent.CarExtendYokeeQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CarExtendYokeeFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CarExtendYokeeQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CarExtendYokeeQuery", q)
}

// The TraverseCarExtendYokee type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCarExtendYokee func(context.Context, *ent.CarExtendYokeeQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCarExtendYokee) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCarExtendYokee) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarExtendYokeeQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CarExtendYokeeQuery", q)
}

// The CarLogUploadFunc type is an adapter to allow the use of ordinary function as a Querier.
type CarLogUploadFunc func(context.Context, *ent.CarLogUploadQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CarLogUploadFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CarLogUploadQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CarLogUploadQuery", q)
}

// The TraverseCarLogUpload type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCarLogUpload func(context.Context, *ent.CarLogUploadQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCarLogUpload) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCarLogUpload) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarLogUploadQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CarLogUploadQuery", q)
}

// The CarsFlightFunc type is an adapter to allow the use of ordinary function as a Querier.
type CarsFlightFunc func(context.Context, *ent.CarsFlightQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CarsFlightFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CarsFlightQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CarsFlightQuery", q)
}

// The TraverseCarsFlight type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCarsFlight func(context.Context, *ent.CarsFlightQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCarsFlight) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCarsFlight) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarsFlightQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CarsFlightQuery", q)
}

// The CarsFlightExtendYokeeFunc type is an adapter to allow the use of ordinary function as a Querier.
type CarsFlightExtendYokeeFunc func(context.Context, *ent.CarsFlightExtendYokeeQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CarsFlightExtendYokeeFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CarsFlightExtendYokeeQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CarsFlightExtendYokeeQuery", q)
}

// The TraverseCarsFlightExtendYokee type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCarsFlightExtendYokee func(context.Context, *ent.CarsFlightExtendYokeeQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCarsFlightExtendYokee) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCarsFlightExtendYokee) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarsFlightExtendYokeeQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CarsFlightExtendYokeeQuery", q)
}

// The CarsModelsFunc type is an adapter to allow the use of ordinary function as a Querier.
type CarsModelsFunc func(context.Context, *ent.CarsModelsQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CarsModelsFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CarsModelsQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CarsModelsQuery", q)
}

// The TraverseCarsModels type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCarsModels func(context.Context, *ent.CarsModelsQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCarsModels) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCarsModels) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarsModelsQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CarsModelsQuery", q)
}

// The CarsModelsGroupsFunc type is an adapter to allow the use of ordinary function as a Querier.
type CarsModelsGroupsFunc func(context.Context, *ent.CarsModelsGroupsQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CarsModelsGroupsFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CarsModelsGroupsQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CarsModelsGroupsQuery", q)
}

// The TraverseCarsModelsGroups type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCarsModelsGroups func(context.Context, *ent.CarsModelsGroupsQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCarsModelsGroups) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCarsModelsGroups) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarsModelsGroupsQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CarsModelsGroupsQuery", q)
}

// The CarsModelsGroupsParamsFunc type is an adapter to allow the use of ordinary function as a Querier.
type CarsModelsGroupsParamsFunc func(context.Context, *ent.CarsModelsGroupsParamsQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CarsModelsGroupsParamsFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CarsModelsGroupsParamsQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CarsModelsGroupsParamsQuery", q)
}

// The TraverseCarsModelsGroupsParams type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCarsModelsGroupsParams func(context.Context, *ent.CarsModelsGroupsParamsQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCarsModelsGroupsParams) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCarsModelsGroupsParams) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarsModelsGroupsParamsQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CarsModelsGroupsParamsQuery", q)
}

// The CarsOperateLogFunc type is an adapter to allow the use of ordinary function as a Querier.
type CarsOperateLogFunc func(context.Context, *ent.CarsOperateLogQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CarsOperateLogFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CarsOperateLogQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CarsOperateLogQuery", q)
}

// The TraverseCarsOperateLog type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCarsOperateLog func(context.Context, *ent.CarsOperateLogQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCarsOperateLog) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCarsOperateLog) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarsOperateLogQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CarsOperateLogQuery", q)
}

// The CouponFunc type is an adapter to allow the use of ordinary function as a Querier.
type CouponFunc func(context.Context, *ent.CouponQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CouponFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CouponQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CouponQuery", q)
}

// The TraverseCoupon type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCoupon func(context.Context, *ent.CouponQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCoupon) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCoupon) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CouponQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CouponQuery", q)
}

// The FeedbackFunc type is an adapter to allow the use of ordinary function as a Querier.
type FeedbackFunc func(context.Context, *ent.FeedbackQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f FeedbackFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.FeedbackQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.FeedbackQuery", q)
}

// The TraverseFeedback type is an adapter to allow the use of ordinary function as Traverser.
type TraverseFeedback func(context.Context, *ent.FeedbackQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFeedback) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFeedback) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.FeedbackQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.FeedbackQuery", q)
}

// The FileFunc type is an adapter to allow the use of ordinary function as a Querier.
type FileFunc func(context.Context, *ent.FileQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f FileFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.FileQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.FileQuery", q)
}

// The TraverseFile type is an adapter to allow the use of ordinary function as Traverser.
type TraverseFile func(context.Context, *ent.FileQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFile) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFile) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.FileQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.FileQuery", q)
}

// The MapVersionFunc type is an adapter to allow the use of ordinary function as a Querier.
type MapVersionFunc func(context.Context, *ent.MapVersionQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f MapVersionFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.MapVersionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.MapVersionQuery", q)
}

// The TraverseMapVersion type is an adapter to allow the use of ordinary function as Traverser.
type TraverseMapVersion func(context.Context, *ent.MapVersionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseMapVersion) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseMapVersion) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.MapVersionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.MapVersionQuery", q)
}

// The OperationUserFunc type is an adapter to allow the use of ordinary function as a Querier.
type OperationUserFunc func(context.Context, *ent.OperationUserQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OperationUserFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OperationUserQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OperationUserQuery", q)
}

// The TraverseOperationUser type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOperationUser func(context.Context, *ent.OperationUserQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOperationUser) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOperationUser) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OperationUserQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OperationUserQuery", q)
}

// The OrderFunc type is an adapter to allow the use of ordinary function as a Querier.
type OrderFunc func(context.Context, *ent.OrderQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OrderFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OrderQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OrderQuery", q)
}

// The TraverseOrder type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOrder func(context.Context, *ent.OrderQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOrder) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOrder) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OrderQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OrderQuery", q)
}

// The OrderAppealFunc type is an adapter to allow the use of ordinary function as a Querier.
type OrderAppealFunc func(context.Context, *ent.OrderAppealQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OrderAppealFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OrderAppealQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OrderAppealQuery", q)
}

// The TraverseOrderAppeal type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOrderAppeal func(context.Context, *ent.OrderAppealQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOrderAppeal) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOrderAppeal) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OrderAppealQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OrderAppealQuery", q)
}

// The OrderBillingFunc type is an adapter to allow the use of ordinary function as a Querier.
type OrderBillingFunc func(context.Context, *ent.OrderBillingQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OrderBillingFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OrderBillingQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OrderBillingQuery", q)
}

// The TraverseOrderBilling type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOrderBilling func(context.Context, *ent.OrderBillingQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOrderBilling) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOrderBilling) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OrderBillingQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OrderBillingQuery", q)
}

// The OrderExtendFlightFunc type is an adapter to allow the use of ordinary function as a Querier.
type OrderExtendFlightFunc func(context.Context, *ent.OrderExtendFlightQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OrderExtendFlightFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OrderExtendFlightQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OrderExtendFlightQuery", q)
}

// The TraverseOrderExtendFlight type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOrderExtendFlight func(context.Context, *ent.OrderExtendFlightQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOrderExtendFlight) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOrderExtendFlight) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OrderExtendFlightQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OrderExtendFlightQuery", q)
}

// The OrderRefundFunc type is an adapter to allow the use of ordinary function as a Querier.
type OrderRefundFunc func(context.Context, *ent.OrderRefundQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OrderRefundFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OrderRefundQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OrderRefundQuery", q)
}

// The TraverseOrderRefund type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOrderRefund func(context.Context, *ent.OrderRefundQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOrderRefund) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOrderRefund) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OrderRefundQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OrderRefundQuery", q)
}

// The OrderSharingFunc type is an adapter to allow the use of ordinary function as a Querier.
type OrderSharingFunc func(context.Context, *ent.OrderSharingQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OrderSharingFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OrderSharingQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OrderSharingQuery", q)
}

// The TraverseOrderSharing type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOrderSharing func(context.Context, *ent.OrderSharingQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOrderSharing) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOrderSharing) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OrderSharingQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OrderSharingQuery", q)
}

// The PayTxBillFunc type is an adapter to allow the use of ordinary function as a Querier.
type PayTxBillFunc func(context.Context, *ent.PayTxBillQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f PayTxBillFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.PayTxBillQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.PayTxBillQuery", q)
}

// The TraversePayTxBill type is an adapter to allow the use of ordinary function as Traverser.
type TraversePayTxBill func(context.Context, *ent.PayTxBillQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraversePayTxBill) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraversePayTxBill) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PayTxBillQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.PayTxBillQuery", q)
}

// The PaymentAccountFunc type is an adapter to allow the use of ordinary function as a Querier.
type PaymentAccountFunc func(context.Context, *ent.PaymentAccountQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f PaymentAccountFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.PaymentAccountQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.PaymentAccountQuery", q)
}

// The TraversePaymentAccount type is an adapter to allow the use of ordinary function as Traverser.
type TraversePaymentAccount func(context.Context, *ent.PaymentAccountQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraversePaymentAccount) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraversePaymentAccount) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PaymentAccountQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.PaymentAccountQuery", q)
}

// The PoiFunc type is an adapter to allow the use of ordinary function as a Querier.
type PoiFunc func(context.Context, *ent.PoiQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f PoiFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.PoiQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.PoiQuery", q)
}

// The TraversePoi type is an adapter to allow the use of ordinary function as Traverser.
type TraversePoi func(context.Context, *ent.PoiQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraversePoi) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraversePoi) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PoiQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.PoiQuery", q)
}

// The PoiExtendYokeeFunc type is an adapter to allow the use of ordinary function as a Querier.
type PoiExtendYokeeFunc func(context.Context, *ent.PoiExtendYokeeQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f PoiExtendYokeeFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.PoiExtendYokeeQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.PoiExtendYokeeQuery", q)
}

// The TraversePoiExtendYokee type is an adapter to allow the use of ordinary function as Traverser.
type TraversePoiExtendYokee func(context.Context, *ent.PoiExtendYokeeQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraversePoiExtendYokee) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraversePoiExtendYokee) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PoiExtendYokeeQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.PoiExtendYokeeQuery", q)
}

// The ProfitReceiverFunc type is an adapter to allow the use of ordinary function as a Querier.
type ProfitReceiverFunc func(context.Context, *ent.ProfitReceiverQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ProfitReceiverFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ProfitReceiverQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ProfitReceiverQuery", q)
}

// The TraverseProfitReceiver type is an adapter to allow the use of ordinary function as Traverser.
type TraverseProfitReceiver func(context.Context, *ent.ProfitReceiverQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseProfitReceiver) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseProfitReceiver) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ProfitReceiverQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ProfitReceiverQuery", q)
}

// The RoleFunc type is an adapter to allow the use of ordinary function as a Querier.
type RoleFunc func(context.Context, *ent.RoleQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f RoleFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.RoleQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.RoleQuery", q)
}

// The TraverseRole type is an adapter to allow the use of ordinary function as Traverser.
type TraverseRole func(context.Context, *ent.RoleQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseRole) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseRole) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RoleQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.RoleQuery", q)
}

// The RouteFunc type is an adapter to allow the use of ordinary function as a Querier.
type RouteFunc func(context.Context, *ent.RouteQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f RouteFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.RouteQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.RouteQuery", q)
}

// The TraverseRoute type is an adapter to allow the use of ordinary function as Traverser.
type TraverseRoute func(context.Context, *ent.RouteQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseRoute) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseRoute) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RouteQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.RouteQuery", q)
}

// The ScenicAreaFunc type is an adapter to allow the use of ordinary function as a Querier.
type ScenicAreaFunc func(context.Context, *ent.ScenicAreaQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ScenicAreaFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ScenicAreaQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ScenicAreaQuery", q)
}

// The TraverseScenicArea type is an adapter to allow the use of ordinary function as Traverser.
type TraverseScenicArea func(context.Context, *ent.ScenicAreaQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseScenicArea) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseScenicArea) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ScenicAreaQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ScenicAreaQuery", q)
}

// The ScenicAreaExtendYokeeFunc type is an adapter to allow the use of ordinary function as a Querier.
type ScenicAreaExtendYokeeFunc func(context.Context, *ent.ScenicAreaExtendYokeeQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ScenicAreaExtendYokeeFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ScenicAreaExtendYokeeQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ScenicAreaExtendYokeeQuery", q)
}

// The TraverseScenicAreaExtendYokee type is an adapter to allow the use of ordinary function as Traverser.
type TraverseScenicAreaExtendYokee func(context.Context, *ent.ScenicAreaExtendYokeeQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseScenicAreaExtendYokee) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseScenicAreaExtendYokee) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ScenicAreaExtendYokeeQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ScenicAreaExtendYokeeQuery", q)
}

// The ScenicAreaMapFunc type is an adapter to allow the use of ordinary function as a Querier.
type ScenicAreaMapFunc func(context.Context, *ent.ScenicAreaMapQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ScenicAreaMapFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ScenicAreaMapQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ScenicAreaMapQuery", q)
}

// The TraverseScenicAreaMap type is an adapter to allow the use of ordinary function as Traverser.
type TraverseScenicAreaMap func(context.Context, *ent.ScenicAreaMapQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseScenicAreaMap) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseScenicAreaMap) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ScenicAreaMapQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ScenicAreaMapQuery", q)
}

// The ScheTaskFunc type is an adapter to allow the use of ordinary function as a Querier.
type ScheTaskFunc func(context.Context, *ent.ScheTaskQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ScheTaskFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ScheTaskQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ScheTaskQuery", q)
}

// The TraverseScheTask type is an adapter to allow the use of ordinary function as Traverser.
type TraverseScheTask func(context.Context, *ent.ScheTaskQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseScheTask) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseScheTask) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ScheTaskQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ScheTaskQuery", q)
}

// The ScheTaskEventFunc type is an adapter to allow the use of ordinary function as a Querier.
type ScheTaskEventFunc func(context.Context, *ent.ScheTaskEventQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ScheTaskEventFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ScheTaskEventQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ScheTaskEventQuery", q)
}

// The TraverseScheTaskEvent type is an adapter to allow the use of ordinary function as Traverser.
type TraverseScheTaskEvent func(context.Context, *ent.ScheTaskEventQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseScheTaskEvent) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseScheTaskEvent) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ScheTaskEventQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ScheTaskEventQuery", q)
}

// The StatsDailyFunc type is an adapter to allow the use of ordinary function as a Querier.
type StatsDailyFunc func(context.Context, *ent.StatsDailyQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f StatsDailyFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.StatsDailyQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.StatsDailyQuery", q)
}

// The TraverseStatsDaily type is an adapter to allow the use of ordinary function as Traverser.
type TraverseStatsDaily func(context.Context, *ent.StatsDailyQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseStatsDaily) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseStatsDaily) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.StatsDailyQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.StatsDailyQuery", q)
}

// The StatsDailyCarFunc type is an adapter to allow the use of ordinary function as a Querier.
type StatsDailyCarFunc func(context.Context, *ent.StatsDailyCarQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f StatsDailyCarFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.StatsDailyCarQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.StatsDailyCarQuery", q)
}

// The TraverseStatsDailyCar type is an adapter to allow the use of ordinary function as Traverser.
type TraverseStatsDailyCar func(context.Context, *ent.StatsDailyCarQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseStatsDailyCar) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseStatsDailyCar) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.StatsDailyCarQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.StatsDailyCarQuery", q)
}

// The StatsDailyScenicAreaFunc type is an adapter to allow the use of ordinary function as a Querier.
type StatsDailyScenicAreaFunc func(context.Context, *ent.StatsDailyScenicAreaQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f StatsDailyScenicAreaFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.StatsDailyScenicAreaQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.StatsDailyScenicAreaQuery", q)
}

// The TraverseStatsDailyScenicArea type is an adapter to allow the use of ordinary function as Traverser.
type TraverseStatsDailyScenicArea func(context.Context, *ent.StatsDailyScenicAreaQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseStatsDailyScenicArea) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseStatsDailyScenicArea) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.StatsDailyScenicAreaQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.StatsDailyScenicAreaQuery", q)
}

// The StatsHourlyCarFunc type is an adapter to allow the use of ordinary function as a Querier.
type StatsHourlyCarFunc func(context.Context, *ent.StatsHourlyCarQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f StatsHourlyCarFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.StatsHourlyCarQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.StatsHourlyCarQuery", q)
}

// The TraverseStatsHourlyCar type is an adapter to allow the use of ordinary function as Traverser.
type TraverseStatsHourlyCar func(context.Context, *ent.StatsHourlyCarQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseStatsHourlyCar) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseStatsHourlyCar) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.StatsHourlyCarQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.StatsHourlyCarQuery", q)
}

// The StatsHourlyScenicAreaFunc type is an adapter to allow the use of ordinary function as a Querier.
type StatsHourlyScenicAreaFunc func(context.Context, *ent.StatsHourlyScenicAreaQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f StatsHourlyScenicAreaFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.StatsHourlyScenicAreaQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.StatsHourlyScenicAreaQuery", q)
}

// The TraverseStatsHourlyScenicArea type is an adapter to allow the use of ordinary function as Traverser.
type TraverseStatsHourlyScenicArea func(context.Context, *ent.StatsHourlyScenicAreaQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseStatsHourlyScenicArea) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseStatsHourlyScenicArea) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.StatsHourlyScenicAreaQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.StatsHourlyScenicAreaQuery", q)
}

// The SystemConfigFunc type is an adapter to allow the use of ordinary function as a Querier.
type SystemConfigFunc func(context.Context, *ent.SystemConfigQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SystemConfigFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SystemConfigQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SystemConfigQuery", q)
}

// The TraverseSystemConfig type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSystemConfig func(context.Context, *ent.SystemConfigQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSystemConfig) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSystemConfig) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SystemConfigQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SystemConfigQuery", q)
}

// The SystemLogFunc type is an adapter to allow the use of ordinary function as a Querier.
type SystemLogFunc func(context.Context, *ent.SystemLogQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SystemLogFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SystemLogQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SystemLogQuery", q)
}

// The TraverseSystemLog type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSystemLog func(context.Context, *ent.SystemLogQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSystemLog) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSystemLog) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SystemLogQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SystemLogQuery", q)
}

// The TaskFunc type is an adapter to allow the use of ordinary function as a Querier.
type TaskFunc func(context.Context, *ent.TaskQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f TaskFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.TaskQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.TaskQuery", q)
}

// The TraverseTask type is an adapter to allow the use of ordinary function as Traverser.
type TraverseTask func(context.Context, *ent.TaskQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseTask) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseTask) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TaskQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.TaskQuery", q)
}

// The UserFunc type is an adapter to allow the use of ordinary function as a Querier.
type UserFunc func(context.Context, *ent.UserQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UserFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UserQuery", q)
}

// The TraverseUser type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUser func(context.Context, *ent.UserQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUser) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUser) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UserQuery", q)
}

// NewQuery returns the generic Query interface for the given typed query.
func NewQuery(q ent.Query) (Query, error) {
	switch q := q.(type) {
	case *ent.AccessQuery:
		return &query[*ent.AccessQuery, predicate.Access, access.OrderOption]{typ: ent.TypeAccess, tq: q}, nil
	case *ent.AccountQuery:
		return &query[*ent.AccountQuery, predicate.Account, account.OrderOption]{typ: ent.TypeAccount, tq: q}, nil
	case *ent.ActivityOrderQuery:
		return &query[*ent.ActivityOrderQuery, predicate.ActivityOrder, activityorder.OrderOption]{typ: ent.TypeActivityOrder, tq: q}, nil
	case *ent.AppPushQuery:
		return &query[*ent.AppPushQuery, predicate.AppPush, apppush.OrderOption]{typ: ent.TypeAppPush, tq: q}, nil
	case *ent.AppVersionQuery:
		return &query[*ent.AppVersionQuery, predicate.AppVersion, appversion.OrderOption]{typ: ent.TypeAppVersion, tq: q}, nil
	case *ent.BillingStrategyQuery:
		return &query[*ent.BillingStrategyQuery, predicate.BillingStrategy, billingstrategy.OrderOption]{typ: ent.TypeBillingStrategy, tq: q}, nil
	case *ent.CarQuery:
		return &query[*ent.CarQuery, predicate.Car, car.OrderOption]{typ: ent.TypeCar, tq: q}, nil
	case *ent.CarAlarmQuery:
		return &query[*ent.CarAlarmQuery, predicate.CarAlarm, caralarm.OrderOption]{typ: ent.TypeCarAlarm, tq: q}, nil
	case *ent.CarConfigQuery:
		return &query[*ent.CarConfigQuery, predicate.CarConfig, carconfig.OrderOption]{typ: ent.TypeCarConfig, tq: q}, nil
	case *ent.CarConfigDownloadQuery:
		return &query[*ent.CarConfigDownloadQuery, predicate.CarConfigDownload, carconfigdownload.OrderOption]{typ: ent.TypeCarConfigDownload, tq: q}, nil
	case *ent.CarConfigPackQuery:
		return &query[*ent.CarConfigPackQuery, predicate.CarConfigPack, carconfigpack.OrderOption]{typ: ent.TypeCarConfigPack, tq: q}, nil
	case *ent.CarConfigStatusQuery:
		return &query[*ent.CarConfigStatusQuery, predicate.CarConfigStatus, carconfigstatus.OrderOption]{typ: ent.TypeCarConfigStatus, tq: q}, nil
	case *ent.CarCumulativeQuery:
		return &query[*ent.CarCumulativeQuery, predicate.CarCumulative, carcumulative.OrderOption]{typ: ent.TypeCarCumulative, tq: q}, nil
	case *ent.CarExtendYokeeQuery:
		return &query[*ent.CarExtendYokeeQuery, predicate.CarExtendYokee, carextendyokee.OrderOption]{typ: ent.TypeCarExtendYokee, tq: q}, nil
	case *ent.CarLogUploadQuery:
		return &query[*ent.CarLogUploadQuery, predicate.CarLogUpload, carlogupload.OrderOption]{typ: ent.TypeCarLogUpload, tq: q}, nil
	case *ent.CarsFlightQuery:
		return &query[*ent.CarsFlightQuery, predicate.CarsFlight, carsflight.OrderOption]{typ: ent.TypeCarsFlight, tq: q}, nil
	case *ent.CarsFlightExtendYokeeQuery:
		return &query[*ent.CarsFlightExtendYokeeQuery, predicate.CarsFlightExtendYokee, carsflightextendyokee.OrderOption]{typ: ent.TypeCarsFlightExtendYokee, tq: q}, nil
	case *ent.CarsModelsQuery:
		return &query[*ent.CarsModelsQuery, predicate.CarsModels, carsmodels.OrderOption]{typ: ent.TypeCarsModels, tq: q}, nil
	case *ent.CarsModelsGroupsQuery:
		return &query[*ent.CarsModelsGroupsQuery, predicate.CarsModelsGroups, carsmodelsgroups.OrderOption]{typ: ent.TypeCarsModelsGroups, tq: q}, nil
	case *ent.CarsModelsGroupsParamsQuery:
		return &query[*ent.CarsModelsGroupsParamsQuery, predicate.CarsModelsGroupsParams, carsmodelsgroupsparams.OrderOption]{typ: ent.TypeCarsModelsGroupsParams, tq: q}, nil
	case *ent.CarsOperateLogQuery:
		return &query[*ent.CarsOperateLogQuery, predicate.CarsOperateLog, carsoperatelog.OrderOption]{typ: ent.TypeCarsOperateLog, tq: q}, nil
	case *ent.CouponQuery:
		return &query[*ent.CouponQuery, predicate.Coupon, coupon.OrderOption]{typ: ent.TypeCoupon, tq: q}, nil
	case *ent.FeedbackQuery:
		return &query[*ent.FeedbackQuery, predicate.Feedback, feedback.OrderOption]{typ: ent.TypeFeedback, tq: q}, nil
	case *ent.FileQuery:
		return &query[*ent.FileQuery, predicate.File, file.OrderOption]{typ: ent.TypeFile, tq: q}, nil
	case *ent.MapVersionQuery:
		return &query[*ent.MapVersionQuery, predicate.MapVersion, mapversion.OrderOption]{typ: ent.TypeMapVersion, tq: q}, nil
	case *ent.OperationUserQuery:
		return &query[*ent.OperationUserQuery, predicate.OperationUser, operationuser.OrderOption]{typ: ent.TypeOperationUser, tq: q}, nil
	case *ent.OrderQuery:
		return &query[*ent.OrderQuery, predicate.Order, order.OrderOption]{typ: ent.TypeOrder, tq: q}, nil
	case *ent.OrderAppealQuery:
		return &query[*ent.OrderAppealQuery, predicate.OrderAppeal, orderappeal.OrderOption]{typ: ent.TypeOrderAppeal, tq: q}, nil
	case *ent.OrderBillingQuery:
		return &query[*ent.OrderBillingQuery, predicate.OrderBilling, orderbilling.OrderOption]{typ: ent.TypeOrderBilling, tq: q}, nil
	case *ent.OrderExtendFlightQuery:
		return &query[*ent.OrderExtendFlightQuery, predicate.OrderExtendFlight, orderextendflight.OrderOption]{typ: ent.TypeOrderExtendFlight, tq: q}, nil
	case *ent.OrderRefundQuery:
		return &query[*ent.OrderRefundQuery, predicate.OrderRefund, orderrefund.OrderOption]{typ: ent.TypeOrderRefund, tq: q}, nil
	case *ent.OrderSharingQuery:
		return &query[*ent.OrderSharingQuery, predicate.OrderSharing, ordersharing.OrderOption]{typ: ent.TypeOrderSharing, tq: q}, nil
	case *ent.PayTxBillQuery:
		return &query[*ent.PayTxBillQuery, predicate.PayTxBill, paytxbill.OrderOption]{typ: ent.TypePayTxBill, tq: q}, nil
	case *ent.PaymentAccountQuery:
		return &query[*ent.PaymentAccountQuery, predicate.PaymentAccount, paymentaccount.OrderOption]{typ: ent.TypePaymentAccount, tq: q}, nil
	case *ent.PoiQuery:
		return &query[*ent.PoiQuery, predicate.Poi, poi.OrderOption]{typ: ent.TypePoi, tq: q}, nil
	case *ent.PoiExtendYokeeQuery:
		return &query[*ent.PoiExtendYokeeQuery, predicate.PoiExtendYokee, poiextendyokee.OrderOption]{typ: ent.TypePoiExtendYokee, tq: q}, nil
	case *ent.ProfitReceiverQuery:
		return &query[*ent.ProfitReceiverQuery, predicate.ProfitReceiver, profitreceiver.OrderOption]{typ: ent.TypeProfitReceiver, tq: q}, nil
	case *ent.RoleQuery:
		return &query[*ent.RoleQuery, predicate.Role, role.OrderOption]{typ: ent.TypeRole, tq: q}, nil
	case *ent.RouteQuery:
		return &query[*ent.RouteQuery, predicate.Route, route.OrderOption]{typ: ent.TypeRoute, tq: q}, nil
	case *ent.ScenicAreaQuery:
		return &query[*ent.ScenicAreaQuery, predicate.ScenicArea, scenicarea.OrderOption]{typ: ent.TypeScenicArea, tq: q}, nil
	case *ent.ScenicAreaExtendYokeeQuery:
		return &query[*ent.ScenicAreaExtendYokeeQuery, predicate.ScenicAreaExtendYokee, scenicareaextendyokee.OrderOption]{typ: ent.TypeScenicAreaExtendYokee, tq: q}, nil
	case *ent.ScenicAreaMapQuery:
		return &query[*ent.ScenicAreaMapQuery, predicate.ScenicAreaMap, scenicareamap.OrderOption]{typ: ent.TypeScenicAreaMap, tq: q}, nil
	case *ent.ScheTaskQuery:
		return &query[*ent.ScheTaskQuery, predicate.ScheTask, schetask.OrderOption]{typ: ent.TypeScheTask, tq: q}, nil
	case *ent.ScheTaskEventQuery:
		return &query[*ent.ScheTaskEventQuery, predicate.ScheTaskEvent, schetaskevent.OrderOption]{typ: ent.TypeScheTaskEvent, tq: q}, nil
	case *ent.StatsDailyQuery:
		return &query[*ent.StatsDailyQuery, predicate.StatsDaily, statsdaily.OrderOption]{typ: ent.TypeStatsDaily, tq: q}, nil
	case *ent.StatsDailyCarQuery:
		return &query[*ent.StatsDailyCarQuery, predicate.StatsDailyCar, statsdailycar.OrderOption]{typ: ent.TypeStatsDailyCar, tq: q}, nil
	case *ent.StatsDailyScenicAreaQuery:
		return &query[*ent.StatsDailyScenicAreaQuery, predicate.StatsDailyScenicArea, statsdailyscenicarea.OrderOption]{typ: ent.TypeStatsDailyScenicArea, tq: q}, nil
	case *ent.StatsHourlyCarQuery:
		return &query[*ent.StatsHourlyCarQuery, predicate.StatsHourlyCar, statshourlycar.OrderOption]{typ: ent.TypeStatsHourlyCar, tq: q}, nil
	case *ent.StatsHourlyScenicAreaQuery:
		return &query[*ent.StatsHourlyScenicAreaQuery, predicate.StatsHourlyScenicArea, statshourlyscenicarea.OrderOption]{typ: ent.TypeStatsHourlyScenicArea, tq: q}, nil
	case *ent.SystemConfigQuery:
		return &query[*ent.SystemConfigQuery, predicate.SystemConfig, systemconfig.OrderOption]{typ: ent.TypeSystemConfig, tq: q}, nil
	case *ent.SystemLogQuery:
		return &query[*ent.SystemLogQuery, predicate.SystemLog, systemlog.OrderOption]{typ: ent.TypeSystemLog, tq: q}, nil
	case *ent.TaskQuery:
		return &query[*ent.TaskQuery, predicate.Task, task.OrderOption]{typ: ent.TypeTask, tq: q}, nil
	case *ent.UserQuery:
		return &query[*ent.UserQuery, predicate.User, user.OrderOption]{typ: ent.TypeUser, tq: q}, nil
	default:
		return nil, fmt.Errorf("unknown query type %T", q)
	}
}

type query[T any, P ~func(*sql.Selector), R ~func(*sql.Selector)] struct {
	typ string
	tq  interface {
		Limit(int) T
		Offset(int) T
		Unique(bool) T
		Order(...R) T
		Where(...P) T
	}
}

func (q query[T, P, R]) Type() string {
	return q.typ
}

func (q query[T, P, R]) Limit(limit int) {
	q.tq.Limit(limit)
}

func (q query[T, P, R]) Offset(offset int) {
	q.tq.Offset(offset)
}

func (q query[T, P, R]) Unique(unique bool) {
	q.tq.Unique(unique)
}

func (q query[T, P, R]) Order(orders ...func(*sql.Selector)) {
	rs := make([]R, len(orders))
	for i := range orders {
		rs[i] = orders[i]
	}
	q.tq.Order(rs...)
}

func (q query[T, P, R]) WhereP(ps ...func(*sql.Selector)) {
	p := make([]P, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	q.tq.Where(p...)
}
