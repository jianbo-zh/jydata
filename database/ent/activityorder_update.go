// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/activityorder"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
)

// ActivityOrderUpdate is the builder for updating ActivityOrder entities.
type ActivityOrderUpdate struct {
	config
	hooks    []Hook
	mutation *ActivityOrderMutation
}

// Where appends a list predicates to the ActivityOrderUpdate builder.
func (aou *ActivityOrderUpdate) Where(ps ...predicate.ActivityOrder) *ActivityOrderUpdate {
	aou.mutation.Where(ps...)
	return aou
}

// SetOrderNo sets the "order_no" field.
func (aou *ActivityOrderUpdate) SetOrderNo(s string) *ActivityOrderUpdate {
	aou.mutation.SetOrderNo(s)
	return aou
}

// SetNillableOrderNo sets the "order_no" field if the given value is not nil.
func (aou *ActivityOrderUpdate) SetNillableOrderNo(s *string) *ActivityOrderUpdate {
	if s != nil {
		aou.SetOrderNo(*s)
	}
	return aou
}

// SetWxTxID sets the "wx_tx_id" field.
func (aou *ActivityOrderUpdate) SetWxTxID(s string) *ActivityOrderUpdate {
	aou.mutation.SetWxTxID(s)
	return aou
}

// SetNillableWxTxID sets the "wx_tx_id" field if the given value is not nil.
func (aou *ActivityOrderUpdate) SetNillableWxTxID(s *string) *ActivityOrderUpdate {
	if s != nil {
		aou.SetWxTxID(*s)
	}
	return aou
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (aou *ActivityOrderUpdate) SetScenicAreaID(i int) *ActivityOrderUpdate {
	aou.mutation.ResetScenicAreaID()
	aou.mutation.SetScenicAreaID(i)
	return aou
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (aou *ActivityOrderUpdate) SetNillableScenicAreaID(i *int) *ActivityOrderUpdate {
	if i != nil {
		aou.SetScenicAreaID(*i)
	}
	return aou
}

// AddScenicAreaID adds i to the "scenic_area_id" field.
func (aou *ActivityOrderUpdate) AddScenicAreaID(i int) *ActivityOrderUpdate {
	aou.mutation.AddScenicAreaID(i)
	return aou
}

// SetMchID sets the "mch_id" field.
func (aou *ActivityOrderUpdate) SetMchID(s string) *ActivityOrderUpdate {
	aou.mutation.SetMchID(s)
	return aou
}

// SetNillableMchID sets the "mch_id" field if the given value is not nil.
func (aou *ActivityOrderUpdate) SetNillableMchID(s *string) *ActivityOrderUpdate {
	if s != nil {
		aou.SetMchID(*s)
	}
	return aou
}

// SetScenicAreaName sets the "scenic_area_name" field.
func (aou *ActivityOrderUpdate) SetScenicAreaName(s string) *ActivityOrderUpdate {
	aou.mutation.SetScenicAreaName(s)
	return aou
}

// SetNillableScenicAreaName sets the "scenic_area_name" field if the given value is not nil.
func (aou *ActivityOrderUpdate) SetNillableScenicAreaName(s *string) *ActivityOrderUpdate {
	if s != nil {
		aou.SetScenicAreaName(*s)
	}
	return aou
}

// SetUserID sets the "user_id" field.
func (aou *ActivityOrderUpdate) SetUserID(i int) *ActivityOrderUpdate {
	aou.mutation.ResetUserID()
	aou.mutation.SetUserID(i)
	return aou
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (aou *ActivityOrderUpdate) SetNillableUserID(i *int) *ActivityOrderUpdate {
	if i != nil {
		aou.SetUserID(*i)
	}
	return aou
}

// AddUserID adds i to the "user_id" field.
func (aou *ActivityOrderUpdate) AddUserID(i int) *ActivityOrderUpdate {
	aou.mutation.AddUserID(i)
	return aou
}

// SetOpenID sets the "open_id" field.
func (aou *ActivityOrderUpdate) SetOpenID(s string) *ActivityOrderUpdate {
	aou.mutation.SetOpenID(s)
	return aou
}

// SetNillableOpenID sets the "open_id" field if the given value is not nil.
func (aou *ActivityOrderUpdate) SetNillableOpenID(s *string) *ActivityOrderUpdate {
	if s != nil {
		aou.SetOpenID(*s)
	}
	return aou
}

// SetOrderAmount sets the "order_amount" field.
func (aou *ActivityOrderUpdate) SetOrderAmount(i int) *ActivityOrderUpdate {
	aou.mutation.ResetOrderAmount()
	aou.mutation.SetOrderAmount(i)
	return aou
}

// SetNillableOrderAmount sets the "order_amount" field if the given value is not nil.
func (aou *ActivityOrderUpdate) SetNillableOrderAmount(i *int) *ActivityOrderUpdate {
	if i != nil {
		aou.SetOrderAmount(*i)
	}
	return aou
}

// AddOrderAmount adds i to the "order_amount" field.
func (aou *ActivityOrderUpdate) AddOrderAmount(i int) *ActivityOrderUpdate {
	aou.mutation.AddOrderAmount(i)
	return aou
}

// SetOrderState sets the "order_state" field.
func (aou *ActivityOrderUpdate) SetOrderState(i int) *ActivityOrderUpdate {
	aou.mutation.ResetOrderState()
	aou.mutation.SetOrderState(i)
	return aou
}

// SetNillableOrderState sets the "order_state" field if the given value is not nil.
func (aou *ActivityOrderUpdate) SetNillableOrderState(i *int) *ActivityOrderUpdate {
	if i != nil {
		aou.SetOrderState(*i)
	}
	return aou
}

// AddOrderState adds i to the "order_state" field.
func (aou *ActivityOrderUpdate) AddOrderState(i int) *ActivityOrderUpdate {
	aou.mutation.AddOrderState(i)
	return aou
}

// SetRemark sets the "remark" field.
func (aou *ActivityOrderUpdate) SetRemark(s string) *ActivityOrderUpdate {
	aou.mutation.SetRemark(s)
	return aou
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (aou *ActivityOrderUpdate) SetNillableRemark(s *string) *ActivityOrderUpdate {
	if s != nil {
		aou.SetRemark(*s)
	}
	return aou
}

// SetPaidTime sets the "paid_time" field.
func (aou *ActivityOrderUpdate) SetPaidTime(t time.Time) *ActivityOrderUpdate {
	aou.mutation.SetPaidTime(t)
	return aou
}

// SetNillablePaidTime sets the "paid_time" field if the given value is not nil.
func (aou *ActivityOrderUpdate) SetNillablePaidTime(t *time.Time) *ActivityOrderUpdate {
	if t != nil {
		aou.SetPaidTime(*t)
	}
	return aou
}

// ClearPaidTime clears the value of the "paid_time" field.
func (aou *ActivityOrderUpdate) ClearPaidTime() *ActivityOrderUpdate {
	aou.mutation.ClearPaidTime()
	return aou
}

// SetUpdateTime sets the "update_time" field.
func (aou *ActivityOrderUpdate) SetUpdateTime(t time.Time) *ActivityOrderUpdate {
	aou.mutation.SetUpdateTime(t)
	return aou
}

// Mutation returns the ActivityOrderMutation object of the builder.
func (aou *ActivityOrderUpdate) Mutation() *ActivityOrderMutation {
	return aou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aou *ActivityOrderUpdate) Save(ctx context.Context) (int, error) {
	aou.defaults()
	return withHooks(ctx, aou.sqlSave, aou.mutation, aou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aou *ActivityOrderUpdate) SaveX(ctx context.Context) int {
	affected, err := aou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aou *ActivityOrderUpdate) Exec(ctx context.Context) error {
	_, err := aou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aou *ActivityOrderUpdate) ExecX(ctx context.Context) {
	if err := aou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aou *ActivityOrderUpdate) defaults() {
	if _, ok := aou.mutation.UpdateTime(); !ok {
		v := activityorder.UpdateDefaultUpdateTime()
		aou.mutation.SetUpdateTime(v)
	}
}

func (aou *ActivityOrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(activityorder.Table, activityorder.Columns, sqlgraph.NewFieldSpec(activityorder.FieldID, field.TypeInt))
	if ps := aou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aou.mutation.OrderNo(); ok {
		_spec.SetField(activityorder.FieldOrderNo, field.TypeString, value)
	}
	if value, ok := aou.mutation.WxTxID(); ok {
		_spec.SetField(activityorder.FieldWxTxID, field.TypeString, value)
	}
	if value, ok := aou.mutation.ScenicAreaID(); ok {
		_spec.SetField(activityorder.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := aou.mutation.AddedScenicAreaID(); ok {
		_spec.AddField(activityorder.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := aou.mutation.MchID(); ok {
		_spec.SetField(activityorder.FieldMchID, field.TypeString, value)
	}
	if value, ok := aou.mutation.ScenicAreaName(); ok {
		_spec.SetField(activityorder.FieldScenicAreaName, field.TypeString, value)
	}
	if value, ok := aou.mutation.UserID(); ok {
		_spec.SetField(activityorder.FieldUserID, field.TypeInt, value)
	}
	if value, ok := aou.mutation.AddedUserID(); ok {
		_spec.AddField(activityorder.FieldUserID, field.TypeInt, value)
	}
	if value, ok := aou.mutation.OpenID(); ok {
		_spec.SetField(activityorder.FieldOpenID, field.TypeString, value)
	}
	if value, ok := aou.mutation.OrderAmount(); ok {
		_spec.SetField(activityorder.FieldOrderAmount, field.TypeInt, value)
	}
	if value, ok := aou.mutation.AddedOrderAmount(); ok {
		_spec.AddField(activityorder.FieldOrderAmount, field.TypeInt, value)
	}
	if value, ok := aou.mutation.OrderState(); ok {
		_spec.SetField(activityorder.FieldOrderState, field.TypeInt, value)
	}
	if value, ok := aou.mutation.AddedOrderState(); ok {
		_spec.AddField(activityorder.FieldOrderState, field.TypeInt, value)
	}
	if value, ok := aou.mutation.Remark(); ok {
		_spec.SetField(activityorder.FieldRemark, field.TypeString, value)
	}
	if value, ok := aou.mutation.PaidTime(); ok {
		_spec.SetField(activityorder.FieldPaidTime, field.TypeTime, value)
	}
	if aou.mutation.PaidTimeCleared() {
		_spec.ClearField(activityorder.FieldPaidTime, field.TypeTime)
	}
	if value, ok := aou.mutation.UpdateTime(); ok {
		_spec.SetField(activityorder.FieldUpdateTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activityorder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aou.mutation.done = true
	return n, nil
}

// ActivityOrderUpdateOne is the builder for updating a single ActivityOrder entity.
type ActivityOrderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ActivityOrderMutation
}

// SetOrderNo sets the "order_no" field.
func (aouo *ActivityOrderUpdateOne) SetOrderNo(s string) *ActivityOrderUpdateOne {
	aouo.mutation.SetOrderNo(s)
	return aouo
}

// SetNillableOrderNo sets the "order_no" field if the given value is not nil.
func (aouo *ActivityOrderUpdateOne) SetNillableOrderNo(s *string) *ActivityOrderUpdateOne {
	if s != nil {
		aouo.SetOrderNo(*s)
	}
	return aouo
}

// SetWxTxID sets the "wx_tx_id" field.
func (aouo *ActivityOrderUpdateOne) SetWxTxID(s string) *ActivityOrderUpdateOne {
	aouo.mutation.SetWxTxID(s)
	return aouo
}

// SetNillableWxTxID sets the "wx_tx_id" field if the given value is not nil.
func (aouo *ActivityOrderUpdateOne) SetNillableWxTxID(s *string) *ActivityOrderUpdateOne {
	if s != nil {
		aouo.SetWxTxID(*s)
	}
	return aouo
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (aouo *ActivityOrderUpdateOne) SetScenicAreaID(i int) *ActivityOrderUpdateOne {
	aouo.mutation.ResetScenicAreaID()
	aouo.mutation.SetScenicAreaID(i)
	return aouo
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (aouo *ActivityOrderUpdateOne) SetNillableScenicAreaID(i *int) *ActivityOrderUpdateOne {
	if i != nil {
		aouo.SetScenicAreaID(*i)
	}
	return aouo
}

// AddScenicAreaID adds i to the "scenic_area_id" field.
func (aouo *ActivityOrderUpdateOne) AddScenicAreaID(i int) *ActivityOrderUpdateOne {
	aouo.mutation.AddScenicAreaID(i)
	return aouo
}

// SetMchID sets the "mch_id" field.
func (aouo *ActivityOrderUpdateOne) SetMchID(s string) *ActivityOrderUpdateOne {
	aouo.mutation.SetMchID(s)
	return aouo
}

// SetNillableMchID sets the "mch_id" field if the given value is not nil.
func (aouo *ActivityOrderUpdateOne) SetNillableMchID(s *string) *ActivityOrderUpdateOne {
	if s != nil {
		aouo.SetMchID(*s)
	}
	return aouo
}

// SetScenicAreaName sets the "scenic_area_name" field.
func (aouo *ActivityOrderUpdateOne) SetScenicAreaName(s string) *ActivityOrderUpdateOne {
	aouo.mutation.SetScenicAreaName(s)
	return aouo
}

// SetNillableScenicAreaName sets the "scenic_area_name" field if the given value is not nil.
func (aouo *ActivityOrderUpdateOne) SetNillableScenicAreaName(s *string) *ActivityOrderUpdateOne {
	if s != nil {
		aouo.SetScenicAreaName(*s)
	}
	return aouo
}

// SetUserID sets the "user_id" field.
func (aouo *ActivityOrderUpdateOne) SetUserID(i int) *ActivityOrderUpdateOne {
	aouo.mutation.ResetUserID()
	aouo.mutation.SetUserID(i)
	return aouo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (aouo *ActivityOrderUpdateOne) SetNillableUserID(i *int) *ActivityOrderUpdateOne {
	if i != nil {
		aouo.SetUserID(*i)
	}
	return aouo
}

// AddUserID adds i to the "user_id" field.
func (aouo *ActivityOrderUpdateOne) AddUserID(i int) *ActivityOrderUpdateOne {
	aouo.mutation.AddUserID(i)
	return aouo
}

// SetOpenID sets the "open_id" field.
func (aouo *ActivityOrderUpdateOne) SetOpenID(s string) *ActivityOrderUpdateOne {
	aouo.mutation.SetOpenID(s)
	return aouo
}

// SetNillableOpenID sets the "open_id" field if the given value is not nil.
func (aouo *ActivityOrderUpdateOne) SetNillableOpenID(s *string) *ActivityOrderUpdateOne {
	if s != nil {
		aouo.SetOpenID(*s)
	}
	return aouo
}

// SetOrderAmount sets the "order_amount" field.
func (aouo *ActivityOrderUpdateOne) SetOrderAmount(i int) *ActivityOrderUpdateOne {
	aouo.mutation.ResetOrderAmount()
	aouo.mutation.SetOrderAmount(i)
	return aouo
}

// SetNillableOrderAmount sets the "order_amount" field if the given value is not nil.
func (aouo *ActivityOrderUpdateOne) SetNillableOrderAmount(i *int) *ActivityOrderUpdateOne {
	if i != nil {
		aouo.SetOrderAmount(*i)
	}
	return aouo
}

// AddOrderAmount adds i to the "order_amount" field.
func (aouo *ActivityOrderUpdateOne) AddOrderAmount(i int) *ActivityOrderUpdateOne {
	aouo.mutation.AddOrderAmount(i)
	return aouo
}

// SetOrderState sets the "order_state" field.
func (aouo *ActivityOrderUpdateOne) SetOrderState(i int) *ActivityOrderUpdateOne {
	aouo.mutation.ResetOrderState()
	aouo.mutation.SetOrderState(i)
	return aouo
}

// SetNillableOrderState sets the "order_state" field if the given value is not nil.
func (aouo *ActivityOrderUpdateOne) SetNillableOrderState(i *int) *ActivityOrderUpdateOne {
	if i != nil {
		aouo.SetOrderState(*i)
	}
	return aouo
}

// AddOrderState adds i to the "order_state" field.
func (aouo *ActivityOrderUpdateOne) AddOrderState(i int) *ActivityOrderUpdateOne {
	aouo.mutation.AddOrderState(i)
	return aouo
}

// SetRemark sets the "remark" field.
func (aouo *ActivityOrderUpdateOne) SetRemark(s string) *ActivityOrderUpdateOne {
	aouo.mutation.SetRemark(s)
	return aouo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (aouo *ActivityOrderUpdateOne) SetNillableRemark(s *string) *ActivityOrderUpdateOne {
	if s != nil {
		aouo.SetRemark(*s)
	}
	return aouo
}

// SetPaidTime sets the "paid_time" field.
func (aouo *ActivityOrderUpdateOne) SetPaidTime(t time.Time) *ActivityOrderUpdateOne {
	aouo.mutation.SetPaidTime(t)
	return aouo
}

// SetNillablePaidTime sets the "paid_time" field if the given value is not nil.
func (aouo *ActivityOrderUpdateOne) SetNillablePaidTime(t *time.Time) *ActivityOrderUpdateOne {
	if t != nil {
		aouo.SetPaidTime(*t)
	}
	return aouo
}

// ClearPaidTime clears the value of the "paid_time" field.
func (aouo *ActivityOrderUpdateOne) ClearPaidTime() *ActivityOrderUpdateOne {
	aouo.mutation.ClearPaidTime()
	return aouo
}

// SetUpdateTime sets the "update_time" field.
func (aouo *ActivityOrderUpdateOne) SetUpdateTime(t time.Time) *ActivityOrderUpdateOne {
	aouo.mutation.SetUpdateTime(t)
	return aouo
}

// Mutation returns the ActivityOrderMutation object of the builder.
func (aouo *ActivityOrderUpdateOne) Mutation() *ActivityOrderMutation {
	return aouo.mutation
}

// Where appends a list predicates to the ActivityOrderUpdate builder.
func (aouo *ActivityOrderUpdateOne) Where(ps ...predicate.ActivityOrder) *ActivityOrderUpdateOne {
	aouo.mutation.Where(ps...)
	return aouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aouo *ActivityOrderUpdateOne) Select(field string, fields ...string) *ActivityOrderUpdateOne {
	aouo.fields = append([]string{field}, fields...)
	return aouo
}

// Save executes the query and returns the updated ActivityOrder entity.
func (aouo *ActivityOrderUpdateOne) Save(ctx context.Context) (*ActivityOrder, error) {
	aouo.defaults()
	return withHooks(ctx, aouo.sqlSave, aouo.mutation, aouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aouo *ActivityOrderUpdateOne) SaveX(ctx context.Context) *ActivityOrder {
	node, err := aouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aouo *ActivityOrderUpdateOne) Exec(ctx context.Context) error {
	_, err := aouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aouo *ActivityOrderUpdateOne) ExecX(ctx context.Context) {
	if err := aouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aouo *ActivityOrderUpdateOne) defaults() {
	if _, ok := aouo.mutation.UpdateTime(); !ok {
		v := activityorder.UpdateDefaultUpdateTime()
		aouo.mutation.SetUpdateTime(v)
	}
}

func (aouo *ActivityOrderUpdateOne) sqlSave(ctx context.Context) (_node *ActivityOrder, err error) {
	_spec := sqlgraph.NewUpdateSpec(activityorder.Table, activityorder.Columns, sqlgraph.NewFieldSpec(activityorder.FieldID, field.TypeInt))
	id, ok := aouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ActivityOrder.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, activityorder.FieldID)
		for _, f := range fields {
			if !activityorder.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != activityorder.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aouo.mutation.OrderNo(); ok {
		_spec.SetField(activityorder.FieldOrderNo, field.TypeString, value)
	}
	if value, ok := aouo.mutation.WxTxID(); ok {
		_spec.SetField(activityorder.FieldWxTxID, field.TypeString, value)
	}
	if value, ok := aouo.mutation.ScenicAreaID(); ok {
		_spec.SetField(activityorder.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := aouo.mutation.AddedScenicAreaID(); ok {
		_spec.AddField(activityorder.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := aouo.mutation.MchID(); ok {
		_spec.SetField(activityorder.FieldMchID, field.TypeString, value)
	}
	if value, ok := aouo.mutation.ScenicAreaName(); ok {
		_spec.SetField(activityorder.FieldScenicAreaName, field.TypeString, value)
	}
	if value, ok := aouo.mutation.UserID(); ok {
		_spec.SetField(activityorder.FieldUserID, field.TypeInt, value)
	}
	if value, ok := aouo.mutation.AddedUserID(); ok {
		_spec.AddField(activityorder.FieldUserID, field.TypeInt, value)
	}
	if value, ok := aouo.mutation.OpenID(); ok {
		_spec.SetField(activityorder.FieldOpenID, field.TypeString, value)
	}
	if value, ok := aouo.mutation.OrderAmount(); ok {
		_spec.SetField(activityorder.FieldOrderAmount, field.TypeInt, value)
	}
	if value, ok := aouo.mutation.AddedOrderAmount(); ok {
		_spec.AddField(activityorder.FieldOrderAmount, field.TypeInt, value)
	}
	if value, ok := aouo.mutation.OrderState(); ok {
		_spec.SetField(activityorder.FieldOrderState, field.TypeInt, value)
	}
	if value, ok := aouo.mutation.AddedOrderState(); ok {
		_spec.AddField(activityorder.FieldOrderState, field.TypeInt, value)
	}
	if value, ok := aouo.mutation.Remark(); ok {
		_spec.SetField(activityorder.FieldRemark, field.TypeString, value)
	}
	if value, ok := aouo.mutation.PaidTime(); ok {
		_spec.SetField(activityorder.FieldPaidTime, field.TypeTime, value)
	}
	if aouo.mutation.PaidTimeCleared() {
		_spec.ClearField(activityorder.FieldPaidTime, field.TypeTime)
	}
	if value, ok := aouo.mutation.UpdateTime(); ok {
		_spec.SetField(activityorder.FieldUpdateTime, field.TypeTime, value)
	}
	_node = &ActivityOrder{config: aouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activityorder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aouo.mutation.done = true
	return _node, nil
}
