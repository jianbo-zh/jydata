// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jianbo-zh/jydata/database/ent/carsmodels"
)

// CarsModels is the model entity for the CarsModels schema.
type CarsModels struct {
	config `json:"-"`
	// ID of the ent.
	// ID
	ID int `json:"id,omitempty"`
	// 型号名称
	ModelName string `json:"model_name,omitempty"`
	// 型号名称(中文)
	ModelRemark string `json:"model_remark,omitempty"`
	// 分组数量
	GroupCount int `json:"group_count,omitempty"`
	// 状态：0 - 不可用，1 - 可用
	Status int `json:"status,omitempty"`
	// 车辆数递增值
	CarIncr int `json:"car_incr,omitempty"`
	// 是否已删除：0 - 正常，1 - 已删除
	IsDeleted int `json:"is_deleted,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CarsModelsQuery when eager-loading is set.
	Edges        CarsModelsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CarsModelsEdges holds the relations/edges for other nodes in the graph.
type CarsModelsEdges struct {
	// Cars holds the value of the cars edge.
	Cars []*Car `json:"cars,omitempty"`
	// Groups holds the value of the groups edge.
	Groups []*CarsModelsGroups `json:"groups,omitempty"`
	// Params holds the value of the params edge.
	Params []*CarsModelsGroupsParams `json:"params,omitempty"`
	// ConfigFiles holds the value of the config_files edge.
	ConfigFiles []*CarConfig `json:"config_files,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// CarsOrErr returns the Cars value or an error if the edge
// was not loaded in eager-loading.
func (e CarsModelsEdges) CarsOrErr() ([]*Car, error) {
	if e.loadedTypes[0] {
		return e.Cars, nil
	}
	return nil, &NotLoadedError{edge: "cars"}
}

// GroupsOrErr returns the Groups value or an error if the edge
// was not loaded in eager-loading.
func (e CarsModelsEdges) GroupsOrErr() ([]*CarsModelsGroups, error) {
	if e.loadedTypes[1] {
		return e.Groups, nil
	}
	return nil, &NotLoadedError{edge: "groups"}
}

// ParamsOrErr returns the Params value or an error if the edge
// was not loaded in eager-loading.
func (e CarsModelsEdges) ParamsOrErr() ([]*CarsModelsGroupsParams, error) {
	if e.loadedTypes[2] {
		return e.Params, nil
	}
	return nil, &NotLoadedError{edge: "params"}
}

// ConfigFilesOrErr returns the ConfigFiles value or an error if the edge
// was not loaded in eager-loading.
func (e CarsModelsEdges) ConfigFilesOrErr() ([]*CarConfig, error) {
	if e.loadedTypes[3] {
		return e.ConfigFiles, nil
	}
	return nil, &NotLoadedError{edge: "config_files"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CarsModels) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case carsmodels.FieldID, carsmodels.FieldGroupCount, carsmodels.FieldStatus, carsmodels.FieldCarIncr, carsmodels.FieldIsDeleted:
			values[i] = new(sql.NullInt64)
		case carsmodels.FieldModelName, carsmodels.FieldModelRemark:
			values[i] = new(sql.NullString)
		case carsmodels.FieldCreateTime, carsmodels.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CarsModels fields.
func (cm *CarsModels) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case carsmodels.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cm.ID = int(value.Int64)
		case carsmodels.FieldModelName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field model_name", values[i])
			} else if value.Valid {
				cm.ModelName = value.String
			}
		case carsmodels.FieldModelRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field model_remark", values[i])
			} else if value.Valid {
				cm.ModelRemark = value.String
			}
		case carsmodels.FieldGroupCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field group_count", values[i])
			} else if value.Valid {
				cm.GroupCount = int(value.Int64)
			}
		case carsmodels.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				cm.Status = int(value.Int64)
			}
		case carsmodels.FieldCarIncr:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field car_incr", values[i])
			} else if value.Valid {
				cm.CarIncr = int(value.Int64)
			}
		case carsmodels.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_deleted", values[i])
			} else if value.Valid {
				cm.IsDeleted = int(value.Int64)
			}
		case carsmodels.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				cm.CreateTime = value.Time
			}
		case carsmodels.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				cm.UpdateTime = value.Time
			}
		default:
			cm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CarsModels.
// This includes values selected through modifiers, order, etc.
func (cm *CarsModels) Value(name string) (ent.Value, error) {
	return cm.selectValues.Get(name)
}

// QueryCars queries the "cars" edge of the CarsModels entity.
func (cm *CarsModels) QueryCars() *CarQuery {
	return NewCarsModelsClient(cm.config).QueryCars(cm)
}

// QueryGroups queries the "groups" edge of the CarsModels entity.
func (cm *CarsModels) QueryGroups() *CarsModelsGroupsQuery {
	return NewCarsModelsClient(cm.config).QueryGroups(cm)
}

// QueryParams queries the "params" edge of the CarsModels entity.
func (cm *CarsModels) QueryParams() *CarsModelsGroupsParamsQuery {
	return NewCarsModelsClient(cm.config).QueryParams(cm)
}

// QueryConfigFiles queries the "config_files" edge of the CarsModels entity.
func (cm *CarsModels) QueryConfigFiles() *CarConfigQuery {
	return NewCarsModelsClient(cm.config).QueryConfigFiles(cm)
}

// Update returns a builder for updating this CarsModels.
// Note that you need to call CarsModels.Unwrap() before calling this method if this CarsModels
// was returned from a transaction, and the transaction was committed or rolled back.
func (cm *CarsModels) Update() *CarsModelsUpdateOne {
	return NewCarsModelsClient(cm.config).UpdateOne(cm)
}

// Unwrap unwraps the CarsModels entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cm *CarsModels) Unwrap() *CarsModels {
	_tx, ok := cm.config.driver.(*txDriver)
	if !ok {
		panic("ent: CarsModels is not a transactional entity")
	}
	cm.config.driver = _tx.drv
	return cm
}

// String implements the fmt.Stringer.
func (cm *CarsModels) String() string {
	var builder strings.Builder
	builder.WriteString("CarsModels(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cm.ID))
	builder.WriteString("model_name=")
	builder.WriteString(cm.ModelName)
	builder.WriteString(", ")
	builder.WriteString("model_remark=")
	builder.WriteString(cm.ModelRemark)
	builder.WriteString(", ")
	builder.WriteString("group_count=")
	builder.WriteString(fmt.Sprintf("%v", cm.GroupCount))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", cm.Status))
	builder.WriteString(", ")
	builder.WriteString("car_incr=")
	builder.WriteString(fmt.Sprintf("%v", cm.CarIncr))
	builder.WriteString(", ")
	builder.WriteString("is_deleted=")
	builder.WriteString(fmt.Sprintf("%v", cm.IsDeleted))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(cm.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(cm.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CarsModelsSlice is a parsable slice of CarsModels.
type CarsModelsSlice []*CarsModels
