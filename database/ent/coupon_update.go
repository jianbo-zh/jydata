// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/coupon"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CouponUpdate is the builder for updating Coupon entities.
type CouponUpdate struct {
	config
	hooks    []Hook
	mutation *CouponMutation
}

// Where appends a list predicates to the CouponUpdate builder.
func (cu *CouponUpdate) Where(ps ...predicate.Coupon) *CouponUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetDeleteTime sets the "delete_time" field.
func (cu *CouponUpdate) SetDeleteTime(t time.Time) *CouponUpdate {
	cu.mutation.SetDeleteTime(t)
	return cu
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableDeleteTime(t *time.Time) *CouponUpdate {
	if t != nil {
		cu.SetDeleteTime(*t)
	}
	return cu
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (cu *CouponUpdate) ClearDeleteTime() *CouponUpdate {
	cu.mutation.ClearDeleteTime()
	return cu
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (cu *CouponUpdate) SetScenicAreaID(i int) *CouponUpdate {
	cu.mutation.ResetScenicAreaID()
	cu.mutation.SetScenicAreaID(i)
	return cu
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableScenicAreaID(i *int) *CouponUpdate {
	if i != nil {
		cu.SetScenicAreaID(*i)
	}
	return cu
}

// AddScenicAreaID adds i to the "scenic_area_id" field.
func (cu *CouponUpdate) AddScenicAreaID(i int) *CouponUpdate {
	cu.mutation.AddScenicAreaID(i)
	return cu
}

// ClearScenicAreaID clears the value of the "scenic_area_id" field.
func (cu *CouponUpdate) ClearScenicAreaID() *CouponUpdate {
	cu.mutation.ClearScenicAreaID()
	return cu
}

// SetName sets the "name" field.
func (cu *CouponUpdate) SetName(s string) *CouponUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableName(s *string) *CouponUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetCouponNo sets the "coupon_no" field.
func (cu *CouponUpdate) SetCouponNo(s string) *CouponUpdate {
	cu.mutation.SetCouponNo(s)
	return cu
}

// SetNillableCouponNo sets the "coupon_no" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableCouponNo(s *string) *CouponUpdate {
	if s != nil {
		cu.SetCouponNo(*s)
	}
	return cu
}

// SetUserID sets the "user_id" field.
func (cu *CouponUpdate) SetUserID(i int) *CouponUpdate {
	cu.mutation.ResetUserID()
	cu.mutation.SetUserID(i)
	return cu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableUserID(i *int) *CouponUpdate {
	if i != nil {
		cu.SetUserID(*i)
	}
	return cu
}

// AddUserID adds i to the "user_id" field.
func (cu *CouponUpdate) AddUserID(i int) *CouponUpdate {
	cu.mutation.AddUserID(i)
	return cu
}

// SetLimitAmount sets the "limit_amount" field.
func (cu *CouponUpdate) SetLimitAmount(i int) *CouponUpdate {
	cu.mutation.ResetLimitAmount()
	cu.mutation.SetLimitAmount(i)
	return cu
}

// SetNillableLimitAmount sets the "limit_amount" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableLimitAmount(i *int) *CouponUpdate {
	if i != nil {
		cu.SetLimitAmount(*i)
	}
	return cu
}

// AddLimitAmount adds i to the "limit_amount" field.
func (cu *CouponUpdate) AddLimitAmount(i int) *CouponUpdate {
	cu.mutation.AddLimitAmount(i)
	return cu
}

// SetCouponAmount sets the "coupon_amount" field.
func (cu *CouponUpdate) SetCouponAmount(i int) *CouponUpdate {
	cu.mutation.ResetCouponAmount()
	cu.mutation.SetCouponAmount(i)
	return cu
}

// SetNillableCouponAmount sets the "coupon_amount" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableCouponAmount(i *int) *CouponUpdate {
	if i != nil {
		cu.SetCouponAmount(*i)
	}
	return cu
}

// AddCouponAmount adds i to the "coupon_amount" field.
func (cu *CouponUpdate) AddCouponAmount(i int) *CouponUpdate {
	cu.mutation.AddCouponAmount(i)
	return cu
}

// SetState sets the "state" field.
func (cu *CouponUpdate) SetState(i int) *CouponUpdate {
	cu.mutation.ResetState()
	cu.mutation.SetState(i)
	return cu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableState(i *int) *CouponUpdate {
	if i != nil {
		cu.SetState(*i)
	}
	return cu
}

// AddState adds i to the "state" field.
func (cu *CouponUpdate) AddState(i int) *CouponUpdate {
	cu.mutation.AddState(i)
	return cu
}

// SetValidStartTime sets the "valid_start_time" field.
func (cu *CouponUpdate) SetValidStartTime(t time.Time) *CouponUpdate {
	cu.mutation.SetValidStartTime(t)
	return cu
}

// SetNillableValidStartTime sets the "valid_start_time" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableValidStartTime(t *time.Time) *CouponUpdate {
	if t != nil {
		cu.SetValidStartTime(*t)
	}
	return cu
}

// ClearValidStartTime clears the value of the "valid_start_time" field.
func (cu *CouponUpdate) ClearValidStartTime() *CouponUpdate {
	cu.mutation.ClearValidStartTime()
	return cu
}

// SetValidEndTime sets the "valid_end_time" field.
func (cu *CouponUpdate) SetValidEndTime(t time.Time) *CouponUpdate {
	cu.mutation.SetValidEndTime(t)
	return cu
}

// SetNillableValidEndTime sets the "valid_end_time" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableValidEndTime(t *time.Time) *CouponUpdate {
	if t != nil {
		cu.SetValidEndTime(*t)
	}
	return cu
}

// ClearValidEndTime clears the value of the "valid_end_time" field.
func (cu *CouponUpdate) ClearValidEndTime() *CouponUpdate {
	cu.mutation.ClearValidEndTime()
	return cu
}

// SetUpdateTime sets the "update_time" field.
func (cu *CouponUpdate) SetUpdateTime(t time.Time) *CouponUpdate {
	cu.mutation.SetUpdateTime(t)
	return cu
}

// Mutation returns the CouponMutation object of the builder.
func (cu *CouponUpdate) Mutation() *CouponMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CouponUpdate) Save(ctx context.Context) (int, error) {
	if err := cu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CouponUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CouponUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CouponUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CouponUpdate) defaults() error {
	if _, ok := cu.mutation.UpdateTime(); !ok {
		if coupon.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized coupon.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := coupon.UpdateDefaultUpdateTime()
		cu.mutation.SetUpdateTime(v)
	}
	return nil
}

func (cu *CouponUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(coupon.Table, coupon.Columns, sqlgraph.NewFieldSpec(coupon.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.DeleteTime(); ok {
		_spec.SetField(coupon.FieldDeleteTime, field.TypeTime, value)
	}
	if cu.mutation.DeleteTimeCleared() {
		_spec.ClearField(coupon.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := cu.mutation.ScenicAreaID(); ok {
		_spec.SetField(coupon.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedScenicAreaID(); ok {
		_spec.AddField(coupon.FieldScenicAreaID, field.TypeInt, value)
	}
	if cu.mutation.ScenicAreaIDCleared() {
		_spec.ClearField(coupon.FieldScenicAreaID, field.TypeInt)
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(coupon.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.CouponNo(); ok {
		_spec.SetField(coupon.FieldCouponNo, field.TypeString, value)
	}
	if value, ok := cu.mutation.UserID(); ok {
		_spec.SetField(coupon.FieldUserID, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedUserID(); ok {
		_spec.AddField(coupon.FieldUserID, field.TypeInt, value)
	}
	if value, ok := cu.mutation.LimitAmount(); ok {
		_spec.SetField(coupon.FieldLimitAmount, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedLimitAmount(); ok {
		_spec.AddField(coupon.FieldLimitAmount, field.TypeInt, value)
	}
	if value, ok := cu.mutation.CouponAmount(); ok {
		_spec.SetField(coupon.FieldCouponAmount, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedCouponAmount(); ok {
		_spec.AddField(coupon.FieldCouponAmount, field.TypeInt, value)
	}
	if value, ok := cu.mutation.State(); ok {
		_spec.SetField(coupon.FieldState, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedState(); ok {
		_spec.AddField(coupon.FieldState, field.TypeInt, value)
	}
	if value, ok := cu.mutation.ValidStartTime(); ok {
		_spec.SetField(coupon.FieldValidStartTime, field.TypeTime, value)
	}
	if cu.mutation.ValidStartTimeCleared() {
		_spec.ClearField(coupon.FieldValidStartTime, field.TypeTime)
	}
	if value, ok := cu.mutation.ValidEndTime(); ok {
		_spec.SetField(coupon.FieldValidEndTime, field.TypeTime, value)
	}
	if cu.mutation.ValidEndTimeCleared() {
		_spec.ClearField(coupon.FieldValidEndTime, field.TypeTime)
	}
	if value, ok := cu.mutation.UpdateTime(); ok {
		_spec.SetField(coupon.FieldUpdateTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coupon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CouponUpdateOne is the builder for updating a single Coupon entity.
type CouponUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CouponMutation
}

// SetDeleteTime sets the "delete_time" field.
func (cuo *CouponUpdateOne) SetDeleteTime(t time.Time) *CouponUpdateOne {
	cuo.mutation.SetDeleteTime(t)
	return cuo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableDeleteTime(t *time.Time) *CouponUpdateOne {
	if t != nil {
		cuo.SetDeleteTime(*t)
	}
	return cuo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (cuo *CouponUpdateOne) ClearDeleteTime() *CouponUpdateOne {
	cuo.mutation.ClearDeleteTime()
	return cuo
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (cuo *CouponUpdateOne) SetScenicAreaID(i int) *CouponUpdateOne {
	cuo.mutation.ResetScenicAreaID()
	cuo.mutation.SetScenicAreaID(i)
	return cuo
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableScenicAreaID(i *int) *CouponUpdateOne {
	if i != nil {
		cuo.SetScenicAreaID(*i)
	}
	return cuo
}

// AddScenicAreaID adds i to the "scenic_area_id" field.
func (cuo *CouponUpdateOne) AddScenicAreaID(i int) *CouponUpdateOne {
	cuo.mutation.AddScenicAreaID(i)
	return cuo
}

// ClearScenicAreaID clears the value of the "scenic_area_id" field.
func (cuo *CouponUpdateOne) ClearScenicAreaID() *CouponUpdateOne {
	cuo.mutation.ClearScenicAreaID()
	return cuo
}

// SetName sets the "name" field.
func (cuo *CouponUpdateOne) SetName(s string) *CouponUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableName(s *string) *CouponUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetCouponNo sets the "coupon_no" field.
func (cuo *CouponUpdateOne) SetCouponNo(s string) *CouponUpdateOne {
	cuo.mutation.SetCouponNo(s)
	return cuo
}

// SetNillableCouponNo sets the "coupon_no" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableCouponNo(s *string) *CouponUpdateOne {
	if s != nil {
		cuo.SetCouponNo(*s)
	}
	return cuo
}

// SetUserID sets the "user_id" field.
func (cuo *CouponUpdateOne) SetUserID(i int) *CouponUpdateOne {
	cuo.mutation.ResetUserID()
	cuo.mutation.SetUserID(i)
	return cuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableUserID(i *int) *CouponUpdateOne {
	if i != nil {
		cuo.SetUserID(*i)
	}
	return cuo
}

// AddUserID adds i to the "user_id" field.
func (cuo *CouponUpdateOne) AddUserID(i int) *CouponUpdateOne {
	cuo.mutation.AddUserID(i)
	return cuo
}

// SetLimitAmount sets the "limit_amount" field.
func (cuo *CouponUpdateOne) SetLimitAmount(i int) *CouponUpdateOne {
	cuo.mutation.ResetLimitAmount()
	cuo.mutation.SetLimitAmount(i)
	return cuo
}

// SetNillableLimitAmount sets the "limit_amount" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableLimitAmount(i *int) *CouponUpdateOne {
	if i != nil {
		cuo.SetLimitAmount(*i)
	}
	return cuo
}

// AddLimitAmount adds i to the "limit_amount" field.
func (cuo *CouponUpdateOne) AddLimitAmount(i int) *CouponUpdateOne {
	cuo.mutation.AddLimitAmount(i)
	return cuo
}

// SetCouponAmount sets the "coupon_amount" field.
func (cuo *CouponUpdateOne) SetCouponAmount(i int) *CouponUpdateOne {
	cuo.mutation.ResetCouponAmount()
	cuo.mutation.SetCouponAmount(i)
	return cuo
}

// SetNillableCouponAmount sets the "coupon_amount" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableCouponAmount(i *int) *CouponUpdateOne {
	if i != nil {
		cuo.SetCouponAmount(*i)
	}
	return cuo
}

// AddCouponAmount adds i to the "coupon_amount" field.
func (cuo *CouponUpdateOne) AddCouponAmount(i int) *CouponUpdateOne {
	cuo.mutation.AddCouponAmount(i)
	return cuo
}

// SetState sets the "state" field.
func (cuo *CouponUpdateOne) SetState(i int) *CouponUpdateOne {
	cuo.mutation.ResetState()
	cuo.mutation.SetState(i)
	return cuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableState(i *int) *CouponUpdateOne {
	if i != nil {
		cuo.SetState(*i)
	}
	return cuo
}

// AddState adds i to the "state" field.
func (cuo *CouponUpdateOne) AddState(i int) *CouponUpdateOne {
	cuo.mutation.AddState(i)
	return cuo
}

// SetValidStartTime sets the "valid_start_time" field.
func (cuo *CouponUpdateOne) SetValidStartTime(t time.Time) *CouponUpdateOne {
	cuo.mutation.SetValidStartTime(t)
	return cuo
}

// SetNillableValidStartTime sets the "valid_start_time" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableValidStartTime(t *time.Time) *CouponUpdateOne {
	if t != nil {
		cuo.SetValidStartTime(*t)
	}
	return cuo
}

// ClearValidStartTime clears the value of the "valid_start_time" field.
func (cuo *CouponUpdateOne) ClearValidStartTime() *CouponUpdateOne {
	cuo.mutation.ClearValidStartTime()
	return cuo
}

// SetValidEndTime sets the "valid_end_time" field.
func (cuo *CouponUpdateOne) SetValidEndTime(t time.Time) *CouponUpdateOne {
	cuo.mutation.SetValidEndTime(t)
	return cuo
}

// SetNillableValidEndTime sets the "valid_end_time" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableValidEndTime(t *time.Time) *CouponUpdateOne {
	if t != nil {
		cuo.SetValidEndTime(*t)
	}
	return cuo
}

// ClearValidEndTime clears the value of the "valid_end_time" field.
func (cuo *CouponUpdateOne) ClearValidEndTime() *CouponUpdateOne {
	cuo.mutation.ClearValidEndTime()
	return cuo
}

// SetUpdateTime sets the "update_time" field.
func (cuo *CouponUpdateOne) SetUpdateTime(t time.Time) *CouponUpdateOne {
	cuo.mutation.SetUpdateTime(t)
	return cuo
}

// Mutation returns the CouponMutation object of the builder.
func (cuo *CouponUpdateOne) Mutation() *CouponMutation {
	return cuo.mutation
}

// Where appends a list predicates to the CouponUpdate builder.
func (cuo *CouponUpdateOne) Where(ps ...predicate.Coupon) *CouponUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CouponUpdateOne) Select(field string, fields ...string) *CouponUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Coupon entity.
func (cuo *CouponUpdateOne) Save(ctx context.Context) (*Coupon, error) {
	if err := cuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CouponUpdateOne) SaveX(ctx context.Context) *Coupon {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CouponUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CouponUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CouponUpdateOne) defaults() error {
	if _, ok := cuo.mutation.UpdateTime(); !ok {
		if coupon.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized coupon.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := coupon.UpdateDefaultUpdateTime()
		cuo.mutation.SetUpdateTime(v)
	}
	return nil
}

func (cuo *CouponUpdateOne) sqlSave(ctx context.Context) (_node *Coupon, err error) {
	_spec := sqlgraph.NewUpdateSpec(coupon.Table, coupon.Columns, sqlgraph.NewFieldSpec(coupon.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Coupon.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, coupon.FieldID)
		for _, f := range fields {
			if !coupon.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != coupon.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.DeleteTime(); ok {
		_spec.SetField(coupon.FieldDeleteTime, field.TypeTime, value)
	}
	if cuo.mutation.DeleteTimeCleared() {
		_spec.ClearField(coupon.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := cuo.mutation.ScenicAreaID(); ok {
		_spec.SetField(coupon.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedScenicAreaID(); ok {
		_spec.AddField(coupon.FieldScenicAreaID, field.TypeInt, value)
	}
	if cuo.mutation.ScenicAreaIDCleared() {
		_spec.ClearField(coupon.FieldScenicAreaID, field.TypeInt)
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(coupon.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.CouponNo(); ok {
		_spec.SetField(coupon.FieldCouponNo, field.TypeString, value)
	}
	if value, ok := cuo.mutation.UserID(); ok {
		_spec.SetField(coupon.FieldUserID, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedUserID(); ok {
		_spec.AddField(coupon.FieldUserID, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.LimitAmount(); ok {
		_spec.SetField(coupon.FieldLimitAmount, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedLimitAmount(); ok {
		_spec.AddField(coupon.FieldLimitAmount, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.CouponAmount(); ok {
		_spec.SetField(coupon.FieldCouponAmount, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedCouponAmount(); ok {
		_spec.AddField(coupon.FieldCouponAmount, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.State(); ok {
		_spec.SetField(coupon.FieldState, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedState(); ok {
		_spec.AddField(coupon.FieldState, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.ValidStartTime(); ok {
		_spec.SetField(coupon.FieldValidStartTime, field.TypeTime, value)
	}
	if cuo.mutation.ValidStartTimeCleared() {
		_spec.ClearField(coupon.FieldValidStartTime, field.TypeTime)
	}
	if value, ok := cuo.mutation.ValidEndTime(); ok {
		_spec.SetField(coupon.FieldValidEndTime, field.TypeTime, value)
	}
	if cuo.mutation.ValidEndTimeCleared() {
		_spec.ClearField(coupon.FieldValidEndTime, field.TypeTime)
	}
	if value, ok := cuo.mutation.UpdateTime(); ok {
		_spec.SetField(coupon.FieldUpdateTime, field.TypeTime, value)
	}
	_node = &Coupon{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coupon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
