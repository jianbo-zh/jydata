// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/order"
	"github.com/jianbo-zh/jydata/database/ent/orderbilling"
)

// OrderBillingCreate is the builder for creating a OrderBilling entity.
type OrderBillingCreate struct {
	config
	mutation *OrderBillingMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (obc *OrderBillingCreate) SetType(i int) *OrderBillingCreate {
	obc.mutation.SetType(i)
	return obc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (obc *OrderBillingCreate) SetNillableType(i *int) *OrderBillingCreate {
	if i != nil {
		obc.SetType(*i)
	}
	return obc
}

// SetOrderID sets the "order_id" field.
func (obc *OrderBillingCreate) SetOrderID(i int) *OrderBillingCreate {
	obc.mutation.SetOrderID(i)
	return obc
}

// SetStartTimePrice sets the "start_time_price" field.
func (obc *OrderBillingCreate) SetStartTimePrice(i int) *OrderBillingCreate {
	obc.mutation.SetStartTimePrice(i)
	return obc
}

// SetNillableStartTimePrice sets the "start_time_price" field if the given value is not nil.
func (obc *OrderBillingCreate) SetNillableStartTimePrice(i *int) *OrderBillingCreate {
	if i != nil {
		obc.SetStartTimePrice(*i)
	}
	return obc
}

// SetStartTimeUnit sets the "start_time_unit" field.
func (obc *OrderBillingCreate) SetStartTimeUnit(i int) *OrderBillingCreate {
	obc.mutation.SetStartTimeUnit(i)
	return obc
}

// SetNillableStartTimeUnit sets the "start_time_unit" field if the given value is not nil.
func (obc *OrderBillingCreate) SetNillableStartTimeUnit(i *int) *OrderBillingCreate {
	if i != nil {
		obc.SetStartTimeUnit(*i)
	}
	return obc
}

// SetNormalTimePrice sets the "normal_time_price" field.
func (obc *OrderBillingCreate) SetNormalTimePrice(i int) *OrderBillingCreate {
	obc.mutation.SetNormalTimePrice(i)
	return obc
}

// SetNillableNormalTimePrice sets the "normal_time_price" field if the given value is not nil.
func (obc *OrderBillingCreate) SetNillableNormalTimePrice(i *int) *OrderBillingCreate {
	if i != nil {
		obc.SetNormalTimePrice(*i)
	}
	return obc
}

// SetNormalTimeUnit sets the "normal_time_unit" field.
func (obc *OrderBillingCreate) SetNormalTimeUnit(i int) *OrderBillingCreate {
	obc.mutation.SetNormalTimeUnit(i)
	return obc
}

// SetNillableNormalTimeUnit sets the "normal_time_unit" field if the given value is not nil.
func (obc *OrderBillingCreate) SetNillableNormalTimeUnit(i *int) *OrderBillingCreate {
	if i != nil {
		obc.SetNormalTimeUnit(*i)
	}
	return obc
}

// SetCumulativeSecond sets the "cumulative_second" field.
func (obc *OrderBillingCreate) SetCumulativeSecond(f float64) *OrderBillingCreate {
	obc.mutation.SetCumulativeSecond(f)
	return obc
}

// SetNillableCumulativeSecond sets the "cumulative_second" field if the given value is not nil.
func (obc *OrderBillingCreate) SetNillableCumulativeSecond(f *float64) *OrderBillingCreate {
	if f != nil {
		obc.SetCumulativeSecond(*f)
	}
	return obc
}

// SetCumulativeMeter sets the "cumulative_meter" field.
func (obc *OrderBillingCreate) SetCumulativeMeter(f float64) *OrderBillingCreate {
	obc.mutation.SetCumulativeMeter(f)
	return obc
}

// SetNillableCumulativeMeter sets the "cumulative_meter" field if the given value is not nil.
func (obc *OrderBillingCreate) SetNillableCumulativeMeter(f *float64) *OrderBillingCreate {
	if f != nil {
		obc.SetCumulativeMeter(*f)
	}
	return obc
}

// SetTicketCount sets the "ticket_count" field.
func (obc *OrderBillingCreate) SetTicketCount(i int) *OrderBillingCreate {
	obc.mutation.SetTicketCount(i)
	return obc
}

// SetNillableTicketCount sets the "ticket_count" field if the given value is not nil.
func (obc *OrderBillingCreate) SetNillableTicketCount(i *int) *OrderBillingCreate {
	if i != nil {
		obc.SetTicketCount(*i)
	}
	return obc
}

// SetCumulativeStop sets the "cumulative_stop" field.
func (obc *OrderBillingCreate) SetCumulativeStop(i int) *OrderBillingCreate {
	obc.mutation.SetCumulativeStop(i)
	return obc
}

// SetNillableCumulativeStop sets the "cumulative_stop" field if the given value is not nil.
func (obc *OrderBillingCreate) SetNillableCumulativeStop(i *int) *OrderBillingCreate {
	if i != nil {
		obc.SetCumulativeStop(*i)
	}
	return obc
}

// SetStartStopPrice sets the "start_stop_price" field.
func (obc *OrderBillingCreate) SetStartStopPrice(i int) *OrderBillingCreate {
	obc.mutation.SetStartStopPrice(i)
	return obc
}

// SetNillableStartStopPrice sets the "start_stop_price" field if the given value is not nil.
func (obc *OrderBillingCreate) SetNillableStartStopPrice(i *int) *OrderBillingCreate {
	if i != nil {
		obc.SetStartStopPrice(*i)
	}
	return obc
}

// SetStartStopUnit sets the "start_stop_unit" field.
func (obc *OrderBillingCreate) SetStartStopUnit(i int) *OrderBillingCreate {
	obc.mutation.SetStartStopUnit(i)
	return obc
}

// SetNillableStartStopUnit sets the "start_stop_unit" field if the given value is not nil.
func (obc *OrderBillingCreate) SetNillableStartStopUnit(i *int) *OrderBillingCreate {
	if i != nil {
		obc.SetStartStopUnit(*i)
	}
	return obc
}

// SetNormalStopPrice sets the "normal_stop_price" field.
func (obc *OrderBillingCreate) SetNormalStopPrice(i int) *OrderBillingCreate {
	obc.mutation.SetNormalStopPrice(i)
	return obc
}

// SetNillableNormalStopPrice sets the "normal_stop_price" field if the given value is not nil.
func (obc *OrderBillingCreate) SetNillableNormalStopPrice(i *int) *OrderBillingCreate {
	if i != nil {
		obc.SetNormalStopPrice(*i)
	}
	return obc
}

// SetNormalStopUnit sets the "normal_stop_unit" field.
func (obc *OrderBillingCreate) SetNormalStopUnit(i int) *OrderBillingCreate {
	obc.mutation.SetNormalStopUnit(i)
	return obc
}

// SetNillableNormalStopUnit sets the "normal_stop_unit" field if the given value is not nil.
func (obc *OrderBillingCreate) SetNillableNormalStopUnit(i *int) *OrderBillingCreate {
	if i != nil {
		obc.SetNormalStopUnit(*i)
	}
	return obc
}

// SetCouponID sets the "coupon_id" field.
func (obc *OrderBillingCreate) SetCouponID(i int) *OrderBillingCreate {
	obc.mutation.SetCouponID(i)
	return obc
}

// SetNillableCouponID sets the "coupon_id" field if the given value is not nil.
func (obc *OrderBillingCreate) SetNillableCouponID(i *int) *OrderBillingCreate {
	if i != nil {
		obc.SetCouponID(*i)
	}
	return obc
}

// SetCouponLimitAmount sets the "coupon_limit_amount" field.
func (obc *OrderBillingCreate) SetCouponLimitAmount(i int) *OrderBillingCreate {
	obc.mutation.SetCouponLimitAmount(i)
	return obc
}

// SetNillableCouponLimitAmount sets the "coupon_limit_amount" field if the given value is not nil.
func (obc *OrderBillingCreate) SetNillableCouponLimitAmount(i *int) *OrderBillingCreate {
	if i != nil {
		obc.SetCouponLimitAmount(*i)
	}
	return obc
}

// SetCouponDeductionAmount sets the "coupon_deduction_amount" field.
func (obc *OrderBillingCreate) SetCouponDeductionAmount(i int) *OrderBillingCreate {
	obc.mutation.SetCouponDeductionAmount(i)
	return obc
}

// SetNillableCouponDeductionAmount sets the "coupon_deduction_amount" field if the given value is not nil.
func (obc *OrderBillingCreate) SetNillableCouponDeductionAmount(i *int) *OrderBillingCreate {
	if i != nil {
		obc.SetCouponDeductionAmount(*i)
	}
	return obc
}

// SetCouponStartTime sets the "coupon_start_time" field.
func (obc *OrderBillingCreate) SetCouponStartTime(t time.Time) *OrderBillingCreate {
	obc.mutation.SetCouponStartTime(t)
	return obc
}

// SetNillableCouponStartTime sets the "coupon_start_time" field if the given value is not nil.
func (obc *OrderBillingCreate) SetNillableCouponStartTime(t *time.Time) *OrderBillingCreate {
	if t != nil {
		obc.SetCouponStartTime(*t)
	}
	return obc
}

// SetCouponEndTime sets the "coupon_end_time" field.
func (obc *OrderBillingCreate) SetCouponEndTime(t time.Time) *OrderBillingCreate {
	obc.mutation.SetCouponEndTime(t)
	return obc
}

// SetNillableCouponEndTime sets the "coupon_end_time" field if the given value is not nil.
func (obc *OrderBillingCreate) SetNillableCouponEndTime(t *time.Time) *OrderBillingCreate {
	if t != nil {
		obc.SetCouponEndTime(*t)
	}
	return obc
}

// SetCappedAmount sets the "capped_amount" field.
func (obc *OrderBillingCreate) SetCappedAmount(i int) *OrderBillingCreate {
	obc.mutation.SetCappedAmount(i)
	return obc
}

// SetNillableCappedAmount sets the "capped_amount" field if the given value is not nil.
func (obc *OrderBillingCreate) SetNillableCappedAmount(i *int) *OrderBillingCreate {
	if i != nil {
		obc.SetCappedAmount(*i)
	}
	return obc
}

// SetState sets the "state" field.
func (obc *OrderBillingCreate) SetState(i int) *OrderBillingCreate {
	obc.mutation.SetState(i)
	return obc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (obc *OrderBillingCreate) SetNillableState(i *int) *OrderBillingCreate {
	if i != nil {
		obc.SetState(*i)
	}
	return obc
}

// SetStartTime sets the "start_time" field.
func (obc *OrderBillingCreate) SetStartTime(t time.Time) *OrderBillingCreate {
	obc.mutation.SetStartTime(t)
	return obc
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (obc *OrderBillingCreate) SetNillableStartTime(t *time.Time) *OrderBillingCreate {
	if t != nil {
		obc.SetStartTime(*t)
	}
	return obc
}

// SetFinishTime sets the "finish_time" field.
func (obc *OrderBillingCreate) SetFinishTime(t time.Time) *OrderBillingCreate {
	obc.mutation.SetFinishTime(t)
	return obc
}

// SetNillableFinishTime sets the "finish_time" field if the given value is not nil.
func (obc *OrderBillingCreate) SetNillableFinishTime(t *time.Time) *OrderBillingCreate {
	if t != nil {
		obc.SetFinishTime(*t)
	}
	return obc
}

// SetCreateTime sets the "create_time" field.
func (obc *OrderBillingCreate) SetCreateTime(t time.Time) *OrderBillingCreate {
	obc.mutation.SetCreateTime(t)
	return obc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (obc *OrderBillingCreate) SetNillableCreateTime(t *time.Time) *OrderBillingCreate {
	if t != nil {
		obc.SetCreateTime(*t)
	}
	return obc
}

// SetUpdateTime sets the "update_time" field.
func (obc *OrderBillingCreate) SetUpdateTime(t time.Time) *OrderBillingCreate {
	obc.mutation.SetUpdateTime(t)
	return obc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (obc *OrderBillingCreate) SetNillableUpdateTime(t *time.Time) *OrderBillingCreate {
	if t != nil {
		obc.SetUpdateTime(*t)
	}
	return obc
}

// SetID sets the "id" field.
func (obc *OrderBillingCreate) SetID(i int) *OrderBillingCreate {
	obc.mutation.SetID(i)
	return obc
}

// SetOrder sets the "order" edge to the Order entity.
func (obc *OrderBillingCreate) SetOrder(o *Order) *OrderBillingCreate {
	return obc.SetOrderID(o.ID)
}

// Mutation returns the OrderBillingMutation object of the builder.
func (obc *OrderBillingCreate) Mutation() *OrderBillingMutation {
	return obc.mutation
}

// Save creates the OrderBilling in the database.
func (obc *OrderBillingCreate) Save(ctx context.Context) (*OrderBilling, error) {
	obc.defaults()
	return withHooks(ctx, obc.sqlSave, obc.mutation, obc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (obc *OrderBillingCreate) SaveX(ctx context.Context) *OrderBilling {
	v, err := obc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (obc *OrderBillingCreate) Exec(ctx context.Context) error {
	_, err := obc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (obc *OrderBillingCreate) ExecX(ctx context.Context) {
	if err := obc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (obc *OrderBillingCreate) defaults() {
	if _, ok := obc.mutation.GetType(); !ok {
		v := orderbilling.DefaultType
		obc.mutation.SetType(v)
	}
	if _, ok := obc.mutation.StartTimePrice(); !ok {
		v := orderbilling.DefaultStartTimePrice
		obc.mutation.SetStartTimePrice(v)
	}
	if _, ok := obc.mutation.StartTimeUnit(); !ok {
		v := orderbilling.DefaultStartTimeUnit
		obc.mutation.SetStartTimeUnit(v)
	}
	if _, ok := obc.mutation.NormalTimePrice(); !ok {
		v := orderbilling.DefaultNormalTimePrice
		obc.mutation.SetNormalTimePrice(v)
	}
	if _, ok := obc.mutation.NormalTimeUnit(); !ok {
		v := orderbilling.DefaultNormalTimeUnit
		obc.mutation.SetNormalTimeUnit(v)
	}
	if _, ok := obc.mutation.CumulativeSecond(); !ok {
		v := orderbilling.DefaultCumulativeSecond
		obc.mutation.SetCumulativeSecond(v)
	}
	if _, ok := obc.mutation.CumulativeMeter(); !ok {
		v := orderbilling.DefaultCumulativeMeter
		obc.mutation.SetCumulativeMeter(v)
	}
	if _, ok := obc.mutation.TicketCount(); !ok {
		v := orderbilling.DefaultTicketCount
		obc.mutation.SetTicketCount(v)
	}
	if _, ok := obc.mutation.CumulativeStop(); !ok {
		v := orderbilling.DefaultCumulativeStop
		obc.mutation.SetCumulativeStop(v)
	}
	if _, ok := obc.mutation.StartStopPrice(); !ok {
		v := orderbilling.DefaultStartStopPrice
		obc.mutation.SetStartStopPrice(v)
	}
	if _, ok := obc.mutation.StartStopUnit(); !ok {
		v := orderbilling.DefaultStartStopUnit
		obc.mutation.SetStartStopUnit(v)
	}
	if _, ok := obc.mutation.NormalStopPrice(); !ok {
		v := orderbilling.DefaultNormalStopPrice
		obc.mutation.SetNormalStopPrice(v)
	}
	if _, ok := obc.mutation.NormalStopUnit(); !ok {
		v := orderbilling.DefaultNormalStopUnit
		obc.mutation.SetNormalStopUnit(v)
	}
	if _, ok := obc.mutation.CouponID(); !ok {
		v := orderbilling.DefaultCouponID
		obc.mutation.SetCouponID(v)
	}
	if _, ok := obc.mutation.CouponLimitAmount(); !ok {
		v := orderbilling.DefaultCouponLimitAmount
		obc.mutation.SetCouponLimitAmount(v)
	}
	if _, ok := obc.mutation.CouponDeductionAmount(); !ok {
		v := orderbilling.DefaultCouponDeductionAmount
		obc.mutation.SetCouponDeductionAmount(v)
	}
	if _, ok := obc.mutation.CappedAmount(); !ok {
		v := orderbilling.DefaultCappedAmount
		obc.mutation.SetCappedAmount(v)
	}
	if _, ok := obc.mutation.State(); !ok {
		v := orderbilling.DefaultState
		obc.mutation.SetState(v)
	}
	if _, ok := obc.mutation.CreateTime(); !ok {
		v := orderbilling.DefaultCreateTime()
		obc.mutation.SetCreateTime(v)
	}
	if _, ok := obc.mutation.UpdateTime(); !ok {
		v := orderbilling.DefaultUpdateTime()
		obc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (obc *OrderBillingCreate) check() error {
	if _, ok := obc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "OrderBilling.type"`)}
	}
	if _, ok := obc.mutation.OrderID(); !ok {
		return &ValidationError{Name: "order_id", err: errors.New(`ent: missing required field "OrderBilling.order_id"`)}
	}
	if _, ok := obc.mutation.StartTimePrice(); !ok {
		return &ValidationError{Name: "start_time_price", err: errors.New(`ent: missing required field "OrderBilling.start_time_price"`)}
	}
	if _, ok := obc.mutation.StartTimeUnit(); !ok {
		return &ValidationError{Name: "start_time_unit", err: errors.New(`ent: missing required field "OrderBilling.start_time_unit"`)}
	}
	if _, ok := obc.mutation.NormalTimePrice(); !ok {
		return &ValidationError{Name: "normal_time_price", err: errors.New(`ent: missing required field "OrderBilling.normal_time_price"`)}
	}
	if _, ok := obc.mutation.NormalTimeUnit(); !ok {
		return &ValidationError{Name: "normal_time_unit", err: errors.New(`ent: missing required field "OrderBilling.normal_time_unit"`)}
	}
	if _, ok := obc.mutation.CumulativeSecond(); !ok {
		return &ValidationError{Name: "cumulative_second", err: errors.New(`ent: missing required field "OrderBilling.cumulative_second"`)}
	}
	if _, ok := obc.mutation.CumulativeMeter(); !ok {
		return &ValidationError{Name: "cumulative_meter", err: errors.New(`ent: missing required field "OrderBilling.cumulative_meter"`)}
	}
	if _, ok := obc.mutation.TicketCount(); !ok {
		return &ValidationError{Name: "ticket_count", err: errors.New(`ent: missing required field "OrderBilling.ticket_count"`)}
	}
	if _, ok := obc.mutation.CumulativeStop(); !ok {
		return &ValidationError{Name: "cumulative_stop", err: errors.New(`ent: missing required field "OrderBilling.cumulative_stop"`)}
	}
	if _, ok := obc.mutation.StartStopPrice(); !ok {
		return &ValidationError{Name: "start_stop_price", err: errors.New(`ent: missing required field "OrderBilling.start_stop_price"`)}
	}
	if _, ok := obc.mutation.StartStopUnit(); !ok {
		return &ValidationError{Name: "start_stop_unit", err: errors.New(`ent: missing required field "OrderBilling.start_stop_unit"`)}
	}
	if _, ok := obc.mutation.NormalStopPrice(); !ok {
		return &ValidationError{Name: "normal_stop_price", err: errors.New(`ent: missing required field "OrderBilling.normal_stop_price"`)}
	}
	if _, ok := obc.mutation.NormalStopUnit(); !ok {
		return &ValidationError{Name: "normal_stop_unit", err: errors.New(`ent: missing required field "OrderBilling.normal_stop_unit"`)}
	}
	if _, ok := obc.mutation.CouponID(); !ok {
		return &ValidationError{Name: "coupon_id", err: errors.New(`ent: missing required field "OrderBilling.coupon_id"`)}
	}
	if _, ok := obc.mutation.CouponLimitAmount(); !ok {
		return &ValidationError{Name: "coupon_limit_amount", err: errors.New(`ent: missing required field "OrderBilling.coupon_limit_amount"`)}
	}
	if _, ok := obc.mutation.CouponDeductionAmount(); !ok {
		return &ValidationError{Name: "coupon_deduction_amount", err: errors.New(`ent: missing required field "OrderBilling.coupon_deduction_amount"`)}
	}
	if _, ok := obc.mutation.CappedAmount(); !ok {
		return &ValidationError{Name: "capped_amount", err: errors.New(`ent: missing required field "OrderBilling.capped_amount"`)}
	}
	if _, ok := obc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "OrderBilling.state"`)}
	}
	if _, ok := obc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "OrderBilling.create_time"`)}
	}
	if _, ok := obc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "OrderBilling.update_time"`)}
	}
	if len(obc.mutation.OrderIDs()) == 0 {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required edge "OrderBilling.order"`)}
	}
	return nil
}

func (obc *OrderBillingCreate) sqlSave(ctx context.Context) (*OrderBilling, error) {
	if err := obc.check(); err != nil {
		return nil, err
	}
	_node, _spec := obc.createSpec()
	if err := sqlgraph.CreateNode(ctx, obc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	obc.mutation.id = &_node.ID
	obc.mutation.done = true
	return _node, nil
}

func (obc *OrderBillingCreate) createSpec() (*OrderBilling, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderBilling{config: obc.config}
		_spec = sqlgraph.NewCreateSpec(orderbilling.Table, sqlgraph.NewFieldSpec(orderbilling.FieldID, field.TypeInt))
	)
	if id, ok := obc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := obc.mutation.GetType(); ok {
		_spec.SetField(orderbilling.FieldType, field.TypeInt, value)
		_node.Type = value
	}
	if value, ok := obc.mutation.StartTimePrice(); ok {
		_spec.SetField(orderbilling.FieldStartTimePrice, field.TypeInt, value)
		_node.StartTimePrice = value
	}
	if value, ok := obc.mutation.StartTimeUnit(); ok {
		_spec.SetField(orderbilling.FieldStartTimeUnit, field.TypeInt, value)
		_node.StartTimeUnit = value
	}
	if value, ok := obc.mutation.NormalTimePrice(); ok {
		_spec.SetField(orderbilling.FieldNormalTimePrice, field.TypeInt, value)
		_node.NormalTimePrice = value
	}
	if value, ok := obc.mutation.NormalTimeUnit(); ok {
		_spec.SetField(orderbilling.FieldNormalTimeUnit, field.TypeInt, value)
		_node.NormalTimeUnit = value
	}
	if value, ok := obc.mutation.CumulativeSecond(); ok {
		_spec.SetField(orderbilling.FieldCumulativeSecond, field.TypeFloat64, value)
		_node.CumulativeSecond = value
	}
	if value, ok := obc.mutation.CumulativeMeter(); ok {
		_spec.SetField(orderbilling.FieldCumulativeMeter, field.TypeFloat64, value)
		_node.CumulativeMeter = value
	}
	if value, ok := obc.mutation.TicketCount(); ok {
		_spec.SetField(orderbilling.FieldTicketCount, field.TypeInt, value)
		_node.TicketCount = value
	}
	if value, ok := obc.mutation.CumulativeStop(); ok {
		_spec.SetField(orderbilling.FieldCumulativeStop, field.TypeInt, value)
		_node.CumulativeStop = value
	}
	if value, ok := obc.mutation.StartStopPrice(); ok {
		_spec.SetField(orderbilling.FieldStartStopPrice, field.TypeInt, value)
		_node.StartStopPrice = value
	}
	if value, ok := obc.mutation.StartStopUnit(); ok {
		_spec.SetField(orderbilling.FieldStartStopUnit, field.TypeInt, value)
		_node.StartStopUnit = value
	}
	if value, ok := obc.mutation.NormalStopPrice(); ok {
		_spec.SetField(orderbilling.FieldNormalStopPrice, field.TypeInt, value)
		_node.NormalStopPrice = value
	}
	if value, ok := obc.mutation.NormalStopUnit(); ok {
		_spec.SetField(orderbilling.FieldNormalStopUnit, field.TypeInt, value)
		_node.NormalStopUnit = value
	}
	if value, ok := obc.mutation.CouponID(); ok {
		_spec.SetField(orderbilling.FieldCouponID, field.TypeInt, value)
		_node.CouponID = value
	}
	if value, ok := obc.mutation.CouponLimitAmount(); ok {
		_spec.SetField(orderbilling.FieldCouponLimitAmount, field.TypeInt, value)
		_node.CouponLimitAmount = value
	}
	if value, ok := obc.mutation.CouponDeductionAmount(); ok {
		_spec.SetField(orderbilling.FieldCouponDeductionAmount, field.TypeInt, value)
		_node.CouponDeductionAmount = value
	}
	if value, ok := obc.mutation.CouponStartTime(); ok {
		_spec.SetField(orderbilling.FieldCouponStartTime, field.TypeTime, value)
		_node.CouponStartTime = value
	}
	if value, ok := obc.mutation.CouponEndTime(); ok {
		_spec.SetField(orderbilling.FieldCouponEndTime, field.TypeTime, value)
		_node.CouponEndTime = value
	}
	if value, ok := obc.mutation.CappedAmount(); ok {
		_spec.SetField(orderbilling.FieldCappedAmount, field.TypeInt, value)
		_node.CappedAmount = value
	}
	if value, ok := obc.mutation.State(); ok {
		_spec.SetField(orderbilling.FieldState, field.TypeInt, value)
		_node.State = value
	}
	if value, ok := obc.mutation.StartTime(); ok {
		_spec.SetField(orderbilling.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := obc.mutation.FinishTime(); ok {
		_spec.SetField(orderbilling.FieldFinishTime, field.TypeTime, value)
		_node.FinishTime = value
	}
	if value, ok := obc.mutation.CreateTime(); ok {
		_spec.SetField(orderbilling.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := obc.mutation.UpdateTime(); ok {
		_spec.SetField(orderbilling.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if nodes := obc.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   orderbilling.OrderTable,
			Columns: []string{orderbilling.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OrderBillingCreateBulk is the builder for creating many OrderBilling entities in bulk.
type OrderBillingCreateBulk struct {
	config
	err      error
	builders []*OrderBillingCreate
}

// Save creates the OrderBilling entities in the database.
func (obcb *OrderBillingCreateBulk) Save(ctx context.Context) ([]*OrderBilling, error) {
	if obcb.err != nil {
		return nil, obcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(obcb.builders))
	nodes := make([]*OrderBilling, len(obcb.builders))
	mutators := make([]Mutator, len(obcb.builders))
	for i := range obcb.builders {
		func(i int, root context.Context) {
			builder := obcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderBillingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, obcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, obcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, obcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (obcb *OrderBillingCreateBulk) SaveX(ctx context.Context) []*OrderBilling {
	v, err := obcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (obcb *OrderBillingCreateBulk) Exec(ctx context.Context) error {
	_, err := obcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (obcb *OrderBillingCreateBulk) ExecX(ctx context.Context) {
	if err := obcb.Exec(ctx); err != nil {
		panic(err)
	}
}
