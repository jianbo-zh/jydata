// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/carsmodels"
	"github.com/jianbo-zh/jydata/database/ent/carsmodelsgroups"
	"github.com/jianbo-zh/jydata/database/ent/carsmodelsgroupsparams"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarsModelsGroupsParamsUpdate is the builder for updating CarsModelsGroupsParams entities.
type CarsModelsGroupsParamsUpdate struct {
	config
	hooks    []Hook
	mutation *CarsModelsGroupsParamsMutation
}

// Where appends a list predicates to the CarsModelsGroupsParamsUpdate builder.
func (cmgpu *CarsModelsGroupsParamsUpdate) Where(ps ...predicate.CarsModelsGroupsParams) *CarsModelsGroupsParamsUpdate {
	cmgpu.mutation.Where(ps...)
	return cmgpu
}

// SetModelID sets the "model_id" field.
func (cmgpu *CarsModelsGroupsParamsUpdate) SetModelID(i int) *CarsModelsGroupsParamsUpdate {
	cmgpu.mutation.SetModelID(i)
	return cmgpu
}

// SetNillableModelID sets the "model_id" field if the given value is not nil.
func (cmgpu *CarsModelsGroupsParamsUpdate) SetNillableModelID(i *int) *CarsModelsGroupsParamsUpdate {
	if i != nil {
		cmgpu.SetModelID(*i)
	}
	return cmgpu
}

// SetGroupID sets the "group_id" field.
func (cmgpu *CarsModelsGroupsParamsUpdate) SetGroupID(i int) *CarsModelsGroupsParamsUpdate {
	cmgpu.mutation.SetGroupID(i)
	return cmgpu
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (cmgpu *CarsModelsGroupsParamsUpdate) SetNillableGroupID(i *int) *CarsModelsGroupsParamsUpdate {
	if i != nil {
		cmgpu.SetGroupID(*i)
	}
	return cmgpu
}

// SetParamRemark sets the "param_remark" field.
func (cmgpu *CarsModelsGroupsParamsUpdate) SetParamRemark(s string) *CarsModelsGroupsParamsUpdate {
	cmgpu.mutation.SetParamRemark(s)
	return cmgpu
}

// SetNillableParamRemark sets the "param_remark" field if the given value is not nil.
func (cmgpu *CarsModelsGroupsParamsUpdate) SetNillableParamRemark(s *string) *CarsModelsGroupsParamsUpdate {
	if s != nil {
		cmgpu.SetParamRemark(*s)
	}
	return cmgpu
}

// SetParamName sets the "param_name" field.
func (cmgpu *CarsModelsGroupsParamsUpdate) SetParamName(s string) *CarsModelsGroupsParamsUpdate {
	cmgpu.mutation.SetParamName(s)
	return cmgpu
}

// SetNillableParamName sets the "param_name" field if the given value is not nil.
func (cmgpu *CarsModelsGroupsParamsUpdate) SetNillableParamName(s *string) *CarsModelsGroupsParamsUpdate {
	if s != nil {
		cmgpu.SetParamName(*s)
	}
	return cmgpu
}

// SetParamType sets the "param_type" field.
func (cmgpu *CarsModelsGroupsParamsUpdate) SetParamType(ct carsmodelsgroupsparams.ParamType) *CarsModelsGroupsParamsUpdate {
	cmgpu.mutation.SetParamType(ct)
	return cmgpu
}

// SetNillableParamType sets the "param_type" field if the given value is not nil.
func (cmgpu *CarsModelsGroupsParamsUpdate) SetNillableParamType(ct *carsmodelsgroupsparams.ParamType) *CarsModelsGroupsParamsUpdate {
	if ct != nil {
		cmgpu.SetParamType(*ct)
	}
	return cmgpu
}

// SetValueRange sets the "value_range" field.
func (cmgpu *CarsModelsGroupsParamsUpdate) SetValueRange(s string) *CarsModelsGroupsParamsUpdate {
	cmgpu.mutation.SetValueRange(s)
	return cmgpu
}

// SetNillableValueRange sets the "value_range" field if the given value is not nil.
func (cmgpu *CarsModelsGroupsParamsUpdate) SetNillableValueRange(s *string) *CarsModelsGroupsParamsUpdate {
	if s != nil {
		cmgpu.SetValueRange(*s)
	}
	return cmgpu
}

// SetStatus sets the "status" field.
func (cmgpu *CarsModelsGroupsParamsUpdate) SetStatus(i int) *CarsModelsGroupsParamsUpdate {
	cmgpu.mutation.ResetStatus()
	cmgpu.mutation.SetStatus(i)
	return cmgpu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cmgpu *CarsModelsGroupsParamsUpdate) SetNillableStatus(i *int) *CarsModelsGroupsParamsUpdate {
	if i != nil {
		cmgpu.SetStatus(*i)
	}
	return cmgpu
}

// AddStatus adds i to the "status" field.
func (cmgpu *CarsModelsGroupsParamsUpdate) AddStatus(i int) *CarsModelsGroupsParamsUpdate {
	cmgpu.mutation.AddStatus(i)
	return cmgpu
}

// SetIsDeleted sets the "is_deleted" field.
func (cmgpu *CarsModelsGroupsParamsUpdate) SetIsDeleted(i int) *CarsModelsGroupsParamsUpdate {
	cmgpu.mutation.ResetIsDeleted()
	cmgpu.mutation.SetIsDeleted(i)
	return cmgpu
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (cmgpu *CarsModelsGroupsParamsUpdate) SetNillableIsDeleted(i *int) *CarsModelsGroupsParamsUpdate {
	if i != nil {
		cmgpu.SetIsDeleted(*i)
	}
	return cmgpu
}

// AddIsDeleted adds i to the "is_deleted" field.
func (cmgpu *CarsModelsGroupsParamsUpdate) AddIsDeleted(i int) *CarsModelsGroupsParamsUpdate {
	cmgpu.mutation.AddIsDeleted(i)
	return cmgpu
}

// SetUpdateTime sets the "update_time" field.
func (cmgpu *CarsModelsGroupsParamsUpdate) SetUpdateTime(t time.Time) *CarsModelsGroupsParamsUpdate {
	cmgpu.mutation.SetUpdateTime(t)
	return cmgpu
}

// SetModel sets the "model" edge to the CarsModels entity.
func (cmgpu *CarsModelsGroupsParamsUpdate) SetModel(c *CarsModels) *CarsModelsGroupsParamsUpdate {
	return cmgpu.SetModelID(c.ID)
}

// SetGroup sets the "group" edge to the CarsModelsGroups entity.
func (cmgpu *CarsModelsGroupsParamsUpdate) SetGroup(c *CarsModelsGroups) *CarsModelsGroupsParamsUpdate {
	return cmgpu.SetGroupID(c.ID)
}

// Mutation returns the CarsModelsGroupsParamsMutation object of the builder.
func (cmgpu *CarsModelsGroupsParamsUpdate) Mutation() *CarsModelsGroupsParamsMutation {
	return cmgpu.mutation
}

// ClearModel clears the "model" edge to the CarsModels entity.
func (cmgpu *CarsModelsGroupsParamsUpdate) ClearModel() *CarsModelsGroupsParamsUpdate {
	cmgpu.mutation.ClearModel()
	return cmgpu
}

// ClearGroup clears the "group" edge to the CarsModelsGroups entity.
func (cmgpu *CarsModelsGroupsParamsUpdate) ClearGroup() *CarsModelsGroupsParamsUpdate {
	cmgpu.mutation.ClearGroup()
	return cmgpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cmgpu *CarsModelsGroupsParamsUpdate) Save(ctx context.Context) (int, error) {
	cmgpu.defaults()
	return withHooks(ctx, cmgpu.sqlSave, cmgpu.mutation, cmgpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cmgpu *CarsModelsGroupsParamsUpdate) SaveX(ctx context.Context) int {
	affected, err := cmgpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cmgpu *CarsModelsGroupsParamsUpdate) Exec(ctx context.Context) error {
	_, err := cmgpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmgpu *CarsModelsGroupsParamsUpdate) ExecX(ctx context.Context) {
	if err := cmgpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cmgpu *CarsModelsGroupsParamsUpdate) defaults() {
	if _, ok := cmgpu.mutation.UpdateTime(); !ok {
		v := carsmodelsgroupsparams.UpdateDefaultUpdateTime()
		cmgpu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmgpu *CarsModelsGroupsParamsUpdate) check() error {
	if v, ok := cmgpu.mutation.ParamType(); ok {
		if err := carsmodelsgroupsparams.ParamTypeValidator(v); err != nil {
			return &ValidationError{Name: "param_type", err: fmt.Errorf(`ent: validator failed for field "CarsModelsGroupsParams.param_type": %w`, err)}
		}
	}
	if cmgpu.mutation.ModelCleared() && len(cmgpu.mutation.ModelIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarsModelsGroupsParams.model"`)
	}
	if cmgpu.mutation.GroupCleared() && len(cmgpu.mutation.GroupIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarsModelsGroupsParams.group"`)
	}
	return nil
}

func (cmgpu *CarsModelsGroupsParamsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cmgpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(carsmodelsgroupsparams.Table, carsmodelsgroupsparams.Columns, sqlgraph.NewFieldSpec(carsmodelsgroupsparams.FieldID, field.TypeInt))
	if ps := cmgpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmgpu.mutation.ParamRemark(); ok {
		_spec.SetField(carsmodelsgroupsparams.FieldParamRemark, field.TypeString, value)
	}
	if value, ok := cmgpu.mutation.ParamName(); ok {
		_spec.SetField(carsmodelsgroupsparams.FieldParamName, field.TypeString, value)
	}
	if value, ok := cmgpu.mutation.ParamType(); ok {
		_spec.SetField(carsmodelsgroupsparams.FieldParamType, field.TypeEnum, value)
	}
	if value, ok := cmgpu.mutation.ValueRange(); ok {
		_spec.SetField(carsmodelsgroupsparams.FieldValueRange, field.TypeString, value)
	}
	if value, ok := cmgpu.mutation.Status(); ok {
		_spec.SetField(carsmodelsgroupsparams.FieldStatus, field.TypeInt, value)
	}
	if value, ok := cmgpu.mutation.AddedStatus(); ok {
		_spec.AddField(carsmodelsgroupsparams.FieldStatus, field.TypeInt, value)
	}
	if value, ok := cmgpu.mutation.IsDeleted(); ok {
		_spec.SetField(carsmodelsgroupsparams.FieldIsDeleted, field.TypeInt, value)
	}
	if value, ok := cmgpu.mutation.AddedIsDeleted(); ok {
		_spec.AddField(carsmodelsgroupsparams.FieldIsDeleted, field.TypeInt, value)
	}
	if value, ok := cmgpu.mutation.UpdateTime(); ok {
		_spec.SetField(carsmodelsgroupsparams.FieldUpdateTime, field.TypeTime, value)
	}
	if cmgpu.mutation.ModelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carsmodelsgroupsparams.ModelTable,
			Columns: []string{carsmodelsgroupsparams.ModelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsmodels.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmgpu.mutation.ModelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carsmodelsgroupsparams.ModelTable,
			Columns: []string{carsmodelsgroupsparams.ModelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsmodels.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cmgpu.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carsmodelsgroupsparams.GroupTable,
			Columns: []string{carsmodelsgroupsparams.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsmodelsgroups.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmgpu.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carsmodelsgroupsparams.GroupTable,
			Columns: []string{carsmodelsgroupsparams.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsmodelsgroups.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cmgpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carsmodelsgroupsparams.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cmgpu.mutation.done = true
	return n, nil
}

// CarsModelsGroupsParamsUpdateOne is the builder for updating a single CarsModelsGroupsParams entity.
type CarsModelsGroupsParamsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CarsModelsGroupsParamsMutation
}

// SetModelID sets the "model_id" field.
func (cmgpuo *CarsModelsGroupsParamsUpdateOne) SetModelID(i int) *CarsModelsGroupsParamsUpdateOne {
	cmgpuo.mutation.SetModelID(i)
	return cmgpuo
}

// SetNillableModelID sets the "model_id" field if the given value is not nil.
func (cmgpuo *CarsModelsGroupsParamsUpdateOne) SetNillableModelID(i *int) *CarsModelsGroupsParamsUpdateOne {
	if i != nil {
		cmgpuo.SetModelID(*i)
	}
	return cmgpuo
}

// SetGroupID sets the "group_id" field.
func (cmgpuo *CarsModelsGroupsParamsUpdateOne) SetGroupID(i int) *CarsModelsGroupsParamsUpdateOne {
	cmgpuo.mutation.SetGroupID(i)
	return cmgpuo
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (cmgpuo *CarsModelsGroupsParamsUpdateOne) SetNillableGroupID(i *int) *CarsModelsGroupsParamsUpdateOne {
	if i != nil {
		cmgpuo.SetGroupID(*i)
	}
	return cmgpuo
}

// SetParamRemark sets the "param_remark" field.
func (cmgpuo *CarsModelsGroupsParamsUpdateOne) SetParamRemark(s string) *CarsModelsGroupsParamsUpdateOne {
	cmgpuo.mutation.SetParamRemark(s)
	return cmgpuo
}

// SetNillableParamRemark sets the "param_remark" field if the given value is not nil.
func (cmgpuo *CarsModelsGroupsParamsUpdateOne) SetNillableParamRemark(s *string) *CarsModelsGroupsParamsUpdateOne {
	if s != nil {
		cmgpuo.SetParamRemark(*s)
	}
	return cmgpuo
}

// SetParamName sets the "param_name" field.
func (cmgpuo *CarsModelsGroupsParamsUpdateOne) SetParamName(s string) *CarsModelsGroupsParamsUpdateOne {
	cmgpuo.mutation.SetParamName(s)
	return cmgpuo
}

// SetNillableParamName sets the "param_name" field if the given value is not nil.
func (cmgpuo *CarsModelsGroupsParamsUpdateOne) SetNillableParamName(s *string) *CarsModelsGroupsParamsUpdateOne {
	if s != nil {
		cmgpuo.SetParamName(*s)
	}
	return cmgpuo
}

// SetParamType sets the "param_type" field.
func (cmgpuo *CarsModelsGroupsParamsUpdateOne) SetParamType(ct carsmodelsgroupsparams.ParamType) *CarsModelsGroupsParamsUpdateOne {
	cmgpuo.mutation.SetParamType(ct)
	return cmgpuo
}

// SetNillableParamType sets the "param_type" field if the given value is not nil.
func (cmgpuo *CarsModelsGroupsParamsUpdateOne) SetNillableParamType(ct *carsmodelsgroupsparams.ParamType) *CarsModelsGroupsParamsUpdateOne {
	if ct != nil {
		cmgpuo.SetParamType(*ct)
	}
	return cmgpuo
}

// SetValueRange sets the "value_range" field.
func (cmgpuo *CarsModelsGroupsParamsUpdateOne) SetValueRange(s string) *CarsModelsGroupsParamsUpdateOne {
	cmgpuo.mutation.SetValueRange(s)
	return cmgpuo
}

// SetNillableValueRange sets the "value_range" field if the given value is not nil.
func (cmgpuo *CarsModelsGroupsParamsUpdateOne) SetNillableValueRange(s *string) *CarsModelsGroupsParamsUpdateOne {
	if s != nil {
		cmgpuo.SetValueRange(*s)
	}
	return cmgpuo
}

// SetStatus sets the "status" field.
func (cmgpuo *CarsModelsGroupsParamsUpdateOne) SetStatus(i int) *CarsModelsGroupsParamsUpdateOne {
	cmgpuo.mutation.ResetStatus()
	cmgpuo.mutation.SetStatus(i)
	return cmgpuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cmgpuo *CarsModelsGroupsParamsUpdateOne) SetNillableStatus(i *int) *CarsModelsGroupsParamsUpdateOne {
	if i != nil {
		cmgpuo.SetStatus(*i)
	}
	return cmgpuo
}

// AddStatus adds i to the "status" field.
func (cmgpuo *CarsModelsGroupsParamsUpdateOne) AddStatus(i int) *CarsModelsGroupsParamsUpdateOne {
	cmgpuo.mutation.AddStatus(i)
	return cmgpuo
}

// SetIsDeleted sets the "is_deleted" field.
func (cmgpuo *CarsModelsGroupsParamsUpdateOne) SetIsDeleted(i int) *CarsModelsGroupsParamsUpdateOne {
	cmgpuo.mutation.ResetIsDeleted()
	cmgpuo.mutation.SetIsDeleted(i)
	return cmgpuo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (cmgpuo *CarsModelsGroupsParamsUpdateOne) SetNillableIsDeleted(i *int) *CarsModelsGroupsParamsUpdateOne {
	if i != nil {
		cmgpuo.SetIsDeleted(*i)
	}
	return cmgpuo
}

// AddIsDeleted adds i to the "is_deleted" field.
func (cmgpuo *CarsModelsGroupsParamsUpdateOne) AddIsDeleted(i int) *CarsModelsGroupsParamsUpdateOne {
	cmgpuo.mutation.AddIsDeleted(i)
	return cmgpuo
}

// SetUpdateTime sets the "update_time" field.
func (cmgpuo *CarsModelsGroupsParamsUpdateOne) SetUpdateTime(t time.Time) *CarsModelsGroupsParamsUpdateOne {
	cmgpuo.mutation.SetUpdateTime(t)
	return cmgpuo
}

// SetModel sets the "model" edge to the CarsModels entity.
func (cmgpuo *CarsModelsGroupsParamsUpdateOne) SetModel(c *CarsModels) *CarsModelsGroupsParamsUpdateOne {
	return cmgpuo.SetModelID(c.ID)
}

// SetGroup sets the "group" edge to the CarsModelsGroups entity.
func (cmgpuo *CarsModelsGroupsParamsUpdateOne) SetGroup(c *CarsModelsGroups) *CarsModelsGroupsParamsUpdateOne {
	return cmgpuo.SetGroupID(c.ID)
}

// Mutation returns the CarsModelsGroupsParamsMutation object of the builder.
func (cmgpuo *CarsModelsGroupsParamsUpdateOne) Mutation() *CarsModelsGroupsParamsMutation {
	return cmgpuo.mutation
}

// ClearModel clears the "model" edge to the CarsModels entity.
func (cmgpuo *CarsModelsGroupsParamsUpdateOne) ClearModel() *CarsModelsGroupsParamsUpdateOne {
	cmgpuo.mutation.ClearModel()
	return cmgpuo
}

// ClearGroup clears the "group" edge to the CarsModelsGroups entity.
func (cmgpuo *CarsModelsGroupsParamsUpdateOne) ClearGroup() *CarsModelsGroupsParamsUpdateOne {
	cmgpuo.mutation.ClearGroup()
	return cmgpuo
}

// Where appends a list predicates to the CarsModelsGroupsParamsUpdate builder.
func (cmgpuo *CarsModelsGroupsParamsUpdateOne) Where(ps ...predicate.CarsModelsGroupsParams) *CarsModelsGroupsParamsUpdateOne {
	cmgpuo.mutation.Where(ps...)
	return cmgpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cmgpuo *CarsModelsGroupsParamsUpdateOne) Select(field string, fields ...string) *CarsModelsGroupsParamsUpdateOne {
	cmgpuo.fields = append([]string{field}, fields...)
	return cmgpuo
}

// Save executes the query and returns the updated CarsModelsGroupsParams entity.
func (cmgpuo *CarsModelsGroupsParamsUpdateOne) Save(ctx context.Context) (*CarsModelsGroupsParams, error) {
	cmgpuo.defaults()
	return withHooks(ctx, cmgpuo.sqlSave, cmgpuo.mutation, cmgpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cmgpuo *CarsModelsGroupsParamsUpdateOne) SaveX(ctx context.Context) *CarsModelsGroupsParams {
	node, err := cmgpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cmgpuo *CarsModelsGroupsParamsUpdateOne) Exec(ctx context.Context) error {
	_, err := cmgpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmgpuo *CarsModelsGroupsParamsUpdateOne) ExecX(ctx context.Context) {
	if err := cmgpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cmgpuo *CarsModelsGroupsParamsUpdateOne) defaults() {
	if _, ok := cmgpuo.mutation.UpdateTime(); !ok {
		v := carsmodelsgroupsparams.UpdateDefaultUpdateTime()
		cmgpuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmgpuo *CarsModelsGroupsParamsUpdateOne) check() error {
	if v, ok := cmgpuo.mutation.ParamType(); ok {
		if err := carsmodelsgroupsparams.ParamTypeValidator(v); err != nil {
			return &ValidationError{Name: "param_type", err: fmt.Errorf(`ent: validator failed for field "CarsModelsGroupsParams.param_type": %w`, err)}
		}
	}
	if cmgpuo.mutation.ModelCleared() && len(cmgpuo.mutation.ModelIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarsModelsGroupsParams.model"`)
	}
	if cmgpuo.mutation.GroupCleared() && len(cmgpuo.mutation.GroupIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarsModelsGroupsParams.group"`)
	}
	return nil
}

func (cmgpuo *CarsModelsGroupsParamsUpdateOne) sqlSave(ctx context.Context) (_node *CarsModelsGroupsParams, err error) {
	if err := cmgpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(carsmodelsgroupsparams.Table, carsmodelsgroupsparams.Columns, sqlgraph.NewFieldSpec(carsmodelsgroupsparams.FieldID, field.TypeInt))
	id, ok := cmgpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CarsModelsGroupsParams.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cmgpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carsmodelsgroupsparams.FieldID)
		for _, f := range fields {
			if !carsmodelsgroupsparams.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != carsmodelsgroupsparams.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cmgpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmgpuo.mutation.ParamRemark(); ok {
		_spec.SetField(carsmodelsgroupsparams.FieldParamRemark, field.TypeString, value)
	}
	if value, ok := cmgpuo.mutation.ParamName(); ok {
		_spec.SetField(carsmodelsgroupsparams.FieldParamName, field.TypeString, value)
	}
	if value, ok := cmgpuo.mutation.ParamType(); ok {
		_spec.SetField(carsmodelsgroupsparams.FieldParamType, field.TypeEnum, value)
	}
	if value, ok := cmgpuo.mutation.ValueRange(); ok {
		_spec.SetField(carsmodelsgroupsparams.FieldValueRange, field.TypeString, value)
	}
	if value, ok := cmgpuo.mutation.Status(); ok {
		_spec.SetField(carsmodelsgroupsparams.FieldStatus, field.TypeInt, value)
	}
	if value, ok := cmgpuo.mutation.AddedStatus(); ok {
		_spec.AddField(carsmodelsgroupsparams.FieldStatus, field.TypeInt, value)
	}
	if value, ok := cmgpuo.mutation.IsDeleted(); ok {
		_spec.SetField(carsmodelsgroupsparams.FieldIsDeleted, field.TypeInt, value)
	}
	if value, ok := cmgpuo.mutation.AddedIsDeleted(); ok {
		_spec.AddField(carsmodelsgroupsparams.FieldIsDeleted, field.TypeInt, value)
	}
	if value, ok := cmgpuo.mutation.UpdateTime(); ok {
		_spec.SetField(carsmodelsgroupsparams.FieldUpdateTime, field.TypeTime, value)
	}
	if cmgpuo.mutation.ModelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carsmodelsgroupsparams.ModelTable,
			Columns: []string{carsmodelsgroupsparams.ModelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsmodels.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmgpuo.mutation.ModelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carsmodelsgroupsparams.ModelTable,
			Columns: []string{carsmodelsgroupsparams.ModelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsmodels.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cmgpuo.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carsmodelsgroupsparams.GroupTable,
			Columns: []string{carsmodelsgroupsparams.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsmodelsgroups.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmgpuo.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carsmodelsgroupsparams.GroupTable,
			Columns: []string{carsmodelsgroupsparams.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsmodelsgroups.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CarsModelsGroupsParams{config: cmgpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cmgpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carsmodelsgroupsparams.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cmgpuo.mutation.done = true
	return _node, nil
}
