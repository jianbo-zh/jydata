// Code generated by ent, DO NOT EDIT.

package carsmodels

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the carsmodels type in the database.
	Label = "cars_models"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldModelName holds the string denoting the model_name field in the database.
	FieldModelName = "model_name"
	// FieldModelRemark holds the string denoting the model_remark field in the database.
	FieldModelRemark = "model_remark"
	// FieldGroupCount holds the string denoting the group_count field in the database.
	FieldGroupCount = "group_count"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCarIncr holds the string denoting the car_incr field in the database.
	FieldCarIncr = "car_incr"
	// FieldIsDeleted holds the string denoting the is_deleted field in the database.
	FieldIsDeleted = "is_deleted"
	// FieldVehicleDescFileID holds the string denoting the vehicle_desc_file_id field in the database.
	FieldVehicleDescFileID = "vehicle_desc_file_id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// EdgeCars holds the string denoting the cars edge name in mutations.
	EdgeCars = "cars"
	// EdgeGroups holds the string denoting the groups edge name in mutations.
	EdgeGroups = "groups"
	// EdgeParams holds the string denoting the params edge name in mutations.
	EdgeParams = "params"
	// EdgeConfigFiles holds the string denoting the config_files edge name in mutations.
	EdgeConfigFiles = "config_files"
	// Table holds the table name of the carsmodels in the database.
	Table = "cars_models"
	// CarsTable is the table that holds the cars relation/edge.
	CarsTable = "cars"
	// CarsInverseTable is the table name for the Car entity.
	// It exists in this package in order to avoid circular dependency with the "car" package.
	CarsInverseTable = "cars"
	// CarsColumn is the table column denoting the cars relation/edge.
	CarsColumn = "model_id"
	// GroupsTable is the table that holds the groups relation/edge.
	GroupsTable = "cars_models_groups"
	// GroupsInverseTable is the table name for the CarsModelsGroups entity.
	// It exists in this package in order to avoid circular dependency with the "carsmodelsgroups" package.
	GroupsInverseTable = "cars_models_groups"
	// GroupsColumn is the table column denoting the groups relation/edge.
	GroupsColumn = "model_id"
	// ParamsTable is the table that holds the params relation/edge.
	ParamsTable = "cars_models_groups_params"
	// ParamsInverseTable is the table name for the CarsModelsGroupsParams entity.
	// It exists in this package in order to avoid circular dependency with the "carsmodelsgroupsparams" package.
	ParamsInverseTable = "cars_models_groups_params"
	// ParamsColumn is the table column denoting the params relation/edge.
	ParamsColumn = "model_id"
	// ConfigFilesTable is the table that holds the config_files relation/edge.
	ConfigFilesTable = "car_configs"
	// ConfigFilesInverseTable is the table name for the CarConfig entity.
	// It exists in this package in order to avoid circular dependency with the "carconfig" package.
	ConfigFilesInverseTable = "car_configs"
	// ConfigFilesColumn is the table column denoting the config_files relation/edge.
	ConfigFilesColumn = "model_id"
)

// Columns holds all SQL columns for carsmodels fields.
var Columns = []string{
	FieldID,
	FieldModelName,
	FieldModelRemark,
	FieldGroupCount,
	FieldStatus,
	FieldCarIncr,
	FieldIsDeleted,
	FieldVehicleDescFileID,
	FieldCreateTime,
	FieldUpdateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultModelRemark holds the default value on creation for the "model_remark" field.
	DefaultModelRemark string
	// DefaultGroupCount holds the default value on creation for the "group_count" field.
	DefaultGroupCount int
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int
	// DefaultCarIncr holds the default value on creation for the "car_incr" field.
	DefaultCarIncr int
	// DefaultIsDeleted holds the default value on creation for the "is_deleted" field.
	DefaultIsDeleted int
	// DefaultVehicleDescFileID holds the default value on creation for the "vehicle_desc_file_id" field.
	DefaultVehicleDescFileID int
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)

// OrderOption defines the ordering options for the CarsModels queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByModelName orders the results by the model_name field.
func ByModelName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModelName, opts...).ToFunc()
}

// ByModelRemark orders the results by the model_remark field.
func ByModelRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModelRemark, opts...).ToFunc()
}

// ByGroupCount orders the results by the group_count field.
func ByGroupCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGroupCount, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCarIncr orders the results by the car_incr field.
func ByCarIncr(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCarIncr, opts...).ToFunc()
}

// ByIsDeleted orders the results by the is_deleted field.
func ByIsDeleted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDeleted, opts...).ToFunc()
}

// ByVehicleDescFileID orders the results by the vehicle_desc_file_id field.
func ByVehicleDescFileID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVehicleDescFileID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByCarsCount orders the results by cars count.
func ByCarsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCarsStep(), opts...)
	}
}

// ByCars orders the results by cars terms.
func ByCars(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGroupsCount orders the results by groups count.
func ByGroupsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGroupsStep(), opts...)
	}
}

// ByGroups orders the results by groups terms.
func ByGroups(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGroupsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByParamsCount orders the results by params count.
func ByParamsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newParamsStep(), opts...)
	}
}

// ByParams orders the results by params terms.
func ByParams(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParamsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByConfigFilesCount orders the results by config_files count.
func ByConfigFilesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newConfigFilesStep(), opts...)
	}
}

// ByConfigFiles orders the results by config_files terms.
func ByConfigFiles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newConfigFilesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCarsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CarsTable, CarsColumn),
	)
}
func newGroupsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GroupsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, GroupsTable, GroupsColumn),
	)
}
func newParamsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ParamsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ParamsTable, ParamsColumn),
	)
}
func newConfigFilesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ConfigFilesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ConfigFilesTable, ConfigFilesColumn),
	)
}
