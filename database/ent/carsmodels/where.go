// Code generated by ent, DO NOT EDIT.

package carsmodels

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldLTE(FieldID, id))
}

// ModelName applies equality check predicate on the "model_name" field. It's identical to ModelNameEQ.
func ModelName(v string) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldEQ(FieldModelName, v))
}

// ModelRemark applies equality check predicate on the "model_remark" field. It's identical to ModelRemarkEQ.
func ModelRemark(v string) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldEQ(FieldModelRemark, v))
}

// GroupCount applies equality check predicate on the "group_count" field. It's identical to GroupCountEQ.
func GroupCount(v int) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldEQ(FieldGroupCount, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldEQ(FieldStatus, v))
}

// CarIncr applies equality check predicate on the "car_incr" field. It's identical to CarIncrEQ.
func CarIncr(v int) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldEQ(FieldCarIncr, v))
}

// IsDeleted applies equality check predicate on the "is_deleted" field. It's identical to IsDeletedEQ.
func IsDeleted(v int) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldEQ(FieldIsDeleted, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldEQ(FieldUpdateTime, v))
}

// ModelNameEQ applies the EQ predicate on the "model_name" field.
func ModelNameEQ(v string) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldEQ(FieldModelName, v))
}

// ModelNameNEQ applies the NEQ predicate on the "model_name" field.
func ModelNameNEQ(v string) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldNEQ(FieldModelName, v))
}

// ModelNameIn applies the In predicate on the "model_name" field.
func ModelNameIn(vs ...string) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldIn(FieldModelName, vs...))
}

// ModelNameNotIn applies the NotIn predicate on the "model_name" field.
func ModelNameNotIn(vs ...string) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldNotIn(FieldModelName, vs...))
}

// ModelNameGT applies the GT predicate on the "model_name" field.
func ModelNameGT(v string) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldGT(FieldModelName, v))
}

// ModelNameGTE applies the GTE predicate on the "model_name" field.
func ModelNameGTE(v string) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldGTE(FieldModelName, v))
}

// ModelNameLT applies the LT predicate on the "model_name" field.
func ModelNameLT(v string) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldLT(FieldModelName, v))
}

// ModelNameLTE applies the LTE predicate on the "model_name" field.
func ModelNameLTE(v string) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldLTE(FieldModelName, v))
}

// ModelNameContains applies the Contains predicate on the "model_name" field.
func ModelNameContains(v string) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldContains(FieldModelName, v))
}

// ModelNameHasPrefix applies the HasPrefix predicate on the "model_name" field.
func ModelNameHasPrefix(v string) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldHasPrefix(FieldModelName, v))
}

// ModelNameHasSuffix applies the HasSuffix predicate on the "model_name" field.
func ModelNameHasSuffix(v string) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldHasSuffix(FieldModelName, v))
}

// ModelNameEqualFold applies the EqualFold predicate on the "model_name" field.
func ModelNameEqualFold(v string) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldEqualFold(FieldModelName, v))
}

// ModelNameContainsFold applies the ContainsFold predicate on the "model_name" field.
func ModelNameContainsFold(v string) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldContainsFold(FieldModelName, v))
}

// ModelRemarkEQ applies the EQ predicate on the "model_remark" field.
func ModelRemarkEQ(v string) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldEQ(FieldModelRemark, v))
}

// ModelRemarkNEQ applies the NEQ predicate on the "model_remark" field.
func ModelRemarkNEQ(v string) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldNEQ(FieldModelRemark, v))
}

// ModelRemarkIn applies the In predicate on the "model_remark" field.
func ModelRemarkIn(vs ...string) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldIn(FieldModelRemark, vs...))
}

// ModelRemarkNotIn applies the NotIn predicate on the "model_remark" field.
func ModelRemarkNotIn(vs ...string) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldNotIn(FieldModelRemark, vs...))
}

// ModelRemarkGT applies the GT predicate on the "model_remark" field.
func ModelRemarkGT(v string) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldGT(FieldModelRemark, v))
}

// ModelRemarkGTE applies the GTE predicate on the "model_remark" field.
func ModelRemarkGTE(v string) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldGTE(FieldModelRemark, v))
}

// ModelRemarkLT applies the LT predicate on the "model_remark" field.
func ModelRemarkLT(v string) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldLT(FieldModelRemark, v))
}

// ModelRemarkLTE applies the LTE predicate on the "model_remark" field.
func ModelRemarkLTE(v string) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldLTE(FieldModelRemark, v))
}

// ModelRemarkContains applies the Contains predicate on the "model_remark" field.
func ModelRemarkContains(v string) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldContains(FieldModelRemark, v))
}

// ModelRemarkHasPrefix applies the HasPrefix predicate on the "model_remark" field.
func ModelRemarkHasPrefix(v string) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldHasPrefix(FieldModelRemark, v))
}

// ModelRemarkHasSuffix applies the HasSuffix predicate on the "model_remark" field.
func ModelRemarkHasSuffix(v string) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldHasSuffix(FieldModelRemark, v))
}

// ModelRemarkEqualFold applies the EqualFold predicate on the "model_remark" field.
func ModelRemarkEqualFold(v string) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldEqualFold(FieldModelRemark, v))
}

// ModelRemarkContainsFold applies the ContainsFold predicate on the "model_remark" field.
func ModelRemarkContainsFold(v string) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldContainsFold(FieldModelRemark, v))
}

// GroupCountEQ applies the EQ predicate on the "group_count" field.
func GroupCountEQ(v int) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldEQ(FieldGroupCount, v))
}

// GroupCountNEQ applies the NEQ predicate on the "group_count" field.
func GroupCountNEQ(v int) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldNEQ(FieldGroupCount, v))
}

// GroupCountIn applies the In predicate on the "group_count" field.
func GroupCountIn(vs ...int) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldIn(FieldGroupCount, vs...))
}

// GroupCountNotIn applies the NotIn predicate on the "group_count" field.
func GroupCountNotIn(vs ...int) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldNotIn(FieldGroupCount, vs...))
}

// GroupCountGT applies the GT predicate on the "group_count" field.
func GroupCountGT(v int) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldGT(FieldGroupCount, v))
}

// GroupCountGTE applies the GTE predicate on the "group_count" field.
func GroupCountGTE(v int) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldGTE(FieldGroupCount, v))
}

// GroupCountLT applies the LT predicate on the "group_count" field.
func GroupCountLT(v int) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldLT(FieldGroupCount, v))
}

// GroupCountLTE applies the LTE predicate on the "group_count" field.
func GroupCountLTE(v int) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldLTE(FieldGroupCount, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldLTE(FieldStatus, v))
}

// CarIncrEQ applies the EQ predicate on the "car_incr" field.
func CarIncrEQ(v int) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldEQ(FieldCarIncr, v))
}

// CarIncrNEQ applies the NEQ predicate on the "car_incr" field.
func CarIncrNEQ(v int) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldNEQ(FieldCarIncr, v))
}

// CarIncrIn applies the In predicate on the "car_incr" field.
func CarIncrIn(vs ...int) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldIn(FieldCarIncr, vs...))
}

// CarIncrNotIn applies the NotIn predicate on the "car_incr" field.
func CarIncrNotIn(vs ...int) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldNotIn(FieldCarIncr, vs...))
}

// CarIncrGT applies the GT predicate on the "car_incr" field.
func CarIncrGT(v int) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldGT(FieldCarIncr, v))
}

// CarIncrGTE applies the GTE predicate on the "car_incr" field.
func CarIncrGTE(v int) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldGTE(FieldCarIncr, v))
}

// CarIncrLT applies the LT predicate on the "car_incr" field.
func CarIncrLT(v int) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldLT(FieldCarIncr, v))
}

// CarIncrLTE applies the LTE predicate on the "car_incr" field.
func CarIncrLTE(v int) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldLTE(FieldCarIncr, v))
}

// IsDeletedEQ applies the EQ predicate on the "is_deleted" field.
func IsDeletedEQ(v int) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldEQ(FieldIsDeleted, v))
}

// IsDeletedNEQ applies the NEQ predicate on the "is_deleted" field.
func IsDeletedNEQ(v int) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldNEQ(FieldIsDeleted, v))
}

// IsDeletedIn applies the In predicate on the "is_deleted" field.
func IsDeletedIn(vs ...int) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldIn(FieldIsDeleted, vs...))
}

// IsDeletedNotIn applies the NotIn predicate on the "is_deleted" field.
func IsDeletedNotIn(vs ...int) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldNotIn(FieldIsDeleted, vs...))
}

// IsDeletedGT applies the GT predicate on the "is_deleted" field.
func IsDeletedGT(v int) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldGT(FieldIsDeleted, v))
}

// IsDeletedGTE applies the GTE predicate on the "is_deleted" field.
func IsDeletedGTE(v int) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldGTE(FieldIsDeleted, v))
}

// IsDeletedLT applies the LT predicate on the "is_deleted" field.
func IsDeletedLT(v int) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldLT(FieldIsDeleted, v))
}

// IsDeletedLTE applies the LTE predicate on the "is_deleted" field.
func IsDeletedLTE(v int) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldLTE(FieldIsDeleted, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.CarsModels {
	return predicate.CarsModels(sql.FieldLTE(FieldUpdateTime, v))
}

// HasCars applies the HasEdge predicate on the "cars" edge.
func HasCars() predicate.CarsModels {
	return predicate.CarsModels(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CarsTable, CarsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarsWith applies the HasEdge predicate on the "cars" edge with a given conditions (other predicates).
func HasCarsWith(preds ...predicate.Car) predicate.CarsModels {
	return predicate.CarsModels(func(s *sql.Selector) {
		step := newCarsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGroups applies the HasEdge predicate on the "groups" edge.
func HasGroups() predicate.CarsModels {
	return predicate.CarsModels(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, GroupsTable, GroupsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGroupsWith applies the HasEdge predicate on the "groups" edge with a given conditions (other predicates).
func HasGroupsWith(preds ...predicate.CarsModelsGroups) predicate.CarsModels {
	return predicate.CarsModels(func(s *sql.Selector) {
		step := newGroupsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParams applies the HasEdge predicate on the "params" edge.
func HasParams() predicate.CarsModels {
	return predicate.CarsModels(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ParamsTable, ParamsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParamsWith applies the HasEdge predicate on the "params" edge with a given conditions (other predicates).
func HasParamsWith(preds ...predicate.CarsModelsGroupsParams) predicate.CarsModels {
	return predicate.CarsModels(func(s *sql.Selector) {
		step := newParamsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasConfigFiles applies the HasEdge predicate on the "config_files" edge.
func HasConfigFiles() predicate.CarsModels {
	return predicate.CarsModels(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ConfigFilesTable, ConfigFilesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasConfigFilesWith applies the HasEdge predicate on the "config_files" edge with a given conditions (other predicates).
func HasConfigFilesWith(preds ...predicate.CarConfig) predicate.CarsModels {
	return predicate.CarsModels(func(s *sql.Selector) {
		step := newConfigFilesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CarsModels) predicate.CarsModels {
	return predicate.CarsModels(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CarsModels) predicate.CarsModels {
	return predicate.CarsModels(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CarsModels) predicate.CarsModels {
	return predicate.CarsModels(sql.NotPredicates(p))
}
