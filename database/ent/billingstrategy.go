// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jianbo-zh/jydata/database/ent/billingstrategy"
	"github.com/jianbo-zh/jydata/database/ent/scenicarea"
)

// BillingStrategy is the model entity for the BillingStrategy schema.
type BillingStrategy struct {
	config `json:"-"`
	// ID of the ent.
	// ID
	ID int `json:"id,omitempty"`
	// 策略名称
	Name string `json:"name,omitempty"`
	// 景区ID
	ScenicAreaID int `json:"scenic_area_id,omitempty"`
	// 型号ID
	ModelID int `json:"model_id,omitempty"`
	// 主要模式（0-按时间 1-按里程）
	MainMode int `json:"main_mode,omitempty"`
	// 起步价(按时)收费价格(单位：分)
	StartTimePrice int `json:"start_time_price,omitempty"`
	// 起步价(按时)计量单位（单位：秒）
	StartTimeUnit int `json:"start_time_unit,omitempty"`
	// 时间收费价格(单位：分)
	NormalTimePrice int `json:"normal_time_price,omitempty"`
	// 时间计量单位（单位：秒）
	NormalTimeUnit int `json:"normal_time_unit,omitempty"`
	// 起步价(按里程)收费价格(单位：分)
	StartMileagePrice int `json:"start_mileage_price,omitempty"`
	// 起步价(按里程)计量单位（单位：米）
	StartMileageUnit int `json:"start_mileage_unit,omitempty"`
	// 里程收费价格(单位：分)
	NormalMileagePrice int `json:"normal_mileage_price,omitempty"`
	// 里程计量单位（单位：米）
	NormalMileageUnit int `json:"normal_mileage_unit,omitempty"`
	// 封顶价格（单位：分）
	CappedAmount int `json:"capped_amount,omitempty"`
	// 押金金额（单位：分）
	DepositAmount int `json:"deposit_amount,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BillingStrategyQuery when eager-loading is set.
	Edges        BillingStrategyEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BillingStrategyEdges holds the relations/edges for other nodes in the graph.
type BillingStrategyEdges struct {
	// BackgroundScenicArea holds the value of the background_scenic_area edge.
	BackgroundScenicArea *ScenicArea `json:"background_scenic_area,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BackgroundScenicAreaOrErr returns the BackgroundScenicArea value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillingStrategyEdges) BackgroundScenicAreaOrErr() (*ScenicArea, error) {
	if e.BackgroundScenicArea != nil {
		return e.BackgroundScenicArea, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: scenicarea.Label}
	}
	return nil, &NotLoadedError{edge: "background_scenic_area"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BillingStrategy) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case billingstrategy.FieldID, billingstrategy.FieldScenicAreaID, billingstrategy.FieldModelID, billingstrategy.FieldMainMode, billingstrategy.FieldStartTimePrice, billingstrategy.FieldStartTimeUnit, billingstrategy.FieldNormalTimePrice, billingstrategy.FieldNormalTimeUnit, billingstrategy.FieldStartMileagePrice, billingstrategy.FieldStartMileageUnit, billingstrategy.FieldNormalMileagePrice, billingstrategy.FieldNormalMileageUnit, billingstrategy.FieldCappedAmount, billingstrategy.FieldDepositAmount:
			values[i] = new(sql.NullInt64)
		case billingstrategy.FieldName:
			values[i] = new(sql.NullString)
		case billingstrategy.FieldCreateTime, billingstrategy.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BillingStrategy fields.
func (bs *BillingStrategy) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case billingstrategy.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bs.ID = int(value.Int64)
		case billingstrategy.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				bs.Name = value.String
			}
		case billingstrategy.FieldScenicAreaID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field scenic_area_id", values[i])
			} else if value.Valid {
				bs.ScenicAreaID = int(value.Int64)
			}
		case billingstrategy.FieldModelID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field model_id", values[i])
			} else if value.Valid {
				bs.ModelID = int(value.Int64)
			}
		case billingstrategy.FieldMainMode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field main_mode", values[i])
			} else if value.Valid {
				bs.MainMode = int(value.Int64)
			}
		case billingstrategy.FieldStartTimePrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field start_time_price", values[i])
			} else if value.Valid {
				bs.StartTimePrice = int(value.Int64)
			}
		case billingstrategy.FieldStartTimeUnit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field start_time_unit", values[i])
			} else if value.Valid {
				bs.StartTimeUnit = int(value.Int64)
			}
		case billingstrategy.FieldNormalTimePrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field normal_time_price", values[i])
			} else if value.Valid {
				bs.NormalTimePrice = int(value.Int64)
			}
		case billingstrategy.FieldNormalTimeUnit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field normal_time_unit", values[i])
			} else if value.Valid {
				bs.NormalTimeUnit = int(value.Int64)
			}
		case billingstrategy.FieldStartMileagePrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field start_mileage_price", values[i])
			} else if value.Valid {
				bs.StartMileagePrice = int(value.Int64)
			}
		case billingstrategy.FieldStartMileageUnit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field start_mileage_unit", values[i])
			} else if value.Valid {
				bs.StartMileageUnit = int(value.Int64)
			}
		case billingstrategy.FieldNormalMileagePrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field normal_mileage_price", values[i])
			} else if value.Valid {
				bs.NormalMileagePrice = int(value.Int64)
			}
		case billingstrategy.FieldNormalMileageUnit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field normal_mileage_unit", values[i])
			} else if value.Valid {
				bs.NormalMileageUnit = int(value.Int64)
			}
		case billingstrategy.FieldCappedAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field capped_amount", values[i])
			} else if value.Valid {
				bs.CappedAmount = int(value.Int64)
			}
		case billingstrategy.FieldDepositAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deposit_amount", values[i])
			} else if value.Valid {
				bs.DepositAmount = int(value.Int64)
			}
		case billingstrategy.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				bs.CreateTime = value.Time
			}
		case billingstrategy.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				bs.UpdateTime = value.Time
			}
		default:
			bs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BillingStrategy.
// This includes values selected through modifiers, order, etc.
func (bs *BillingStrategy) Value(name string) (ent.Value, error) {
	return bs.selectValues.Get(name)
}

// QueryBackgroundScenicArea queries the "background_scenic_area" edge of the BillingStrategy entity.
func (bs *BillingStrategy) QueryBackgroundScenicArea() *ScenicAreaQuery {
	return NewBillingStrategyClient(bs.config).QueryBackgroundScenicArea(bs)
}

// Update returns a builder for updating this BillingStrategy.
// Note that you need to call BillingStrategy.Unwrap() before calling this method if this BillingStrategy
// was returned from a transaction, and the transaction was committed or rolled back.
func (bs *BillingStrategy) Update() *BillingStrategyUpdateOne {
	return NewBillingStrategyClient(bs.config).UpdateOne(bs)
}

// Unwrap unwraps the BillingStrategy entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bs *BillingStrategy) Unwrap() *BillingStrategy {
	_tx, ok := bs.config.driver.(*txDriver)
	if !ok {
		panic("ent: BillingStrategy is not a transactional entity")
	}
	bs.config.driver = _tx.drv
	return bs
}

// String implements the fmt.Stringer.
func (bs *BillingStrategy) String() string {
	var builder strings.Builder
	builder.WriteString("BillingStrategy(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bs.ID))
	builder.WriteString("name=")
	builder.WriteString(bs.Name)
	builder.WriteString(", ")
	builder.WriteString("scenic_area_id=")
	builder.WriteString(fmt.Sprintf("%v", bs.ScenicAreaID))
	builder.WriteString(", ")
	builder.WriteString("model_id=")
	builder.WriteString(fmt.Sprintf("%v", bs.ModelID))
	builder.WriteString(", ")
	builder.WriteString("main_mode=")
	builder.WriteString(fmt.Sprintf("%v", bs.MainMode))
	builder.WriteString(", ")
	builder.WriteString("start_time_price=")
	builder.WriteString(fmt.Sprintf("%v", bs.StartTimePrice))
	builder.WriteString(", ")
	builder.WriteString("start_time_unit=")
	builder.WriteString(fmt.Sprintf("%v", bs.StartTimeUnit))
	builder.WriteString(", ")
	builder.WriteString("normal_time_price=")
	builder.WriteString(fmt.Sprintf("%v", bs.NormalTimePrice))
	builder.WriteString(", ")
	builder.WriteString("normal_time_unit=")
	builder.WriteString(fmt.Sprintf("%v", bs.NormalTimeUnit))
	builder.WriteString(", ")
	builder.WriteString("start_mileage_price=")
	builder.WriteString(fmt.Sprintf("%v", bs.StartMileagePrice))
	builder.WriteString(", ")
	builder.WriteString("start_mileage_unit=")
	builder.WriteString(fmt.Sprintf("%v", bs.StartMileageUnit))
	builder.WriteString(", ")
	builder.WriteString("normal_mileage_price=")
	builder.WriteString(fmt.Sprintf("%v", bs.NormalMileagePrice))
	builder.WriteString(", ")
	builder.WriteString("normal_mileage_unit=")
	builder.WriteString(fmt.Sprintf("%v", bs.NormalMileageUnit))
	builder.WriteString(", ")
	builder.WriteString("capped_amount=")
	builder.WriteString(fmt.Sprintf("%v", bs.CappedAmount))
	builder.WriteString(", ")
	builder.WriteString("deposit_amount=")
	builder.WriteString(fmt.Sprintf("%v", bs.DepositAmount))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(bs.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(bs.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// BillingStrategies is a parsable slice of BillingStrategy.
type BillingStrategies []*BillingStrategy
