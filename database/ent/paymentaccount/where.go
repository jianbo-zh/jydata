// Code generated by ent, DO NOT EDIT.

package paymentaccount

import (
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldLTE(FieldID, id))
}

// MchName applies equality check predicate on the "mch_name" field. It's identical to MchNameEQ.
func MchName(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldEQ(FieldMchName, v))
}

// MchID applies equality check predicate on the "mch_id" field. It's identical to MchIDEQ.
func MchID(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldEQ(FieldMchID, v))
}

// MchCertSn applies equality check predicate on the "mch_cert_sn" field. It's identical to MchCertSnEQ.
func MchCertSn(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldEQ(FieldMchCertSn, v))
}

// MchApiv3Key applies equality check predicate on the "mch_apiv3_key" field. It's identical to MchApiv3KeyEQ.
func MchApiv3Key(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldEQ(FieldMchApiv3Key, v))
}

// MchPrivateKey applies equality check predicate on the "mch_private_key" field. It's identical to MchPrivateKeyEQ.
func MchPrivateKey(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldEQ(FieldMchPrivateKey, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldEQ(FieldUpdateTime, v))
}

// MchNameEQ applies the EQ predicate on the "mch_name" field.
func MchNameEQ(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldEQ(FieldMchName, v))
}

// MchNameNEQ applies the NEQ predicate on the "mch_name" field.
func MchNameNEQ(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldNEQ(FieldMchName, v))
}

// MchNameIn applies the In predicate on the "mch_name" field.
func MchNameIn(vs ...string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldIn(FieldMchName, vs...))
}

// MchNameNotIn applies the NotIn predicate on the "mch_name" field.
func MchNameNotIn(vs ...string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldNotIn(FieldMchName, vs...))
}

// MchNameGT applies the GT predicate on the "mch_name" field.
func MchNameGT(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldGT(FieldMchName, v))
}

// MchNameGTE applies the GTE predicate on the "mch_name" field.
func MchNameGTE(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldGTE(FieldMchName, v))
}

// MchNameLT applies the LT predicate on the "mch_name" field.
func MchNameLT(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldLT(FieldMchName, v))
}

// MchNameLTE applies the LTE predicate on the "mch_name" field.
func MchNameLTE(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldLTE(FieldMchName, v))
}

// MchNameContains applies the Contains predicate on the "mch_name" field.
func MchNameContains(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldContains(FieldMchName, v))
}

// MchNameHasPrefix applies the HasPrefix predicate on the "mch_name" field.
func MchNameHasPrefix(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldHasPrefix(FieldMchName, v))
}

// MchNameHasSuffix applies the HasSuffix predicate on the "mch_name" field.
func MchNameHasSuffix(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldHasSuffix(FieldMchName, v))
}

// MchNameEqualFold applies the EqualFold predicate on the "mch_name" field.
func MchNameEqualFold(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldEqualFold(FieldMchName, v))
}

// MchNameContainsFold applies the ContainsFold predicate on the "mch_name" field.
func MchNameContainsFold(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldContainsFold(FieldMchName, v))
}

// MchIDEQ applies the EQ predicate on the "mch_id" field.
func MchIDEQ(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldEQ(FieldMchID, v))
}

// MchIDNEQ applies the NEQ predicate on the "mch_id" field.
func MchIDNEQ(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldNEQ(FieldMchID, v))
}

// MchIDIn applies the In predicate on the "mch_id" field.
func MchIDIn(vs ...string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldIn(FieldMchID, vs...))
}

// MchIDNotIn applies the NotIn predicate on the "mch_id" field.
func MchIDNotIn(vs ...string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldNotIn(FieldMchID, vs...))
}

// MchIDGT applies the GT predicate on the "mch_id" field.
func MchIDGT(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldGT(FieldMchID, v))
}

// MchIDGTE applies the GTE predicate on the "mch_id" field.
func MchIDGTE(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldGTE(FieldMchID, v))
}

// MchIDLT applies the LT predicate on the "mch_id" field.
func MchIDLT(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldLT(FieldMchID, v))
}

// MchIDLTE applies the LTE predicate on the "mch_id" field.
func MchIDLTE(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldLTE(FieldMchID, v))
}

// MchIDContains applies the Contains predicate on the "mch_id" field.
func MchIDContains(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldContains(FieldMchID, v))
}

// MchIDHasPrefix applies the HasPrefix predicate on the "mch_id" field.
func MchIDHasPrefix(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldHasPrefix(FieldMchID, v))
}

// MchIDHasSuffix applies the HasSuffix predicate on the "mch_id" field.
func MchIDHasSuffix(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldHasSuffix(FieldMchID, v))
}

// MchIDEqualFold applies the EqualFold predicate on the "mch_id" field.
func MchIDEqualFold(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldEqualFold(FieldMchID, v))
}

// MchIDContainsFold applies the ContainsFold predicate on the "mch_id" field.
func MchIDContainsFold(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldContainsFold(FieldMchID, v))
}

// MchCertSnEQ applies the EQ predicate on the "mch_cert_sn" field.
func MchCertSnEQ(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldEQ(FieldMchCertSn, v))
}

// MchCertSnNEQ applies the NEQ predicate on the "mch_cert_sn" field.
func MchCertSnNEQ(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldNEQ(FieldMchCertSn, v))
}

// MchCertSnIn applies the In predicate on the "mch_cert_sn" field.
func MchCertSnIn(vs ...string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldIn(FieldMchCertSn, vs...))
}

// MchCertSnNotIn applies the NotIn predicate on the "mch_cert_sn" field.
func MchCertSnNotIn(vs ...string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldNotIn(FieldMchCertSn, vs...))
}

// MchCertSnGT applies the GT predicate on the "mch_cert_sn" field.
func MchCertSnGT(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldGT(FieldMchCertSn, v))
}

// MchCertSnGTE applies the GTE predicate on the "mch_cert_sn" field.
func MchCertSnGTE(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldGTE(FieldMchCertSn, v))
}

// MchCertSnLT applies the LT predicate on the "mch_cert_sn" field.
func MchCertSnLT(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldLT(FieldMchCertSn, v))
}

// MchCertSnLTE applies the LTE predicate on the "mch_cert_sn" field.
func MchCertSnLTE(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldLTE(FieldMchCertSn, v))
}

// MchCertSnContains applies the Contains predicate on the "mch_cert_sn" field.
func MchCertSnContains(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldContains(FieldMchCertSn, v))
}

// MchCertSnHasPrefix applies the HasPrefix predicate on the "mch_cert_sn" field.
func MchCertSnHasPrefix(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldHasPrefix(FieldMchCertSn, v))
}

// MchCertSnHasSuffix applies the HasSuffix predicate on the "mch_cert_sn" field.
func MchCertSnHasSuffix(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldHasSuffix(FieldMchCertSn, v))
}

// MchCertSnEqualFold applies the EqualFold predicate on the "mch_cert_sn" field.
func MchCertSnEqualFold(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldEqualFold(FieldMchCertSn, v))
}

// MchCertSnContainsFold applies the ContainsFold predicate on the "mch_cert_sn" field.
func MchCertSnContainsFold(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldContainsFold(FieldMchCertSn, v))
}

// MchApiv3KeyEQ applies the EQ predicate on the "mch_apiv3_key" field.
func MchApiv3KeyEQ(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldEQ(FieldMchApiv3Key, v))
}

// MchApiv3KeyNEQ applies the NEQ predicate on the "mch_apiv3_key" field.
func MchApiv3KeyNEQ(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldNEQ(FieldMchApiv3Key, v))
}

// MchApiv3KeyIn applies the In predicate on the "mch_apiv3_key" field.
func MchApiv3KeyIn(vs ...string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldIn(FieldMchApiv3Key, vs...))
}

// MchApiv3KeyNotIn applies the NotIn predicate on the "mch_apiv3_key" field.
func MchApiv3KeyNotIn(vs ...string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldNotIn(FieldMchApiv3Key, vs...))
}

// MchApiv3KeyGT applies the GT predicate on the "mch_apiv3_key" field.
func MchApiv3KeyGT(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldGT(FieldMchApiv3Key, v))
}

// MchApiv3KeyGTE applies the GTE predicate on the "mch_apiv3_key" field.
func MchApiv3KeyGTE(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldGTE(FieldMchApiv3Key, v))
}

// MchApiv3KeyLT applies the LT predicate on the "mch_apiv3_key" field.
func MchApiv3KeyLT(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldLT(FieldMchApiv3Key, v))
}

// MchApiv3KeyLTE applies the LTE predicate on the "mch_apiv3_key" field.
func MchApiv3KeyLTE(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldLTE(FieldMchApiv3Key, v))
}

// MchApiv3KeyContains applies the Contains predicate on the "mch_apiv3_key" field.
func MchApiv3KeyContains(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldContains(FieldMchApiv3Key, v))
}

// MchApiv3KeyHasPrefix applies the HasPrefix predicate on the "mch_apiv3_key" field.
func MchApiv3KeyHasPrefix(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldHasPrefix(FieldMchApiv3Key, v))
}

// MchApiv3KeyHasSuffix applies the HasSuffix predicate on the "mch_apiv3_key" field.
func MchApiv3KeyHasSuffix(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldHasSuffix(FieldMchApiv3Key, v))
}

// MchApiv3KeyEqualFold applies the EqualFold predicate on the "mch_apiv3_key" field.
func MchApiv3KeyEqualFold(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldEqualFold(FieldMchApiv3Key, v))
}

// MchApiv3KeyContainsFold applies the ContainsFold predicate on the "mch_apiv3_key" field.
func MchApiv3KeyContainsFold(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldContainsFold(FieldMchApiv3Key, v))
}

// MchPrivateKeyEQ applies the EQ predicate on the "mch_private_key" field.
func MchPrivateKeyEQ(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldEQ(FieldMchPrivateKey, v))
}

// MchPrivateKeyNEQ applies the NEQ predicate on the "mch_private_key" field.
func MchPrivateKeyNEQ(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldNEQ(FieldMchPrivateKey, v))
}

// MchPrivateKeyIn applies the In predicate on the "mch_private_key" field.
func MchPrivateKeyIn(vs ...string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldIn(FieldMchPrivateKey, vs...))
}

// MchPrivateKeyNotIn applies the NotIn predicate on the "mch_private_key" field.
func MchPrivateKeyNotIn(vs ...string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldNotIn(FieldMchPrivateKey, vs...))
}

// MchPrivateKeyGT applies the GT predicate on the "mch_private_key" field.
func MchPrivateKeyGT(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldGT(FieldMchPrivateKey, v))
}

// MchPrivateKeyGTE applies the GTE predicate on the "mch_private_key" field.
func MchPrivateKeyGTE(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldGTE(FieldMchPrivateKey, v))
}

// MchPrivateKeyLT applies the LT predicate on the "mch_private_key" field.
func MchPrivateKeyLT(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldLT(FieldMchPrivateKey, v))
}

// MchPrivateKeyLTE applies the LTE predicate on the "mch_private_key" field.
func MchPrivateKeyLTE(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldLTE(FieldMchPrivateKey, v))
}

// MchPrivateKeyContains applies the Contains predicate on the "mch_private_key" field.
func MchPrivateKeyContains(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldContains(FieldMchPrivateKey, v))
}

// MchPrivateKeyHasPrefix applies the HasPrefix predicate on the "mch_private_key" field.
func MchPrivateKeyHasPrefix(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldHasPrefix(FieldMchPrivateKey, v))
}

// MchPrivateKeyHasSuffix applies the HasSuffix predicate on the "mch_private_key" field.
func MchPrivateKeyHasSuffix(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldHasSuffix(FieldMchPrivateKey, v))
}

// MchPrivateKeyEqualFold applies the EqualFold predicate on the "mch_private_key" field.
func MchPrivateKeyEqualFold(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldEqualFold(FieldMchPrivateKey, v))
}

// MchPrivateKeyContainsFold applies the ContainsFold predicate on the "mch_private_key" field.
func MchPrivateKeyContainsFold(v string) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldContainsFold(FieldMchPrivateKey, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.FieldLTE(FieldUpdateTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PaymentAccount) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PaymentAccount) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PaymentAccount) predicate.PaymentAccount {
	return predicate.PaymentAccount(sql.NotPredicates(p))
}
