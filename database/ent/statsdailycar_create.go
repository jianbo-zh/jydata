// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/statsdailycar"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StatsDailyCarCreate is the builder for creating a StatsDailyCar entity.
type StatsDailyCarCreate struct {
	config
	mutation *StatsDailyCarMutation
	hooks    []Hook
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (sdcc *StatsDailyCarCreate) SetScenicAreaID(i int) *StatsDailyCarCreate {
	sdcc.mutation.SetScenicAreaID(i)
	return sdcc
}

// SetCarID sets the "car_id" field.
func (sdcc *StatsDailyCarCreate) SetCarID(i int) *StatsDailyCarCreate {
	sdcc.mutation.SetCarID(i)
	return sdcc
}

// SetY sets the "y" field.
func (sdcc *StatsDailyCarCreate) SetY(i int) *StatsDailyCarCreate {
	sdcc.mutation.SetY(i)
	return sdcc
}

// SetM sets the "m" field.
func (sdcc *StatsDailyCarCreate) SetM(i int) *StatsDailyCarCreate {
	sdcc.mutation.SetM(i)
	return sdcc
}

// SetD sets the "d" field.
func (sdcc *StatsDailyCarCreate) SetD(i int) *StatsDailyCarCreate {
	sdcc.mutation.SetD(i)
	return sdcc
}

// SetWeek sets the "week" field.
func (sdcc *StatsDailyCarCreate) SetWeek(i int) *StatsDailyCarCreate {
	sdcc.mutation.SetWeek(i)
	return sdcc
}

// SetWeekday sets the "weekday" field.
func (sdcc *StatsDailyCarCreate) SetWeekday(i int) *StatsDailyCarCreate {
	sdcc.mutation.SetWeekday(i)
	return sdcc
}

// SetPeriod sets the "period" field.
func (sdcc *StatsDailyCarCreate) SetPeriod(i int) *StatsDailyCarCreate {
	sdcc.mutation.SetPeriod(i)
	return sdcc
}

// SetOrderCountCreate sets the "order_count_create" field.
func (sdcc *StatsDailyCarCreate) SetOrderCountCreate(i int) *StatsDailyCarCreate {
	sdcc.mutation.SetOrderCountCreate(i)
	return sdcc
}

// SetNillableOrderCountCreate sets the "order_count_create" field if the given value is not nil.
func (sdcc *StatsDailyCarCreate) SetNillableOrderCountCreate(i *int) *StatsDailyCarCreate {
	if i != nil {
		sdcc.SetOrderCountCreate(*i)
	}
	return sdcc
}

// SetOrderCountFinish sets the "order_count_finish" field.
func (sdcc *StatsDailyCarCreate) SetOrderCountFinish(i int) *StatsDailyCarCreate {
	sdcc.mutation.SetOrderCountFinish(i)
	return sdcc
}

// SetNillableOrderCountFinish sets the "order_count_finish" field if the given value is not nil.
func (sdcc *StatsDailyCarCreate) SetNillableOrderCountFinish(i *int) *StatsDailyCarCreate {
	if i != nil {
		sdcc.SetOrderCountFinish(*i)
	}
	return sdcc
}

// SetOrderCountCancel sets the "order_count_cancel" field.
func (sdcc *StatsDailyCarCreate) SetOrderCountCancel(i int) *StatsDailyCarCreate {
	sdcc.mutation.SetOrderCountCancel(i)
	return sdcc
}

// SetNillableOrderCountCancel sets the "order_count_cancel" field if the given value is not nil.
func (sdcc *StatsDailyCarCreate) SetNillableOrderCountCancel(i *int) *StatsDailyCarCreate {
	if i != nil {
		sdcc.SetOrderCountCancel(*i)
	}
	return sdcc
}

// SetOrderAmount sets the "order_amount" field.
func (sdcc *StatsDailyCarCreate) SetOrderAmount(i int) *StatsDailyCarCreate {
	sdcc.mutation.SetOrderAmount(i)
	return sdcc
}

// SetNillableOrderAmount sets the "order_amount" field if the given value is not nil.
func (sdcc *StatsDailyCarCreate) SetNillableOrderAmount(i *int) *StatsDailyCarCreate {
	if i != nil {
		sdcc.SetOrderAmount(*i)
	}
	return sdcc
}

// SetOrderDuration sets the "order_duration" field.
func (sdcc *StatsDailyCarCreate) SetOrderDuration(i int) *StatsDailyCarCreate {
	sdcc.mutation.SetOrderDuration(i)
	return sdcc
}

// SetNillableOrderDuration sets the "order_duration" field if the given value is not nil.
func (sdcc *StatsDailyCarCreate) SetNillableOrderDuration(i *int) *StatsDailyCarCreate {
	if i != nil {
		sdcc.SetOrderDuration(*i)
	}
	return sdcc
}

// SetOrderMileage sets the "order_mileage" field.
func (sdcc *StatsDailyCarCreate) SetOrderMileage(i int) *StatsDailyCarCreate {
	sdcc.mutation.SetOrderMileage(i)
	return sdcc
}

// SetNillableOrderMileage sets the "order_mileage" field if the given value is not nil.
func (sdcc *StatsDailyCarCreate) SetNillableOrderMileage(i *int) *StatsDailyCarCreate {
	if i != nil {
		sdcc.SetOrderMileage(*i)
	}
	return sdcc
}

// SetOrderScore sets the "order_score" field.
func (sdcc *StatsDailyCarCreate) SetOrderScore(i int) *StatsDailyCarCreate {
	sdcc.mutation.SetOrderScore(i)
	return sdcc
}

// SetNillableOrderScore sets the "order_score" field if the given value is not nil.
func (sdcc *StatsDailyCarCreate) SetNillableOrderScore(i *int) *StatsDailyCarCreate {
	if i != nil {
		sdcc.SetOrderScore(*i)
	}
	return sdcc
}

// SetOperationLockDuration sets the "operation_lock_duration" field.
func (sdcc *StatsDailyCarCreate) SetOperationLockDuration(f float32) *StatsDailyCarCreate {
	sdcc.mutation.SetOperationLockDuration(f)
	return sdcc
}

// SetNillableOperationLockDuration sets the "operation_lock_duration" field if the given value is not nil.
func (sdcc *StatsDailyCarCreate) SetNillableOperationLockDuration(f *float32) *StatsDailyCarCreate {
	if f != nil {
		sdcc.SetOperationLockDuration(*f)
	}
	return sdcc
}

// SetOperationManualDuration sets the "operation_manual_duration" field.
func (sdcc *StatsDailyCarCreate) SetOperationManualDuration(f float32) *StatsDailyCarCreate {
	sdcc.mutation.SetOperationManualDuration(f)
	return sdcc
}

// SetNillableOperationManualDuration sets the "operation_manual_duration" field if the given value is not nil.
func (sdcc *StatsDailyCarCreate) SetNillableOperationManualDuration(f *float32) *StatsDailyCarCreate {
	if f != nil {
		sdcc.SetOperationManualDuration(*f)
	}
	return sdcc
}

// SetOperationAutoDuration sets the "operation_auto_duration" field.
func (sdcc *StatsDailyCarCreate) SetOperationAutoDuration(f float32) *StatsDailyCarCreate {
	sdcc.mutation.SetOperationAutoDuration(f)
	return sdcc
}

// SetNillableOperationAutoDuration sets the "operation_auto_duration" field if the given value is not nil.
func (sdcc *StatsDailyCarCreate) SetNillableOperationAutoDuration(f *float32) *StatsDailyCarCreate {
	if f != nil {
		sdcc.SetOperationAutoDuration(*f)
	}
	return sdcc
}

// SetOperationFaultDuration sets the "operation_fault_duration" field.
func (sdcc *StatsDailyCarCreate) SetOperationFaultDuration(f float32) *StatsDailyCarCreate {
	sdcc.mutation.SetOperationFaultDuration(f)
	return sdcc
}

// SetNillableOperationFaultDuration sets the "operation_fault_duration" field if the given value is not nil.
func (sdcc *StatsDailyCarCreate) SetNillableOperationFaultDuration(f *float32) *StatsDailyCarCreate {
	if f != nil {
		sdcc.SetOperationFaultDuration(*f)
	}
	return sdcc
}

// SetOperationLockTimes sets the "operation_lock_times" field.
func (sdcc *StatsDailyCarCreate) SetOperationLockTimes(u uint32) *StatsDailyCarCreate {
	sdcc.mutation.SetOperationLockTimes(u)
	return sdcc
}

// SetNillableOperationLockTimes sets the "operation_lock_times" field if the given value is not nil.
func (sdcc *StatsDailyCarCreate) SetNillableOperationLockTimes(u *uint32) *StatsDailyCarCreate {
	if u != nil {
		sdcc.SetOperationLockTimes(*u)
	}
	return sdcc
}

// SetOperationManualTimes sets the "operation_manual_times" field.
func (sdcc *StatsDailyCarCreate) SetOperationManualTimes(u uint32) *StatsDailyCarCreate {
	sdcc.mutation.SetOperationManualTimes(u)
	return sdcc
}

// SetNillableOperationManualTimes sets the "operation_manual_times" field if the given value is not nil.
func (sdcc *StatsDailyCarCreate) SetNillableOperationManualTimes(u *uint32) *StatsDailyCarCreate {
	if u != nil {
		sdcc.SetOperationManualTimes(*u)
	}
	return sdcc
}

// SetOperationAutoTimes sets the "operation_auto_times" field.
func (sdcc *StatsDailyCarCreate) SetOperationAutoTimes(u uint32) *StatsDailyCarCreate {
	sdcc.mutation.SetOperationAutoTimes(u)
	return sdcc
}

// SetNillableOperationAutoTimes sets the "operation_auto_times" field if the given value is not nil.
func (sdcc *StatsDailyCarCreate) SetNillableOperationAutoTimes(u *uint32) *StatsDailyCarCreate {
	if u != nil {
		sdcc.SetOperationAutoTimes(*u)
	}
	return sdcc
}

// SetOperationFaultTimes sets the "operation_fault_times" field.
func (sdcc *StatsDailyCarCreate) SetOperationFaultTimes(u uint32) *StatsDailyCarCreate {
	sdcc.mutation.SetOperationFaultTimes(u)
	return sdcc
}

// SetNillableOperationFaultTimes sets the "operation_fault_times" field if the given value is not nil.
func (sdcc *StatsDailyCarCreate) SetNillableOperationFaultTimes(u *uint32) *StatsDailyCarCreate {
	if u != nil {
		sdcc.SetOperationFaultTimes(*u)
	}
	return sdcc
}

// SetOperationManualMileage sets the "operation_manual_mileage" field.
func (sdcc *StatsDailyCarCreate) SetOperationManualMileage(f float32) *StatsDailyCarCreate {
	sdcc.mutation.SetOperationManualMileage(f)
	return sdcc
}

// SetNillableOperationManualMileage sets the "operation_manual_mileage" field if the given value is not nil.
func (sdcc *StatsDailyCarCreate) SetNillableOperationManualMileage(f *float32) *StatsDailyCarCreate {
	if f != nil {
		sdcc.SetOperationManualMileage(*f)
	}
	return sdcc
}

// SetOperationAutoMileage sets the "operation_auto_mileage" field.
func (sdcc *StatsDailyCarCreate) SetOperationAutoMileage(f float32) *StatsDailyCarCreate {
	sdcc.mutation.SetOperationAutoMileage(f)
	return sdcc
}

// SetNillableOperationAutoMileage sets the "operation_auto_mileage" field if the given value is not nil.
func (sdcc *StatsDailyCarCreate) SetNillableOperationAutoMileage(f *float32) *StatsDailyCarCreate {
	if f != nil {
		sdcc.SetOperationAutoMileage(*f)
	}
	return sdcc
}

// SetMaintainLockDuration sets the "maintain_lock_duration" field.
func (sdcc *StatsDailyCarCreate) SetMaintainLockDuration(f float32) *StatsDailyCarCreate {
	sdcc.mutation.SetMaintainLockDuration(f)
	return sdcc
}

// SetNillableMaintainLockDuration sets the "maintain_lock_duration" field if the given value is not nil.
func (sdcc *StatsDailyCarCreate) SetNillableMaintainLockDuration(f *float32) *StatsDailyCarCreate {
	if f != nil {
		sdcc.SetMaintainLockDuration(*f)
	}
	return sdcc
}

// SetMaintainManualDuration sets the "maintain_manual_duration" field.
func (sdcc *StatsDailyCarCreate) SetMaintainManualDuration(f float32) *StatsDailyCarCreate {
	sdcc.mutation.SetMaintainManualDuration(f)
	return sdcc
}

// SetNillableMaintainManualDuration sets the "maintain_manual_duration" field if the given value is not nil.
func (sdcc *StatsDailyCarCreate) SetNillableMaintainManualDuration(f *float32) *StatsDailyCarCreate {
	if f != nil {
		sdcc.SetMaintainManualDuration(*f)
	}
	return sdcc
}

// SetMaintainAutoDuration sets the "maintain_auto_duration" field.
func (sdcc *StatsDailyCarCreate) SetMaintainAutoDuration(f float32) *StatsDailyCarCreate {
	sdcc.mutation.SetMaintainAutoDuration(f)
	return sdcc
}

// SetNillableMaintainAutoDuration sets the "maintain_auto_duration" field if the given value is not nil.
func (sdcc *StatsDailyCarCreate) SetNillableMaintainAutoDuration(f *float32) *StatsDailyCarCreate {
	if f != nil {
		sdcc.SetMaintainAutoDuration(*f)
	}
	return sdcc
}

// SetMaintainRemoteDuration sets the "maintain_remote_duration" field.
func (sdcc *StatsDailyCarCreate) SetMaintainRemoteDuration(f float32) *StatsDailyCarCreate {
	sdcc.mutation.SetMaintainRemoteDuration(f)
	return sdcc
}

// SetNillableMaintainRemoteDuration sets the "maintain_remote_duration" field if the given value is not nil.
func (sdcc *StatsDailyCarCreate) SetNillableMaintainRemoteDuration(f *float32) *StatsDailyCarCreate {
	if f != nil {
		sdcc.SetMaintainRemoteDuration(*f)
	}
	return sdcc
}

// SetMaintainFaultDuration sets the "maintain_fault_duration" field.
func (sdcc *StatsDailyCarCreate) SetMaintainFaultDuration(f float32) *StatsDailyCarCreate {
	sdcc.mutation.SetMaintainFaultDuration(f)
	return sdcc
}

// SetNillableMaintainFaultDuration sets the "maintain_fault_duration" field if the given value is not nil.
func (sdcc *StatsDailyCarCreate) SetNillableMaintainFaultDuration(f *float32) *StatsDailyCarCreate {
	if f != nil {
		sdcc.SetMaintainFaultDuration(*f)
	}
	return sdcc
}

// SetMaintainLockTimes sets the "maintain_lock_times" field.
func (sdcc *StatsDailyCarCreate) SetMaintainLockTimes(u uint32) *StatsDailyCarCreate {
	sdcc.mutation.SetMaintainLockTimes(u)
	return sdcc
}

// SetNillableMaintainLockTimes sets the "maintain_lock_times" field if the given value is not nil.
func (sdcc *StatsDailyCarCreate) SetNillableMaintainLockTimes(u *uint32) *StatsDailyCarCreate {
	if u != nil {
		sdcc.SetMaintainLockTimes(*u)
	}
	return sdcc
}

// SetMaintainManualTimes sets the "maintain_manual_times" field.
func (sdcc *StatsDailyCarCreate) SetMaintainManualTimes(u uint32) *StatsDailyCarCreate {
	sdcc.mutation.SetMaintainManualTimes(u)
	return sdcc
}

// SetNillableMaintainManualTimes sets the "maintain_manual_times" field if the given value is not nil.
func (sdcc *StatsDailyCarCreate) SetNillableMaintainManualTimes(u *uint32) *StatsDailyCarCreate {
	if u != nil {
		sdcc.SetMaintainManualTimes(*u)
	}
	return sdcc
}

// SetMaintainAutoTimes sets the "maintain_auto_times" field.
func (sdcc *StatsDailyCarCreate) SetMaintainAutoTimes(u uint32) *StatsDailyCarCreate {
	sdcc.mutation.SetMaintainAutoTimes(u)
	return sdcc
}

// SetNillableMaintainAutoTimes sets the "maintain_auto_times" field if the given value is not nil.
func (sdcc *StatsDailyCarCreate) SetNillableMaintainAutoTimes(u *uint32) *StatsDailyCarCreate {
	if u != nil {
		sdcc.SetMaintainAutoTimes(*u)
	}
	return sdcc
}

// SetMaintainRemoteTimes sets the "maintain_remote_times" field.
func (sdcc *StatsDailyCarCreate) SetMaintainRemoteTimes(u uint32) *StatsDailyCarCreate {
	sdcc.mutation.SetMaintainRemoteTimes(u)
	return sdcc
}

// SetNillableMaintainRemoteTimes sets the "maintain_remote_times" field if the given value is not nil.
func (sdcc *StatsDailyCarCreate) SetNillableMaintainRemoteTimes(u *uint32) *StatsDailyCarCreate {
	if u != nil {
		sdcc.SetMaintainRemoteTimes(*u)
	}
	return sdcc
}

// SetMaintainFaultTimes sets the "maintain_fault_times" field.
func (sdcc *StatsDailyCarCreate) SetMaintainFaultTimes(u uint32) *StatsDailyCarCreate {
	sdcc.mutation.SetMaintainFaultTimes(u)
	return sdcc
}

// SetNillableMaintainFaultTimes sets the "maintain_fault_times" field if the given value is not nil.
func (sdcc *StatsDailyCarCreate) SetNillableMaintainFaultTimes(u *uint32) *StatsDailyCarCreate {
	if u != nil {
		sdcc.SetMaintainFaultTimes(*u)
	}
	return sdcc
}

// SetMaintainManualMileage sets the "maintain_manual_mileage" field.
func (sdcc *StatsDailyCarCreate) SetMaintainManualMileage(f float32) *StatsDailyCarCreate {
	sdcc.mutation.SetMaintainManualMileage(f)
	return sdcc
}

// SetNillableMaintainManualMileage sets the "maintain_manual_mileage" field if the given value is not nil.
func (sdcc *StatsDailyCarCreate) SetNillableMaintainManualMileage(f *float32) *StatsDailyCarCreate {
	if f != nil {
		sdcc.SetMaintainManualMileage(*f)
	}
	return sdcc
}

// SetMaintainAutoMileage sets the "maintain_auto_mileage" field.
func (sdcc *StatsDailyCarCreate) SetMaintainAutoMileage(f float32) *StatsDailyCarCreate {
	sdcc.mutation.SetMaintainAutoMileage(f)
	return sdcc
}

// SetNillableMaintainAutoMileage sets the "maintain_auto_mileage" field if the given value is not nil.
func (sdcc *StatsDailyCarCreate) SetNillableMaintainAutoMileage(f *float32) *StatsDailyCarCreate {
	if f != nil {
		sdcc.SetMaintainAutoMileage(*f)
	}
	return sdcc
}

// SetMaintainRemoteMileage sets the "maintain_remote_mileage" field.
func (sdcc *StatsDailyCarCreate) SetMaintainRemoteMileage(f float32) *StatsDailyCarCreate {
	sdcc.mutation.SetMaintainRemoteMileage(f)
	return sdcc
}

// SetNillableMaintainRemoteMileage sets the "maintain_remote_mileage" field if the given value is not nil.
func (sdcc *StatsDailyCarCreate) SetNillableMaintainRemoteMileage(f *float32) *StatsDailyCarCreate {
	if f != nil {
		sdcc.SetMaintainRemoteMileage(*f)
	}
	return sdcc
}

// SetAlarmTimes sets the "alarm_times" field.
func (sdcc *StatsDailyCarCreate) SetAlarmTimes(u uint32) *StatsDailyCarCreate {
	sdcc.mutation.SetAlarmTimes(u)
	return sdcc
}

// SetNillableAlarmTimes sets the "alarm_times" field if the given value is not nil.
func (sdcc *StatsDailyCarCreate) SetNillableAlarmTimes(u *uint32) *StatsDailyCarCreate {
	if u != nil {
		sdcc.SetAlarmTimes(*u)
	}
	return sdcc
}

// SetStatsTime sets the "stats_time" field.
func (sdcc *StatsDailyCarCreate) SetStatsTime(t time.Time) *StatsDailyCarCreate {
	sdcc.mutation.SetStatsTime(t)
	return sdcc
}

// SetCreateTime sets the "create_time" field.
func (sdcc *StatsDailyCarCreate) SetCreateTime(t time.Time) *StatsDailyCarCreate {
	sdcc.mutation.SetCreateTime(t)
	return sdcc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (sdcc *StatsDailyCarCreate) SetNillableCreateTime(t *time.Time) *StatsDailyCarCreate {
	if t != nil {
		sdcc.SetCreateTime(*t)
	}
	return sdcc
}

// SetID sets the "id" field.
func (sdcc *StatsDailyCarCreate) SetID(i int) *StatsDailyCarCreate {
	sdcc.mutation.SetID(i)
	return sdcc
}

// Mutation returns the StatsDailyCarMutation object of the builder.
func (sdcc *StatsDailyCarCreate) Mutation() *StatsDailyCarMutation {
	return sdcc.mutation
}

// Save creates the StatsDailyCar in the database.
func (sdcc *StatsDailyCarCreate) Save(ctx context.Context) (*StatsDailyCar, error) {
	sdcc.defaults()
	return withHooks(ctx, sdcc.sqlSave, sdcc.mutation, sdcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sdcc *StatsDailyCarCreate) SaveX(ctx context.Context) *StatsDailyCar {
	v, err := sdcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sdcc *StatsDailyCarCreate) Exec(ctx context.Context) error {
	_, err := sdcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdcc *StatsDailyCarCreate) ExecX(ctx context.Context) {
	if err := sdcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sdcc *StatsDailyCarCreate) defaults() {
	if _, ok := sdcc.mutation.OrderCountCreate(); !ok {
		v := statsdailycar.DefaultOrderCountCreate
		sdcc.mutation.SetOrderCountCreate(v)
	}
	if _, ok := sdcc.mutation.OrderCountFinish(); !ok {
		v := statsdailycar.DefaultOrderCountFinish
		sdcc.mutation.SetOrderCountFinish(v)
	}
	if _, ok := sdcc.mutation.OrderCountCancel(); !ok {
		v := statsdailycar.DefaultOrderCountCancel
		sdcc.mutation.SetOrderCountCancel(v)
	}
	if _, ok := sdcc.mutation.OrderAmount(); !ok {
		v := statsdailycar.DefaultOrderAmount
		sdcc.mutation.SetOrderAmount(v)
	}
	if _, ok := sdcc.mutation.OrderDuration(); !ok {
		v := statsdailycar.DefaultOrderDuration
		sdcc.mutation.SetOrderDuration(v)
	}
	if _, ok := sdcc.mutation.OrderMileage(); !ok {
		v := statsdailycar.DefaultOrderMileage
		sdcc.mutation.SetOrderMileage(v)
	}
	if _, ok := sdcc.mutation.OrderScore(); !ok {
		v := statsdailycar.DefaultOrderScore
		sdcc.mutation.SetOrderScore(v)
	}
	if _, ok := sdcc.mutation.OperationLockDuration(); !ok {
		v := statsdailycar.DefaultOperationLockDuration
		sdcc.mutation.SetOperationLockDuration(v)
	}
	if _, ok := sdcc.mutation.OperationManualDuration(); !ok {
		v := statsdailycar.DefaultOperationManualDuration
		sdcc.mutation.SetOperationManualDuration(v)
	}
	if _, ok := sdcc.mutation.OperationAutoDuration(); !ok {
		v := statsdailycar.DefaultOperationAutoDuration
		sdcc.mutation.SetOperationAutoDuration(v)
	}
	if _, ok := sdcc.mutation.OperationFaultDuration(); !ok {
		v := statsdailycar.DefaultOperationFaultDuration
		sdcc.mutation.SetOperationFaultDuration(v)
	}
	if _, ok := sdcc.mutation.OperationLockTimes(); !ok {
		v := statsdailycar.DefaultOperationLockTimes
		sdcc.mutation.SetOperationLockTimes(v)
	}
	if _, ok := sdcc.mutation.OperationManualTimes(); !ok {
		v := statsdailycar.DefaultOperationManualTimes
		sdcc.mutation.SetOperationManualTimes(v)
	}
	if _, ok := sdcc.mutation.OperationAutoTimes(); !ok {
		v := statsdailycar.DefaultOperationAutoTimes
		sdcc.mutation.SetOperationAutoTimes(v)
	}
	if _, ok := sdcc.mutation.OperationFaultTimes(); !ok {
		v := statsdailycar.DefaultOperationFaultTimes
		sdcc.mutation.SetOperationFaultTimes(v)
	}
	if _, ok := sdcc.mutation.OperationManualMileage(); !ok {
		v := statsdailycar.DefaultOperationManualMileage
		sdcc.mutation.SetOperationManualMileage(v)
	}
	if _, ok := sdcc.mutation.OperationAutoMileage(); !ok {
		v := statsdailycar.DefaultOperationAutoMileage
		sdcc.mutation.SetOperationAutoMileage(v)
	}
	if _, ok := sdcc.mutation.MaintainLockDuration(); !ok {
		v := statsdailycar.DefaultMaintainLockDuration
		sdcc.mutation.SetMaintainLockDuration(v)
	}
	if _, ok := sdcc.mutation.MaintainManualDuration(); !ok {
		v := statsdailycar.DefaultMaintainManualDuration
		sdcc.mutation.SetMaintainManualDuration(v)
	}
	if _, ok := sdcc.mutation.MaintainAutoDuration(); !ok {
		v := statsdailycar.DefaultMaintainAutoDuration
		sdcc.mutation.SetMaintainAutoDuration(v)
	}
	if _, ok := sdcc.mutation.MaintainRemoteDuration(); !ok {
		v := statsdailycar.DefaultMaintainRemoteDuration
		sdcc.mutation.SetMaintainRemoteDuration(v)
	}
	if _, ok := sdcc.mutation.MaintainFaultDuration(); !ok {
		v := statsdailycar.DefaultMaintainFaultDuration
		sdcc.mutation.SetMaintainFaultDuration(v)
	}
	if _, ok := sdcc.mutation.MaintainLockTimes(); !ok {
		v := statsdailycar.DefaultMaintainLockTimes
		sdcc.mutation.SetMaintainLockTimes(v)
	}
	if _, ok := sdcc.mutation.MaintainManualTimes(); !ok {
		v := statsdailycar.DefaultMaintainManualTimes
		sdcc.mutation.SetMaintainManualTimes(v)
	}
	if _, ok := sdcc.mutation.MaintainAutoTimes(); !ok {
		v := statsdailycar.DefaultMaintainAutoTimes
		sdcc.mutation.SetMaintainAutoTimes(v)
	}
	if _, ok := sdcc.mutation.MaintainRemoteTimes(); !ok {
		v := statsdailycar.DefaultMaintainRemoteTimes
		sdcc.mutation.SetMaintainRemoteTimes(v)
	}
	if _, ok := sdcc.mutation.MaintainFaultTimes(); !ok {
		v := statsdailycar.DefaultMaintainFaultTimes
		sdcc.mutation.SetMaintainFaultTimes(v)
	}
	if _, ok := sdcc.mutation.MaintainManualMileage(); !ok {
		v := statsdailycar.DefaultMaintainManualMileage
		sdcc.mutation.SetMaintainManualMileage(v)
	}
	if _, ok := sdcc.mutation.MaintainAutoMileage(); !ok {
		v := statsdailycar.DefaultMaintainAutoMileage
		sdcc.mutation.SetMaintainAutoMileage(v)
	}
	if _, ok := sdcc.mutation.MaintainRemoteMileage(); !ok {
		v := statsdailycar.DefaultMaintainRemoteMileage
		sdcc.mutation.SetMaintainRemoteMileage(v)
	}
	if _, ok := sdcc.mutation.AlarmTimes(); !ok {
		v := statsdailycar.DefaultAlarmTimes
		sdcc.mutation.SetAlarmTimes(v)
	}
	if _, ok := sdcc.mutation.CreateTime(); !ok {
		v := statsdailycar.DefaultCreateTime()
		sdcc.mutation.SetCreateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sdcc *StatsDailyCarCreate) check() error {
	if _, ok := sdcc.mutation.ScenicAreaID(); !ok {
		return &ValidationError{Name: "scenic_area_id", err: errors.New(`ent: missing required field "StatsDailyCar.scenic_area_id"`)}
	}
	if _, ok := sdcc.mutation.CarID(); !ok {
		return &ValidationError{Name: "car_id", err: errors.New(`ent: missing required field "StatsDailyCar.car_id"`)}
	}
	if _, ok := sdcc.mutation.Y(); !ok {
		return &ValidationError{Name: "y", err: errors.New(`ent: missing required field "StatsDailyCar.y"`)}
	}
	if _, ok := sdcc.mutation.M(); !ok {
		return &ValidationError{Name: "m", err: errors.New(`ent: missing required field "StatsDailyCar.m"`)}
	}
	if _, ok := sdcc.mutation.D(); !ok {
		return &ValidationError{Name: "d", err: errors.New(`ent: missing required field "StatsDailyCar.d"`)}
	}
	if _, ok := sdcc.mutation.Week(); !ok {
		return &ValidationError{Name: "week", err: errors.New(`ent: missing required field "StatsDailyCar.week"`)}
	}
	if _, ok := sdcc.mutation.Weekday(); !ok {
		return &ValidationError{Name: "weekday", err: errors.New(`ent: missing required field "StatsDailyCar.weekday"`)}
	}
	if _, ok := sdcc.mutation.Period(); !ok {
		return &ValidationError{Name: "period", err: errors.New(`ent: missing required field "StatsDailyCar.period"`)}
	}
	if _, ok := sdcc.mutation.OrderCountCreate(); !ok {
		return &ValidationError{Name: "order_count_create", err: errors.New(`ent: missing required field "StatsDailyCar.order_count_create"`)}
	}
	if _, ok := sdcc.mutation.OrderCountFinish(); !ok {
		return &ValidationError{Name: "order_count_finish", err: errors.New(`ent: missing required field "StatsDailyCar.order_count_finish"`)}
	}
	if _, ok := sdcc.mutation.OrderCountCancel(); !ok {
		return &ValidationError{Name: "order_count_cancel", err: errors.New(`ent: missing required field "StatsDailyCar.order_count_cancel"`)}
	}
	if _, ok := sdcc.mutation.OrderAmount(); !ok {
		return &ValidationError{Name: "order_amount", err: errors.New(`ent: missing required field "StatsDailyCar.order_amount"`)}
	}
	if _, ok := sdcc.mutation.OrderDuration(); !ok {
		return &ValidationError{Name: "order_duration", err: errors.New(`ent: missing required field "StatsDailyCar.order_duration"`)}
	}
	if _, ok := sdcc.mutation.OrderMileage(); !ok {
		return &ValidationError{Name: "order_mileage", err: errors.New(`ent: missing required field "StatsDailyCar.order_mileage"`)}
	}
	if _, ok := sdcc.mutation.OrderScore(); !ok {
		return &ValidationError{Name: "order_score", err: errors.New(`ent: missing required field "StatsDailyCar.order_score"`)}
	}
	if _, ok := sdcc.mutation.OperationLockDuration(); !ok {
		return &ValidationError{Name: "operation_lock_duration", err: errors.New(`ent: missing required field "StatsDailyCar.operation_lock_duration"`)}
	}
	if _, ok := sdcc.mutation.OperationManualDuration(); !ok {
		return &ValidationError{Name: "operation_manual_duration", err: errors.New(`ent: missing required field "StatsDailyCar.operation_manual_duration"`)}
	}
	if _, ok := sdcc.mutation.OperationAutoDuration(); !ok {
		return &ValidationError{Name: "operation_auto_duration", err: errors.New(`ent: missing required field "StatsDailyCar.operation_auto_duration"`)}
	}
	if _, ok := sdcc.mutation.OperationFaultDuration(); !ok {
		return &ValidationError{Name: "operation_fault_duration", err: errors.New(`ent: missing required field "StatsDailyCar.operation_fault_duration"`)}
	}
	if _, ok := sdcc.mutation.OperationLockTimes(); !ok {
		return &ValidationError{Name: "operation_lock_times", err: errors.New(`ent: missing required field "StatsDailyCar.operation_lock_times"`)}
	}
	if _, ok := sdcc.mutation.OperationManualTimes(); !ok {
		return &ValidationError{Name: "operation_manual_times", err: errors.New(`ent: missing required field "StatsDailyCar.operation_manual_times"`)}
	}
	if _, ok := sdcc.mutation.OperationAutoTimes(); !ok {
		return &ValidationError{Name: "operation_auto_times", err: errors.New(`ent: missing required field "StatsDailyCar.operation_auto_times"`)}
	}
	if _, ok := sdcc.mutation.OperationFaultTimes(); !ok {
		return &ValidationError{Name: "operation_fault_times", err: errors.New(`ent: missing required field "StatsDailyCar.operation_fault_times"`)}
	}
	if _, ok := sdcc.mutation.OperationManualMileage(); !ok {
		return &ValidationError{Name: "operation_manual_mileage", err: errors.New(`ent: missing required field "StatsDailyCar.operation_manual_mileage"`)}
	}
	if _, ok := sdcc.mutation.OperationAutoMileage(); !ok {
		return &ValidationError{Name: "operation_auto_mileage", err: errors.New(`ent: missing required field "StatsDailyCar.operation_auto_mileage"`)}
	}
	if _, ok := sdcc.mutation.MaintainLockDuration(); !ok {
		return &ValidationError{Name: "maintain_lock_duration", err: errors.New(`ent: missing required field "StatsDailyCar.maintain_lock_duration"`)}
	}
	if _, ok := sdcc.mutation.MaintainManualDuration(); !ok {
		return &ValidationError{Name: "maintain_manual_duration", err: errors.New(`ent: missing required field "StatsDailyCar.maintain_manual_duration"`)}
	}
	if _, ok := sdcc.mutation.MaintainAutoDuration(); !ok {
		return &ValidationError{Name: "maintain_auto_duration", err: errors.New(`ent: missing required field "StatsDailyCar.maintain_auto_duration"`)}
	}
	if _, ok := sdcc.mutation.MaintainRemoteDuration(); !ok {
		return &ValidationError{Name: "maintain_remote_duration", err: errors.New(`ent: missing required field "StatsDailyCar.maintain_remote_duration"`)}
	}
	if _, ok := sdcc.mutation.MaintainFaultDuration(); !ok {
		return &ValidationError{Name: "maintain_fault_duration", err: errors.New(`ent: missing required field "StatsDailyCar.maintain_fault_duration"`)}
	}
	if _, ok := sdcc.mutation.MaintainLockTimes(); !ok {
		return &ValidationError{Name: "maintain_lock_times", err: errors.New(`ent: missing required field "StatsDailyCar.maintain_lock_times"`)}
	}
	if _, ok := sdcc.mutation.MaintainManualTimes(); !ok {
		return &ValidationError{Name: "maintain_manual_times", err: errors.New(`ent: missing required field "StatsDailyCar.maintain_manual_times"`)}
	}
	if _, ok := sdcc.mutation.MaintainAutoTimes(); !ok {
		return &ValidationError{Name: "maintain_auto_times", err: errors.New(`ent: missing required field "StatsDailyCar.maintain_auto_times"`)}
	}
	if _, ok := sdcc.mutation.MaintainRemoteTimes(); !ok {
		return &ValidationError{Name: "maintain_remote_times", err: errors.New(`ent: missing required field "StatsDailyCar.maintain_remote_times"`)}
	}
	if _, ok := sdcc.mutation.MaintainFaultTimes(); !ok {
		return &ValidationError{Name: "maintain_fault_times", err: errors.New(`ent: missing required field "StatsDailyCar.maintain_fault_times"`)}
	}
	if _, ok := sdcc.mutation.MaintainManualMileage(); !ok {
		return &ValidationError{Name: "maintain_manual_mileage", err: errors.New(`ent: missing required field "StatsDailyCar.maintain_manual_mileage"`)}
	}
	if _, ok := sdcc.mutation.MaintainAutoMileage(); !ok {
		return &ValidationError{Name: "maintain_auto_mileage", err: errors.New(`ent: missing required field "StatsDailyCar.maintain_auto_mileage"`)}
	}
	if _, ok := sdcc.mutation.MaintainRemoteMileage(); !ok {
		return &ValidationError{Name: "maintain_remote_mileage", err: errors.New(`ent: missing required field "StatsDailyCar.maintain_remote_mileage"`)}
	}
	if _, ok := sdcc.mutation.AlarmTimes(); !ok {
		return &ValidationError{Name: "alarm_times", err: errors.New(`ent: missing required field "StatsDailyCar.alarm_times"`)}
	}
	if _, ok := sdcc.mutation.StatsTime(); !ok {
		return &ValidationError{Name: "stats_time", err: errors.New(`ent: missing required field "StatsDailyCar.stats_time"`)}
	}
	if _, ok := sdcc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "StatsDailyCar.create_time"`)}
	}
	return nil
}

func (sdcc *StatsDailyCarCreate) sqlSave(ctx context.Context) (*StatsDailyCar, error) {
	if err := sdcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sdcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sdcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	sdcc.mutation.id = &_node.ID
	sdcc.mutation.done = true
	return _node, nil
}

func (sdcc *StatsDailyCarCreate) createSpec() (*StatsDailyCar, *sqlgraph.CreateSpec) {
	var (
		_node = &StatsDailyCar{config: sdcc.config}
		_spec = sqlgraph.NewCreateSpec(statsdailycar.Table, sqlgraph.NewFieldSpec(statsdailycar.FieldID, field.TypeInt))
	)
	if id, ok := sdcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sdcc.mutation.ScenicAreaID(); ok {
		_spec.SetField(statsdailycar.FieldScenicAreaID, field.TypeInt, value)
		_node.ScenicAreaID = value
	}
	if value, ok := sdcc.mutation.CarID(); ok {
		_spec.SetField(statsdailycar.FieldCarID, field.TypeInt, value)
		_node.CarID = value
	}
	if value, ok := sdcc.mutation.Y(); ok {
		_spec.SetField(statsdailycar.FieldY, field.TypeInt, value)
		_node.Y = value
	}
	if value, ok := sdcc.mutation.M(); ok {
		_spec.SetField(statsdailycar.FieldM, field.TypeInt, value)
		_node.M = value
	}
	if value, ok := sdcc.mutation.D(); ok {
		_spec.SetField(statsdailycar.FieldD, field.TypeInt, value)
		_node.D = value
	}
	if value, ok := sdcc.mutation.Week(); ok {
		_spec.SetField(statsdailycar.FieldWeek, field.TypeInt, value)
		_node.Week = value
	}
	if value, ok := sdcc.mutation.Weekday(); ok {
		_spec.SetField(statsdailycar.FieldWeekday, field.TypeInt, value)
		_node.Weekday = value
	}
	if value, ok := sdcc.mutation.Period(); ok {
		_spec.SetField(statsdailycar.FieldPeriod, field.TypeInt, value)
		_node.Period = value
	}
	if value, ok := sdcc.mutation.OrderCountCreate(); ok {
		_spec.SetField(statsdailycar.FieldOrderCountCreate, field.TypeInt, value)
		_node.OrderCountCreate = value
	}
	if value, ok := sdcc.mutation.OrderCountFinish(); ok {
		_spec.SetField(statsdailycar.FieldOrderCountFinish, field.TypeInt, value)
		_node.OrderCountFinish = value
	}
	if value, ok := sdcc.mutation.OrderCountCancel(); ok {
		_spec.SetField(statsdailycar.FieldOrderCountCancel, field.TypeInt, value)
		_node.OrderCountCancel = value
	}
	if value, ok := sdcc.mutation.OrderAmount(); ok {
		_spec.SetField(statsdailycar.FieldOrderAmount, field.TypeInt, value)
		_node.OrderAmount = value
	}
	if value, ok := sdcc.mutation.OrderDuration(); ok {
		_spec.SetField(statsdailycar.FieldOrderDuration, field.TypeInt, value)
		_node.OrderDuration = value
	}
	if value, ok := sdcc.mutation.OrderMileage(); ok {
		_spec.SetField(statsdailycar.FieldOrderMileage, field.TypeInt, value)
		_node.OrderMileage = value
	}
	if value, ok := sdcc.mutation.OrderScore(); ok {
		_spec.SetField(statsdailycar.FieldOrderScore, field.TypeInt, value)
		_node.OrderScore = value
	}
	if value, ok := sdcc.mutation.OperationLockDuration(); ok {
		_spec.SetField(statsdailycar.FieldOperationLockDuration, field.TypeFloat32, value)
		_node.OperationLockDuration = value
	}
	if value, ok := sdcc.mutation.OperationManualDuration(); ok {
		_spec.SetField(statsdailycar.FieldOperationManualDuration, field.TypeFloat32, value)
		_node.OperationManualDuration = value
	}
	if value, ok := sdcc.mutation.OperationAutoDuration(); ok {
		_spec.SetField(statsdailycar.FieldOperationAutoDuration, field.TypeFloat32, value)
		_node.OperationAutoDuration = value
	}
	if value, ok := sdcc.mutation.OperationFaultDuration(); ok {
		_spec.SetField(statsdailycar.FieldOperationFaultDuration, field.TypeFloat32, value)
		_node.OperationFaultDuration = value
	}
	if value, ok := sdcc.mutation.OperationLockTimes(); ok {
		_spec.SetField(statsdailycar.FieldOperationLockTimes, field.TypeUint32, value)
		_node.OperationLockTimes = value
	}
	if value, ok := sdcc.mutation.OperationManualTimes(); ok {
		_spec.SetField(statsdailycar.FieldOperationManualTimes, field.TypeUint32, value)
		_node.OperationManualTimes = value
	}
	if value, ok := sdcc.mutation.OperationAutoTimes(); ok {
		_spec.SetField(statsdailycar.FieldOperationAutoTimes, field.TypeUint32, value)
		_node.OperationAutoTimes = value
	}
	if value, ok := sdcc.mutation.OperationFaultTimes(); ok {
		_spec.SetField(statsdailycar.FieldOperationFaultTimes, field.TypeUint32, value)
		_node.OperationFaultTimes = value
	}
	if value, ok := sdcc.mutation.OperationManualMileage(); ok {
		_spec.SetField(statsdailycar.FieldOperationManualMileage, field.TypeFloat32, value)
		_node.OperationManualMileage = value
	}
	if value, ok := sdcc.mutation.OperationAutoMileage(); ok {
		_spec.SetField(statsdailycar.FieldOperationAutoMileage, field.TypeFloat32, value)
		_node.OperationAutoMileage = value
	}
	if value, ok := sdcc.mutation.MaintainLockDuration(); ok {
		_spec.SetField(statsdailycar.FieldMaintainLockDuration, field.TypeFloat32, value)
		_node.MaintainLockDuration = value
	}
	if value, ok := sdcc.mutation.MaintainManualDuration(); ok {
		_spec.SetField(statsdailycar.FieldMaintainManualDuration, field.TypeFloat32, value)
		_node.MaintainManualDuration = value
	}
	if value, ok := sdcc.mutation.MaintainAutoDuration(); ok {
		_spec.SetField(statsdailycar.FieldMaintainAutoDuration, field.TypeFloat32, value)
		_node.MaintainAutoDuration = value
	}
	if value, ok := sdcc.mutation.MaintainRemoteDuration(); ok {
		_spec.SetField(statsdailycar.FieldMaintainRemoteDuration, field.TypeFloat32, value)
		_node.MaintainRemoteDuration = value
	}
	if value, ok := sdcc.mutation.MaintainFaultDuration(); ok {
		_spec.SetField(statsdailycar.FieldMaintainFaultDuration, field.TypeFloat32, value)
		_node.MaintainFaultDuration = value
	}
	if value, ok := sdcc.mutation.MaintainLockTimes(); ok {
		_spec.SetField(statsdailycar.FieldMaintainLockTimes, field.TypeUint32, value)
		_node.MaintainLockTimes = value
	}
	if value, ok := sdcc.mutation.MaintainManualTimes(); ok {
		_spec.SetField(statsdailycar.FieldMaintainManualTimes, field.TypeUint32, value)
		_node.MaintainManualTimes = value
	}
	if value, ok := sdcc.mutation.MaintainAutoTimes(); ok {
		_spec.SetField(statsdailycar.FieldMaintainAutoTimes, field.TypeUint32, value)
		_node.MaintainAutoTimes = value
	}
	if value, ok := sdcc.mutation.MaintainRemoteTimes(); ok {
		_spec.SetField(statsdailycar.FieldMaintainRemoteTimes, field.TypeUint32, value)
		_node.MaintainRemoteTimes = value
	}
	if value, ok := sdcc.mutation.MaintainFaultTimes(); ok {
		_spec.SetField(statsdailycar.FieldMaintainFaultTimes, field.TypeUint32, value)
		_node.MaintainFaultTimes = value
	}
	if value, ok := sdcc.mutation.MaintainManualMileage(); ok {
		_spec.SetField(statsdailycar.FieldMaintainManualMileage, field.TypeFloat32, value)
		_node.MaintainManualMileage = value
	}
	if value, ok := sdcc.mutation.MaintainAutoMileage(); ok {
		_spec.SetField(statsdailycar.FieldMaintainAutoMileage, field.TypeFloat32, value)
		_node.MaintainAutoMileage = value
	}
	if value, ok := sdcc.mutation.MaintainRemoteMileage(); ok {
		_spec.SetField(statsdailycar.FieldMaintainRemoteMileage, field.TypeFloat32, value)
		_node.MaintainRemoteMileage = value
	}
	if value, ok := sdcc.mutation.AlarmTimes(); ok {
		_spec.SetField(statsdailycar.FieldAlarmTimes, field.TypeUint32, value)
		_node.AlarmTimes = value
	}
	if value, ok := sdcc.mutation.StatsTime(); ok {
		_spec.SetField(statsdailycar.FieldStatsTime, field.TypeTime, value)
		_node.StatsTime = value
	}
	if value, ok := sdcc.mutation.CreateTime(); ok {
		_spec.SetField(statsdailycar.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	return _node, _spec
}

// StatsDailyCarCreateBulk is the builder for creating many StatsDailyCar entities in bulk.
type StatsDailyCarCreateBulk struct {
	config
	err      error
	builders []*StatsDailyCarCreate
}

// Save creates the StatsDailyCar entities in the database.
func (sdccb *StatsDailyCarCreateBulk) Save(ctx context.Context) ([]*StatsDailyCar, error) {
	if sdccb.err != nil {
		return nil, sdccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sdccb.builders))
	nodes := make([]*StatsDailyCar, len(sdccb.builders))
	mutators := make([]Mutator, len(sdccb.builders))
	for i := range sdccb.builders {
		func(i int, root context.Context) {
			builder := sdccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StatsDailyCarMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sdccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sdccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sdccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sdccb *StatsDailyCarCreateBulk) SaveX(ctx context.Context) []*StatsDailyCar {
	v, err := sdccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sdccb *StatsDailyCarCreateBulk) Exec(ctx context.Context) error {
	_, err := sdccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdccb *StatsDailyCarCreateBulk) ExecX(ctx context.Context) {
	if err := sdccb.Exec(ctx); err != nil {
		panic(err)
	}
}
