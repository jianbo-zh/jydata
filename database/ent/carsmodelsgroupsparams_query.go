// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/carsmodels"
	"github.com/jianbo-zh/jydata/database/ent/carsmodelsgroups"
	"github.com/jianbo-zh/jydata/database/ent/carsmodelsgroupsparams"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
)

// CarsModelsGroupsParamsQuery is the builder for querying CarsModelsGroupsParams entities.
type CarsModelsGroupsParamsQuery struct {
	config
	ctx        *QueryContext
	order      []carsmodelsgroupsparams.OrderOption
	inters     []Interceptor
	predicates []predicate.CarsModelsGroupsParams
	withModel  *CarsModelsQuery
	withGroup  *CarsModelsGroupsQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CarsModelsGroupsParamsQuery builder.
func (cmgpq *CarsModelsGroupsParamsQuery) Where(ps ...predicate.CarsModelsGroupsParams) *CarsModelsGroupsParamsQuery {
	cmgpq.predicates = append(cmgpq.predicates, ps...)
	return cmgpq
}

// Limit the number of records to be returned by this query.
func (cmgpq *CarsModelsGroupsParamsQuery) Limit(limit int) *CarsModelsGroupsParamsQuery {
	cmgpq.ctx.Limit = &limit
	return cmgpq
}

// Offset to start from.
func (cmgpq *CarsModelsGroupsParamsQuery) Offset(offset int) *CarsModelsGroupsParamsQuery {
	cmgpq.ctx.Offset = &offset
	return cmgpq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cmgpq *CarsModelsGroupsParamsQuery) Unique(unique bool) *CarsModelsGroupsParamsQuery {
	cmgpq.ctx.Unique = &unique
	return cmgpq
}

// Order specifies how the records should be ordered.
func (cmgpq *CarsModelsGroupsParamsQuery) Order(o ...carsmodelsgroupsparams.OrderOption) *CarsModelsGroupsParamsQuery {
	cmgpq.order = append(cmgpq.order, o...)
	return cmgpq
}

// QueryModel chains the current query on the "model" edge.
func (cmgpq *CarsModelsGroupsParamsQuery) QueryModel() *CarsModelsQuery {
	query := (&CarsModelsClient{config: cmgpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cmgpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cmgpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carsmodelsgroupsparams.Table, carsmodelsgroupsparams.FieldID, selector),
			sqlgraph.To(carsmodels.Table, carsmodels.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, carsmodelsgroupsparams.ModelTable, carsmodelsgroupsparams.ModelColumn),
		)
		fromU = sqlgraph.SetNeighbors(cmgpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGroup chains the current query on the "group" edge.
func (cmgpq *CarsModelsGroupsParamsQuery) QueryGroup() *CarsModelsGroupsQuery {
	query := (&CarsModelsGroupsClient{config: cmgpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cmgpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cmgpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carsmodelsgroupsparams.Table, carsmodelsgroupsparams.FieldID, selector),
			sqlgraph.To(carsmodelsgroups.Table, carsmodelsgroups.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, carsmodelsgroupsparams.GroupTable, carsmodelsgroupsparams.GroupColumn),
		)
		fromU = sqlgraph.SetNeighbors(cmgpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CarsModelsGroupsParams entity from the query.
// Returns a *NotFoundError when no CarsModelsGroupsParams was found.
func (cmgpq *CarsModelsGroupsParamsQuery) First(ctx context.Context) (*CarsModelsGroupsParams, error) {
	nodes, err := cmgpq.Limit(1).All(setContextOp(ctx, cmgpq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{carsmodelsgroupsparams.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cmgpq *CarsModelsGroupsParamsQuery) FirstX(ctx context.Context) *CarsModelsGroupsParams {
	node, err := cmgpq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CarsModelsGroupsParams ID from the query.
// Returns a *NotFoundError when no CarsModelsGroupsParams ID was found.
func (cmgpq *CarsModelsGroupsParamsQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = cmgpq.Limit(1).IDs(setContextOp(ctx, cmgpq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{carsmodelsgroupsparams.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cmgpq *CarsModelsGroupsParamsQuery) FirstIDX(ctx context.Context) int {
	id, err := cmgpq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CarsModelsGroupsParams entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CarsModelsGroupsParams entity is found.
// Returns a *NotFoundError when no CarsModelsGroupsParams entities are found.
func (cmgpq *CarsModelsGroupsParamsQuery) Only(ctx context.Context) (*CarsModelsGroupsParams, error) {
	nodes, err := cmgpq.Limit(2).All(setContextOp(ctx, cmgpq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{carsmodelsgroupsparams.Label}
	default:
		return nil, &NotSingularError{carsmodelsgroupsparams.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cmgpq *CarsModelsGroupsParamsQuery) OnlyX(ctx context.Context) *CarsModelsGroupsParams {
	node, err := cmgpq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CarsModelsGroupsParams ID in the query.
// Returns a *NotSingularError when more than one CarsModelsGroupsParams ID is found.
// Returns a *NotFoundError when no entities are found.
func (cmgpq *CarsModelsGroupsParamsQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = cmgpq.Limit(2).IDs(setContextOp(ctx, cmgpq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{carsmodelsgroupsparams.Label}
	default:
		err = &NotSingularError{carsmodelsgroupsparams.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cmgpq *CarsModelsGroupsParamsQuery) OnlyIDX(ctx context.Context) int {
	id, err := cmgpq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CarsModelsGroupsParamsSlice.
func (cmgpq *CarsModelsGroupsParamsQuery) All(ctx context.Context) ([]*CarsModelsGroupsParams, error) {
	ctx = setContextOp(ctx, cmgpq.ctx, ent.OpQueryAll)
	if err := cmgpq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*CarsModelsGroupsParams, *CarsModelsGroupsParamsQuery]()
	return withInterceptors[[]*CarsModelsGroupsParams](ctx, cmgpq, qr, cmgpq.inters)
}

// AllX is like All, but panics if an error occurs.
func (cmgpq *CarsModelsGroupsParamsQuery) AllX(ctx context.Context) []*CarsModelsGroupsParams {
	nodes, err := cmgpq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CarsModelsGroupsParams IDs.
func (cmgpq *CarsModelsGroupsParamsQuery) IDs(ctx context.Context) (ids []int, err error) {
	if cmgpq.ctx.Unique == nil && cmgpq.path != nil {
		cmgpq.Unique(true)
	}
	ctx = setContextOp(ctx, cmgpq.ctx, ent.OpQueryIDs)
	if err = cmgpq.Select(carsmodelsgroupsparams.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cmgpq *CarsModelsGroupsParamsQuery) IDsX(ctx context.Context) []int {
	ids, err := cmgpq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cmgpq *CarsModelsGroupsParamsQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, cmgpq.ctx, ent.OpQueryCount)
	if err := cmgpq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, cmgpq, querierCount[*CarsModelsGroupsParamsQuery](), cmgpq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (cmgpq *CarsModelsGroupsParamsQuery) CountX(ctx context.Context) int {
	count, err := cmgpq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cmgpq *CarsModelsGroupsParamsQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, cmgpq.ctx, ent.OpQueryExist)
	switch _, err := cmgpq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (cmgpq *CarsModelsGroupsParamsQuery) ExistX(ctx context.Context) bool {
	exist, err := cmgpq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CarsModelsGroupsParamsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cmgpq *CarsModelsGroupsParamsQuery) Clone() *CarsModelsGroupsParamsQuery {
	if cmgpq == nil {
		return nil
	}
	return &CarsModelsGroupsParamsQuery{
		config:     cmgpq.config,
		ctx:        cmgpq.ctx.Clone(),
		order:      append([]carsmodelsgroupsparams.OrderOption{}, cmgpq.order...),
		inters:     append([]Interceptor{}, cmgpq.inters...),
		predicates: append([]predicate.CarsModelsGroupsParams{}, cmgpq.predicates...),
		withModel:  cmgpq.withModel.Clone(),
		withGroup:  cmgpq.withGroup.Clone(),
		// clone intermediate query.
		sql:  cmgpq.sql.Clone(),
		path: cmgpq.path,
	}
}

// WithModel tells the query-builder to eager-load the nodes that are connected to
// the "model" edge. The optional arguments are used to configure the query builder of the edge.
func (cmgpq *CarsModelsGroupsParamsQuery) WithModel(opts ...func(*CarsModelsQuery)) *CarsModelsGroupsParamsQuery {
	query := (&CarsModelsClient{config: cmgpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cmgpq.withModel = query
	return cmgpq
}

// WithGroup tells the query-builder to eager-load the nodes that are connected to
// the "group" edge. The optional arguments are used to configure the query builder of the edge.
func (cmgpq *CarsModelsGroupsParamsQuery) WithGroup(opts ...func(*CarsModelsGroupsQuery)) *CarsModelsGroupsParamsQuery {
	query := (&CarsModelsGroupsClient{config: cmgpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cmgpq.withGroup = query
	return cmgpq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ModelID int `json:"model_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CarsModelsGroupsParams.Query().
//		GroupBy(carsmodelsgroupsparams.FieldModelID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (cmgpq *CarsModelsGroupsParamsQuery) GroupBy(field string, fields ...string) *CarsModelsGroupsParamsGroupBy {
	cmgpq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CarsModelsGroupsParamsGroupBy{build: cmgpq}
	grbuild.flds = &cmgpq.ctx.Fields
	grbuild.label = carsmodelsgroupsparams.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ModelID int `json:"model_id,omitempty"`
//	}
//
//	client.CarsModelsGroupsParams.Query().
//		Select(carsmodelsgroupsparams.FieldModelID).
//		Scan(ctx, &v)
func (cmgpq *CarsModelsGroupsParamsQuery) Select(fields ...string) *CarsModelsGroupsParamsSelect {
	cmgpq.ctx.Fields = append(cmgpq.ctx.Fields, fields...)
	sbuild := &CarsModelsGroupsParamsSelect{CarsModelsGroupsParamsQuery: cmgpq}
	sbuild.label = carsmodelsgroupsparams.Label
	sbuild.flds, sbuild.scan = &cmgpq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CarsModelsGroupsParamsSelect configured with the given aggregations.
func (cmgpq *CarsModelsGroupsParamsQuery) Aggregate(fns ...AggregateFunc) *CarsModelsGroupsParamsSelect {
	return cmgpq.Select().Aggregate(fns...)
}

func (cmgpq *CarsModelsGroupsParamsQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range cmgpq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, cmgpq); err != nil {
				return err
			}
		}
	}
	for _, f := range cmgpq.ctx.Fields {
		if !carsmodelsgroupsparams.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if cmgpq.path != nil {
		prev, err := cmgpq.path(ctx)
		if err != nil {
			return err
		}
		cmgpq.sql = prev
	}
	return nil
}

func (cmgpq *CarsModelsGroupsParamsQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CarsModelsGroupsParams, error) {
	var (
		nodes       = []*CarsModelsGroupsParams{}
		_spec       = cmgpq.querySpec()
		loadedTypes = [2]bool{
			cmgpq.withModel != nil,
			cmgpq.withGroup != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CarsModelsGroupsParams).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CarsModelsGroupsParams{config: cmgpq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cmgpq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := cmgpq.withModel; query != nil {
		if err := cmgpq.loadModel(ctx, query, nodes, nil,
			func(n *CarsModelsGroupsParams, e *CarsModels) { n.Edges.Model = e }); err != nil {
			return nil, err
		}
	}
	if query := cmgpq.withGroup; query != nil {
		if err := cmgpq.loadGroup(ctx, query, nodes, nil,
			func(n *CarsModelsGroupsParams, e *CarsModelsGroups) { n.Edges.Group = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (cmgpq *CarsModelsGroupsParamsQuery) loadModel(ctx context.Context, query *CarsModelsQuery, nodes []*CarsModelsGroupsParams, init func(*CarsModelsGroupsParams), assign func(*CarsModelsGroupsParams, *CarsModels)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*CarsModelsGroupsParams)
	for i := range nodes {
		fk := nodes[i].ModelID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(carsmodels.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "model_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cmgpq *CarsModelsGroupsParamsQuery) loadGroup(ctx context.Context, query *CarsModelsGroupsQuery, nodes []*CarsModelsGroupsParams, init func(*CarsModelsGroupsParams), assign func(*CarsModelsGroupsParams, *CarsModelsGroups)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*CarsModelsGroupsParams)
	for i := range nodes {
		fk := nodes[i].GroupID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(carsmodelsgroups.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "group_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (cmgpq *CarsModelsGroupsParamsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cmgpq.querySpec()
	_spec.Node.Columns = cmgpq.ctx.Fields
	if len(cmgpq.ctx.Fields) > 0 {
		_spec.Unique = cmgpq.ctx.Unique != nil && *cmgpq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, cmgpq.driver, _spec)
}

func (cmgpq *CarsModelsGroupsParamsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(carsmodelsgroupsparams.Table, carsmodelsgroupsparams.Columns, sqlgraph.NewFieldSpec(carsmodelsgroupsparams.FieldID, field.TypeInt))
	_spec.From = cmgpq.sql
	if unique := cmgpq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if cmgpq.path != nil {
		_spec.Unique = true
	}
	if fields := cmgpq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carsmodelsgroupsparams.FieldID)
		for i := range fields {
			if fields[i] != carsmodelsgroupsparams.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if cmgpq.withModel != nil {
			_spec.Node.AddColumnOnce(carsmodelsgroupsparams.FieldModelID)
		}
		if cmgpq.withGroup != nil {
			_spec.Node.AddColumnOnce(carsmodelsgroupsparams.FieldGroupID)
		}
	}
	if ps := cmgpq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cmgpq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cmgpq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cmgpq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cmgpq *CarsModelsGroupsParamsQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cmgpq.driver.Dialect())
	t1 := builder.Table(carsmodelsgroupsparams.Table)
	columns := cmgpq.ctx.Fields
	if len(columns) == 0 {
		columns = carsmodelsgroupsparams.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cmgpq.sql != nil {
		selector = cmgpq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cmgpq.ctx.Unique != nil && *cmgpq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range cmgpq.predicates {
		p(selector)
	}
	for _, p := range cmgpq.order {
		p(selector)
	}
	if offset := cmgpq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cmgpq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// CarsModelsGroupsParamsGroupBy is the group-by builder for CarsModelsGroupsParams entities.
type CarsModelsGroupsParamsGroupBy struct {
	selector
	build *CarsModelsGroupsParamsQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cmgpgb *CarsModelsGroupsParamsGroupBy) Aggregate(fns ...AggregateFunc) *CarsModelsGroupsParamsGroupBy {
	cmgpgb.fns = append(cmgpgb.fns, fns...)
	return cmgpgb
}

// Scan applies the selector query and scans the result into the given value.
func (cmgpgb *CarsModelsGroupsParamsGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cmgpgb.build.ctx, ent.OpQueryGroupBy)
	if err := cmgpgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CarsModelsGroupsParamsQuery, *CarsModelsGroupsParamsGroupBy](ctx, cmgpgb.build, cmgpgb, cmgpgb.build.inters, v)
}

func (cmgpgb *CarsModelsGroupsParamsGroupBy) sqlScan(ctx context.Context, root *CarsModelsGroupsParamsQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cmgpgb.fns))
	for _, fn := range cmgpgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cmgpgb.flds)+len(cmgpgb.fns))
		for _, f := range *cmgpgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cmgpgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cmgpgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CarsModelsGroupsParamsSelect is the builder for selecting fields of CarsModelsGroupsParams entities.
type CarsModelsGroupsParamsSelect struct {
	*CarsModelsGroupsParamsQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cmgps *CarsModelsGroupsParamsSelect) Aggregate(fns ...AggregateFunc) *CarsModelsGroupsParamsSelect {
	cmgps.fns = append(cmgps.fns, fns...)
	return cmgps
}

// Scan applies the selector query and scans the result into the given value.
func (cmgps *CarsModelsGroupsParamsSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cmgps.ctx, ent.OpQuerySelect)
	if err := cmgps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CarsModelsGroupsParamsQuery, *CarsModelsGroupsParamsSelect](ctx, cmgps.CarsModelsGroupsParamsQuery, cmgps, cmgps.inters, v)
}

func (cmgps *CarsModelsGroupsParamsSelect) sqlScan(ctx context.Context, root *CarsModelsGroupsParamsQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cmgps.fns))
	for _, fn := range cmgps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cmgps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cmgps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
