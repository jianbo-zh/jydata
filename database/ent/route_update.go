// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"github.com/jianbo-zh/jydata/database/ent/route"
	"github.com/jianbo-zh/jydata/database/schema/types"
)

// RouteUpdate is the builder for updating Route entities.
type RouteUpdate struct {
	config
	hooks    []Hook
	mutation *RouteMutation
}

// Where appends a list predicates to the RouteUpdate builder.
func (ru *RouteUpdate) Where(ps ...predicate.Route) *RouteUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetDeleteTime sets the "delete_time" field.
func (ru *RouteUpdate) SetDeleteTime(t time.Time) *RouteUpdate {
	ru.mutation.SetDeleteTime(t)
	return ru
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (ru *RouteUpdate) SetNillableDeleteTime(t *time.Time) *RouteUpdate {
	if t != nil {
		ru.SetDeleteTime(*t)
	}
	return ru
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (ru *RouteUpdate) ClearDeleteTime() *RouteUpdate {
	ru.mutation.ClearDeleteTime()
	return ru
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (ru *RouteUpdate) SetScenicAreaID(i int) *RouteUpdate {
	ru.mutation.ResetScenicAreaID()
	ru.mutation.SetScenicAreaID(i)
	return ru
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (ru *RouteUpdate) SetNillableScenicAreaID(i *int) *RouteUpdate {
	if i != nil {
		ru.SetScenicAreaID(*i)
	}
	return ru
}

// AddScenicAreaID adds i to the "scenic_area_id" field.
func (ru *RouteUpdate) AddScenicAreaID(i int) *RouteUpdate {
	ru.mutation.AddScenicAreaID(i)
	return ru
}

// SetType sets the "type" field.
func (ru *RouteUpdate) SetType(i int) *RouteUpdate {
	ru.mutation.ResetType()
	ru.mutation.SetType(i)
	return ru
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ru *RouteUpdate) SetNillableType(i *int) *RouteUpdate {
	if i != nil {
		ru.SetType(*i)
	}
	return ru
}

// AddType adds i to the "type" field.
func (ru *RouteUpdate) AddType(i int) *RouteUpdate {
	ru.mutation.AddType(i)
	return ru
}

// SetName sets the "name" field.
func (ru *RouteUpdate) SetName(s string) *RouteUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ru *RouteUpdate) SetNillableName(s *string) *RouteUpdate {
	if s != nil {
		ru.SetName(*s)
	}
	return ru
}

// SetPoiIds sets the "poi_ids" field.
func (ru *RouteUpdate) SetPoiIds(i []int) *RouteUpdate {
	ru.mutation.SetPoiIds(i)
	return ru
}

// AppendPoiIds appends i to the "poi_ids" field.
func (ru *RouteUpdate) AppendPoiIds(i []int) *RouteUpdate {
	ru.mutation.AppendPoiIds(i)
	return ru
}

// SetRoutingPath sets the "routing_path" field.
func (ru *RouteUpdate) SetRoutingPath(tp *types.RoutingPath) *RouteUpdate {
	ru.mutation.SetRoutingPath(tp)
	return ru
}

// ClearRoutingPath clears the value of the "routing_path" field.
func (ru *RouteUpdate) ClearRoutingPath() *RouteUpdate {
	ru.mutation.ClearRoutingPath()
	return ru
}

// SetRemark sets the "remark" field.
func (ru *RouteUpdate) SetRemark(s string) *RouteUpdate {
	ru.mutation.SetRemark(s)
	return ru
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ru *RouteUpdate) SetNillableRemark(s *string) *RouteUpdate {
	if s != nil {
		ru.SetRemark(*s)
	}
	return ru
}

// SetUpdateTime sets the "update_time" field.
func (ru *RouteUpdate) SetUpdateTime(t time.Time) *RouteUpdate {
	ru.mutation.SetUpdateTime(t)
	return ru
}

// Mutation returns the RouteMutation object of the builder.
func (ru *RouteUpdate) Mutation() *RouteMutation {
	return ru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RouteUpdate) Save(ctx context.Context) (int, error) {
	if err := ru.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RouteUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RouteUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RouteUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RouteUpdate) defaults() error {
	if _, ok := ru.mutation.UpdateTime(); !ok {
		if route.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized route.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := route.UpdateDefaultUpdateTime()
		ru.mutation.SetUpdateTime(v)
	}
	return nil
}

func (ru *RouteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(route.Table, route.Columns, sqlgraph.NewFieldSpec(route.FieldID, field.TypeInt))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.DeleteTime(); ok {
		_spec.SetField(route.FieldDeleteTime, field.TypeTime, value)
	}
	if ru.mutation.DeleteTimeCleared() {
		_spec.ClearField(route.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := ru.mutation.ScenicAreaID(); ok {
		_spec.SetField(route.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedScenicAreaID(); ok {
		_spec.AddField(route.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := ru.mutation.GetType(); ok {
		_spec.SetField(route.FieldType, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedType(); ok {
		_spec.AddField(route.FieldType, field.TypeInt, value)
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.SetField(route.FieldName, field.TypeString, value)
	}
	if value, ok := ru.mutation.PoiIds(); ok {
		_spec.SetField(route.FieldPoiIds, field.TypeJSON, value)
	}
	if value, ok := ru.mutation.AppendedPoiIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, route.FieldPoiIds, value)
		})
	}
	if value, ok := ru.mutation.RoutingPath(); ok {
		_spec.SetField(route.FieldRoutingPath, field.TypeJSON, value)
	}
	if ru.mutation.RoutingPathCleared() {
		_spec.ClearField(route.FieldRoutingPath, field.TypeJSON)
	}
	if value, ok := ru.mutation.Remark(); ok {
		_spec.SetField(route.FieldRemark, field.TypeString, value)
	}
	if value, ok := ru.mutation.UpdateTime(); ok {
		_spec.SetField(route.FieldUpdateTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{route.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RouteUpdateOne is the builder for updating a single Route entity.
type RouteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RouteMutation
}

// SetDeleteTime sets the "delete_time" field.
func (ruo *RouteUpdateOne) SetDeleteTime(t time.Time) *RouteUpdateOne {
	ruo.mutation.SetDeleteTime(t)
	return ruo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (ruo *RouteUpdateOne) SetNillableDeleteTime(t *time.Time) *RouteUpdateOne {
	if t != nil {
		ruo.SetDeleteTime(*t)
	}
	return ruo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (ruo *RouteUpdateOne) ClearDeleteTime() *RouteUpdateOne {
	ruo.mutation.ClearDeleteTime()
	return ruo
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (ruo *RouteUpdateOne) SetScenicAreaID(i int) *RouteUpdateOne {
	ruo.mutation.ResetScenicAreaID()
	ruo.mutation.SetScenicAreaID(i)
	return ruo
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (ruo *RouteUpdateOne) SetNillableScenicAreaID(i *int) *RouteUpdateOne {
	if i != nil {
		ruo.SetScenicAreaID(*i)
	}
	return ruo
}

// AddScenicAreaID adds i to the "scenic_area_id" field.
func (ruo *RouteUpdateOne) AddScenicAreaID(i int) *RouteUpdateOne {
	ruo.mutation.AddScenicAreaID(i)
	return ruo
}

// SetType sets the "type" field.
func (ruo *RouteUpdateOne) SetType(i int) *RouteUpdateOne {
	ruo.mutation.ResetType()
	ruo.mutation.SetType(i)
	return ruo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ruo *RouteUpdateOne) SetNillableType(i *int) *RouteUpdateOne {
	if i != nil {
		ruo.SetType(*i)
	}
	return ruo
}

// AddType adds i to the "type" field.
func (ruo *RouteUpdateOne) AddType(i int) *RouteUpdateOne {
	ruo.mutation.AddType(i)
	return ruo
}

// SetName sets the "name" field.
func (ruo *RouteUpdateOne) SetName(s string) *RouteUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ruo *RouteUpdateOne) SetNillableName(s *string) *RouteUpdateOne {
	if s != nil {
		ruo.SetName(*s)
	}
	return ruo
}

// SetPoiIds sets the "poi_ids" field.
func (ruo *RouteUpdateOne) SetPoiIds(i []int) *RouteUpdateOne {
	ruo.mutation.SetPoiIds(i)
	return ruo
}

// AppendPoiIds appends i to the "poi_ids" field.
func (ruo *RouteUpdateOne) AppendPoiIds(i []int) *RouteUpdateOne {
	ruo.mutation.AppendPoiIds(i)
	return ruo
}

// SetRoutingPath sets the "routing_path" field.
func (ruo *RouteUpdateOne) SetRoutingPath(tp *types.RoutingPath) *RouteUpdateOne {
	ruo.mutation.SetRoutingPath(tp)
	return ruo
}

// ClearRoutingPath clears the value of the "routing_path" field.
func (ruo *RouteUpdateOne) ClearRoutingPath() *RouteUpdateOne {
	ruo.mutation.ClearRoutingPath()
	return ruo
}

// SetRemark sets the "remark" field.
func (ruo *RouteUpdateOne) SetRemark(s string) *RouteUpdateOne {
	ruo.mutation.SetRemark(s)
	return ruo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ruo *RouteUpdateOne) SetNillableRemark(s *string) *RouteUpdateOne {
	if s != nil {
		ruo.SetRemark(*s)
	}
	return ruo
}

// SetUpdateTime sets the "update_time" field.
func (ruo *RouteUpdateOne) SetUpdateTime(t time.Time) *RouteUpdateOne {
	ruo.mutation.SetUpdateTime(t)
	return ruo
}

// Mutation returns the RouteMutation object of the builder.
func (ruo *RouteUpdateOne) Mutation() *RouteMutation {
	return ruo.mutation
}

// Where appends a list predicates to the RouteUpdate builder.
func (ruo *RouteUpdateOne) Where(ps ...predicate.Route) *RouteUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RouteUpdateOne) Select(field string, fields ...string) *RouteUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Route entity.
func (ruo *RouteUpdateOne) Save(ctx context.Context) (*Route, error) {
	if err := ruo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RouteUpdateOne) SaveX(ctx context.Context) *Route {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RouteUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RouteUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RouteUpdateOne) defaults() error {
	if _, ok := ruo.mutation.UpdateTime(); !ok {
		if route.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized route.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := route.UpdateDefaultUpdateTime()
		ruo.mutation.SetUpdateTime(v)
	}
	return nil
}

func (ruo *RouteUpdateOne) sqlSave(ctx context.Context) (_node *Route, err error) {
	_spec := sqlgraph.NewUpdateSpec(route.Table, route.Columns, sqlgraph.NewFieldSpec(route.FieldID, field.TypeInt))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Route.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, route.FieldID)
		for _, f := range fields {
			if !route.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != route.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.DeleteTime(); ok {
		_spec.SetField(route.FieldDeleteTime, field.TypeTime, value)
	}
	if ruo.mutation.DeleteTimeCleared() {
		_spec.ClearField(route.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := ruo.mutation.ScenicAreaID(); ok {
		_spec.SetField(route.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedScenicAreaID(); ok {
		_spec.AddField(route.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.GetType(); ok {
		_spec.SetField(route.FieldType, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedType(); ok {
		_spec.AddField(route.FieldType, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.SetField(route.FieldName, field.TypeString, value)
	}
	if value, ok := ruo.mutation.PoiIds(); ok {
		_spec.SetField(route.FieldPoiIds, field.TypeJSON, value)
	}
	if value, ok := ruo.mutation.AppendedPoiIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, route.FieldPoiIds, value)
		})
	}
	if value, ok := ruo.mutation.RoutingPath(); ok {
		_spec.SetField(route.FieldRoutingPath, field.TypeJSON, value)
	}
	if ruo.mutation.RoutingPathCleared() {
		_spec.ClearField(route.FieldRoutingPath, field.TypeJSON)
	}
	if value, ok := ruo.mutation.Remark(); ok {
		_spec.SetField(route.FieldRemark, field.TypeString, value)
	}
	if value, ok := ruo.mutation.UpdateTime(); ok {
		_spec.SetField(route.FieldUpdateTime, field.TypeTime, value)
	}
	_node = &Route{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{route.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
