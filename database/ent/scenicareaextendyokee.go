// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jianbo-zh/jydata/database/ent/scenicareaextendyokee"
)

// ScenicAreaExtendYokee is the model entity for the ScenicAreaExtendYokee schema.
type ScenicAreaExtendYokee struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 景点ID
	ScenicAreaID int `json:"scenic_area_id,omitempty"`
	// 九识分配的AppID
	YokeeAppID string `json:"yokee_app_id,omitempty"`
	// 九识分配的AppKey
	YokeeAppKey string `json:"yokee_app_key,omitempty"`
	// 九识分配的公司ID
	YokeeOrgID int `json:"yokee_org_id,omitempty"`
	// 九识分配的公司名称
	YokeeOrgName string `json:"yokee_org_name,omitempty"`
	// 九识分配的站点ID
	YokeeStationID int `json:"yokee_station_id,omitempty"`
	// 九识分配的站点名称
	YokeeStationName string `json:"yokee_station_name,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime   time.Time `json:"update_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ScenicAreaExtendYokee) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case scenicareaextendyokee.FieldID, scenicareaextendyokee.FieldScenicAreaID, scenicareaextendyokee.FieldYokeeOrgID, scenicareaextendyokee.FieldYokeeStationID:
			values[i] = new(sql.NullInt64)
		case scenicareaextendyokee.FieldYokeeAppID, scenicareaextendyokee.FieldYokeeAppKey, scenicareaextendyokee.FieldYokeeOrgName, scenicareaextendyokee.FieldYokeeStationName:
			values[i] = new(sql.NullString)
		case scenicareaextendyokee.FieldCreateTime, scenicareaextendyokee.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ScenicAreaExtendYokee fields.
func (saey *ScenicAreaExtendYokee) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case scenicareaextendyokee.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			saey.ID = int(value.Int64)
		case scenicareaextendyokee.FieldScenicAreaID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field scenic_area_id", values[i])
			} else if value.Valid {
				saey.ScenicAreaID = int(value.Int64)
			}
		case scenicareaextendyokee.FieldYokeeAppID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field yokee_app_id", values[i])
			} else if value.Valid {
				saey.YokeeAppID = value.String
			}
		case scenicareaextendyokee.FieldYokeeAppKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field yokee_app_key", values[i])
			} else if value.Valid {
				saey.YokeeAppKey = value.String
			}
		case scenicareaextendyokee.FieldYokeeOrgID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field yokee_org_id", values[i])
			} else if value.Valid {
				saey.YokeeOrgID = int(value.Int64)
			}
		case scenicareaextendyokee.FieldYokeeOrgName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field yokee_org_name", values[i])
			} else if value.Valid {
				saey.YokeeOrgName = value.String
			}
		case scenicareaextendyokee.FieldYokeeStationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field yokee_station_id", values[i])
			} else if value.Valid {
				saey.YokeeStationID = int(value.Int64)
			}
		case scenicareaextendyokee.FieldYokeeStationName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field yokee_station_name", values[i])
			} else if value.Valid {
				saey.YokeeStationName = value.String
			}
		case scenicareaextendyokee.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				saey.CreateTime = value.Time
			}
		case scenicareaextendyokee.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				saey.UpdateTime = value.Time
			}
		default:
			saey.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ScenicAreaExtendYokee.
// This includes values selected through modifiers, order, etc.
func (saey *ScenicAreaExtendYokee) Value(name string) (ent.Value, error) {
	return saey.selectValues.Get(name)
}

// Update returns a builder for updating this ScenicAreaExtendYokee.
// Note that you need to call ScenicAreaExtendYokee.Unwrap() before calling this method if this ScenicAreaExtendYokee
// was returned from a transaction, and the transaction was committed or rolled back.
func (saey *ScenicAreaExtendYokee) Update() *ScenicAreaExtendYokeeUpdateOne {
	return NewScenicAreaExtendYokeeClient(saey.config).UpdateOne(saey)
}

// Unwrap unwraps the ScenicAreaExtendYokee entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (saey *ScenicAreaExtendYokee) Unwrap() *ScenicAreaExtendYokee {
	_tx, ok := saey.config.driver.(*txDriver)
	if !ok {
		panic("ent: ScenicAreaExtendYokee is not a transactional entity")
	}
	saey.config.driver = _tx.drv
	return saey
}

// String implements the fmt.Stringer.
func (saey *ScenicAreaExtendYokee) String() string {
	var builder strings.Builder
	builder.WriteString("ScenicAreaExtendYokee(")
	builder.WriteString(fmt.Sprintf("id=%v, ", saey.ID))
	builder.WriteString("scenic_area_id=")
	builder.WriteString(fmt.Sprintf("%v", saey.ScenicAreaID))
	builder.WriteString(", ")
	builder.WriteString("yokee_app_id=")
	builder.WriteString(saey.YokeeAppID)
	builder.WriteString(", ")
	builder.WriteString("yokee_app_key=")
	builder.WriteString(saey.YokeeAppKey)
	builder.WriteString(", ")
	builder.WriteString("yokee_org_id=")
	builder.WriteString(fmt.Sprintf("%v", saey.YokeeOrgID))
	builder.WriteString(", ")
	builder.WriteString("yokee_org_name=")
	builder.WriteString(saey.YokeeOrgName)
	builder.WriteString(", ")
	builder.WriteString("yokee_station_id=")
	builder.WriteString(fmt.Sprintf("%v", saey.YokeeStationID))
	builder.WriteString(", ")
	builder.WriteString("yokee_station_name=")
	builder.WriteString(saey.YokeeStationName)
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(saey.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(saey.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ScenicAreaExtendYokees is a parsable slice of ScenicAreaExtendYokee.
type ScenicAreaExtendYokees []*ScenicAreaExtendYokee
