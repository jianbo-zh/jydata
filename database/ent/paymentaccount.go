// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jianbo-zh/jydata/database/ent/paymentaccount"
)

// PaymentAccount is the model entity for the PaymentAccount schema.
type PaymentAccount struct {
	config `json:"-"`
	// ID of the ent.
	// id
	ID int `json:"id,omitempty"`
	// 商户名称
	MchName string `json:"mch_name,omitempty"`
	// 商户ID
	MchID string `json:"mch_id,omitempty"`
	// 商户证书序号
	MchCertSn string `json:"mch_cert_sn,omitempty"`
	// 商户APIV3密钥
	MchApiv3Key string `json:"mch_apiv3_key,omitempty"`
	// 商户证书私钥
	MchPrivateKey string `json:"mch_private_key,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime   time.Time `json:"update_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PaymentAccount) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case paymentaccount.FieldID:
			values[i] = new(sql.NullInt64)
		case paymentaccount.FieldMchName, paymentaccount.FieldMchID, paymentaccount.FieldMchCertSn, paymentaccount.FieldMchApiv3Key, paymentaccount.FieldMchPrivateKey:
			values[i] = new(sql.NullString)
		case paymentaccount.FieldCreateTime, paymentaccount.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PaymentAccount fields.
func (pa *PaymentAccount) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case paymentaccount.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pa.ID = int(value.Int64)
		case paymentaccount.FieldMchName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mch_name", values[i])
			} else if value.Valid {
				pa.MchName = value.String
			}
		case paymentaccount.FieldMchID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mch_id", values[i])
			} else if value.Valid {
				pa.MchID = value.String
			}
		case paymentaccount.FieldMchCertSn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mch_cert_sn", values[i])
			} else if value.Valid {
				pa.MchCertSn = value.String
			}
		case paymentaccount.FieldMchApiv3Key:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mch_apiv3_key", values[i])
			} else if value.Valid {
				pa.MchApiv3Key = value.String
			}
		case paymentaccount.FieldMchPrivateKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mch_private_key", values[i])
			} else if value.Valid {
				pa.MchPrivateKey = value.String
			}
		case paymentaccount.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				pa.CreateTime = value.Time
			}
		case paymentaccount.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				pa.UpdateTime = value.Time
			}
		default:
			pa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PaymentAccount.
// This includes values selected through modifiers, order, etc.
func (pa *PaymentAccount) Value(name string) (ent.Value, error) {
	return pa.selectValues.Get(name)
}

// Update returns a builder for updating this PaymentAccount.
// Note that you need to call PaymentAccount.Unwrap() before calling this method if this PaymentAccount
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *PaymentAccount) Update() *PaymentAccountUpdateOne {
	return NewPaymentAccountClient(pa.config).UpdateOne(pa)
}

// Unwrap unwraps the PaymentAccount entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *PaymentAccount) Unwrap() *PaymentAccount {
	_tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: PaymentAccount is not a transactional entity")
	}
	pa.config.driver = _tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *PaymentAccount) String() string {
	var builder strings.Builder
	builder.WriteString("PaymentAccount(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pa.ID))
	builder.WriteString("mch_name=")
	builder.WriteString(pa.MchName)
	builder.WriteString(", ")
	builder.WriteString("mch_id=")
	builder.WriteString(pa.MchID)
	builder.WriteString(", ")
	builder.WriteString("mch_cert_sn=")
	builder.WriteString(pa.MchCertSn)
	builder.WriteString(", ")
	builder.WriteString("mch_apiv3_key=")
	builder.WriteString(pa.MchApiv3Key)
	builder.WriteString(", ")
	builder.WriteString("mch_private_key=")
	builder.WriteString(pa.MchPrivateKey)
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(pa.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(pa.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// PaymentAccounts is a parsable slice of PaymentAccount.
type PaymentAccounts []*PaymentAccount
