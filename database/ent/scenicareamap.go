// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/scenicarea"
	"github.com/jianbo-zh/jydata/database/ent/scenicareamap"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ScenicAreaMap is the model entity for the ScenicAreaMap schema.
type ScenicAreaMap struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 景区ID
	ScenicAreaID int `json:"scenic_area_id,omitempty"`
	// 地图名称
	Name string `json:"name,omitempty"`
	// 规划地图
	BaseMapFileID int `json:"base_map_file_id,omitempty"`
	// 路由地图
	RoutingMapFileID int `json:"routing_map_file_id,omitempty"`
	// dv使用，降采样
	SimMapFileID int `json:"sim_map_file_id,omitempty"`
	// 围栏地图
	FenceMapFileID int `json:"fence_map_file_id,omitempty"`
	// CarUI地图
	CaruiMapFileID int `json:"carui_map_file_id,omitempty"`
	// CarUI坐标(东北)
	CaruiNeCoord string `json:"carui_ne_coord,omitempty"`
	// CarUI坐标(西南)
	CaruiSwCoord string `json:"carui_sw_coord,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ScenicAreaMapQuery when eager-loading is set.
	Edges        ScenicAreaMapEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ScenicAreaMapEdges holds the relations/edges for other nodes in the graph.
type ScenicAreaMapEdges struct {
	// BackgroundScenicArea holds the value of the background_scenic_area edge.
	BackgroundScenicArea *ScenicArea `json:"background_scenic_area,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BackgroundScenicAreaOrErr returns the BackgroundScenicArea value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScenicAreaMapEdges) BackgroundScenicAreaOrErr() (*ScenicArea, error) {
	if e.BackgroundScenicArea != nil {
		return e.BackgroundScenicArea, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: scenicarea.Label}
	}
	return nil, &NotLoadedError{edge: "background_scenic_area"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ScenicAreaMap) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case scenicareamap.FieldID, scenicareamap.FieldScenicAreaID, scenicareamap.FieldBaseMapFileID, scenicareamap.FieldRoutingMapFileID, scenicareamap.FieldSimMapFileID, scenicareamap.FieldFenceMapFileID, scenicareamap.FieldCaruiMapFileID:
			values[i] = new(sql.NullInt64)
		case scenicareamap.FieldName, scenicareamap.FieldCaruiNeCoord, scenicareamap.FieldCaruiSwCoord:
			values[i] = new(sql.NullString)
		case scenicareamap.FieldCreateTime, scenicareamap.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ScenicAreaMap fields.
func (sam *ScenicAreaMap) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case scenicareamap.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sam.ID = int(value.Int64)
		case scenicareamap.FieldScenicAreaID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field scenic_area_id", values[i])
			} else if value.Valid {
				sam.ScenicAreaID = int(value.Int64)
			}
		case scenicareamap.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				sam.Name = value.String
			}
		case scenicareamap.FieldBaseMapFileID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field base_map_file_id", values[i])
			} else if value.Valid {
				sam.BaseMapFileID = int(value.Int64)
			}
		case scenicareamap.FieldRoutingMapFileID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field routing_map_file_id", values[i])
			} else if value.Valid {
				sam.RoutingMapFileID = int(value.Int64)
			}
		case scenicareamap.FieldSimMapFileID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sim_map_file_id", values[i])
			} else if value.Valid {
				sam.SimMapFileID = int(value.Int64)
			}
		case scenicareamap.FieldFenceMapFileID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field fence_map_file_id", values[i])
			} else if value.Valid {
				sam.FenceMapFileID = int(value.Int64)
			}
		case scenicareamap.FieldCaruiMapFileID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field carui_map_file_id", values[i])
			} else if value.Valid {
				sam.CaruiMapFileID = int(value.Int64)
			}
		case scenicareamap.FieldCaruiNeCoord:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field carui_ne_coord", values[i])
			} else if value.Valid {
				sam.CaruiNeCoord = value.String
			}
		case scenicareamap.FieldCaruiSwCoord:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field carui_sw_coord", values[i])
			} else if value.Valid {
				sam.CaruiSwCoord = value.String
			}
		case scenicareamap.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				sam.CreateTime = value.Time
			}
		case scenicareamap.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				sam.UpdateTime = value.Time
			}
		default:
			sam.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ScenicAreaMap.
// This includes values selected through modifiers, order, etc.
func (sam *ScenicAreaMap) Value(name string) (ent.Value, error) {
	return sam.selectValues.Get(name)
}

// QueryBackgroundScenicArea queries the "background_scenic_area" edge of the ScenicAreaMap entity.
func (sam *ScenicAreaMap) QueryBackgroundScenicArea() *ScenicAreaQuery {
	return NewScenicAreaMapClient(sam.config).QueryBackgroundScenicArea(sam)
}

// Update returns a builder for updating this ScenicAreaMap.
// Note that you need to call ScenicAreaMap.Unwrap() before calling this method if this ScenicAreaMap
// was returned from a transaction, and the transaction was committed or rolled back.
func (sam *ScenicAreaMap) Update() *ScenicAreaMapUpdateOne {
	return NewScenicAreaMapClient(sam.config).UpdateOne(sam)
}

// Unwrap unwraps the ScenicAreaMap entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sam *ScenicAreaMap) Unwrap() *ScenicAreaMap {
	_tx, ok := sam.config.driver.(*txDriver)
	if !ok {
		panic("ent: ScenicAreaMap is not a transactional entity")
	}
	sam.config.driver = _tx.drv
	return sam
}

// String implements the fmt.Stringer.
func (sam *ScenicAreaMap) String() string {
	var builder strings.Builder
	builder.WriteString("ScenicAreaMap(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sam.ID))
	builder.WriteString("scenic_area_id=")
	builder.WriteString(fmt.Sprintf("%v", sam.ScenicAreaID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(sam.Name)
	builder.WriteString(", ")
	builder.WriteString("base_map_file_id=")
	builder.WriteString(fmt.Sprintf("%v", sam.BaseMapFileID))
	builder.WriteString(", ")
	builder.WriteString("routing_map_file_id=")
	builder.WriteString(fmt.Sprintf("%v", sam.RoutingMapFileID))
	builder.WriteString(", ")
	builder.WriteString("sim_map_file_id=")
	builder.WriteString(fmt.Sprintf("%v", sam.SimMapFileID))
	builder.WriteString(", ")
	builder.WriteString("fence_map_file_id=")
	builder.WriteString(fmt.Sprintf("%v", sam.FenceMapFileID))
	builder.WriteString(", ")
	builder.WriteString("carui_map_file_id=")
	builder.WriteString(fmt.Sprintf("%v", sam.CaruiMapFileID))
	builder.WriteString(", ")
	builder.WriteString("carui_ne_coord=")
	builder.WriteString(sam.CaruiNeCoord)
	builder.WriteString(", ")
	builder.WriteString("carui_sw_coord=")
	builder.WriteString(sam.CaruiSwCoord)
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(sam.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(sam.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ScenicAreaMaps is a parsable slice of ScenicAreaMap.
type ScenicAreaMaps []*ScenicAreaMap
