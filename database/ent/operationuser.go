// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jianbo-zh/jydata/database/ent/operationuser"
)

// OperationUser is the model entity for the OperationUser schema.
type OperationUser struct {
	config `json:"-"`
	// ID of the ent.
	// 唯一标识
	ID int `json:"id,omitempty"`
	// 景区ID
	ScenicAreaID int `json:"scenic_area_id,omitempty"`
	// 性名
	Username string `json:"username,omitempty"`
	// 微信昵称
	Nickname string `json:"nickname,omitempty"`
	// 手机号
	Phone string `json:"phone,omitempty"`
	// 密码
	Password string `json:"-"`
	// 微信openid(唯一标识)
	OpenID string `json:"open_id,omitempty"`
	// 微信头像
	AvatarURL string `json:"avatar_url,omitempty"`
	// 状态：0 - 不可用，1 - 可用
	Status int `json:"status,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime   time.Time `json:"update_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OperationUser) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case operationuser.FieldID, operationuser.FieldScenicAreaID, operationuser.FieldStatus:
			values[i] = new(sql.NullInt64)
		case operationuser.FieldUsername, operationuser.FieldNickname, operationuser.FieldPhone, operationuser.FieldPassword, operationuser.FieldOpenID, operationuser.FieldAvatarURL:
			values[i] = new(sql.NullString)
		case operationuser.FieldCreateTime, operationuser.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OperationUser fields.
func (ou *OperationUser) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case operationuser.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ou.ID = int(value.Int64)
		case operationuser.FieldScenicAreaID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field scenic_area_id", values[i])
			} else if value.Valid {
				ou.ScenicAreaID = int(value.Int64)
			}
		case operationuser.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				ou.Username = value.String
			}
		case operationuser.FieldNickname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nickname", values[i])
			} else if value.Valid {
				ou.Nickname = value.String
			}
		case operationuser.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				ou.Phone = value.String
			}
		case operationuser.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				ou.Password = value.String
			}
		case operationuser.FieldOpenID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field open_id", values[i])
			} else if value.Valid {
				ou.OpenID = value.String
			}
		case operationuser.FieldAvatarURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar_url", values[i])
			} else if value.Valid {
				ou.AvatarURL = value.String
			}
		case operationuser.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ou.Status = int(value.Int64)
			}
		case operationuser.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ou.CreateTime = value.Time
			}
		case operationuser.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ou.UpdateTime = value.Time
			}
		default:
			ou.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OperationUser.
// This includes values selected through modifiers, order, etc.
func (ou *OperationUser) Value(name string) (ent.Value, error) {
	return ou.selectValues.Get(name)
}

// Update returns a builder for updating this OperationUser.
// Note that you need to call OperationUser.Unwrap() before calling this method if this OperationUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (ou *OperationUser) Update() *OperationUserUpdateOne {
	return NewOperationUserClient(ou.config).UpdateOne(ou)
}

// Unwrap unwraps the OperationUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ou *OperationUser) Unwrap() *OperationUser {
	_tx, ok := ou.config.driver.(*txDriver)
	if !ok {
		panic("ent: OperationUser is not a transactional entity")
	}
	ou.config.driver = _tx.drv
	return ou
}

// String implements the fmt.Stringer.
func (ou *OperationUser) String() string {
	var builder strings.Builder
	builder.WriteString("OperationUser(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ou.ID))
	builder.WriteString("scenic_area_id=")
	builder.WriteString(fmt.Sprintf("%v", ou.ScenicAreaID))
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(ou.Username)
	builder.WriteString(", ")
	builder.WriteString("nickname=")
	builder.WriteString(ou.Nickname)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(ou.Phone)
	builder.WriteString(", ")
	builder.WriteString("password=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("open_id=")
	builder.WriteString(ou.OpenID)
	builder.WriteString(", ")
	builder.WriteString("avatar_url=")
	builder.WriteString(ou.AvatarURL)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", ou.Status))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(ou.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(ou.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// OperationUsers is a parsable slice of OperationUser.
type OperationUsers []*OperationUser
