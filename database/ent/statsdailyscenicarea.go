// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jianbo-zh/jydata/database/ent/statsdailyscenicarea"
)

// StatsDailyScenicArea is the model entity for the StatsDailyScenicArea schema.
type StatsDailyScenicArea struct {
	config `json:"-"`
	// ID of the ent.
	// ID
	ID int `json:"id,omitempty"`
	// 景区ID
	ScenicAreaID int `json:"scenic_area_id,omitempty"`
	// 年
	Y int `json:"y,omitempty"`
	// 月
	M int `json:"m,omitempty"`
	// 日
	D int `json:"d,omitempty"`
	// 第几周
	Week int `json:"week,omitempty"`
	// 星期几(1,2,3,4,5,6,7)
	Weekday int `json:"weekday,omitempty"`
	// 时间段(1-工作日、2-周末、3-节假日)
	Period int `json:"period,omitempty"`
	// 登录用户数
	UserCountLogin int `json:"user_count_login,omitempty"`
	// 注册用户数
	UserCountRegister int `json:"user_count_register,omitempty"`
	// 下单用户数
	UserCountOrder int `json:"user_count_order,omitempty"`
	// 登录且下单用户数
	UserCountLoginorder int `json:"user_count_loginorder,omitempty"`
	// 新增订单数
	OrderCountCreate int `json:"order_count_create,omitempty"`
	// 完成订单数
	OrderCountFinish int `json:"order_count_finish,omitempty"`
	// 取消订单数
	OrderCountCancel int `json:"order_count_cancel,omitempty"`
	// 订单额（分）
	OrderAmount int `json:"order_amount,omitempty"`
	// 订单时长（秒）
	OrderDuration int `json:"order_duration,omitempty"`
	// 订单距离（米）
	OrderMileage int `json:"order_mileage,omitempty"`
	// 投放车辆数量
	CarCountDeploy int `json:"car_count_deploy,omitempty"`
	// 运营车辆数量
	CarCountOperation int `json:"car_count_operation,omitempty"`
	// 运营手动时长（秒）
	CarOperationManualDuration float32 `json:"car_operation_manual_duration,omitempty"`
	// 运营自动时长（秒）
	CarOperationAutoDuration float32 `json:"car_operation_auto_duration,omitempty"`
	// 车辆正常态运营时长（秒）
	CarOperationNormalDuration float32 `json:"car_operation_normal_duration,omitempty"`
	// 车辆故障态运营时长（秒）
	CarOperationFaultDuration float32 `json:"car_operation_fault_duration,omitempty"`
	// 车辆运营里程（米）
	CarOperationMileage float32 `json:"car_operation_mileage,omitempty"`
	// 车辆运营故障次数
	CarOperationFaultTimes uint32 `json:"car_operation_fault_times,omitempty"`
	// 运维手动时长（秒）
	CarMaintainManualDuration float32 `json:"car_maintain_manual_duration,omitempty"`
	// 运维自动时长（秒）
	CarMaintainAutoDuration float32 `json:"car_maintain_auto_duration,omitempty"`
	// 车辆正常态运维时长（秒）
	CarMaintainNormalDuration float32 `json:"car_maintain_normal_duration,omitempty"`
	// 车辆故障态运维时长（秒）
	CarMaintainFaultDuration float32 `json:"car_maintain_fault_duration,omitempty"`
	// 车辆运维里程（米）
	CarMaintainMileage float32 `json:"car_maintain_mileage,omitempty"`
	// 车辆运维故障次数
	CarMaintainFaultTimes uint32 `json:"car_maintain_fault_times,omitempty"`
	// 车辆告警次数
	CarAlarmTimes int `json:"car_alarm_times,omitempty"`
	// 统计的时间
	StatsTime time.Time `json:"stats_time,omitempty"`
	// 创建时间
	CreateTime   time.Time `json:"create_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StatsDailyScenicArea) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case statsdailyscenicarea.FieldCarOperationManualDuration, statsdailyscenicarea.FieldCarOperationAutoDuration, statsdailyscenicarea.FieldCarOperationNormalDuration, statsdailyscenicarea.FieldCarOperationFaultDuration, statsdailyscenicarea.FieldCarOperationMileage, statsdailyscenicarea.FieldCarMaintainManualDuration, statsdailyscenicarea.FieldCarMaintainAutoDuration, statsdailyscenicarea.FieldCarMaintainNormalDuration, statsdailyscenicarea.FieldCarMaintainFaultDuration, statsdailyscenicarea.FieldCarMaintainMileage:
			values[i] = new(sql.NullFloat64)
		case statsdailyscenicarea.FieldID, statsdailyscenicarea.FieldScenicAreaID, statsdailyscenicarea.FieldY, statsdailyscenicarea.FieldM, statsdailyscenicarea.FieldD, statsdailyscenicarea.FieldWeek, statsdailyscenicarea.FieldWeekday, statsdailyscenicarea.FieldPeriod, statsdailyscenicarea.FieldUserCountLogin, statsdailyscenicarea.FieldUserCountRegister, statsdailyscenicarea.FieldUserCountOrder, statsdailyscenicarea.FieldUserCountLoginorder, statsdailyscenicarea.FieldOrderCountCreate, statsdailyscenicarea.FieldOrderCountFinish, statsdailyscenicarea.FieldOrderCountCancel, statsdailyscenicarea.FieldOrderAmount, statsdailyscenicarea.FieldOrderDuration, statsdailyscenicarea.FieldOrderMileage, statsdailyscenicarea.FieldCarCountDeploy, statsdailyscenicarea.FieldCarCountOperation, statsdailyscenicarea.FieldCarOperationFaultTimes, statsdailyscenicarea.FieldCarMaintainFaultTimes, statsdailyscenicarea.FieldCarAlarmTimes:
			values[i] = new(sql.NullInt64)
		case statsdailyscenicarea.FieldStatsTime, statsdailyscenicarea.FieldCreateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StatsDailyScenicArea fields.
func (sdsa *StatsDailyScenicArea) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case statsdailyscenicarea.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sdsa.ID = int(value.Int64)
		case statsdailyscenicarea.FieldScenicAreaID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field scenic_area_id", values[i])
			} else if value.Valid {
				sdsa.ScenicAreaID = int(value.Int64)
			}
		case statsdailyscenicarea.FieldY:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field y", values[i])
			} else if value.Valid {
				sdsa.Y = int(value.Int64)
			}
		case statsdailyscenicarea.FieldM:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field m", values[i])
			} else if value.Valid {
				sdsa.M = int(value.Int64)
			}
		case statsdailyscenicarea.FieldD:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field d", values[i])
			} else if value.Valid {
				sdsa.D = int(value.Int64)
			}
		case statsdailyscenicarea.FieldWeek:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field week", values[i])
			} else if value.Valid {
				sdsa.Week = int(value.Int64)
			}
		case statsdailyscenicarea.FieldWeekday:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field weekday", values[i])
			} else if value.Valid {
				sdsa.Weekday = int(value.Int64)
			}
		case statsdailyscenicarea.FieldPeriod:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field period", values[i])
			} else if value.Valid {
				sdsa.Period = int(value.Int64)
			}
		case statsdailyscenicarea.FieldUserCountLogin:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_count_login", values[i])
			} else if value.Valid {
				sdsa.UserCountLogin = int(value.Int64)
			}
		case statsdailyscenicarea.FieldUserCountRegister:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_count_register", values[i])
			} else if value.Valid {
				sdsa.UserCountRegister = int(value.Int64)
			}
		case statsdailyscenicarea.FieldUserCountOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_count_order", values[i])
			} else if value.Valid {
				sdsa.UserCountOrder = int(value.Int64)
			}
		case statsdailyscenicarea.FieldUserCountLoginorder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_count_loginorder", values[i])
			} else if value.Valid {
				sdsa.UserCountLoginorder = int(value.Int64)
			}
		case statsdailyscenicarea.FieldOrderCountCreate:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_count_create", values[i])
			} else if value.Valid {
				sdsa.OrderCountCreate = int(value.Int64)
			}
		case statsdailyscenicarea.FieldOrderCountFinish:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_count_finish", values[i])
			} else if value.Valid {
				sdsa.OrderCountFinish = int(value.Int64)
			}
		case statsdailyscenicarea.FieldOrderCountCancel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_count_cancel", values[i])
			} else if value.Valid {
				sdsa.OrderCountCancel = int(value.Int64)
			}
		case statsdailyscenicarea.FieldOrderAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_amount", values[i])
			} else if value.Valid {
				sdsa.OrderAmount = int(value.Int64)
			}
		case statsdailyscenicarea.FieldOrderDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_duration", values[i])
			} else if value.Valid {
				sdsa.OrderDuration = int(value.Int64)
			}
		case statsdailyscenicarea.FieldOrderMileage:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_mileage", values[i])
			} else if value.Valid {
				sdsa.OrderMileage = int(value.Int64)
			}
		case statsdailyscenicarea.FieldCarCountDeploy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field car_count_deploy", values[i])
			} else if value.Valid {
				sdsa.CarCountDeploy = int(value.Int64)
			}
		case statsdailyscenicarea.FieldCarCountOperation:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field car_count_operation", values[i])
			} else if value.Valid {
				sdsa.CarCountOperation = int(value.Int64)
			}
		case statsdailyscenicarea.FieldCarOperationManualDuration:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field car_operation_manual_duration", values[i])
			} else if value.Valid {
				sdsa.CarOperationManualDuration = float32(value.Float64)
			}
		case statsdailyscenicarea.FieldCarOperationAutoDuration:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field car_operation_auto_duration", values[i])
			} else if value.Valid {
				sdsa.CarOperationAutoDuration = float32(value.Float64)
			}
		case statsdailyscenicarea.FieldCarOperationNormalDuration:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field car_operation_normal_duration", values[i])
			} else if value.Valid {
				sdsa.CarOperationNormalDuration = float32(value.Float64)
			}
		case statsdailyscenicarea.FieldCarOperationFaultDuration:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field car_operation_fault_duration", values[i])
			} else if value.Valid {
				sdsa.CarOperationFaultDuration = float32(value.Float64)
			}
		case statsdailyscenicarea.FieldCarOperationMileage:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field car_operation_mileage", values[i])
			} else if value.Valid {
				sdsa.CarOperationMileage = float32(value.Float64)
			}
		case statsdailyscenicarea.FieldCarOperationFaultTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field car_operation_fault_times", values[i])
			} else if value.Valid {
				sdsa.CarOperationFaultTimes = uint32(value.Int64)
			}
		case statsdailyscenicarea.FieldCarMaintainManualDuration:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field car_maintain_manual_duration", values[i])
			} else if value.Valid {
				sdsa.CarMaintainManualDuration = float32(value.Float64)
			}
		case statsdailyscenicarea.FieldCarMaintainAutoDuration:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field car_maintain_auto_duration", values[i])
			} else if value.Valid {
				sdsa.CarMaintainAutoDuration = float32(value.Float64)
			}
		case statsdailyscenicarea.FieldCarMaintainNormalDuration:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field car_maintain_normal_duration", values[i])
			} else if value.Valid {
				sdsa.CarMaintainNormalDuration = float32(value.Float64)
			}
		case statsdailyscenicarea.FieldCarMaintainFaultDuration:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field car_maintain_fault_duration", values[i])
			} else if value.Valid {
				sdsa.CarMaintainFaultDuration = float32(value.Float64)
			}
		case statsdailyscenicarea.FieldCarMaintainMileage:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field car_maintain_mileage", values[i])
			} else if value.Valid {
				sdsa.CarMaintainMileage = float32(value.Float64)
			}
		case statsdailyscenicarea.FieldCarMaintainFaultTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field car_maintain_fault_times", values[i])
			} else if value.Valid {
				sdsa.CarMaintainFaultTimes = uint32(value.Int64)
			}
		case statsdailyscenicarea.FieldCarAlarmTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field car_alarm_times", values[i])
			} else if value.Valid {
				sdsa.CarAlarmTimes = int(value.Int64)
			}
		case statsdailyscenicarea.FieldStatsTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field stats_time", values[i])
			} else if value.Valid {
				sdsa.StatsTime = value.Time
			}
		case statsdailyscenicarea.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				sdsa.CreateTime = value.Time
			}
		default:
			sdsa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the StatsDailyScenicArea.
// This includes values selected through modifiers, order, etc.
func (sdsa *StatsDailyScenicArea) Value(name string) (ent.Value, error) {
	return sdsa.selectValues.Get(name)
}

// Update returns a builder for updating this StatsDailyScenicArea.
// Note that you need to call StatsDailyScenicArea.Unwrap() before calling this method if this StatsDailyScenicArea
// was returned from a transaction, and the transaction was committed or rolled back.
func (sdsa *StatsDailyScenicArea) Update() *StatsDailyScenicAreaUpdateOne {
	return NewStatsDailyScenicAreaClient(sdsa.config).UpdateOne(sdsa)
}

// Unwrap unwraps the StatsDailyScenicArea entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sdsa *StatsDailyScenicArea) Unwrap() *StatsDailyScenicArea {
	_tx, ok := sdsa.config.driver.(*txDriver)
	if !ok {
		panic("ent: StatsDailyScenicArea is not a transactional entity")
	}
	sdsa.config.driver = _tx.drv
	return sdsa
}

// String implements the fmt.Stringer.
func (sdsa *StatsDailyScenicArea) String() string {
	var builder strings.Builder
	builder.WriteString("StatsDailyScenicArea(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sdsa.ID))
	builder.WriteString("scenic_area_id=")
	builder.WriteString(fmt.Sprintf("%v", sdsa.ScenicAreaID))
	builder.WriteString(", ")
	builder.WriteString("y=")
	builder.WriteString(fmt.Sprintf("%v", sdsa.Y))
	builder.WriteString(", ")
	builder.WriteString("m=")
	builder.WriteString(fmt.Sprintf("%v", sdsa.M))
	builder.WriteString(", ")
	builder.WriteString("d=")
	builder.WriteString(fmt.Sprintf("%v", sdsa.D))
	builder.WriteString(", ")
	builder.WriteString("week=")
	builder.WriteString(fmt.Sprintf("%v", sdsa.Week))
	builder.WriteString(", ")
	builder.WriteString("weekday=")
	builder.WriteString(fmt.Sprintf("%v", sdsa.Weekday))
	builder.WriteString(", ")
	builder.WriteString("period=")
	builder.WriteString(fmt.Sprintf("%v", sdsa.Period))
	builder.WriteString(", ")
	builder.WriteString("user_count_login=")
	builder.WriteString(fmt.Sprintf("%v", sdsa.UserCountLogin))
	builder.WriteString(", ")
	builder.WriteString("user_count_register=")
	builder.WriteString(fmt.Sprintf("%v", sdsa.UserCountRegister))
	builder.WriteString(", ")
	builder.WriteString("user_count_order=")
	builder.WriteString(fmt.Sprintf("%v", sdsa.UserCountOrder))
	builder.WriteString(", ")
	builder.WriteString("user_count_loginorder=")
	builder.WriteString(fmt.Sprintf("%v", sdsa.UserCountLoginorder))
	builder.WriteString(", ")
	builder.WriteString("order_count_create=")
	builder.WriteString(fmt.Sprintf("%v", sdsa.OrderCountCreate))
	builder.WriteString(", ")
	builder.WriteString("order_count_finish=")
	builder.WriteString(fmt.Sprintf("%v", sdsa.OrderCountFinish))
	builder.WriteString(", ")
	builder.WriteString("order_count_cancel=")
	builder.WriteString(fmt.Sprintf("%v", sdsa.OrderCountCancel))
	builder.WriteString(", ")
	builder.WriteString("order_amount=")
	builder.WriteString(fmt.Sprintf("%v", sdsa.OrderAmount))
	builder.WriteString(", ")
	builder.WriteString("order_duration=")
	builder.WriteString(fmt.Sprintf("%v", sdsa.OrderDuration))
	builder.WriteString(", ")
	builder.WriteString("order_mileage=")
	builder.WriteString(fmt.Sprintf("%v", sdsa.OrderMileage))
	builder.WriteString(", ")
	builder.WriteString("car_count_deploy=")
	builder.WriteString(fmt.Sprintf("%v", sdsa.CarCountDeploy))
	builder.WriteString(", ")
	builder.WriteString("car_count_operation=")
	builder.WriteString(fmt.Sprintf("%v", sdsa.CarCountOperation))
	builder.WriteString(", ")
	builder.WriteString("car_operation_manual_duration=")
	builder.WriteString(fmt.Sprintf("%v", sdsa.CarOperationManualDuration))
	builder.WriteString(", ")
	builder.WriteString("car_operation_auto_duration=")
	builder.WriteString(fmt.Sprintf("%v", sdsa.CarOperationAutoDuration))
	builder.WriteString(", ")
	builder.WriteString("car_operation_normal_duration=")
	builder.WriteString(fmt.Sprintf("%v", sdsa.CarOperationNormalDuration))
	builder.WriteString(", ")
	builder.WriteString("car_operation_fault_duration=")
	builder.WriteString(fmt.Sprintf("%v", sdsa.CarOperationFaultDuration))
	builder.WriteString(", ")
	builder.WriteString("car_operation_mileage=")
	builder.WriteString(fmt.Sprintf("%v", sdsa.CarOperationMileage))
	builder.WriteString(", ")
	builder.WriteString("car_operation_fault_times=")
	builder.WriteString(fmt.Sprintf("%v", sdsa.CarOperationFaultTimes))
	builder.WriteString(", ")
	builder.WriteString("car_maintain_manual_duration=")
	builder.WriteString(fmt.Sprintf("%v", sdsa.CarMaintainManualDuration))
	builder.WriteString(", ")
	builder.WriteString("car_maintain_auto_duration=")
	builder.WriteString(fmt.Sprintf("%v", sdsa.CarMaintainAutoDuration))
	builder.WriteString(", ")
	builder.WriteString("car_maintain_normal_duration=")
	builder.WriteString(fmt.Sprintf("%v", sdsa.CarMaintainNormalDuration))
	builder.WriteString(", ")
	builder.WriteString("car_maintain_fault_duration=")
	builder.WriteString(fmt.Sprintf("%v", sdsa.CarMaintainFaultDuration))
	builder.WriteString(", ")
	builder.WriteString("car_maintain_mileage=")
	builder.WriteString(fmt.Sprintf("%v", sdsa.CarMaintainMileage))
	builder.WriteString(", ")
	builder.WriteString("car_maintain_fault_times=")
	builder.WriteString(fmt.Sprintf("%v", sdsa.CarMaintainFaultTimes))
	builder.WriteString(", ")
	builder.WriteString("car_alarm_times=")
	builder.WriteString(fmt.Sprintf("%v", sdsa.CarAlarmTimes))
	builder.WriteString(", ")
	builder.WriteString("stats_time=")
	builder.WriteString(sdsa.StatsTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(sdsa.CreateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// StatsDailyScenicAreas is a parsable slice of StatsDailyScenicArea.
type StatsDailyScenicAreas []*StatsDailyScenicArea
