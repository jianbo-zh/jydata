// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jianbo-zh/jydata/database/ent/carsflight"
	"github.com/jianbo-zh/jydata/database/schema/types"
)

// CarsFlight is the model entity for the CarsFlight schema.
type CarsFlight struct {
	config `json:"-"`
	// ID of the ent.
	// ID
	ID int `json:"id,omitempty"`
	// 景区ID
	ScenicAreaID int `json:"scenic_area_id,omitempty"`
	// 班次编号
	FlightNo string `json:"flight_no,omitempty"`
	// 车辆ID
	CarID int `json:"car_id,omitempty"`
	// 车辆名称
	CarName string `json:"car_name,omitempty"`
	// 路线ID
	RouteID int `json:"route_id,omitempty"`
	// 路线名称
	RouteName string `json:"route_name,omitempty"`
	// 可售卖座位数
	SeatsNum int `json:"seats_num,omitempty"`
	// 班次状态(1-进行中 2-已结束 3-已取消)
	State int `json:"state,omitempty"`
	// 站点列表
	StopIds []int `json:"stop_ids,omitempty"`
	// 过站列表
	PassIds []int `json:"pass_ids,omitempty"`
	// 备注
	Remark string `json:"remark,omitempty"`
	// 座位库存数量
	StopStock []types.StopStock `json:"stop_stock,omitempty"`
	// Yokee扩展ID
	ExtendYokeeID *int `json:"extend_yokee_id,omitempty"`
	// 发车时间
	DepartureTime *time.Time `json:"departure_time,omitempty"`
	// 完成时间
	FinishTime *time.Time `json:"finish_time,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime   time.Time `json:"update_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CarsFlight) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case carsflight.FieldStopIds, carsflight.FieldPassIds, carsflight.FieldStopStock:
			values[i] = new([]byte)
		case carsflight.FieldID, carsflight.FieldScenicAreaID, carsflight.FieldCarID, carsflight.FieldRouteID, carsflight.FieldSeatsNum, carsflight.FieldState, carsflight.FieldExtendYokeeID:
			values[i] = new(sql.NullInt64)
		case carsflight.FieldFlightNo, carsflight.FieldCarName, carsflight.FieldRouteName, carsflight.FieldRemark:
			values[i] = new(sql.NullString)
		case carsflight.FieldDepartureTime, carsflight.FieldFinishTime, carsflight.FieldCreateTime, carsflight.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CarsFlight fields.
func (cf *CarsFlight) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case carsflight.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cf.ID = int(value.Int64)
		case carsflight.FieldScenicAreaID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field scenic_area_id", values[i])
			} else if value.Valid {
				cf.ScenicAreaID = int(value.Int64)
			}
		case carsflight.FieldFlightNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field flight_no", values[i])
			} else if value.Valid {
				cf.FlightNo = value.String
			}
		case carsflight.FieldCarID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field car_id", values[i])
			} else if value.Valid {
				cf.CarID = int(value.Int64)
			}
		case carsflight.FieldCarName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field car_name", values[i])
			} else if value.Valid {
				cf.CarName = value.String
			}
		case carsflight.FieldRouteID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field route_id", values[i])
			} else if value.Valid {
				cf.RouteID = int(value.Int64)
			}
		case carsflight.FieldRouteName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field route_name", values[i])
			} else if value.Valid {
				cf.RouteName = value.String
			}
		case carsflight.FieldSeatsNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field seats_num", values[i])
			} else if value.Valid {
				cf.SeatsNum = int(value.Int64)
			}
		case carsflight.FieldState:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				cf.State = int(value.Int64)
			}
		case carsflight.FieldStopIds:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field stop_ids", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &cf.StopIds); err != nil {
					return fmt.Errorf("unmarshal field stop_ids: %w", err)
				}
			}
		case carsflight.FieldPassIds:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field pass_ids", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &cf.PassIds); err != nil {
					return fmt.Errorf("unmarshal field pass_ids: %w", err)
				}
			}
		case carsflight.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				cf.Remark = value.String
			}
		case carsflight.FieldStopStock:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field stop_stock", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &cf.StopStock); err != nil {
					return fmt.Errorf("unmarshal field stop_stock: %w", err)
				}
			}
		case carsflight.FieldExtendYokeeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field extend_yokee_id", values[i])
			} else if value.Valid {
				cf.ExtendYokeeID = new(int)
				*cf.ExtendYokeeID = int(value.Int64)
			}
		case carsflight.FieldDepartureTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field departure_time", values[i])
			} else if value.Valid {
				cf.DepartureTime = new(time.Time)
				*cf.DepartureTime = value.Time
			}
		case carsflight.FieldFinishTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field finish_time", values[i])
			} else if value.Valid {
				cf.FinishTime = new(time.Time)
				*cf.FinishTime = value.Time
			}
		case carsflight.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				cf.CreateTime = value.Time
			}
		case carsflight.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				cf.UpdateTime = value.Time
			}
		default:
			cf.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CarsFlight.
// This includes values selected through modifiers, order, etc.
func (cf *CarsFlight) Value(name string) (ent.Value, error) {
	return cf.selectValues.Get(name)
}

// Update returns a builder for updating this CarsFlight.
// Note that you need to call CarsFlight.Unwrap() before calling this method if this CarsFlight
// was returned from a transaction, and the transaction was committed or rolled back.
func (cf *CarsFlight) Update() *CarsFlightUpdateOne {
	return NewCarsFlightClient(cf.config).UpdateOne(cf)
}

// Unwrap unwraps the CarsFlight entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cf *CarsFlight) Unwrap() *CarsFlight {
	_tx, ok := cf.config.driver.(*txDriver)
	if !ok {
		panic("ent: CarsFlight is not a transactional entity")
	}
	cf.config.driver = _tx.drv
	return cf
}

// String implements the fmt.Stringer.
func (cf *CarsFlight) String() string {
	var builder strings.Builder
	builder.WriteString("CarsFlight(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cf.ID))
	builder.WriteString("scenic_area_id=")
	builder.WriteString(fmt.Sprintf("%v", cf.ScenicAreaID))
	builder.WriteString(", ")
	builder.WriteString("flight_no=")
	builder.WriteString(cf.FlightNo)
	builder.WriteString(", ")
	builder.WriteString("car_id=")
	builder.WriteString(fmt.Sprintf("%v", cf.CarID))
	builder.WriteString(", ")
	builder.WriteString("car_name=")
	builder.WriteString(cf.CarName)
	builder.WriteString(", ")
	builder.WriteString("route_id=")
	builder.WriteString(fmt.Sprintf("%v", cf.RouteID))
	builder.WriteString(", ")
	builder.WriteString("route_name=")
	builder.WriteString(cf.RouteName)
	builder.WriteString(", ")
	builder.WriteString("seats_num=")
	builder.WriteString(fmt.Sprintf("%v", cf.SeatsNum))
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(fmt.Sprintf("%v", cf.State))
	builder.WriteString(", ")
	builder.WriteString("stop_ids=")
	builder.WriteString(fmt.Sprintf("%v", cf.StopIds))
	builder.WriteString(", ")
	builder.WriteString("pass_ids=")
	builder.WriteString(fmt.Sprintf("%v", cf.PassIds))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(cf.Remark)
	builder.WriteString(", ")
	builder.WriteString("stop_stock=")
	builder.WriteString(fmt.Sprintf("%v", cf.StopStock))
	builder.WriteString(", ")
	if v := cf.ExtendYokeeID; v != nil {
		builder.WriteString("extend_yokee_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := cf.DepartureTime; v != nil {
		builder.WriteString("departure_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := cf.FinishTime; v != nil {
		builder.WriteString("finish_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(cf.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(cf.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CarsFlights is a parsable slice of CarsFlight.
type CarsFlights []*CarsFlight
