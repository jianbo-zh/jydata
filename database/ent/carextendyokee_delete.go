// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"github.com/jianbo-zh/jydata/database/ent/carextendyokee"
	"github.com/jianbo-zh/jydata/database/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarExtendYokeeDelete is the builder for deleting a CarExtendYokee entity.
type CarExtendYokeeDelete struct {
	config
	hooks    []Hook
	mutation *CarExtendYokeeMutation
}

// Where appends a list predicates to the CarExtendYokeeDelete builder.
func (ceyd *CarExtendYokeeDelete) Where(ps ...predicate.CarExtendYokee) *CarExtendYokeeDelete {
	ceyd.mutation.Where(ps...)
	return ceyd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ceyd *CarExtendYokeeDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ceyd.sqlExec, ceyd.mutation, ceyd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ceyd *CarExtendYokeeDelete) ExecX(ctx context.Context) int {
	n, err := ceyd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ceyd *CarExtendYokeeDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(carextendyokee.Table, sqlgraph.NewFieldSpec(carextendyokee.FieldID, field.TypeInt))
	if ps := ceyd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ceyd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ceyd.mutation.done = true
	return affected, err
}

// CarExtendYokeeDeleteOne is the builder for deleting a single CarExtendYokee entity.
type CarExtendYokeeDeleteOne struct {
	ceyd *CarExtendYokeeDelete
}

// Where appends a list predicates to the CarExtendYokeeDelete builder.
func (ceydo *CarExtendYokeeDeleteOne) Where(ps ...predicate.CarExtendYokee) *CarExtendYokeeDeleteOne {
	ceydo.ceyd.mutation.Where(ps...)
	return ceydo
}

// Exec executes the deletion query.
func (ceydo *CarExtendYokeeDeleteOne) Exec(ctx context.Context) error {
	n, err := ceydo.ceyd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{carextendyokee.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ceydo *CarExtendYokeeDeleteOne) ExecX(ctx context.Context) {
	if err := ceydo.Exec(ctx); err != nil {
		panic(err)
	}
}
