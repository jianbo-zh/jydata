// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/file"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// File is the model entity for the File schema.
type File struct {
	config `json:"-"`
	// ID of the ent.
	// ID
	ID int `json:"id,omitempty"`
	// 用户ID
	CreatorID int `json:"creator_id,omitempty"`
	// 景区ID
	ScenicAreaID int `json:"scenic_area_id,omitempty"`
	// 文件分类(0-其他,1-POI,2-停车点)
	FileCategory int `json:"file_category,omitempty"`
	// 文件类型(0-其他,1-图片,2-音频,3-视频)
	FileType int `json:"file_type,omitempty"`
	// 文件sha1
	FileSha1 string `json:"file_sha1,omitempty"`
	// 文件路径
	FilePath string `json:"file_path,omitempty"`
	// 文件MIME
	MimeType string `json:"mime_type,omitempty"`
	// 文件后缀
	FileSuffix string `json:"file_suffix,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime   time.Time `json:"update_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*File) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case file.FieldID, file.FieldCreatorID, file.FieldScenicAreaID, file.FieldFileCategory, file.FieldFileType:
			values[i] = new(sql.NullInt64)
		case file.FieldFileSha1, file.FieldFilePath, file.FieldMimeType, file.FieldFileSuffix:
			values[i] = new(sql.NullString)
		case file.FieldCreateTime, file.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the File fields.
func (f *File) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case file.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = int(value.Int64)
		case file.FieldCreatorID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field creator_id", values[i])
			} else if value.Valid {
				f.CreatorID = int(value.Int64)
			}
		case file.FieldScenicAreaID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field scenic_area_id", values[i])
			} else if value.Valid {
				f.ScenicAreaID = int(value.Int64)
			}
		case file.FieldFileCategory:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field file_category", values[i])
			} else if value.Valid {
				f.FileCategory = int(value.Int64)
			}
		case file.FieldFileType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field file_type", values[i])
			} else if value.Valid {
				f.FileType = int(value.Int64)
			}
		case file.FieldFileSha1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_sha1", values[i])
			} else if value.Valid {
				f.FileSha1 = value.String
			}
		case file.FieldFilePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_path", values[i])
			} else if value.Valid {
				f.FilePath = value.String
			}
		case file.FieldMimeType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mime_type", values[i])
			} else if value.Valid {
				f.MimeType = value.String
			}
		case file.FieldFileSuffix:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_suffix", values[i])
			} else if value.Valid {
				f.FileSuffix = value.String
			}
		case file.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				f.CreateTime = value.Time
			}
		case file.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				f.UpdateTime = value.Time
			}
		default:
			f.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the File.
// This includes values selected through modifiers, order, etc.
func (f *File) Value(name string) (ent.Value, error) {
	return f.selectValues.Get(name)
}

// Update returns a builder for updating this File.
// Note that you need to call File.Unwrap() before calling this method if this File
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *File) Update() *FileUpdateOne {
	return NewFileClient(f.config).UpdateOne(f)
}

// Unwrap unwraps the File entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *File) Unwrap() *File {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: File is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *File) String() string {
	var builder strings.Builder
	builder.WriteString("File(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("creator_id=")
	builder.WriteString(fmt.Sprintf("%v", f.CreatorID))
	builder.WriteString(", ")
	builder.WriteString("scenic_area_id=")
	builder.WriteString(fmt.Sprintf("%v", f.ScenicAreaID))
	builder.WriteString(", ")
	builder.WriteString("file_category=")
	builder.WriteString(fmt.Sprintf("%v", f.FileCategory))
	builder.WriteString(", ")
	builder.WriteString("file_type=")
	builder.WriteString(fmt.Sprintf("%v", f.FileType))
	builder.WriteString(", ")
	builder.WriteString("file_sha1=")
	builder.WriteString(f.FileSha1)
	builder.WriteString(", ")
	builder.WriteString("file_path=")
	builder.WriteString(f.FilePath)
	builder.WriteString(", ")
	builder.WriteString("mime_type=")
	builder.WriteString(f.MimeType)
	builder.WriteString(", ")
	builder.WriteString("file_suffix=")
	builder.WriteString(f.FileSuffix)
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(f.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(f.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Files is a parsable slice of File.
type Files []*File
