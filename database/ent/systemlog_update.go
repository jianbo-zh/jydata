// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"github.com/jianbo-zh/jydata/database/ent/systemlog"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SystemLogUpdate is the builder for updating SystemLog entities.
type SystemLogUpdate struct {
	config
	hooks    []Hook
	mutation *SystemLogMutation
}

// Where appends a list predicates to the SystemLogUpdate builder.
func (slu *SystemLogUpdate) Where(ps ...predicate.SystemLog) *SystemLogUpdate {
	slu.mutation.Where(ps...)
	return slu
}

// SetAction sets the "action" field.
func (slu *SystemLogUpdate) SetAction(s string) *SystemLogUpdate {
	slu.mutation.SetAction(s)
	return slu
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (slu *SystemLogUpdate) SetNillableAction(s *string) *SystemLogUpdate {
	if s != nil {
		slu.SetAction(*s)
	}
	return slu
}

// SetUser sets the "user" field.
func (slu *SystemLogUpdate) SetUser(s string) *SystemLogUpdate {
	slu.mutation.SetUser(s)
	return slu
}

// SetNillableUser sets the "user" field if the given value is not nil.
func (slu *SystemLogUpdate) SetNillableUser(s *string) *SystemLogUpdate {
	if s != nil {
		slu.SetUser(*s)
	}
	return slu
}

// SetScenicArea sets the "scenic_area" field.
func (slu *SystemLogUpdate) SetScenicArea(s string) *SystemLogUpdate {
	slu.mutation.SetScenicArea(s)
	return slu
}

// SetNillableScenicArea sets the "scenic_area" field if the given value is not nil.
func (slu *SystemLogUpdate) SetNillableScenicArea(s *string) *SystemLogUpdate {
	if s != nil {
		slu.SetScenicArea(*s)
	}
	return slu
}

// SetSourceIP sets the "source_ip" field.
func (slu *SystemLogUpdate) SetSourceIP(s string) *SystemLogUpdate {
	slu.mutation.SetSourceIP(s)
	return slu
}

// SetNillableSourceIP sets the "source_ip" field if the given value is not nil.
func (slu *SystemLogUpdate) SetNillableSourceIP(s *string) *SystemLogUpdate {
	if s != nil {
		slu.SetSourceIP(*s)
	}
	return slu
}

// SetLoginType sets the "login_type" field.
func (slu *SystemLogUpdate) SetLoginType(st systemlog.LoginType) *SystemLogUpdate {
	slu.mutation.SetLoginType(st)
	return slu
}

// SetNillableLoginType sets the "login_type" field if the given value is not nil.
func (slu *SystemLogUpdate) SetNillableLoginType(st *systemlog.LoginType) *SystemLogUpdate {
	if st != nil {
		slu.SetLoginType(*st)
	}
	return slu
}

// SetContent sets the "content" field.
func (slu *SystemLogUpdate) SetContent(s string) *SystemLogUpdate {
	slu.mutation.SetContent(s)
	return slu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (slu *SystemLogUpdate) SetNillableContent(s *string) *SystemLogUpdate {
	if s != nil {
		slu.SetContent(*s)
	}
	return slu
}

// SetStatus sets the "status" field.
func (slu *SystemLogUpdate) SetStatus(s systemlog.Status) *SystemLogUpdate {
	slu.mutation.SetStatus(s)
	return slu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (slu *SystemLogUpdate) SetNillableStatus(s *systemlog.Status) *SystemLogUpdate {
	if s != nil {
		slu.SetStatus(*s)
	}
	return slu
}

// SetRemarks sets the "remarks" field.
func (slu *SystemLogUpdate) SetRemarks(s string) *SystemLogUpdate {
	slu.mutation.SetRemarks(s)
	return slu
}

// SetNillableRemarks sets the "remarks" field if the given value is not nil.
func (slu *SystemLogUpdate) SetNillableRemarks(s *string) *SystemLogUpdate {
	if s != nil {
		slu.SetRemarks(*s)
	}
	return slu
}

// ClearRemarks clears the value of the "remarks" field.
func (slu *SystemLogUpdate) ClearRemarks() *SystemLogUpdate {
	slu.mutation.ClearRemarks()
	return slu
}

// Mutation returns the SystemLogMutation object of the builder.
func (slu *SystemLogUpdate) Mutation() *SystemLogMutation {
	return slu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (slu *SystemLogUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, slu.sqlSave, slu.mutation, slu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (slu *SystemLogUpdate) SaveX(ctx context.Context) int {
	affected, err := slu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (slu *SystemLogUpdate) Exec(ctx context.Context) error {
	_, err := slu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (slu *SystemLogUpdate) ExecX(ctx context.Context) {
	if err := slu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (slu *SystemLogUpdate) check() error {
	if v, ok := slu.mutation.Action(); ok {
		if err := systemlog.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`ent: validator failed for field "SystemLog.action": %w`, err)}
		}
	}
	if v, ok := slu.mutation.User(); ok {
		if err := systemlog.UserValidator(v); err != nil {
			return &ValidationError{Name: "user", err: fmt.Errorf(`ent: validator failed for field "SystemLog.user": %w`, err)}
		}
	}
	if v, ok := slu.mutation.ScenicArea(); ok {
		if err := systemlog.ScenicAreaValidator(v); err != nil {
			return &ValidationError{Name: "scenic_area", err: fmt.Errorf(`ent: validator failed for field "SystemLog.scenic_area": %w`, err)}
		}
	}
	if v, ok := slu.mutation.SourceIP(); ok {
		if err := systemlog.SourceIPValidator(v); err != nil {
			return &ValidationError{Name: "source_ip", err: fmt.Errorf(`ent: validator failed for field "SystemLog.source_ip": %w`, err)}
		}
	}
	if v, ok := slu.mutation.LoginType(); ok {
		if err := systemlog.LoginTypeValidator(v); err != nil {
			return &ValidationError{Name: "login_type", err: fmt.Errorf(`ent: validator failed for field "SystemLog.login_type": %w`, err)}
		}
	}
	if v, ok := slu.mutation.Content(); ok {
		if err := systemlog.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "SystemLog.content": %w`, err)}
		}
	}
	if v, ok := slu.mutation.Status(); ok {
		if err := systemlog.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SystemLog.status": %w`, err)}
		}
	}
	return nil
}

func (slu *SystemLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := slu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(systemlog.Table, systemlog.Columns, sqlgraph.NewFieldSpec(systemlog.FieldID, field.TypeUint64))
	if ps := slu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := slu.mutation.Action(); ok {
		_spec.SetField(systemlog.FieldAction, field.TypeString, value)
	}
	if value, ok := slu.mutation.User(); ok {
		_spec.SetField(systemlog.FieldUser, field.TypeString, value)
	}
	if value, ok := slu.mutation.ScenicArea(); ok {
		_spec.SetField(systemlog.FieldScenicArea, field.TypeString, value)
	}
	if value, ok := slu.mutation.SourceIP(); ok {
		_spec.SetField(systemlog.FieldSourceIP, field.TypeString, value)
	}
	if value, ok := slu.mutation.LoginType(); ok {
		_spec.SetField(systemlog.FieldLoginType, field.TypeEnum, value)
	}
	if value, ok := slu.mutation.Content(); ok {
		_spec.SetField(systemlog.FieldContent, field.TypeString, value)
	}
	if value, ok := slu.mutation.Status(); ok {
		_spec.SetField(systemlog.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := slu.mutation.Remarks(); ok {
		_spec.SetField(systemlog.FieldRemarks, field.TypeString, value)
	}
	if slu.mutation.RemarksCleared() {
		_spec.ClearField(systemlog.FieldRemarks, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, slu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systemlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	slu.mutation.done = true
	return n, nil
}

// SystemLogUpdateOne is the builder for updating a single SystemLog entity.
type SystemLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SystemLogMutation
}

// SetAction sets the "action" field.
func (sluo *SystemLogUpdateOne) SetAction(s string) *SystemLogUpdateOne {
	sluo.mutation.SetAction(s)
	return sluo
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (sluo *SystemLogUpdateOne) SetNillableAction(s *string) *SystemLogUpdateOne {
	if s != nil {
		sluo.SetAction(*s)
	}
	return sluo
}

// SetUser sets the "user" field.
func (sluo *SystemLogUpdateOne) SetUser(s string) *SystemLogUpdateOne {
	sluo.mutation.SetUser(s)
	return sluo
}

// SetNillableUser sets the "user" field if the given value is not nil.
func (sluo *SystemLogUpdateOne) SetNillableUser(s *string) *SystemLogUpdateOne {
	if s != nil {
		sluo.SetUser(*s)
	}
	return sluo
}

// SetScenicArea sets the "scenic_area" field.
func (sluo *SystemLogUpdateOne) SetScenicArea(s string) *SystemLogUpdateOne {
	sluo.mutation.SetScenicArea(s)
	return sluo
}

// SetNillableScenicArea sets the "scenic_area" field if the given value is not nil.
func (sluo *SystemLogUpdateOne) SetNillableScenicArea(s *string) *SystemLogUpdateOne {
	if s != nil {
		sluo.SetScenicArea(*s)
	}
	return sluo
}

// SetSourceIP sets the "source_ip" field.
func (sluo *SystemLogUpdateOne) SetSourceIP(s string) *SystemLogUpdateOne {
	sluo.mutation.SetSourceIP(s)
	return sluo
}

// SetNillableSourceIP sets the "source_ip" field if the given value is not nil.
func (sluo *SystemLogUpdateOne) SetNillableSourceIP(s *string) *SystemLogUpdateOne {
	if s != nil {
		sluo.SetSourceIP(*s)
	}
	return sluo
}

// SetLoginType sets the "login_type" field.
func (sluo *SystemLogUpdateOne) SetLoginType(st systemlog.LoginType) *SystemLogUpdateOne {
	sluo.mutation.SetLoginType(st)
	return sluo
}

// SetNillableLoginType sets the "login_type" field if the given value is not nil.
func (sluo *SystemLogUpdateOne) SetNillableLoginType(st *systemlog.LoginType) *SystemLogUpdateOne {
	if st != nil {
		sluo.SetLoginType(*st)
	}
	return sluo
}

// SetContent sets the "content" field.
func (sluo *SystemLogUpdateOne) SetContent(s string) *SystemLogUpdateOne {
	sluo.mutation.SetContent(s)
	return sluo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (sluo *SystemLogUpdateOne) SetNillableContent(s *string) *SystemLogUpdateOne {
	if s != nil {
		sluo.SetContent(*s)
	}
	return sluo
}

// SetStatus sets the "status" field.
func (sluo *SystemLogUpdateOne) SetStatus(s systemlog.Status) *SystemLogUpdateOne {
	sluo.mutation.SetStatus(s)
	return sluo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sluo *SystemLogUpdateOne) SetNillableStatus(s *systemlog.Status) *SystemLogUpdateOne {
	if s != nil {
		sluo.SetStatus(*s)
	}
	return sluo
}

// SetRemarks sets the "remarks" field.
func (sluo *SystemLogUpdateOne) SetRemarks(s string) *SystemLogUpdateOne {
	sluo.mutation.SetRemarks(s)
	return sluo
}

// SetNillableRemarks sets the "remarks" field if the given value is not nil.
func (sluo *SystemLogUpdateOne) SetNillableRemarks(s *string) *SystemLogUpdateOne {
	if s != nil {
		sluo.SetRemarks(*s)
	}
	return sluo
}

// ClearRemarks clears the value of the "remarks" field.
func (sluo *SystemLogUpdateOne) ClearRemarks() *SystemLogUpdateOne {
	sluo.mutation.ClearRemarks()
	return sluo
}

// Mutation returns the SystemLogMutation object of the builder.
func (sluo *SystemLogUpdateOne) Mutation() *SystemLogMutation {
	return sluo.mutation
}

// Where appends a list predicates to the SystemLogUpdate builder.
func (sluo *SystemLogUpdateOne) Where(ps ...predicate.SystemLog) *SystemLogUpdateOne {
	sluo.mutation.Where(ps...)
	return sluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sluo *SystemLogUpdateOne) Select(field string, fields ...string) *SystemLogUpdateOne {
	sluo.fields = append([]string{field}, fields...)
	return sluo
}

// Save executes the query and returns the updated SystemLog entity.
func (sluo *SystemLogUpdateOne) Save(ctx context.Context) (*SystemLog, error) {
	return withHooks(ctx, sluo.sqlSave, sluo.mutation, sluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sluo *SystemLogUpdateOne) SaveX(ctx context.Context) *SystemLog {
	node, err := sluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sluo *SystemLogUpdateOne) Exec(ctx context.Context) error {
	_, err := sluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sluo *SystemLogUpdateOne) ExecX(ctx context.Context) {
	if err := sluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sluo *SystemLogUpdateOne) check() error {
	if v, ok := sluo.mutation.Action(); ok {
		if err := systemlog.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`ent: validator failed for field "SystemLog.action": %w`, err)}
		}
	}
	if v, ok := sluo.mutation.User(); ok {
		if err := systemlog.UserValidator(v); err != nil {
			return &ValidationError{Name: "user", err: fmt.Errorf(`ent: validator failed for field "SystemLog.user": %w`, err)}
		}
	}
	if v, ok := sluo.mutation.ScenicArea(); ok {
		if err := systemlog.ScenicAreaValidator(v); err != nil {
			return &ValidationError{Name: "scenic_area", err: fmt.Errorf(`ent: validator failed for field "SystemLog.scenic_area": %w`, err)}
		}
	}
	if v, ok := sluo.mutation.SourceIP(); ok {
		if err := systemlog.SourceIPValidator(v); err != nil {
			return &ValidationError{Name: "source_ip", err: fmt.Errorf(`ent: validator failed for field "SystemLog.source_ip": %w`, err)}
		}
	}
	if v, ok := sluo.mutation.LoginType(); ok {
		if err := systemlog.LoginTypeValidator(v); err != nil {
			return &ValidationError{Name: "login_type", err: fmt.Errorf(`ent: validator failed for field "SystemLog.login_type": %w`, err)}
		}
	}
	if v, ok := sluo.mutation.Content(); ok {
		if err := systemlog.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "SystemLog.content": %w`, err)}
		}
	}
	if v, ok := sluo.mutation.Status(); ok {
		if err := systemlog.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SystemLog.status": %w`, err)}
		}
	}
	return nil
}

func (sluo *SystemLogUpdateOne) sqlSave(ctx context.Context) (_node *SystemLog, err error) {
	if err := sluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(systemlog.Table, systemlog.Columns, sqlgraph.NewFieldSpec(systemlog.FieldID, field.TypeUint64))
	id, ok := sluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SystemLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, systemlog.FieldID)
		for _, f := range fields {
			if !systemlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != systemlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sluo.mutation.Action(); ok {
		_spec.SetField(systemlog.FieldAction, field.TypeString, value)
	}
	if value, ok := sluo.mutation.User(); ok {
		_spec.SetField(systemlog.FieldUser, field.TypeString, value)
	}
	if value, ok := sluo.mutation.ScenicArea(); ok {
		_spec.SetField(systemlog.FieldScenicArea, field.TypeString, value)
	}
	if value, ok := sluo.mutation.SourceIP(); ok {
		_spec.SetField(systemlog.FieldSourceIP, field.TypeString, value)
	}
	if value, ok := sluo.mutation.LoginType(); ok {
		_spec.SetField(systemlog.FieldLoginType, field.TypeEnum, value)
	}
	if value, ok := sluo.mutation.Content(); ok {
		_spec.SetField(systemlog.FieldContent, field.TypeString, value)
	}
	if value, ok := sluo.mutation.Status(); ok {
		_spec.SetField(systemlog.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := sluo.mutation.Remarks(); ok {
		_spec.SetField(systemlog.FieldRemarks, field.TypeString, value)
	}
	if sluo.mutation.RemarksCleared() {
		_spec.ClearField(systemlog.FieldRemarks, field.TypeString)
	}
	_node = &SystemLog{config: sluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systemlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sluo.mutation.done = true
	return _node, nil
}
