// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/car"
	"github.com/jianbo-zh/jydata/database/ent/carconfig"
	"github.com/jianbo-zh/jydata/database/ent/carsmodels"
	"github.com/jianbo-zh/jydata/database/ent/carsmodelsgroups"
	"github.com/jianbo-zh/jydata/database/ent/carsmodelsgroupsparams"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarsModelsUpdate is the builder for updating CarsModels entities.
type CarsModelsUpdate struct {
	config
	hooks    []Hook
	mutation *CarsModelsMutation
}

// Where appends a list predicates to the CarsModelsUpdate builder.
func (cmu *CarsModelsUpdate) Where(ps ...predicate.CarsModels) *CarsModelsUpdate {
	cmu.mutation.Where(ps...)
	return cmu
}

// SetModelName sets the "model_name" field.
func (cmu *CarsModelsUpdate) SetModelName(s string) *CarsModelsUpdate {
	cmu.mutation.SetModelName(s)
	return cmu
}

// SetNillableModelName sets the "model_name" field if the given value is not nil.
func (cmu *CarsModelsUpdate) SetNillableModelName(s *string) *CarsModelsUpdate {
	if s != nil {
		cmu.SetModelName(*s)
	}
	return cmu
}

// SetModelRemark sets the "model_remark" field.
func (cmu *CarsModelsUpdate) SetModelRemark(s string) *CarsModelsUpdate {
	cmu.mutation.SetModelRemark(s)
	return cmu
}

// SetNillableModelRemark sets the "model_remark" field if the given value is not nil.
func (cmu *CarsModelsUpdate) SetNillableModelRemark(s *string) *CarsModelsUpdate {
	if s != nil {
		cmu.SetModelRemark(*s)
	}
	return cmu
}

// SetGroupCount sets the "group_count" field.
func (cmu *CarsModelsUpdate) SetGroupCount(i int) *CarsModelsUpdate {
	cmu.mutation.ResetGroupCount()
	cmu.mutation.SetGroupCount(i)
	return cmu
}

// SetNillableGroupCount sets the "group_count" field if the given value is not nil.
func (cmu *CarsModelsUpdate) SetNillableGroupCount(i *int) *CarsModelsUpdate {
	if i != nil {
		cmu.SetGroupCount(*i)
	}
	return cmu
}

// AddGroupCount adds i to the "group_count" field.
func (cmu *CarsModelsUpdate) AddGroupCount(i int) *CarsModelsUpdate {
	cmu.mutation.AddGroupCount(i)
	return cmu
}

// SetStatus sets the "status" field.
func (cmu *CarsModelsUpdate) SetStatus(i int) *CarsModelsUpdate {
	cmu.mutation.ResetStatus()
	cmu.mutation.SetStatus(i)
	return cmu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cmu *CarsModelsUpdate) SetNillableStatus(i *int) *CarsModelsUpdate {
	if i != nil {
		cmu.SetStatus(*i)
	}
	return cmu
}

// AddStatus adds i to the "status" field.
func (cmu *CarsModelsUpdate) AddStatus(i int) *CarsModelsUpdate {
	cmu.mutation.AddStatus(i)
	return cmu
}

// SetCarIncr sets the "car_incr" field.
func (cmu *CarsModelsUpdate) SetCarIncr(i int) *CarsModelsUpdate {
	cmu.mutation.ResetCarIncr()
	cmu.mutation.SetCarIncr(i)
	return cmu
}

// SetNillableCarIncr sets the "car_incr" field if the given value is not nil.
func (cmu *CarsModelsUpdate) SetNillableCarIncr(i *int) *CarsModelsUpdate {
	if i != nil {
		cmu.SetCarIncr(*i)
	}
	return cmu
}

// AddCarIncr adds i to the "car_incr" field.
func (cmu *CarsModelsUpdate) AddCarIncr(i int) *CarsModelsUpdate {
	cmu.mutation.AddCarIncr(i)
	return cmu
}

// SetIsDeleted sets the "is_deleted" field.
func (cmu *CarsModelsUpdate) SetIsDeleted(i int) *CarsModelsUpdate {
	cmu.mutation.ResetIsDeleted()
	cmu.mutation.SetIsDeleted(i)
	return cmu
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (cmu *CarsModelsUpdate) SetNillableIsDeleted(i *int) *CarsModelsUpdate {
	if i != nil {
		cmu.SetIsDeleted(*i)
	}
	return cmu
}

// AddIsDeleted adds i to the "is_deleted" field.
func (cmu *CarsModelsUpdate) AddIsDeleted(i int) *CarsModelsUpdate {
	cmu.mutation.AddIsDeleted(i)
	return cmu
}

// SetUpdateTime sets the "update_time" field.
func (cmu *CarsModelsUpdate) SetUpdateTime(t time.Time) *CarsModelsUpdate {
	cmu.mutation.SetUpdateTime(t)
	return cmu
}

// AddCarIDs adds the "cars" edge to the Car entity by IDs.
func (cmu *CarsModelsUpdate) AddCarIDs(ids ...int) *CarsModelsUpdate {
	cmu.mutation.AddCarIDs(ids...)
	return cmu
}

// AddCars adds the "cars" edges to the Car entity.
func (cmu *CarsModelsUpdate) AddCars(c ...*Car) *CarsModelsUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cmu.AddCarIDs(ids...)
}

// AddGroupIDs adds the "groups" edge to the CarsModelsGroups entity by IDs.
func (cmu *CarsModelsUpdate) AddGroupIDs(ids ...int) *CarsModelsUpdate {
	cmu.mutation.AddGroupIDs(ids...)
	return cmu
}

// AddGroups adds the "groups" edges to the CarsModelsGroups entity.
func (cmu *CarsModelsUpdate) AddGroups(c ...*CarsModelsGroups) *CarsModelsUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cmu.AddGroupIDs(ids...)
}

// AddParamIDs adds the "params" edge to the CarsModelsGroupsParams entity by IDs.
func (cmu *CarsModelsUpdate) AddParamIDs(ids ...int) *CarsModelsUpdate {
	cmu.mutation.AddParamIDs(ids...)
	return cmu
}

// AddParams adds the "params" edges to the CarsModelsGroupsParams entity.
func (cmu *CarsModelsUpdate) AddParams(c ...*CarsModelsGroupsParams) *CarsModelsUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cmu.AddParamIDs(ids...)
}

// AddConfigFileIDs adds the "config_files" edge to the CarConfig entity by IDs.
func (cmu *CarsModelsUpdate) AddConfigFileIDs(ids ...int) *CarsModelsUpdate {
	cmu.mutation.AddConfigFileIDs(ids...)
	return cmu
}

// AddConfigFiles adds the "config_files" edges to the CarConfig entity.
func (cmu *CarsModelsUpdate) AddConfigFiles(c ...*CarConfig) *CarsModelsUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cmu.AddConfigFileIDs(ids...)
}

// Mutation returns the CarsModelsMutation object of the builder.
func (cmu *CarsModelsUpdate) Mutation() *CarsModelsMutation {
	return cmu.mutation
}

// ClearCars clears all "cars" edges to the Car entity.
func (cmu *CarsModelsUpdate) ClearCars() *CarsModelsUpdate {
	cmu.mutation.ClearCars()
	return cmu
}

// RemoveCarIDs removes the "cars" edge to Car entities by IDs.
func (cmu *CarsModelsUpdate) RemoveCarIDs(ids ...int) *CarsModelsUpdate {
	cmu.mutation.RemoveCarIDs(ids...)
	return cmu
}

// RemoveCars removes "cars" edges to Car entities.
func (cmu *CarsModelsUpdate) RemoveCars(c ...*Car) *CarsModelsUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cmu.RemoveCarIDs(ids...)
}

// ClearGroups clears all "groups" edges to the CarsModelsGroups entity.
func (cmu *CarsModelsUpdate) ClearGroups() *CarsModelsUpdate {
	cmu.mutation.ClearGroups()
	return cmu
}

// RemoveGroupIDs removes the "groups" edge to CarsModelsGroups entities by IDs.
func (cmu *CarsModelsUpdate) RemoveGroupIDs(ids ...int) *CarsModelsUpdate {
	cmu.mutation.RemoveGroupIDs(ids...)
	return cmu
}

// RemoveGroups removes "groups" edges to CarsModelsGroups entities.
func (cmu *CarsModelsUpdate) RemoveGroups(c ...*CarsModelsGroups) *CarsModelsUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cmu.RemoveGroupIDs(ids...)
}

// ClearParams clears all "params" edges to the CarsModelsGroupsParams entity.
func (cmu *CarsModelsUpdate) ClearParams() *CarsModelsUpdate {
	cmu.mutation.ClearParams()
	return cmu
}

// RemoveParamIDs removes the "params" edge to CarsModelsGroupsParams entities by IDs.
func (cmu *CarsModelsUpdate) RemoveParamIDs(ids ...int) *CarsModelsUpdate {
	cmu.mutation.RemoveParamIDs(ids...)
	return cmu
}

// RemoveParams removes "params" edges to CarsModelsGroupsParams entities.
func (cmu *CarsModelsUpdate) RemoveParams(c ...*CarsModelsGroupsParams) *CarsModelsUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cmu.RemoveParamIDs(ids...)
}

// ClearConfigFiles clears all "config_files" edges to the CarConfig entity.
func (cmu *CarsModelsUpdate) ClearConfigFiles() *CarsModelsUpdate {
	cmu.mutation.ClearConfigFiles()
	return cmu
}

// RemoveConfigFileIDs removes the "config_files" edge to CarConfig entities by IDs.
func (cmu *CarsModelsUpdate) RemoveConfigFileIDs(ids ...int) *CarsModelsUpdate {
	cmu.mutation.RemoveConfigFileIDs(ids...)
	return cmu
}

// RemoveConfigFiles removes "config_files" edges to CarConfig entities.
func (cmu *CarsModelsUpdate) RemoveConfigFiles(c ...*CarConfig) *CarsModelsUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cmu.RemoveConfigFileIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cmu *CarsModelsUpdate) Save(ctx context.Context) (int, error) {
	cmu.defaults()
	return withHooks(ctx, cmu.sqlSave, cmu.mutation, cmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cmu *CarsModelsUpdate) SaveX(ctx context.Context) int {
	affected, err := cmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cmu *CarsModelsUpdate) Exec(ctx context.Context) error {
	_, err := cmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmu *CarsModelsUpdate) ExecX(ctx context.Context) {
	if err := cmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cmu *CarsModelsUpdate) defaults() {
	if _, ok := cmu.mutation.UpdateTime(); !ok {
		v := carsmodels.UpdateDefaultUpdateTime()
		cmu.mutation.SetUpdateTime(v)
	}
}

func (cmu *CarsModelsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(carsmodels.Table, carsmodels.Columns, sqlgraph.NewFieldSpec(carsmodels.FieldID, field.TypeInt))
	if ps := cmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmu.mutation.ModelName(); ok {
		_spec.SetField(carsmodels.FieldModelName, field.TypeString, value)
	}
	if value, ok := cmu.mutation.ModelRemark(); ok {
		_spec.SetField(carsmodels.FieldModelRemark, field.TypeString, value)
	}
	if value, ok := cmu.mutation.GroupCount(); ok {
		_spec.SetField(carsmodels.FieldGroupCount, field.TypeInt, value)
	}
	if value, ok := cmu.mutation.AddedGroupCount(); ok {
		_spec.AddField(carsmodels.FieldGroupCount, field.TypeInt, value)
	}
	if value, ok := cmu.mutation.Status(); ok {
		_spec.SetField(carsmodels.FieldStatus, field.TypeInt, value)
	}
	if value, ok := cmu.mutation.AddedStatus(); ok {
		_spec.AddField(carsmodels.FieldStatus, field.TypeInt, value)
	}
	if value, ok := cmu.mutation.CarIncr(); ok {
		_spec.SetField(carsmodels.FieldCarIncr, field.TypeInt, value)
	}
	if value, ok := cmu.mutation.AddedCarIncr(); ok {
		_spec.AddField(carsmodels.FieldCarIncr, field.TypeInt, value)
	}
	if value, ok := cmu.mutation.IsDeleted(); ok {
		_spec.SetField(carsmodels.FieldIsDeleted, field.TypeInt, value)
	}
	if value, ok := cmu.mutation.AddedIsDeleted(); ok {
		_spec.AddField(carsmodels.FieldIsDeleted, field.TypeInt, value)
	}
	if value, ok := cmu.mutation.UpdateTime(); ok {
		_spec.SetField(carsmodels.FieldUpdateTime, field.TypeTime, value)
	}
	if cmu.mutation.CarsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carsmodels.CarsTable,
			Columns: []string{carsmodels.CarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmu.mutation.RemovedCarsIDs(); len(nodes) > 0 && !cmu.mutation.CarsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carsmodels.CarsTable,
			Columns: []string{carsmodels.CarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmu.mutation.CarsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carsmodels.CarsTable,
			Columns: []string{carsmodels.CarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cmu.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carsmodels.GroupsTable,
			Columns: []string{carsmodels.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsmodelsgroups.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmu.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !cmu.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carsmodels.GroupsTable,
			Columns: []string{carsmodels.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsmodelsgroups.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmu.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carsmodels.GroupsTable,
			Columns: []string{carsmodels.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsmodelsgroups.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cmu.mutation.ParamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carsmodels.ParamsTable,
			Columns: []string{carsmodels.ParamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsmodelsgroupsparams.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmu.mutation.RemovedParamsIDs(); len(nodes) > 0 && !cmu.mutation.ParamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carsmodels.ParamsTable,
			Columns: []string{carsmodels.ParamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsmodelsgroupsparams.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmu.mutation.ParamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carsmodels.ParamsTable,
			Columns: []string{carsmodels.ParamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsmodelsgroupsparams.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cmu.mutation.ConfigFilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carsmodels.ConfigFilesTable,
			Columns: []string{carsmodels.ConfigFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carconfig.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmu.mutation.RemovedConfigFilesIDs(); len(nodes) > 0 && !cmu.mutation.ConfigFilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carsmodels.ConfigFilesTable,
			Columns: []string{carsmodels.ConfigFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carconfig.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmu.mutation.ConfigFilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carsmodels.ConfigFilesTable,
			Columns: []string{carsmodels.ConfigFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carconfig.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carsmodels.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cmu.mutation.done = true
	return n, nil
}

// CarsModelsUpdateOne is the builder for updating a single CarsModels entity.
type CarsModelsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CarsModelsMutation
}

// SetModelName sets the "model_name" field.
func (cmuo *CarsModelsUpdateOne) SetModelName(s string) *CarsModelsUpdateOne {
	cmuo.mutation.SetModelName(s)
	return cmuo
}

// SetNillableModelName sets the "model_name" field if the given value is not nil.
func (cmuo *CarsModelsUpdateOne) SetNillableModelName(s *string) *CarsModelsUpdateOne {
	if s != nil {
		cmuo.SetModelName(*s)
	}
	return cmuo
}

// SetModelRemark sets the "model_remark" field.
func (cmuo *CarsModelsUpdateOne) SetModelRemark(s string) *CarsModelsUpdateOne {
	cmuo.mutation.SetModelRemark(s)
	return cmuo
}

// SetNillableModelRemark sets the "model_remark" field if the given value is not nil.
func (cmuo *CarsModelsUpdateOne) SetNillableModelRemark(s *string) *CarsModelsUpdateOne {
	if s != nil {
		cmuo.SetModelRemark(*s)
	}
	return cmuo
}

// SetGroupCount sets the "group_count" field.
func (cmuo *CarsModelsUpdateOne) SetGroupCount(i int) *CarsModelsUpdateOne {
	cmuo.mutation.ResetGroupCount()
	cmuo.mutation.SetGroupCount(i)
	return cmuo
}

// SetNillableGroupCount sets the "group_count" field if the given value is not nil.
func (cmuo *CarsModelsUpdateOne) SetNillableGroupCount(i *int) *CarsModelsUpdateOne {
	if i != nil {
		cmuo.SetGroupCount(*i)
	}
	return cmuo
}

// AddGroupCount adds i to the "group_count" field.
func (cmuo *CarsModelsUpdateOne) AddGroupCount(i int) *CarsModelsUpdateOne {
	cmuo.mutation.AddGroupCount(i)
	return cmuo
}

// SetStatus sets the "status" field.
func (cmuo *CarsModelsUpdateOne) SetStatus(i int) *CarsModelsUpdateOne {
	cmuo.mutation.ResetStatus()
	cmuo.mutation.SetStatus(i)
	return cmuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cmuo *CarsModelsUpdateOne) SetNillableStatus(i *int) *CarsModelsUpdateOne {
	if i != nil {
		cmuo.SetStatus(*i)
	}
	return cmuo
}

// AddStatus adds i to the "status" field.
func (cmuo *CarsModelsUpdateOne) AddStatus(i int) *CarsModelsUpdateOne {
	cmuo.mutation.AddStatus(i)
	return cmuo
}

// SetCarIncr sets the "car_incr" field.
func (cmuo *CarsModelsUpdateOne) SetCarIncr(i int) *CarsModelsUpdateOne {
	cmuo.mutation.ResetCarIncr()
	cmuo.mutation.SetCarIncr(i)
	return cmuo
}

// SetNillableCarIncr sets the "car_incr" field if the given value is not nil.
func (cmuo *CarsModelsUpdateOne) SetNillableCarIncr(i *int) *CarsModelsUpdateOne {
	if i != nil {
		cmuo.SetCarIncr(*i)
	}
	return cmuo
}

// AddCarIncr adds i to the "car_incr" field.
func (cmuo *CarsModelsUpdateOne) AddCarIncr(i int) *CarsModelsUpdateOne {
	cmuo.mutation.AddCarIncr(i)
	return cmuo
}

// SetIsDeleted sets the "is_deleted" field.
func (cmuo *CarsModelsUpdateOne) SetIsDeleted(i int) *CarsModelsUpdateOne {
	cmuo.mutation.ResetIsDeleted()
	cmuo.mutation.SetIsDeleted(i)
	return cmuo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (cmuo *CarsModelsUpdateOne) SetNillableIsDeleted(i *int) *CarsModelsUpdateOne {
	if i != nil {
		cmuo.SetIsDeleted(*i)
	}
	return cmuo
}

// AddIsDeleted adds i to the "is_deleted" field.
func (cmuo *CarsModelsUpdateOne) AddIsDeleted(i int) *CarsModelsUpdateOne {
	cmuo.mutation.AddIsDeleted(i)
	return cmuo
}

// SetUpdateTime sets the "update_time" field.
func (cmuo *CarsModelsUpdateOne) SetUpdateTime(t time.Time) *CarsModelsUpdateOne {
	cmuo.mutation.SetUpdateTime(t)
	return cmuo
}

// AddCarIDs adds the "cars" edge to the Car entity by IDs.
func (cmuo *CarsModelsUpdateOne) AddCarIDs(ids ...int) *CarsModelsUpdateOne {
	cmuo.mutation.AddCarIDs(ids...)
	return cmuo
}

// AddCars adds the "cars" edges to the Car entity.
func (cmuo *CarsModelsUpdateOne) AddCars(c ...*Car) *CarsModelsUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cmuo.AddCarIDs(ids...)
}

// AddGroupIDs adds the "groups" edge to the CarsModelsGroups entity by IDs.
func (cmuo *CarsModelsUpdateOne) AddGroupIDs(ids ...int) *CarsModelsUpdateOne {
	cmuo.mutation.AddGroupIDs(ids...)
	return cmuo
}

// AddGroups adds the "groups" edges to the CarsModelsGroups entity.
func (cmuo *CarsModelsUpdateOne) AddGroups(c ...*CarsModelsGroups) *CarsModelsUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cmuo.AddGroupIDs(ids...)
}

// AddParamIDs adds the "params" edge to the CarsModelsGroupsParams entity by IDs.
func (cmuo *CarsModelsUpdateOne) AddParamIDs(ids ...int) *CarsModelsUpdateOne {
	cmuo.mutation.AddParamIDs(ids...)
	return cmuo
}

// AddParams adds the "params" edges to the CarsModelsGroupsParams entity.
func (cmuo *CarsModelsUpdateOne) AddParams(c ...*CarsModelsGroupsParams) *CarsModelsUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cmuo.AddParamIDs(ids...)
}

// AddConfigFileIDs adds the "config_files" edge to the CarConfig entity by IDs.
func (cmuo *CarsModelsUpdateOne) AddConfigFileIDs(ids ...int) *CarsModelsUpdateOne {
	cmuo.mutation.AddConfigFileIDs(ids...)
	return cmuo
}

// AddConfigFiles adds the "config_files" edges to the CarConfig entity.
func (cmuo *CarsModelsUpdateOne) AddConfigFiles(c ...*CarConfig) *CarsModelsUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cmuo.AddConfigFileIDs(ids...)
}

// Mutation returns the CarsModelsMutation object of the builder.
func (cmuo *CarsModelsUpdateOne) Mutation() *CarsModelsMutation {
	return cmuo.mutation
}

// ClearCars clears all "cars" edges to the Car entity.
func (cmuo *CarsModelsUpdateOne) ClearCars() *CarsModelsUpdateOne {
	cmuo.mutation.ClearCars()
	return cmuo
}

// RemoveCarIDs removes the "cars" edge to Car entities by IDs.
func (cmuo *CarsModelsUpdateOne) RemoveCarIDs(ids ...int) *CarsModelsUpdateOne {
	cmuo.mutation.RemoveCarIDs(ids...)
	return cmuo
}

// RemoveCars removes "cars" edges to Car entities.
func (cmuo *CarsModelsUpdateOne) RemoveCars(c ...*Car) *CarsModelsUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cmuo.RemoveCarIDs(ids...)
}

// ClearGroups clears all "groups" edges to the CarsModelsGroups entity.
func (cmuo *CarsModelsUpdateOne) ClearGroups() *CarsModelsUpdateOne {
	cmuo.mutation.ClearGroups()
	return cmuo
}

// RemoveGroupIDs removes the "groups" edge to CarsModelsGroups entities by IDs.
func (cmuo *CarsModelsUpdateOne) RemoveGroupIDs(ids ...int) *CarsModelsUpdateOne {
	cmuo.mutation.RemoveGroupIDs(ids...)
	return cmuo
}

// RemoveGroups removes "groups" edges to CarsModelsGroups entities.
func (cmuo *CarsModelsUpdateOne) RemoveGroups(c ...*CarsModelsGroups) *CarsModelsUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cmuo.RemoveGroupIDs(ids...)
}

// ClearParams clears all "params" edges to the CarsModelsGroupsParams entity.
func (cmuo *CarsModelsUpdateOne) ClearParams() *CarsModelsUpdateOne {
	cmuo.mutation.ClearParams()
	return cmuo
}

// RemoveParamIDs removes the "params" edge to CarsModelsGroupsParams entities by IDs.
func (cmuo *CarsModelsUpdateOne) RemoveParamIDs(ids ...int) *CarsModelsUpdateOne {
	cmuo.mutation.RemoveParamIDs(ids...)
	return cmuo
}

// RemoveParams removes "params" edges to CarsModelsGroupsParams entities.
func (cmuo *CarsModelsUpdateOne) RemoveParams(c ...*CarsModelsGroupsParams) *CarsModelsUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cmuo.RemoveParamIDs(ids...)
}

// ClearConfigFiles clears all "config_files" edges to the CarConfig entity.
func (cmuo *CarsModelsUpdateOne) ClearConfigFiles() *CarsModelsUpdateOne {
	cmuo.mutation.ClearConfigFiles()
	return cmuo
}

// RemoveConfigFileIDs removes the "config_files" edge to CarConfig entities by IDs.
func (cmuo *CarsModelsUpdateOne) RemoveConfigFileIDs(ids ...int) *CarsModelsUpdateOne {
	cmuo.mutation.RemoveConfigFileIDs(ids...)
	return cmuo
}

// RemoveConfigFiles removes "config_files" edges to CarConfig entities.
func (cmuo *CarsModelsUpdateOne) RemoveConfigFiles(c ...*CarConfig) *CarsModelsUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cmuo.RemoveConfigFileIDs(ids...)
}

// Where appends a list predicates to the CarsModelsUpdate builder.
func (cmuo *CarsModelsUpdateOne) Where(ps ...predicate.CarsModels) *CarsModelsUpdateOne {
	cmuo.mutation.Where(ps...)
	return cmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cmuo *CarsModelsUpdateOne) Select(field string, fields ...string) *CarsModelsUpdateOne {
	cmuo.fields = append([]string{field}, fields...)
	return cmuo
}

// Save executes the query and returns the updated CarsModels entity.
func (cmuo *CarsModelsUpdateOne) Save(ctx context.Context) (*CarsModels, error) {
	cmuo.defaults()
	return withHooks(ctx, cmuo.sqlSave, cmuo.mutation, cmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cmuo *CarsModelsUpdateOne) SaveX(ctx context.Context) *CarsModels {
	node, err := cmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cmuo *CarsModelsUpdateOne) Exec(ctx context.Context) error {
	_, err := cmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmuo *CarsModelsUpdateOne) ExecX(ctx context.Context) {
	if err := cmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cmuo *CarsModelsUpdateOne) defaults() {
	if _, ok := cmuo.mutation.UpdateTime(); !ok {
		v := carsmodels.UpdateDefaultUpdateTime()
		cmuo.mutation.SetUpdateTime(v)
	}
}

func (cmuo *CarsModelsUpdateOne) sqlSave(ctx context.Context) (_node *CarsModels, err error) {
	_spec := sqlgraph.NewUpdateSpec(carsmodels.Table, carsmodels.Columns, sqlgraph.NewFieldSpec(carsmodels.FieldID, field.TypeInt))
	id, ok := cmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CarsModels.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carsmodels.FieldID)
		for _, f := range fields {
			if !carsmodels.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != carsmodels.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmuo.mutation.ModelName(); ok {
		_spec.SetField(carsmodels.FieldModelName, field.TypeString, value)
	}
	if value, ok := cmuo.mutation.ModelRemark(); ok {
		_spec.SetField(carsmodels.FieldModelRemark, field.TypeString, value)
	}
	if value, ok := cmuo.mutation.GroupCount(); ok {
		_spec.SetField(carsmodels.FieldGroupCount, field.TypeInt, value)
	}
	if value, ok := cmuo.mutation.AddedGroupCount(); ok {
		_spec.AddField(carsmodels.FieldGroupCount, field.TypeInt, value)
	}
	if value, ok := cmuo.mutation.Status(); ok {
		_spec.SetField(carsmodels.FieldStatus, field.TypeInt, value)
	}
	if value, ok := cmuo.mutation.AddedStatus(); ok {
		_spec.AddField(carsmodels.FieldStatus, field.TypeInt, value)
	}
	if value, ok := cmuo.mutation.CarIncr(); ok {
		_spec.SetField(carsmodels.FieldCarIncr, field.TypeInt, value)
	}
	if value, ok := cmuo.mutation.AddedCarIncr(); ok {
		_spec.AddField(carsmodels.FieldCarIncr, field.TypeInt, value)
	}
	if value, ok := cmuo.mutation.IsDeleted(); ok {
		_spec.SetField(carsmodels.FieldIsDeleted, field.TypeInt, value)
	}
	if value, ok := cmuo.mutation.AddedIsDeleted(); ok {
		_spec.AddField(carsmodels.FieldIsDeleted, field.TypeInt, value)
	}
	if value, ok := cmuo.mutation.UpdateTime(); ok {
		_spec.SetField(carsmodels.FieldUpdateTime, field.TypeTime, value)
	}
	if cmuo.mutation.CarsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carsmodels.CarsTable,
			Columns: []string{carsmodels.CarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmuo.mutation.RemovedCarsIDs(); len(nodes) > 0 && !cmuo.mutation.CarsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carsmodels.CarsTable,
			Columns: []string{carsmodels.CarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmuo.mutation.CarsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carsmodels.CarsTable,
			Columns: []string{carsmodels.CarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cmuo.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carsmodels.GroupsTable,
			Columns: []string{carsmodels.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsmodelsgroups.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmuo.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !cmuo.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carsmodels.GroupsTable,
			Columns: []string{carsmodels.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsmodelsgroups.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmuo.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carsmodels.GroupsTable,
			Columns: []string{carsmodels.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsmodelsgroups.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cmuo.mutation.ParamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carsmodels.ParamsTable,
			Columns: []string{carsmodels.ParamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsmodelsgroupsparams.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmuo.mutation.RemovedParamsIDs(); len(nodes) > 0 && !cmuo.mutation.ParamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carsmodels.ParamsTable,
			Columns: []string{carsmodels.ParamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsmodelsgroupsparams.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmuo.mutation.ParamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carsmodels.ParamsTable,
			Columns: []string{carsmodels.ParamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsmodelsgroupsparams.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cmuo.mutation.ConfigFilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carsmodels.ConfigFilesTable,
			Columns: []string{carsmodels.ConfigFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carconfig.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmuo.mutation.RemovedConfigFilesIDs(); len(nodes) > 0 && !cmuo.mutation.ConfigFilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carsmodels.ConfigFilesTable,
			Columns: []string{carsmodels.ConfigFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carconfig.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmuo.mutation.ConfigFilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carsmodels.ConfigFilesTable,
			Columns: []string{carsmodels.ConfigFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carconfig.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CarsModels{config: cmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carsmodels.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cmuo.mutation.done = true
	return _node, nil
}
