// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/carsflightextendyokee"
)

// CarsFlightExtendYokeeCreate is the builder for creating a CarsFlightExtendYokee entity.
type CarsFlightExtendYokeeCreate struct {
	config
	mutation *CarsFlightExtendYokeeMutation
	hooks    []Hook
}

// SetFlightID sets the "flight_id" field.
func (cfeyc *CarsFlightExtendYokeeCreate) SetFlightID(i int) *CarsFlightExtendYokeeCreate {
	cfeyc.mutation.SetFlightID(i)
	return cfeyc
}

// SetYokeeDispatchID sets the "yokee_dispatch_id" field.
func (cfeyc *CarsFlightExtendYokeeCreate) SetYokeeDispatchID(i int) *CarsFlightExtendYokeeCreate {
	cfeyc.mutation.SetYokeeDispatchID(i)
	return cfeyc
}

// SetYokeeSpeedLimit sets the "yokee_speed_limit" field.
func (cfeyc *CarsFlightExtendYokeeCreate) SetYokeeSpeedLimit(i int) *CarsFlightExtendYokeeCreate {
	cfeyc.mutation.SetYokeeSpeedLimit(i)
	return cfeyc
}

// SetCreateTime sets the "create_time" field.
func (cfeyc *CarsFlightExtendYokeeCreate) SetCreateTime(t time.Time) *CarsFlightExtendYokeeCreate {
	cfeyc.mutation.SetCreateTime(t)
	return cfeyc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (cfeyc *CarsFlightExtendYokeeCreate) SetNillableCreateTime(t *time.Time) *CarsFlightExtendYokeeCreate {
	if t != nil {
		cfeyc.SetCreateTime(*t)
	}
	return cfeyc
}

// SetUpdateTime sets the "update_time" field.
func (cfeyc *CarsFlightExtendYokeeCreate) SetUpdateTime(t time.Time) *CarsFlightExtendYokeeCreate {
	cfeyc.mutation.SetUpdateTime(t)
	return cfeyc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (cfeyc *CarsFlightExtendYokeeCreate) SetNillableUpdateTime(t *time.Time) *CarsFlightExtendYokeeCreate {
	if t != nil {
		cfeyc.SetUpdateTime(*t)
	}
	return cfeyc
}

// SetID sets the "id" field.
func (cfeyc *CarsFlightExtendYokeeCreate) SetID(i int) *CarsFlightExtendYokeeCreate {
	cfeyc.mutation.SetID(i)
	return cfeyc
}

// Mutation returns the CarsFlightExtendYokeeMutation object of the builder.
func (cfeyc *CarsFlightExtendYokeeCreate) Mutation() *CarsFlightExtendYokeeMutation {
	return cfeyc.mutation
}

// Save creates the CarsFlightExtendYokee in the database.
func (cfeyc *CarsFlightExtendYokeeCreate) Save(ctx context.Context) (*CarsFlightExtendYokee, error) {
	cfeyc.defaults()
	return withHooks(ctx, cfeyc.sqlSave, cfeyc.mutation, cfeyc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cfeyc *CarsFlightExtendYokeeCreate) SaveX(ctx context.Context) *CarsFlightExtendYokee {
	v, err := cfeyc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cfeyc *CarsFlightExtendYokeeCreate) Exec(ctx context.Context) error {
	_, err := cfeyc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cfeyc *CarsFlightExtendYokeeCreate) ExecX(ctx context.Context) {
	if err := cfeyc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cfeyc *CarsFlightExtendYokeeCreate) defaults() {
	if _, ok := cfeyc.mutation.CreateTime(); !ok {
		v := carsflightextendyokee.DefaultCreateTime()
		cfeyc.mutation.SetCreateTime(v)
	}
	if _, ok := cfeyc.mutation.UpdateTime(); !ok {
		v := carsflightextendyokee.DefaultUpdateTime()
		cfeyc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cfeyc *CarsFlightExtendYokeeCreate) check() error {
	if _, ok := cfeyc.mutation.FlightID(); !ok {
		return &ValidationError{Name: "flight_id", err: errors.New(`ent: missing required field "CarsFlightExtendYokee.flight_id"`)}
	}
	if _, ok := cfeyc.mutation.YokeeDispatchID(); !ok {
		return &ValidationError{Name: "yokee_dispatch_id", err: errors.New(`ent: missing required field "CarsFlightExtendYokee.yokee_dispatch_id"`)}
	}
	if _, ok := cfeyc.mutation.YokeeSpeedLimit(); !ok {
		return &ValidationError{Name: "yokee_speed_limit", err: errors.New(`ent: missing required field "CarsFlightExtendYokee.yokee_speed_limit"`)}
	}
	if _, ok := cfeyc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "CarsFlightExtendYokee.create_time"`)}
	}
	if _, ok := cfeyc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "CarsFlightExtendYokee.update_time"`)}
	}
	return nil
}

func (cfeyc *CarsFlightExtendYokeeCreate) sqlSave(ctx context.Context) (*CarsFlightExtendYokee, error) {
	if err := cfeyc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cfeyc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cfeyc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	cfeyc.mutation.id = &_node.ID
	cfeyc.mutation.done = true
	return _node, nil
}

func (cfeyc *CarsFlightExtendYokeeCreate) createSpec() (*CarsFlightExtendYokee, *sqlgraph.CreateSpec) {
	var (
		_node = &CarsFlightExtendYokee{config: cfeyc.config}
		_spec = sqlgraph.NewCreateSpec(carsflightextendyokee.Table, sqlgraph.NewFieldSpec(carsflightextendyokee.FieldID, field.TypeInt))
	)
	if id, ok := cfeyc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cfeyc.mutation.FlightID(); ok {
		_spec.SetField(carsflightextendyokee.FieldFlightID, field.TypeInt, value)
		_node.FlightID = value
	}
	if value, ok := cfeyc.mutation.YokeeDispatchID(); ok {
		_spec.SetField(carsflightextendyokee.FieldYokeeDispatchID, field.TypeInt, value)
		_node.YokeeDispatchID = value
	}
	if value, ok := cfeyc.mutation.YokeeSpeedLimit(); ok {
		_spec.SetField(carsflightextendyokee.FieldYokeeSpeedLimit, field.TypeInt, value)
		_node.YokeeSpeedLimit = value
	}
	if value, ok := cfeyc.mutation.CreateTime(); ok {
		_spec.SetField(carsflightextendyokee.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := cfeyc.mutation.UpdateTime(); ok {
		_spec.SetField(carsflightextendyokee.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// CarsFlightExtendYokeeCreateBulk is the builder for creating many CarsFlightExtendYokee entities in bulk.
type CarsFlightExtendYokeeCreateBulk struct {
	config
	err      error
	builders []*CarsFlightExtendYokeeCreate
}

// Save creates the CarsFlightExtendYokee entities in the database.
func (cfeycb *CarsFlightExtendYokeeCreateBulk) Save(ctx context.Context) ([]*CarsFlightExtendYokee, error) {
	if cfeycb.err != nil {
		return nil, cfeycb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cfeycb.builders))
	nodes := make([]*CarsFlightExtendYokee, len(cfeycb.builders))
	mutators := make([]Mutator, len(cfeycb.builders))
	for i := range cfeycb.builders {
		func(i int, root context.Context) {
			builder := cfeycb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CarsFlightExtendYokeeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cfeycb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cfeycb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cfeycb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cfeycb *CarsFlightExtendYokeeCreateBulk) SaveX(ctx context.Context) []*CarsFlightExtendYokee {
	v, err := cfeycb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cfeycb *CarsFlightExtendYokeeCreateBulk) Exec(ctx context.Context) error {
	_, err := cfeycb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cfeycb *CarsFlightExtendYokeeCreateBulk) ExecX(ctx context.Context) {
	if err := cfeycb.Exec(ctx); err != nil {
		panic(err)
	}
}
