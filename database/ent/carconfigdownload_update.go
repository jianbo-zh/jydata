// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/carconfigdownload"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// CarConfigDownloadUpdate is the builder for updating CarConfigDownload entities.
type CarConfigDownloadUpdate struct {
	config
	hooks    []Hook
	mutation *CarConfigDownloadMutation
}

// Where appends a list predicates to the CarConfigDownloadUpdate builder.
func (ccdu *CarConfigDownloadUpdate) Where(ps ...predicate.CarConfigDownload) *CarConfigDownloadUpdate {
	ccdu.mutation.Where(ps...)
	return ccdu
}

// SetUUID sets the "uuid" field.
func (ccdu *CarConfigDownloadUpdate) SetUUID(i int64) *CarConfigDownloadUpdate {
	ccdu.mutation.ResetUUID()
	ccdu.mutation.SetUUID(i)
	return ccdu
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (ccdu *CarConfigDownloadUpdate) SetNillableUUID(i *int64) *CarConfigDownloadUpdate {
	if i != nil {
		ccdu.SetUUID(*i)
	}
	return ccdu
}

// AddUUID adds i to the "uuid" field.
func (ccdu *CarConfigDownloadUpdate) AddUUID(i int64) *CarConfigDownloadUpdate {
	ccdu.mutation.AddUUID(i)
	return ccdu
}

// SetCarID sets the "car_id" field.
func (ccdu *CarConfigDownloadUpdate) SetCarID(i int) *CarConfigDownloadUpdate {
	ccdu.mutation.ResetCarID()
	ccdu.mutation.SetCarID(i)
	return ccdu
}

// SetNillableCarID sets the "car_id" field if the given value is not nil.
func (ccdu *CarConfigDownloadUpdate) SetNillableCarID(i *int) *CarConfigDownloadUpdate {
	if i != nil {
		ccdu.SetCarID(*i)
	}
	return ccdu
}

// AddCarID adds i to the "car_id" field.
func (ccdu *CarConfigDownloadUpdate) AddCarID(i int) *CarConfigDownloadUpdate {
	ccdu.mutation.AddCarID(i)
	return ccdu
}

// SetDeviceID sets the "device_id" field.
func (ccdu *CarConfigDownloadUpdate) SetDeviceID(s string) *CarConfigDownloadUpdate {
	ccdu.mutation.SetDeviceID(s)
	return ccdu
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (ccdu *CarConfigDownloadUpdate) SetNillableDeviceID(s *string) *CarConfigDownloadUpdate {
	if s != nil {
		ccdu.SetDeviceID(*s)
	}
	return ccdu
}

// SetDownloadState sets the "download_state" field.
func (ccdu *CarConfigDownloadUpdate) SetDownloadState(s string) *CarConfigDownloadUpdate {
	ccdu.mutation.SetDownloadState(s)
	return ccdu
}

// SetNillableDownloadState sets the "download_state" field if the given value is not nil.
func (ccdu *CarConfigDownloadUpdate) SetNillableDownloadState(s *string) *CarConfigDownloadUpdate {
	if s != nil {
		ccdu.SetDownloadState(*s)
	}
	return ccdu
}

// SetDownloadProcess sets the "download_process" field.
func (ccdu *CarConfigDownloadUpdate) SetDownloadProcess(i int) *CarConfigDownloadUpdate {
	ccdu.mutation.ResetDownloadProcess()
	ccdu.mutation.SetDownloadProcess(i)
	return ccdu
}

// SetNillableDownloadProcess sets the "download_process" field if the given value is not nil.
func (ccdu *CarConfigDownloadUpdate) SetNillableDownloadProcess(i *int) *CarConfigDownloadUpdate {
	if i != nil {
		ccdu.SetDownloadProcess(*i)
	}
	return ccdu
}

// AddDownloadProcess adds i to the "download_process" field.
func (ccdu *CarConfigDownloadUpdate) AddDownloadProcess(i int) *CarConfigDownloadUpdate {
	ccdu.mutation.AddDownloadProcess(i)
	return ccdu
}

// SetConfigIds sets the "config_ids" field.
func (ccdu *CarConfigDownloadUpdate) SetConfigIds(i []int) *CarConfigDownloadUpdate {
	ccdu.mutation.SetConfigIds(i)
	return ccdu
}

// AppendConfigIds appends i to the "config_ids" field.
func (ccdu *CarConfigDownloadUpdate) AppendConfigIds(i []int) *CarConfigDownloadUpdate {
	ccdu.mutation.AppendConfigIds(i)
	return ccdu
}

// SetRemark sets the "remark" field.
func (ccdu *CarConfigDownloadUpdate) SetRemark(s string) *CarConfigDownloadUpdate {
	ccdu.mutation.SetRemark(s)
	return ccdu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ccdu *CarConfigDownloadUpdate) SetNillableRemark(s *string) *CarConfigDownloadUpdate {
	if s != nil {
		ccdu.SetRemark(*s)
	}
	return ccdu
}

// SetUpdateTime sets the "update_time" field.
func (ccdu *CarConfigDownloadUpdate) SetUpdateTime(t time.Time) *CarConfigDownloadUpdate {
	ccdu.mutation.SetUpdateTime(t)
	return ccdu
}

// Mutation returns the CarConfigDownloadMutation object of the builder.
func (ccdu *CarConfigDownloadUpdate) Mutation() *CarConfigDownloadMutation {
	return ccdu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ccdu *CarConfigDownloadUpdate) Save(ctx context.Context) (int, error) {
	ccdu.defaults()
	return withHooks(ctx, ccdu.sqlSave, ccdu.mutation, ccdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ccdu *CarConfigDownloadUpdate) SaveX(ctx context.Context) int {
	affected, err := ccdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ccdu *CarConfigDownloadUpdate) Exec(ctx context.Context) error {
	_, err := ccdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccdu *CarConfigDownloadUpdate) ExecX(ctx context.Context) {
	if err := ccdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ccdu *CarConfigDownloadUpdate) defaults() {
	if _, ok := ccdu.mutation.UpdateTime(); !ok {
		v := carconfigdownload.UpdateDefaultUpdateTime()
		ccdu.mutation.SetUpdateTime(v)
	}
}

func (ccdu *CarConfigDownloadUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(carconfigdownload.Table, carconfigdownload.Columns, sqlgraph.NewFieldSpec(carconfigdownload.FieldID, field.TypeInt))
	if ps := ccdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccdu.mutation.UUID(); ok {
		_spec.SetField(carconfigdownload.FieldUUID, field.TypeInt64, value)
	}
	if value, ok := ccdu.mutation.AddedUUID(); ok {
		_spec.AddField(carconfigdownload.FieldUUID, field.TypeInt64, value)
	}
	if value, ok := ccdu.mutation.CarID(); ok {
		_spec.SetField(carconfigdownload.FieldCarID, field.TypeInt, value)
	}
	if value, ok := ccdu.mutation.AddedCarID(); ok {
		_spec.AddField(carconfigdownload.FieldCarID, field.TypeInt, value)
	}
	if value, ok := ccdu.mutation.DeviceID(); ok {
		_spec.SetField(carconfigdownload.FieldDeviceID, field.TypeString, value)
	}
	if value, ok := ccdu.mutation.DownloadState(); ok {
		_spec.SetField(carconfigdownload.FieldDownloadState, field.TypeString, value)
	}
	if value, ok := ccdu.mutation.DownloadProcess(); ok {
		_spec.SetField(carconfigdownload.FieldDownloadProcess, field.TypeInt, value)
	}
	if value, ok := ccdu.mutation.AddedDownloadProcess(); ok {
		_spec.AddField(carconfigdownload.FieldDownloadProcess, field.TypeInt, value)
	}
	if value, ok := ccdu.mutation.ConfigIds(); ok {
		_spec.SetField(carconfigdownload.FieldConfigIds, field.TypeJSON, value)
	}
	if value, ok := ccdu.mutation.AppendedConfigIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, carconfigdownload.FieldConfigIds, value)
		})
	}
	if value, ok := ccdu.mutation.Remark(); ok {
		_spec.SetField(carconfigdownload.FieldRemark, field.TypeString, value)
	}
	if value, ok := ccdu.mutation.UpdateTime(); ok {
		_spec.SetField(carconfigdownload.FieldUpdateTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ccdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carconfigdownload.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ccdu.mutation.done = true
	return n, nil
}

// CarConfigDownloadUpdateOne is the builder for updating a single CarConfigDownload entity.
type CarConfigDownloadUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CarConfigDownloadMutation
}

// SetUUID sets the "uuid" field.
func (ccduo *CarConfigDownloadUpdateOne) SetUUID(i int64) *CarConfigDownloadUpdateOne {
	ccduo.mutation.ResetUUID()
	ccduo.mutation.SetUUID(i)
	return ccduo
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (ccduo *CarConfigDownloadUpdateOne) SetNillableUUID(i *int64) *CarConfigDownloadUpdateOne {
	if i != nil {
		ccduo.SetUUID(*i)
	}
	return ccduo
}

// AddUUID adds i to the "uuid" field.
func (ccduo *CarConfigDownloadUpdateOne) AddUUID(i int64) *CarConfigDownloadUpdateOne {
	ccduo.mutation.AddUUID(i)
	return ccduo
}

// SetCarID sets the "car_id" field.
func (ccduo *CarConfigDownloadUpdateOne) SetCarID(i int) *CarConfigDownloadUpdateOne {
	ccduo.mutation.ResetCarID()
	ccduo.mutation.SetCarID(i)
	return ccduo
}

// SetNillableCarID sets the "car_id" field if the given value is not nil.
func (ccduo *CarConfigDownloadUpdateOne) SetNillableCarID(i *int) *CarConfigDownloadUpdateOne {
	if i != nil {
		ccduo.SetCarID(*i)
	}
	return ccduo
}

// AddCarID adds i to the "car_id" field.
func (ccduo *CarConfigDownloadUpdateOne) AddCarID(i int) *CarConfigDownloadUpdateOne {
	ccduo.mutation.AddCarID(i)
	return ccduo
}

// SetDeviceID sets the "device_id" field.
func (ccduo *CarConfigDownloadUpdateOne) SetDeviceID(s string) *CarConfigDownloadUpdateOne {
	ccduo.mutation.SetDeviceID(s)
	return ccduo
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (ccduo *CarConfigDownloadUpdateOne) SetNillableDeviceID(s *string) *CarConfigDownloadUpdateOne {
	if s != nil {
		ccduo.SetDeviceID(*s)
	}
	return ccduo
}

// SetDownloadState sets the "download_state" field.
func (ccduo *CarConfigDownloadUpdateOne) SetDownloadState(s string) *CarConfigDownloadUpdateOne {
	ccduo.mutation.SetDownloadState(s)
	return ccduo
}

// SetNillableDownloadState sets the "download_state" field if the given value is not nil.
func (ccduo *CarConfigDownloadUpdateOne) SetNillableDownloadState(s *string) *CarConfigDownloadUpdateOne {
	if s != nil {
		ccduo.SetDownloadState(*s)
	}
	return ccduo
}

// SetDownloadProcess sets the "download_process" field.
func (ccduo *CarConfigDownloadUpdateOne) SetDownloadProcess(i int) *CarConfigDownloadUpdateOne {
	ccduo.mutation.ResetDownloadProcess()
	ccduo.mutation.SetDownloadProcess(i)
	return ccduo
}

// SetNillableDownloadProcess sets the "download_process" field if the given value is not nil.
func (ccduo *CarConfigDownloadUpdateOne) SetNillableDownloadProcess(i *int) *CarConfigDownloadUpdateOne {
	if i != nil {
		ccduo.SetDownloadProcess(*i)
	}
	return ccduo
}

// AddDownloadProcess adds i to the "download_process" field.
func (ccduo *CarConfigDownloadUpdateOne) AddDownloadProcess(i int) *CarConfigDownloadUpdateOne {
	ccduo.mutation.AddDownloadProcess(i)
	return ccduo
}

// SetConfigIds sets the "config_ids" field.
func (ccduo *CarConfigDownloadUpdateOne) SetConfigIds(i []int) *CarConfigDownloadUpdateOne {
	ccduo.mutation.SetConfigIds(i)
	return ccduo
}

// AppendConfigIds appends i to the "config_ids" field.
func (ccduo *CarConfigDownloadUpdateOne) AppendConfigIds(i []int) *CarConfigDownloadUpdateOne {
	ccduo.mutation.AppendConfigIds(i)
	return ccduo
}

// SetRemark sets the "remark" field.
func (ccduo *CarConfigDownloadUpdateOne) SetRemark(s string) *CarConfigDownloadUpdateOne {
	ccduo.mutation.SetRemark(s)
	return ccduo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ccduo *CarConfigDownloadUpdateOne) SetNillableRemark(s *string) *CarConfigDownloadUpdateOne {
	if s != nil {
		ccduo.SetRemark(*s)
	}
	return ccduo
}

// SetUpdateTime sets the "update_time" field.
func (ccduo *CarConfigDownloadUpdateOne) SetUpdateTime(t time.Time) *CarConfigDownloadUpdateOne {
	ccduo.mutation.SetUpdateTime(t)
	return ccduo
}

// Mutation returns the CarConfigDownloadMutation object of the builder.
func (ccduo *CarConfigDownloadUpdateOne) Mutation() *CarConfigDownloadMutation {
	return ccduo.mutation
}

// Where appends a list predicates to the CarConfigDownloadUpdate builder.
func (ccduo *CarConfigDownloadUpdateOne) Where(ps ...predicate.CarConfigDownload) *CarConfigDownloadUpdateOne {
	ccduo.mutation.Where(ps...)
	return ccduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ccduo *CarConfigDownloadUpdateOne) Select(field string, fields ...string) *CarConfigDownloadUpdateOne {
	ccduo.fields = append([]string{field}, fields...)
	return ccduo
}

// Save executes the query and returns the updated CarConfigDownload entity.
func (ccduo *CarConfigDownloadUpdateOne) Save(ctx context.Context) (*CarConfigDownload, error) {
	ccduo.defaults()
	return withHooks(ctx, ccduo.sqlSave, ccduo.mutation, ccduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ccduo *CarConfigDownloadUpdateOne) SaveX(ctx context.Context) *CarConfigDownload {
	node, err := ccduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ccduo *CarConfigDownloadUpdateOne) Exec(ctx context.Context) error {
	_, err := ccduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccduo *CarConfigDownloadUpdateOne) ExecX(ctx context.Context) {
	if err := ccduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ccduo *CarConfigDownloadUpdateOne) defaults() {
	if _, ok := ccduo.mutation.UpdateTime(); !ok {
		v := carconfigdownload.UpdateDefaultUpdateTime()
		ccduo.mutation.SetUpdateTime(v)
	}
}

func (ccduo *CarConfigDownloadUpdateOne) sqlSave(ctx context.Context) (_node *CarConfigDownload, err error) {
	_spec := sqlgraph.NewUpdateSpec(carconfigdownload.Table, carconfigdownload.Columns, sqlgraph.NewFieldSpec(carconfigdownload.FieldID, field.TypeInt))
	id, ok := ccduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CarConfigDownload.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ccduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carconfigdownload.FieldID)
		for _, f := range fields {
			if !carconfigdownload.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != carconfigdownload.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ccduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccduo.mutation.UUID(); ok {
		_spec.SetField(carconfigdownload.FieldUUID, field.TypeInt64, value)
	}
	if value, ok := ccduo.mutation.AddedUUID(); ok {
		_spec.AddField(carconfigdownload.FieldUUID, field.TypeInt64, value)
	}
	if value, ok := ccduo.mutation.CarID(); ok {
		_spec.SetField(carconfigdownload.FieldCarID, field.TypeInt, value)
	}
	if value, ok := ccduo.mutation.AddedCarID(); ok {
		_spec.AddField(carconfigdownload.FieldCarID, field.TypeInt, value)
	}
	if value, ok := ccduo.mutation.DeviceID(); ok {
		_spec.SetField(carconfigdownload.FieldDeviceID, field.TypeString, value)
	}
	if value, ok := ccduo.mutation.DownloadState(); ok {
		_spec.SetField(carconfigdownload.FieldDownloadState, field.TypeString, value)
	}
	if value, ok := ccduo.mutation.DownloadProcess(); ok {
		_spec.SetField(carconfigdownload.FieldDownloadProcess, field.TypeInt, value)
	}
	if value, ok := ccduo.mutation.AddedDownloadProcess(); ok {
		_spec.AddField(carconfigdownload.FieldDownloadProcess, field.TypeInt, value)
	}
	if value, ok := ccduo.mutation.ConfigIds(); ok {
		_spec.SetField(carconfigdownload.FieldConfigIds, field.TypeJSON, value)
	}
	if value, ok := ccduo.mutation.AppendedConfigIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, carconfigdownload.FieldConfigIds, value)
		})
	}
	if value, ok := ccduo.mutation.Remark(); ok {
		_spec.SetField(carconfigdownload.FieldRemark, field.TypeString, value)
	}
	if value, ok := ccduo.mutation.UpdateTime(); ok {
		_spec.SetField(carconfigdownload.FieldUpdateTime, field.TypeTime, value)
	}
	_node = &CarConfigDownload{config: ccduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ccduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carconfigdownload.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ccduo.mutation.done = true
	return _node, nil
}
