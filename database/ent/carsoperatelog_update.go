// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/car"
	"github.com/jianbo-zh/jydata/database/ent/carsoperatelog"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"github.com/jianbo-zh/jydata/database/ent/scenicarea"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarsOperateLogUpdate is the builder for updating CarsOperateLog entities.
type CarsOperateLogUpdate struct {
	config
	hooks    []Hook
	mutation *CarsOperateLogMutation
}

// Where appends a list predicates to the CarsOperateLogUpdate builder.
func (colu *CarsOperateLogUpdate) Where(ps ...predicate.CarsOperateLog) *CarsOperateLogUpdate {
	colu.mutation.Where(ps...)
	return colu
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (colu *CarsOperateLogUpdate) SetScenicAreaID(i int) *CarsOperateLogUpdate {
	colu.mutation.SetScenicAreaID(i)
	return colu
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (colu *CarsOperateLogUpdate) SetNillableScenicAreaID(i *int) *CarsOperateLogUpdate {
	if i != nil {
		colu.SetScenicAreaID(*i)
	}
	return colu
}

// SetOrigin sets the "origin" field.
func (colu *CarsOperateLogUpdate) SetOrigin(s string) *CarsOperateLogUpdate {
	colu.mutation.SetOrigin(s)
	return colu
}

// SetNillableOrigin sets the "origin" field if the given value is not nil.
func (colu *CarsOperateLogUpdate) SetNillableOrigin(s *string) *CarsOperateLogUpdate {
	if s != nil {
		colu.SetOrigin(*s)
	}
	return colu
}

// SetOriginUID sets the "origin_uid" field.
func (colu *CarsOperateLogUpdate) SetOriginUID(i int) *CarsOperateLogUpdate {
	colu.mutation.ResetOriginUID()
	colu.mutation.SetOriginUID(i)
	return colu
}

// SetNillableOriginUID sets the "origin_uid" field if the given value is not nil.
func (colu *CarsOperateLogUpdate) SetNillableOriginUID(i *int) *CarsOperateLogUpdate {
	if i != nil {
		colu.SetOriginUID(*i)
	}
	return colu
}

// AddOriginUID adds i to the "origin_uid" field.
func (colu *CarsOperateLogUpdate) AddOriginUID(i int) *CarsOperateLogUpdate {
	colu.mutation.AddOriginUID(i)
	return colu
}

// SetOriginIP sets the "origin_ip" field.
func (colu *CarsOperateLogUpdate) SetOriginIP(s string) *CarsOperateLogUpdate {
	colu.mutation.SetOriginIP(s)
	return colu
}

// SetNillableOriginIP sets the "origin_ip" field if the given value is not nil.
func (colu *CarsOperateLogUpdate) SetNillableOriginIP(s *string) *CarsOperateLogUpdate {
	if s != nil {
		colu.SetOriginIP(*s)
	}
	return colu
}

// SetOperateAction sets the "operate_action" field.
func (colu *CarsOperateLogUpdate) SetOperateAction(s string) *CarsOperateLogUpdate {
	colu.mutation.SetOperateAction(s)
	return colu
}

// SetNillableOperateAction sets the "operate_action" field if the given value is not nil.
func (colu *CarsOperateLogUpdate) SetNillableOperateAction(s *string) *CarsOperateLogUpdate {
	if s != nil {
		colu.SetOperateAction(*s)
	}
	return colu
}

// SetCarID sets the "car_id" field.
func (colu *CarsOperateLogUpdate) SetCarID(i int) *CarsOperateLogUpdate {
	colu.mutation.SetCarID(i)
	return colu
}

// SetNillableCarID sets the "car_id" field if the given value is not nil.
func (colu *CarsOperateLogUpdate) SetNillableCarID(i *int) *CarsOperateLogUpdate {
	if i != nil {
		colu.SetCarID(*i)
	}
	return colu
}

// SetDeviceID sets the "device_id" field.
func (colu *CarsOperateLogUpdate) SetDeviceID(s string) *CarsOperateLogUpdate {
	colu.mutation.SetDeviceID(s)
	return colu
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (colu *CarsOperateLogUpdate) SetNillableDeviceID(s *string) *CarsOperateLogUpdate {
	if s != nil {
		colu.SetDeviceID(*s)
	}
	return colu
}

// SetCarLongitude sets the "car_longitude" field.
func (colu *CarsOperateLogUpdate) SetCarLongitude(f float64) *CarsOperateLogUpdate {
	colu.mutation.ResetCarLongitude()
	colu.mutation.SetCarLongitude(f)
	return colu
}

// SetNillableCarLongitude sets the "car_longitude" field if the given value is not nil.
func (colu *CarsOperateLogUpdate) SetNillableCarLongitude(f *float64) *CarsOperateLogUpdate {
	if f != nil {
		colu.SetCarLongitude(*f)
	}
	return colu
}

// AddCarLongitude adds f to the "car_longitude" field.
func (colu *CarsOperateLogUpdate) AddCarLongitude(f float64) *CarsOperateLogUpdate {
	colu.mutation.AddCarLongitude(f)
	return colu
}

// ClearCarLongitude clears the value of the "car_longitude" field.
func (colu *CarsOperateLogUpdate) ClearCarLongitude() *CarsOperateLogUpdate {
	colu.mutation.ClearCarLongitude()
	return colu
}

// SetCarLatitude sets the "car_latitude" field.
func (colu *CarsOperateLogUpdate) SetCarLatitude(f float64) *CarsOperateLogUpdate {
	colu.mutation.ResetCarLatitude()
	colu.mutation.SetCarLatitude(f)
	return colu
}

// SetNillableCarLatitude sets the "car_latitude" field if the given value is not nil.
func (colu *CarsOperateLogUpdate) SetNillableCarLatitude(f *float64) *CarsOperateLogUpdate {
	if f != nil {
		colu.SetCarLatitude(*f)
	}
	return colu
}

// AddCarLatitude adds f to the "car_latitude" field.
func (colu *CarsOperateLogUpdate) AddCarLatitude(f float64) *CarsOperateLogUpdate {
	colu.mutation.AddCarLatitude(f)
	return colu
}

// ClearCarLatitude clears the value of the "car_latitude" field.
func (colu *CarsOperateLogUpdate) ClearCarLatitude() *CarsOperateLogUpdate {
	colu.mutation.ClearCarLatitude()
	return colu
}

// SetCarMileage sets the "car_mileage" field.
func (colu *CarsOperateLogUpdate) SetCarMileage(f float64) *CarsOperateLogUpdate {
	colu.mutation.ResetCarMileage()
	colu.mutation.SetCarMileage(f)
	return colu
}

// SetNillableCarMileage sets the "car_mileage" field if the given value is not nil.
func (colu *CarsOperateLogUpdate) SetNillableCarMileage(f *float64) *CarsOperateLogUpdate {
	if f != nil {
		colu.SetCarMileage(*f)
	}
	return colu
}

// AddCarMileage adds f to the "car_mileage" field.
func (colu *CarsOperateLogUpdate) AddCarMileage(f float64) *CarsOperateLogUpdate {
	colu.mutation.AddCarMileage(f)
	return colu
}

// ClearCarMileage clears the value of the "car_mileage" field.
func (colu *CarsOperateLogUpdate) ClearCarMileage() *CarsOperateLogUpdate {
	colu.mutation.ClearCarMileage()
	return colu
}

// SetCarSpeed sets the "car_speed" field.
func (colu *CarsOperateLogUpdate) SetCarSpeed(f float64) *CarsOperateLogUpdate {
	colu.mutation.ResetCarSpeed()
	colu.mutation.SetCarSpeed(f)
	return colu
}

// SetNillableCarSpeed sets the "car_speed" field if the given value is not nil.
func (colu *CarsOperateLogUpdate) SetNillableCarSpeed(f *float64) *CarsOperateLogUpdate {
	if f != nil {
		colu.SetCarSpeed(*f)
	}
	return colu
}

// AddCarSpeed adds f to the "car_speed" field.
func (colu *CarsOperateLogUpdate) AddCarSpeed(f float64) *CarsOperateLogUpdate {
	colu.mutation.AddCarSpeed(f)
	return colu
}

// ClearCarSpeed clears the value of the "car_speed" field.
func (colu *CarsOperateLogUpdate) ClearCarSpeed() *CarsOperateLogUpdate {
	colu.mutation.ClearCarSpeed()
	return colu
}

// SetCarPower sets the "car_power" field.
func (colu *CarsOperateLogUpdate) SetCarPower(f float64) *CarsOperateLogUpdate {
	colu.mutation.ResetCarPower()
	colu.mutation.SetCarPower(f)
	return colu
}

// SetNillableCarPower sets the "car_power" field if the given value is not nil.
func (colu *CarsOperateLogUpdate) SetNillableCarPower(f *float64) *CarsOperateLogUpdate {
	if f != nil {
		colu.SetCarPower(*f)
	}
	return colu
}

// AddCarPower adds f to the "car_power" field.
func (colu *CarsOperateLogUpdate) AddCarPower(f float64) *CarsOperateLogUpdate {
	colu.mutation.AddCarPower(f)
	return colu
}

// ClearCarPower clears the value of the "car_power" field.
func (colu *CarsOperateLogUpdate) ClearCarPower() *CarsOperateLogUpdate {
	colu.mutation.ClearCarPower()
	return colu
}

// SetCarStatus sets the "car_status" field.
func (colu *CarsOperateLogUpdate) SetCarStatus(s string) *CarsOperateLogUpdate {
	colu.mutation.SetCarStatus(s)
	return colu
}

// SetNillableCarStatus sets the "car_status" field if the given value is not nil.
func (colu *CarsOperateLogUpdate) SetNillableCarStatus(s *string) *CarsOperateLogUpdate {
	if s != nil {
		colu.SetCarStatus(*s)
	}
	return colu
}

// ClearCarStatus clears the value of the "car_status" field.
func (colu *CarsOperateLogUpdate) ClearCarStatus() *CarsOperateLogUpdate {
	colu.mutation.ClearCarStatus()
	return colu
}

// SetOperateResult sets the "operate_result" field.
func (colu *CarsOperateLogUpdate) SetOperateResult(s string) *CarsOperateLogUpdate {
	colu.mutation.SetOperateResult(s)
	return colu
}

// SetNillableOperateResult sets the "operate_result" field if the given value is not nil.
func (colu *CarsOperateLogUpdate) SetNillableOperateResult(s *string) *CarsOperateLogUpdate {
	if s != nil {
		colu.SetOperateResult(*s)
	}
	return colu
}

// SetOperateState sets the "operate_state" field.
func (colu *CarsOperateLogUpdate) SetOperateState(i int) *CarsOperateLogUpdate {
	colu.mutation.ResetOperateState()
	colu.mutation.SetOperateState(i)
	return colu
}

// SetNillableOperateState sets the "operate_state" field if the given value is not nil.
func (colu *CarsOperateLogUpdate) SetNillableOperateState(i *int) *CarsOperateLogUpdate {
	if i != nil {
		colu.SetOperateState(*i)
	}
	return colu
}

// AddOperateState adds i to the "operate_state" field.
func (colu *CarsOperateLogUpdate) AddOperateState(i int) *CarsOperateLogUpdate {
	colu.mutation.AddOperateState(i)
	return colu
}

// SetUpdateTime sets the "update_time" field.
func (colu *CarsOperateLogUpdate) SetUpdateTime(t time.Time) *CarsOperateLogUpdate {
	colu.mutation.SetUpdateTime(t)
	return colu
}

// SetBackgroundScenicAreaID sets the "background_scenic_area" edge to the ScenicArea entity by ID.
func (colu *CarsOperateLogUpdate) SetBackgroundScenicAreaID(id int) *CarsOperateLogUpdate {
	colu.mutation.SetBackgroundScenicAreaID(id)
	return colu
}

// SetBackgroundScenicArea sets the "background_scenic_area" edge to the ScenicArea entity.
func (colu *CarsOperateLogUpdate) SetBackgroundScenicArea(s *ScenicArea) *CarsOperateLogUpdate {
	return colu.SetBackgroundScenicAreaID(s.ID)
}

// SetCar sets the "car" edge to the Car entity.
func (colu *CarsOperateLogUpdate) SetCar(c *Car) *CarsOperateLogUpdate {
	return colu.SetCarID(c.ID)
}

// Mutation returns the CarsOperateLogMutation object of the builder.
func (colu *CarsOperateLogUpdate) Mutation() *CarsOperateLogMutation {
	return colu.mutation
}

// ClearBackgroundScenicArea clears the "background_scenic_area" edge to the ScenicArea entity.
func (colu *CarsOperateLogUpdate) ClearBackgroundScenicArea() *CarsOperateLogUpdate {
	colu.mutation.ClearBackgroundScenicArea()
	return colu
}

// ClearCar clears the "car" edge to the Car entity.
func (colu *CarsOperateLogUpdate) ClearCar() *CarsOperateLogUpdate {
	colu.mutation.ClearCar()
	return colu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (colu *CarsOperateLogUpdate) Save(ctx context.Context) (int, error) {
	colu.defaults()
	return withHooks(ctx, colu.sqlSave, colu.mutation, colu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (colu *CarsOperateLogUpdate) SaveX(ctx context.Context) int {
	affected, err := colu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (colu *CarsOperateLogUpdate) Exec(ctx context.Context) error {
	_, err := colu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (colu *CarsOperateLogUpdate) ExecX(ctx context.Context) {
	if err := colu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (colu *CarsOperateLogUpdate) defaults() {
	if _, ok := colu.mutation.UpdateTime(); !ok {
		v := carsoperatelog.UpdateDefaultUpdateTime()
		colu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (colu *CarsOperateLogUpdate) check() error {
	if colu.mutation.BackgroundScenicAreaCleared() && len(colu.mutation.BackgroundScenicAreaIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarsOperateLog.background_scenic_area"`)
	}
	if colu.mutation.CarCleared() && len(colu.mutation.CarIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarsOperateLog.car"`)
	}
	return nil
}

func (colu *CarsOperateLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := colu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(carsoperatelog.Table, carsoperatelog.Columns, sqlgraph.NewFieldSpec(carsoperatelog.FieldID, field.TypeInt))
	if ps := colu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := colu.mutation.Origin(); ok {
		_spec.SetField(carsoperatelog.FieldOrigin, field.TypeString, value)
	}
	if value, ok := colu.mutation.OriginUID(); ok {
		_spec.SetField(carsoperatelog.FieldOriginUID, field.TypeInt, value)
	}
	if value, ok := colu.mutation.AddedOriginUID(); ok {
		_spec.AddField(carsoperatelog.FieldOriginUID, field.TypeInt, value)
	}
	if value, ok := colu.mutation.OriginIP(); ok {
		_spec.SetField(carsoperatelog.FieldOriginIP, field.TypeString, value)
	}
	if value, ok := colu.mutation.OperateAction(); ok {
		_spec.SetField(carsoperatelog.FieldOperateAction, field.TypeString, value)
	}
	if value, ok := colu.mutation.DeviceID(); ok {
		_spec.SetField(carsoperatelog.FieldDeviceID, field.TypeString, value)
	}
	if value, ok := colu.mutation.CarLongitude(); ok {
		_spec.SetField(carsoperatelog.FieldCarLongitude, field.TypeFloat64, value)
	}
	if value, ok := colu.mutation.AddedCarLongitude(); ok {
		_spec.AddField(carsoperatelog.FieldCarLongitude, field.TypeFloat64, value)
	}
	if colu.mutation.CarLongitudeCleared() {
		_spec.ClearField(carsoperatelog.FieldCarLongitude, field.TypeFloat64)
	}
	if value, ok := colu.mutation.CarLatitude(); ok {
		_spec.SetField(carsoperatelog.FieldCarLatitude, field.TypeFloat64, value)
	}
	if value, ok := colu.mutation.AddedCarLatitude(); ok {
		_spec.AddField(carsoperatelog.FieldCarLatitude, field.TypeFloat64, value)
	}
	if colu.mutation.CarLatitudeCleared() {
		_spec.ClearField(carsoperatelog.FieldCarLatitude, field.TypeFloat64)
	}
	if value, ok := colu.mutation.CarMileage(); ok {
		_spec.SetField(carsoperatelog.FieldCarMileage, field.TypeFloat64, value)
	}
	if value, ok := colu.mutation.AddedCarMileage(); ok {
		_spec.AddField(carsoperatelog.FieldCarMileage, field.TypeFloat64, value)
	}
	if colu.mutation.CarMileageCleared() {
		_spec.ClearField(carsoperatelog.FieldCarMileage, field.TypeFloat64)
	}
	if value, ok := colu.mutation.CarSpeed(); ok {
		_spec.SetField(carsoperatelog.FieldCarSpeed, field.TypeFloat64, value)
	}
	if value, ok := colu.mutation.AddedCarSpeed(); ok {
		_spec.AddField(carsoperatelog.FieldCarSpeed, field.TypeFloat64, value)
	}
	if colu.mutation.CarSpeedCleared() {
		_spec.ClearField(carsoperatelog.FieldCarSpeed, field.TypeFloat64)
	}
	if value, ok := colu.mutation.CarPower(); ok {
		_spec.SetField(carsoperatelog.FieldCarPower, field.TypeFloat64, value)
	}
	if value, ok := colu.mutation.AddedCarPower(); ok {
		_spec.AddField(carsoperatelog.FieldCarPower, field.TypeFloat64, value)
	}
	if colu.mutation.CarPowerCleared() {
		_spec.ClearField(carsoperatelog.FieldCarPower, field.TypeFloat64)
	}
	if value, ok := colu.mutation.CarStatus(); ok {
		_spec.SetField(carsoperatelog.FieldCarStatus, field.TypeString, value)
	}
	if colu.mutation.CarStatusCleared() {
		_spec.ClearField(carsoperatelog.FieldCarStatus, field.TypeString)
	}
	if value, ok := colu.mutation.OperateResult(); ok {
		_spec.SetField(carsoperatelog.FieldOperateResult, field.TypeString, value)
	}
	if value, ok := colu.mutation.OperateState(); ok {
		_spec.SetField(carsoperatelog.FieldOperateState, field.TypeInt, value)
	}
	if value, ok := colu.mutation.AddedOperateState(); ok {
		_spec.AddField(carsoperatelog.FieldOperateState, field.TypeInt, value)
	}
	if value, ok := colu.mutation.UpdateTime(); ok {
		_spec.SetField(carsoperatelog.FieldUpdateTime, field.TypeTime, value)
	}
	if colu.mutation.BackgroundScenicAreaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carsoperatelog.BackgroundScenicAreaTable,
			Columns: []string{carsoperatelog.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := colu.mutation.BackgroundScenicAreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carsoperatelog.BackgroundScenicAreaTable,
			Columns: []string{carsoperatelog.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if colu.mutation.CarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carsoperatelog.CarTable,
			Columns: []string{carsoperatelog.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := colu.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carsoperatelog.CarTable,
			Columns: []string{carsoperatelog.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, colu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carsoperatelog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	colu.mutation.done = true
	return n, nil
}

// CarsOperateLogUpdateOne is the builder for updating a single CarsOperateLog entity.
type CarsOperateLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CarsOperateLogMutation
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (coluo *CarsOperateLogUpdateOne) SetScenicAreaID(i int) *CarsOperateLogUpdateOne {
	coluo.mutation.SetScenicAreaID(i)
	return coluo
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (coluo *CarsOperateLogUpdateOne) SetNillableScenicAreaID(i *int) *CarsOperateLogUpdateOne {
	if i != nil {
		coluo.SetScenicAreaID(*i)
	}
	return coluo
}

// SetOrigin sets the "origin" field.
func (coluo *CarsOperateLogUpdateOne) SetOrigin(s string) *CarsOperateLogUpdateOne {
	coluo.mutation.SetOrigin(s)
	return coluo
}

// SetNillableOrigin sets the "origin" field if the given value is not nil.
func (coluo *CarsOperateLogUpdateOne) SetNillableOrigin(s *string) *CarsOperateLogUpdateOne {
	if s != nil {
		coluo.SetOrigin(*s)
	}
	return coluo
}

// SetOriginUID sets the "origin_uid" field.
func (coluo *CarsOperateLogUpdateOne) SetOriginUID(i int) *CarsOperateLogUpdateOne {
	coluo.mutation.ResetOriginUID()
	coluo.mutation.SetOriginUID(i)
	return coluo
}

// SetNillableOriginUID sets the "origin_uid" field if the given value is not nil.
func (coluo *CarsOperateLogUpdateOne) SetNillableOriginUID(i *int) *CarsOperateLogUpdateOne {
	if i != nil {
		coluo.SetOriginUID(*i)
	}
	return coluo
}

// AddOriginUID adds i to the "origin_uid" field.
func (coluo *CarsOperateLogUpdateOne) AddOriginUID(i int) *CarsOperateLogUpdateOne {
	coluo.mutation.AddOriginUID(i)
	return coluo
}

// SetOriginIP sets the "origin_ip" field.
func (coluo *CarsOperateLogUpdateOne) SetOriginIP(s string) *CarsOperateLogUpdateOne {
	coluo.mutation.SetOriginIP(s)
	return coluo
}

// SetNillableOriginIP sets the "origin_ip" field if the given value is not nil.
func (coluo *CarsOperateLogUpdateOne) SetNillableOriginIP(s *string) *CarsOperateLogUpdateOne {
	if s != nil {
		coluo.SetOriginIP(*s)
	}
	return coluo
}

// SetOperateAction sets the "operate_action" field.
func (coluo *CarsOperateLogUpdateOne) SetOperateAction(s string) *CarsOperateLogUpdateOne {
	coluo.mutation.SetOperateAction(s)
	return coluo
}

// SetNillableOperateAction sets the "operate_action" field if the given value is not nil.
func (coluo *CarsOperateLogUpdateOne) SetNillableOperateAction(s *string) *CarsOperateLogUpdateOne {
	if s != nil {
		coluo.SetOperateAction(*s)
	}
	return coluo
}

// SetCarID sets the "car_id" field.
func (coluo *CarsOperateLogUpdateOne) SetCarID(i int) *CarsOperateLogUpdateOne {
	coluo.mutation.SetCarID(i)
	return coluo
}

// SetNillableCarID sets the "car_id" field if the given value is not nil.
func (coluo *CarsOperateLogUpdateOne) SetNillableCarID(i *int) *CarsOperateLogUpdateOne {
	if i != nil {
		coluo.SetCarID(*i)
	}
	return coluo
}

// SetDeviceID sets the "device_id" field.
func (coluo *CarsOperateLogUpdateOne) SetDeviceID(s string) *CarsOperateLogUpdateOne {
	coluo.mutation.SetDeviceID(s)
	return coluo
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (coluo *CarsOperateLogUpdateOne) SetNillableDeviceID(s *string) *CarsOperateLogUpdateOne {
	if s != nil {
		coluo.SetDeviceID(*s)
	}
	return coluo
}

// SetCarLongitude sets the "car_longitude" field.
func (coluo *CarsOperateLogUpdateOne) SetCarLongitude(f float64) *CarsOperateLogUpdateOne {
	coluo.mutation.ResetCarLongitude()
	coluo.mutation.SetCarLongitude(f)
	return coluo
}

// SetNillableCarLongitude sets the "car_longitude" field if the given value is not nil.
func (coluo *CarsOperateLogUpdateOne) SetNillableCarLongitude(f *float64) *CarsOperateLogUpdateOne {
	if f != nil {
		coluo.SetCarLongitude(*f)
	}
	return coluo
}

// AddCarLongitude adds f to the "car_longitude" field.
func (coluo *CarsOperateLogUpdateOne) AddCarLongitude(f float64) *CarsOperateLogUpdateOne {
	coluo.mutation.AddCarLongitude(f)
	return coluo
}

// ClearCarLongitude clears the value of the "car_longitude" field.
func (coluo *CarsOperateLogUpdateOne) ClearCarLongitude() *CarsOperateLogUpdateOne {
	coluo.mutation.ClearCarLongitude()
	return coluo
}

// SetCarLatitude sets the "car_latitude" field.
func (coluo *CarsOperateLogUpdateOne) SetCarLatitude(f float64) *CarsOperateLogUpdateOne {
	coluo.mutation.ResetCarLatitude()
	coluo.mutation.SetCarLatitude(f)
	return coluo
}

// SetNillableCarLatitude sets the "car_latitude" field if the given value is not nil.
func (coluo *CarsOperateLogUpdateOne) SetNillableCarLatitude(f *float64) *CarsOperateLogUpdateOne {
	if f != nil {
		coluo.SetCarLatitude(*f)
	}
	return coluo
}

// AddCarLatitude adds f to the "car_latitude" field.
func (coluo *CarsOperateLogUpdateOne) AddCarLatitude(f float64) *CarsOperateLogUpdateOne {
	coluo.mutation.AddCarLatitude(f)
	return coluo
}

// ClearCarLatitude clears the value of the "car_latitude" field.
func (coluo *CarsOperateLogUpdateOne) ClearCarLatitude() *CarsOperateLogUpdateOne {
	coluo.mutation.ClearCarLatitude()
	return coluo
}

// SetCarMileage sets the "car_mileage" field.
func (coluo *CarsOperateLogUpdateOne) SetCarMileage(f float64) *CarsOperateLogUpdateOne {
	coluo.mutation.ResetCarMileage()
	coluo.mutation.SetCarMileage(f)
	return coluo
}

// SetNillableCarMileage sets the "car_mileage" field if the given value is not nil.
func (coluo *CarsOperateLogUpdateOne) SetNillableCarMileage(f *float64) *CarsOperateLogUpdateOne {
	if f != nil {
		coluo.SetCarMileage(*f)
	}
	return coluo
}

// AddCarMileage adds f to the "car_mileage" field.
func (coluo *CarsOperateLogUpdateOne) AddCarMileage(f float64) *CarsOperateLogUpdateOne {
	coluo.mutation.AddCarMileage(f)
	return coluo
}

// ClearCarMileage clears the value of the "car_mileage" field.
func (coluo *CarsOperateLogUpdateOne) ClearCarMileage() *CarsOperateLogUpdateOne {
	coluo.mutation.ClearCarMileage()
	return coluo
}

// SetCarSpeed sets the "car_speed" field.
func (coluo *CarsOperateLogUpdateOne) SetCarSpeed(f float64) *CarsOperateLogUpdateOne {
	coluo.mutation.ResetCarSpeed()
	coluo.mutation.SetCarSpeed(f)
	return coluo
}

// SetNillableCarSpeed sets the "car_speed" field if the given value is not nil.
func (coluo *CarsOperateLogUpdateOne) SetNillableCarSpeed(f *float64) *CarsOperateLogUpdateOne {
	if f != nil {
		coluo.SetCarSpeed(*f)
	}
	return coluo
}

// AddCarSpeed adds f to the "car_speed" field.
func (coluo *CarsOperateLogUpdateOne) AddCarSpeed(f float64) *CarsOperateLogUpdateOne {
	coluo.mutation.AddCarSpeed(f)
	return coluo
}

// ClearCarSpeed clears the value of the "car_speed" field.
func (coluo *CarsOperateLogUpdateOne) ClearCarSpeed() *CarsOperateLogUpdateOne {
	coluo.mutation.ClearCarSpeed()
	return coluo
}

// SetCarPower sets the "car_power" field.
func (coluo *CarsOperateLogUpdateOne) SetCarPower(f float64) *CarsOperateLogUpdateOne {
	coluo.mutation.ResetCarPower()
	coluo.mutation.SetCarPower(f)
	return coluo
}

// SetNillableCarPower sets the "car_power" field if the given value is not nil.
func (coluo *CarsOperateLogUpdateOne) SetNillableCarPower(f *float64) *CarsOperateLogUpdateOne {
	if f != nil {
		coluo.SetCarPower(*f)
	}
	return coluo
}

// AddCarPower adds f to the "car_power" field.
func (coluo *CarsOperateLogUpdateOne) AddCarPower(f float64) *CarsOperateLogUpdateOne {
	coluo.mutation.AddCarPower(f)
	return coluo
}

// ClearCarPower clears the value of the "car_power" field.
func (coluo *CarsOperateLogUpdateOne) ClearCarPower() *CarsOperateLogUpdateOne {
	coluo.mutation.ClearCarPower()
	return coluo
}

// SetCarStatus sets the "car_status" field.
func (coluo *CarsOperateLogUpdateOne) SetCarStatus(s string) *CarsOperateLogUpdateOne {
	coluo.mutation.SetCarStatus(s)
	return coluo
}

// SetNillableCarStatus sets the "car_status" field if the given value is not nil.
func (coluo *CarsOperateLogUpdateOne) SetNillableCarStatus(s *string) *CarsOperateLogUpdateOne {
	if s != nil {
		coluo.SetCarStatus(*s)
	}
	return coluo
}

// ClearCarStatus clears the value of the "car_status" field.
func (coluo *CarsOperateLogUpdateOne) ClearCarStatus() *CarsOperateLogUpdateOne {
	coluo.mutation.ClearCarStatus()
	return coluo
}

// SetOperateResult sets the "operate_result" field.
func (coluo *CarsOperateLogUpdateOne) SetOperateResult(s string) *CarsOperateLogUpdateOne {
	coluo.mutation.SetOperateResult(s)
	return coluo
}

// SetNillableOperateResult sets the "operate_result" field if the given value is not nil.
func (coluo *CarsOperateLogUpdateOne) SetNillableOperateResult(s *string) *CarsOperateLogUpdateOne {
	if s != nil {
		coluo.SetOperateResult(*s)
	}
	return coluo
}

// SetOperateState sets the "operate_state" field.
func (coluo *CarsOperateLogUpdateOne) SetOperateState(i int) *CarsOperateLogUpdateOne {
	coluo.mutation.ResetOperateState()
	coluo.mutation.SetOperateState(i)
	return coluo
}

// SetNillableOperateState sets the "operate_state" field if the given value is not nil.
func (coluo *CarsOperateLogUpdateOne) SetNillableOperateState(i *int) *CarsOperateLogUpdateOne {
	if i != nil {
		coluo.SetOperateState(*i)
	}
	return coluo
}

// AddOperateState adds i to the "operate_state" field.
func (coluo *CarsOperateLogUpdateOne) AddOperateState(i int) *CarsOperateLogUpdateOne {
	coluo.mutation.AddOperateState(i)
	return coluo
}

// SetUpdateTime sets the "update_time" field.
func (coluo *CarsOperateLogUpdateOne) SetUpdateTime(t time.Time) *CarsOperateLogUpdateOne {
	coluo.mutation.SetUpdateTime(t)
	return coluo
}

// SetBackgroundScenicAreaID sets the "background_scenic_area" edge to the ScenicArea entity by ID.
func (coluo *CarsOperateLogUpdateOne) SetBackgroundScenicAreaID(id int) *CarsOperateLogUpdateOne {
	coluo.mutation.SetBackgroundScenicAreaID(id)
	return coluo
}

// SetBackgroundScenicArea sets the "background_scenic_area" edge to the ScenicArea entity.
func (coluo *CarsOperateLogUpdateOne) SetBackgroundScenicArea(s *ScenicArea) *CarsOperateLogUpdateOne {
	return coluo.SetBackgroundScenicAreaID(s.ID)
}

// SetCar sets the "car" edge to the Car entity.
func (coluo *CarsOperateLogUpdateOne) SetCar(c *Car) *CarsOperateLogUpdateOne {
	return coluo.SetCarID(c.ID)
}

// Mutation returns the CarsOperateLogMutation object of the builder.
func (coluo *CarsOperateLogUpdateOne) Mutation() *CarsOperateLogMutation {
	return coluo.mutation
}

// ClearBackgroundScenicArea clears the "background_scenic_area" edge to the ScenicArea entity.
func (coluo *CarsOperateLogUpdateOne) ClearBackgroundScenicArea() *CarsOperateLogUpdateOne {
	coluo.mutation.ClearBackgroundScenicArea()
	return coluo
}

// ClearCar clears the "car" edge to the Car entity.
func (coluo *CarsOperateLogUpdateOne) ClearCar() *CarsOperateLogUpdateOne {
	coluo.mutation.ClearCar()
	return coluo
}

// Where appends a list predicates to the CarsOperateLogUpdate builder.
func (coluo *CarsOperateLogUpdateOne) Where(ps ...predicate.CarsOperateLog) *CarsOperateLogUpdateOne {
	coluo.mutation.Where(ps...)
	return coluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (coluo *CarsOperateLogUpdateOne) Select(field string, fields ...string) *CarsOperateLogUpdateOne {
	coluo.fields = append([]string{field}, fields...)
	return coluo
}

// Save executes the query and returns the updated CarsOperateLog entity.
func (coluo *CarsOperateLogUpdateOne) Save(ctx context.Context) (*CarsOperateLog, error) {
	coluo.defaults()
	return withHooks(ctx, coluo.sqlSave, coluo.mutation, coluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (coluo *CarsOperateLogUpdateOne) SaveX(ctx context.Context) *CarsOperateLog {
	node, err := coluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (coluo *CarsOperateLogUpdateOne) Exec(ctx context.Context) error {
	_, err := coluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (coluo *CarsOperateLogUpdateOne) ExecX(ctx context.Context) {
	if err := coluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (coluo *CarsOperateLogUpdateOne) defaults() {
	if _, ok := coluo.mutation.UpdateTime(); !ok {
		v := carsoperatelog.UpdateDefaultUpdateTime()
		coluo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (coluo *CarsOperateLogUpdateOne) check() error {
	if coluo.mutation.BackgroundScenicAreaCleared() && len(coluo.mutation.BackgroundScenicAreaIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarsOperateLog.background_scenic_area"`)
	}
	if coluo.mutation.CarCleared() && len(coluo.mutation.CarIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarsOperateLog.car"`)
	}
	return nil
}

func (coluo *CarsOperateLogUpdateOne) sqlSave(ctx context.Context) (_node *CarsOperateLog, err error) {
	if err := coluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(carsoperatelog.Table, carsoperatelog.Columns, sqlgraph.NewFieldSpec(carsoperatelog.FieldID, field.TypeInt))
	id, ok := coluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CarsOperateLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := coluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carsoperatelog.FieldID)
		for _, f := range fields {
			if !carsoperatelog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != carsoperatelog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := coluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := coluo.mutation.Origin(); ok {
		_spec.SetField(carsoperatelog.FieldOrigin, field.TypeString, value)
	}
	if value, ok := coluo.mutation.OriginUID(); ok {
		_spec.SetField(carsoperatelog.FieldOriginUID, field.TypeInt, value)
	}
	if value, ok := coluo.mutation.AddedOriginUID(); ok {
		_spec.AddField(carsoperatelog.FieldOriginUID, field.TypeInt, value)
	}
	if value, ok := coluo.mutation.OriginIP(); ok {
		_spec.SetField(carsoperatelog.FieldOriginIP, field.TypeString, value)
	}
	if value, ok := coluo.mutation.OperateAction(); ok {
		_spec.SetField(carsoperatelog.FieldOperateAction, field.TypeString, value)
	}
	if value, ok := coluo.mutation.DeviceID(); ok {
		_spec.SetField(carsoperatelog.FieldDeviceID, field.TypeString, value)
	}
	if value, ok := coluo.mutation.CarLongitude(); ok {
		_spec.SetField(carsoperatelog.FieldCarLongitude, field.TypeFloat64, value)
	}
	if value, ok := coluo.mutation.AddedCarLongitude(); ok {
		_spec.AddField(carsoperatelog.FieldCarLongitude, field.TypeFloat64, value)
	}
	if coluo.mutation.CarLongitudeCleared() {
		_spec.ClearField(carsoperatelog.FieldCarLongitude, field.TypeFloat64)
	}
	if value, ok := coluo.mutation.CarLatitude(); ok {
		_spec.SetField(carsoperatelog.FieldCarLatitude, field.TypeFloat64, value)
	}
	if value, ok := coluo.mutation.AddedCarLatitude(); ok {
		_spec.AddField(carsoperatelog.FieldCarLatitude, field.TypeFloat64, value)
	}
	if coluo.mutation.CarLatitudeCleared() {
		_spec.ClearField(carsoperatelog.FieldCarLatitude, field.TypeFloat64)
	}
	if value, ok := coluo.mutation.CarMileage(); ok {
		_spec.SetField(carsoperatelog.FieldCarMileage, field.TypeFloat64, value)
	}
	if value, ok := coluo.mutation.AddedCarMileage(); ok {
		_spec.AddField(carsoperatelog.FieldCarMileage, field.TypeFloat64, value)
	}
	if coluo.mutation.CarMileageCleared() {
		_spec.ClearField(carsoperatelog.FieldCarMileage, field.TypeFloat64)
	}
	if value, ok := coluo.mutation.CarSpeed(); ok {
		_spec.SetField(carsoperatelog.FieldCarSpeed, field.TypeFloat64, value)
	}
	if value, ok := coluo.mutation.AddedCarSpeed(); ok {
		_spec.AddField(carsoperatelog.FieldCarSpeed, field.TypeFloat64, value)
	}
	if coluo.mutation.CarSpeedCleared() {
		_spec.ClearField(carsoperatelog.FieldCarSpeed, field.TypeFloat64)
	}
	if value, ok := coluo.mutation.CarPower(); ok {
		_spec.SetField(carsoperatelog.FieldCarPower, field.TypeFloat64, value)
	}
	if value, ok := coluo.mutation.AddedCarPower(); ok {
		_spec.AddField(carsoperatelog.FieldCarPower, field.TypeFloat64, value)
	}
	if coluo.mutation.CarPowerCleared() {
		_spec.ClearField(carsoperatelog.FieldCarPower, field.TypeFloat64)
	}
	if value, ok := coluo.mutation.CarStatus(); ok {
		_spec.SetField(carsoperatelog.FieldCarStatus, field.TypeString, value)
	}
	if coluo.mutation.CarStatusCleared() {
		_spec.ClearField(carsoperatelog.FieldCarStatus, field.TypeString)
	}
	if value, ok := coluo.mutation.OperateResult(); ok {
		_spec.SetField(carsoperatelog.FieldOperateResult, field.TypeString, value)
	}
	if value, ok := coluo.mutation.OperateState(); ok {
		_spec.SetField(carsoperatelog.FieldOperateState, field.TypeInt, value)
	}
	if value, ok := coluo.mutation.AddedOperateState(); ok {
		_spec.AddField(carsoperatelog.FieldOperateState, field.TypeInt, value)
	}
	if value, ok := coluo.mutation.UpdateTime(); ok {
		_spec.SetField(carsoperatelog.FieldUpdateTime, field.TypeTime, value)
	}
	if coluo.mutation.BackgroundScenicAreaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carsoperatelog.BackgroundScenicAreaTable,
			Columns: []string{carsoperatelog.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := coluo.mutation.BackgroundScenicAreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carsoperatelog.BackgroundScenicAreaTable,
			Columns: []string{carsoperatelog.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if coluo.mutation.CarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carsoperatelog.CarTable,
			Columns: []string{carsoperatelog.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := coluo.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carsoperatelog.CarTable,
			Columns: []string{carsoperatelog.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CarsOperateLog{config: coluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, coluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carsoperatelog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	coluo.mutation.done = true
	return _node, nil
}
