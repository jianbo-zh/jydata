// Code generated by ent, DO NOT EDIT.

package systemlog

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldLTE(FieldID, id))
}

// Timestamp applies equality check predicate on the "timestamp" field. It's identical to TimestampEQ.
func Timestamp(v int) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldEQ(FieldTimestamp, v))
}

// Action applies equality check predicate on the "action" field. It's identical to ActionEQ.
func Action(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldEQ(FieldAction, v))
}

// User applies equality check predicate on the "user" field. It's identical to UserEQ.
func User(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldEQ(FieldUser, v))
}

// ScenicArea applies equality check predicate on the "scenic_area" field. It's identical to ScenicAreaEQ.
func ScenicArea(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldEQ(FieldScenicArea, v))
}

// SourceIP applies equality check predicate on the "source_ip" field. It's identical to SourceIPEQ.
func SourceIP(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldEQ(FieldSourceIP, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldEQ(FieldContent, v))
}

// Remarks applies equality check predicate on the "remarks" field. It's identical to RemarksEQ.
func Remarks(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldEQ(FieldRemarks, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldEQ(FieldCreateTime, v))
}

// TimestampEQ applies the EQ predicate on the "timestamp" field.
func TimestampEQ(v int) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldEQ(FieldTimestamp, v))
}

// TimestampNEQ applies the NEQ predicate on the "timestamp" field.
func TimestampNEQ(v int) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldNEQ(FieldTimestamp, v))
}

// TimestampIn applies the In predicate on the "timestamp" field.
func TimestampIn(vs ...int) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldIn(FieldTimestamp, vs...))
}

// TimestampNotIn applies the NotIn predicate on the "timestamp" field.
func TimestampNotIn(vs ...int) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldNotIn(FieldTimestamp, vs...))
}

// TimestampGT applies the GT predicate on the "timestamp" field.
func TimestampGT(v int) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldGT(FieldTimestamp, v))
}

// TimestampGTE applies the GTE predicate on the "timestamp" field.
func TimestampGTE(v int) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldGTE(FieldTimestamp, v))
}

// TimestampLT applies the LT predicate on the "timestamp" field.
func TimestampLT(v int) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldLT(FieldTimestamp, v))
}

// TimestampLTE applies the LTE predicate on the "timestamp" field.
func TimestampLTE(v int) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldLTE(FieldTimestamp, v))
}

// ActionEQ applies the EQ predicate on the "action" field.
func ActionEQ(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldEQ(FieldAction, v))
}

// ActionNEQ applies the NEQ predicate on the "action" field.
func ActionNEQ(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldNEQ(FieldAction, v))
}

// ActionIn applies the In predicate on the "action" field.
func ActionIn(vs ...string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldIn(FieldAction, vs...))
}

// ActionNotIn applies the NotIn predicate on the "action" field.
func ActionNotIn(vs ...string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldNotIn(FieldAction, vs...))
}

// ActionGT applies the GT predicate on the "action" field.
func ActionGT(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldGT(FieldAction, v))
}

// ActionGTE applies the GTE predicate on the "action" field.
func ActionGTE(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldGTE(FieldAction, v))
}

// ActionLT applies the LT predicate on the "action" field.
func ActionLT(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldLT(FieldAction, v))
}

// ActionLTE applies the LTE predicate on the "action" field.
func ActionLTE(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldLTE(FieldAction, v))
}

// ActionContains applies the Contains predicate on the "action" field.
func ActionContains(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldContains(FieldAction, v))
}

// ActionHasPrefix applies the HasPrefix predicate on the "action" field.
func ActionHasPrefix(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldHasPrefix(FieldAction, v))
}

// ActionHasSuffix applies the HasSuffix predicate on the "action" field.
func ActionHasSuffix(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldHasSuffix(FieldAction, v))
}

// ActionEqualFold applies the EqualFold predicate on the "action" field.
func ActionEqualFold(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldEqualFold(FieldAction, v))
}

// ActionContainsFold applies the ContainsFold predicate on the "action" field.
func ActionContainsFold(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldContainsFold(FieldAction, v))
}

// UserEQ applies the EQ predicate on the "user" field.
func UserEQ(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldEQ(FieldUser, v))
}

// UserNEQ applies the NEQ predicate on the "user" field.
func UserNEQ(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldNEQ(FieldUser, v))
}

// UserIn applies the In predicate on the "user" field.
func UserIn(vs ...string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldIn(FieldUser, vs...))
}

// UserNotIn applies the NotIn predicate on the "user" field.
func UserNotIn(vs ...string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldNotIn(FieldUser, vs...))
}

// UserGT applies the GT predicate on the "user" field.
func UserGT(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldGT(FieldUser, v))
}

// UserGTE applies the GTE predicate on the "user" field.
func UserGTE(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldGTE(FieldUser, v))
}

// UserLT applies the LT predicate on the "user" field.
func UserLT(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldLT(FieldUser, v))
}

// UserLTE applies the LTE predicate on the "user" field.
func UserLTE(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldLTE(FieldUser, v))
}

// UserContains applies the Contains predicate on the "user" field.
func UserContains(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldContains(FieldUser, v))
}

// UserHasPrefix applies the HasPrefix predicate on the "user" field.
func UserHasPrefix(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldHasPrefix(FieldUser, v))
}

// UserHasSuffix applies the HasSuffix predicate on the "user" field.
func UserHasSuffix(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldHasSuffix(FieldUser, v))
}

// UserEqualFold applies the EqualFold predicate on the "user" field.
func UserEqualFold(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldEqualFold(FieldUser, v))
}

// UserContainsFold applies the ContainsFold predicate on the "user" field.
func UserContainsFold(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldContainsFold(FieldUser, v))
}

// ScenicAreaEQ applies the EQ predicate on the "scenic_area" field.
func ScenicAreaEQ(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldEQ(FieldScenicArea, v))
}

// ScenicAreaNEQ applies the NEQ predicate on the "scenic_area" field.
func ScenicAreaNEQ(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldNEQ(FieldScenicArea, v))
}

// ScenicAreaIn applies the In predicate on the "scenic_area" field.
func ScenicAreaIn(vs ...string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldIn(FieldScenicArea, vs...))
}

// ScenicAreaNotIn applies the NotIn predicate on the "scenic_area" field.
func ScenicAreaNotIn(vs ...string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldNotIn(FieldScenicArea, vs...))
}

// ScenicAreaGT applies the GT predicate on the "scenic_area" field.
func ScenicAreaGT(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldGT(FieldScenicArea, v))
}

// ScenicAreaGTE applies the GTE predicate on the "scenic_area" field.
func ScenicAreaGTE(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldGTE(FieldScenicArea, v))
}

// ScenicAreaLT applies the LT predicate on the "scenic_area" field.
func ScenicAreaLT(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldLT(FieldScenicArea, v))
}

// ScenicAreaLTE applies the LTE predicate on the "scenic_area" field.
func ScenicAreaLTE(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldLTE(FieldScenicArea, v))
}

// ScenicAreaContains applies the Contains predicate on the "scenic_area" field.
func ScenicAreaContains(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldContains(FieldScenicArea, v))
}

// ScenicAreaHasPrefix applies the HasPrefix predicate on the "scenic_area" field.
func ScenicAreaHasPrefix(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldHasPrefix(FieldScenicArea, v))
}

// ScenicAreaHasSuffix applies the HasSuffix predicate on the "scenic_area" field.
func ScenicAreaHasSuffix(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldHasSuffix(FieldScenicArea, v))
}

// ScenicAreaEqualFold applies the EqualFold predicate on the "scenic_area" field.
func ScenicAreaEqualFold(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldEqualFold(FieldScenicArea, v))
}

// ScenicAreaContainsFold applies the ContainsFold predicate on the "scenic_area" field.
func ScenicAreaContainsFold(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldContainsFold(FieldScenicArea, v))
}

// SourceIPEQ applies the EQ predicate on the "source_ip" field.
func SourceIPEQ(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldEQ(FieldSourceIP, v))
}

// SourceIPNEQ applies the NEQ predicate on the "source_ip" field.
func SourceIPNEQ(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldNEQ(FieldSourceIP, v))
}

// SourceIPIn applies the In predicate on the "source_ip" field.
func SourceIPIn(vs ...string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldIn(FieldSourceIP, vs...))
}

// SourceIPNotIn applies the NotIn predicate on the "source_ip" field.
func SourceIPNotIn(vs ...string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldNotIn(FieldSourceIP, vs...))
}

// SourceIPGT applies the GT predicate on the "source_ip" field.
func SourceIPGT(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldGT(FieldSourceIP, v))
}

// SourceIPGTE applies the GTE predicate on the "source_ip" field.
func SourceIPGTE(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldGTE(FieldSourceIP, v))
}

// SourceIPLT applies the LT predicate on the "source_ip" field.
func SourceIPLT(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldLT(FieldSourceIP, v))
}

// SourceIPLTE applies the LTE predicate on the "source_ip" field.
func SourceIPLTE(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldLTE(FieldSourceIP, v))
}

// SourceIPContains applies the Contains predicate on the "source_ip" field.
func SourceIPContains(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldContains(FieldSourceIP, v))
}

// SourceIPHasPrefix applies the HasPrefix predicate on the "source_ip" field.
func SourceIPHasPrefix(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldHasPrefix(FieldSourceIP, v))
}

// SourceIPHasSuffix applies the HasSuffix predicate on the "source_ip" field.
func SourceIPHasSuffix(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldHasSuffix(FieldSourceIP, v))
}

// SourceIPEqualFold applies the EqualFold predicate on the "source_ip" field.
func SourceIPEqualFold(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldEqualFold(FieldSourceIP, v))
}

// SourceIPContainsFold applies the ContainsFold predicate on the "source_ip" field.
func SourceIPContainsFold(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldContainsFold(FieldSourceIP, v))
}

// LoginTypeEQ applies the EQ predicate on the "login_type" field.
func LoginTypeEQ(v LoginType) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldEQ(FieldLoginType, v))
}

// LoginTypeNEQ applies the NEQ predicate on the "login_type" field.
func LoginTypeNEQ(v LoginType) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldNEQ(FieldLoginType, v))
}

// LoginTypeIn applies the In predicate on the "login_type" field.
func LoginTypeIn(vs ...LoginType) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldIn(FieldLoginType, vs...))
}

// LoginTypeNotIn applies the NotIn predicate on the "login_type" field.
func LoginTypeNotIn(vs ...LoginType) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldNotIn(FieldLoginType, vs...))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldHasSuffix(FieldContent, v))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldContainsFold(FieldContent, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldNotIn(FieldStatus, vs...))
}

// RemarksEQ applies the EQ predicate on the "remarks" field.
func RemarksEQ(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldEQ(FieldRemarks, v))
}

// RemarksNEQ applies the NEQ predicate on the "remarks" field.
func RemarksNEQ(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldNEQ(FieldRemarks, v))
}

// RemarksIn applies the In predicate on the "remarks" field.
func RemarksIn(vs ...string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldIn(FieldRemarks, vs...))
}

// RemarksNotIn applies the NotIn predicate on the "remarks" field.
func RemarksNotIn(vs ...string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldNotIn(FieldRemarks, vs...))
}

// RemarksGT applies the GT predicate on the "remarks" field.
func RemarksGT(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldGT(FieldRemarks, v))
}

// RemarksGTE applies the GTE predicate on the "remarks" field.
func RemarksGTE(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldGTE(FieldRemarks, v))
}

// RemarksLT applies the LT predicate on the "remarks" field.
func RemarksLT(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldLT(FieldRemarks, v))
}

// RemarksLTE applies the LTE predicate on the "remarks" field.
func RemarksLTE(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldLTE(FieldRemarks, v))
}

// RemarksContains applies the Contains predicate on the "remarks" field.
func RemarksContains(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldContains(FieldRemarks, v))
}

// RemarksHasPrefix applies the HasPrefix predicate on the "remarks" field.
func RemarksHasPrefix(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldHasPrefix(FieldRemarks, v))
}

// RemarksHasSuffix applies the HasSuffix predicate on the "remarks" field.
func RemarksHasSuffix(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldHasSuffix(FieldRemarks, v))
}

// RemarksIsNil applies the IsNil predicate on the "remarks" field.
func RemarksIsNil() predicate.SystemLog {
	return predicate.SystemLog(sql.FieldIsNull(FieldRemarks))
}

// RemarksNotNil applies the NotNil predicate on the "remarks" field.
func RemarksNotNil() predicate.SystemLog {
	return predicate.SystemLog(sql.FieldNotNull(FieldRemarks))
}

// RemarksEqualFold applies the EqualFold predicate on the "remarks" field.
func RemarksEqualFold(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldEqualFold(FieldRemarks, v))
}

// RemarksContainsFold applies the ContainsFold predicate on the "remarks" field.
func RemarksContainsFold(v string) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldContainsFold(FieldRemarks, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.SystemLog {
	return predicate.SystemLog(sql.FieldLTE(FieldCreateTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SystemLog) predicate.SystemLog {
	return predicate.SystemLog(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SystemLog) predicate.SystemLog {
	return predicate.SystemLog(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SystemLog) predicate.SystemLog {
	return predicate.SystemLog(sql.NotPredicates(p))
}
