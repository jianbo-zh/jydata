// Code generated by ent, DO NOT EDIT.

package systemlog

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the systemlog type in the database.
	Label = "system_log"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTimestamp holds the string denoting the timestamp field in the database.
	FieldTimestamp = "timestamp"
	// FieldAction holds the string denoting the action field in the database.
	FieldAction = "action"
	// FieldUser holds the string denoting the user field in the database.
	FieldUser = "user"
	// FieldScenicArea holds the string denoting the scenic_area field in the database.
	FieldScenicArea = "scenic_area"
	// FieldSourceIP holds the string denoting the source_ip field in the database.
	FieldSourceIP = "source_ip"
	// FieldLoginType holds the string denoting the login_type field in the database.
	FieldLoginType = "login_type"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldRemarks holds the string denoting the remarks field in the database.
	FieldRemarks = "remarks"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// Table holds the table name of the systemlog in the database.
	Table = "system_logs"
)

// Columns holds all SQL columns for systemlog fields.
var Columns = []string{
	FieldID,
	FieldTimestamp,
	FieldAction,
	FieldUser,
	FieldScenicArea,
	FieldSourceIP,
	FieldLoginType,
	FieldContent,
	FieldStatus,
	FieldRemarks,
	FieldCreateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultTimestamp holds the default value on creation for the "timestamp" field.
	DefaultTimestamp int
	// ActionValidator is a validator for the "action" field. It is called by the builders before save.
	ActionValidator func(string) error
	// UserValidator is a validator for the "user" field. It is called by the builders before save.
	UserValidator func(string) error
	// ScenicAreaValidator is a validator for the "scenic_area" field. It is called by the builders before save.
	ScenicAreaValidator func(string) error
	// SourceIPValidator is a validator for the "source_ip" field. It is called by the builders before save.
	SourceIPValidator func(string) error
	// ContentValidator is a validator for the "content" field. It is called by the builders before save.
	ContentValidator func(string) error
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
)

// LoginType defines the type for the "login_type" enum field.
type LoginType string

// LoginType values.
const (
	LoginTypeWeb LoginType = "web"
	LoginTypeH5  LoginType = "h5"
	LoginTypeApp LoginType = "app"
)

func (lt LoginType) String() string {
	return string(lt)
}

// LoginTypeValidator is a validator for the "login_type" field enum values. It is called by the builders before save.
func LoginTypeValidator(lt LoginType) error {
	switch lt {
	case LoginTypeWeb, LoginTypeH5, LoginTypeApp:
		return nil
	default:
		return fmt.Errorf("systemlog: invalid enum value for login_type field: %q", lt)
	}
}

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusSuccess Status = "success"
	StatusFailure Status = "failure"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusSuccess, StatusFailure:
		return nil
	default:
		return fmt.Errorf("systemlog: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the SystemLog queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTimestamp orders the results by the timestamp field.
func ByTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimestamp, opts...).ToFunc()
}

// ByAction orders the results by the action field.
func ByAction(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAction, opts...).ToFunc()
}

// ByUser orders the results by the user field.
func ByUser(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUser, opts...).ToFunc()
}

// ByScenicArea orders the results by the scenic_area field.
func ByScenicArea(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScenicArea, opts...).ToFunc()
}

// BySourceIP orders the results by the source_ip field.
func BySourceIP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSourceIP, opts...).ToFunc()
}

// ByLoginType orders the results by the login_type field.
func ByLoginType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLoginType, opts...).ToFunc()
}

// ByContent orders the results by the content field.
func ByContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContent, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByRemarks orders the results by the remarks field.
func ByRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemarks, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}
