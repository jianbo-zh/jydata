// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"github.com/jianbo-zh/jydata/database/ent/statsdailycar"
)

// StatsDailyCarDelete is the builder for deleting a StatsDailyCar entity.
type StatsDailyCarDelete struct {
	config
	hooks    []Hook
	mutation *StatsDailyCarMutation
}

// Where appends a list predicates to the StatsDailyCarDelete builder.
func (sdcd *StatsDailyCarDelete) Where(ps ...predicate.StatsDailyCar) *StatsDailyCarDelete {
	sdcd.mutation.Where(ps...)
	return sdcd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (sdcd *StatsDailyCarDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, sdcd.sqlExec, sdcd.mutation, sdcd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (sdcd *StatsDailyCarDelete) ExecX(ctx context.Context) int {
	n, err := sdcd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (sdcd *StatsDailyCarDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(statsdailycar.Table, sqlgraph.NewFieldSpec(statsdailycar.FieldID, field.TypeInt))
	if ps := sdcd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, sdcd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	sdcd.mutation.done = true
	return affected, err
}

// StatsDailyCarDeleteOne is the builder for deleting a single StatsDailyCar entity.
type StatsDailyCarDeleteOne struct {
	sdcd *StatsDailyCarDelete
}

// Where appends a list predicates to the StatsDailyCarDelete builder.
func (sdcdo *StatsDailyCarDeleteOne) Where(ps ...predicate.StatsDailyCar) *StatsDailyCarDeleteOne {
	sdcdo.sdcd.mutation.Where(ps...)
	return sdcdo
}

// Exec executes the deletion query.
func (sdcdo *StatsDailyCarDeleteOne) Exec(ctx context.Context) error {
	n, err := sdcdo.sdcd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{statsdailycar.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (sdcdo *StatsDailyCarDeleteOne) ExecX(ctx context.Context) {
	if err := sdcdo.Exec(ctx); err != nil {
		panic(err)
	}
}
