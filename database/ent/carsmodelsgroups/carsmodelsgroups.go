// Code generated by ent, DO NOT EDIT.

package carsmodelsgroups

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the carsmodelsgroups type in the database.
	Label = "cars_models_groups"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldModelID holds the string denoting the model_id field in the database.
	FieldModelID = "model_id"
	// FieldGroupRemark holds the string denoting the group_remark field in the database.
	FieldGroupRemark = "group_remark"
	// FieldGroupName holds the string denoting the group_name field in the database.
	FieldGroupName = "group_name"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldIsDeleted holds the string denoting the is_deleted field in the database.
	FieldIsDeleted = "is_deleted"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// EdgeModel holds the string denoting the model edge name in mutations.
	EdgeModel = "model"
	// EdgeParams holds the string denoting the params edge name in mutations.
	EdgeParams = "params"
	// Table holds the table name of the carsmodelsgroups in the database.
	Table = "cars_models_groups"
	// ModelTable is the table that holds the model relation/edge.
	ModelTable = "cars_models_groups"
	// ModelInverseTable is the table name for the CarsModels entity.
	// It exists in this package in order to avoid circular dependency with the "carsmodels" package.
	ModelInverseTable = "cars_models"
	// ModelColumn is the table column denoting the model relation/edge.
	ModelColumn = "model_id"
	// ParamsTable is the table that holds the params relation/edge.
	ParamsTable = "cars_models_groups_params"
	// ParamsInverseTable is the table name for the CarsModelsGroupsParams entity.
	// It exists in this package in order to avoid circular dependency with the "carsmodelsgroupsparams" package.
	ParamsInverseTable = "cars_models_groups_params"
	// ParamsColumn is the table column denoting the params relation/edge.
	ParamsColumn = "group_id"
)

// Columns holds all SQL columns for carsmodelsgroups fields.
var Columns = []string{
	FieldID,
	FieldModelID,
	FieldGroupRemark,
	FieldGroupName,
	FieldStatus,
	FieldIsDeleted,
	FieldCreateTime,
	FieldUpdateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultModelID holds the default value on creation for the "model_id" field.
	DefaultModelID int
	// DefaultGroupRemark holds the default value on creation for the "group_remark" field.
	DefaultGroupRemark string
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int
	// DefaultIsDeleted holds the default value on creation for the "is_deleted" field.
	DefaultIsDeleted int
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)

// OrderOption defines the ordering options for the CarsModelsGroups queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByModelID orders the results by the model_id field.
func ByModelID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModelID, opts...).ToFunc()
}

// ByGroupRemark orders the results by the group_remark field.
func ByGroupRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGroupRemark, opts...).ToFunc()
}

// ByGroupName orders the results by the group_name field.
func ByGroupName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGroupName, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByIsDeleted orders the results by the is_deleted field.
func ByIsDeleted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDeleted, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByModelField orders the results by model field.
func ByModelField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newModelStep(), sql.OrderByField(field, opts...))
	}
}

// ByParamsCount orders the results by params count.
func ByParamsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newParamsStep(), opts...)
	}
}

// ByParams orders the results by params terms.
func ByParams(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParamsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newModelStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ModelInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ModelTable, ModelColumn),
	)
}
func newParamsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ParamsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ParamsTable, ParamsColumn),
	)
}
