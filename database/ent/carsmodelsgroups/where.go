// Code generated by ent, DO NOT EDIT.

package carsmodelsgroups

import (
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldLTE(FieldID, id))
}

// ModelID applies equality check predicate on the "model_id" field. It's identical to ModelIDEQ.
func ModelID(v int) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldEQ(FieldModelID, v))
}

// GroupRemark applies equality check predicate on the "group_remark" field. It's identical to GroupRemarkEQ.
func GroupRemark(v string) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldEQ(FieldGroupRemark, v))
}

// GroupName applies equality check predicate on the "group_name" field. It's identical to GroupNameEQ.
func GroupName(v string) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldEQ(FieldGroupName, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldEQ(FieldStatus, v))
}

// IsDeleted applies equality check predicate on the "is_deleted" field. It's identical to IsDeletedEQ.
func IsDeleted(v int) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldEQ(FieldIsDeleted, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldEQ(FieldUpdateTime, v))
}

// ModelIDEQ applies the EQ predicate on the "model_id" field.
func ModelIDEQ(v int) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldEQ(FieldModelID, v))
}

// ModelIDNEQ applies the NEQ predicate on the "model_id" field.
func ModelIDNEQ(v int) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldNEQ(FieldModelID, v))
}

// ModelIDIn applies the In predicate on the "model_id" field.
func ModelIDIn(vs ...int) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldIn(FieldModelID, vs...))
}

// ModelIDNotIn applies the NotIn predicate on the "model_id" field.
func ModelIDNotIn(vs ...int) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldNotIn(FieldModelID, vs...))
}

// GroupRemarkEQ applies the EQ predicate on the "group_remark" field.
func GroupRemarkEQ(v string) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldEQ(FieldGroupRemark, v))
}

// GroupRemarkNEQ applies the NEQ predicate on the "group_remark" field.
func GroupRemarkNEQ(v string) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldNEQ(FieldGroupRemark, v))
}

// GroupRemarkIn applies the In predicate on the "group_remark" field.
func GroupRemarkIn(vs ...string) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldIn(FieldGroupRemark, vs...))
}

// GroupRemarkNotIn applies the NotIn predicate on the "group_remark" field.
func GroupRemarkNotIn(vs ...string) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldNotIn(FieldGroupRemark, vs...))
}

// GroupRemarkGT applies the GT predicate on the "group_remark" field.
func GroupRemarkGT(v string) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldGT(FieldGroupRemark, v))
}

// GroupRemarkGTE applies the GTE predicate on the "group_remark" field.
func GroupRemarkGTE(v string) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldGTE(FieldGroupRemark, v))
}

// GroupRemarkLT applies the LT predicate on the "group_remark" field.
func GroupRemarkLT(v string) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldLT(FieldGroupRemark, v))
}

// GroupRemarkLTE applies the LTE predicate on the "group_remark" field.
func GroupRemarkLTE(v string) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldLTE(FieldGroupRemark, v))
}

// GroupRemarkContains applies the Contains predicate on the "group_remark" field.
func GroupRemarkContains(v string) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldContains(FieldGroupRemark, v))
}

// GroupRemarkHasPrefix applies the HasPrefix predicate on the "group_remark" field.
func GroupRemarkHasPrefix(v string) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldHasPrefix(FieldGroupRemark, v))
}

// GroupRemarkHasSuffix applies the HasSuffix predicate on the "group_remark" field.
func GroupRemarkHasSuffix(v string) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldHasSuffix(FieldGroupRemark, v))
}

// GroupRemarkEqualFold applies the EqualFold predicate on the "group_remark" field.
func GroupRemarkEqualFold(v string) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldEqualFold(FieldGroupRemark, v))
}

// GroupRemarkContainsFold applies the ContainsFold predicate on the "group_remark" field.
func GroupRemarkContainsFold(v string) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldContainsFold(FieldGroupRemark, v))
}

// GroupNameEQ applies the EQ predicate on the "group_name" field.
func GroupNameEQ(v string) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldEQ(FieldGroupName, v))
}

// GroupNameNEQ applies the NEQ predicate on the "group_name" field.
func GroupNameNEQ(v string) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldNEQ(FieldGroupName, v))
}

// GroupNameIn applies the In predicate on the "group_name" field.
func GroupNameIn(vs ...string) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldIn(FieldGroupName, vs...))
}

// GroupNameNotIn applies the NotIn predicate on the "group_name" field.
func GroupNameNotIn(vs ...string) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldNotIn(FieldGroupName, vs...))
}

// GroupNameGT applies the GT predicate on the "group_name" field.
func GroupNameGT(v string) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldGT(FieldGroupName, v))
}

// GroupNameGTE applies the GTE predicate on the "group_name" field.
func GroupNameGTE(v string) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldGTE(FieldGroupName, v))
}

// GroupNameLT applies the LT predicate on the "group_name" field.
func GroupNameLT(v string) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldLT(FieldGroupName, v))
}

// GroupNameLTE applies the LTE predicate on the "group_name" field.
func GroupNameLTE(v string) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldLTE(FieldGroupName, v))
}

// GroupNameContains applies the Contains predicate on the "group_name" field.
func GroupNameContains(v string) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldContains(FieldGroupName, v))
}

// GroupNameHasPrefix applies the HasPrefix predicate on the "group_name" field.
func GroupNameHasPrefix(v string) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldHasPrefix(FieldGroupName, v))
}

// GroupNameHasSuffix applies the HasSuffix predicate on the "group_name" field.
func GroupNameHasSuffix(v string) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldHasSuffix(FieldGroupName, v))
}

// GroupNameEqualFold applies the EqualFold predicate on the "group_name" field.
func GroupNameEqualFold(v string) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldEqualFold(FieldGroupName, v))
}

// GroupNameContainsFold applies the ContainsFold predicate on the "group_name" field.
func GroupNameContainsFold(v string) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldContainsFold(FieldGroupName, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldLTE(FieldStatus, v))
}

// IsDeletedEQ applies the EQ predicate on the "is_deleted" field.
func IsDeletedEQ(v int) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldEQ(FieldIsDeleted, v))
}

// IsDeletedNEQ applies the NEQ predicate on the "is_deleted" field.
func IsDeletedNEQ(v int) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldNEQ(FieldIsDeleted, v))
}

// IsDeletedIn applies the In predicate on the "is_deleted" field.
func IsDeletedIn(vs ...int) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldIn(FieldIsDeleted, vs...))
}

// IsDeletedNotIn applies the NotIn predicate on the "is_deleted" field.
func IsDeletedNotIn(vs ...int) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldNotIn(FieldIsDeleted, vs...))
}

// IsDeletedGT applies the GT predicate on the "is_deleted" field.
func IsDeletedGT(v int) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldGT(FieldIsDeleted, v))
}

// IsDeletedGTE applies the GTE predicate on the "is_deleted" field.
func IsDeletedGTE(v int) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldGTE(FieldIsDeleted, v))
}

// IsDeletedLT applies the LT predicate on the "is_deleted" field.
func IsDeletedLT(v int) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldLT(FieldIsDeleted, v))
}

// IsDeletedLTE applies the LTE predicate on the "is_deleted" field.
func IsDeletedLTE(v int) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldLTE(FieldIsDeleted, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.FieldLTE(FieldUpdateTime, v))
}

// HasModel applies the HasEdge predicate on the "model" edge.
func HasModel() predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ModelTable, ModelColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasModelWith applies the HasEdge predicate on the "model" edge with a given conditions (other predicates).
func HasModelWith(preds ...predicate.CarsModels) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(func(s *sql.Selector) {
		step := newModelStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParams applies the HasEdge predicate on the "params" edge.
func HasParams() predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ParamsTable, ParamsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParamsWith applies the HasEdge predicate on the "params" edge with a given conditions (other predicates).
func HasParamsWith(preds ...predicate.CarsModelsGroupsParams) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(func(s *sql.Selector) {
		step := newParamsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CarsModelsGroups) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CarsModelsGroups) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CarsModelsGroups) predicate.CarsModelsGroups {
	return predicate.CarsModelsGroups(sql.NotPredicates(p))
}
