// Code generated by ent, DO NOT EDIT.

package caralarm

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the caralarm type in the database.
	Label = "car_alarm"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDeviceID holds the string denoting the device_id field in the database.
	FieldDeviceID = "device_id"
	// FieldAlarmID holds the string denoting the alarm_id field in the database.
	FieldAlarmID = "alarm_id"
	// FieldModuleName holds the string denoting the module_name field in the database.
	FieldModuleName = "module_name"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldLevel holds the string denoting the level field in the database.
	FieldLevel = "level"
	// FieldCanIgnore holds the string denoting the can_ignore field in the database.
	FieldCanIgnore = "can_ignore"
	// FieldEffectState holds the string denoting the effect_state field in the database.
	FieldEffectState = "effect_state"
	// FieldDesc holds the string denoting the desc field in the database.
	FieldDesc = "desc"
	// FieldUUID holds the string denoting the uuid field in the database.
	FieldUUID = "uuid"
	// FieldAssociatedIds holds the string denoting the associated_ids field in the database.
	FieldAssociatedIds = "associated_ids"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// Table holds the table name of the caralarm in the database.
	Table = "car_alarms"
)

// Columns holds all SQL columns for caralarm fields.
var Columns = []string{
	FieldID,
	FieldDeviceID,
	FieldAlarmID,
	FieldModuleName,
	FieldType,
	FieldLevel,
	FieldCanIgnore,
	FieldEffectState,
	FieldDesc,
	FieldUUID,
	FieldAssociatedIds,
	FieldCreateTime,
	FieldUpdateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)

// OrderOption defines the ordering options for the CarAlarm queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDeviceID orders the results by the device_id field.
func ByDeviceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceID, opts...).ToFunc()
}

// ByAlarmID orders the results by the alarm_id field.
func ByAlarmID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAlarmID, opts...).ToFunc()
}

// ByModuleName orders the results by the module_name field.
func ByModuleName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModuleName, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByLevel orders the results by the level field.
func ByLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLevel, opts...).ToFunc()
}

// ByCanIgnore orders the results by the can_ignore field.
func ByCanIgnore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCanIgnore, opts...).ToFunc()
}

// ByEffectState orders the results by the effect_state field.
func ByEffectState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEffectState, opts...).ToFunc()
}

// ByDesc orders the results by the desc field.
func ByDesc(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDesc, opts...).ToFunc()
}

// ByUUID orders the results by the uuid field.
func ByUUID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUUID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}
