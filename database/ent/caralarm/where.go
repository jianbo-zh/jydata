// Code generated by ent, DO NOT EDIT.

package caralarm

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldLTE(FieldID, id))
}

// DeviceID applies equality check predicate on the "device_id" field. It's identical to DeviceIDEQ.
func DeviceID(v string) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldEQ(FieldDeviceID, v))
}

// AlarmID applies equality check predicate on the "alarm_id" field. It's identical to AlarmIDEQ.
func AlarmID(v uint32) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldEQ(FieldAlarmID, v))
}

// ModuleName applies equality check predicate on the "module_name" field. It's identical to ModuleNameEQ.
func ModuleName(v string) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldEQ(FieldModuleName, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v uint32) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldEQ(FieldType, v))
}

// Level applies equality check predicate on the "level" field. It's identical to LevelEQ.
func Level(v uint32) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldEQ(FieldLevel, v))
}

// CanIgnore applies equality check predicate on the "can_ignore" field. It's identical to CanIgnoreEQ.
func CanIgnore(v uint32) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldEQ(FieldCanIgnore, v))
}

// EffectState applies equality check predicate on the "effect_state" field. It's identical to EffectStateEQ.
func EffectState(v uint32) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldEQ(FieldEffectState, v))
}

// Desc applies equality check predicate on the "desc" field. It's identical to DescEQ.
func Desc(v string) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldEQ(FieldDesc, v))
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v uint64) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldEQ(FieldUUID, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldEQ(FieldUpdateTime, v))
}

// DeviceIDEQ applies the EQ predicate on the "device_id" field.
func DeviceIDEQ(v string) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldEQ(FieldDeviceID, v))
}

// DeviceIDNEQ applies the NEQ predicate on the "device_id" field.
func DeviceIDNEQ(v string) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldNEQ(FieldDeviceID, v))
}

// DeviceIDIn applies the In predicate on the "device_id" field.
func DeviceIDIn(vs ...string) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldIn(FieldDeviceID, vs...))
}

// DeviceIDNotIn applies the NotIn predicate on the "device_id" field.
func DeviceIDNotIn(vs ...string) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldNotIn(FieldDeviceID, vs...))
}

// DeviceIDGT applies the GT predicate on the "device_id" field.
func DeviceIDGT(v string) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldGT(FieldDeviceID, v))
}

// DeviceIDGTE applies the GTE predicate on the "device_id" field.
func DeviceIDGTE(v string) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldGTE(FieldDeviceID, v))
}

// DeviceIDLT applies the LT predicate on the "device_id" field.
func DeviceIDLT(v string) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldLT(FieldDeviceID, v))
}

// DeviceIDLTE applies the LTE predicate on the "device_id" field.
func DeviceIDLTE(v string) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldLTE(FieldDeviceID, v))
}

// DeviceIDContains applies the Contains predicate on the "device_id" field.
func DeviceIDContains(v string) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldContains(FieldDeviceID, v))
}

// DeviceIDHasPrefix applies the HasPrefix predicate on the "device_id" field.
func DeviceIDHasPrefix(v string) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldHasPrefix(FieldDeviceID, v))
}

// DeviceIDHasSuffix applies the HasSuffix predicate on the "device_id" field.
func DeviceIDHasSuffix(v string) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldHasSuffix(FieldDeviceID, v))
}

// DeviceIDEqualFold applies the EqualFold predicate on the "device_id" field.
func DeviceIDEqualFold(v string) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldEqualFold(FieldDeviceID, v))
}

// DeviceIDContainsFold applies the ContainsFold predicate on the "device_id" field.
func DeviceIDContainsFold(v string) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldContainsFold(FieldDeviceID, v))
}

// AlarmIDEQ applies the EQ predicate on the "alarm_id" field.
func AlarmIDEQ(v uint32) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldEQ(FieldAlarmID, v))
}

// AlarmIDNEQ applies the NEQ predicate on the "alarm_id" field.
func AlarmIDNEQ(v uint32) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldNEQ(FieldAlarmID, v))
}

// AlarmIDIn applies the In predicate on the "alarm_id" field.
func AlarmIDIn(vs ...uint32) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldIn(FieldAlarmID, vs...))
}

// AlarmIDNotIn applies the NotIn predicate on the "alarm_id" field.
func AlarmIDNotIn(vs ...uint32) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldNotIn(FieldAlarmID, vs...))
}

// AlarmIDGT applies the GT predicate on the "alarm_id" field.
func AlarmIDGT(v uint32) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldGT(FieldAlarmID, v))
}

// AlarmIDGTE applies the GTE predicate on the "alarm_id" field.
func AlarmIDGTE(v uint32) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldGTE(FieldAlarmID, v))
}

// AlarmIDLT applies the LT predicate on the "alarm_id" field.
func AlarmIDLT(v uint32) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldLT(FieldAlarmID, v))
}

// AlarmIDLTE applies the LTE predicate on the "alarm_id" field.
func AlarmIDLTE(v uint32) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldLTE(FieldAlarmID, v))
}

// ModuleNameEQ applies the EQ predicate on the "module_name" field.
func ModuleNameEQ(v string) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldEQ(FieldModuleName, v))
}

// ModuleNameNEQ applies the NEQ predicate on the "module_name" field.
func ModuleNameNEQ(v string) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldNEQ(FieldModuleName, v))
}

// ModuleNameIn applies the In predicate on the "module_name" field.
func ModuleNameIn(vs ...string) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldIn(FieldModuleName, vs...))
}

// ModuleNameNotIn applies the NotIn predicate on the "module_name" field.
func ModuleNameNotIn(vs ...string) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldNotIn(FieldModuleName, vs...))
}

// ModuleNameGT applies the GT predicate on the "module_name" field.
func ModuleNameGT(v string) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldGT(FieldModuleName, v))
}

// ModuleNameGTE applies the GTE predicate on the "module_name" field.
func ModuleNameGTE(v string) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldGTE(FieldModuleName, v))
}

// ModuleNameLT applies the LT predicate on the "module_name" field.
func ModuleNameLT(v string) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldLT(FieldModuleName, v))
}

// ModuleNameLTE applies the LTE predicate on the "module_name" field.
func ModuleNameLTE(v string) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldLTE(FieldModuleName, v))
}

// ModuleNameContains applies the Contains predicate on the "module_name" field.
func ModuleNameContains(v string) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldContains(FieldModuleName, v))
}

// ModuleNameHasPrefix applies the HasPrefix predicate on the "module_name" field.
func ModuleNameHasPrefix(v string) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldHasPrefix(FieldModuleName, v))
}

// ModuleNameHasSuffix applies the HasSuffix predicate on the "module_name" field.
func ModuleNameHasSuffix(v string) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldHasSuffix(FieldModuleName, v))
}

// ModuleNameEqualFold applies the EqualFold predicate on the "module_name" field.
func ModuleNameEqualFold(v string) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldEqualFold(FieldModuleName, v))
}

// ModuleNameContainsFold applies the ContainsFold predicate on the "module_name" field.
func ModuleNameContainsFold(v string) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldContainsFold(FieldModuleName, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v uint32) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v uint32) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...uint32) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...uint32) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v uint32) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v uint32) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v uint32) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v uint32) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldLTE(FieldType, v))
}

// LevelEQ applies the EQ predicate on the "level" field.
func LevelEQ(v uint32) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldEQ(FieldLevel, v))
}

// LevelNEQ applies the NEQ predicate on the "level" field.
func LevelNEQ(v uint32) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldNEQ(FieldLevel, v))
}

// LevelIn applies the In predicate on the "level" field.
func LevelIn(vs ...uint32) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldIn(FieldLevel, vs...))
}

// LevelNotIn applies the NotIn predicate on the "level" field.
func LevelNotIn(vs ...uint32) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldNotIn(FieldLevel, vs...))
}

// LevelGT applies the GT predicate on the "level" field.
func LevelGT(v uint32) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldGT(FieldLevel, v))
}

// LevelGTE applies the GTE predicate on the "level" field.
func LevelGTE(v uint32) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldGTE(FieldLevel, v))
}

// LevelLT applies the LT predicate on the "level" field.
func LevelLT(v uint32) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldLT(FieldLevel, v))
}

// LevelLTE applies the LTE predicate on the "level" field.
func LevelLTE(v uint32) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldLTE(FieldLevel, v))
}

// CanIgnoreEQ applies the EQ predicate on the "can_ignore" field.
func CanIgnoreEQ(v uint32) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldEQ(FieldCanIgnore, v))
}

// CanIgnoreNEQ applies the NEQ predicate on the "can_ignore" field.
func CanIgnoreNEQ(v uint32) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldNEQ(FieldCanIgnore, v))
}

// CanIgnoreIn applies the In predicate on the "can_ignore" field.
func CanIgnoreIn(vs ...uint32) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldIn(FieldCanIgnore, vs...))
}

// CanIgnoreNotIn applies the NotIn predicate on the "can_ignore" field.
func CanIgnoreNotIn(vs ...uint32) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldNotIn(FieldCanIgnore, vs...))
}

// CanIgnoreGT applies the GT predicate on the "can_ignore" field.
func CanIgnoreGT(v uint32) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldGT(FieldCanIgnore, v))
}

// CanIgnoreGTE applies the GTE predicate on the "can_ignore" field.
func CanIgnoreGTE(v uint32) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldGTE(FieldCanIgnore, v))
}

// CanIgnoreLT applies the LT predicate on the "can_ignore" field.
func CanIgnoreLT(v uint32) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldLT(FieldCanIgnore, v))
}

// CanIgnoreLTE applies the LTE predicate on the "can_ignore" field.
func CanIgnoreLTE(v uint32) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldLTE(FieldCanIgnore, v))
}

// EffectStateEQ applies the EQ predicate on the "effect_state" field.
func EffectStateEQ(v uint32) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldEQ(FieldEffectState, v))
}

// EffectStateNEQ applies the NEQ predicate on the "effect_state" field.
func EffectStateNEQ(v uint32) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldNEQ(FieldEffectState, v))
}

// EffectStateIn applies the In predicate on the "effect_state" field.
func EffectStateIn(vs ...uint32) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldIn(FieldEffectState, vs...))
}

// EffectStateNotIn applies the NotIn predicate on the "effect_state" field.
func EffectStateNotIn(vs ...uint32) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldNotIn(FieldEffectState, vs...))
}

// EffectStateGT applies the GT predicate on the "effect_state" field.
func EffectStateGT(v uint32) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldGT(FieldEffectState, v))
}

// EffectStateGTE applies the GTE predicate on the "effect_state" field.
func EffectStateGTE(v uint32) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldGTE(FieldEffectState, v))
}

// EffectStateLT applies the LT predicate on the "effect_state" field.
func EffectStateLT(v uint32) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldLT(FieldEffectState, v))
}

// EffectStateLTE applies the LTE predicate on the "effect_state" field.
func EffectStateLTE(v uint32) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldLTE(FieldEffectState, v))
}

// DescEQ applies the EQ predicate on the "desc" field.
func DescEQ(v string) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldEQ(FieldDesc, v))
}

// DescNEQ applies the NEQ predicate on the "desc" field.
func DescNEQ(v string) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldNEQ(FieldDesc, v))
}

// DescIn applies the In predicate on the "desc" field.
func DescIn(vs ...string) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldIn(FieldDesc, vs...))
}

// DescNotIn applies the NotIn predicate on the "desc" field.
func DescNotIn(vs ...string) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldNotIn(FieldDesc, vs...))
}

// DescGT applies the GT predicate on the "desc" field.
func DescGT(v string) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldGT(FieldDesc, v))
}

// DescGTE applies the GTE predicate on the "desc" field.
func DescGTE(v string) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldGTE(FieldDesc, v))
}

// DescLT applies the LT predicate on the "desc" field.
func DescLT(v string) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldLT(FieldDesc, v))
}

// DescLTE applies the LTE predicate on the "desc" field.
func DescLTE(v string) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldLTE(FieldDesc, v))
}

// DescContains applies the Contains predicate on the "desc" field.
func DescContains(v string) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldContains(FieldDesc, v))
}

// DescHasPrefix applies the HasPrefix predicate on the "desc" field.
func DescHasPrefix(v string) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldHasPrefix(FieldDesc, v))
}

// DescHasSuffix applies the HasSuffix predicate on the "desc" field.
func DescHasSuffix(v string) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldHasSuffix(FieldDesc, v))
}

// DescEqualFold applies the EqualFold predicate on the "desc" field.
func DescEqualFold(v string) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldEqualFold(FieldDesc, v))
}

// DescContainsFold applies the ContainsFold predicate on the "desc" field.
func DescContainsFold(v string) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldContainsFold(FieldDesc, v))
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v uint64) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldEQ(FieldUUID, v))
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v uint64) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldNEQ(FieldUUID, v))
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...uint64) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldIn(FieldUUID, vs...))
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...uint64) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldNotIn(FieldUUID, vs...))
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v uint64) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldGT(FieldUUID, v))
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v uint64) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldGTE(FieldUUID, v))
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v uint64) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldLT(FieldUUID, v))
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v uint64) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldLTE(FieldUUID, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.CarAlarm {
	return predicate.CarAlarm(sql.FieldLTE(FieldUpdateTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CarAlarm) predicate.CarAlarm {
	return predicate.CarAlarm(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CarAlarm) predicate.CarAlarm {
	return predicate.CarAlarm(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CarAlarm) predicate.CarAlarm {
	return predicate.CarAlarm(sql.NotPredicates(p))
}
