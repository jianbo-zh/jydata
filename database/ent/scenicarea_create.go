// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/account"
	"github.com/jianbo-zh/jydata/database/ent/billingstrategy"
	"github.com/jianbo-zh/jydata/database/ent/car"
	"github.com/jianbo-zh/jydata/database/ent/carconfig"
	"github.com/jianbo-zh/jydata/database/ent/carsoperatelog"
	"github.com/jianbo-zh/jydata/database/ent/mapversion"
	"github.com/jianbo-zh/jydata/database/ent/order"
	"github.com/jianbo-zh/jydata/database/ent/paytxbill"
	"github.com/jianbo-zh/jydata/database/ent/poi"
	"github.com/jianbo-zh/jydata/database/ent/profitreceiver"
	"github.com/jianbo-zh/jydata/database/ent/scenicarea"
	"github.com/jianbo-zh/jydata/database/ent/scenicareamap"
	"github.com/jianbo-zh/jydata/database/ent/statshourlycar"
	"github.com/jianbo-zh/jydata/database/ent/user"
)

// ScenicAreaCreate is the builder for creating a ScenicArea entity.
type ScenicAreaCreate struct {
	config
	mutation *ScenicAreaMutation
	hooks    []Hook
}

// SetCode sets the "code" field.
func (sac *ScenicAreaCreate) SetCode(s string) *ScenicAreaCreate {
	sac.mutation.SetCode(s)
	return sac
}

// SetName sets the "name" field.
func (sac *ScenicAreaCreate) SetName(s string) *ScenicAreaCreate {
	sac.mutation.SetName(s)
	return sac
}

// SetAddress sets the "address" field.
func (sac *ScenicAreaCreate) SetAddress(s string) *ScenicAreaCreate {
	sac.mutation.SetAddress(s)
	return sac
}

// SetManager sets the "manager" field.
func (sac *ScenicAreaCreate) SetManager(s string) *ScenicAreaCreate {
	sac.mutation.SetManager(s)
	return sac
}

// SetPhone sets the "phone" field.
func (sac *ScenicAreaCreate) SetPhone(s string) *ScenicAreaCreate {
	sac.mutation.SetPhone(s)
	return sac
}

// SetMchID sets the "mch_id" field.
func (sac *ScenicAreaCreate) SetMchID(s string) *ScenicAreaCreate {
	sac.mutation.SetMchID(s)
	return sac
}

// SetNillableMchID sets the "mch_id" field if the given value is not nil.
func (sac *ScenicAreaCreate) SetNillableMchID(s *string) *ScenicAreaCreate {
	if s != nil {
		sac.SetMchID(*s)
	}
	return sac
}

// SetMchName sets the "mch_name" field.
func (sac *ScenicAreaCreate) SetMchName(s string) *ScenicAreaCreate {
	sac.mutation.SetMchName(s)
	return sac
}

// SetNillableMchName sets the "mch_name" field if the given value is not nil.
func (sac *ScenicAreaCreate) SetNillableMchName(s *string) *ScenicAreaCreate {
	if s != nil {
		sac.SetMchName(*s)
	}
	return sac
}

// SetTimezone sets the "timezone" field.
func (sac *ScenicAreaCreate) SetTimezone(i int) *ScenicAreaCreate {
	sac.mutation.SetTimezone(i)
	return sac
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (sac *ScenicAreaCreate) SetNillableTimezone(i *int) *ScenicAreaCreate {
	if i != nil {
		sac.SetTimezone(*i)
	}
	return sac
}

// SetWgsLon sets the "wgs_lon" field.
func (sac *ScenicAreaCreate) SetWgsLon(f float64) *ScenicAreaCreate {
	sac.mutation.SetWgsLon(f)
	return sac
}

// SetNillableWgsLon sets the "wgs_lon" field if the given value is not nil.
func (sac *ScenicAreaCreate) SetNillableWgsLon(f *float64) *ScenicAreaCreate {
	if f != nil {
		sac.SetWgsLon(*f)
	}
	return sac
}

// SetWgsLat sets the "wgs_lat" field.
func (sac *ScenicAreaCreate) SetWgsLat(f float64) *ScenicAreaCreate {
	sac.mutation.SetWgsLat(f)
	return sac
}

// SetNillableWgsLat sets the "wgs_lat" field if the given value is not nil.
func (sac *ScenicAreaCreate) SetNillableWgsLat(f *float64) *ScenicAreaCreate {
	if f != nil {
		sac.SetWgsLat(*f)
	}
	return sac
}

// SetGcjLon sets the "gcj_lon" field.
func (sac *ScenicAreaCreate) SetGcjLon(f float64) *ScenicAreaCreate {
	sac.mutation.SetGcjLon(f)
	return sac
}

// SetNillableGcjLon sets the "gcj_lon" field if the given value is not nil.
func (sac *ScenicAreaCreate) SetNillableGcjLon(f *float64) *ScenicAreaCreate {
	if f != nil {
		sac.SetGcjLon(*f)
	}
	return sac
}

// SetGcjLat sets the "gcj_lat" field.
func (sac *ScenicAreaCreate) SetGcjLat(f float64) *ScenicAreaCreate {
	sac.mutation.SetGcjLat(f)
	return sac
}

// SetNillableGcjLat sets the "gcj_lat" field if the given value is not nil.
func (sac *ScenicAreaCreate) SetNillableGcjLat(f *float64) *ScenicAreaCreate {
	if f != nil {
		sac.SetGcjLat(*f)
	}
	return sac
}

// SetBdLon sets the "bd_lon" field.
func (sac *ScenicAreaCreate) SetBdLon(f float64) *ScenicAreaCreate {
	sac.mutation.SetBdLon(f)
	return sac
}

// SetNillableBdLon sets the "bd_lon" field if the given value is not nil.
func (sac *ScenicAreaCreate) SetNillableBdLon(f *float64) *ScenicAreaCreate {
	if f != nil {
		sac.SetBdLon(*f)
	}
	return sac
}

// SetBdLat sets the "bd_lat" field.
func (sac *ScenicAreaCreate) SetBdLat(f float64) *ScenicAreaCreate {
	sac.mutation.SetBdLat(f)
	return sac
}

// SetNillableBdLat sets the "bd_lat" field if the given value is not nil.
func (sac *ScenicAreaCreate) SetNillableBdLat(f *float64) *ScenicAreaCreate {
	if f != nil {
		sac.SetBdLat(*f)
	}
	return sac
}

// SetStatus sets the "status" field.
func (sac *ScenicAreaCreate) SetStatus(i int) *ScenicAreaCreate {
	sac.mutation.SetStatus(i)
	return sac
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sac *ScenicAreaCreate) SetNillableStatus(i *int) *ScenicAreaCreate {
	if i != nil {
		sac.SetStatus(*i)
	}
	return sac
}

// SetExtendYokeeID sets the "extend_yokee_id" field.
func (sac *ScenicAreaCreate) SetExtendYokeeID(i int) *ScenicAreaCreate {
	sac.mutation.SetExtendYokeeID(i)
	return sac
}

// SetNillableExtendYokeeID sets the "extend_yokee_id" field if the given value is not nil.
func (sac *ScenicAreaCreate) SetNillableExtendYokeeID(i *int) *ScenicAreaCreate {
	if i != nil {
		sac.SetExtendYokeeID(*i)
	}
	return sac
}

// SetCreateTime sets the "create_time" field.
func (sac *ScenicAreaCreate) SetCreateTime(t time.Time) *ScenicAreaCreate {
	sac.mutation.SetCreateTime(t)
	return sac
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (sac *ScenicAreaCreate) SetNillableCreateTime(t *time.Time) *ScenicAreaCreate {
	if t != nil {
		sac.SetCreateTime(*t)
	}
	return sac
}

// SetUpdateTime sets the "update_time" field.
func (sac *ScenicAreaCreate) SetUpdateTime(t time.Time) *ScenicAreaCreate {
	sac.mutation.SetUpdateTime(t)
	return sac
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (sac *ScenicAreaCreate) SetNillableUpdateTime(t *time.Time) *ScenicAreaCreate {
	if t != nil {
		sac.SetUpdateTime(*t)
	}
	return sac
}

// SetID sets the "id" field.
func (sac *ScenicAreaCreate) SetID(i int) *ScenicAreaCreate {
	sac.mutation.SetID(i)
	return sac
}

// AddCarIDs adds the "cars" edge to the Car entity by IDs.
func (sac *ScenicAreaCreate) AddCarIDs(ids ...int) *ScenicAreaCreate {
	sac.mutation.AddCarIDs(ids...)
	return sac
}

// AddCars adds the "cars" edges to the Car entity.
func (sac *ScenicAreaCreate) AddCars(c ...*Car) *ScenicAreaCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return sac.AddCarIDs(ids...)
}

// AddAccountIDs adds the "accounts" edge to the Account entity by IDs.
func (sac *ScenicAreaCreate) AddAccountIDs(ids ...int) *ScenicAreaCreate {
	sac.mutation.AddAccountIDs(ids...)
	return sac
}

// AddAccounts adds the "accounts" edges to the Account entity.
func (sac *ScenicAreaCreate) AddAccounts(a ...*Account) *ScenicAreaCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return sac.AddAccountIDs(ids...)
}

// AddPoiIDs adds the "pois" edge to the Poi entity by IDs.
func (sac *ScenicAreaCreate) AddPoiIDs(ids ...int) *ScenicAreaCreate {
	sac.mutation.AddPoiIDs(ids...)
	return sac
}

// AddPois adds the "pois" edges to the Poi entity.
func (sac *ScenicAreaCreate) AddPois(p ...*Poi) *ScenicAreaCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return sac.AddPoiIDs(ids...)
}

// AddProfitReceiverIDs adds the "profit_receivers" edge to the ProfitReceiver entity by IDs.
func (sac *ScenicAreaCreate) AddProfitReceiverIDs(ids ...int) *ScenicAreaCreate {
	sac.mutation.AddProfitReceiverIDs(ids...)
	return sac
}

// AddProfitReceivers adds the "profit_receivers" edges to the ProfitReceiver entity.
func (sac *ScenicAreaCreate) AddProfitReceivers(p ...*ProfitReceiver) *ScenicAreaCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return sac.AddProfitReceiverIDs(ids...)
}

// AddPayTxBillIDs adds the "pay_tx_bills" edge to the PayTxBill entity by IDs.
func (sac *ScenicAreaCreate) AddPayTxBillIDs(ids ...int) *ScenicAreaCreate {
	sac.mutation.AddPayTxBillIDs(ids...)
	return sac
}

// AddPayTxBills adds the "pay_tx_bills" edges to the PayTxBill entity.
func (sac *ScenicAreaCreate) AddPayTxBills(p ...*PayTxBill) *ScenicAreaCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return sac.AddPayTxBillIDs(ids...)
}

// AddCarBillingStrategyIDs adds the "car_billing_strategies" edge to the BillingStrategy entity by IDs.
func (sac *ScenicAreaCreate) AddCarBillingStrategyIDs(ids ...int) *ScenicAreaCreate {
	sac.mutation.AddCarBillingStrategyIDs(ids...)
	return sac
}

// AddCarBillingStrategies adds the "car_billing_strategies" edges to the BillingStrategy entity.
func (sac *ScenicAreaCreate) AddCarBillingStrategies(b ...*BillingStrategy) *ScenicAreaCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return sac.AddCarBillingStrategyIDs(ids...)
}

// SetMapID sets the "map" edge to the ScenicAreaMap entity by ID.
func (sac *ScenicAreaCreate) SetMapID(id int) *ScenicAreaCreate {
	sac.mutation.SetMapID(id)
	return sac
}

// SetNillableMapID sets the "map" edge to the ScenicAreaMap entity by ID if the given value is not nil.
func (sac *ScenicAreaCreate) SetNillableMapID(id *int) *ScenicAreaCreate {
	if id != nil {
		sac = sac.SetMapID(*id)
	}
	return sac
}

// SetMap sets the "map" edge to the ScenicAreaMap entity.
func (sac *ScenicAreaCreate) SetMap(s *ScenicAreaMap) *ScenicAreaCreate {
	return sac.SetMapID(s.ID)
}

// AddMapVersionIDs adds the "map_versions" edge to the MapVersion entity by IDs.
func (sac *ScenicAreaCreate) AddMapVersionIDs(ids ...int) *ScenicAreaCreate {
	sac.mutation.AddMapVersionIDs(ids...)
	return sac
}

// AddMapVersions adds the "map_versions" edges to the MapVersion entity.
func (sac *ScenicAreaCreate) AddMapVersions(m ...*MapVersion) *ScenicAreaCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return sac.AddMapVersionIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (sac *ScenicAreaCreate) AddUserIDs(ids ...int) *ScenicAreaCreate {
	sac.mutation.AddUserIDs(ids...)
	return sac
}

// AddUsers adds the "users" edges to the User entity.
func (sac *ScenicAreaCreate) AddUsers(u ...*User) *ScenicAreaCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return sac.AddUserIDs(ids...)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (sac *ScenicAreaCreate) AddOrderIDs(ids ...int) *ScenicAreaCreate {
	sac.mutation.AddOrderIDs(ids...)
	return sac
}

// AddOrders adds the "orders" edges to the Order entity.
func (sac *ScenicAreaCreate) AddOrders(o ...*Order) *ScenicAreaCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return sac.AddOrderIDs(ids...)
}

// AddCarOperateLogIDs adds the "car_operate_logs" edge to the CarsOperateLog entity by IDs.
func (sac *ScenicAreaCreate) AddCarOperateLogIDs(ids ...int) *ScenicAreaCreate {
	sac.mutation.AddCarOperateLogIDs(ids...)
	return sac
}

// AddCarOperateLogs adds the "car_operate_logs" edges to the CarsOperateLog entity.
func (sac *ScenicAreaCreate) AddCarOperateLogs(c ...*CarsOperateLog) *ScenicAreaCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return sac.AddCarOperateLogIDs(ids...)
}

// AddStatsHourlyCarIDs adds the "stats_hourly_car" edge to the StatsHourlyCar entity by IDs.
func (sac *ScenicAreaCreate) AddStatsHourlyCarIDs(ids ...int) *ScenicAreaCreate {
	sac.mutation.AddStatsHourlyCarIDs(ids...)
	return sac
}

// AddStatsHourlyCar adds the "stats_hourly_car" edges to the StatsHourlyCar entity.
func (sac *ScenicAreaCreate) AddStatsHourlyCar(s ...*StatsHourlyCar) *ScenicAreaCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sac.AddStatsHourlyCarIDs(ids...)
}

// AddConfigFileIDs adds the "config_files" edge to the CarConfig entity by IDs.
func (sac *ScenicAreaCreate) AddConfigFileIDs(ids ...int) *ScenicAreaCreate {
	sac.mutation.AddConfigFileIDs(ids...)
	return sac
}

// AddConfigFiles adds the "config_files" edges to the CarConfig entity.
func (sac *ScenicAreaCreate) AddConfigFiles(c ...*CarConfig) *ScenicAreaCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return sac.AddConfigFileIDs(ids...)
}

// Mutation returns the ScenicAreaMutation object of the builder.
func (sac *ScenicAreaCreate) Mutation() *ScenicAreaMutation {
	return sac.mutation
}

// Save creates the ScenicArea in the database.
func (sac *ScenicAreaCreate) Save(ctx context.Context) (*ScenicArea, error) {
	sac.defaults()
	return withHooks(ctx, sac.sqlSave, sac.mutation, sac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sac *ScenicAreaCreate) SaveX(ctx context.Context) *ScenicArea {
	v, err := sac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sac *ScenicAreaCreate) Exec(ctx context.Context) error {
	_, err := sac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sac *ScenicAreaCreate) ExecX(ctx context.Context) {
	if err := sac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sac *ScenicAreaCreate) defaults() {
	if _, ok := sac.mutation.MchID(); !ok {
		v := scenicarea.DefaultMchID
		sac.mutation.SetMchID(v)
	}
	if _, ok := sac.mutation.MchName(); !ok {
		v := scenicarea.DefaultMchName
		sac.mutation.SetMchName(v)
	}
	if _, ok := sac.mutation.Timezone(); !ok {
		v := scenicarea.DefaultTimezone
		sac.mutation.SetTimezone(v)
	}
	if _, ok := sac.mutation.WgsLon(); !ok {
		v := scenicarea.DefaultWgsLon
		sac.mutation.SetWgsLon(v)
	}
	if _, ok := sac.mutation.WgsLat(); !ok {
		v := scenicarea.DefaultWgsLat
		sac.mutation.SetWgsLat(v)
	}
	if _, ok := sac.mutation.GcjLon(); !ok {
		v := scenicarea.DefaultGcjLon
		sac.mutation.SetGcjLon(v)
	}
	if _, ok := sac.mutation.GcjLat(); !ok {
		v := scenicarea.DefaultGcjLat
		sac.mutation.SetGcjLat(v)
	}
	if _, ok := sac.mutation.BdLon(); !ok {
		v := scenicarea.DefaultBdLon
		sac.mutation.SetBdLon(v)
	}
	if _, ok := sac.mutation.BdLat(); !ok {
		v := scenicarea.DefaultBdLat
		sac.mutation.SetBdLat(v)
	}
	if _, ok := sac.mutation.Status(); !ok {
		v := scenicarea.DefaultStatus
		sac.mutation.SetStatus(v)
	}
	if _, ok := sac.mutation.CreateTime(); !ok {
		v := scenicarea.DefaultCreateTime()
		sac.mutation.SetCreateTime(v)
	}
	if _, ok := sac.mutation.UpdateTime(); !ok {
		v := scenicarea.DefaultUpdateTime()
		sac.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sac *ScenicAreaCreate) check() error {
	if _, ok := sac.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "ScenicArea.code"`)}
	}
	if _, ok := sac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "ScenicArea.name"`)}
	}
	if _, ok := sac.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "ScenicArea.address"`)}
	}
	if _, ok := sac.mutation.Manager(); !ok {
		return &ValidationError{Name: "manager", err: errors.New(`ent: missing required field "ScenicArea.manager"`)}
	}
	if _, ok := sac.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`ent: missing required field "ScenicArea.phone"`)}
	}
	if _, ok := sac.mutation.MchID(); !ok {
		return &ValidationError{Name: "mch_id", err: errors.New(`ent: missing required field "ScenicArea.mch_id"`)}
	}
	if _, ok := sac.mutation.MchName(); !ok {
		return &ValidationError{Name: "mch_name", err: errors.New(`ent: missing required field "ScenicArea.mch_name"`)}
	}
	if _, ok := sac.mutation.Timezone(); !ok {
		return &ValidationError{Name: "timezone", err: errors.New(`ent: missing required field "ScenicArea.timezone"`)}
	}
	if _, ok := sac.mutation.WgsLon(); !ok {
		return &ValidationError{Name: "wgs_lon", err: errors.New(`ent: missing required field "ScenicArea.wgs_lon"`)}
	}
	if _, ok := sac.mutation.WgsLat(); !ok {
		return &ValidationError{Name: "wgs_lat", err: errors.New(`ent: missing required field "ScenicArea.wgs_lat"`)}
	}
	if _, ok := sac.mutation.GcjLon(); !ok {
		return &ValidationError{Name: "gcj_lon", err: errors.New(`ent: missing required field "ScenicArea.gcj_lon"`)}
	}
	if _, ok := sac.mutation.GcjLat(); !ok {
		return &ValidationError{Name: "gcj_lat", err: errors.New(`ent: missing required field "ScenicArea.gcj_lat"`)}
	}
	if _, ok := sac.mutation.BdLon(); !ok {
		return &ValidationError{Name: "bd_lon", err: errors.New(`ent: missing required field "ScenicArea.bd_lon"`)}
	}
	if _, ok := sac.mutation.BdLat(); !ok {
		return &ValidationError{Name: "bd_lat", err: errors.New(`ent: missing required field "ScenicArea.bd_lat"`)}
	}
	if _, ok := sac.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "ScenicArea.status"`)}
	}
	if _, ok := sac.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "ScenicArea.create_time"`)}
	}
	if _, ok := sac.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "ScenicArea.update_time"`)}
	}
	return nil
}

func (sac *ScenicAreaCreate) sqlSave(ctx context.Context) (*ScenicArea, error) {
	if err := sac.check(); err != nil {
		return nil, err
	}
	_node, _spec := sac.createSpec()
	if err := sqlgraph.CreateNode(ctx, sac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	sac.mutation.id = &_node.ID
	sac.mutation.done = true
	return _node, nil
}

func (sac *ScenicAreaCreate) createSpec() (*ScenicArea, *sqlgraph.CreateSpec) {
	var (
		_node = &ScenicArea{config: sac.config}
		_spec = sqlgraph.NewCreateSpec(scenicarea.Table, sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt))
	)
	if id, ok := sac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sac.mutation.Code(); ok {
		_spec.SetField(scenicarea.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := sac.mutation.Name(); ok {
		_spec.SetField(scenicarea.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sac.mutation.Address(); ok {
		_spec.SetField(scenicarea.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := sac.mutation.Manager(); ok {
		_spec.SetField(scenicarea.FieldManager, field.TypeString, value)
		_node.Manager = value
	}
	if value, ok := sac.mutation.Phone(); ok {
		_spec.SetField(scenicarea.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := sac.mutation.MchID(); ok {
		_spec.SetField(scenicarea.FieldMchID, field.TypeString, value)
		_node.MchID = value
	}
	if value, ok := sac.mutation.MchName(); ok {
		_spec.SetField(scenicarea.FieldMchName, field.TypeString, value)
		_node.MchName = value
	}
	if value, ok := sac.mutation.Timezone(); ok {
		_spec.SetField(scenicarea.FieldTimezone, field.TypeInt, value)
		_node.Timezone = value
	}
	if value, ok := sac.mutation.WgsLon(); ok {
		_spec.SetField(scenicarea.FieldWgsLon, field.TypeFloat64, value)
		_node.WgsLon = value
	}
	if value, ok := sac.mutation.WgsLat(); ok {
		_spec.SetField(scenicarea.FieldWgsLat, field.TypeFloat64, value)
		_node.WgsLat = value
	}
	if value, ok := sac.mutation.GcjLon(); ok {
		_spec.SetField(scenicarea.FieldGcjLon, field.TypeFloat64, value)
		_node.GcjLon = value
	}
	if value, ok := sac.mutation.GcjLat(); ok {
		_spec.SetField(scenicarea.FieldGcjLat, field.TypeFloat64, value)
		_node.GcjLat = value
	}
	if value, ok := sac.mutation.BdLon(); ok {
		_spec.SetField(scenicarea.FieldBdLon, field.TypeFloat64, value)
		_node.BdLon = value
	}
	if value, ok := sac.mutation.BdLat(); ok {
		_spec.SetField(scenicarea.FieldBdLat, field.TypeFloat64, value)
		_node.BdLat = value
	}
	if value, ok := sac.mutation.Status(); ok {
		_spec.SetField(scenicarea.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	if value, ok := sac.mutation.ExtendYokeeID(); ok {
		_spec.SetField(scenicarea.FieldExtendYokeeID, field.TypeInt, value)
		_node.ExtendYokeeID = &value
	}
	if value, ok := sac.mutation.CreateTime(); ok {
		_spec.SetField(scenicarea.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := sac.mutation.UpdateTime(); ok {
		_spec.SetField(scenicarea.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if nodes := sac.mutation.CarsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.CarsTable,
			Columns: []string{scenicarea.CarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sac.mutation.AccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.AccountsTable,
			Columns: []string{scenicarea.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sac.mutation.PoisIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.PoisTable,
			Columns: []string{scenicarea.PoisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(poi.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sac.mutation.ProfitReceiversIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.ProfitReceiversTable,
			Columns: []string{scenicarea.ProfitReceiversColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profitreceiver.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sac.mutation.PayTxBillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.PayTxBillsTable,
			Columns: []string{scenicarea.PayTxBillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paytxbill.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sac.mutation.CarBillingStrategiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.CarBillingStrategiesTable,
			Columns: []string{scenicarea.CarBillingStrategiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingstrategy.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sac.mutation.MapIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   scenicarea.MapTable,
			Columns: []string{scenicarea.MapColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicareamap.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sac.mutation.MapVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.MapVersionsTable,
			Columns: []string{scenicarea.MapVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mapversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sac.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.UsersTable,
			Columns: []string{scenicarea.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sac.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.OrdersTable,
			Columns: []string{scenicarea.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sac.mutation.CarOperateLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.CarOperateLogsTable,
			Columns: []string{scenicarea.CarOperateLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsoperatelog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sac.mutation.StatsHourlyCarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.StatsHourlyCarTable,
			Columns: []string{scenicarea.StatsHourlyCarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statshourlycar.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sac.mutation.ConfigFilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.ConfigFilesTable,
			Columns: []string{scenicarea.ConfigFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carconfig.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ScenicAreaCreateBulk is the builder for creating many ScenicArea entities in bulk.
type ScenicAreaCreateBulk struct {
	config
	err      error
	builders []*ScenicAreaCreate
}

// Save creates the ScenicArea entities in the database.
func (sacb *ScenicAreaCreateBulk) Save(ctx context.Context) ([]*ScenicArea, error) {
	if sacb.err != nil {
		return nil, sacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sacb.builders))
	nodes := make([]*ScenicArea, len(sacb.builders))
	mutators := make([]Mutator, len(sacb.builders))
	for i := range sacb.builders {
		func(i int, root context.Context) {
			builder := sacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScenicAreaMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sacb *ScenicAreaCreateBulk) SaveX(ctx context.Context) []*ScenicArea {
	v, err := sacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sacb *ScenicAreaCreateBulk) Exec(ctx context.Context) error {
	_, err := sacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sacb *ScenicAreaCreateBulk) ExecX(ctx context.Context) {
	if err := sacb.Exec(ctx); err != nil {
		panic(err)
	}
}
