// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"github.com/jianbo-zh/jydata/database/ent/statshourlyscenicarea"
)

// StatsHourlyScenicAreaDelete is the builder for deleting a StatsHourlyScenicArea entity.
type StatsHourlyScenicAreaDelete struct {
	config
	hooks    []Hook
	mutation *StatsHourlyScenicAreaMutation
}

// Where appends a list predicates to the StatsHourlyScenicAreaDelete builder.
func (shsad *StatsHourlyScenicAreaDelete) Where(ps ...predicate.StatsHourlyScenicArea) *StatsHourlyScenicAreaDelete {
	shsad.mutation.Where(ps...)
	return shsad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (shsad *StatsHourlyScenicAreaDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, shsad.sqlExec, shsad.mutation, shsad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (shsad *StatsHourlyScenicAreaDelete) ExecX(ctx context.Context) int {
	n, err := shsad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (shsad *StatsHourlyScenicAreaDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(statshourlyscenicarea.Table, sqlgraph.NewFieldSpec(statshourlyscenicarea.FieldID, field.TypeInt))
	if ps := shsad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, shsad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	shsad.mutation.done = true
	return affected, err
}

// StatsHourlyScenicAreaDeleteOne is the builder for deleting a single StatsHourlyScenicArea entity.
type StatsHourlyScenicAreaDeleteOne struct {
	shsad *StatsHourlyScenicAreaDelete
}

// Where appends a list predicates to the StatsHourlyScenicAreaDelete builder.
func (shsado *StatsHourlyScenicAreaDeleteOne) Where(ps ...predicate.StatsHourlyScenicArea) *StatsHourlyScenicAreaDeleteOne {
	shsado.shsad.mutation.Where(ps...)
	return shsado
}

// Exec executes the deletion query.
func (shsado *StatsHourlyScenicAreaDeleteOne) Exec(ctx context.Context) error {
	n, err := shsado.shsad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{statshourlyscenicarea.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (shsado *StatsHourlyScenicAreaDeleteOne) ExecX(ctx context.Context) {
	if err := shsado.Exec(ctx); err != nil {
		panic(err)
	}
}
