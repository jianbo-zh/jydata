// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/account"
	"github.com/jianbo-zh/jydata/database/ent/billingstrategy"
	"github.com/jianbo-zh/jydata/database/ent/car"
	"github.com/jianbo-zh/jydata/database/ent/carconfig"
	"github.com/jianbo-zh/jydata/database/ent/carsoperatelog"
	"github.com/jianbo-zh/jydata/database/ent/mapversion"
	"github.com/jianbo-zh/jydata/database/ent/order"
	"github.com/jianbo-zh/jydata/database/ent/paytxbill"
	"github.com/jianbo-zh/jydata/database/ent/poi"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"github.com/jianbo-zh/jydata/database/ent/profitreceiver"
	"github.com/jianbo-zh/jydata/database/ent/scenicarea"
	"github.com/jianbo-zh/jydata/database/ent/scenicareamap"
	"github.com/jianbo-zh/jydata/database/ent/statshourlycar"
	"github.com/jianbo-zh/jydata/database/ent/user"
)

// ScenicAreaUpdate is the builder for updating ScenicArea entities.
type ScenicAreaUpdate struct {
	config
	hooks    []Hook
	mutation *ScenicAreaMutation
}

// Where appends a list predicates to the ScenicAreaUpdate builder.
func (sau *ScenicAreaUpdate) Where(ps ...predicate.ScenicArea) *ScenicAreaUpdate {
	sau.mutation.Where(ps...)
	return sau
}

// SetCode sets the "code" field.
func (sau *ScenicAreaUpdate) SetCode(s string) *ScenicAreaUpdate {
	sau.mutation.SetCode(s)
	return sau
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (sau *ScenicAreaUpdate) SetNillableCode(s *string) *ScenicAreaUpdate {
	if s != nil {
		sau.SetCode(*s)
	}
	return sau
}

// SetName sets the "name" field.
func (sau *ScenicAreaUpdate) SetName(s string) *ScenicAreaUpdate {
	sau.mutation.SetName(s)
	return sau
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sau *ScenicAreaUpdate) SetNillableName(s *string) *ScenicAreaUpdate {
	if s != nil {
		sau.SetName(*s)
	}
	return sau
}

// SetAddress sets the "address" field.
func (sau *ScenicAreaUpdate) SetAddress(s string) *ScenicAreaUpdate {
	sau.mutation.SetAddress(s)
	return sau
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (sau *ScenicAreaUpdate) SetNillableAddress(s *string) *ScenicAreaUpdate {
	if s != nil {
		sau.SetAddress(*s)
	}
	return sau
}

// SetManager sets the "manager" field.
func (sau *ScenicAreaUpdate) SetManager(s string) *ScenicAreaUpdate {
	sau.mutation.SetManager(s)
	return sau
}

// SetNillableManager sets the "manager" field if the given value is not nil.
func (sau *ScenicAreaUpdate) SetNillableManager(s *string) *ScenicAreaUpdate {
	if s != nil {
		sau.SetManager(*s)
	}
	return sau
}

// SetPhone sets the "phone" field.
func (sau *ScenicAreaUpdate) SetPhone(s string) *ScenicAreaUpdate {
	sau.mutation.SetPhone(s)
	return sau
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (sau *ScenicAreaUpdate) SetNillablePhone(s *string) *ScenicAreaUpdate {
	if s != nil {
		sau.SetPhone(*s)
	}
	return sau
}

// SetMchID sets the "mch_id" field.
func (sau *ScenicAreaUpdate) SetMchID(s string) *ScenicAreaUpdate {
	sau.mutation.SetMchID(s)
	return sau
}

// SetNillableMchID sets the "mch_id" field if the given value is not nil.
func (sau *ScenicAreaUpdate) SetNillableMchID(s *string) *ScenicAreaUpdate {
	if s != nil {
		sau.SetMchID(*s)
	}
	return sau
}

// SetMchName sets the "mch_name" field.
func (sau *ScenicAreaUpdate) SetMchName(s string) *ScenicAreaUpdate {
	sau.mutation.SetMchName(s)
	return sau
}

// SetNillableMchName sets the "mch_name" field if the given value is not nil.
func (sau *ScenicAreaUpdate) SetNillableMchName(s *string) *ScenicAreaUpdate {
	if s != nil {
		sau.SetMchName(*s)
	}
	return sau
}

// SetTimezone sets the "timezone" field.
func (sau *ScenicAreaUpdate) SetTimezone(i int) *ScenicAreaUpdate {
	sau.mutation.ResetTimezone()
	sau.mutation.SetTimezone(i)
	return sau
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (sau *ScenicAreaUpdate) SetNillableTimezone(i *int) *ScenicAreaUpdate {
	if i != nil {
		sau.SetTimezone(*i)
	}
	return sau
}

// AddTimezone adds i to the "timezone" field.
func (sau *ScenicAreaUpdate) AddTimezone(i int) *ScenicAreaUpdate {
	sau.mutation.AddTimezone(i)
	return sau
}

// SetWgsLon sets the "wgs_lon" field.
func (sau *ScenicAreaUpdate) SetWgsLon(f float64) *ScenicAreaUpdate {
	sau.mutation.ResetWgsLon()
	sau.mutation.SetWgsLon(f)
	return sau
}

// SetNillableWgsLon sets the "wgs_lon" field if the given value is not nil.
func (sau *ScenicAreaUpdate) SetNillableWgsLon(f *float64) *ScenicAreaUpdate {
	if f != nil {
		sau.SetWgsLon(*f)
	}
	return sau
}

// AddWgsLon adds f to the "wgs_lon" field.
func (sau *ScenicAreaUpdate) AddWgsLon(f float64) *ScenicAreaUpdate {
	sau.mutation.AddWgsLon(f)
	return sau
}

// SetWgsLat sets the "wgs_lat" field.
func (sau *ScenicAreaUpdate) SetWgsLat(f float64) *ScenicAreaUpdate {
	sau.mutation.ResetWgsLat()
	sau.mutation.SetWgsLat(f)
	return sau
}

// SetNillableWgsLat sets the "wgs_lat" field if the given value is not nil.
func (sau *ScenicAreaUpdate) SetNillableWgsLat(f *float64) *ScenicAreaUpdate {
	if f != nil {
		sau.SetWgsLat(*f)
	}
	return sau
}

// AddWgsLat adds f to the "wgs_lat" field.
func (sau *ScenicAreaUpdate) AddWgsLat(f float64) *ScenicAreaUpdate {
	sau.mutation.AddWgsLat(f)
	return sau
}

// SetGcjLon sets the "gcj_lon" field.
func (sau *ScenicAreaUpdate) SetGcjLon(f float64) *ScenicAreaUpdate {
	sau.mutation.ResetGcjLon()
	sau.mutation.SetGcjLon(f)
	return sau
}

// SetNillableGcjLon sets the "gcj_lon" field if the given value is not nil.
func (sau *ScenicAreaUpdate) SetNillableGcjLon(f *float64) *ScenicAreaUpdate {
	if f != nil {
		sau.SetGcjLon(*f)
	}
	return sau
}

// AddGcjLon adds f to the "gcj_lon" field.
func (sau *ScenicAreaUpdate) AddGcjLon(f float64) *ScenicAreaUpdate {
	sau.mutation.AddGcjLon(f)
	return sau
}

// SetGcjLat sets the "gcj_lat" field.
func (sau *ScenicAreaUpdate) SetGcjLat(f float64) *ScenicAreaUpdate {
	sau.mutation.ResetGcjLat()
	sau.mutation.SetGcjLat(f)
	return sau
}

// SetNillableGcjLat sets the "gcj_lat" field if the given value is not nil.
func (sau *ScenicAreaUpdate) SetNillableGcjLat(f *float64) *ScenicAreaUpdate {
	if f != nil {
		sau.SetGcjLat(*f)
	}
	return sau
}

// AddGcjLat adds f to the "gcj_lat" field.
func (sau *ScenicAreaUpdate) AddGcjLat(f float64) *ScenicAreaUpdate {
	sau.mutation.AddGcjLat(f)
	return sau
}

// SetBdLon sets the "bd_lon" field.
func (sau *ScenicAreaUpdate) SetBdLon(f float64) *ScenicAreaUpdate {
	sau.mutation.ResetBdLon()
	sau.mutation.SetBdLon(f)
	return sau
}

// SetNillableBdLon sets the "bd_lon" field if the given value is not nil.
func (sau *ScenicAreaUpdate) SetNillableBdLon(f *float64) *ScenicAreaUpdate {
	if f != nil {
		sau.SetBdLon(*f)
	}
	return sau
}

// AddBdLon adds f to the "bd_lon" field.
func (sau *ScenicAreaUpdate) AddBdLon(f float64) *ScenicAreaUpdate {
	sau.mutation.AddBdLon(f)
	return sau
}

// SetBdLat sets the "bd_lat" field.
func (sau *ScenicAreaUpdate) SetBdLat(f float64) *ScenicAreaUpdate {
	sau.mutation.ResetBdLat()
	sau.mutation.SetBdLat(f)
	return sau
}

// SetNillableBdLat sets the "bd_lat" field if the given value is not nil.
func (sau *ScenicAreaUpdate) SetNillableBdLat(f *float64) *ScenicAreaUpdate {
	if f != nil {
		sau.SetBdLat(*f)
	}
	return sau
}

// AddBdLat adds f to the "bd_lat" field.
func (sau *ScenicAreaUpdate) AddBdLat(f float64) *ScenicAreaUpdate {
	sau.mutation.AddBdLat(f)
	return sau
}

// SetStatus sets the "status" field.
func (sau *ScenicAreaUpdate) SetStatus(i int) *ScenicAreaUpdate {
	sau.mutation.ResetStatus()
	sau.mutation.SetStatus(i)
	return sau
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sau *ScenicAreaUpdate) SetNillableStatus(i *int) *ScenicAreaUpdate {
	if i != nil {
		sau.SetStatus(*i)
	}
	return sau
}

// AddStatus adds i to the "status" field.
func (sau *ScenicAreaUpdate) AddStatus(i int) *ScenicAreaUpdate {
	sau.mutation.AddStatus(i)
	return sau
}

// SetExtendYokeeID sets the "extend_yokee_id" field.
func (sau *ScenicAreaUpdate) SetExtendYokeeID(i int) *ScenicAreaUpdate {
	sau.mutation.ResetExtendYokeeID()
	sau.mutation.SetExtendYokeeID(i)
	return sau
}

// SetNillableExtendYokeeID sets the "extend_yokee_id" field if the given value is not nil.
func (sau *ScenicAreaUpdate) SetNillableExtendYokeeID(i *int) *ScenicAreaUpdate {
	if i != nil {
		sau.SetExtendYokeeID(*i)
	}
	return sau
}

// AddExtendYokeeID adds i to the "extend_yokee_id" field.
func (sau *ScenicAreaUpdate) AddExtendYokeeID(i int) *ScenicAreaUpdate {
	sau.mutation.AddExtendYokeeID(i)
	return sau
}

// ClearExtendYokeeID clears the value of the "extend_yokee_id" field.
func (sau *ScenicAreaUpdate) ClearExtendYokeeID() *ScenicAreaUpdate {
	sau.mutation.ClearExtendYokeeID()
	return sau
}

// SetUpdateTime sets the "update_time" field.
func (sau *ScenicAreaUpdate) SetUpdateTime(t time.Time) *ScenicAreaUpdate {
	sau.mutation.SetUpdateTime(t)
	return sau
}

// AddCarIDs adds the "cars" edge to the Car entity by IDs.
func (sau *ScenicAreaUpdate) AddCarIDs(ids ...int) *ScenicAreaUpdate {
	sau.mutation.AddCarIDs(ids...)
	return sau
}

// AddCars adds the "cars" edges to the Car entity.
func (sau *ScenicAreaUpdate) AddCars(c ...*Car) *ScenicAreaUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return sau.AddCarIDs(ids...)
}

// AddAccountIDs adds the "accounts" edge to the Account entity by IDs.
func (sau *ScenicAreaUpdate) AddAccountIDs(ids ...int) *ScenicAreaUpdate {
	sau.mutation.AddAccountIDs(ids...)
	return sau
}

// AddAccounts adds the "accounts" edges to the Account entity.
func (sau *ScenicAreaUpdate) AddAccounts(a ...*Account) *ScenicAreaUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return sau.AddAccountIDs(ids...)
}

// AddPoiIDs adds the "pois" edge to the Poi entity by IDs.
func (sau *ScenicAreaUpdate) AddPoiIDs(ids ...int) *ScenicAreaUpdate {
	sau.mutation.AddPoiIDs(ids...)
	return sau
}

// AddPois adds the "pois" edges to the Poi entity.
func (sau *ScenicAreaUpdate) AddPois(p ...*Poi) *ScenicAreaUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return sau.AddPoiIDs(ids...)
}

// AddProfitReceiverIDs adds the "profit_receivers" edge to the ProfitReceiver entity by IDs.
func (sau *ScenicAreaUpdate) AddProfitReceiverIDs(ids ...int) *ScenicAreaUpdate {
	sau.mutation.AddProfitReceiverIDs(ids...)
	return sau
}

// AddProfitReceivers adds the "profit_receivers" edges to the ProfitReceiver entity.
func (sau *ScenicAreaUpdate) AddProfitReceivers(p ...*ProfitReceiver) *ScenicAreaUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return sau.AddProfitReceiverIDs(ids...)
}

// AddPayTxBillIDs adds the "pay_tx_bills" edge to the PayTxBill entity by IDs.
func (sau *ScenicAreaUpdate) AddPayTxBillIDs(ids ...int) *ScenicAreaUpdate {
	sau.mutation.AddPayTxBillIDs(ids...)
	return sau
}

// AddPayTxBills adds the "pay_tx_bills" edges to the PayTxBill entity.
func (sau *ScenicAreaUpdate) AddPayTxBills(p ...*PayTxBill) *ScenicAreaUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return sau.AddPayTxBillIDs(ids...)
}

// AddCarBillingStrategyIDs adds the "car_billing_strategies" edge to the BillingStrategy entity by IDs.
func (sau *ScenicAreaUpdate) AddCarBillingStrategyIDs(ids ...int) *ScenicAreaUpdate {
	sau.mutation.AddCarBillingStrategyIDs(ids...)
	return sau
}

// AddCarBillingStrategies adds the "car_billing_strategies" edges to the BillingStrategy entity.
func (sau *ScenicAreaUpdate) AddCarBillingStrategies(b ...*BillingStrategy) *ScenicAreaUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return sau.AddCarBillingStrategyIDs(ids...)
}

// SetMapID sets the "map" edge to the ScenicAreaMap entity by ID.
func (sau *ScenicAreaUpdate) SetMapID(id int) *ScenicAreaUpdate {
	sau.mutation.SetMapID(id)
	return sau
}

// SetNillableMapID sets the "map" edge to the ScenicAreaMap entity by ID if the given value is not nil.
func (sau *ScenicAreaUpdate) SetNillableMapID(id *int) *ScenicAreaUpdate {
	if id != nil {
		sau = sau.SetMapID(*id)
	}
	return sau
}

// SetMap sets the "map" edge to the ScenicAreaMap entity.
func (sau *ScenicAreaUpdate) SetMap(s *ScenicAreaMap) *ScenicAreaUpdate {
	return sau.SetMapID(s.ID)
}

// AddMapVersionIDs adds the "map_versions" edge to the MapVersion entity by IDs.
func (sau *ScenicAreaUpdate) AddMapVersionIDs(ids ...int) *ScenicAreaUpdate {
	sau.mutation.AddMapVersionIDs(ids...)
	return sau
}

// AddMapVersions adds the "map_versions" edges to the MapVersion entity.
func (sau *ScenicAreaUpdate) AddMapVersions(m ...*MapVersion) *ScenicAreaUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return sau.AddMapVersionIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (sau *ScenicAreaUpdate) AddUserIDs(ids ...int) *ScenicAreaUpdate {
	sau.mutation.AddUserIDs(ids...)
	return sau
}

// AddUsers adds the "users" edges to the User entity.
func (sau *ScenicAreaUpdate) AddUsers(u ...*User) *ScenicAreaUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return sau.AddUserIDs(ids...)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (sau *ScenicAreaUpdate) AddOrderIDs(ids ...int) *ScenicAreaUpdate {
	sau.mutation.AddOrderIDs(ids...)
	return sau
}

// AddOrders adds the "orders" edges to the Order entity.
func (sau *ScenicAreaUpdate) AddOrders(o ...*Order) *ScenicAreaUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return sau.AddOrderIDs(ids...)
}

// AddCarOperateLogIDs adds the "car_operate_logs" edge to the CarsOperateLog entity by IDs.
func (sau *ScenicAreaUpdate) AddCarOperateLogIDs(ids ...int) *ScenicAreaUpdate {
	sau.mutation.AddCarOperateLogIDs(ids...)
	return sau
}

// AddCarOperateLogs adds the "car_operate_logs" edges to the CarsOperateLog entity.
func (sau *ScenicAreaUpdate) AddCarOperateLogs(c ...*CarsOperateLog) *ScenicAreaUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return sau.AddCarOperateLogIDs(ids...)
}

// AddStatsHourlyCarIDs adds the "stats_hourly_car" edge to the StatsHourlyCar entity by IDs.
func (sau *ScenicAreaUpdate) AddStatsHourlyCarIDs(ids ...int) *ScenicAreaUpdate {
	sau.mutation.AddStatsHourlyCarIDs(ids...)
	return sau
}

// AddStatsHourlyCar adds the "stats_hourly_car" edges to the StatsHourlyCar entity.
func (sau *ScenicAreaUpdate) AddStatsHourlyCar(s ...*StatsHourlyCar) *ScenicAreaUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sau.AddStatsHourlyCarIDs(ids...)
}

// AddConfigFileIDs adds the "config_files" edge to the CarConfig entity by IDs.
func (sau *ScenicAreaUpdate) AddConfigFileIDs(ids ...int) *ScenicAreaUpdate {
	sau.mutation.AddConfigFileIDs(ids...)
	return sau
}

// AddConfigFiles adds the "config_files" edges to the CarConfig entity.
func (sau *ScenicAreaUpdate) AddConfigFiles(c ...*CarConfig) *ScenicAreaUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return sau.AddConfigFileIDs(ids...)
}

// Mutation returns the ScenicAreaMutation object of the builder.
func (sau *ScenicAreaUpdate) Mutation() *ScenicAreaMutation {
	return sau.mutation
}

// ClearCars clears all "cars" edges to the Car entity.
func (sau *ScenicAreaUpdate) ClearCars() *ScenicAreaUpdate {
	sau.mutation.ClearCars()
	return sau
}

// RemoveCarIDs removes the "cars" edge to Car entities by IDs.
func (sau *ScenicAreaUpdate) RemoveCarIDs(ids ...int) *ScenicAreaUpdate {
	sau.mutation.RemoveCarIDs(ids...)
	return sau
}

// RemoveCars removes "cars" edges to Car entities.
func (sau *ScenicAreaUpdate) RemoveCars(c ...*Car) *ScenicAreaUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return sau.RemoveCarIDs(ids...)
}

// ClearAccounts clears all "accounts" edges to the Account entity.
func (sau *ScenicAreaUpdate) ClearAccounts() *ScenicAreaUpdate {
	sau.mutation.ClearAccounts()
	return sau
}

// RemoveAccountIDs removes the "accounts" edge to Account entities by IDs.
func (sau *ScenicAreaUpdate) RemoveAccountIDs(ids ...int) *ScenicAreaUpdate {
	sau.mutation.RemoveAccountIDs(ids...)
	return sau
}

// RemoveAccounts removes "accounts" edges to Account entities.
func (sau *ScenicAreaUpdate) RemoveAccounts(a ...*Account) *ScenicAreaUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return sau.RemoveAccountIDs(ids...)
}

// ClearPois clears all "pois" edges to the Poi entity.
func (sau *ScenicAreaUpdate) ClearPois() *ScenicAreaUpdate {
	sau.mutation.ClearPois()
	return sau
}

// RemovePoiIDs removes the "pois" edge to Poi entities by IDs.
func (sau *ScenicAreaUpdate) RemovePoiIDs(ids ...int) *ScenicAreaUpdate {
	sau.mutation.RemovePoiIDs(ids...)
	return sau
}

// RemovePois removes "pois" edges to Poi entities.
func (sau *ScenicAreaUpdate) RemovePois(p ...*Poi) *ScenicAreaUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return sau.RemovePoiIDs(ids...)
}

// ClearProfitReceivers clears all "profit_receivers" edges to the ProfitReceiver entity.
func (sau *ScenicAreaUpdate) ClearProfitReceivers() *ScenicAreaUpdate {
	sau.mutation.ClearProfitReceivers()
	return sau
}

// RemoveProfitReceiverIDs removes the "profit_receivers" edge to ProfitReceiver entities by IDs.
func (sau *ScenicAreaUpdate) RemoveProfitReceiverIDs(ids ...int) *ScenicAreaUpdate {
	sau.mutation.RemoveProfitReceiverIDs(ids...)
	return sau
}

// RemoveProfitReceivers removes "profit_receivers" edges to ProfitReceiver entities.
func (sau *ScenicAreaUpdate) RemoveProfitReceivers(p ...*ProfitReceiver) *ScenicAreaUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return sau.RemoveProfitReceiverIDs(ids...)
}

// ClearPayTxBills clears all "pay_tx_bills" edges to the PayTxBill entity.
func (sau *ScenicAreaUpdate) ClearPayTxBills() *ScenicAreaUpdate {
	sau.mutation.ClearPayTxBills()
	return sau
}

// RemovePayTxBillIDs removes the "pay_tx_bills" edge to PayTxBill entities by IDs.
func (sau *ScenicAreaUpdate) RemovePayTxBillIDs(ids ...int) *ScenicAreaUpdate {
	sau.mutation.RemovePayTxBillIDs(ids...)
	return sau
}

// RemovePayTxBills removes "pay_tx_bills" edges to PayTxBill entities.
func (sau *ScenicAreaUpdate) RemovePayTxBills(p ...*PayTxBill) *ScenicAreaUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return sau.RemovePayTxBillIDs(ids...)
}

// ClearCarBillingStrategies clears all "car_billing_strategies" edges to the BillingStrategy entity.
func (sau *ScenicAreaUpdate) ClearCarBillingStrategies() *ScenicAreaUpdate {
	sau.mutation.ClearCarBillingStrategies()
	return sau
}

// RemoveCarBillingStrategyIDs removes the "car_billing_strategies" edge to BillingStrategy entities by IDs.
func (sau *ScenicAreaUpdate) RemoveCarBillingStrategyIDs(ids ...int) *ScenicAreaUpdate {
	sau.mutation.RemoveCarBillingStrategyIDs(ids...)
	return sau
}

// RemoveCarBillingStrategies removes "car_billing_strategies" edges to BillingStrategy entities.
func (sau *ScenicAreaUpdate) RemoveCarBillingStrategies(b ...*BillingStrategy) *ScenicAreaUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return sau.RemoveCarBillingStrategyIDs(ids...)
}

// ClearMap clears the "map" edge to the ScenicAreaMap entity.
func (sau *ScenicAreaUpdate) ClearMap() *ScenicAreaUpdate {
	sau.mutation.ClearMap()
	return sau
}

// ClearMapVersions clears all "map_versions" edges to the MapVersion entity.
func (sau *ScenicAreaUpdate) ClearMapVersions() *ScenicAreaUpdate {
	sau.mutation.ClearMapVersions()
	return sau
}

// RemoveMapVersionIDs removes the "map_versions" edge to MapVersion entities by IDs.
func (sau *ScenicAreaUpdate) RemoveMapVersionIDs(ids ...int) *ScenicAreaUpdate {
	sau.mutation.RemoveMapVersionIDs(ids...)
	return sau
}

// RemoveMapVersions removes "map_versions" edges to MapVersion entities.
func (sau *ScenicAreaUpdate) RemoveMapVersions(m ...*MapVersion) *ScenicAreaUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return sau.RemoveMapVersionIDs(ids...)
}

// ClearUsers clears all "users" edges to the User entity.
func (sau *ScenicAreaUpdate) ClearUsers() *ScenicAreaUpdate {
	sau.mutation.ClearUsers()
	return sau
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (sau *ScenicAreaUpdate) RemoveUserIDs(ids ...int) *ScenicAreaUpdate {
	sau.mutation.RemoveUserIDs(ids...)
	return sau
}

// RemoveUsers removes "users" edges to User entities.
func (sau *ScenicAreaUpdate) RemoveUsers(u ...*User) *ScenicAreaUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return sau.RemoveUserIDs(ids...)
}

// ClearOrders clears all "orders" edges to the Order entity.
func (sau *ScenicAreaUpdate) ClearOrders() *ScenicAreaUpdate {
	sau.mutation.ClearOrders()
	return sau
}

// RemoveOrderIDs removes the "orders" edge to Order entities by IDs.
func (sau *ScenicAreaUpdate) RemoveOrderIDs(ids ...int) *ScenicAreaUpdate {
	sau.mutation.RemoveOrderIDs(ids...)
	return sau
}

// RemoveOrders removes "orders" edges to Order entities.
func (sau *ScenicAreaUpdate) RemoveOrders(o ...*Order) *ScenicAreaUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return sau.RemoveOrderIDs(ids...)
}

// ClearCarOperateLogs clears all "car_operate_logs" edges to the CarsOperateLog entity.
func (sau *ScenicAreaUpdate) ClearCarOperateLogs() *ScenicAreaUpdate {
	sau.mutation.ClearCarOperateLogs()
	return sau
}

// RemoveCarOperateLogIDs removes the "car_operate_logs" edge to CarsOperateLog entities by IDs.
func (sau *ScenicAreaUpdate) RemoveCarOperateLogIDs(ids ...int) *ScenicAreaUpdate {
	sau.mutation.RemoveCarOperateLogIDs(ids...)
	return sau
}

// RemoveCarOperateLogs removes "car_operate_logs" edges to CarsOperateLog entities.
func (sau *ScenicAreaUpdate) RemoveCarOperateLogs(c ...*CarsOperateLog) *ScenicAreaUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return sau.RemoveCarOperateLogIDs(ids...)
}

// ClearStatsHourlyCar clears all "stats_hourly_car" edges to the StatsHourlyCar entity.
func (sau *ScenicAreaUpdate) ClearStatsHourlyCar() *ScenicAreaUpdate {
	sau.mutation.ClearStatsHourlyCar()
	return sau
}

// RemoveStatsHourlyCarIDs removes the "stats_hourly_car" edge to StatsHourlyCar entities by IDs.
func (sau *ScenicAreaUpdate) RemoveStatsHourlyCarIDs(ids ...int) *ScenicAreaUpdate {
	sau.mutation.RemoveStatsHourlyCarIDs(ids...)
	return sau
}

// RemoveStatsHourlyCar removes "stats_hourly_car" edges to StatsHourlyCar entities.
func (sau *ScenicAreaUpdate) RemoveStatsHourlyCar(s ...*StatsHourlyCar) *ScenicAreaUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sau.RemoveStatsHourlyCarIDs(ids...)
}

// ClearConfigFiles clears all "config_files" edges to the CarConfig entity.
func (sau *ScenicAreaUpdate) ClearConfigFiles() *ScenicAreaUpdate {
	sau.mutation.ClearConfigFiles()
	return sau
}

// RemoveConfigFileIDs removes the "config_files" edge to CarConfig entities by IDs.
func (sau *ScenicAreaUpdate) RemoveConfigFileIDs(ids ...int) *ScenicAreaUpdate {
	sau.mutation.RemoveConfigFileIDs(ids...)
	return sau
}

// RemoveConfigFiles removes "config_files" edges to CarConfig entities.
func (sau *ScenicAreaUpdate) RemoveConfigFiles(c ...*CarConfig) *ScenicAreaUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return sau.RemoveConfigFileIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sau *ScenicAreaUpdate) Save(ctx context.Context) (int, error) {
	sau.defaults()
	return withHooks(ctx, sau.sqlSave, sau.mutation, sau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sau *ScenicAreaUpdate) SaveX(ctx context.Context) int {
	affected, err := sau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sau *ScenicAreaUpdate) Exec(ctx context.Context) error {
	_, err := sau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sau *ScenicAreaUpdate) ExecX(ctx context.Context) {
	if err := sau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sau *ScenicAreaUpdate) defaults() {
	if _, ok := sau.mutation.UpdateTime(); !ok {
		v := scenicarea.UpdateDefaultUpdateTime()
		sau.mutation.SetUpdateTime(v)
	}
}

func (sau *ScenicAreaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(scenicarea.Table, scenicarea.Columns, sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt))
	if ps := sau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sau.mutation.Code(); ok {
		_spec.SetField(scenicarea.FieldCode, field.TypeString, value)
	}
	if value, ok := sau.mutation.Name(); ok {
		_spec.SetField(scenicarea.FieldName, field.TypeString, value)
	}
	if value, ok := sau.mutation.Address(); ok {
		_spec.SetField(scenicarea.FieldAddress, field.TypeString, value)
	}
	if value, ok := sau.mutation.Manager(); ok {
		_spec.SetField(scenicarea.FieldManager, field.TypeString, value)
	}
	if value, ok := sau.mutation.Phone(); ok {
		_spec.SetField(scenicarea.FieldPhone, field.TypeString, value)
	}
	if value, ok := sau.mutation.MchID(); ok {
		_spec.SetField(scenicarea.FieldMchID, field.TypeString, value)
	}
	if value, ok := sau.mutation.MchName(); ok {
		_spec.SetField(scenicarea.FieldMchName, field.TypeString, value)
	}
	if value, ok := sau.mutation.Timezone(); ok {
		_spec.SetField(scenicarea.FieldTimezone, field.TypeInt, value)
	}
	if value, ok := sau.mutation.AddedTimezone(); ok {
		_spec.AddField(scenicarea.FieldTimezone, field.TypeInt, value)
	}
	if value, ok := sau.mutation.WgsLon(); ok {
		_spec.SetField(scenicarea.FieldWgsLon, field.TypeFloat64, value)
	}
	if value, ok := sau.mutation.AddedWgsLon(); ok {
		_spec.AddField(scenicarea.FieldWgsLon, field.TypeFloat64, value)
	}
	if value, ok := sau.mutation.WgsLat(); ok {
		_spec.SetField(scenicarea.FieldWgsLat, field.TypeFloat64, value)
	}
	if value, ok := sau.mutation.AddedWgsLat(); ok {
		_spec.AddField(scenicarea.FieldWgsLat, field.TypeFloat64, value)
	}
	if value, ok := sau.mutation.GcjLon(); ok {
		_spec.SetField(scenicarea.FieldGcjLon, field.TypeFloat64, value)
	}
	if value, ok := sau.mutation.AddedGcjLon(); ok {
		_spec.AddField(scenicarea.FieldGcjLon, field.TypeFloat64, value)
	}
	if value, ok := sau.mutation.GcjLat(); ok {
		_spec.SetField(scenicarea.FieldGcjLat, field.TypeFloat64, value)
	}
	if value, ok := sau.mutation.AddedGcjLat(); ok {
		_spec.AddField(scenicarea.FieldGcjLat, field.TypeFloat64, value)
	}
	if value, ok := sau.mutation.BdLon(); ok {
		_spec.SetField(scenicarea.FieldBdLon, field.TypeFloat64, value)
	}
	if value, ok := sau.mutation.AddedBdLon(); ok {
		_spec.AddField(scenicarea.FieldBdLon, field.TypeFloat64, value)
	}
	if value, ok := sau.mutation.BdLat(); ok {
		_spec.SetField(scenicarea.FieldBdLat, field.TypeFloat64, value)
	}
	if value, ok := sau.mutation.AddedBdLat(); ok {
		_spec.AddField(scenicarea.FieldBdLat, field.TypeFloat64, value)
	}
	if value, ok := sau.mutation.Status(); ok {
		_spec.SetField(scenicarea.FieldStatus, field.TypeInt, value)
	}
	if value, ok := sau.mutation.AddedStatus(); ok {
		_spec.AddField(scenicarea.FieldStatus, field.TypeInt, value)
	}
	if value, ok := sau.mutation.ExtendYokeeID(); ok {
		_spec.SetField(scenicarea.FieldExtendYokeeID, field.TypeInt, value)
	}
	if value, ok := sau.mutation.AddedExtendYokeeID(); ok {
		_spec.AddField(scenicarea.FieldExtendYokeeID, field.TypeInt, value)
	}
	if sau.mutation.ExtendYokeeIDCleared() {
		_spec.ClearField(scenicarea.FieldExtendYokeeID, field.TypeInt)
	}
	if value, ok := sau.mutation.UpdateTime(); ok {
		_spec.SetField(scenicarea.FieldUpdateTime, field.TypeTime, value)
	}
	if sau.mutation.CarsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.CarsTable,
			Columns: []string{scenicarea.CarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sau.mutation.RemovedCarsIDs(); len(nodes) > 0 && !sau.mutation.CarsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.CarsTable,
			Columns: []string{scenicarea.CarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sau.mutation.CarsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.CarsTable,
			Columns: []string{scenicarea.CarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sau.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.AccountsTable,
			Columns: []string{scenicarea.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sau.mutation.RemovedAccountsIDs(); len(nodes) > 0 && !sau.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.AccountsTable,
			Columns: []string{scenicarea.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sau.mutation.AccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.AccountsTable,
			Columns: []string{scenicarea.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sau.mutation.PoisCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.PoisTable,
			Columns: []string{scenicarea.PoisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(poi.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sau.mutation.RemovedPoisIDs(); len(nodes) > 0 && !sau.mutation.PoisCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.PoisTable,
			Columns: []string{scenicarea.PoisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(poi.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sau.mutation.PoisIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.PoisTable,
			Columns: []string{scenicarea.PoisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(poi.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sau.mutation.ProfitReceiversCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.ProfitReceiversTable,
			Columns: []string{scenicarea.ProfitReceiversColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profitreceiver.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sau.mutation.RemovedProfitReceiversIDs(); len(nodes) > 0 && !sau.mutation.ProfitReceiversCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.ProfitReceiversTable,
			Columns: []string{scenicarea.ProfitReceiversColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profitreceiver.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sau.mutation.ProfitReceiversIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.ProfitReceiversTable,
			Columns: []string{scenicarea.ProfitReceiversColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profitreceiver.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sau.mutation.PayTxBillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.PayTxBillsTable,
			Columns: []string{scenicarea.PayTxBillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paytxbill.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sau.mutation.RemovedPayTxBillsIDs(); len(nodes) > 0 && !sau.mutation.PayTxBillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.PayTxBillsTable,
			Columns: []string{scenicarea.PayTxBillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paytxbill.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sau.mutation.PayTxBillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.PayTxBillsTable,
			Columns: []string{scenicarea.PayTxBillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paytxbill.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sau.mutation.CarBillingStrategiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.CarBillingStrategiesTable,
			Columns: []string{scenicarea.CarBillingStrategiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingstrategy.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sau.mutation.RemovedCarBillingStrategiesIDs(); len(nodes) > 0 && !sau.mutation.CarBillingStrategiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.CarBillingStrategiesTable,
			Columns: []string{scenicarea.CarBillingStrategiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingstrategy.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sau.mutation.CarBillingStrategiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.CarBillingStrategiesTable,
			Columns: []string{scenicarea.CarBillingStrategiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingstrategy.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sau.mutation.MapCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   scenicarea.MapTable,
			Columns: []string{scenicarea.MapColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicareamap.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sau.mutation.MapIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   scenicarea.MapTable,
			Columns: []string{scenicarea.MapColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicareamap.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sau.mutation.MapVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.MapVersionsTable,
			Columns: []string{scenicarea.MapVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mapversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sau.mutation.RemovedMapVersionsIDs(); len(nodes) > 0 && !sau.mutation.MapVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.MapVersionsTable,
			Columns: []string{scenicarea.MapVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mapversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sau.mutation.MapVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.MapVersionsTable,
			Columns: []string{scenicarea.MapVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mapversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sau.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.UsersTable,
			Columns: []string{scenicarea.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sau.mutation.RemovedUsersIDs(); len(nodes) > 0 && !sau.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.UsersTable,
			Columns: []string{scenicarea.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sau.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.UsersTable,
			Columns: []string{scenicarea.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sau.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.OrdersTable,
			Columns: []string{scenicarea.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sau.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !sau.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.OrdersTable,
			Columns: []string{scenicarea.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sau.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.OrdersTable,
			Columns: []string{scenicarea.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sau.mutation.CarOperateLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.CarOperateLogsTable,
			Columns: []string{scenicarea.CarOperateLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsoperatelog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sau.mutation.RemovedCarOperateLogsIDs(); len(nodes) > 0 && !sau.mutation.CarOperateLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.CarOperateLogsTable,
			Columns: []string{scenicarea.CarOperateLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsoperatelog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sau.mutation.CarOperateLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.CarOperateLogsTable,
			Columns: []string{scenicarea.CarOperateLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsoperatelog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sau.mutation.StatsHourlyCarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.StatsHourlyCarTable,
			Columns: []string{scenicarea.StatsHourlyCarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statshourlycar.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sau.mutation.RemovedStatsHourlyCarIDs(); len(nodes) > 0 && !sau.mutation.StatsHourlyCarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.StatsHourlyCarTable,
			Columns: []string{scenicarea.StatsHourlyCarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statshourlycar.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sau.mutation.StatsHourlyCarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.StatsHourlyCarTable,
			Columns: []string{scenicarea.StatsHourlyCarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statshourlycar.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sau.mutation.ConfigFilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.ConfigFilesTable,
			Columns: []string{scenicarea.ConfigFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carconfig.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sau.mutation.RemovedConfigFilesIDs(); len(nodes) > 0 && !sau.mutation.ConfigFilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.ConfigFilesTable,
			Columns: []string{scenicarea.ConfigFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carconfig.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sau.mutation.ConfigFilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.ConfigFilesTable,
			Columns: []string{scenicarea.ConfigFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carconfig.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scenicarea.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sau.mutation.done = true
	return n, nil
}

// ScenicAreaUpdateOne is the builder for updating a single ScenicArea entity.
type ScenicAreaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ScenicAreaMutation
}

// SetCode sets the "code" field.
func (sauo *ScenicAreaUpdateOne) SetCode(s string) *ScenicAreaUpdateOne {
	sauo.mutation.SetCode(s)
	return sauo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (sauo *ScenicAreaUpdateOne) SetNillableCode(s *string) *ScenicAreaUpdateOne {
	if s != nil {
		sauo.SetCode(*s)
	}
	return sauo
}

// SetName sets the "name" field.
func (sauo *ScenicAreaUpdateOne) SetName(s string) *ScenicAreaUpdateOne {
	sauo.mutation.SetName(s)
	return sauo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sauo *ScenicAreaUpdateOne) SetNillableName(s *string) *ScenicAreaUpdateOne {
	if s != nil {
		sauo.SetName(*s)
	}
	return sauo
}

// SetAddress sets the "address" field.
func (sauo *ScenicAreaUpdateOne) SetAddress(s string) *ScenicAreaUpdateOne {
	sauo.mutation.SetAddress(s)
	return sauo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (sauo *ScenicAreaUpdateOne) SetNillableAddress(s *string) *ScenicAreaUpdateOne {
	if s != nil {
		sauo.SetAddress(*s)
	}
	return sauo
}

// SetManager sets the "manager" field.
func (sauo *ScenicAreaUpdateOne) SetManager(s string) *ScenicAreaUpdateOne {
	sauo.mutation.SetManager(s)
	return sauo
}

// SetNillableManager sets the "manager" field if the given value is not nil.
func (sauo *ScenicAreaUpdateOne) SetNillableManager(s *string) *ScenicAreaUpdateOne {
	if s != nil {
		sauo.SetManager(*s)
	}
	return sauo
}

// SetPhone sets the "phone" field.
func (sauo *ScenicAreaUpdateOne) SetPhone(s string) *ScenicAreaUpdateOne {
	sauo.mutation.SetPhone(s)
	return sauo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (sauo *ScenicAreaUpdateOne) SetNillablePhone(s *string) *ScenicAreaUpdateOne {
	if s != nil {
		sauo.SetPhone(*s)
	}
	return sauo
}

// SetMchID sets the "mch_id" field.
func (sauo *ScenicAreaUpdateOne) SetMchID(s string) *ScenicAreaUpdateOne {
	sauo.mutation.SetMchID(s)
	return sauo
}

// SetNillableMchID sets the "mch_id" field if the given value is not nil.
func (sauo *ScenicAreaUpdateOne) SetNillableMchID(s *string) *ScenicAreaUpdateOne {
	if s != nil {
		sauo.SetMchID(*s)
	}
	return sauo
}

// SetMchName sets the "mch_name" field.
func (sauo *ScenicAreaUpdateOne) SetMchName(s string) *ScenicAreaUpdateOne {
	sauo.mutation.SetMchName(s)
	return sauo
}

// SetNillableMchName sets the "mch_name" field if the given value is not nil.
func (sauo *ScenicAreaUpdateOne) SetNillableMchName(s *string) *ScenicAreaUpdateOne {
	if s != nil {
		sauo.SetMchName(*s)
	}
	return sauo
}

// SetTimezone sets the "timezone" field.
func (sauo *ScenicAreaUpdateOne) SetTimezone(i int) *ScenicAreaUpdateOne {
	sauo.mutation.ResetTimezone()
	sauo.mutation.SetTimezone(i)
	return sauo
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (sauo *ScenicAreaUpdateOne) SetNillableTimezone(i *int) *ScenicAreaUpdateOne {
	if i != nil {
		sauo.SetTimezone(*i)
	}
	return sauo
}

// AddTimezone adds i to the "timezone" field.
func (sauo *ScenicAreaUpdateOne) AddTimezone(i int) *ScenicAreaUpdateOne {
	sauo.mutation.AddTimezone(i)
	return sauo
}

// SetWgsLon sets the "wgs_lon" field.
func (sauo *ScenicAreaUpdateOne) SetWgsLon(f float64) *ScenicAreaUpdateOne {
	sauo.mutation.ResetWgsLon()
	sauo.mutation.SetWgsLon(f)
	return sauo
}

// SetNillableWgsLon sets the "wgs_lon" field if the given value is not nil.
func (sauo *ScenicAreaUpdateOne) SetNillableWgsLon(f *float64) *ScenicAreaUpdateOne {
	if f != nil {
		sauo.SetWgsLon(*f)
	}
	return sauo
}

// AddWgsLon adds f to the "wgs_lon" field.
func (sauo *ScenicAreaUpdateOne) AddWgsLon(f float64) *ScenicAreaUpdateOne {
	sauo.mutation.AddWgsLon(f)
	return sauo
}

// SetWgsLat sets the "wgs_lat" field.
func (sauo *ScenicAreaUpdateOne) SetWgsLat(f float64) *ScenicAreaUpdateOne {
	sauo.mutation.ResetWgsLat()
	sauo.mutation.SetWgsLat(f)
	return sauo
}

// SetNillableWgsLat sets the "wgs_lat" field if the given value is not nil.
func (sauo *ScenicAreaUpdateOne) SetNillableWgsLat(f *float64) *ScenicAreaUpdateOne {
	if f != nil {
		sauo.SetWgsLat(*f)
	}
	return sauo
}

// AddWgsLat adds f to the "wgs_lat" field.
func (sauo *ScenicAreaUpdateOne) AddWgsLat(f float64) *ScenicAreaUpdateOne {
	sauo.mutation.AddWgsLat(f)
	return sauo
}

// SetGcjLon sets the "gcj_lon" field.
func (sauo *ScenicAreaUpdateOne) SetGcjLon(f float64) *ScenicAreaUpdateOne {
	sauo.mutation.ResetGcjLon()
	sauo.mutation.SetGcjLon(f)
	return sauo
}

// SetNillableGcjLon sets the "gcj_lon" field if the given value is not nil.
func (sauo *ScenicAreaUpdateOne) SetNillableGcjLon(f *float64) *ScenicAreaUpdateOne {
	if f != nil {
		sauo.SetGcjLon(*f)
	}
	return sauo
}

// AddGcjLon adds f to the "gcj_lon" field.
func (sauo *ScenicAreaUpdateOne) AddGcjLon(f float64) *ScenicAreaUpdateOne {
	sauo.mutation.AddGcjLon(f)
	return sauo
}

// SetGcjLat sets the "gcj_lat" field.
func (sauo *ScenicAreaUpdateOne) SetGcjLat(f float64) *ScenicAreaUpdateOne {
	sauo.mutation.ResetGcjLat()
	sauo.mutation.SetGcjLat(f)
	return sauo
}

// SetNillableGcjLat sets the "gcj_lat" field if the given value is not nil.
func (sauo *ScenicAreaUpdateOne) SetNillableGcjLat(f *float64) *ScenicAreaUpdateOne {
	if f != nil {
		sauo.SetGcjLat(*f)
	}
	return sauo
}

// AddGcjLat adds f to the "gcj_lat" field.
func (sauo *ScenicAreaUpdateOne) AddGcjLat(f float64) *ScenicAreaUpdateOne {
	sauo.mutation.AddGcjLat(f)
	return sauo
}

// SetBdLon sets the "bd_lon" field.
func (sauo *ScenicAreaUpdateOne) SetBdLon(f float64) *ScenicAreaUpdateOne {
	sauo.mutation.ResetBdLon()
	sauo.mutation.SetBdLon(f)
	return sauo
}

// SetNillableBdLon sets the "bd_lon" field if the given value is not nil.
func (sauo *ScenicAreaUpdateOne) SetNillableBdLon(f *float64) *ScenicAreaUpdateOne {
	if f != nil {
		sauo.SetBdLon(*f)
	}
	return sauo
}

// AddBdLon adds f to the "bd_lon" field.
func (sauo *ScenicAreaUpdateOne) AddBdLon(f float64) *ScenicAreaUpdateOne {
	sauo.mutation.AddBdLon(f)
	return sauo
}

// SetBdLat sets the "bd_lat" field.
func (sauo *ScenicAreaUpdateOne) SetBdLat(f float64) *ScenicAreaUpdateOne {
	sauo.mutation.ResetBdLat()
	sauo.mutation.SetBdLat(f)
	return sauo
}

// SetNillableBdLat sets the "bd_lat" field if the given value is not nil.
func (sauo *ScenicAreaUpdateOne) SetNillableBdLat(f *float64) *ScenicAreaUpdateOne {
	if f != nil {
		sauo.SetBdLat(*f)
	}
	return sauo
}

// AddBdLat adds f to the "bd_lat" field.
func (sauo *ScenicAreaUpdateOne) AddBdLat(f float64) *ScenicAreaUpdateOne {
	sauo.mutation.AddBdLat(f)
	return sauo
}

// SetStatus sets the "status" field.
func (sauo *ScenicAreaUpdateOne) SetStatus(i int) *ScenicAreaUpdateOne {
	sauo.mutation.ResetStatus()
	sauo.mutation.SetStatus(i)
	return sauo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sauo *ScenicAreaUpdateOne) SetNillableStatus(i *int) *ScenicAreaUpdateOne {
	if i != nil {
		sauo.SetStatus(*i)
	}
	return sauo
}

// AddStatus adds i to the "status" field.
func (sauo *ScenicAreaUpdateOne) AddStatus(i int) *ScenicAreaUpdateOne {
	sauo.mutation.AddStatus(i)
	return sauo
}

// SetExtendYokeeID sets the "extend_yokee_id" field.
func (sauo *ScenicAreaUpdateOne) SetExtendYokeeID(i int) *ScenicAreaUpdateOne {
	sauo.mutation.ResetExtendYokeeID()
	sauo.mutation.SetExtendYokeeID(i)
	return sauo
}

// SetNillableExtendYokeeID sets the "extend_yokee_id" field if the given value is not nil.
func (sauo *ScenicAreaUpdateOne) SetNillableExtendYokeeID(i *int) *ScenicAreaUpdateOne {
	if i != nil {
		sauo.SetExtendYokeeID(*i)
	}
	return sauo
}

// AddExtendYokeeID adds i to the "extend_yokee_id" field.
func (sauo *ScenicAreaUpdateOne) AddExtendYokeeID(i int) *ScenicAreaUpdateOne {
	sauo.mutation.AddExtendYokeeID(i)
	return sauo
}

// ClearExtendYokeeID clears the value of the "extend_yokee_id" field.
func (sauo *ScenicAreaUpdateOne) ClearExtendYokeeID() *ScenicAreaUpdateOne {
	sauo.mutation.ClearExtendYokeeID()
	return sauo
}

// SetUpdateTime sets the "update_time" field.
func (sauo *ScenicAreaUpdateOne) SetUpdateTime(t time.Time) *ScenicAreaUpdateOne {
	sauo.mutation.SetUpdateTime(t)
	return sauo
}

// AddCarIDs adds the "cars" edge to the Car entity by IDs.
func (sauo *ScenicAreaUpdateOne) AddCarIDs(ids ...int) *ScenicAreaUpdateOne {
	sauo.mutation.AddCarIDs(ids...)
	return sauo
}

// AddCars adds the "cars" edges to the Car entity.
func (sauo *ScenicAreaUpdateOne) AddCars(c ...*Car) *ScenicAreaUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return sauo.AddCarIDs(ids...)
}

// AddAccountIDs adds the "accounts" edge to the Account entity by IDs.
func (sauo *ScenicAreaUpdateOne) AddAccountIDs(ids ...int) *ScenicAreaUpdateOne {
	sauo.mutation.AddAccountIDs(ids...)
	return sauo
}

// AddAccounts adds the "accounts" edges to the Account entity.
func (sauo *ScenicAreaUpdateOne) AddAccounts(a ...*Account) *ScenicAreaUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return sauo.AddAccountIDs(ids...)
}

// AddPoiIDs adds the "pois" edge to the Poi entity by IDs.
func (sauo *ScenicAreaUpdateOne) AddPoiIDs(ids ...int) *ScenicAreaUpdateOne {
	sauo.mutation.AddPoiIDs(ids...)
	return sauo
}

// AddPois adds the "pois" edges to the Poi entity.
func (sauo *ScenicAreaUpdateOne) AddPois(p ...*Poi) *ScenicAreaUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return sauo.AddPoiIDs(ids...)
}

// AddProfitReceiverIDs adds the "profit_receivers" edge to the ProfitReceiver entity by IDs.
func (sauo *ScenicAreaUpdateOne) AddProfitReceiverIDs(ids ...int) *ScenicAreaUpdateOne {
	sauo.mutation.AddProfitReceiverIDs(ids...)
	return sauo
}

// AddProfitReceivers adds the "profit_receivers" edges to the ProfitReceiver entity.
func (sauo *ScenicAreaUpdateOne) AddProfitReceivers(p ...*ProfitReceiver) *ScenicAreaUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return sauo.AddProfitReceiverIDs(ids...)
}

// AddPayTxBillIDs adds the "pay_tx_bills" edge to the PayTxBill entity by IDs.
func (sauo *ScenicAreaUpdateOne) AddPayTxBillIDs(ids ...int) *ScenicAreaUpdateOne {
	sauo.mutation.AddPayTxBillIDs(ids...)
	return sauo
}

// AddPayTxBills adds the "pay_tx_bills" edges to the PayTxBill entity.
func (sauo *ScenicAreaUpdateOne) AddPayTxBills(p ...*PayTxBill) *ScenicAreaUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return sauo.AddPayTxBillIDs(ids...)
}

// AddCarBillingStrategyIDs adds the "car_billing_strategies" edge to the BillingStrategy entity by IDs.
func (sauo *ScenicAreaUpdateOne) AddCarBillingStrategyIDs(ids ...int) *ScenicAreaUpdateOne {
	sauo.mutation.AddCarBillingStrategyIDs(ids...)
	return sauo
}

// AddCarBillingStrategies adds the "car_billing_strategies" edges to the BillingStrategy entity.
func (sauo *ScenicAreaUpdateOne) AddCarBillingStrategies(b ...*BillingStrategy) *ScenicAreaUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return sauo.AddCarBillingStrategyIDs(ids...)
}

// SetMapID sets the "map" edge to the ScenicAreaMap entity by ID.
func (sauo *ScenicAreaUpdateOne) SetMapID(id int) *ScenicAreaUpdateOne {
	sauo.mutation.SetMapID(id)
	return sauo
}

// SetNillableMapID sets the "map" edge to the ScenicAreaMap entity by ID if the given value is not nil.
func (sauo *ScenicAreaUpdateOne) SetNillableMapID(id *int) *ScenicAreaUpdateOne {
	if id != nil {
		sauo = sauo.SetMapID(*id)
	}
	return sauo
}

// SetMap sets the "map" edge to the ScenicAreaMap entity.
func (sauo *ScenicAreaUpdateOne) SetMap(s *ScenicAreaMap) *ScenicAreaUpdateOne {
	return sauo.SetMapID(s.ID)
}

// AddMapVersionIDs adds the "map_versions" edge to the MapVersion entity by IDs.
func (sauo *ScenicAreaUpdateOne) AddMapVersionIDs(ids ...int) *ScenicAreaUpdateOne {
	sauo.mutation.AddMapVersionIDs(ids...)
	return sauo
}

// AddMapVersions adds the "map_versions" edges to the MapVersion entity.
func (sauo *ScenicAreaUpdateOne) AddMapVersions(m ...*MapVersion) *ScenicAreaUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return sauo.AddMapVersionIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (sauo *ScenicAreaUpdateOne) AddUserIDs(ids ...int) *ScenicAreaUpdateOne {
	sauo.mutation.AddUserIDs(ids...)
	return sauo
}

// AddUsers adds the "users" edges to the User entity.
func (sauo *ScenicAreaUpdateOne) AddUsers(u ...*User) *ScenicAreaUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return sauo.AddUserIDs(ids...)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (sauo *ScenicAreaUpdateOne) AddOrderIDs(ids ...int) *ScenicAreaUpdateOne {
	sauo.mutation.AddOrderIDs(ids...)
	return sauo
}

// AddOrders adds the "orders" edges to the Order entity.
func (sauo *ScenicAreaUpdateOne) AddOrders(o ...*Order) *ScenicAreaUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return sauo.AddOrderIDs(ids...)
}

// AddCarOperateLogIDs adds the "car_operate_logs" edge to the CarsOperateLog entity by IDs.
func (sauo *ScenicAreaUpdateOne) AddCarOperateLogIDs(ids ...int) *ScenicAreaUpdateOne {
	sauo.mutation.AddCarOperateLogIDs(ids...)
	return sauo
}

// AddCarOperateLogs adds the "car_operate_logs" edges to the CarsOperateLog entity.
func (sauo *ScenicAreaUpdateOne) AddCarOperateLogs(c ...*CarsOperateLog) *ScenicAreaUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return sauo.AddCarOperateLogIDs(ids...)
}

// AddStatsHourlyCarIDs adds the "stats_hourly_car" edge to the StatsHourlyCar entity by IDs.
func (sauo *ScenicAreaUpdateOne) AddStatsHourlyCarIDs(ids ...int) *ScenicAreaUpdateOne {
	sauo.mutation.AddStatsHourlyCarIDs(ids...)
	return sauo
}

// AddStatsHourlyCar adds the "stats_hourly_car" edges to the StatsHourlyCar entity.
func (sauo *ScenicAreaUpdateOne) AddStatsHourlyCar(s ...*StatsHourlyCar) *ScenicAreaUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sauo.AddStatsHourlyCarIDs(ids...)
}

// AddConfigFileIDs adds the "config_files" edge to the CarConfig entity by IDs.
func (sauo *ScenicAreaUpdateOne) AddConfigFileIDs(ids ...int) *ScenicAreaUpdateOne {
	sauo.mutation.AddConfigFileIDs(ids...)
	return sauo
}

// AddConfigFiles adds the "config_files" edges to the CarConfig entity.
func (sauo *ScenicAreaUpdateOne) AddConfigFiles(c ...*CarConfig) *ScenicAreaUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return sauo.AddConfigFileIDs(ids...)
}

// Mutation returns the ScenicAreaMutation object of the builder.
func (sauo *ScenicAreaUpdateOne) Mutation() *ScenicAreaMutation {
	return sauo.mutation
}

// ClearCars clears all "cars" edges to the Car entity.
func (sauo *ScenicAreaUpdateOne) ClearCars() *ScenicAreaUpdateOne {
	sauo.mutation.ClearCars()
	return sauo
}

// RemoveCarIDs removes the "cars" edge to Car entities by IDs.
func (sauo *ScenicAreaUpdateOne) RemoveCarIDs(ids ...int) *ScenicAreaUpdateOne {
	sauo.mutation.RemoveCarIDs(ids...)
	return sauo
}

// RemoveCars removes "cars" edges to Car entities.
func (sauo *ScenicAreaUpdateOne) RemoveCars(c ...*Car) *ScenicAreaUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return sauo.RemoveCarIDs(ids...)
}

// ClearAccounts clears all "accounts" edges to the Account entity.
func (sauo *ScenicAreaUpdateOne) ClearAccounts() *ScenicAreaUpdateOne {
	sauo.mutation.ClearAccounts()
	return sauo
}

// RemoveAccountIDs removes the "accounts" edge to Account entities by IDs.
func (sauo *ScenicAreaUpdateOne) RemoveAccountIDs(ids ...int) *ScenicAreaUpdateOne {
	sauo.mutation.RemoveAccountIDs(ids...)
	return sauo
}

// RemoveAccounts removes "accounts" edges to Account entities.
func (sauo *ScenicAreaUpdateOne) RemoveAccounts(a ...*Account) *ScenicAreaUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return sauo.RemoveAccountIDs(ids...)
}

// ClearPois clears all "pois" edges to the Poi entity.
func (sauo *ScenicAreaUpdateOne) ClearPois() *ScenicAreaUpdateOne {
	sauo.mutation.ClearPois()
	return sauo
}

// RemovePoiIDs removes the "pois" edge to Poi entities by IDs.
func (sauo *ScenicAreaUpdateOne) RemovePoiIDs(ids ...int) *ScenicAreaUpdateOne {
	sauo.mutation.RemovePoiIDs(ids...)
	return sauo
}

// RemovePois removes "pois" edges to Poi entities.
func (sauo *ScenicAreaUpdateOne) RemovePois(p ...*Poi) *ScenicAreaUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return sauo.RemovePoiIDs(ids...)
}

// ClearProfitReceivers clears all "profit_receivers" edges to the ProfitReceiver entity.
func (sauo *ScenicAreaUpdateOne) ClearProfitReceivers() *ScenicAreaUpdateOne {
	sauo.mutation.ClearProfitReceivers()
	return sauo
}

// RemoveProfitReceiverIDs removes the "profit_receivers" edge to ProfitReceiver entities by IDs.
func (sauo *ScenicAreaUpdateOne) RemoveProfitReceiverIDs(ids ...int) *ScenicAreaUpdateOne {
	sauo.mutation.RemoveProfitReceiverIDs(ids...)
	return sauo
}

// RemoveProfitReceivers removes "profit_receivers" edges to ProfitReceiver entities.
func (sauo *ScenicAreaUpdateOne) RemoveProfitReceivers(p ...*ProfitReceiver) *ScenicAreaUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return sauo.RemoveProfitReceiverIDs(ids...)
}

// ClearPayTxBills clears all "pay_tx_bills" edges to the PayTxBill entity.
func (sauo *ScenicAreaUpdateOne) ClearPayTxBills() *ScenicAreaUpdateOne {
	sauo.mutation.ClearPayTxBills()
	return sauo
}

// RemovePayTxBillIDs removes the "pay_tx_bills" edge to PayTxBill entities by IDs.
func (sauo *ScenicAreaUpdateOne) RemovePayTxBillIDs(ids ...int) *ScenicAreaUpdateOne {
	sauo.mutation.RemovePayTxBillIDs(ids...)
	return sauo
}

// RemovePayTxBills removes "pay_tx_bills" edges to PayTxBill entities.
func (sauo *ScenicAreaUpdateOne) RemovePayTxBills(p ...*PayTxBill) *ScenicAreaUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return sauo.RemovePayTxBillIDs(ids...)
}

// ClearCarBillingStrategies clears all "car_billing_strategies" edges to the BillingStrategy entity.
func (sauo *ScenicAreaUpdateOne) ClearCarBillingStrategies() *ScenicAreaUpdateOne {
	sauo.mutation.ClearCarBillingStrategies()
	return sauo
}

// RemoveCarBillingStrategyIDs removes the "car_billing_strategies" edge to BillingStrategy entities by IDs.
func (sauo *ScenicAreaUpdateOne) RemoveCarBillingStrategyIDs(ids ...int) *ScenicAreaUpdateOne {
	sauo.mutation.RemoveCarBillingStrategyIDs(ids...)
	return sauo
}

// RemoveCarBillingStrategies removes "car_billing_strategies" edges to BillingStrategy entities.
func (sauo *ScenicAreaUpdateOne) RemoveCarBillingStrategies(b ...*BillingStrategy) *ScenicAreaUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return sauo.RemoveCarBillingStrategyIDs(ids...)
}

// ClearMap clears the "map" edge to the ScenicAreaMap entity.
func (sauo *ScenicAreaUpdateOne) ClearMap() *ScenicAreaUpdateOne {
	sauo.mutation.ClearMap()
	return sauo
}

// ClearMapVersions clears all "map_versions" edges to the MapVersion entity.
func (sauo *ScenicAreaUpdateOne) ClearMapVersions() *ScenicAreaUpdateOne {
	sauo.mutation.ClearMapVersions()
	return sauo
}

// RemoveMapVersionIDs removes the "map_versions" edge to MapVersion entities by IDs.
func (sauo *ScenicAreaUpdateOne) RemoveMapVersionIDs(ids ...int) *ScenicAreaUpdateOne {
	sauo.mutation.RemoveMapVersionIDs(ids...)
	return sauo
}

// RemoveMapVersions removes "map_versions" edges to MapVersion entities.
func (sauo *ScenicAreaUpdateOne) RemoveMapVersions(m ...*MapVersion) *ScenicAreaUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return sauo.RemoveMapVersionIDs(ids...)
}

// ClearUsers clears all "users" edges to the User entity.
func (sauo *ScenicAreaUpdateOne) ClearUsers() *ScenicAreaUpdateOne {
	sauo.mutation.ClearUsers()
	return sauo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (sauo *ScenicAreaUpdateOne) RemoveUserIDs(ids ...int) *ScenicAreaUpdateOne {
	sauo.mutation.RemoveUserIDs(ids...)
	return sauo
}

// RemoveUsers removes "users" edges to User entities.
func (sauo *ScenicAreaUpdateOne) RemoveUsers(u ...*User) *ScenicAreaUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return sauo.RemoveUserIDs(ids...)
}

// ClearOrders clears all "orders" edges to the Order entity.
func (sauo *ScenicAreaUpdateOne) ClearOrders() *ScenicAreaUpdateOne {
	sauo.mutation.ClearOrders()
	return sauo
}

// RemoveOrderIDs removes the "orders" edge to Order entities by IDs.
func (sauo *ScenicAreaUpdateOne) RemoveOrderIDs(ids ...int) *ScenicAreaUpdateOne {
	sauo.mutation.RemoveOrderIDs(ids...)
	return sauo
}

// RemoveOrders removes "orders" edges to Order entities.
func (sauo *ScenicAreaUpdateOne) RemoveOrders(o ...*Order) *ScenicAreaUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return sauo.RemoveOrderIDs(ids...)
}

// ClearCarOperateLogs clears all "car_operate_logs" edges to the CarsOperateLog entity.
func (sauo *ScenicAreaUpdateOne) ClearCarOperateLogs() *ScenicAreaUpdateOne {
	sauo.mutation.ClearCarOperateLogs()
	return sauo
}

// RemoveCarOperateLogIDs removes the "car_operate_logs" edge to CarsOperateLog entities by IDs.
func (sauo *ScenicAreaUpdateOne) RemoveCarOperateLogIDs(ids ...int) *ScenicAreaUpdateOne {
	sauo.mutation.RemoveCarOperateLogIDs(ids...)
	return sauo
}

// RemoveCarOperateLogs removes "car_operate_logs" edges to CarsOperateLog entities.
func (sauo *ScenicAreaUpdateOne) RemoveCarOperateLogs(c ...*CarsOperateLog) *ScenicAreaUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return sauo.RemoveCarOperateLogIDs(ids...)
}

// ClearStatsHourlyCar clears all "stats_hourly_car" edges to the StatsHourlyCar entity.
func (sauo *ScenicAreaUpdateOne) ClearStatsHourlyCar() *ScenicAreaUpdateOne {
	sauo.mutation.ClearStatsHourlyCar()
	return sauo
}

// RemoveStatsHourlyCarIDs removes the "stats_hourly_car" edge to StatsHourlyCar entities by IDs.
func (sauo *ScenicAreaUpdateOne) RemoveStatsHourlyCarIDs(ids ...int) *ScenicAreaUpdateOne {
	sauo.mutation.RemoveStatsHourlyCarIDs(ids...)
	return sauo
}

// RemoveStatsHourlyCar removes "stats_hourly_car" edges to StatsHourlyCar entities.
func (sauo *ScenicAreaUpdateOne) RemoveStatsHourlyCar(s ...*StatsHourlyCar) *ScenicAreaUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sauo.RemoveStatsHourlyCarIDs(ids...)
}

// ClearConfigFiles clears all "config_files" edges to the CarConfig entity.
func (sauo *ScenicAreaUpdateOne) ClearConfigFiles() *ScenicAreaUpdateOne {
	sauo.mutation.ClearConfigFiles()
	return sauo
}

// RemoveConfigFileIDs removes the "config_files" edge to CarConfig entities by IDs.
func (sauo *ScenicAreaUpdateOne) RemoveConfigFileIDs(ids ...int) *ScenicAreaUpdateOne {
	sauo.mutation.RemoveConfigFileIDs(ids...)
	return sauo
}

// RemoveConfigFiles removes "config_files" edges to CarConfig entities.
func (sauo *ScenicAreaUpdateOne) RemoveConfigFiles(c ...*CarConfig) *ScenicAreaUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return sauo.RemoveConfigFileIDs(ids...)
}

// Where appends a list predicates to the ScenicAreaUpdate builder.
func (sauo *ScenicAreaUpdateOne) Where(ps ...predicate.ScenicArea) *ScenicAreaUpdateOne {
	sauo.mutation.Where(ps...)
	return sauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sauo *ScenicAreaUpdateOne) Select(field string, fields ...string) *ScenicAreaUpdateOne {
	sauo.fields = append([]string{field}, fields...)
	return sauo
}

// Save executes the query and returns the updated ScenicArea entity.
func (sauo *ScenicAreaUpdateOne) Save(ctx context.Context) (*ScenicArea, error) {
	sauo.defaults()
	return withHooks(ctx, sauo.sqlSave, sauo.mutation, sauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sauo *ScenicAreaUpdateOne) SaveX(ctx context.Context) *ScenicArea {
	node, err := sauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sauo *ScenicAreaUpdateOne) Exec(ctx context.Context) error {
	_, err := sauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sauo *ScenicAreaUpdateOne) ExecX(ctx context.Context) {
	if err := sauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sauo *ScenicAreaUpdateOne) defaults() {
	if _, ok := sauo.mutation.UpdateTime(); !ok {
		v := scenicarea.UpdateDefaultUpdateTime()
		sauo.mutation.SetUpdateTime(v)
	}
}

func (sauo *ScenicAreaUpdateOne) sqlSave(ctx context.Context) (_node *ScenicArea, err error) {
	_spec := sqlgraph.NewUpdateSpec(scenicarea.Table, scenicarea.Columns, sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt))
	id, ok := sauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ScenicArea.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, scenicarea.FieldID)
		for _, f := range fields {
			if !scenicarea.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != scenicarea.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sauo.mutation.Code(); ok {
		_spec.SetField(scenicarea.FieldCode, field.TypeString, value)
	}
	if value, ok := sauo.mutation.Name(); ok {
		_spec.SetField(scenicarea.FieldName, field.TypeString, value)
	}
	if value, ok := sauo.mutation.Address(); ok {
		_spec.SetField(scenicarea.FieldAddress, field.TypeString, value)
	}
	if value, ok := sauo.mutation.Manager(); ok {
		_spec.SetField(scenicarea.FieldManager, field.TypeString, value)
	}
	if value, ok := sauo.mutation.Phone(); ok {
		_spec.SetField(scenicarea.FieldPhone, field.TypeString, value)
	}
	if value, ok := sauo.mutation.MchID(); ok {
		_spec.SetField(scenicarea.FieldMchID, field.TypeString, value)
	}
	if value, ok := sauo.mutation.MchName(); ok {
		_spec.SetField(scenicarea.FieldMchName, field.TypeString, value)
	}
	if value, ok := sauo.mutation.Timezone(); ok {
		_spec.SetField(scenicarea.FieldTimezone, field.TypeInt, value)
	}
	if value, ok := sauo.mutation.AddedTimezone(); ok {
		_spec.AddField(scenicarea.FieldTimezone, field.TypeInt, value)
	}
	if value, ok := sauo.mutation.WgsLon(); ok {
		_spec.SetField(scenicarea.FieldWgsLon, field.TypeFloat64, value)
	}
	if value, ok := sauo.mutation.AddedWgsLon(); ok {
		_spec.AddField(scenicarea.FieldWgsLon, field.TypeFloat64, value)
	}
	if value, ok := sauo.mutation.WgsLat(); ok {
		_spec.SetField(scenicarea.FieldWgsLat, field.TypeFloat64, value)
	}
	if value, ok := sauo.mutation.AddedWgsLat(); ok {
		_spec.AddField(scenicarea.FieldWgsLat, field.TypeFloat64, value)
	}
	if value, ok := sauo.mutation.GcjLon(); ok {
		_spec.SetField(scenicarea.FieldGcjLon, field.TypeFloat64, value)
	}
	if value, ok := sauo.mutation.AddedGcjLon(); ok {
		_spec.AddField(scenicarea.FieldGcjLon, field.TypeFloat64, value)
	}
	if value, ok := sauo.mutation.GcjLat(); ok {
		_spec.SetField(scenicarea.FieldGcjLat, field.TypeFloat64, value)
	}
	if value, ok := sauo.mutation.AddedGcjLat(); ok {
		_spec.AddField(scenicarea.FieldGcjLat, field.TypeFloat64, value)
	}
	if value, ok := sauo.mutation.BdLon(); ok {
		_spec.SetField(scenicarea.FieldBdLon, field.TypeFloat64, value)
	}
	if value, ok := sauo.mutation.AddedBdLon(); ok {
		_spec.AddField(scenicarea.FieldBdLon, field.TypeFloat64, value)
	}
	if value, ok := sauo.mutation.BdLat(); ok {
		_spec.SetField(scenicarea.FieldBdLat, field.TypeFloat64, value)
	}
	if value, ok := sauo.mutation.AddedBdLat(); ok {
		_spec.AddField(scenicarea.FieldBdLat, field.TypeFloat64, value)
	}
	if value, ok := sauo.mutation.Status(); ok {
		_spec.SetField(scenicarea.FieldStatus, field.TypeInt, value)
	}
	if value, ok := sauo.mutation.AddedStatus(); ok {
		_spec.AddField(scenicarea.FieldStatus, field.TypeInt, value)
	}
	if value, ok := sauo.mutation.ExtendYokeeID(); ok {
		_spec.SetField(scenicarea.FieldExtendYokeeID, field.TypeInt, value)
	}
	if value, ok := sauo.mutation.AddedExtendYokeeID(); ok {
		_spec.AddField(scenicarea.FieldExtendYokeeID, field.TypeInt, value)
	}
	if sauo.mutation.ExtendYokeeIDCleared() {
		_spec.ClearField(scenicarea.FieldExtendYokeeID, field.TypeInt)
	}
	if value, ok := sauo.mutation.UpdateTime(); ok {
		_spec.SetField(scenicarea.FieldUpdateTime, field.TypeTime, value)
	}
	if sauo.mutation.CarsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.CarsTable,
			Columns: []string{scenicarea.CarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sauo.mutation.RemovedCarsIDs(); len(nodes) > 0 && !sauo.mutation.CarsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.CarsTable,
			Columns: []string{scenicarea.CarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sauo.mutation.CarsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.CarsTable,
			Columns: []string{scenicarea.CarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sauo.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.AccountsTable,
			Columns: []string{scenicarea.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sauo.mutation.RemovedAccountsIDs(); len(nodes) > 0 && !sauo.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.AccountsTable,
			Columns: []string{scenicarea.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sauo.mutation.AccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.AccountsTable,
			Columns: []string{scenicarea.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sauo.mutation.PoisCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.PoisTable,
			Columns: []string{scenicarea.PoisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(poi.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sauo.mutation.RemovedPoisIDs(); len(nodes) > 0 && !sauo.mutation.PoisCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.PoisTable,
			Columns: []string{scenicarea.PoisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(poi.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sauo.mutation.PoisIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.PoisTable,
			Columns: []string{scenicarea.PoisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(poi.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sauo.mutation.ProfitReceiversCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.ProfitReceiversTable,
			Columns: []string{scenicarea.ProfitReceiversColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profitreceiver.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sauo.mutation.RemovedProfitReceiversIDs(); len(nodes) > 0 && !sauo.mutation.ProfitReceiversCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.ProfitReceiversTable,
			Columns: []string{scenicarea.ProfitReceiversColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profitreceiver.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sauo.mutation.ProfitReceiversIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.ProfitReceiversTable,
			Columns: []string{scenicarea.ProfitReceiversColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profitreceiver.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sauo.mutation.PayTxBillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.PayTxBillsTable,
			Columns: []string{scenicarea.PayTxBillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paytxbill.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sauo.mutation.RemovedPayTxBillsIDs(); len(nodes) > 0 && !sauo.mutation.PayTxBillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.PayTxBillsTable,
			Columns: []string{scenicarea.PayTxBillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paytxbill.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sauo.mutation.PayTxBillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.PayTxBillsTable,
			Columns: []string{scenicarea.PayTxBillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paytxbill.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sauo.mutation.CarBillingStrategiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.CarBillingStrategiesTable,
			Columns: []string{scenicarea.CarBillingStrategiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingstrategy.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sauo.mutation.RemovedCarBillingStrategiesIDs(); len(nodes) > 0 && !sauo.mutation.CarBillingStrategiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.CarBillingStrategiesTable,
			Columns: []string{scenicarea.CarBillingStrategiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingstrategy.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sauo.mutation.CarBillingStrategiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.CarBillingStrategiesTable,
			Columns: []string{scenicarea.CarBillingStrategiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingstrategy.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sauo.mutation.MapCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   scenicarea.MapTable,
			Columns: []string{scenicarea.MapColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicareamap.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sauo.mutation.MapIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   scenicarea.MapTable,
			Columns: []string{scenicarea.MapColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicareamap.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sauo.mutation.MapVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.MapVersionsTable,
			Columns: []string{scenicarea.MapVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mapversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sauo.mutation.RemovedMapVersionsIDs(); len(nodes) > 0 && !sauo.mutation.MapVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.MapVersionsTable,
			Columns: []string{scenicarea.MapVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mapversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sauo.mutation.MapVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.MapVersionsTable,
			Columns: []string{scenicarea.MapVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mapversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sauo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.UsersTable,
			Columns: []string{scenicarea.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sauo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !sauo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.UsersTable,
			Columns: []string{scenicarea.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sauo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.UsersTable,
			Columns: []string{scenicarea.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sauo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.OrdersTable,
			Columns: []string{scenicarea.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sauo.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !sauo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.OrdersTable,
			Columns: []string{scenicarea.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sauo.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.OrdersTable,
			Columns: []string{scenicarea.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sauo.mutation.CarOperateLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.CarOperateLogsTable,
			Columns: []string{scenicarea.CarOperateLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsoperatelog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sauo.mutation.RemovedCarOperateLogsIDs(); len(nodes) > 0 && !sauo.mutation.CarOperateLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.CarOperateLogsTable,
			Columns: []string{scenicarea.CarOperateLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsoperatelog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sauo.mutation.CarOperateLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.CarOperateLogsTable,
			Columns: []string{scenicarea.CarOperateLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsoperatelog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sauo.mutation.StatsHourlyCarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.StatsHourlyCarTable,
			Columns: []string{scenicarea.StatsHourlyCarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statshourlycar.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sauo.mutation.RemovedStatsHourlyCarIDs(); len(nodes) > 0 && !sauo.mutation.StatsHourlyCarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.StatsHourlyCarTable,
			Columns: []string{scenicarea.StatsHourlyCarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statshourlycar.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sauo.mutation.StatsHourlyCarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.StatsHourlyCarTable,
			Columns: []string{scenicarea.StatsHourlyCarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statshourlycar.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sauo.mutation.ConfigFilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.ConfigFilesTable,
			Columns: []string{scenicarea.ConfigFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carconfig.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sauo.mutation.RemovedConfigFilesIDs(); len(nodes) > 0 && !sauo.mutation.ConfigFilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.ConfigFilesTable,
			Columns: []string{scenicarea.ConfigFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carconfig.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sauo.mutation.ConfigFilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenicarea.ConfigFilesTable,
			Columns: []string{scenicarea.ConfigFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carconfig.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ScenicArea{config: sauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scenicarea.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sauo.mutation.done = true
	return _node, nil
}
