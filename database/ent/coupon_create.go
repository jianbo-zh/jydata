// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/coupon"
)

// CouponCreate is the builder for creating a Coupon entity.
type CouponCreate struct {
	config
	mutation *CouponMutation
	hooks    []Hook
}

// SetDeleteTime sets the "delete_time" field.
func (cc *CouponCreate) SetDeleteTime(t time.Time) *CouponCreate {
	cc.mutation.SetDeleteTime(t)
	return cc
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (cc *CouponCreate) SetNillableDeleteTime(t *time.Time) *CouponCreate {
	if t != nil {
		cc.SetDeleteTime(*t)
	}
	return cc
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (cc *CouponCreate) SetScenicAreaID(i int) *CouponCreate {
	cc.mutation.SetScenicAreaID(i)
	return cc
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (cc *CouponCreate) SetNillableScenicAreaID(i *int) *CouponCreate {
	if i != nil {
		cc.SetScenicAreaID(*i)
	}
	return cc
}

// SetName sets the "name" field.
func (cc *CouponCreate) SetName(s string) *CouponCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetCouponNo sets the "coupon_no" field.
func (cc *CouponCreate) SetCouponNo(s string) *CouponCreate {
	cc.mutation.SetCouponNo(s)
	return cc
}

// SetUserID sets the "user_id" field.
func (cc *CouponCreate) SetUserID(i int) *CouponCreate {
	cc.mutation.SetUserID(i)
	return cc
}

// SetLimitAmount sets the "limit_amount" field.
func (cc *CouponCreate) SetLimitAmount(i int) *CouponCreate {
	cc.mutation.SetLimitAmount(i)
	return cc
}

// SetCouponAmount sets the "coupon_amount" field.
func (cc *CouponCreate) SetCouponAmount(i int) *CouponCreate {
	cc.mutation.SetCouponAmount(i)
	return cc
}

// SetBindOrderID sets the "bind_order_id" field.
func (cc *CouponCreate) SetBindOrderID(i int) *CouponCreate {
	cc.mutation.SetBindOrderID(i)
	return cc
}

// SetNillableBindOrderID sets the "bind_order_id" field if the given value is not nil.
func (cc *CouponCreate) SetNillableBindOrderID(i *int) *CouponCreate {
	if i != nil {
		cc.SetBindOrderID(*i)
	}
	return cc
}

// SetState sets the "state" field.
func (cc *CouponCreate) SetState(i int) *CouponCreate {
	cc.mutation.SetState(i)
	return cc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (cc *CouponCreate) SetNillableState(i *int) *CouponCreate {
	if i != nil {
		cc.SetState(*i)
	}
	return cc
}

// SetValidStartTime sets the "valid_start_time" field.
func (cc *CouponCreate) SetValidStartTime(t time.Time) *CouponCreate {
	cc.mutation.SetValidStartTime(t)
	return cc
}

// SetNillableValidStartTime sets the "valid_start_time" field if the given value is not nil.
func (cc *CouponCreate) SetNillableValidStartTime(t *time.Time) *CouponCreate {
	if t != nil {
		cc.SetValidStartTime(*t)
	}
	return cc
}

// SetValidEndTime sets the "valid_end_time" field.
func (cc *CouponCreate) SetValidEndTime(t time.Time) *CouponCreate {
	cc.mutation.SetValidEndTime(t)
	return cc
}

// SetNillableValidEndTime sets the "valid_end_time" field if the given value is not nil.
func (cc *CouponCreate) SetNillableValidEndTime(t *time.Time) *CouponCreate {
	if t != nil {
		cc.SetValidEndTime(*t)
	}
	return cc
}

// SetCreateTime sets the "create_time" field.
func (cc *CouponCreate) SetCreateTime(t time.Time) *CouponCreate {
	cc.mutation.SetCreateTime(t)
	return cc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (cc *CouponCreate) SetNillableCreateTime(t *time.Time) *CouponCreate {
	if t != nil {
		cc.SetCreateTime(*t)
	}
	return cc
}

// SetUpdateTime sets the "update_time" field.
func (cc *CouponCreate) SetUpdateTime(t time.Time) *CouponCreate {
	cc.mutation.SetUpdateTime(t)
	return cc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (cc *CouponCreate) SetNillableUpdateTime(t *time.Time) *CouponCreate {
	if t != nil {
		cc.SetUpdateTime(*t)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *CouponCreate) SetID(i int) *CouponCreate {
	cc.mutation.SetID(i)
	return cc
}

// Mutation returns the CouponMutation object of the builder.
func (cc *CouponCreate) Mutation() *CouponMutation {
	return cc.mutation
}

// Save creates the Coupon in the database.
func (cc *CouponCreate) Save(ctx context.Context) (*Coupon, error) {
	if err := cc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CouponCreate) SaveX(ctx context.Context) *Coupon {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CouponCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CouponCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CouponCreate) defaults() error {
	if _, ok := cc.mutation.State(); !ok {
		v := coupon.DefaultState
		cc.mutation.SetState(v)
	}
	if _, ok := cc.mutation.CreateTime(); !ok {
		if coupon.DefaultCreateTime == nil {
			return fmt.Errorf("ent: uninitialized coupon.DefaultCreateTime (forgotten import ent/runtime?)")
		}
		v := coupon.DefaultCreateTime()
		cc.mutation.SetCreateTime(v)
	}
	if _, ok := cc.mutation.UpdateTime(); !ok {
		if coupon.DefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized coupon.DefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := coupon.DefaultUpdateTime()
		cc.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cc *CouponCreate) check() error {
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Coupon.name"`)}
	}
	if _, ok := cc.mutation.CouponNo(); !ok {
		return &ValidationError{Name: "coupon_no", err: errors.New(`ent: missing required field "Coupon.coupon_no"`)}
	}
	if _, ok := cc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Coupon.user_id"`)}
	}
	if _, ok := cc.mutation.LimitAmount(); !ok {
		return &ValidationError{Name: "limit_amount", err: errors.New(`ent: missing required field "Coupon.limit_amount"`)}
	}
	if _, ok := cc.mutation.CouponAmount(); !ok {
		return &ValidationError{Name: "coupon_amount", err: errors.New(`ent: missing required field "Coupon.coupon_amount"`)}
	}
	if _, ok := cc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "Coupon.state"`)}
	}
	if _, ok := cc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Coupon.create_time"`)}
	}
	if _, ok := cc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Coupon.update_time"`)}
	}
	return nil
}

func (cc *CouponCreate) sqlSave(ctx context.Context) (*Coupon, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CouponCreate) createSpec() (*Coupon, *sqlgraph.CreateSpec) {
	var (
		_node = &Coupon{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(coupon.Table, sqlgraph.NewFieldSpec(coupon.FieldID, field.TypeInt))
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.DeleteTime(); ok {
		_spec.SetField(coupon.FieldDeleteTime, field.TypeTime, value)
		_node.DeleteTime = value
	}
	if value, ok := cc.mutation.ScenicAreaID(); ok {
		_spec.SetField(coupon.FieldScenicAreaID, field.TypeInt, value)
		_node.ScenicAreaID = &value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(coupon.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.CouponNo(); ok {
		_spec.SetField(coupon.FieldCouponNo, field.TypeString, value)
		_node.CouponNo = value
	}
	if value, ok := cc.mutation.UserID(); ok {
		_spec.SetField(coupon.FieldUserID, field.TypeInt, value)
		_node.UserID = value
	}
	if value, ok := cc.mutation.LimitAmount(); ok {
		_spec.SetField(coupon.FieldLimitAmount, field.TypeInt, value)
		_node.LimitAmount = value
	}
	if value, ok := cc.mutation.CouponAmount(); ok {
		_spec.SetField(coupon.FieldCouponAmount, field.TypeInt, value)
		_node.CouponAmount = value
	}
	if value, ok := cc.mutation.BindOrderID(); ok {
		_spec.SetField(coupon.FieldBindOrderID, field.TypeInt, value)
		_node.BindOrderID = &value
	}
	if value, ok := cc.mutation.State(); ok {
		_spec.SetField(coupon.FieldState, field.TypeInt, value)
		_node.State = value
	}
	if value, ok := cc.mutation.ValidStartTime(); ok {
		_spec.SetField(coupon.FieldValidStartTime, field.TypeTime, value)
		_node.ValidStartTime = value
	}
	if value, ok := cc.mutation.ValidEndTime(); ok {
		_spec.SetField(coupon.FieldValidEndTime, field.TypeTime, value)
		_node.ValidEndTime = value
	}
	if value, ok := cc.mutation.CreateTime(); ok {
		_spec.SetField(coupon.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := cc.mutation.UpdateTime(); ok {
		_spec.SetField(coupon.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// CouponCreateBulk is the builder for creating many Coupon entities in bulk.
type CouponCreateBulk struct {
	config
	err      error
	builders []*CouponCreate
}

// Save creates the Coupon entities in the database.
func (ccb *CouponCreateBulk) Save(ctx context.Context) ([]*Coupon, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Coupon, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CouponMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CouponCreateBulk) SaveX(ctx context.Context) []*Coupon {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CouponCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CouponCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
