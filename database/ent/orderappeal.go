// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/orderappeal"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// OrderAppeal is the model entity for the OrderAppeal schema.
type OrderAppeal struct {
	config `json:"-"`
	// ID of the ent.
	// ID
	ID int `json:"id,omitempty"`
	// 景区ID
	ScenicAreaID int `json:"scenic_area_id,omitempty"`
	// 用户ID
	UserID int `json:"user_id,omitempty"`
	// 订单ID
	OrderID int `json:"order_id,omitempty"`
	// 订单编号
	OrderNo string `json:"order_no,omitempty"`
	// 1-多付款 2-其他
	Type int `json:"type,omitempty"`
	// 停车点ID
	EndStopID int `json:"end_stop_id,omitempty"`
	// 停车点图片
	EndStopImageID int `json:"end_stop_image_id,omitempty"`
	// 申述状态(1-申述中、2-申诉成功、3-申诉失败、4-已取消)
	State int `json:"state,omitempty"`
	// 退款金额
	RefundAmount int `json:"refund_amount,omitempty"`
	// 申诉内容
	UserComment string `json:"user_comment,omitempty"`
	// 审核备注
	ReviewComment string `json:"review_comment,omitempty"`
	// 退款时间
	RefundTime *time.Time `json:"refund_time,omitempty"`
	// 审核时间
	ReviewTime *time.Time `json:"review_time,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime   time.Time `json:"update_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderAppeal) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case orderappeal.FieldID, orderappeal.FieldScenicAreaID, orderappeal.FieldUserID, orderappeal.FieldOrderID, orderappeal.FieldType, orderappeal.FieldEndStopID, orderappeal.FieldEndStopImageID, orderappeal.FieldState, orderappeal.FieldRefundAmount:
			values[i] = new(sql.NullInt64)
		case orderappeal.FieldOrderNo, orderappeal.FieldUserComment, orderappeal.FieldReviewComment:
			values[i] = new(sql.NullString)
		case orderappeal.FieldRefundTime, orderappeal.FieldReviewTime, orderappeal.FieldCreateTime, orderappeal.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderAppeal fields.
func (oa *OrderAppeal) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orderappeal.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			oa.ID = int(value.Int64)
		case orderappeal.FieldScenicAreaID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field scenic_area_id", values[i])
			} else if value.Valid {
				oa.ScenicAreaID = int(value.Int64)
			}
		case orderappeal.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				oa.UserID = int(value.Int64)
			}
		case orderappeal.FieldOrderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value.Valid {
				oa.OrderID = int(value.Int64)
			}
		case orderappeal.FieldOrderNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field order_no", values[i])
			} else if value.Valid {
				oa.OrderNo = value.String
			}
		case orderappeal.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				oa.Type = int(value.Int64)
			}
		case orderappeal.FieldEndStopID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field end_stop_id", values[i])
			} else if value.Valid {
				oa.EndStopID = int(value.Int64)
			}
		case orderappeal.FieldEndStopImageID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field end_stop_image_id", values[i])
			} else if value.Valid {
				oa.EndStopImageID = int(value.Int64)
			}
		case orderappeal.FieldState:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				oa.State = int(value.Int64)
			}
		case orderappeal.FieldRefundAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field refund_amount", values[i])
			} else if value.Valid {
				oa.RefundAmount = int(value.Int64)
			}
		case orderappeal.FieldUserComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_comment", values[i])
			} else if value.Valid {
				oa.UserComment = value.String
			}
		case orderappeal.FieldReviewComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field review_comment", values[i])
			} else if value.Valid {
				oa.ReviewComment = value.String
			}
		case orderappeal.FieldRefundTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field refund_time", values[i])
			} else if value.Valid {
				oa.RefundTime = new(time.Time)
				*oa.RefundTime = value.Time
			}
		case orderappeal.FieldReviewTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field review_time", values[i])
			} else if value.Valid {
				oa.ReviewTime = new(time.Time)
				*oa.ReviewTime = value.Time
			}
		case orderappeal.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				oa.CreateTime = value.Time
			}
		case orderappeal.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				oa.UpdateTime = value.Time
			}
		default:
			oa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OrderAppeal.
// This includes values selected through modifiers, order, etc.
func (oa *OrderAppeal) Value(name string) (ent.Value, error) {
	return oa.selectValues.Get(name)
}

// Update returns a builder for updating this OrderAppeal.
// Note that you need to call OrderAppeal.Unwrap() before calling this method if this OrderAppeal
// was returned from a transaction, and the transaction was committed or rolled back.
func (oa *OrderAppeal) Update() *OrderAppealUpdateOne {
	return NewOrderAppealClient(oa.config).UpdateOne(oa)
}

// Unwrap unwraps the OrderAppeal entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (oa *OrderAppeal) Unwrap() *OrderAppeal {
	_tx, ok := oa.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrderAppeal is not a transactional entity")
	}
	oa.config.driver = _tx.drv
	return oa
}

// String implements the fmt.Stringer.
func (oa *OrderAppeal) String() string {
	var builder strings.Builder
	builder.WriteString("OrderAppeal(")
	builder.WriteString(fmt.Sprintf("id=%v, ", oa.ID))
	builder.WriteString("scenic_area_id=")
	builder.WriteString(fmt.Sprintf("%v", oa.ScenicAreaID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", oa.UserID))
	builder.WriteString(", ")
	builder.WriteString("order_id=")
	builder.WriteString(fmt.Sprintf("%v", oa.OrderID))
	builder.WriteString(", ")
	builder.WriteString("order_no=")
	builder.WriteString(oa.OrderNo)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", oa.Type))
	builder.WriteString(", ")
	builder.WriteString("end_stop_id=")
	builder.WriteString(fmt.Sprintf("%v", oa.EndStopID))
	builder.WriteString(", ")
	builder.WriteString("end_stop_image_id=")
	builder.WriteString(fmt.Sprintf("%v", oa.EndStopImageID))
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(fmt.Sprintf("%v", oa.State))
	builder.WriteString(", ")
	builder.WriteString("refund_amount=")
	builder.WriteString(fmt.Sprintf("%v", oa.RefundAmount))
	builder.WriteString(", ")
	builder.WriteString("user_comment=")
	builder.WriteString(oa.UserComment)
	builder.WriteString(", ")
	builder.WriteString("review_comment=")
	builder.WriteString(oa.ReviewComment)
	builder.WriteString(", ")
	if v := oa.RefundTime; v != nil {
		builder.WriteString("refund_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := oa.ReviewTime; v != nil {
		builder.WriteString("review_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(oa.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(oa.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// OrderAppeals is a parsable slice of OrderAppeal.
type OrderAppeals []*OrderAppeal
