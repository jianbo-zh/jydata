// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/carsflight"
	"github.com/jianbo-zh/jydata/database/schema/types"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarsFlightCreate is the builder for creating a CarsFlight entity.
type CarsFlightCreate struct {
	config
	mutation *CarsFlightMutation
	hooks    []Hook
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (cfc *CarsFlightCreate) SetScenicAreaID(i int) *CarsFlightCreate {
	cfc.mutation.SetScenicAreaID(i)
	return cfc
}

// SetFlightNo sets the "flight_no" field.
func (cfc *CarsFlightCreate) SetFlightNo(s string) *CarsFlightCreate {
	cfc.mutation.SetFlightNo(s)
	return cfc
}

// SetCarID sets the "car_id" field.
func (cfc *CarsFlightCreate) SetCarID(i int) *CarsFlightCreate {
	cfc.mutation.SetCarID(i)
	return cfc
}

// SetCarName sets the "car_name" field.
func (cfc *CarsFlightCreate) SetCarName(s string) *CarsFlightCreate {
	cfc.mutation.SetCarName(s)
	return cfc
}

// SetRouteID sets the "route_id" field.
func (cfc *CarsFlightCreate) SetRouteID(i int) *CarsFlightCreate {
	cfc.mutation.SetRouteID(i)
	return cfc
}

// SetRouteName sets the "route_name" field.
func (cfc *CarsFlightCreate) SetRouteName(s string) *CarsFlightCreate {
	cfc.mutation.SetRouteName(s)
	return cfc
}

// SetSeatsNum sets the "seats_num" field.
func (cfc *CarsFlightCreate) SetSeatsNum(i int) *CarsFlightCreate {
	cfc.mutation.SetSeatsNum(i)
	return cfc
}

// SetState sets the "state" field.
func (cfc *CarsFlightCreate) SetState(i int) *CarsFlightCreate {
	cfc.mutation.SetState(i)
	return cfc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (cfc *CarsFlightCreate) SetNillableState(i *int) *CarsFlightCreate {
	if i != nil {
		cfc.SetState(*i)
	}
	return cfc
}

// SetStopIds sets the "stop_ids" field.
func (cfc *CarsFlightCreate) SetStopIds(i []int) *CarsFlightCreate {
	cfc.mutation.SetStopIds(i)
	return cfc
}

// SetPassIds sets the "pass_ids" field.
func (cfc *CarsFlightCreate) SetPassIds(i []int) *CarsFlightCreate {
	cfc.mutation.SetPassIds(i)
	return cfc
}

// SetRemark sets the "remark" field.
func (cfc *CarsFlightCreate) SetRemark(s string) *CarsFlightCreate {
	cfc.mutation.SetRemark(s)
	return cfc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (cfc *CarsFlightCreate) SetNillableRemark(s *string) *CarsFlightCreate {
	if s != nil {
		cfc.SetRemark(*s)
	}
	return cfc
}

// SetStopStock sets the "stop_stock" field.
func (cfc *CarsFlightCreate) SetStopStock(ts []types.StopStock) *CarsFlightCreate {
	cfc.mutation.SetStopStock(ts)
	return cfc
}

// SetExtendYokeeID sets the "extend_yokee_id" field.
func (cfc *CarsFlightCreate) SetExtendYokeeID(i int) *CarsFlightCreate {
	cfc.mutation.SetExtendYokeeID(i)
	return cfc
}

// SetNillableExtendYokeeID sets the "extend_yokee_id" field if the given value is not nil.
func (cfc *CarsFlightCreate) SetNillableExtendYokeeID(i *int) *CarsFlightCreate {
	if i != nil {
		cfc.SetExtendYokeeID(*i)
	}
	return cfc
}

// SetDepartureTime sets the "departure_time" field.
func (cfc *CarsFlightCreate) SetDepartureTime(t time.Time) *CarsFlightCreate {
	cfc.mutation.SetDepartureTime(t)
	return cfc
}

// SetNillableDepartureTime sets the "departure_time" field if the given value is not nil.
func (cfc *CarsFlightCreate) SetNillableDepartureTime(t *time.Time) *CarsFlightCreate {
	if t != nil {
		cfc.SetDepartureTime(*t)
	}
	return cfc
}

// SetFinishTime sets the "finish_time" field.
func (cfc *CarsFlightCreate) SetFinishTime(t time.Time) *CarsFlightCreate {
	cfc.mutation.SetFinishTime(t)
	return cfc
}

// SetNillableFinishTime sets the "finish_time" field if the given value is not nil.
func (cfc *CarsFlightCreate) SetNillableFinishTime(t *time.Time) *CarsFlightCreate {
	if t != nil {
		cfc.SetFinishTime(*t)
	}
	return cfc
}

// SetCreateTime sets the "create_time" field.
func (cfc *CarsFlightCreate) SetCreateTime(t time.Time) *CarsFlightCreate {
	cfc.mutation.SetCreateTime(t)
	return cfc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (cfc *CarsFlightCreate) SetNillableCreateTime(t *time.Time) *CarsFlightCreate {
	if t != nil {
		cfc.SetCreateTime(*t)
	}
	return cfc
}

// SetUpdateTime sets the "update_time" field.
func (cfc *CarsFlightCreate) SetUpdateTime(t time.Time) *CarsFlightCreate {
	cfc.mutation.SetUpdateTime(t)
	return cfc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (cfc *CarsFlightCreate) SetNillableUpdateTime(t *time.Time) *CarsFlightCreate {
	if t != nil {
		cfc.SetUpdateTime(*t)
	}
	return cfc
}

// SetID sets the "id" field.
func (cfc *CarsFlightCreate) SetID(i int) *CarsFlightCreate {
	cfc.mutation.SetID(i)
	return cfc
}

// Mutation returns the CarsFlightMutation object of the builder.
func (cfc *CarsFlightCreate) Mutation() *CarsFlightMutation {
	return cfc.mutation
}

// Save creates the CarsFlight in the database.
func (cfc *CarsFlightCreate) Save(ctx context.Context) (*CarsFlight, error) {
	cfc.defaults()
	return withHooks(ctx, cfc.sqlSave, cfc.mutation, cfc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cfc *CarsFlightCreate) SaveX(ctx context.Context) *CarsFlight {
	v, err := cfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cfc *CarsFlightCreate) Exec(ctx context.Context) error {
	_, err := cfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cfc *CarsFlightCreate) ExecX(ctx context.Context) {
	if err := cfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cfc *CarsFlightCreate) defaults() {
	if _, ok := cfc.mutation.State(); !ok {
		v := carsflight.DefaultState
		cfc.mutation.SetState(v)
	}
	if _, ok := cfc.mutation.Remark(); !ok {
		v := carsflight.DefaultRemark
		cfc.mutation.SetRemark(v)
	}
	if _, ok := cfc.mutation.CreateTime(); !ok {
		v := carsflight.DefaultCreateTime()
		cfc.mutation.SetCreateTime(v)
	}
	if _, ok := cfc.mutation.UpdateTime(); !ok {
		v := carsflight.DefaultUpdateTime()
		cfc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cfc *CarsFlightCreate) check() error {
	if _, ok := cfc.mutation.ScenicAreaID(); !ok {
		return &ValidationError{Name: "scenic_area_id", err: errors.New(`ent: missing required field "CarsFlight.scenic_area_id"`)}
	}
	if _, ok := cfc.mutation.FlightNo(); !ok {
		return &ValidationError{Name: "flight_no", err: errors.New(`ent: missing required field "CarsFlight.flight_no"`)}
	}
	if _, ok := cfc.mutation.CarID(); !ok {
		return &ValidationError{Name: "car_id", err: errors.New(`ent: missing required field "CarsFlight.car_id"`)}
	}
	if _, ok := cfc.mutation.CarName(); !ok {
		return &ValidationError{Name: "car_name", err: errors.New(`ent: missing required field "CarsFlight.car_name"`)}
	}
	if _, ok := cfc.mutation.RouteID(); !ok {
		return &ValidationError{Name: "route_id", err: errors.New(`ent: missing required field "CarsFlight.route_id"`)}
	}
	if _, ok := cfc.mutation.RouteName(); !ok {
		return &ValidationError{Name: "route_name", err: errors.New(`ent: missing required field "CarsFlight.route_name"`)}
	}
	if _, ok := cfc.mutation.SeatsNum(); !ok {
		return &ValidationError{Name: "seats_num", err: errors.New(`ent: missing required field "CarsFlight.seats_num"`)}
	}
	if _, ok := cfc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "CarsFlight.state"`)}
	}
	if _, ok := cfc.mutation.Remark(); !ok {
		return &ValidationError{Name: "remark", err: errors.New(`ent: missing required field "CarsFlight.remark"`)}
	}
	if _, ok := cfc.mutation.StopStock(); !ok {
		return &ValidationError{Name: "stop_stock", err: errors.New(`ent: missing required field "CarsFlight.stop_stock"`)}
	}
	if _, ok := cfc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "CarsFlight.create_time"`)}
	}
	if _, ok := cfc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "CarsFlight.update_time"`)}
	}
	return nil
}

func (cfc *CarsFlightCreate) sqlSave(ctx context.Context) (*CarsFlight, error) {
	if err := cfc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	cfc.mutation.id = &_node.ID
	cfc.mutation.done = true
	return _node, nil
}

func (cfc *CarsFlightCreate) createSpec() (*CarsFlight, *sqlgraph.CreateSpec) {
	var (
		_node = &CarsFlight{config: cfc.config}
		_spec = sqlgraph.NewCreateSpec(carsflight.Table, sqlgraph.NewFieldSpec(carsflight.FieldID, field.TypeInt))
	)
	if id, ok := cfc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cfc.mutation.ScenicAreaID(); ok {
		_spec.SetField(carsflight.FieldScenicAreaID, field.TypeInt, value)
		_node.ScenicAreaID = value
	}
	if value, ok := cfc.mutation.FlightNo(); ok {
		_spec.SetField(carsflight.FieldFlightNo, field.TypeString, value)
		_node.FlightNo = value
	}
	if value, ok := cfc.mutation.CarID(); ok {
		_spec.SetField(carsflight.FieldCarID, field.TypeInt, value)
		_node.CarID = value
	}
	if value, ok := cfc.mutation.CarName(); ok {
		_spec.SetField(carsflight.FieldCarName, field.TypeString, value)
		_node.CarName = value
	}
	if value, ok := cfc.mutation.RouteID(); ok {
		_spec.SetField(carsflight.FieldRouteID, field.TypeInt, value)
		_node.RouteID = value
	}
	if value, ok := cfc.mutation.RouteName(); ok {
		_spec.SetField(carsflight.FieldRouteName, field.TypeString, value)
		_node.RouteName = value
	}
	if value, ok := cfc.mutation.SeatsNum(); ok {
		_spec.SetField(carsflight.FieldSeatsNum, field.TypeInt, value)
		_node.SeatsNum = value
	}
	if value, ok := cfc.mutation.State(); ok {
		_spec.SetField(carsflight.FieldState, field.TypeInt, value)
		_node.State = value
	}
	if value, ok := cfc.mutation.StopIds(); ok {
		_spec.SetField(carsflight.FieldStopIds, field.TypeJSON, value)
		_node.StopIds = value
	}
	if value, ok := cfc.mutation.PassIds(); ok {
		_spec.SetField(carsflight.FieldPassIds, field.TypeJSON, value)
		_node.PassIds = value
	}
	if value, ok := cfc.mutation.Remark(); ok {
		_spec.SetField(carsflight.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := cfc.mutation.StopStock(); ok {
		_spec.SetField(carsflight.FieldStopStock, field.TypeJSON, value)
		_node.StopStock = value
	}
	if value, ok := cfc.mutation.ExtendYokeeID(); ok {
		_spec.SetField(carsflight.FieldExtendYokeeID, field.TypeInt, value)
		_node.ExtendYokeeID = &value
	}
	if value, ok := cfc.mutation.DepartureTime(); ok {
		_spec.SetField(carsflight.FieldDepartureTime, field.TypeTime, value)
		_node.DepartureTime = &value
	}
	if value, ok := cfc.mutation.FinishTime(); ok {
		_spec.SetField(carsflight.FieldFinishTime, field.TypeTime, value)
		_node.FinishTime = &value
	}
	if value, ok := cfc.mutation.CreateTime(); ok {
		_spec.SetField(carsflight.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := cfc.mutation.UpdateTime(); ok {
		_spec.SetField(carsflight.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// CarsFlightCreateBulk is the builder for creating many CarsFlight entities in bulk.
type CarsFlightCreateBulk struct {
	config
	err      error
	builders []*CarsFlightCreate
}

// Save creates the CarsFlight entities in the database.
func (cfcb *CarsFlightCreateBulk) Save(ctx context.Context) ([]*CarsFlight, error) {
	if cfcb.err != nil {
		return nil, cfcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cfcb.builders))
	nodes := make([]*CarsFlight, len(cfcb.builders))
	mutators := make([]Mutator, len(cfcb.builders))
	for i := range cfcb.builders {
		func(i int, root context.Context) {
			builder := cfcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CarsFlightMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cfcb *CarsFlightCreateBulk) SaveX(ctx context.Context) []*CarsFlight {
	v, err := cfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cfcb *CarsFlightCreateBulk) Exec(ctx context.Context) error {
	_, err := cfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cfcb *CarsFlightCreateBulk) ExecX(ctx context.Context) {
	if err := cfcb.Exec(ctx); err != nil {
		panic(err)
	}
}
