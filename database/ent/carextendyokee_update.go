// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/carextendyokee"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarExtendYokeeUpdate is the builder for updating CarExtendYokee entities.
type CarExtendYokeeUpdate struct {
	config
	hooks    []Hook
	mutation *CarExtendYokeeMutation
}

// Where appends a list predicates to the CarExtendYokeeUpdate builder.
func (ceyu *CarExtendYokeeUpdate) Where(ps ...predicate.CarExtendYokee) *CarExtendYokeeUpdate {
	ceyu.mutation.Where(ps...)
	return ceyu
}

// SetDeleteTime sets the "delete_time" field.
func (ceyu *CarExtendYokeeUpdate) SetDeleteTime(t time.Time) *CarExtendYokeeUpdate {
	ceyu.mutation.SetDeleteTime(t)
	return ceyu
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (ceyu *CarExtendYokeeUpdate) SetNillableDeleteTime(t *time.Time) *CarExtendYokeeUpdate {
	if t != nil {
		ceyu.SetDeleteTime(*t)
	}
	return ceyu
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (ceyu *CarExtendYokeeUpdate) ClearDeleteTime() *CarExtendYokeeUpdate {
	ceyu.mutation.ClearDeleteTime()
	return ceyu
}

// SetCarID sets the "car_id" field.
func (ceyu *CarExtendYokeeUpdate) SetCarID(i int) *CarExtendYokeeUpdate {
	ceyu.mutation.ResetCarID()
	ceyu.mutation.SetCarID(i)
	return ceyu
}

// SetNillableCarID sets the "car_id" field if the given value is not nil.
func (ceyu *CarExtendYokeeUpdate) SetNillableCarID(i *int) *CarExtendYokeeUpdate {
	if i != nil {
		ceyu.SetCarID(*i)
	}
	return ceyu
}

// AddCarID adds i to the "car_id" field.
func (ceyu *CarExtendYokeeUpdate) AddCarID(i int) *CarExtendYokeeUpdate {
	ceyu.mutation.AddCarID(i)
	return ceyu
}

// SetYokeeVehicleID sets the "yokee_vehicle_id" field.
func (ceyu *CarExtendYokeeUpdate) SetYokeeVehicleID(i int) *CarExtendYokeeUpdate {
	ceyu.mutation.ResetYokeeVehicleID()
	ceyu.mutation.SetYokeeVehicleID(i)
	return ceyu
}

// SetNillableYokeeVehicleID sets the "yokee_vehicle_id" field if the given value is not nil.
func (ceyu *CarExtendYokeeUpdate) SetNillableYokeeVehicleID(i *int) *CarExtendYokeeUpdate {
	if i != nil {
		ceyu.SetYokeeVehicleID(*i)
	}
	return ceyu
}

// AddYokeeVehicleID adds i to the "yokee_vehicle_id" field.
func (ceyu *CarExtendYokeeUpdate) AddYokeeVehicleID(i int) *CarExtendYokeeUpdate {
	ceyu.mutation.AddYokeeVehicleID(i)
	return ceyu
}

// SetYokeeVehicleName sets the "yokee_vehicle_name" field.
func (ceyu *CarExtendYokeeUpdate) SetYokeeVehicleName(s string) *CarExtendYokeeUpdate {
	ceyu.mutation.SetYokeeVehicleName(s)
	return ceyu
}

// SetNillableYokeeVehicleName sets the "yokee_vehicle_name" field if the given value is not nil.
func (ceyu *CarExtendYokeeUpdate) SetNillableYokeeVehicleName(s *string) *CarExtendYokeeUpdate {
	if s != nil {
		ceyu.SetYokeeVehicleName(*s)
	}
	return ceyu
}

// SetUpdateTime sets the "update_time" field.
func (ceyu *CarExtendYokeeUpdate) SetUpdateTime(t time.Time) *CarExtendYokeeUpdate {
	ceyu.mutation.SetUpdateTime(t)
	return ceyu
}

// Mutation returns the CarExtendYokeeMutation object of the builder.
func (ceyu *CarExtendYokeeUpdate) Mutation() *CarExtendYokeeMutation {
	return ceyu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ceyu *CarExtendYokeeUpdate) Save(ctx context.Context) (int, error) {
	if err := ceyu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, ceyu.sqlSave, ceyu.mutation, ceyu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ceyu *CarExtendYokeeUpdate) SaveX(ctx context.Context) int {
	affected, err := ceyu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ceyu *CarExtendYokeeUpdate) Exec(ctx context.Context) error {
	_, err := ceyu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ceyu *CarExtendYokeeUpdate) ExecX(ctx context.Context) {
	if err := ceyu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ceyu *CarExtendYokeeUpdate) defaults() error {
	if _, ok := ceyu.mutation.UpdateTime(); !ok {
		if carextendyokee.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized carextendyokee.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := carextendyokee.UpdateDefaultUpdateTime()
		ceyu.mutation.SetUpdateTime(v)
	}
	return nil
}

func (ceyu *CarExtendYokeeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(carextendyokee.Table, carextendyokee.Columns, sqlgraph.NewFieldSpec(carextendyokee.FieldID, field.TypeInt))
	if ps := ceyu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ceyu.mutation.DeleteTime(); ok {
		_spec.SetField(carextendyokee.FieldDeleteTime, field.TypeTime, value)
	}
	if ceyu.mutation.DeleteTimeCleared() {
		_spec.ClearField(carextendyokee.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := ceyu.mutation.CarID(); ok {
		_spec.SetField(carextendyokee.FieldCarID, field.TypeInt, value)
	}
	if value, ok := ceyu.mutation.AddedCarID(); ok {
		_spec.AddField(carextendyokee.FieldCarID, field.TypeInt, value)
	}
	if value, ok := ceyu.mutation.YokeeVehicleID(); ok {
		_spec.SetField(carextendyokee.FieldYokeeVehicleID, field.TypeInt, value)
	}
	if value, ok := ceyu.mutation.AddedYokeeVehicleID(); ok {
		_spec.AddField(carextendyokee.FieldYokeeVehicleID, field.TypeInt, value)
	}
	if value, ok := ceyu.mutation.YokeeVehicleName(); ok {
		_spec.SetField(carextendyokee.FieldYokeeVehicleName, field.TypeString, value)
	}
	if value, ok := ceyu.mutation.UpdateTime(); ok {
		_spec.SetField(carextendyokee.FieldUpdateTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ceyu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carextendyokee.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ceyu.mutation.done = true
	return n, nil
}

// CarExtendYokeeUpdateOne is the builder for updating a single CarExtendYokee entity.
type CarExtendYokeeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CarExtendYokeeMutation
}

// SetDeleteTime sets the "delete_time" field.
func (ceyuo *CarExtendYokeeUpdateOne) SetDeleteTime(t time.Time) *CarExtendYokeeUpdateOne {
	ceyuo.mutation.SetDeleteTime(t)
	return ceyuo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (ceyuo *CarExtendYokeeUpdateOne) SetNillableDeleteTime(t *time.Time) *CarExtendYokeeUpdateOne {
	if t != nil {
		ceyuo.SetDeleteTime(*t)
	}
	return ceyuo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (ceyuo *CarExtendYokeeUpdateOne) ClearDeleteTime() *CarExtendYokeeUpdateOne {
	ceyuo.mutation.ClearDeleteTime()
	return ceyuo
}

// SetCarID sets the "car_id" field.
func (ceyuo *CarExtendYokeeUpdateOne) SetCarID(i int) *CarExtendYokeeUpdateOne {
	ceyuo.mutation.ResetCarID()
	ceyuo.mutation.SetCarID(i)
	return ceyuo
}

// SetNillableCarID sets the "car_id" field if the given value is not nil.
func (ceyuo *CarExtendYokeeUpdateOne) SetNillableCarID(i *int) *CarExtendYokeeUpdateOne {
	if i != nil {
		ceyuo.SetCarID(*i)
	}
	return ceyuo
}

// AddCarID adds i to the "car_id" field.
func (ceyuo *CarExtendYokeeUpdateOne) AddCarID(i int) *CarExtendYokeeUpdateOne {
	ceyuo.mutation.AddCarID(i)
	return ceyuo
}

// SetYokeeVehicleID sets the "yokee_vehicle_id" field.
func (ceyuo *CarExtendYokeeUpdateOne) SetYokeeVehicleID(i int) *CarExtendYokeeUpdateOne {
	ceyuo.mutation.ResetYokeeVehicleID()
	ceyuo.mutation.SetYokeeVehicleID(i)
	return ceyuo
}

// SetNillableYokeeVehicleID sets the "yokee_vehicle_id" field if the given value is not nil.
func (ceyuo *CarExtendYokeeUpdateOne) SetNillableYokeeVehicleID(i *int) *CarExtendYokeeUpdateOne {
	if i != nil {
		ceyuo.SetYokeeVehicleID(*i)
	}
	return ceyuo
}

// AddYokeeVehicleID adds i to the "yokee_vehicle_id" field.
func (ceyuo *CarExtendYokeeUpdateOne) AddYokeeVehicleID(i int) *CarExtendYokeeUpdateOne {
	ceyuo.mutation.AddYokeeVehicleID(i)
	return ceyuo
}

// SetYokeeVehicleName sets the "yokee_vehicle_name" field.
func (ceyuo *CarExtendYokeeUpdateOne) SetYokeeVehicleName(s string) *CarExtendYokeeUpdateOne {
	ceyuo.mutation.SetYokeeVehicleName(s)
	return ceyuo
}

// SetNillableYokeeVehicleName sets the "yokee_vehicle_name" field if the given value is not nil.
func (ceyuo *CarExtendYokeeUpdateOne) SetNillableYokeeVehicleName(s *string) *CarExtendYokeeUpdateOne {
	if s != nil {
		ceyuo.SetYokeeVehicleName(*s)
	}
	return ceyuo
}

// SetUpdateTime sets the "update_time" field.
func (ceyuo *CarExtendYokeeUpdateOne) SetUpdateTime(t time.Time) *CarExtendYokeeUpdateOne {
	ceyuo.mutation.SetUpdateTime(t)
	return ceyuo
}

// Mutation returns the CarExtendYokeeMutation object of the builder.
func (ceyuo *CarExtendYokeeUpdateOne) Mutation() *CarExtendYokeeMutation {
	return ceyuo.mutation
}

// Where appends a list predicates to the CarExtendYokeeUpdate builder.
func (ceyuo *CarExtendYokeeUpdateOne) Where(ps ...predicate.CarExtendYokee) *CarExtendYokeeUpdateOne {
	ceyuo.mutation.Where(ps...)
	return ceyuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ceyuo *CarExtendYokeeUpdateOne) Select(field string, fields ...string) *CarExtendYokeeUpdateOne {
	ceyuo.fields = append([]string{field}, fields...)
	return ceyuo
}

// Save executes the query and returns the updated CarExtendYokee entity.
func (ceyuo *CarExtendYokeeUpdateOne) Save(ctx context.Context) (*CarExtendYokee, error) {
	if err := ceyuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ceyuo.sqlSave, ceyuo.mutation, ceyuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ceyuo *CarExtendYokeeUpdateOne) SaveX(ctx context.Context) *CarExtendYokee {
	node, err := ceyuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ceyuo *CarExtendYokeeUpdateOne) Exec(ctx context.Context) error {
	_, err := ceyuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ceyuo *CarExtendYokeeUpdateOne) ExecX(ctx context.Context) {
	if err := ceyuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ceyuo *CarExtendYokeeUpdateOne) defaults() error {
	if _, ok := ceyuo.mutation.UpdateTime(); !ok {
		if carextendyokee.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized carextendyokee.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := carextendyokee.UpdateDefaultUpdateTime()
		ceyuo.mutation.SetUpdateTime(v)
	}
	return nil
}

func (ceyuo *CarExtendYokeeUpdateOne) sqlSave(ctx context.Context) (_node *CarExtendYokee, err error) {
	_spec := sqlgraph.NewUpdateSpec(carextendyokee.Table, carextendyokee.Columns, sqlgraph.NewFieldSpec(carextendyokee.FieldID, field.TypeInt))
	id, ok := ceyuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CarExtendYokee.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ceyuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carextendyokee.FieldID)
		for _, f := range fields {
			if !carextendyokee.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != carextendyokee.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ceyuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ceyuo.mutation.DeleteTime(); ok {
		_spec.SetField(carextendyokee.FieldDeleteTime, field.TypeTime, value)
	}
	if ceyuo.mutation.DeleteTimeCleared() {
		_spec.ClearField(carextendyokee.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := ceyuo.mutation.CarID(); ok {
		_spec.SetField(carextendyokee.FieldCarID, field.TypeInt, value)
	}
	if value, ok := ceyuo.mutation.AddedCarID(); ok {
		_spec.AddField(carextendyokee.FieldCarID, field.TypeInt, value)
	}
	if value, ok := ceyuo.mutation.YokeeVehicleID(); ok {
		_spec.SetField(carextendyokee.FieldYokeeVehicleID, field.TypeInt, value)
	}
	if value, ok := ceyuo.mutation.AddedYokeeVehicleID(); ok {
		_spec.AddField(carextendyokee.FieldYokeeVehicleID, field.TypeInt, value)
	}
	if value, ok := ceyuo.mutation.YokeeVehicleName(); ok {
		_spec.SetField(carextendyokee.FieldYokeeVehicleName, field.TypeString, value)
	}
	if value, ok := ceyuo.mutation.UpdateTime(); ok {
		_spec.SetField(carextendyokee.FieldUpdateTime, field.TypeTime, value)
	}
	_node = &CarExtendYokee{config: ceyuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ceyuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carextendyokee.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ceyuo.mutation.done = true
	return _node, nil
}
