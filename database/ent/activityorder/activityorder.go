// Code generated by ent, DO NOT EDIT.

package activityorder

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the activityorder type in the database.
	Label = "activity_order"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOrderNo holds the string denoting the order_no field in the database.
	FieldOrderNo = "order_no"
	// FieldWxTxID holds the string denoting the wx_tx_id field in the database.
	FieldWxTxID = "wx_tx_id"
	// FieldScenicAreaID holds the string denoting the scenic_area_id field in the database.
	FieldScenicAreaID = "scenic_area_id"
	// FieldMchID holds the string denoting the mch_id field in the database.
	FieldMchID = "mch_id"
	// FieldScenicAreaName holds the string denoting the scenic_area_name field in the database.
	FieldScenicAreaName = "scenic_area_name"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldOpenID holds the string denoting the open_id field in the database.
	FieldOpenID = "open_id"
	// FieldOrderAmount holds the string denoting the order_amount field in the database.
	FieldOrderAmount = "order_amount"
	// FieldOrderState holds the string denoting the order_state field in the database.
	FieldOrderState = "order_state"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldPaidTime holds the string denoting the paid_time field in the database.
	FieldPaidTime = "paid_time"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// Table holds the table name of the activityorder in the database.
	Table = "activity_orders"
)

// Columns holds all SQL columns for activityorder fields.
var Columns = []string{
	FieldID,
	FieldOrderNo,
	FieldWxTxID,
	FieldScenicAreaID,
	FieldMchID,
	FieldScenicAreaName,
	FieldUserID,
	FieldOpenID,
	FieldOrderAmount,
	FieldOrderState,
	FieldRemark,
	FieldPaidTime,
	FieldCreateTime,
	FieldUpdateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultWxTxID holds the default value on creation for the "wx_tx_id" field.
	DefaultWxTxID string
	// DefaultMchID holds the default value on creation for the "mch_id" field.
	DefaultMchID string
	// DefaultOrderAmount holds the default value on creation for the "order_amount" field.
	DefaultOrderAmount int
	// DefaultOrderState holds the default value on creation for the "order_state" field.
	DefaultOrderState int
	// DefaultRemark holds the default value on creation for the "remark" field.
	DefaultRemark string
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)

// OrderOption defines the ordering options for the ActivityOrder queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByOrderNo orders the results by the order_no field.
func ByOrderNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderNo, opts...).ToFunc()
}

// ByWxTxID orders the results by the wx_tx_id field.
func ByWxTxID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWxTxID, opts...).ToFunc()
}

// ByScenicAreaID orders the results by the scenic_area_id field.
func ByScenicAreaID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScenicAreaID, opts...).ToFunc()
}

// ByMchID orders the results by the mch_id field.
func ByMchID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMchID, opts...).ToFunc()
}

// ByScenicAreaName orders the results by the scenic_area_name field.
func ByScenicAreaName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScenicAreaName, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByOpenID orders the results by the open_id field.
func ByOpenID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOpenID, opts...).ToFunc()
}

// ByOrderAmount orders the results by the order_amount field.
func ByOrderAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderAmount, opts...).ToFunc()
}

// ByOrderState orders the results by the order_state field.
func ByOrderState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderState, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByPaidTime orders the results by the paid_time field.
func ByPaidTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaidTime, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}
