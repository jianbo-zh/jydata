// Code generated by ent, DO NOT EDIT.

package orderappeal

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the orderappeal type in the database.
	Label = "order_appeal"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldScenicAreaID holds the string denoting the scenic_area_id field in the database.
	FieldScenicAreaID = "scenic_area_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldOrderID holds the string denoting the order_id field in the database.
	FieldOrderID = "order_id"
	// FieldOrderNo holds the string denoting the order_no field in the database.
	FieldOrderNo = "order_no"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldEndStopID holds the string denoting the end_stop_id field in the database.
	FieldEndStopID = "end_stop_id"
	// FieldEndStopIndex holds the string denoting the end_stop_index field in the database.
	FieldEndStopIndex = "end_stop_index"
	// FieldEndStopImageID holds the string denoting the end_stop_image_id field in the database.
	FieldEndStopImageID = "end_stop_image_id"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldRefundAmount holds the string denoting the refund_amount field in the database.
	FieldRefundAmount = "refund_amount"
	// FieldUserComment holds the string denoting the user_comment field in the database.
	FieldUserComment = "user_comment"
	// FieldReviewComment holds the string denoting the review_comment field in the database.
	FieldReviewComment = "review_comment"
	// FieldRefundTime holds the string denoting the refund_time field in the database.
	FieldRefundTime = "refund_time"
	// FieldReviewTime holds the string denoting the review_time field in the database.
	FieldReviewTime = "review_time"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// Table holds the table name of the orderappeal in the database.
	Table = "order_appeals"
)

// Columns holds all SQL columns for orderappeal fields.
var Columns = []string{
	FieldID,
	FieldScenicAreaID,
	FieldUserID,
	FieldOrderID,
	FieldOrderNo,
	FieldType,
	FieldEndStopID,
	FieldEndStopIndex,
	FieldEndStopImageID,
	FieldState,
	FieldRefundAmount,
	FieldUserComment,
	FieldReviewComment,
	FieldRefundTime,
	FieldReviewTime,
	FieldCreateTime,
	FieldUpdateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultType holds the default value on creation for the "type" field.
	DefaultType int
	// DefaultEndStopID holds the default value on creation for the "end_stop_id" field.
	DefaultEndStopID int
	// DefaultEndStopIndex holds the default value on creation for the "end_stop_index" field.
	DefaultEndStopIndex int
	// DefaultEndStopImageID holds the default value on creation for the "end_stop_image_id" field.
	DefaultEndStopImageID int
	// DefaultState holds the default value on creation for the "state" field.
	DefaultState int
	// DefaultRefundAmount holds the default value on creation for the "refund_amount" field.
	DefaultRefundAmount int
	// DefaultUserComment holds the default value on creation for the "user_comment" field.
	DefaultUserComment string
	// DefaultReviewComment holds the default value on creation for the "review_comment" field.
	DefaultReviewComment string
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)

// OrderOption defines the ordering options for the OrderAppeal queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByScenicAreaID orders the results by the scenic_area_id field.
func ByScenicAreaID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScenicAreaID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByOrderID orders the results by the order_id field.
func ByOrderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderID, opts...).ToFunc()
}

// ByOrderNo orders the results by the order_no field.
func ByOrderNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderNo, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByEndStopID orders the results by the end_stop_id field.
func ByEndStopID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndStopID, opts...).ToFunc()
}

// ByEndStopIndex orders the results by the end_stop_index field.
func ByEndStopIndex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndStopIndex, opts...).ToFunc()
}

// ByEndStopImageID orders the results by the end_stop_image_id field.
func ByEndStopImageID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndStopImageID, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByRefundAmount orders the results by the refund_amount field.
func ByRefundAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRefundAmount, opts...).ToFunc()
}

// ByUserComment orders the results by the user_comment field.
func ByUserComment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserComment, opts...).ToFunc()
}

// ByReviewComment orders the results by the review_comment field.
func ByReviewComment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReviewComment, opts...).ToFunc()
}

// ByRefundTime orders the results by the refund_time field.
func ByRefundTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRefundTime, opts...).ToFunc()
}

// ByReviewTime orders the results by the review_time field.
func ByReviewTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReviewTime, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}
