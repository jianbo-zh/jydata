// Code generated by ent, DO NOT EDIT.

package orderbilling

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the orderbilling type in the database.
	Label = "order_billing"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldOrderID holds the string denoting the order_id field in the database.
	FieldOrderID = "order_id"
	// FieldStartTimePrice holds the string denoting the start_time_price field in the database.
	FieldStartTimePrice = "start_time_price"
	// FieldStartTimeUnit holds the string denoting the start_time_unit field in the database.
	FieldStartTimeUnit = "start_time_unit"
	// FieldNormalTimePrice holds the string denoting the normal_time_price field in the database.
	FieldNormalTimePrice = "normal_time_price"
	// FieldNormalTimeUnit holds the string denoting the normal_time_unit field in the database.
	FieldNormalTimeUnit = "normal_time_unit"
	// FieldCumulativeSecond holds the string denoting the cumulative_second field in the database.
	FieldCumulativeSecond = "cumulative_second"
	// FieldCumulativeMeter holds the string denoting the cumulative_meter field in the database.
	FieldCumulativeMeter = "cumulative_meter"
	// FieldTicketCount holds the string denoting the ticket_count field in the database.
	FieldTicketCount = "ticket_count"
	// FieldCumulativeStop holds the string denoting the cumulative_stop field in the database.
	FieldCumulativeStop = "cumulative_stop"
	// FieldStartStopPrice holds the string denoting the start_stop_price field in the database.
	FieldStartStopPrice = "start_stop_price"
	// FieldStartStopUnit holds the string denoting the start_stop_unit field in the database.
	FieldStartStopUnit = "start_stop_unit"
	// FieldNormalStopPrice holds the string denoting the normal_stop_price field in the database.
	FieldNormalStopPrice = "normal_stop_price"
	// FieldNormalStopUnit holds the string denoting the normal_stop_unit field in the database.
	FieldNormalStopUnit = "normal_stop_unit"
	// FieldCouponID holds the string denoting the coupon_id field in the database.
	FieldCouponID = "coupon_id"
	// FieldCouponLimitAmount holds the string denoting the coupon_limit_amount field in the database.
	FieldCouponLimitAmount = "coupon_limit_amount"
	// FieldCouponDeductionAmount holds the string denoting the coupon_deduction_amount field in the database.
	FieldCouponDeductionAmount = "coupon_deduction_amount"
	// FieldCappedAmount holds the string denoting the capped_amount field in the database.
	FieldCappedAmount = "capped_amount"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldStartTime holds the string denoting the start_time field in the database.
	FieldStartTime = "start_time"
	// FieldFinishTime holds the string denoting the finish_time field in the database.
	FieldFinishTime = "finish_time"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// EdgeOrder holds the string denoting the order edge name in mutations.
	EdgeOrder = "order"
	// Table holds the table name of the orderbilling in the database.
	Table = "order_billings"
	// OrderTable is the table that holds the order relation/edge.
	OrderTable = "order_billings"
	// OrderInverseTable is the table name for the Order entity.
	// It exists in this package in order to avoid circular dependency with the "order" package.
	OrderInverseTable = "orders"
	// OrderColumn is the table column denoting the order relation/edge.
	OrderColumn = "order_id"
)

// Columns holds all SQL columns for orderbilling fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldOrderID,
	FieldStartTimePrice,
	FieldStartTimeUnit,
	FieldNormalTimePrice,
	FieldNormalTimeUnit,
	FieldCumulativeSecond,
	FieldCumulativeMeter,
	FieldTicketCount,
	FieldCumulativeStop,
	FieldStartStopPrice,
	FieldStartStopUnit,
	FieldNormalStopPrice,
	FieldNormalStopUnit,
	FieldCouponID,
	FieldCouponLimitAmount,
	FieldCouponDeductionAmount,
	FieldCappedAmount,
	FieldState,
	FieldStartTime,
	FieldFinishTime,
	FieldCreateTime,
	FieldUpdateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultType holds the default value on creation for the "type" field.
	DefaultType int
	// DefaultStartTimePrice holds the default value on creation for the "start_time_price" field.
	DefaultStartTimePrice int
	// DefaultStartTimeUnit holds the default value on creation for the "start_time_unit" field.
	DefaultStartTimeUnit int
	// DefaultNormalTimePrice holds the default value on creation for the "normal_time_price" field.
	DefaultNormalTimePrice int
	// DefaultNormalTimeUnit holds the default value on creation for the "normal_time_unit" field.
	DefaultNormalTimeUnit int
	// DefaultCumulativeSecond holds the default value on creation for the "cumulative_second" field.
	DefaultCumulativeSecond float64
	// DefaultCumulativeMeter holds the default value on creation for the "cumulative_meter" field.
	DefaultCumulativeMeter float64
	// DefaultTicketCount holds the default value on creation for the "ticket_count" field.
	DefaultTicketCount int
	// DefaultCumulativeStop holds the default value on creation for the "cumulative_stop" field.
	DefaultCumulativeStop int
	// DefaultStartStopPrice holds the default value on creation for the "start_stop_price" field.
	DefaultStartStopPrice int
	// DefaultStartStopUnit holds the default value on creation for the "start_stop_unit" field.
	DefaultStartStopUnit int
	// DefaultNormalStopPrice holds the default value on creation for the "normal_stop_price" field.
	DefaultNormalStopPrice int
	// DefaultNormalStopUnit holds the default value on creation for the "normal_stop_unit" field.
	DefaultNormalStopUnit int
	// DefaultCouponID holds the default value on creation for the "coupon_id" field.
	DefaultCouponID int
	// DefaultCouponLimitAmount holds the default value on creation for the "coupon_limit_amount" field.
	DefaultCouponLimitAmount int
	// DefaultCouponDeductionAmount holds the default value on creation for the "coupon_deduction_amount" field.
	DefaultCouponDeductionAmount int
	// DefaultCappedAmount holds the default value on creation for the "capped_amount" field.
	DefaultCappedAmount int
	// DefaultState holds the default value on creation for the "state" field.
	DefaultState int
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)

// OrderOption defines the ordering options for the OrderBilling queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByOrderID orders the results by the order_id field.
func ByOrderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderID, opts...).ToFunc()
}

// ByStartTimePrice orders the results by the start_time_price field.
func ByStartTimePrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartTimePrice, opts...).ToFunc()
}

// ByStartTimeUnit orders the results by the start_time_unit field.
func ByStartTimeUnit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartTimeUnit, opts...).ToFunc()
}

// ByNormalTimePrice orders the results by the normal_time_price field.
func ByNormalTimePrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNormalTimePrice, opts...).ToFunc()
}

// ByNormalTimeUnit orders the results by the normal_time_unit field.
func ByNormalTimeUnit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNormalTimeUnit, opts...).ToFunc()
}

// ByCumulativeSecond orders the results by the cumulative_second field.
func ByCumulativeSecond(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCumulativeSecond, opts...).ToFunc()
}

// ByCumulativeMeter orders the results by the cumulative_meter field.
func ByCumulativeMeter(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCumulativeMeter, opts...).ToFunc()
}

// ByTicketCount orders the results by the ticket_count field.
func ByTicketCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTicketCount, opts...).ToFunc()
}

// ByCumulativeStop orders the results by the cumulative_stop field.
func ByCumulativeStop(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCumulativeStop, opts...).ToFunc()
}

// ByStartStopPrice orders the results by the start_stop_price field.
func ByStartStopPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartStopPrice, opts...).ToFunc()
}

// ByStartStopUnit orders the results by the start_stop_unit field.
func ByStartStopUnit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartStopUnit, opts...).ToFunc()
}

// ByNormalStopPrice orders the results by the normal_stop_price field.
func ByNormalStopPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNormalStopPrice, opts...).ToFunc()
}

// ByNormalStopUnit orders the results by the normal_stop_unit field.
func ByNormalStopUnit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNormalStopUnit, opts...).ToFunc()
}

// ByCouponID orders the results by the coupon_id field.
func ByCouponID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCouponID, opts...).ToFunc()
}

// ByCouponLimitAmount orders the results by the coupon_limit_amount field.
func ByCouponLimitAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCouponLimitAmount, opts...).ToFunc()
}

// ByCouponDeductionAmount orders the results by the coupon_deduction_amount field.
func ByCouponDeductionAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCouponDeductionAmount, opts...).ToFunc()
}

// ByCappedAmount orders the results by the capped_amount field.
func ByCappedAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCappedAmount, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByStartTime orders the results by the start_time field.
func ByStartTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartTime, opts...).ToFunc()
}

// ByFinishTime orders the results by the finish_time field.
func ByFinishTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFinishTime, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByOrderField orders the results by order field.
func ByOrderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrderStep(), sql.OrderByField(field, opts...))
	}
}
func newOrderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, OrderTable, OrderColumn),
	)
}
