// Code generated by ent, DO NOT EDIT.

package orderbilling

import (
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldLTE(FieldID, id))
}

// OrderID applies equality check predicate on the "order_id" field. It's identical to OrderIDEQ.
func OrderID(v int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldEQ(FieldOrderID, v))
}

// StartTimePrice applies equality check predicate on the "start_time_price" field. It's identical to StartTimePriceEQ.
func StartTimePrice(v int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldEQ(FieldStartTimePrice, v))
}

// StartTimeUnit applies equality check predicate on the "start_time_unit" field. It's identical to StartTimeUnitEQ.
func StartTimeUnit(v int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldEQ(FieldStartTimeUnit, v))
}

// NormalTimePrice applies equality check predicate on the "normal_time_price" field. It's identical to NormalTimePriceEQ.
func NormalTimePrice(v int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldEQ(FieldNormalTimePrice, v))
}

// NormalTimeUnit applies equality check predicate on the "normal_time_unit" field. It's identical to NormalTimeUnitEQ.
func NormalTimeUnit(v int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldEQ(FieldNormalTimeUnit, v))
}

// CappedAmount applies equality check predicate on the "capped_amount" field. It's identical to CappedAmountEQ.
func CappedAmount(v int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldEQ(FieldCappedAmount, v))
}

// CumulativeSecond applies equality check predicate on the "cumulative_second" field. It's identical to CumulativeSecondEQ.
func CumulativeSecond(v float64) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldEQ(FieldCumulativeSecond, v))
}

// CumulativeMeter applies equality check predicate on the "cumulative_meter" field. It's identical to CumulativeMeterEQ.
func CumulativeMeter(v float64) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldEQ(FieldCumulativeMeter, v))
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldEQ(FieldState, v))
}

// StartTime applies equality check predicate on the "start_time" field. It's identical to StartTimeEQ.
func StartTime(v time.Time) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldEQ(FieldStartTime, v))
}

// FinishTime applies equality check predicate on the "finish_time" field. It's identical to FinishTimeEQ.
func FinishTime(v time.Time) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldEQ(FieldFinishTime, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldEQ(FieldUpdateTime, v))
}

// OrderIDEQ applies the EQ predicate on the "order_id" field.
func OrderIDEQ(v int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldEQ(FieldOrderID, v))
}

// OrderIDNEQ applies the NEQ predicate on the "order_id" field.
func OrderIDNEQ(v int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldNEQ(FieldOrderID, v))
}

// OrderIDIn applies the In predicate on the "order_id" field.
func OrderIDIn(vs ...int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldIn(FieldOrderID, vs...))
}

// OrderIDNotIn applies the NotIn predicate on the "order_id" field.
func OrderIDNotIn(vs ...int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldNotIn(FieldOrderID, vs...))
}

// StartTimePriceEQ applies the EQ predicate on the "start_time_price" field.
func StartTimePriceEQ(v int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldEQ(FieldStartTimePrice, v))
}

// StartTimePriceNEQ applies the NEQ predicate on the "start_time_price" field.
func StartTimePriceNEQ(v int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldNEQ(FieldStartTimePrice, v))
}

// StartTimePriceIn applies the In predicate on the "start_time_price" field.
func StartTimePriceIn(vs ...int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldIn(FieldStartTimePrice, vs...))
}

// StartTimePriceNotIn applies the NotIn predicate on the "start_time_price" field.
func StartTimePriceNotIn(vs ...int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldNotIn(FieldStartTimePrice, vs...))
}

// StartTimePriceGT applies the GT predicate on the "start_time_price" field.
func StartTimePriceGT(v int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldGT(FieldStartTimePrice, v))
}

// StartTimePriceGTE applies the GTE predicate on the "start_time_price" field.
func StartTimePriceGTE(v int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldGTE(FieldStartTimePrice, v))
}

// StartTimePriceLT applies the LT predicate on the "start_time_price" field.
func StartTimePriceLT(v int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldLT(FieldStartTimePrice, v))
}

// StartTimePriceLTE applies the LTE predicate on the "start_time_price" field.
func StartTimePriceLTE(v int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldLTE(FieldStartTimePrice, v))
}

// StartTimeUnitEQ applies the EQ predicate on the "start_time_unit" field.
func StartTimeUnitEQ(v int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldEQ(FieldStartTimeUnit, v))
}

// StartTimeUnitNEQ applies the NEQ predicate on the "start_time_unit" field.
func StartTimeUnitNEQ(v int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldNEQ(FieldStartTimeUnit, v))
}

// StartTimeUnitIn applies the In predicate on the "start_time_unit" field.
func StartTimeUnitIn(vs ...int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldIn(FieldStartTimeUnit, vs...))
}

// StartTimeUnitNotIn applies the NotIn predicate on the "start_time_unit" field.
func StartTimeUnitNotIn(vs ...int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldNotIn(FieldStartTimeUnit, vs...))
}

// StartTimeUnitGT applies the GT predicate on the "start_time_unit" field.
func StartTimeUnitGT(v int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldGT(FieldStartTimeUnit, v))
}

// StartTimeUnitGTE applies the GTE predicate on the "start_time_unit" field.
func StartTimeUnitGTE(v int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldGTE(FieldStartTimeUnit, v))
}

// StartTimeUnitLT applies the LT predicate on the "start_time_unit" field.
func StartTimeUnitLT(v int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldLT(FieldStartTimeUnit, v))
}

// StartTimeUnitLTE applies the LTE predicate on the "start_time_unit" field.
func StartTimeUnitLTE(v int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldLTE(FieldStartTimeUnit, v))
}

// NormalTimePriceEQ applies the EQ predicate on the "normal_time_price" field.
func NormalTimePriceEQ(v int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldEQ(FieldNormalTimePrice, v))
}

// NormalTimePriceNEQ applies the NEQ predicate on the "normal_time_price" field.
func NormalTimePriceNEQ(v int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldNEQ(FieldNormalTimePrice, v))
}

// NormalTimePriceIn applies the In predicate on the "normal_time_price" field.
func NormalTimePriceIn(vs ...int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldIn(FieldNormalTimePrice, vs...))
}

// NormalTimePriceNotIn applies the NotIn predicate on the "normal_time_price" field.
func NormalTimePriceNotIn(vs ...int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldNotIn(FieldNormalTimePrice, vs...))
}

// NormalTimePriceGT applies the GT predicate on the "normal_time_price" field.
func NormalTimePriceGT(v int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldGT(FieldNormalTimePrice, v))
}

// NormalTimePriceGTE applies the GTE predicate on the "normal_time_price" field.
func NormalTimePriceGTE(v int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldGTE(FieldNormalTimePrice, v))
}

// NormalTimePriceLT applies the LT predicate on the "normal_time_price" field.
func NormalTimePriceLT(v int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldLT(FieldNormalTimePrice, v))
}

// NormalTimePriceLTE applies the LTE predicate on the "normal_time_price" field.
func NormalTimePriceLTE(v int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldLTE(FieldNormalTimePrice, v))
}

// NormalTimeUnitEQ applies the EQ predicate on the "normal_time_unit" field.
func NormalTimeUnitEQ(v int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldEQ(FieldNormalTimeUnit, v))
}

// NormalTimeUnitNEQ applies the NEQ predicate on the "normal_time_unit" field.
func NormalTimeUnitNEQ(v int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldNEQ(FieldNormalTimeUnit, v))
}

// NormalTimeUnitIn applies the In predicate on the "normal_time_unit" field.
func NormalTimeUnitIn(vs ...int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldIn(FieldNormalTimeUnit, vs...))
}

// NormalTimeUnitNotIn applies the NotIn predicate on the "normal_time_unit" field.
func NormalTimeUnitNotIn(vs ...int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldNotIn(FieldNormalTimeUnit, vs...))
}

// NormalTimeUnitGT applies the GT predicate on the "normal_time_unit" field.
func NormalTimeUnitGT(v int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldGT(FieldNormalTimeUnit, v))
}

// NormalTimeUnitGTE applies the GTE predicate on the "normal_time_unit" field.
func NormalTimeUnitGTE(v int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldGTE(FieldNormalTimeUnit, v))
}

// NormalTimeUnitLT applies the LT predicate on the "normal_time_unit" field.
func NormalTimeUnitLT(v int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldLT(FieldNormalTimeUnit, v))
}

// NormalTimeUnitLTE applies the LTE predicate on the "normal_time_unit" field.
func NormalTimeUnitLTE(v int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldLTE(FieldNormalTimeUnit, v))
}

// CappedAmountEQ applies the EQ predicate on the "capped_amount" field.
func CappedAmountEQ(v int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldEQ(FieldCappedAmount, v))
}

// CappedAmountNEQ applies the NEQ predicate on the "capped_amount" field.
func CappedAmountNEQ(v int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldNEQ(FieldCappedAmount, v))
}

// CappedAmountIn applies the In predicate on the "capped_amount" field.
func CappedAmountIn(vs ...int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldIn(FieldCappedAmount, vs...))
}

// CappedAmountNotIn applies the NotIn predicate on the "capped_amount" field.
func CappedAmountNotIn(vs ...int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldNotIn(FieldCappedAmount, vs...))
}

// CappedAmountGT applies the GT predicate on the "capped_amount" field.
func CappedAmountGT(v int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldGT(FieldCappedAmount, v))
}

// CappedAmountGTE applies the GTE predicate on the "capped_amount" field.
func CappedAmountGTE(v int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldGTE(FieldCappedAmount, v))
}

// CappedAmountLT applies the LT predicate on the "capped_amount" field.
func CappedAmountLT(v int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldLT(FieldCappedAmount, v))
}

// CappedAmountLTE applies the LTE predicate on the "capped_amount" field.
func CappedAmountLTE(v int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldLTE(FieldCappedAmount, v))
}

// CumulativeSecondEQ applies the EQ predicate on the "cumulative_second" field.
func CumulativeSecondEQ(v float64) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldEQ(FieldCumulativeSecond, v))
}

// CumulativeSecondNEQ applies the NEQ predicate on the "cumulative_second" field.
func CumulativeSecondNEQ(v float64) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldNEQ(FieldCumulativeSecond, v))
}

// CumulativeSecondIn applies the In predicate on the "cumulative_second" field.
func CumulativeSecondIn(vs ...float64) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldIn(FieldCumulativeSecond, vs...))
}

// CumulativeSecondNotIn applies the NotIn predicate on the "cumulative_second" field.
func CumulativeSecondNotIn(vs ...float64) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldNotIn(FieldCumulativeSecond, vs...))
}

// CumulativeSecondGT applies the GT predicate on the "cumulative_second" field.
func CumulativeSecondGT(v float64) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldGT(FieldCumulativeSecond, v))
}

// CumulativeSecondGTE applies the GTE predicate on the "cumulative_second" field.
func CumulativeSecondGTE(v float64) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldGTE(FieldCumulativeSecond, v))
}

// CumulativeSecondLT applies the LT predicate on the "cumulative_second" field.
func CumulativeSecondLT(v float64) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldLT(FieldCumulativeSecond, v))
}

// CumulativeSecondLTE applies the LTE predicate on the "cumulative_second" field.
func CumulativeSecondLTE(v float64) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldLTE(FieldCumulativeSecond, v))
}

// CumulativeMeterEQ applies the EQ predicate on the "cumulative_meter" field.
func CumulativeMeterEQ(v float64) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldEQ(FieldCumulativeMeter, v))
}

// CumulativeMeterNEQ applies the NEQ predicate on the "cumulative_meter" field.
func CumulativeMeterNEQ(v float64) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldNEQ(FieldCumulativeMeter, v))
}

// CumulativeMeterIn applies the In predicate on the "cumulative_meter" field.
func CumulativeMeterIn(vs ...float64) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldIn(FieldCumulativeMeter, vs...))
}

// CumulativeMeterNotIn applies the NotIn predicate on the "cumulative_meter" field.
func CumulativeMeterNotIn(vs ...float64) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldNotIn(FieldCumulativeMeter, vs...))
}

// CumulativeMeterGT applies the GT predicate on the "cumulative_meter" field.
func CumulativeMeterGT(v float64) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldGT(FieldCumulativeMeter, v))
}

// CumulativeMeterGTE applies the GTE predicate on the "cumulative_meter" field.
func CumulativeMeterGTE(v float64) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldGTE(FieldCumulativeMeter, v))
}

// CumulativeMeterLT applies the LT predicate on the "cumulative_meter" field.
func CumulativeMeterLT(v float64) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldLT(FieldCumulativeMeter, v))
}

// CumulativeMeterLTE applies the LTE predicate on the "cumulative_meter" field.
func CumulativeMeterLTE(v float64) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldLTE(FieldCumulativeMeter, v))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v int) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldLTE(FieldState, v))
}

// StartTimeEQ applies the EQ predicate on the "start_time" field.
func StartTimeEQ(v time.Time) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldEQ(FieldStartTime, v))
}

// StartTimeNEQ applies the NEQ predicate on the "start_time" field.
func StartTimeNEQ(v time.Time) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldNEQ(FieldStartTime, v))
}

// StartTimeIn applies the In predicate on the "start_time" field.
func StartTimeIn(vs ...time.Time) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldIn(FieldStartTime, vs...))
}

// StartTimeNotIn applies the NotIn predicate on the "start_time" field.
func StartTimeNotIn(vs ...time.Time) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldNotIn(FieldStartTime, vs...))
}

// StartTimeGT applies the GT predicate on the "start_time" field.
func StartTimeGT(v time.Time) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldGT(FieldStartTime, v))
}

// StartTimeGTE applies the GTE predicate on the "start_time" field.
func StartTimeGTE(v time.Time) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldGTE(FieldStartTime, v))
}

// StartTimeLT applies the LT predicate on the "start_time" field.
func StartTimeLT(v time.Time) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldLT(FieldStartTime, v))
}

// StartTimeLTE applies the LTE predicate on the "start_time" field.
func StartTimeLTE(v time.Time) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldLTE(FieldStartTime, v))
}

// StartTimeIsNil applies the IsNil predicate on the "start_time" field.
func StartTimeIsNil() predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldIsNull(FieldStartTime))
}

// StartTimeNotNil applies the NotNil predicate on the "start_time" field.
func StartTimeNotNil() predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldNotNull(FieldStartTime))
}

// FinishTimeEQ applies the EQ predicate on the "finish_time" field.
func FinishTimeEQ(v time.Time) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldEQ(FieldFinishTime, v))
}

// FinishTimeNEQ applies the NEQ predicate on the "finish_time" field.
func FinishTimeNEQ(v time.Time) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldNEQ(FieldFinishTime, v))
}

// FinishTimeIn applies the In predicate on the "finish_time" field.
func FinishTimeIn(vs ...time.Time) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldIn(FieldFinishTime, vs...))
}

// FinishTimeNotIn applies the NotIn predicate on the "finish_time" field.
func FinishTimeNotIn(vs ...time.Time) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldNotIn(FieldFinishTime, vs...))
}

// FinishTimeGT applies the GT predicate on the "finish_time" field.
func FinishTimeGT(v time.Time) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldGT(FieldFinishTime, v))
}

// FinishTimeGTE applies the GTE predicate on the "finish_time" field.
func FinishTimeGTE(v time.Time) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldGTE(FieldFinishTime, v))
}

// FinishTimeLT applies the LT predicate on the "finish_time" field.
func FinishTimeLT(v time.Time) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldLT(FieldFinishTime, v))
}

// FinishTimeLTE applies the LTE predicate on the "finish_time" field.
func FinishTimeLTE(v time.Time) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldLTE(FieldFinishTime, v))
}

// FinishTimeIsNil applies the IsNil predicate on the "finish_time" field.
func FinishTimeIsNil() predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldIsNull(FieldFinishTime))
}

// FinishTimeNotNil applies the NotNil predicate on the "finish_time" field.
func FinishTimeNotNil() predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldNotNull(FieldFinishTime))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.OrderBilling {
	return predicate.OrderBilling(sql.FieldLTE(FieldUpdateTime, v))
}

// HasOrder applies the HasEdge predicate on the "order" edge.
func HasOrder() predicate.OrderBilling {
	return predicate.OrderBilling(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, OrderTable, OrderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderWith applies the HasEdge predicate on the "order" edge with a given conditions (other predicates).
func HasOrderWith(preds ...predicate.Order) predicate.OrderBilling {
	return predicate.OrderBilling(func(s *sql.Selector) {
		step := newOrderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrderBilling) predicate.OrderBilling {
	return predicate.OrderBilling(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrderBilling) predicate.OrderBilling {
	return predicate.OrderBilling(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrderBilling) predicate.OrderBilling {
	return predicate.OrderBilling(sql.NotPredicates(p))
}
