// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"github.com/jianbo-zh/jydata/database/ent/paytxbill"
	"github.com/jianbo-zh/jydata/database/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PayTxBillDelete is the builder for deleting a PayTxBill entity.
type PayTxBillDelete struct {
	config
	hooks    []Hook
	mutation *PayTxBillMutation
}

// Where appends a list predicates to the PayTxBillDelete builder.
func (ptbd *PayTxBillDelete) Where(ps ...predicate.PayTxBill) *PayTxBillDelete {
	ptbd.mutation.Where(ps...)
	return ptbd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ptbd *PayTxBillDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ptbd.sqlExec, ptbd.mutation, ptbd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ptbd *PayTxBillDelete) ExecX(ctx context.Context) int {
	n, err := ptbd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ptbd *PayTxBillDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(paytxbill.Table, sqlgraph.NewFieldSpec(paytxbill.FieldID, field.TypeInt))
	if ps := ptbd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ptbd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ptbd.mutation.done = true
	return affected, err
}

// PayTxBillDeleteOne is the builder for deleting a single PayTxBill entity.
type PayTxBillDeleteOne struct {
	ptbd *PayTxBillDelete
}

// Where appends a list predicates to the PayTxBillDelete builder.
func (ptbdo *PayTxBillDeleteOne) Where(ps ...predicate.PayTxBill) *PayTxBillDeleteOne {
	ptbdo.ptbd.mutation.Where(ps...)
	return ptbdo
}

// Exec executes the deletion query.
func (ptbdo *PayTxBillDeleteOne) Exec(ctx context.Context) error {
	n, err := ptbdo.ptbd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{paytxbill.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ptbdo *PayTxBillDeleteOne) ExecX(ctx context.Context) {
	if err := ptbdo.Exec(ctx); err != nil {
		panic(err)
	}
}
