// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/statsdailycar"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// StatsDailyCar is the model entity for the StatsDailyCar schema.
type StatsDailyCar struct {
	config `json:"-"`
	// ID of the ent.
	// ID
	ID int `json:"id,omitempty"`
	// 景区ID
	ScenicAreaID int `json:"scenic_area_id,omitempty"`
	// 车辆ID
	CarID int `json:"car_id,omitempty"`
	// 年
	Y int `json:"y,omitempty"`
	// 月
	M int `json:"m,omitempty"`
	// 日
	D int `json:"d,omitempty"`
	// 第几周
	Week int `json:"week,omitempty"`
	// 星期几(1,2,3,4,5,6,7)
	Weekday int `json:"weekday,omitempty"`
	// 时间段(1-工作日、2-周末、3-节假日)
	Period int `json:"period,omitempty"`
	// 新建订单数
	OrderCountCreate int `json:"order_count_create,omitempty"`
	// 完成订单数
	OrderCountFinish int `json:"order_count_finish,omitempty"`
	// 取消订单数
	OrderCountCancel int `json:"order_count_cancel,omitempty"`
	// 订单额
	OrderAmount int `json:"order_amount,omitempty"`
	// 订单时长
	OrderDuration int `json:"order_duration,omitempty"`
	// 订单距离
	OrderMileage int `json:"order_mileage,omitempty"`
	// 订单评分
	OrderScore int `json:"order_score,omitempty"`
	// 运营锁车时长（秒）
	OperationLockDuration float32 `json:"operation_lock_duration,omitempty"`
	// 运营手动时长（秒）
	OperationManualDuration float32 `json:"operation_manual_duration,omitempty"`
	// 运营自动时长（秒）
	OperationAutoDuration float32 `json:"operation_auto_duration,omitempty"`
	// 运营故障时长（秒）
	OperationFaultDuration float32 `json:"operation_fault_duration,omitempty"`
	// 运营锁车次数
	OperationLockTimes uint32 `json:"operation_lock_times,omitempty"`
	// 运营手动次数
	OperationManualTimes uint32 `json:"operation_manual_times,omitempty"`
	// 运营自动次数
	OperationAutoTimes uint32 `json:"operation_auto_times,omitempty"`
	// 运营故障次数
	OperationFaultTimes uint32 `json:"operation_fault_times,omitempty"`
	// 运营手动里程（米）
	OperationManualMileage float32 `json:"operation_manual_mileage,omitempty"`
	// 运营自动里程（米）
	OperationAutoMileage float32 `json:"operation_auto_mileage,omitempty"`
	// 运维锁车时长（秒）
	MaintainLockDuration float32 `json:"maintain_lock_duration,omitempty"`
	// 运维手动时长（秒）
	MaintainManualDuration float32 `json:"maintain_manual_duration,omitempty"`
	// 运维自动时长（秒）
	MaintainAutoDuration float32 `json:"maintain_auto_duration,omitempty"`
	// 运维远程时长（秒）
	MaintainRemoteDuration float32 `json:"maintain_remote_duration,omitempty"`
	// 运维故障时长（秒）
	MaintainFaultDuration float32 `json:"maintain_fault_duration,omitempty"`
	// 运维锁车次数
	MaintainLockTimes uint32 `json:"maintain_lock_times,omitempty"`
	// 运维手动次数
	MaintainManualTimes uint32 `json:"maintain_manual_times,omitempty"`
	// 运维自动次数
	MaintainAutoTimes uint32 `json:"maintain_auto_times,omitempty"`
	// 运维远程次数
	MaintainRemoteTimes uint32 `json:"maintain_remote_times,omitempty"`
	// 运维故障次数
	MaintainFaultTimes uint32 `json:"maintain_fault_times,omitempty"`
	// 运维手动里程（米）
	MaintainManualMileage float32 `json:"maintain_manual_mileage,omitempty"`
	// 运维自动里程（米）
	MaintainAutoMileage float32 `json:"maintain_auto_mileage,omitempty"`
	// 运维远程里程（米）
	MaintainRemoteMileage float32 `json:"maintain_remote_mileage,omitempty"`
	// 告警次数
	AlarmTimes uint32 `json:"alarm_times,omitempty"`
	// 统计的时间
	StatsTime time.Time `json:"stats_time,omitempty"`
	// 创建时间
	CreateTime   time.Time `json:"create_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StatsDailyCar) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case statsdailycar.FieldOperationLockDuration, statsdailycar.FieldOperationManualDuration, statsdailycar.FieldOperationAutoDuration, statsdailycar.FieldOperationFaultDuration, statsdailycar.FieldOperationManualMileage, statsdailycar.FieldOperationAutoMileage, statsdailycar.FieldMaintainLockDuration, statsdailycar.FieldMaintainManualDuration, statsdailycar.FieldMaintainAutoDuration, statsdailycar.FieldMaintainRemoteDuration, statsdailycar.FieldMaintainFaultDuration, statsdailycar.FieldMaintainManualMileage, statsdailycar.FieldMaintainAutoMileage, statsdailycar.FieldMaintainRemoteMileage:
			values[i] = new(sql.NullFloat64)
		case statsdailycar.FieldID, statsdailycar.FieldScenicAreaID, statsdailycar.FieldCarID, statsdailycar.FieldY, statsdailycar.FieldM, statsdailycar.FieldD, statsdailycar.FieldWeek, statsdailycar.FieldWeekday, statsdailycar.FieldPeriod, statsdailycar.FieldOrderCountCreate, statsdailycar.FieldOrderCountFinish, statsdailycar.FieldOrderCountCancel, statsdailycar.FieldOrderAmount, statsdailycar.FieldOrderDuration, statsdailycar.FieldOrderMileage, statsdailycar.FieldOrderScore, statsdailycar.FieldOperationLockTimes, statsdailycar.FieldOperationManualTimes, statsdailycar.FieldOperationAutoTimes, statsdailycar.FieldOperationFaultTimes, statsdailycar.FieldMaintainLockTimes, statsdailycar.FieldMaintainManualTimes, statsdailycar.FieldMaintainAutoTimes, statsdailycar.FieldMaintainRemoteTimes, statsdailycar.FieldMaintainFaultTimes, statsdailycar.FieldAlarmTimes:
			values[i] = new(sql.NullInt64)
		case statsdailycar.FieldStatsTime, statsdailycar.FieldCreateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StatsDailyCar fields.
func (sdc *StatsDailyCar) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case statsdailycar.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sdc.ID = int(value.Int64)
		case statsdailycar.FieldScenicAreaID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field scenic_area_id", values[i])
			} else if value.Valid {
				sdc.ScenicAreaID = int(value.Int64)
			}
		case statsdailycar.FieldCarID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field car_id", values[i])
			} else if value.Valid {
				sdc.CarID = int(value.Int64)
			}
		case statsdailycar.FieldY:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field y", values[i])
			} else if value.Valid {
				sdc.Y = int(value.Int64)
			}
		case statsdailycar.FieldM:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field m", values[i])
			} else if value.Valid {
				sdc.M = int(value.Int64)
			}
		case statsdailycar.FieldD:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field d", values[i])
			} else if value.Valid {
				sdc.D = int(value.Int64)
			}
		case statsdailycar.FieldWeek:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field week", values[i])
			} else if value.Valid {
				sdc.Week = int(value.Int64)
			}
		case statsdailycar.FieldWeekday:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field weekday", values[i])
			} else if value.Valid {
				sdc.Weekday = int(value.Int64)
			}
		case statsdailycar.FieldPeriod:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field period", values[i])
			} else if value.Valid {
				sdc.Period = int(value.Int64)
			}
		case statsdailycar.FieldOrderCountCreate:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_count_create", values[i])
			} else if value.Valid {
				sdc.OrderCountCreate = int(value.Int64)
			}
		case statsdailycar.FieldOrderCountFinish:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_count_finish", values[i])
			} else if value.Valid {
				sdc.OrderCountFinish = int(value.Int64)
			}
		case statsdailycar.FieldOrderCountCancel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_count_cancel", values[i])
			} else if value.Valid {
				sdc.OrderCountCancel = int(value.Int64)
			}
		case statsdailycar.FieldOrderAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_amount", values[i])
			} else if value.Valid {
				sdc.OrderAmount = int(value.Int64)
			}
		case statsdailycar.FieldOrderDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_duration", values[i])
			} else if value.Valid {
				sdc.OrderDuration = int(value.Int64)
			}
		case statsdailycar.FieldOrderMileage:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_mileage", values[i])
			} else if value.Valid {
				sdc.OrderMileage = int(value.Int64)
			}
		case statsdailycar.FieldOrderScore:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_score", values[i])
			} else if value.Valid {
				sdc.OrderScore = int(value.Int64)
			}
		case statsdailycar.FieldOperationLockDuration:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field operation_lock_duration", values[i])
			} else if value.Valid {
				sdc.OperationLockDuration = float32(value.Float64)
			}
		case statsdailycar.FieldOperationManualDuration:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field operation_manual_duration", values[i])
			} else if value.Valid {
				sdc.OperationManualDuration = float32(value.Float64)
			}
		case statsdailycar.FieldOperationAutoDuration:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field operation_auto_duration", values[i])
			} else if value.Valid {
				sdc.OperationAutoDuration = float32(value.Float64)
			}
		case statsdailycar.FieldOperationFaultDuration:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field operation_fault_duration", values[i])
			} else if value.Valid {
				sdc.OperationFaultDuration = float32(value.Float64)
			}
		case statsdailycar.FieldOperationLockTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field operation_lock_times", values[i])
			} else if value.Valid {
				sdc.OperationLockTimes = uint32(value.Int64)
			}
		case statsdailycar.FieldOperationManualTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field operation_manual_times", values[i])
			} else if value.Valid {
				sdc.OperationManualTimes = uint32(value.Int64)
			}
		case statsdailycar.FieldOperationAutoTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field operation_auto_times", values[i])
			} else if value.Valid {
				sdc.OperationAutoTimes = uint32(value.Int64)
			}
		case statsdailycar.FieldOperationFaultTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field operation_fault_times", values[i])
			} else if value.Valid {
				sdc.OperationFaultTimes = uint32(value.Int64)
			}
		case statsdailycar.FieldOperationManualMileage:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field operation_manual_mileage", values[i])
			} else if value.Valid {
				sdc.OperationManualMileage = float32(value.Float64)
			}
		case statsdailycar.FieldOperationAutoMileage:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field operation_auto_mileage", values[i])
			} else if value.Valid {
				sdc.OperationAutoMileage = float32(value.Float64)
			}
		case statsdailycar.FieldMaintainLockDuration:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field maintain_lock_duration", values[i])
			} else if value.Valid {
				sdc.MaintainLockDuration = float32(value.Float64)
			}
		case statsdailycar.FieldMaintainManualDuration:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field maintain_manual_duration", values[i])
			} else if value.Valid {
				sdc.MaintainManualDuration = float32(value.Float64)
			}
		case statsdailycar.FieldMaintainAutoDuration:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field maintain_auto_duration", values[i])
			} else if value.Valid {
				sdc.MaintainAutoDuration = float32(value.Float64)
			}
		case statsdailycar.FieldMaintainRemoteDuration:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field maintain_remote_duration", values[i])
			} else if value.Valid {
				sdc.MaintainRemoteDuration = float32(value.Float64)
			}
		case statsdailycar.FieldMaintainFaultDuration:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field maintain_fault_duration", values[i])
			} else if value.Valid {
				sdc.MaintainFaultDuration = float32(value.Float64)
			}
		case statsdailycar.FieldMaintainLockTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field maintain_lock_times", values[i])
			} else if value.Valid {
				sdc.MaintainLockTimes = uint32(value.Int64)
			}
		case statsdailycar.FieldMaintainManualTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field maintain_manual_times", values[i])
			} else if value.Valid {
				sdc.MaintainManualTimes = uint32(value.Int64)
			}
		case statsdailycar.FieldMaintainAutoTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field maintain_auto_times", values[i])
			} else if value.Valid {
				sdc.MaintainAutoTimes = uint32(value.Int64)
			}
		case statsdailycar.FieldMaintainRemoteTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field maintain_remote_times", values[i])
			} else if value.Valid {
				sdc.MaintainRemoteTimes = uint32(value.Int64)
			}
		case statsdailycar.FieldMaintainFaultTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field maintain_fault_times", values[i])
			} else if value.Valid {
				sdc.MaintainFaultTimes = uint32(value.Int64)
			}
		case statsdailycar.FieldMaintainManualMileage:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field maintain_manual_mileage", values[i])
			} else if value.Valid {
				sdc.MaintainManualMileage = float32(value.Float64)
			}
		case statsdailycar.FieldMaintainAutoMileage:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field maintain_auto_mileage", values[i])
			} else if value.Valid {
				sdc.MaintainAutoMileage = float32(value.Float64)
			}
		case statsdailycar.FieldMaintainRemoteMileage:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field maintain_remote_mileage", values[i])
			} else if value.Valid {
				sdc.MaintainRemoteMileage = float32(value.Float64)
			}
		case statsdailycar.FieldAlarmTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field alarm_times", values[i])
			} else if value.Valid {
				sdc.AlarmTimes = uint32(value.Int64)
			}
		case statsdailycar.FieldStatsTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field stats_time", values[i])
			} else if value.Valid {
				sdc.StatsTime = value.Time
			}
		case statsdailycar.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				sdc.CreateTime = value.Time
			}
		default:
			sdc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the StatsDailyCar.
// This includes values selected through modifiers, order, etc.
func (sdc *StatsDailyCar) Value(name string) (ent.Value, error) {
	return sdc.selectValues.Get(name)
}

// Update returns a builder for updating this StatsDailyCar.
// Note that you need to call StatsDailyCar.Unwrap() before calling this method if this StatsDailyCar
// was returned from a transaction, and the transaction was committed or rolled back.
func (sdc *StatsDailyCar) Update() *StatsDailyCarUpdateOne {
	return NewStatsDailyCarClient(sdc.config).UpdateOne(sdc)
}

// Unwrap unwraps the StatsDailyCar entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sdc *StatsDailyCar) Unwrap() *StatsDailyCar {
	_tx, ok := sdc.config.driver.(*txDriver)
	if !ok {
		panic("ent: StatsDailyCar is not a transactional entity")
	}
	sdc.config.driver = _tx.drv
	return sdc
}

// String implements the fmt.Stringer.
func (sdc *StatsDailyCar) String() string {
	var builder strings.Builder
	builder.WriteString("StatsDailyCar(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sdc.ID))
	builder.WriteString("scenic_area_id=")
	builder.WriteString(fmt.Sprintf("%v", sdc.ScenicAreaID))
	builder.WriteString(", ")
	builder.WriteString("car_id=")
	builder.WriteString(fmt.Sprintf("%v", sdc.CarID))
	builder.WriteString(", ")
	builder.WriteString("y=")
	builder.WriteString(fmt.Sprintf("%v", sdc.Y))
	builder.WriteString(", ")
	builder.WriteString("m=")
	builder.WriteString(fmt.Sprintf("%v", sdc.M))
	builder.WriteString(", ")
	builder.WriteString("d=")
	builder.WriteString(fmt.Sprintf("%v", sdc.D))
	builder.WriteString(", ")
	builder.WriteString("week=")
	builder.WriteString(fmt.Sprintf("%v", sdc.Week))
	builder.WriteString(", ")
	builder.WriteString("weekday=")
	builder.WriteString(fmt.Sprintf("%v", sdc.Weekday))
	builder.WriteString(", ")
	builder.WriteString("period=")
	builder.WriteString(fmt.Sprintf("%v", sdc.Period))
	builder.WriteString(", ")
	builder.WriteString("order_count_create=")
	builder.WriteString(fmt.Sprintf("%v", sdc.OrderCountCreate))
	builder.WriteString(", ")
	builder.WriteString("order_count_finish=")
	builder.WriteString(fmt.Sprintf("%v", sdc.OrderCountFinish))
	builder.WriteString(", ")
	builder.WriteString("order_count_cancel=")
	builder.WriteString(fmt.Sprintf("%v", sdc.OrderCountCancel))
	builder.WriteString(", ")
	builder.WriteString("order_amount=")
	builder.WriteString(fmt.Sprintf("%v", sdc.OrderAmount))
	builder.WriteString(", ")
	builder.WriteString("order_duration=")
	builder.WriteString(fmt.Sprintf("%v", sdc.OrderDuration))
	builder.WriteString(", ")
	builder.WriteString("order_mileage=")
	builder.WriteString(fmt.Sprintf("%v", sdc.OrderMileage))
	builder.WriteString(", ")
	builder.WriteString("order_score=")
	builder.WriteString(fmt.Sprintf("%v", sdc.OrderScore))
	builder.WriteString(", ")
	builder.WriteString("operation_lock_duration=")
	builder.WriteString(fmt.Sprintf("%v", sdc.OperationLockDuration))
	builder.WriteString(", ")
	builder.WriteString("operation_manual_duration=")
	builder.WriteString(fmt.Sprintf("%v", sdc.OperationManualDuration))
	builder.WriteString(", ")
	builder.WriteString("operation_auto_duration=")
	builder.WriteString(fmt.Sprintf("%v", sdc.OperationAutoDuration))
	builder.WriteString(", ")
	builder.WriteString("operation_fault_duration=")
	builder.WriteString(fmt.Sprintf("%v", sdc.OperationFaultDuration))
	builder.WriteString(", ")
	builder.WriteString("operation_lock_times=")
	builder.WriteString(fmt.Sprintf("%v", sdc.OperationLockTimes))
	builder.WriteString(", ")
	builder.WriteString("operation_manual_times=")
	builder.WriteString(fmt.Sprintf("%v", sdc.OperationManualTimes))
	builder.WriteString(", ")
	builder.WriteString("operation_auto_times=")
	builder.WriteString(fmt.Sprintf("%v", sdc.OperationAutoTimes))
	builder.WriteString(", ")
	builder.WriteString("operation_fault_times=")
	builder.WriteString(fmt.Sprintf("%v", sdc.OperationFaultTimes))
	builder.WriteString(", ")
	builder.WriteString("operation_manual_mileage=")
	builder.WriteString(fmt.Sprintf("%v", sdc.OperationManualMileage))
	builder.WriteString(", ")
	builder.WriteString("operation_auto_mileage=")
	builder.WriteString(fmt.Sprintf("%v", sdc.OperationAutoMileage))
	builder.WriteString(", ")
	builder.WriteString("maintain_lock_duration=")
	builder.WriteString(fmt.Sprintf("%v", sdc.MaintainLockDuration))
	builder.WriteString(", ")
	builder.WriteString("maintain_manual_duration=")
	builder.WriteString(fmt.Sprintf("%v", sdc.MaintainManualDuration))
	builder.WriteString(", ")
	builder.WriteString("maintain_auto_duration=")
	builder.WriteString(fmt.Sprintf("%v", sdc.MaintainAutoDuration))
	builder.WriteString(", ")
	builder.WriteString("maintain_remote_duration=")
	builder.WriteString(fmt.Sprintf("%v", sdc.MaintainRemoteDuration))
	builder.WriteString(", ")
	builder.WriteString("maintain_fault_duration=")
	builder.WriteString(fmt.Sprintf("%v", sdc.MaintainFaultDuration))
	builder.WriteString(", ")
	builder.WriteString("maintain_lock_times=")
	builder.WriteString(fmt.Sprintf("%v", sdc.MaintainLockTimes))
	builder.WriteString(", ")
	builder.WriteString("maintain_manual_times=")
	builder.WriteString(fmt.Sprintf("%v", sdc.MaintainManualTimes))
	builder.WriteString(", ")
	builder.WriteString("maintain_auto_times=")
	builder.WriteString(fmt.Sprintf("%v", sdc.MaintainAutoTimes))
	builder.WriteString(", ")
	builder.WriteString("maintain_remote_times=")
	builder.WriteString(fmt.Sprintf("%v", sdc.MaintainRemoteTimes))
	builder.WriteString(", ")
	builder.WriteString("maintain_fault_times=")
	builder.WriteString(fmt.Sprintf("%v", sdc.MaintainFaultTimes))
	builder.WriteString(", ")
	builder.WriteString("maintain_manual_mileage=")
	builder.WriteString(fmt.Sprintf("%v", sdc.MaintainManualMileage))
	builder.WriteString(", ")
	builder.WriteString("maintain_auto_mileage=")
	builder.WriteString(fmt.Sprintf("%v", sdc.MaintainAutoMileage))
	builder.WriteString(", ")
	builder.WriteString("maintain_remote_mileage=")
	builder.WriteString(fmt.Sprintf("%v", sdc.MaintainRemoteMileage))
	builder.WriteString(", ")
	builder.WriteString("alarm_times=")
	builder.WriteString(fmt.Sprintf("%v", sdc.AlarmTimes))
	builder.WriteString(", ")
	builder.WriteString("stats_time=")
	builder.WriteString(sdc.StatsTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(sdc.CreateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// StatsDailyCars is a parsable slice of StatsDailyCar.
type StatsDailyCars []*StatsDailyCar
