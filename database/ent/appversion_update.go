// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/appversion"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AppVersionUpdate is the builder for updating AppVersion entities.
type AppVersionUpdate struct {
	config
	hooks    []Hook
	mutation *AppVersionMutation
}

// Where appends a list predicates to the AppVersionUpdate builder.
func (avu *AppVersionUpdate) Where(ps ...predicate.AppVersion) *AppVersionUpdate {
	avu.mutation.Where(ps...)
	return avu
}

// SetPlatform sets the "platform" field.
func (avu *AppVersionUpdate) SetPlatform(s string) *AppVersionUpdate {
	avu.mutation.SetPlatform(s)
	return avu
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (avu *AppVersionUpdate) SetNillablePlatform(s *string) *AppVersionUpdate {
	if s != nil {
		avu.SetPlatform(*s)
	}
	return avu
}

// SetAppName sets the "app_name" field.
func (avu *AppVersionUpdate) SetAppName(s string) *AppVersionUpdate {
	avu.mutation.SetAppName(s)
	return avu
}

// SetNillableAppName sets the "app_name" field if the given value is not nil.
func (avu *AppVersionUpdate) SetNillableAppName(s *string) *AppVersionUpdate {
	if s != nil {
		avu.SetAppName(*s)
	}
	return avu
}

// SetVersion sets the "version" field.
func (avu *AppVersionUpdate) SetVersion(s string) *AppVersionUpdate {
	avu.mutation.SetVersion(s)
	return avu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (avu *AppVersionUpdate) SetNillableVersion(s *string) *AppVersionUpdate {
	if s != nil {
		avu.SetVersion(*s)
	}
	return avu
}

// SetContent sets the "content" field.
func (avu *AppVersionUpdate) SetContent(s string) *AppVersionUpdate {
	avu.mutation.SetContent(s)
	return avu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (avu *AppVersionUpdate) SetNillableContent(s *string) *AppVersionUpdate {
	if s != nil {
		avu.SetContent(*s)
	}
	return avu
}

// SetIsForceUpgrade sets the "is_force_upgrade" field.
func (avu *AppVersionUpdate) SetIsForceUpgrade(b bool) *AppVersionUpdate {
	avu.mutation.SetIsForceUpgrade(b)
	return avu
}

// SetNillableIsForceUpgrade sets the "is_force_upgrade" field if the given value is not nil.
func (avu *AppVersionUpdate) SetNillableIsForceUpgrade(b *bool) *AppVersionUpdate {
	if b != nil {
		avu.SetIsForceUpgrade(*b)
	}
	return avu
}

// SetFileID sets the "file_id" field.
func (avu *AppVersionUpdate) SetFileID(i int) *AppVersionUpdate {
	avu.mutation.ResetFileID()
	avu.mutation.SetFileID(i)
	return avu
}

// SetNillableFileID sets the "file_id" field if the given value is not nil.
func (avu *AppVersionUpdate) SetNillableFileID(i *int) *AppVersionUpdate {
	if i != nil {
		avu.SetFileID(*i)
	}
	return avu
}

// AddFileID adds i to the "file_id" field.
func (avu *AppVersionUpdate) AddFileID(i int) *AppVersionUpdate {
	avu.mutation.AddFileID(i)
	return avu
}

// SetState sets the "state" field.
func (avu *AppVersionUpdate) SetState(i int) *AppVersionUpdate {
	avu.mutation.ResetState()
	avu.mutation.SetState(i)
	return avu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (avu *AppVersionUpdate) SetNillableState(i *int) *AppVersionUpdate {
	if i != nil {
		avu.SetState(*i)
	}
	return avu
}

// AddState adds i to the "state" field.
func (avu *AppVersionUpdate) AddState(i int) *AppVersionUpdate {
	avu.mutation.AddState(i)
	return avu
}

// SetPublishTime sets the "publish_time" field.
func (avu *AppVersionUpdate) SetPublishTime(t time.Time) *AppVersionUpdate {
	avu.mutation.SetPublishTime(t)
	return avu
}

// SetNillablePublishTime sets the "publish_time" field if the given value is not nil.
func (avu *AppVersionUpdate) SetNillablePublishTime(t *time.Time) *AppVersionUpdate {
	if t != nil {
		avu.SetPublishTime(*t)
	}
	return avu
}

// SetUpdateTime sets the "update_time" field.
func (avu *AppVersionUpdate) SetUpdateTime(t time.Time) *AppVersionUpdate {
	avu.mutation.SetUpdateTime(t)
	return avu
}

// Mutation returns the AppVersionMutation object of the builder.
func (avu *AppVersionUpdate) Mutation() *AppVersionMutation {
	return avu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (avu *AppVersionUpdate) Save(ctx context.Context) (int, error) {
	avu.defaults()
	return withHooks(ctx, avu.sqlSave, avu.mutation, avu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (avu *AppVersionUpdate) SaveX(ctx context.Context) int {
	affected, err := avu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (avu *AppVersionUpdate) Exec(ctx context.Context) error {
	_, err := avu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (avu *AppVersionUpdate) ExecX(ctx context.Context) {
	if err := avu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (avu *AppVersionUpdate) defaults() {
	if _, ok := avu.mutation.UpdateTime(); !ok {
		v := appversion.UpdateDefaultUpdateTime()
		avu.mutation.SetUpdateTime(v)
	}
}

func (avu *AppVersionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(appversion.Table, appversion.Columns, sqlgraph.NewFieldSpec(appversion.FieldID, field.TypeInt))
	if ps := avu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := avu.mutation.Platform(); ok {
		_spec.SetField(appversion.FieldPlatform, field.TypeString, value)
	}
	if value, ok := avu.mutation.AppName(); ok {
		_spec.SetField(appversion.FieldAppName, field.TypeString, value)
	}
	if value, ok := avu.mutation.Version(); ok {
		_spec.SetField(appversion.FieldVersion, field.TypeString, value)
	}
	if value, ok := avu.mutation.Content(); ok {
		_spec.SetField(appversion.FieldContent, field.TypeString, value)
	}
	if value, ok := avu.mutation.IsForceUpgrade(); ok {
		_spec.SetField(appversion.FieldIsForceUpgrade, field.TypeBool, value)
	}
	if value, ok := avu.mutation.FileID(); ok {
		_spec.SetField(appversion.FieldFileID, field.TypeInt, value)
	}
	if value, ok := avu.mutation.AddedFileID(); ok {
		_spec.AddField(appversion.FieldFileID, field.TypeInt, value)
	}
	if value, ok := avu.mutation.State(); ok {
		_spec.SetField(appversion.FieldState, field.TypeInt, value)
	}
	if value, ok := avu.mutation.AddedState(); ok {
		_spec.AddField(appversion.FieldState, field.TypeInt, value)
	}
	if value, ok := avu.mutation.PublishTime(); ok {
		_spec.SetField(appversion.FieldPublishTime, field.TypeTime, value)
	}
	if value, ok := avu.mutation.UpdateTime(); ok {
		_spec.SetField(appversion.FieldUpdateTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, avu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	avu.mutation.done = true
	return n, nil
}

// AppVersionUpdateOne is the builder for updating a single AppVersion entity.
type AppVersionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppVersionMutation
}

// SetPlatform sets the "platform" field.
func (avuo *AppVersionUpdateOne) SetPlatform(s string) *AppVersionUpdateOne {
	avuo.mutation.SetPlatform(s)
	return avuo
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (avuo *AppVersionUpdateOne) SetNillablePlatform(s *string) *AppVersionUpdateOne {
	if s != nil {
		avuo.SetPlatform(*s)
	}
	return avuo
}

// SetAppName sets the "app_name" field.
func (avuo *AppVersionUpdateOne) SetAppName(s string) *AppVersionUpdateOne {
	avuo.mutation.SetAppName(s)
	return avuo
}

// SetNillableAppName sets the "app_name" field if the given value is not nil.
func (avuo *AppVersionUpdateOne) SetNillableAppName(s *string) *AppVersionUpdateOne {
	if s != nil {
		avuo.SetAppName(*s)
	}
	return avuo
}

// SetVersion sets the "version" field.
func (avuo *AppVersionUpdateOne) SetVersion(s string) *AppVersionUpdateOne {
	avuo.mutation.SetVersion(s)
	return avuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (avuo *AppVersionUpdateOne) SetNillableVersion(s *string) *AppVersionUpdateOne {
	if s != nil {
		avuo.SetVersion(*s)
	}
	return avuo
}

// SetContent sets the "content" field.
func (avuo *AppVersionUpdateOne) SetContent(s string) *AppVersionUpdateOne {
	avuo.mutation.SetContent(s)
	return avuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (avuo *AppVersionUpdateOne) SetNillableContent(s *string) *AppVersionUpdateOne {
	if s != nil {
		avuo.SetContent(*s)
	}
	return avuo
}

// SetIsForceUpgrade sets the "is_force_upgrade" field.
func (avuo *AppVersionUpdateOne) SetIsForceUpgrade(b bool) *AppVersionUpdateOne {
	avuo.mutation.SetIsForceUpgrade(b)
	return avuo
}

// SetNillableIsForceUpgrade sets the "is_force_upgrade" field if the given value is not nil.
func (avuo *AppVersionUpdateOne) SetNillableIsForceUpgrade(b *bool) *AppVersionUpdateOne {
	if b != nil {
		avuo.SetIsForceUpgrade(*b)
	}
	return avuo
}

// SetFileID sets the "file_id" field.
func (avuo *AppVersionUpdateOne) SetFileID(i int) *AppVersionUpdateOne {
	avuo.mutation.ResetFileID()
	avuo.mutation.SetFileID(i)
	return avuo
}

// SetNillableFileID sets the "file_id" field if the given value is not nil.
func (avuo *AppVersionUpdateOne) SetNillableFileID(i *int) *AppVersionUpdateOne {
	if i != nil {
		avuo.SetFileID(*i)
	}
	return avuo
}

// AddFileID adds i to the "file_id" field.
func (avuo *AppVersionUpdateOne) AddFileID(i int) *AppVersionUpdateOne {
	avuo.mutation.AddFileID(i)
	return avuo
}

// SetState sets the "state" field.
func (avuo *AppVersionUpdateOne) SetState(i int) *AppVersionUpdateOne {
	avuo.mutation.ResetState()
	avuo.mutation.SetState(i)
	return avuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (avuo *AppVersionUpdateOne) SetNillableState(i *int) *AppVersionUpdateOne {
	if i != nil {
		avuo.SetState(*i)
	}
	return avuo
}

// AddState adds i to the "state" field.
func (avuo *AppVersionUpdateOne) AddState(i int) *AppVersionUpdateOne {
	avuo.mutation.AddState(i)
	return avuo
}

// SetPublishTime sets the "publish_time" field.
func (avuo *AppVersionUpdateOne) SetPublishTime(t time.Time) *AppVersionUpdateOne {
	avuo.mutation.SetPublishTime(t)
	return avuo
}

// SetNillablePublishTime sets the "publish_time" field if the given value is not nil.
func (avuo *AppVersionUpdateOne) SetNillablePublishTime(t *time.Time) *AppVersionUpdateOne {
	if t != nil {
		avuo.SetPublishTime(*t)
	}
	return avuo
}

// SetUpdateTime sets the "update_time" field.
func (avuo *AppVersionUpdateOne) SetUpdateTime(t time.Time) *AppVersionUpdateOne {
	avuo.mutation.SetUpdateTime(t)
	return avuo
}

// Mutation returns the AppVersionMutation object of the builder.
func (avuo *AppVersionUpdateOne) Mutation() *AppVersionMutation {
	return avuo.mutation
}

// Where appends a list predicates to the AppVersionUpdate builder.
func (avuo *AppVersionUpdateOne) Where(ps ...predicate.AppVersion) *AppVersionUpdateOne {
	avuo.mutation.Where(ps...)
	return avuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (avuo *AppVersionUpdateOne) Select(field string, fields ...string) *AppVersionUpdateOne {
	avuo.fields = append([]string{field}, fields...)
	return avuo
}

// Save executes the query and returns the updated AppVersion entity.
func (avuo *AppVersionUpdateOne) Save(ctx context.Context) (*AppVersion, error) {
	avuo.defaults()
	return withHooks(ctx, avuo.sqlSave, avuo.mutation, avuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (avuo *AppVersionUpdateOne) SaveX(ctx context.Context) *AppVersion {
	node, err := avuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (avuo *AppVersionUpdateOne) Exec(ctx context.Context) error {
	_, err := avuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (avuo *AppVersionUpdateOne) ExecX(ctx context.Context) {
	if err := avuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (avuo *AppVersionUpdateOne) defaults() {
	if _, ok := avuo.mutation.UpdateTime(); !ok {
		v := appversion.UpdateDefaultUpdateTime()
		avuo.mutation.SetUpdateTime(v)
	}
}

func (avuo *AppVersionUpdateOne) sqlSave(ctx context.Context) (_node *AppVersion, err error) {
	_spec := sqlgraph.NewUpdateSpec(appversion.Table, appversion.Columns, sqlgraph.NewFieldSpec(appversion.FieldID, field.TypeInt))
	id, ok := avuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AppVersion.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := avuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appversion.FieldID)
		for _, f := range fields {
			if !appversion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != appversion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := avuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := avuo.mutation.Platform(); ok {
		_spec.SetField(appversion.FieldPlatform, field.TypeString, value)
	}
	if value, ok := avuo.mutation.AppName(); ok {
		_spec.SetField(appversion.FieldAppName, field.TypeString, value)
	}
	if value, ok := avuo.mutation.Version(); ok {
		_spec.SetField(appversion.FieldVersion, field.TypeString, value)
	}
	if value, ok := avuo.mutation.Content(); ok {
		_spec.SetField(appversion.FieldContent, field.TypeString, value)
	}
	if value, ok := avuo.mutation.IsForceUpgrade(); ok {
		_spec.SetField(appversion.FieldIsForceUpgrade, field.TypeBool, value)
	}
	if value, ok := avuo.mutation.FileID(); ok {
		_spec.SetField(appversion.FieldFileID, field.TypeInt, value)
	}
	if value, ok := avuo.mutation.AddedFileID(); ok {
		_spec.AddField(appversion.FieldFileID, field.TypeInt, value)
	}
	if value, ok := avuo.mutation.State(); ok {
		_spec.SetField(appversion.FieldState, field.TypeInt, value)
	}
	if value, ok := avuo.mutation.AddedState(); ok {
		_spec.AddField(appversion.FieldState, field.TypeInt, value)
	}
	if value, ok := avuo.mutation.PublishTime(); ok {
		_spec.SetField(appversion.FieldPublishTime, field.TypeTime, value)
	}
	if value, ok := avuo.mutation.UpdateTime(); ok {
		_spec.SetField(appversion.FieldUpdateTime, field.TypeTime, value)
	}
	_node = &AppVersion{config: avuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, avuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	avuo.mutation.done = true
	return _node, nil
}
