// Code generated by ent, DO NOT EDIT.

package carconfigdownload

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the carconfigdownload type in the database.
	Label = "car_config_download"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUUID holds the string denoting the uuid field in the database.
	FieldUUID = "uuid"
	// FieldCarID holds the string denoting the car_id field in the database.
	FieldCarID = "car_id"
	// FieldDeviceID holds the string denoting the device_id field in the database.
	FieldDeviceID = "device_id"
	// FieldDownloadState holds the string denoting the download_state field in the database.
	FieldDownloadState = "download_state"
	// FieldDownloadProcess holds the string denoting the download_process field in the database.
	FieldDownloadProcess = "download_process"
	// FieldConfigIds holds the string denoting the config_ids field in the database.
	FieldConfigIds = "config_ids"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// Table holds the table name of the carconfigdownload in the database.
	Table = "car_config_downloads"
)

// Columns holds all SQL columns for carconfigdownload fields.
var Columns = []string{
	FieldID,
	FieldUUID,
	FieldCarID,
	FieldDeviceID,
	FieldDownloadState,
	FieldDownloadProcess,
	FieldConfigIds,
	FieldRemark,
	FieldCreateTime,
	FieldUpdateTime,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "car_config_downloads"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"car_car_configs",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultDownloadState holds the default value on creation for the "download_state" field.
	DefaultDownloadState string
	// DefaultDownloadProcess holds the default value on creation for the "download_process" field.
	DefaultDownloadProcess int
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)

// OrderOption defines the ordering options for the CarConfigDownload queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUUID orders the results by the uuid field.
func ByUUID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUUID, opts...).ToFunc()
}

// ByCarID orders the results by the car_id field.
func ByCarID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCarID, opts...).ToFunc()
}

// ByDeviceID orders the results by the device_id field.
func ByDeviceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceID, opts...).ToFunc()
}

// ByDownloadState orders the results by the download_state field.
func ByDownloadState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDownloadState, opts...).ToFunc()
}

// ByDownloadProcess orders the results by the download_process field.
func ByDownloadProcess(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDownloadProcess, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}
