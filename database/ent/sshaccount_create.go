// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/sshaccount"
)

// SshAccountCreate is the builder for creating a SshAccount entity.
type SshAccountCreate struct {
	config
	mutation *SshAccountMutation
	hooks    []Hook
}

// SetDeleteTime sets the "delete_time" field.
func (sac *SshAccountCreate) SetDeleteTime(t time.Time) *SshAccountCreate {
	sac.mutation.SetDeleteTime(t)
	return sac
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (sac *SshAccountCreate) SetNillableDeleteTime(t *time.Time) *SshAccountCreate {
	if t != nil {
		sac.SetDeleteTime(*t)
	}
	return sac
}

// SetType sets the "type" field.
func (sac *SshAccountCreate) SetType(s string) *SshAccountCreate {
	sac.mutation.SetType(s)
	return sac
}

// SetUsername sets the "username" field.
func (sac *SshAccountCreate) SetUsername(s string) *SshAccountCreate {
	sac.mutation.SetUsername(s)
	return sac
}

// SetPassword sets the "password" field.
func (sac *SshAccountCreate) SetPassword(s string) *SshAccountCreate {
	sac.mutation.SetPassword(s)
	return sac
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (sac *SshAccountCreate) SetScenicAreaID(i int) *SshAccountCreate {
	sac.mutation.SetScenicAreaID(i)
	return sac
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (sac *SshAccountCreate) SetNillableScenicAreaID(i *int) *SshAccountCreate {
	if i != nil {
		sac.SetScenicAreaID(*i)
	}
	return sac
}

// SetCarID sets the "car_id" field.
func (sac *SshAccountCreate) SetCarID(i int) *SshAccountCreate {
	sac.mutation.SetCarID(i)
	return sac
}

// SetNillableCarID sets the "car_id" field if the given value is not nil.
func (sac *SshAccountCreate) SetNillableCarID(i *int) *SshAccountCreate {
	if i != nil {
		sac.SetCarID(*i)
	}
	return sac
}

// SetState sets the "state" field.
func (sac *SshAccountCreate) SetState(i int) *SshAccountCreate {
	sac.mutation.SetState(i)
	return sac
}

// SetNillableState sets the "state" field if the given value is not nil.
func (sac *SshAccountCreate) SetNillableState(i *int) *SshAccountCreate {
	if i != nil {
		sac.SetState(*i)
	}
	return sac
}

// SetUseTime sets the "use_time" field.
func (sac *SshAccountCreate) SetUseTime(t time.Time) *SshAccountCreate {
	sac.mutation.SetUseTime(t)
	return sac
}

// SetNillableUseTime sets the "use_time" field if the given value is not nil.
func (sac *SshAccountCreate) SetNillableUseTime(t *time.Time) *SshAccountCreate {
	if t != nil {
		sac.SetUseTime(*t)
	}
	return sac
}

// SetCreateTime sets the "create_time" field.
func (sac *SshAccountCreate) SetCreateTime(t time.Time) *SshAccountCreate {
	sac.mutation.SetCreateTime(t)
	return sac
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (sac *SshAccountCreate) SetNillableCreateTime(t *time.Time) *SshAccountCreate {
	if t != nil {
		sac.SetCreateTime(*t)
	}
	return sac
}

// SetUpdateTime sets the "update_time" field.
func (sac *SshAccountCreate) SetUpdateTime(t time.Time) *SshAccountCreate {
	sac.mutation.SetUpdateTime(t)
	return sac
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (sac *SshAccountCreate) SetNillableUpdateTime(t *time.Time) *SshAccountCreate {
	if t != nil {
		sac.SetUpdateTime(*t)
	}
	return sac
}

// SetID sets the "id" field.
func (sac *SshAccountCreate) SetID(i int) *SshAccountCreate {
	sac.mutation.SetID(i)
	return sac
}

// Mutation returns the SshAccountMutation object of the builder.
func (sac *SshAccountCreate) Mutation() *SshAccountMutation {
	return sac.mutation
}

// Save creates the SshAccount in the database.
func (sac *SshAccountCreate) Save(ctx context.Context) (*SshAccount, error) {
	if err := sac.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, sac.sqlSave, sac.mutation, sac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sac *SshAccountCreate) SaveX(ctx context.Context) *SshAccount {
	v, err := sac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sac *SshAccountCreate) Exec(ctx context.Context) error {
	_, err := sac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sac *SshAccountCreate) ExecX(ctx context.Context) {
	if err := sac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sac *SshAccountCreate) defaults() error {
	if _, ok := sac.mutation.State(); !ok {
		v := sshaccount.DefaultState
		sac.mutation.SetState(v)
	}
	if _, ok := sac.mutation.CreateTime(); !ok {
		if sshaccount.DefaultCreateTime == nil {
			return fmt.Errorf("ent: uninitialized sshaccount.DefaultCreateTime (forgotten import ent/runtime?)")
		}
		v := sshaccount.DefaultCreateTime()
		sac.mutation.SetCreateTime(v)
	}
	if _, ok := sac.mutation.UpdateTime(); !ok {
		if sshaccount.DefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized sshaccount.DefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := sshaccount.DefaultUpdateTime()
		sac.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (sac *SshAccountCreate) check() error {
	if _, ok := sac.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "SshAccount.type"`)}
	}
	if _, ok := sac.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "SshAccount.username"`)}
	}
	if _, ok := sac.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "SshAccount.password"`)}
	}
	if _, ok := sac.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "SshAccount.state"`)}
	}
	if _, ok := sac.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "SshAccount.create_time"`)}
	}
	if _, ok := sac.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "SshAccount.update_time"`)}
	}
	return nil
}

func (sac *SshAccountCreate) sqlSave(ctx context.Context) (*SshAccount, error) {
	if err := sac.check(); err != nil {
		return nil, err
	}
	_node, _spec := sac.createSpec()
	if err := sqlgraph.CreateNode(ctx, sac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	sac.mutation.id = &_node.ID
	sac.mutation.done = true
	return _node, nil
}

func (sac *SshAccountCreate) createSpec() (*SshAccount, *sqlgraph.CreateSpec) {
	var (
		_node = &SshAccount{config: sac.config}
		_spec = sqlgraph.NewCreateSpec(sshaccount.Table, sqlgraph.NewFieldSpec(sshaccount.FieldID, field.TypeInt))
	)
	if id, ok := sac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sac.mutation.DeleteTime(); ok {
		_spec.SetField(sshaccount.FieldDeleteTime, field.TypeTime, value)
		_node.DeleteTime = value
	}
	if value, ok := sac.mutation.GetType(); ok {
		_spec.SetField(sshaccount.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := sac.mutation.Username(); ok {
		_spec.SetField(sshaccount.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := sac.mutation.Password(); ok {
		_spec.SetField(sshaccount.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := sac.mutation.ScenicAreaID(); ok {
		_spec.SetField(sshaccount.FieldScenicAreaID, field.TypeInt, value)
		_node.ScenicAreaID = &value
	}
	if value, ok := sac.mutation.CarID(); ok {
		_spec.SetField(sshaccount.FieldCarID, field.TypeInt, value)
		_node.CarID = &value
	}
	if value, ok := sac.mutation.State(); ok {
		_spec.SetField(sshaccount.FieldState, field.TypeInt, value)
		_node.State = value
	}
	if value, ok := sac.mutation.UseTime(); ok {
		_spec.SetField(sshaccount.FieldUseTime, field.TypeTime, value)
		_node.UseTime = value
	}
	if value, ok := sac.mutation.CreateTime(); ok {
		_spec.SetField(sshaccount.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := sac.mutation.UpdateTime(); ok {
		_spec.SetField(sshaccount.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// SshAccountCreateBulk is the builder for creating many SshAccount entities in bulk.
type SshAccountCreateBulk struct {
	config
	err      error
	builders []*SshAccountCreate
}

// Save creates the SshAccount entities in the database.
func (sacb *SshAccountCreateBulk) Save(ctx context.Context) ([]*SshAccount, error) {
	if sacb.err != nil {
		return nil, sacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sacb.builders))
	nodes := make([]*SshAccount, len(sacb.builders))
	mutators := make([]Mutator, len(sacb.builders))
	for i := range sacb.builders {
		func(i int, root context.Context) {
			builder := sacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SshAccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sacb *SshAccountCreateBulk) SaveX(ctx context.Context) []*SshAccount {
	v, err := sacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sacb *SshAccountCreateBulk) Exec(ctx context.Context) error {
	_, err := sacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sacb *SshAccountCreateBulk) ExecX(ctx context.Context) {
	if err := sacb.Exec(ctx); err != nil {
		panic(err)
	}
}
