// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/paytxbill"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"github.com/jianbo-zh/jydata/database/ent/scenicarea"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PayTxBillUpdate is the builder for updating PayTxBill entities.
type PayTxBillUpdate struct {
	config
	hooks    []Hook
	mutation *PayTxBillMutation
}

// Where appends a list predicates to the PayTxBillUpdate builder.
func (ptbu *PayTxBillUpdate) Where(ps ...predicate.PayTxBill) *PayTxBillUpdate {
	ptbu.mutation.Where(ps...)
	return ptbu
}

// SetTxID sets the "tx_id" field.
func (ptbu *PayTxBillUpdate) SetTxID(s string) *PayTxBillUpdate {
	ptbu.mutation.SetTxID(s)
	return ptbu
}

// SetNillableTxID sets the "tx_id" field if the given value is not nil.
func (ptbu *PayTxBillUpdate) SetNillableTxID(s *string) *PayTxBillUpdate {
	if s != nil {
		ptbu.SetTxID(*s)
	}
	return ptbu
}

// SetOrderID sets the "order_id" field.
func (ptbu *PayTxBillUpdate) SetOrderID(i int) *PayTxBillUpdate {
	ptbu.mutation.ResetOrderID()
	ptbu.mutation.SetOrderID(i)
	return ptbu
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (ptbu *PayTxBillUpdate) SetNillableOrderID(i *int) *PayTxBillUpdate {
	if i != nil {
		ptbu.SetOrderID(*i)
	}
	return ptbu
}

// AddOrderID adds i to the "order_id" field.
func (ptbu *PayTxBillUpdate) AddOrderID(i int) *PayTxBillUpdate {
	ptbu.mutation.AddOrderID(i)
	return ptbu
}

// SetOrderNo sets the "order_no" field.
func (ptbu *PayTxBillUpdate) SetOrderNo(s string) *PayTxBillUpdate {
	ptbu.mutation.SetOrderNo(s)
	return ptbu
}

// SetNillableOrderNo sets the "order_no" field if the given value is not nil.
func (ptbu *PayTxBillUpdate) SetNillableOrderNo(s *string) *PayTxBillUpdate {
	if s != nil {
		ptbu.SetOrderNo(*s)
	}
	return ptbu
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (ptbu *PayTxBillUpdate) SetScenicAreaID(i int) *PayTxBillUpdate {
	ptbu.mutation.SetScenicAreaID(i)
	return ptbu
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (ptbu *PayTxBillUpdate) SetNillableScenicAreaID(i *int) *PayTxBillUpdate {
	if i != nil {
		ptbu.SetScenicAreaID(*i)
	}
	return ptbu
}

// SetScenicAreaName sets the "scenic_area_name" field.
func (ptbu *PayTxBillUpdate) SetScenicAreaName(s string) *PayTxBillUpdate {
	ptbu.mutation.SetScenicAreaName(s)
	return ptbu
}

// SetNillableScenicAreaName sets the "scenic_area_name" field if the given value is not nil.
func (ptbu *PayTxBillUpdate) SetNillableScenicAreaName(s *string) *PayTxBillUpdate {
	if s != nil {
		ptbu.SetScenicAreaName(*s)
	}
	return ptbu
}

// SetTxType sets the "tx_type" field.
func (ptbu *PayTxBillUpdate) SetTxType(i int) *PayTxBillUpdate {
	ptbu.mutation.ResetTxType()
	ptbu.mutation.SetTxType(i)
	return ptbu
}

// SetNillableTxType sets the "tx_type" field if the given value is not nil.
func (ptbu *PayTxBillUpdate) SetNillableTxType(i *int) *PayTxBillUpdate {
	if i != nil {
		ptbu.SetTxType(*i)
	}
	return ptbu
}

// AddTxType adds i to the "tx_type" field.
func (ptbu *PayTxBillUpdate) AddTxType(i int) *PayTxBillUpdate {
	ptbu.mutation.AddTxType(i)
	return ptbu
}

// SetTxChannel sets the "tx_channel" field.
func (ptbu *PayTxBillUpdate) SetTxChannel(i int) *PayTxBillUpdate {
	ptbu.mutation.ResetTxChannel()
	ptbu.mutation.SetTxChannel(i)
	return ptbu
}

// SetNillableTxChannel sets the "tx_channel" field if the given value is not nil.
func (ptbu *PayTxBillUpdate) SetNillableTxChannel(i *int) *PayTxBillUpdate {
	if i != nil {
		ptbu.SetTxChannel(*i)
	}
	return ptbu
}

// AddTxChannel adds i to the "tx_channel" field.
func (ptbu *PayTxBillUpdate) AddTxChannel(i int) *PayTxBillUpdate {
	ptbu.mutation.AddTxChannel(i)
	return ptbu
}

// SetTxAccount sets the "tx_account" field.
func (ptbu *PayTxBillUpdate) SetTxAccount(s string) *PayTxBillUpdate {
	ptbu.mutation.SetTxAccount(s)
	return ptbu
}

// SetNillableTxAccount sets the "tx_account" field if the given value is not nil.
func (ptbu *PayTxBillUpdate) SetNillableTxAccount(s *string) *PayTxBillUpdate {
	if s != nil {
		ptbu.SetTxAccount(*s)
	}
	return ptbu
}

// SetTxAccountName sets the "tx_account_name" field.
func (ptbu *PayTxBillUpdate) SetTxAccountName(s string) *PayTxBillUpdate {
	ptbu.mutation.SetTxAccountName(s)
	return ptbu
}

// SetNillableTxAccountName sets the "tx_account_name" field if the given value is not nil.
func (ptbu *PayTxBillUpdate) SetNillableTxAccountName(s *string) *PayTxBillUpdate {
	if s != nil {
		ptbu.SetTxAccountName(*s)
	}
	return ptbu
}

// SetTxAmount sets the "tx_amount" field.
func (ptbu *PayTxBillUpdate) SetTxAmount(i int) *PayTxBillUpdate {
	ptbu.mutation.ResetTxAmount()
	ptbu.mutation.SetTxAmount(i)
	return ptbu
}

// SetNillableTxAmount sets the "tx_amount" field if the given value is not nil.
func (ptbu *PayTxBillUpdate) SetNillableTxAmount(i *int) *PayTxBillUpdate {
	if i != nil {
		ptbu.SetTxAmount(*i)
	}
	return ptbu
}

// AddTxAmount adds i to the "tx_amount" field.
func (ptbu *PayTxBillUpdate) AddTxAmount(i int) *PayTxBillUpdate {
	ptbu.mutation.AddTxAmount(i)
	return ptbu
}

// SetTxTime sets the "tx_time" field.
func (ptbu *PayTxBillUpdate) SetTxTime(t time.Time) *PayTxBillUpdate {
	ptbu.mutation.SetTxTime(t)
	return ptbu
}

// SetNillableTxTime sets the "tx_time" field if the given value is not nil.
func (ptbu *PayTxBillUpdate) SetNillableTxTime(t *time.Time) *PayTxBillUpdate {
	if t != nil {
		ptbu.SetTxTime(*t)
	}
	return ptbu
}

// SetRemark sets the "remark" field.
func (ptbu *PayTxBillUpdate) SetRemark(s string) *PayTxBillUpdate {
	ptbu.mutation.SetRemark(s)
	return ptbu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ptbu *PayTxBillUpdate) SetNillableRemark(s *string) *PayTxBillUpdate {
	if s != nil {
		ptbu.SetRemark(*s)
	}
	return ptbu
}

// SetUpdateTime sets the "update_time" field.
func (ptbu *PayTxBillUpdate) SetUpdateTime(t time.Time) *PayTxBillUpdate {
	ptbu.mutation.SetUpdateTime(t)
	return ptbu
}

// SetBackgroundScenicAreaID sets the "background_scenic_area" edge to the ScenicArea entity by ID.
func (ptbu *PayTxBillUpdate) SetBackgroundScenicAreaID(id int) *PayTxBillUpdate {
	ptbu.mutation.SetBackgroundScenicAreaID(id)
	return ptbu
}

// SetBackgroundScenicArea sets the "background_scenic_area" edge to the ScenicArea entity.
func (ptbu *PayTxBillUpdate) SetBackgroundScenicArea(s *ScenicArea) *PayTxBillUpdate {
	return ptbu.SetBackgroundScenicAreaID(s.ID)
}

// Mutation returns the PayTxBillMutation object of the builder.
func (ptbu *PayTxBillUpdate) Mutation() *PayTxBillMutation {
	return ptbu.mutation
}

// ClearBackgroundScenicArea clears the "background_scenic_area" edge to the ScenicArea entity.
func (ptbu *PayTxBillUpdate) ClearBackgroundScenicArea() *PayTxBillUpdate {
	ptbu.mutation.ClearBackgroundScenicArea()
	return ptbu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ptbu *PayTxBillUpdate) Save(ctx context.Context) (int, error) {
	ptbu.defaults()
	return withHooks(ctx, ptbu.sqlSave, ptbu.mutation, ptbu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptbu *PayTxBillUpdate) SaveX(ctx context.Context) int {
	affected, err := ptbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ptbu *PayTxBillUpdate) Exec(ctx context.Context) error {
	_, err := ptbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptbu *PayTxBillUpdate) ExecX(ctx context.Context) {
	if err := ptbu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptbu *PayTxBillUpdate) defaults() {
	if _, ok := ptbu.mutation.UpdateTime(); !ok {
		v := paytxbill.UpdateDefaultUpdateTime()
		ptbu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptbu *PayTxBillUpdate) check() error {
	if ptbu.mutation.BackgroundScenicAreaCleared() && len(ptbu.mutation.BackgroundScenicAreaIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PayTxBill.background_scenic_area"`)
	}
	return nil
}

func (ptbu *PayTxBillUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ptbu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(paytxbill.Table, paytxbill.Columns, sqlgraph.NewFieldSpec(paytxbill.FieldID, field.TypeInt))
	if ps := ptbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptbu.mutation.TxID(); ok {
		_spec.SetField(paytxbill.FieldTxID, field.TypeString, value)
	}
	if value, ok := ptbu.mutation.OrderID(); ok {
		_spec.SetField(paytxbill.FieldOrderID, field.TypeInt, value)
	}
	if value, ok := ptbu.mutation.AddedOrderID(); ok {
		_spec.AddField(paytxbill.FieldOrderID, field.TypeInt, value)
	}
	if value, ok := ptbu.mutation.OrderNo(); ok {
		_spec.SetField(paytxbill.FieldOrderNo, field.TypeString, value)
	}
	if value, ok := ptbu.mutation.ScenicAreaName(); ok {
		_spec.SetField(paytxbill.FieldScenicAreaName, field.TypeString, value)
	}
	if value, ok := ptbu.mutation.TxType(); ok {
		_spec.SetField(paytxbill.FieldTxType, field.TypeInt, value)
	}
	if value, ok := ptbu.mutation.AddedTxType(); ok {
		_spec.AddField(paytxbill.FieldTxType, field.TypeInt, value)
	}
	if value, ok := ptbu.mutation.TxChannel(); ok {
		_spec.SetField(paytxbill.FieldTxChannel, field.TypeInt, value)
	}
	if value, ok := ptbu.mutation.AddedTxChannel(); ok {
		_spec.AddField(paytxbill.FieldTxChannel, field.TypeInt, value)
	}
	if value, ok := ptbu.mutation.TxAccount(); ok {
		_spec.SetField(paytxbill.FieldTxAccount, field.TypeString, value)
	}
	if value, ok := ptbu.mutation.TxAccountName(); ok {
		_spec.SetField(paytxbill.FieldTxAccountName, field.TypeString, value)
	}
	if value, ok := ptbu.mutation.TxAmount(); ok {
		_spec.SetField(paytxbill.FieldTxAmount, field.TypeInt, value)
	}
	if value, ok := ptbu.mutation.AddedTxAmount(); ok {
		_spec.AddField(paytxbill.FieldTxAmount, field.TypeInt, value)
	}
	if value, ok := ptbu.mutation.TxTime(); ok {
		_spec.SetField(paytxbill.FieldTxTime, field.TypeTime, value)
	}
	if value, ok := ptbu.mutation.Remark(); ok {
		_spec.SetField(paytxbill.FieldRemark, field.TypeString, value)
	}
	if value, ok := ptbu.mutation.UpdateTime(); ok {
		_spec.SetField(paytxbill.FieldUpdateTime, field.TypeTime, value)
	}
	if ptbu.mutation.BackgroundScenicAreaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paytxbill.BackgroundScenicAreaTable,
			Columns: []string{paytxbill.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptbu.mutation.BackgroundScenicAreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paytxbill.BackgroundScenicAreaTable,
			Columns: []string{paytxbill.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ptbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paytxbill.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ptbu.mutation.done = true
	return n, nil
}

// PayTxBillUpdateOne is the builder for updating a single PayTxBill entity.
type PayTxBillUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PayTxBillMutation
}

// SetTxID sets the "tx_id" field.
func (ptbuo *PayTxBillUpdateOne) SetTxID(s string) *PayTxBillUpdateOne {
	ptbuo.mutation.SetTxID(s)
	return ptbuo
}

// SetNillableTxID sets the "tx_id" field if the given value is not nil.
func (ptbuo *PayTxBillUpdateOne) SetNillableTxID(s *string) *PayTxBillUpdateOne {
	if s != nil {
		ptbuo.SetTxID(*s)
	}
	return ptbuo
}

// SetOrderID sets the "order_id" field.
func (ptbuo *PayTxBillUpdateOne) SetOrderID(i int) *PayTxBillUpdateOne {
	ptbuo.mutation.ResetOrderID()
	ptbuo.mutation.SetOrderID(i)
	return ptbuo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (ptbuo *PayTxBillUpdateOne) SetNillableOrderID(i *int) *PayTxBillUpdateOne {
	if i != nil {
		ptbuo.SetOrderID(*i)
	}
	return ptbuo
}

// AddOrderID adds i to the "order_id" field.
func (ptbuo *PayTxBillUpdateOne) AddOrderID(i int) *PayTxBillUpdateOne {
	ptbuo.mutation.AddOrderID(i)
	return ptbuo
}

// SetOrderNo sets the "order_no" field.
func (ptbuo *PayTxBillUpdateOne) SetOrderNo(s string) *PayTxBillUpdateOne {
	ptbuo.mutation.SetOrderNo(s)
	return ptbuo
}

// SetNillableOrderNo sets the "order_no" field if the given value is not nil.
func (ptbuo *PayTxBillUpdateOne) SetNillableOrderNo(s *string) *PayTxBillUpdateOne {
	if s != nil {
		ptbuo.SetOrderNo(*s)
	}
	return ptbuo
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (ptbuo *PayTxBillUpdateOne) SetScenicAreaID(i int) *PayTxBillUpdateOne {
	ptbuo.mutation.SetScenicAreaID(i)
	return ptbuo
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (ptbuo *PayTxBillUpdateOne) SetNillableScenicAreaID(i *int) *PayTxBillUpdateOne {
	if i != nil {
		ptbuo.SetScenicAreaID(*i)
	}
	return ptbuo
}

// SetScenicAreaName sets the "scenic_area_name" field.
func (ptbuo *PayTxBillUpdateOne) SetScenicAreaName(s string) *PayTxBillUpdateOne {
	ptbuo.mutation.SetScenicAreaName(s)
	return ptbuo
}

// SetNillableScenicAreaName sets the "scenic_area_name" field if the given value is not nil.
func (ptbuo *PayTxBillUpdateOne) SetNillableScenicAreaName(s *string) *PayTxBillUpdateOne {
	if s != nil {
		ptbuo.SetScenicAreaName(*s)
	}
	return ptbuo
}

// SetTxType sets the "tx_type" field.
func (ptbuo *PayTxBillUpdateOne) SetTxType(i int) *PayTxBillUpdateOne {
	ptbuo.mutation.ResetTxType()
	ptbuo.mutation.SetTxType(i)
	return ptbuo
}

// SetNillableTxType sets the "tx_type" field if the given value is not nil.
func (ptbuo *PayTxBillUpdateOne) SetNillableTxType(i *int) *PayTxBillUpdateOne {
	if i != nil {
		ptbuo.SetTxType(*i)
	}
	return ptbuo
}

// AddTxType adds i to the "tx_type" field.
func (ptbuo *PayTxBillUpdateOne) AddTxType(i int) *PayTxBillUpdateOne {
	ptbuo.mutation.AddTxType(i)
	return ptbuo
}

// SetTxChannel sets the "tx_channel" field.
func (ptbuo *PayTxBillUpdateOne) SetTxChannel(i int) *PayTxBillUpdateOne {
	ptbuo.mutation.ResetTxChannel()
	ptbuo.mutation.SetTxChannel(i)
	return ptbuo
}

// SetNillableTxChannel sets the "tx_channel" field if the given value is not nil.
func (ptbuo *PayTxBillUpdateOne) SetNillableTxChannel(i *int) *PayTxBillUpdateOne {
	if i != nil {
		ptbuo.SetTxChannel(*i)
	}
	return ptbuo
}

// AddTxChannel adds i to the "tx_channel" field.
func (ptbuo *PayTxBillUpdateOne) AddTxChannel(i int) *PayTxBillUpdateOne {
	ptbuo.mutation.AddTxChannel(i)
	return ptbuo
}

// SetTxAccount sets the "tx_account" field.
func (ptbuo *PayTxBillUpdateOne) SetTxAccount(s string) *PayTxBillUpdateOne {
	ptbuo.mutation.SetTxAccount(s)
	return ptbuo
}

// SetNillableTxAccount sets the "tx_account" field if the given value is not nil.
func (ptbuo *PayTxBillUpdateOne) SetNillableTxAccount(s *string) *PayTxBillUpdateOne {
	if s != nil {
		ptbuo.SetTxAccount(*s)
	}
	return ptbuo
}

// SetTxAccountName sets the "tx_account_name" field.
func (ptbuo *PayTxBillUpdateOne) SetTxAccountName(s string) *PayTxBillUpdateOne {
	ptbuo.mutation.SetTxAccountName(s)
	return ptbuo
}

// SetNillableTxAccountName sets the "tx_account_name" field if the given value is not nil.
func (ptbuo *PayTxBillUpdateOne) SetNillableTxAccountName(s *string) *PayTxBillUpdateOne {
	if s != nil {
		ptbuo.SetTxAccountName(*s)
	}
	return ptbuo
}

// SetTxAmount sets the "tx_amount" field.
func (ptbuo *PayTxBillUpdateOne) SetTxAmount(i int) *PayTxBillUpdateOne {
	ptbuo.mutation.ResetTxAmount()
	ptbuo.mutation.SetTxAmount(i)
	return ptbuo
}

// SetNillableTxAmount sets the "tx_amount" field if the given value is not nil.
func (ptbuo *PayTxBillUpdateOne) SetNillableTxAmount(i *int) *PayTxBillUpdateOne {
	if i != nil {
		ptbuo.SetTxAmount(*i)
	}
	return ptbuo
}

// AddTxAmount adds i to the "tx_amount" field.
func (ptbuo *PayTxBillUpdateOne) AddTxAmount(i int) *PayTxBillUpdateOne {
	ptbuo.mutation.AddTxAmount(i)
	return ptbuo
}

// SetTxTime sets the "tx_time" field.
func (ptbuo *PayTxBillUpdateOne) SetTxTime(t time.Time) *PayTxBillUpdateOne {
	ptbuo.mutation.SetTxTime(t)
	return ptbuo
}

// SetNillableTxTime sets the "tx_time" field if the given value is not nil.
func (ptbuo *PayTxBillUpdateOne) SetNillableTxTime(t *time.Time) *PayTxBillUpdateOne {
	if t != nil {
		ptbuo.SetTxTime(*t)
	}
	return ptbuo
}

// SetRemark sets the "remark" field.
func (ptbuo *PayTxBillUpdateOne) SetRemark(s string) *PayTxBillUpdateOne {
	ptbuo.mutation.SetRemark(s)
	return ptbuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ptbuo *PayTxBillUpdateOne) SetNillableRemark(s *string) *PayTxBillUpdateOne {
	if s != nil {
		ptbuo.SetRemark(*s)
	}
	return ptbuo
}

// SetUpdateTime sets the "update_time" field.
func (ptbuo *PayTxBillUpdateOne) SetUpdateTime(t time.Time) *PayTxBillUpdateOne {
	ptbuo.mutation.SetUpdateTime(t)
	return ptbuo
}

// SetBackgroundScenicAreaID sets the "background_scenic_area" edge to the ScenicArea entity by ID.
func (ptbuo *PayTxBillUpdateOne) SetBackgroundScenicAreaID(id int) *PayTxBillUpdateOne {
	ptbuo.mutation.SetBackgroundScenicAreaID(id)
	return ptbuo
}

// SetBackgroundScenicArea sets the "background_scenic_area" edge to the ScenicArea entity.
func (ptbuo *PayTxBillUpdateOne) SetBackgroundScenicArea(s *ScenicArea) *PayTxBillUpdateOne {
	return ptbuo.SetBackgroundScenicAreaID(s.ID)
}

// Mutation returns the PayTxBillMutation object of the builder.
func (ptbuo *PayTxBillUpdateOne) Mutation() *PayTxBillMutation {
	return ptbuo.mutation
}

// ClearBackgroundScenicArea clears the "background_scenic_area" edge to the ScenicArea entity.
func (ptbuo *PayTxBillUpdateOne) ClearBackgroundScenicArea() *PayTxBillUpdateOne {
	ptbuo.mutation.ClearBackgroundScenicArea()
	return ptbuo
}

// Where appends a list predicates to the PayTxBillUpdate builder.
func (ptbuo *PayTxBillUpdateOne) Where(ps ...predicate.PayTxBill) *PayTxBillUpdateOne {
	ptbuo.mutation.Where(ps...)
	return ptbuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ptbuo *PayTxBillUpdateOne) Select(field string, fields ...string) *PayTxBillUpdateOne {
	ptbuo.fields = append([]string{field}, fields...)
	return ptbuo
}

// Save executes the query and returns the updated PayTxBill entity.
func (ptbuo *PayTxBillUpdateOne) Save(ctx context.Context) (*PayTxBill, error) {
	ptbuo.defaults()
	return withHooks(ctx, ptbuo.sqlSave, ptbuo.mutation, ptbuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptbuo *PayTxBillUpdateOne) SaveX(ctx context.Context) *PayTxBill {
	node, err := ptbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ptbuo *PayTxBillUpdateOne) Exec(ctx context.Context) error {
	_, err := ptbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptbuo *PayTxBillUpdateOne) ExecX(ctx context.Context) {
	if err := ptbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptbuo *PayTxBillUpdateOne) defaults() {
	if _, ok := ptbuo.mutation.UpdateTime(); !ok {
		v := paytxbill.UpdateDefaultUpdateTime()
		ptbuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptbuo *PayTxBillUpdateOne) check() error {
	if ptbuo.mutation.BackgroundScenicAreaCleared() && len(ptbuo.mutation.BackgroundScenicAreaIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PayTxBill.background_scenic_area"`)
	}
	return nil
}

func (ptbuo *PayTxBillUpdateOne) sqlSave(ctx context.Context) (_node *PayTxBill, err error) {
	if err := ptbuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(paytxbill.Table, paytxbill.Columns, sqlgraph.NewFieldSpec(paytxbill.FieldID, field.TypeInt))
	id, ok := ptbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PayTxBill.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ptbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, paytxbill.FieldID)
		for _, f := range fields {
			if !paytxbill.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != paytxbill.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ptbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptbuo.mutation.TxID(); ok {
		_spec.SetField(paytxbill.FieldTxID, field.TypeString, value)
	}
	if value, ok := ptbuo.mutation.OrderID(); ok {
		_spec.SetField(paytxbill.FieldOrderID, field.TypeInt, value)
	}
	if value, ok := ptbuo.mutation.AddedOrderID(); ok {
		_spec.AddField(paytxbill.FieldOrderID, field.TypeInt, value)
	}
	if value, ok := ptbuo.mutation.OrderNo(); ok {
		_spec.SetField(paytxbill.FieldOrderNo, field.TypeString, value)
	}
	if value, ok := ptbuo.mutation.ScenicAreaName(); ok {
		_spec.SetField(paytxbill.FieldScenicAreaName, field.TypeString, value)
	}
	if value, ok := ptbuo.mutation.TxType(); ok {
		_spec.SetField(paytxbill.FieldTxType, field.TypeInt, value)
	}
	if value, ok := ptbuo.mutation.AddedTxType(); ok {
		_spec.AddField(paytxbill.FieldTxType, field.TypeInt, value)
	}
	if value, ok := ptbuo.mutation.TxChannel(); ok {
		_spec.SetField(paytxbill.FieldTxChannel, field.TypeInt, value)
	}
	if value, ok := ptbuo.mutation.AddedTxChannel(); ok {
		_spec.AddField(paytxbill.FieldTxChannel, field.TypeInt, value)
	}
	if value, ok := ptbuo.mutation.TxAccount(); ok {
		_spec.SetField(paytxbill.FieldTxAccount, field.TypeString, value)
	}
	if value, ok := ptbuo.mutation.TxAccountName(); ok {
		_spec.SetField(paytxbill.FieldTxAccountName, field.TypeString, value)
	}
	if value, ok := ptbuo.mutation.TxAmount(); ok {
		_spec.SetField(paytxbill.FieldTxAmount, field.TypeInt, value)
	}
	if value, ok := ptbuo.mutation.AddedTxAmount(); ok {
		_spec.AddField(paytxbill.FieldTxAmount, field.TypeInt, value)
	}
	if value, ok := ptbuo.mutation.TxTime(); ok {
		_spec.SetField(paytxbill.FieldTxTime, field.TypeTime, value)
	}
	if value, ok := ptbuo.mutation.Remark(); ok {
		_spec.SetField(paytxbill.FieldRemark, field.TypeString, value)
	}
	if value, ok := ptbuo.mutation.UpdateTime(); ok {
		_spec.SetField(paytxbill.FieldUpdateTime, field.TypeTime, value)
	}
	if ptbuo.mutation.BackgroundScenicAreaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paytxbill.BackgroundScenicAreaTable,
			Columns: []string{paytxbill.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptbuo.mutation.BackgroundScenicAreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paytxbill.BackgroundScenicAreaTable,
			Columns: []string{paytxbill.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PayTxBill{config: ptbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ptbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paytxbill.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ptbuo.mutation.done = true
	return _node, nil
}
