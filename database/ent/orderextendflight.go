// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jianbo-zh/jydata/database/ent/orderextendflight"
)

// OrderExtendFlight is the model entity for the OrderExtendFlight schema.
type OrderExtendFlight struct {
	config `json:"-"`
	// ID of the ent.
	// ID
	ID int `json:"id,omitempty"`
	// 订单编号
	OrderID int `json:"order_id,omitempty"`
	// 班次ID
	FlightID int `json:"flight_id,omitempty"`
	// 班次编号
	FlightNo string `json:"flight_no,omitempty"`
	// 路线ID
	RouteID int `json:"route_id,omitempty"`
	// 路线名称
	RouteName string `json:"route_name,omitempty"`
	// 上车点
	StartStopID int `json:"start_stop_id,omitempty"`
	// 上车点序号
	StartStopIndex int `json:"start_stop_index,omitempty"`
	// 下车点
	EndStopID int `json:"end_stop_id,omitempty"`
	// 下车点序号
	EndStopIndex int `json:"end_stop_index,omitempty"`
	// 购票数量
	TicketCount int `json:"ticket_count,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime   time.Time `json:"update_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderExtendFlight) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case orderextendflight.FieldID, orderextendflight.FieldOrderID, orderextendflight.FieldFlightID, orderextendflight.FieldRouteID, orderextendflight.FieldStartStopID, orderextendflight.FieldStartStopIndex, orderextendflight.FieldEndStopID, orderextendflight.FieldEndStopIndex, orderextendflight.FieldTicketCount:
			values[i] = new(sql.NullInt64)
		case orderextendflight.FieldFlightNo, orderextendflight.FieldRouteName:
			values[i] = new(sql.NullString)
		case orderextendflight.FieldCreateTime, orderextendflight.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderExtendFlight fields.
func (oef *OrderExtendFlight) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orderextendflight.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			oef.ID = int(value.Int64)
		case orderextendflight.FieldOrderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value.Valid {
				oef.OrderID = int(value.Int64)
			}
		case orderextendflight.FieldFlightID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field flight_id", values[i])
			} else if value.Valid {
				oef.FlightID = int(value.Int64)
			}
		case orderextendflight.FieldFlightNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field flight_no", values[i])
			} else if value.Valid {
				oef.FlightNo = value.String
			}
		case orderextendflight.FieldRouteID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field route_id", values[i])
			} else if value.Valid {
				oef.RouteID = int(value.Int64)
			}
		case orderextendflight.FieldRouteName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field route_name", values[i])
			} else if value.Valid {
				oef.RouteName = value.String
			}
		case orderextendflight.FieldStartStopID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field start_stop_id", values[i])
			} else if value.Valid {
				oef.StartStopID = int(value.Int64)
			}
		case orderextendflight.FieldStartStopIndex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field start_stop_index", values[i])
			} else if value.Valid {
				oef.StartStopIndex = int(value.Int64)
			}
		case orderextendflight.FieldEndStopID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field end_stop_id", values[i])
			} else if value.Valid {
				oef.EndStopID = int(value.Int64)
			}
		case orderextendflight.FieldEndStopIndex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field end_stop_index", values[i])
			} else if value.Valid {
				oef.EndStopIndex = int(value.Int64)
			}
		case orderextendflight.FieldTicketCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ticket_count", values[i])
			} else if value.Valid {
				oef.TicketCount = int(value.Int64)
			}
		case orderextendflight.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				oef.CreateTime = value.Time
			}
		case orderextendflight.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				oef.UpdateTime = value.Time
			}
		default:
			oef.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OrderExtendFlight.
// This includes values selected through modifiers, order, etc.
func (oef *OrderExtendFlight) Value(name string) (ent.Value, error) {
	return oef.selectValues.Get(name)
}

// Update returns a builder for updating this OrderExtendFlight.
// Note that you need to call OrderExtendFlight.Unwrap() before calling this method if this OrderExtendFlight
// was returned from a transaction, and the transaction was committed or rolled back.
func (oef *OrderExtendFlight) Update() *OrderExtendFlightUpdateOne {
	return NewOrderExtendFlightClient(oef.config).UpdateOne(oef)
}

// Unwrap unwraps the OrderExtendFlight entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (oef *OrderExtendFlight) Unwrap() *OrderExtendFlight {
	_tx, ok := oef.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrderExtendFlight is not a transactional entity")
	}
	oef.config.driver = _tx.drv
	return oef
}

// String implements the fmt.Stringer.
func (oef *OrderExtendFlight) String() string {
	var builder strings.Builder
	builder.WriteString("OrderExtendFlight(")
	builder.WriteString(fmt.Sprintf("id=%v, ", oef.ID))
	builder.WriteString("order_id=")
	builder.WriteString(fmt.Sprintf("%v", oef.OrderID))
	builder.WriteString(", ")
	builder.WriteString("flight_id=")
	builder.WriteString(fmt.Sprintf("%v", oef.FlightID))
	builder.WriteString(", ")
	builder.WriteString("flight_no=")
	builder.WriteString(oef.FlightNo)
	builder.WriteString(", ")
	builder.WriteString("route_id=")
	builder.WriteString(fmt.Sprintf("%v", oef.RouteID))
	builder.WriteString(", ")
	builder.WriteString("route_name=")
	builder.WriteString(oef.RouteName)
	builder.WriteString(", ")
	builder.WriteString("start_stop_id=")
	builder.WriteString(fmt.Sprintf("%v", oef.StartStopID))
	builder.WriteString(", ")
	builder.WriteString("start_stop_index=")
	builder.WriteString(fmt.Sprintf("%v", oef.StartStopIndex))
	builder.WriteString(", ")
	builder.WriteString("end_stop_id=")
	builder.WriteString(fmt.Sprintf("%v", oef.EndStopID))
	builder.WriteString(", ")
	builder.WriteString("end_stop_index=")
	builder.WriteString(fmt.Sprintf("%v", oef.EndStopIndex))
	builder.WriteString(", ")
	builder.WriteString("ticket_count=")
	builder.WriteString(fmt.Sprintf("%v", oef.TicketCount))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(oef.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(oef.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// OrderExtendFlights is a parsable slice of OrderExtendFlight.
type OrderExtendFlights []*OrderExtendFlight
