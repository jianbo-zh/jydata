// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/otabtree"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
)

// OtaBtreeUpdate is the builder for updating OtaBtree entities.
type OtaBtreeUpdate struct {
	config
	hooks    []Hook
	mutation *OtaBtreeMutation
}

// Where appends a list predicates to the OtaBtreeUpdate builder.
func (obu *OtaBtreeUpdate) Where(ps ...predicate.OtaBtree) *OtaBtreeUpdate {
	obu.mutation.Where(ps...)
	return obu
}

// SetDeleteTime sets the "delete_time" field.
func (obu *OtaBtreeUpdate) SetDeleteTime(t time.Time) *OtaBtreeUpdate {
	obu.mutation.SetDeleteTime(t)
	return obu
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (obu *OtaBtreeUpdate) SetNillableDeleteTime(t *time.Time) *OtaBtreeUpdate {
	if t != nil {
		obu.SetDeleteTime(*t)
	}
	return obu
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (obu *OtaBtreeUpdate) ClearDeleteTime() *OtaBtreeUpdate {
	obu.mutation.ClearDeleteTime()
	return obu
}

// SetFileID sets the "file_id" field.
func (obu *OtaBtreeUpdate) SetFileID(i int) *OtaBtreeUpdate {
	obu.mutation.ResetFileID()
	obu.mutation.SetFileID(i)
	return obu
}

// SetNillableFileID sets the "file_id" field if the given value is not nil.
func (obu *OtaBtreeUpdate) SetNillableFileID(i *int) *OtaBtreeUpdate {
	if i != nil {
		obu.SetFileID(*i)
	}
	return obu
}

// AddFileID adds i to the "file_id" field.
func (obu *OtaBtreeUpdate) AddFileID(i int) *OtaBtreeUpdate {
	obu.mutation.AddFileID(i)
	return obu
}

// SetName sets the "name" field.
func (obu *OtaBtreeUpdate) SetName(s string) *OtaBtreeUpdate {
	obu.mutation.SetName(s)
	return obu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (obu *OtaBtreeUpdate) SetNillableName(s *string) *OtaBtreeUpdate {
	if s != nil {
		obu.SetName(*s)
	}
	return obu
}

// SetRemark sets the "remark" field.
func (obu *OtaBtreeUpdate) SetRemark(s string) *OtaBtreeUpdate {
	obu.mutation.SetRemark(s)
	return obu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (obu *OtaBtreeUpdate) SetNillableRemark(s *string) *OtaBtreeUpdate {
	if s != nil {
		obu.SetRemark(*s)
	}
	return obu
}

// SetUpdateTime sets the "update_time" field.
func (obu *OtaBtreeUpdate) SetUpdateTime(t time.Time) *OtaBtreeUpdate {
	obu.mutation.SetUpdateTime(t)
	return obu
}

// Mutation returns the OtaBtreeMutation object of the builder.
func (obu *OtaBtreeUpdate) Mutation() *OtaBtreeMutation {
	return obu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (obu *OtaBtreeUpdate) Save(ctx context.Context) (int, error) {
	if err := obu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, obu.sqlSave, obu.mutation, obu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (obu *OtaBtreeUpdate) SaveX(ctx context.Context) int {
	affected, err := obu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (obu *OtaBtreeUpdate) Exec(ctx context.Context) error {
	_, err := obu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (obu *OtaBtreeUpdate) ExecX(ctx context.Context) {
	if err := obu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (obu *OtaBtreeUpdate) defaults() error {
	if _, ok := obu.mutation.UpdateTime(); !ok {
		if otabtree.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized otabtree.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := otabtree.UpdateDefaultUpdateTime()
		obu.mutation.SetUpdateTime(v)
	}
	return nil
}

func (obu *OtaBtreeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(otabtree.Table, otabtree.Columns, sqlgraph.NewFieldSpec(otabtree.FieldID, field.TypeInt))
	if ps := obu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := obu.mutation.DeleteTime(); ok {
		_spec.SetField(otabtree.FieldDeleteTime, field.TypeTime, value)
	}
	if obu.mutation.DeleteTimeCleared() {
		_spec.ClearField(otabtree.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := obu.mutation.FileID(); ok {
		_spec.SetField(otabtree.FieldFileID, field.TypeInt, value)
	}
	if value, ok := obu.mutation.AddedFileID(); ok {
		_spec.AddField(otabtree.FieldFileID, field.TypeInt, value)
	}
	if value, ok := obu.mutation.Name(); ok {
		_spec.SetField(otabtree.FieldName, field.TypeString, value)
	}
	if value, ok := obu.mutation.Remark(); ok {
		_spec.SetField(otabtree.FieldRemark, field.TypeString, value)
	}
	if value, ok := obu.mutation.UpdateTime(); ok {
		_spec.SetField(otabtree.FieldUpdateTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, obu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{otabtree.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	obu.mutation.done = true
	return n, nil
}

// OtaBtreeUpdateOne is the builder for updating a single OtaBtree entity.
type OtaBtreeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OtaBtreeMutation
}

// SetDeleteTime sets the "delete_time" field.
func (obuo *OtaBtreeUpdateOne) SetDeleteTime(t time.Time) *OtaBtreeUpdateOne {
	obuo.mutation.SetDeleteTime(t)
	return obuo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (obuo *OtaBtreeUpdateOne) SetNillableDeleteTime(t *time.Time) *OtaBtreeUpdateOne {
	if t != nil {
		obuo.SetDeleteTime(*t)
	}
	return obuo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (obuo *OtaBtreeUpdateOne) ClearDeleteTime() *OtaBtreeUpdateOne {
	obuo.mutation.ClearDeleteTime()
	return obuo
}

// SetFileID sets the "file_id" field.
func (obuo *OtaBtreeUpdateOne) SetFileID(i int) *OtaBtreeUpdateOne {
	obuo.mutation.ResetFileID()
	obuo.mutation.SetFileID(i)
	return obuo
}

// SetNillableFileID sets the "file_id" field if the given value is not nil.
func (obuo *OtaBtreeUpdateOne) SetNillableFileID(i *int) *OtaBtreeUpdateOne {
	if i != nil {
		obuo.SetFileID(*i)
	}
	return obuo
}

// AddFileID adds i to the "file_id" field.
func (obuo *OtaBtreeUpdateOne) AddFileID(i int) *OtaBtreeUpdateOne {
	obuo.mutation.AddFileID(i)
	return obuo
}

// SetName sets the "name" field.
func (obuo *OtaBtreeUpdateOne) SetName(s string) *OtaBtreeUpdateOne {
	obuo.mutation.SetName(s)
	return obuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (obuo *OtaBtreeUpdateOne) SetNillableName(s *string) *OtaBtreeUpdateOne {
	if s != nil {
		obuo.SetName(*s)
	}
	return obuo
}

// SetRemark sets the "remark" field.
func (obuo *OtaBtreeUpdateOne) SetRemark(s string) *OtaBtreeUpdateOne {
	obuo.mutation.SetRemark(s)
	return obuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (obuo *OtaBtreeUpdateOne) SetNillableRemark(s *string) *OtaBtreeUpdateOne {
	if s != nil {
		obuo.SetRemark(*s)
	}
	return obuo
}

// SetUpdateTime sets the "update_time" field.
func (obuo *OtaBtreeUpdateOne) SetUpdateTime(t time.Time) *OtaBtreeUpdateOne {
	obuo.mutation.SetUpdateTime(t)
	return obuo
}

// Mutation returns the OtaBtreeMutation object of the builder.
func (obuo *OtaBtreeUpdateOne) Mutation() *OtaBtreeMutation {
	return obuo.mutation
}

// Where appends a list predicates to the OtaBtreeUpdate builder.
func (obuo *OtaBtreeUpdateOne) Where(ps ...predicate.OtaBtree) *OtaBtreeUpdateOne {
	obuo.mutation.Where(ps...)
	return obuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (obuo *OtaBtreeUpdateOne) Select(field string, fields ...string) *OtaBtreeUpdateOne {
	obuo.fields = append([]string{field}, fields...)
	return obuo
}

// Save executes the query and returns the updated OtaBtree entity.
func (obuo *OtaBtreeUpdateOne) Save(ctx context.Context) (*OtaBtree, error) {
	if err := obuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, obuo.sqlSave, obuo.mutation, obuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (obuo *OtaBtreeUpdateOne) SaveX(ctx context.Context) *OtaBtree {
	node, err := obuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (obuo *OtaBtreeUpdateOne) Exec(ctx context.Context) error {
	_, err := obuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (obuo *OtaBtreeUpdateOne) ExecX(ctx context.Context) {
	if err := obuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (obuo *OtaBtreeUpdateOne) defaults() error {
	if _, ok := obuo.mutation.UpdateTime(); !ok {
		if otabtree.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized otabtree.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := otabtree.UpdateDefaultUpdateTime()
		obuo.mutation.SetUpdateTime(v)
	}
	return nil
}

func (obuo *OtaBtreeUpdateOne) sqlSave(ctx context.Context) (_node *OtaBtree, err error) {
	_spec := sqlgraph.NewUpdateSpec(otabtree.Table, otabtree.Columns, sqlgraph.NewFieldSpec(otabtree.FieldID, field.TypeInt))
	id, ok := obuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OtaBtree.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := obuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, otabtree.FieldID)
		for _, f := range fields {
			if !otabtree.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != otabtree.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := obuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := obuo.mutation.DeleteTime(); ok {
		_spec.SetField(otabtree.FieldDeleteTime, field.TypeTime, value)
	}
	if obuo.mutation.DeleteTimeCleared() {
		_spec.ClearField(otabtree.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := obuo.mutation.FileID(); ok {
		_spec.SetField(otabtree.FieldFileID, field.TypeInt, value)
	}
	if value, ok := obuo.mutation.AddedFileID(); ok {
		_spec.AddField(otabtree.FieldFileID, field.TypeInt, value)
	}
	if value, ok := obuo.mutation.Name(); ok {
		_spec.SetField(otabtree.FieldName, field.TypeString, value)
	}
	if value, ok := obuo.mutation.Remark(); ok {
		_spec.SetField(otabtree.FieldRemark, field.TypeString, value)
	}
	if value, ok := obuo.mutation.UpdateTime(); ok {
		_spec.SetField(otabtree.FieldUpdateTime, field.TypeTime, value)
	}
	_node = &OtaBtree{config: obuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, obuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{otabtree.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	obuo.mutation.done = true
	return _node, nil
}
