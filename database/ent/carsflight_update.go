// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/carsflight"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"github.com/jianbo-zh/jydata/database/schema/types"
)

// CarsFlightUpdate is the builder for updating CarsFlight entities.
type CarsFlightUpdate struct {
	config
	hooks    []Hook
	mutation *CarsFlightMutation
}

// Where appends a list predicates to the CarsFlightUpdate builder.
func (cfu *CarsFlightUpdate) Where(ps ...predicate.CarsFlight) *CarsFlightUpdate {
	cfu.mutation.Where(ps...)
	return cfu
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (cfu *CarsFlightUpdate) SetScenicAreaID(i int) *CarsFlightUpdate {
	cfu.mutation.ResetScenicAreaID()
	cfu.mutation.SetScenicAreaID(i)
	return cfu
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (cfu *CarsFlightUpdate) SetNillableScenicAreaID(i *int) *CarsFlightUpdate {
	if i != nil {
		cfu.SetScenicAreaID(*i)
	}
	return cfu
}

// AddScenicAreaID adds i to the "scenic_area_id" field.
func (cfu *CarsFlightUpdate) AddScenicAreaID(i int) *CarsFlightUpdate {
	cfu.mutation.AddScenicAreaID(i)
	return cfu
}

// SetFlightNo sets the "flight_no" field.
func (cfu *CarsFlightUpdate) SetFlightNo(s string) *CarsFlightUpdate {
	cfu.mutation.SetFlightNo(s)
	return cfu
}

// SetNillableFlightNo sets the "flight_no" field if the given value is not nil.
func (cfu *CarsFlightUpdate) SetNillableFlightNo(s *string) *CarsFlightUpdate {
	if s != nil {
		cfu.SetFlightNo(*s)
	}
	return cfu
}

// SetCarID sets the "car_id" field.
func (cfu *CarsFlightUpdate) SetCarID(i int) *CarsFlightUpdate {
	cfu.mutation.ResetCarID()
	cfu.mutation.SetCarID(i)
	return cfu
}

// SetNillableCarID sets the "car_id" field if the given value is not nil.
func (cfu *CarsFlightUpdate) SetNillableCarID(i *int) *CarsFlightUpdate {
	if i != nil {
		cfu.SetCarID(*i)
	}
	return cfu
}

// AddCarID adds i to the "car_id" field.
func (cfu *CarsFlightUpdate) AddCarID(i int) *CarsFlightUpdate {
	cfu.mutation.AddCarID(i)
	return cfu
}

// SetCarName sets the "car_name" field.
func (cfu *CarsFlightUpdate) SetCarName(s string) *CarsFlightUpdate {
	cfu.mutation.SetCarName(s)
	return cfu
}

// SetNillableCarName sets the "car_name" field if the given value is not nil.
func (cfu *CarsFlightUpdate) SetNillableCarName(s *string) *CarsFlightUpdate {
	if s != nil {
		cfu.SetCarName(*s)
	}
	return cfu
}

// SetRouteID sets the "route_id" field.
func (cfu *CarsFlightUpdate) SetRouteID(i int) *CarsFlightUpdate {
	cfu.mutation.ResetRouteID()
	cfu.mutation.SetRouteID(i)
	return cfu
}

// SetNillableRouteID sets the "route_id" field if the given value is not nil.
func (cfu *CarsFlightUpdate) SetNillableRouteID(i *int) *CarsFlightUpdate {
	if i != nil {
		cfu.SetRouteID(*i)
	}
	return cfu
}

// AddRouteID adds i to the "route_id" field.
func (cfu *CarsFlightUpdate) AddRouteID(i int) *CarsFlightUpdate {
	cfu.mutation.AddRouteID(i)
	return cfu
}

// SetRouteName sets the "route_name" field.
func (cfu *CarsFlightUpdate) SetRouteName(s string) *CarsFlightUpdate {
	cfu.mutation.SetRouteName(s)
	return cfu
}

// SetNillableRouteName sets the "route_name" field if the given value is not nil.
func (cfu *CarsFlightUpdate) SetNillableRouteName(s *string) *CarsFlightUpdate {
	if s != nil {
		cfu.SetRouteName(*s)
	}
	return cfu
}

// SetSeatsNum sets the "seats_num" field.
func (cfu *CarsFlightUpdate) SetSeatsNum(i int) *CarsFlightUpdate {
	cfu.mutation.ResetSeatsNum()
	cfu.mutation.SetSeatsNum(i)
	return cfu
}

// SetNillableSeatsNum sets the "seats_num" field if the given value is not nil.
func (cfu *CarsFlightUpdate) SetNillableSeatsNum(i *int) *CarsFlightUpdate {
	if i != nil {
		cfu.SetSeatsNum(*i)
	}
	return cfu
}

// AddSeatsNum adds i to the "seats_num" field.
func (cfu *CarsFlightUpdate) AddSeatsNum(i int) *CarsFlightUpdate {
	cfu.mutation.AddSeatsNum(i)
	return cfu
}

// SetState sets the "state" field.
func (cfu *CarsFlightUpdate) SetState(i int) *CarsFlightUpdate {
	cfu.mutation.ResetState()
	cfu.mutation.SetState(i)
	return cfu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (cfu *CarsFlightUpdate) SetNillableState(i *int) *CarsFlightUpdate {
	if i != nil {
		cfu.SetState(*i)
	}
	return cfu
}

// AddState adds i to the "state" field.
func (cfu *CarsFlightUpdate) AddState(i int) *CarsFlightUpdate {
	cfu.mutation.AddState(i)
	return cfu
}

// SetStopIds sets the "stop_ids" field.
func (cfu *CarsFlightUpdate) SetStopIds(i []int) *CarsFlightUpdate {
	cfu.mutation.SetStopIds(i)
	return cfu
}

// AppendStopIds appends i to the "stop_ids" field.
func (cfu *CarsFlightUpdate) AppendStopIds(i []int) *CarsFlightUpdate {
	cfu.mutation.AppendStopIds(i)
	return cfu
}

// ClearStopIds clears the value of the "stop_ids" field.
func (cfu *CarsFlightUpdate) ClearStopIds() *CarsFlightUpdate {
	cfu.mutation.ClearStopIds()
	return cfu
}

// SetPassIds sets the "pass_ids" field.
func (cfu *CarsFlightUpdate) SetPassIds(i []int) *CarsFlightUpdate {
	cfu.mutation.SetPassIds(i)
	return cfu
}

// AppendPassIds appends i to the "pass_ids" field.
func (cfu *CarsFlightUpdate) AppendPassIds(i []int) *CarsFlightUpdate {
	cfu.mutation.AppendPassIds(i)
	return cfu
}

// ClearPassIds clears the value of the "pass_ids" field.
func (cfu *CarsFlightUpdate) ClearPassIds() *CarsFlightUpdate {
	cfu.mutation.ClearPassIds()
	return cfu
}

// SetRemark sets the "remark" field.
func (cfu *CarsFlightUpdate) SetRemark(s string) *CarsFlightUpdate {
	cfu.mutation.SetRemark(s)
	return cfu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (cfu *CarsFlightUpdate) SetNillableRemark(s *string) *CarsFlightUpdate {
	if s != nil {
		cfu.SetRemark(*s)
	}
	return cfu
}

// SetStopStock sets the "stop_stock" field.
func (cfu *CarsFlightUpdate) SetStopStock(ts []types.StopStock) *CarsFlightUpdate {
	cfu.mutation.SetStopStock(ts)
	return cfu
}

// AppendStopStock appends ts to the "stop_stock" field.
func (cfu *CarsFlightUpdate) AppendStopStock(ts []types.StopStock) *CarsFlightUpdate {
	cfu.mutation.AppendStopStock(ts)
	return cfu
}

// SetExtendYokeeID sets the "extend_yokee_id" field.
func (cfu *CarsFlightUpdate) SetExtendYokeeID(i int) *CarsFlightUpdate {
	cfu.mutation.ResetExtendYokeeID()
	cfu.mutation.SetExtendYokeeID(i)
	return cfu
}

// SetNillableExtendYokeeID sets the "extend_yokee_id" field if the given value is not nil.
func (cfu *CarsFlightUpdate) SetNillableExtendYokeeID(i *int) *CarsFlightUpdate {
	if i != nil {
		cfu.SetExtendYokeeID(*i)
	}
	return cfu
}

// AddExtendYokeeID adds i to the "extend_yokee_id" field.
func (cfu *CarsFlightUpdate) AddExtendYokeeID(i int) *CarsFlightUpdate {
	cfu.mutation.AddExtendYokeeID(i)
	return cfu
}

// ClearExtendYokeeID clears the value of the "extend_yokee_id" field.
func (cfu *CarsFlightUpdate) ClearExtendYokeeID() *CarsFlightUpdate {
	cfu.mutation.ClearExtendYokeeID()
	return cfu
}

// SetDepartureTime sets the "departure_time" field.
func (cfu *CarsFlightUpdate) SetDepartureTime(t time.Time) *CarsFlightUpdate {
	cfu.mutation.SetDepartureTime(t)
	return cfu
}

// SetNillableDepartureTime sets the "departure_time" field if the given value is not nil.
func (cfu *CarsFlightUpdate) SetNillableDepartureTime(t *time.Time) *CarsFlightUpdate {
	if t != nil {
		cfu.SetDepartureTime(*t)
	}
	return cfu
}

// ClearDepartureTime clears the value of the "departure_time" field.
func (cfu *CarsFlightUpdate) ClearDepartureTime() *CarsFlightUpdate {
	cfu.mutation.ClearDepartureTime()
	return cfu
}

// SetFinishTime sets the "finish_time" field.
func (cfu *CarsFlightUpdate) SetFinishTime(t time.Time) *CarsFlightUpdate {
	cfu.mutation.SetFinishTime(t)
	return cfu
}

// SetNillableFinishTime sets the "finish_time" field if the given value is not nil.
func (cfu *CarsFlightUpdate) SetNillableFinishTime(t *time.Time) *CarsFlightUpdate {
	if t != nil {
		cfu.SetFinishTime(*t)
	}
	return cfu
}

// ClearFinishTime clears the value of the "finish_time" field.
func (cfu *CarsFlightUpdate) ClearFinishTime() *CarsFlightUpdate {
	cfu.mutation.ClearFinishTime()
	return cfu
}

// SetUpdateTime sets the "update_time" field.
func (cfu *CarsFlightUpdate) SetUpdateTime(t time.Time) *CarsFlightUpdate {
	cfu.mutation.SetUpdateTime(t)
	return cfu
}

// Mutation returns the CarsFlightMutation object of the builder.
func (cfu *CarsFlightUpdate) Mutation() *CarsFlightMutation {
	return cfu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cfu *CarsFlightUpdate) Save(ctx context.Context) (int, error) {
	cfu.defaults()
	return withHooks(ctx, cfu.sqlSave, cfu.mutation, cfu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cfu *CarsFlightUpdate) SaveX(ctx context.Context) int {
	affected, err := cfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cfu *CarsFlightUpdate) Exec(ctx context.Context) error {
	_, err := cfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cfu *CarsFlightUpdate) ExecX(ctx context.Context) {
	if err := cfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cfu *CarsFlightUpdate) defaults() {
	if _, ok := cfu.mutation.UpdateTime(); !ok {
		v := carsflight.UpdateDefaultUpdateTime()
		cfu.mutation.SetUpdateTime(v)
	}
}

func (cfu *CarsFlightUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(carsflight.Table, carsflight.Columns, sqlgraph.NewFieldSpec(carsflight.FieldID, field.TypeInt))
	if ps := cfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cfu.mutation.ScenicAreaID(); ok {
		_spec.SetField(carsflight.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := cfu.mutation.AddedScenicAreaID(); ok {
		_spec.AddField(carsflight.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := cfu.mutation.FlightNo(); ok {
		_spec.SetField(carsflight.FieldFlightNo, field.TypeString, value)
	}
	if value, ok := cfu.mutation.CarID(); ok {
		_spec.SetField(carsflight.FieldCarID, field.TypeInt, value)
	}
	if value, ok := cfu.mutation.AddedCarID(); ok {
		_spec.AddField(carsflight.FieldCarID, field.TypeInt, value)
	}
	if value, ok := cfu.mutation.CarName(); ok {
		_spec.SetField(carsflight.FieldCarName, field.TypeString, value)
	}
	if value, ok := cfu.mutation.RouteID(); ok {
		_spec.SetField(carsflight.FieldRouteID, field.TypeInt, value)
	}
	if value, ok := cfu.mutation.AddedRouteID(); ok {
		_spec.AddField(carsflight.FieldRouteID, field.TypeInt, value)
	}
	if value, ok := cfu.mutation.RouteName(); ok {
		_spec.SetField(carsflight.FieldRouteName, field.TypeString, value)
	}
	if value, ok := cfu.mutation.SeatsNum(); ok {
		_spec.SetField(carsflight.FieldSeatsNum, field.TypeInt, value)
	}
	if value, ok := cfu.mutation.AddedSeatsNum(); ok {
		_spec.AddField(carsflight.FieldSeatsNum, field.TypeInt, value)
	}
	if value, ok := cfu.mutation.State(); ok {
		_spec.SetField(carsflight.FieldState, field.TypeInt, value)
	}
	if value, ok := cfu.mutation.AddedState(); ok {
		_spec.AddField(carsflight.FieldState, field.TypeInt, value)
	}
	if value, ok := cfu.mutation.StopIds(); ok {
		_spec.SetField(carsflight.FieldStopIds, field.TypeJSON, value)
	}
	if value, ok := cfu.mutation.AppendedStopIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, carsflight.FieldStopIds, value)
		})
	}
	if cfu.mutation.StopIdsCleared() {
		_spec.ClearField(carsflight.FieldStopIds, field.TypeJSON)
	}
	if value, ok := cfu.mutation.PassIds(); ok {
		_spec.SetField(carsflight.FieldPassIds, field.TypeJSON, value)
	}
	if value, ok := cfu.mutation.AppendedPassIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, carsflight.FieldPassIds, value)
		})
	}
	if cfu.mutation.PassIdsCleared() {
		_spec.ClearField(carsflight.FieldPassIds, field.TypeJSON)
	}
	if value, ok := cfu.mutation.Remark(); ok {
		_spec.SetField(carsflight.FieldRemark, field.TypeString, value)
	}
	if value, ok := cfu.mutation.StopStock(); ok {
		_spec.SetField(carsflight.FieldStopStock, field.TypeJSON, value)
	}
	if value, ok := cfu.mutation.AppendedStopStock(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, carsflight.FieldStopStock, value)
		})
	}
	if value, ok := cfu.mutation.ExtendYokeeID(); ok {
		_spec.SetField(carsflight.FieldExtendYokeeID, field.TypeInt, value)
	}
	if value, ok := cfu.mutation.AddedExtendYokeeID(); ok {
		_spec.AddField(carsflight.FieldExtendYokeeID, field.TypeInt, value)
	}
	if cfu.mutation.ExtendYokeeIDCleared() {
		_spec.ClearField(carsflight.FieldExtendYokeeID, field.TypeInt)
	}
	if value, ok := cfu.mutation.DepartureTime(); ok {
		_spec.SetField(carsflight.FieldDepartureTime, field.TypeTime, value)
	}
	if cfu.mutation.DepartureTimeCleared() {
		_spec.ClearField(carsflight.FieldDepartureTime, field.TypeTime)
	}
	if value, ok := cfu.mutation.FinishTime(); ok {
		_spec.SetField(carsflight.FieldFinishTime, field.TypeTime, value)
	}
	if cfu.mutation.FinishTimeCleared() {
		_spec.ClearField(carsflight.FieldFinishTime, field.TypeTime)
	}
	if value, ok := cfu.mutation.UpdateTime(); ok {
		_spec.SetField(carsflight.FieldUpdateTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carsflight.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cfu.mutation.done = true
	return n, nil
}

// CarsFlightUpdateOne is the builder for updating a single CarsFlight entity.
type CarsFlightUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CarsFlightMutation
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (cfuo *CarsFlightUpdateOne) SetScenicAreaID(i int) *CarsFlightUpdateOne {
	cfuo.mutation.ResetScenicAreaID()
	cfuo.mutation.SetScenicAreaID(i)
	return cfuo
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (cfuo *CarsFlightUpdateOne) SetNillableScenicAreaID(i *int) *CarsFlightUpdateOne {
	if i != nil {
		cfuo.SetScenicAreaID(*i)
	}
	return cfuo
}

// AddScenicAreaID adds i to the "scenic_area_id" field.
func (cfuo *CarsFlightUpdateOne) AddScenicAreaID(i int) *CarsFlightUpdateOne {
	cfuo.mutation.AddScenicAreaID(i)
	return cfuo
}

// SetFlightNo sets the "flight_no" field.
func (cfuo *CarsFlightUpdateOne) SetFlightNo(s string) *CarsFlightUpdateOne {
	cfuo.mutation.SetFlightNo(s)
	return cfuo
}

// SetNillableFlightNo sets the "flight_no" field if the given value is not nil.
func (cfuo *CarsFlightUpdateOne) SetNillableFlightNo(s *string) *CarsFlightUpdateOne {
	if s != nil {
		cfuo.SetFlightNo(*s)
	}
	return cfuo
}

// SetCarID sets the "car_id" field.
func (cfuo *CarsFlightUpdateOne) SetCarID(i int) *CarsFlightUpdateOne {
	cfuo.mutation.ResetCarID()
	cfuo.mutation.SetCarID(i)
	return cfuo
}

// SetNillableCarID sets the "car_id" field if the given value is not nil.
func (cfuo *CarsFlightUpdateOne) SetNillableCarID(i *int) *CarsFlightUpdateOne {
	if i != nil {
		cfuo.SetCarID(*i)
	}
	return cfuo
}

// AddCarID adds i to the "car_id" field.
func (cfuo *CarsFlightUpdateOne) AddCarID(i int) *CarsFlightUpdateOne {
	cfuo.mutation.AddCarID(i)
	return cfuo
}

// SetCarName sets the "car_name" field.
func (cfuo *CarsFlightUpdateOne) SetCarName(s string) *CarsFlightUpdateOne {
	cfuo.mutation.SetCarName(s)
	return cfuo
}

// SetNillableCarName sets the "car_name" field if the given value is not nil.
func (cfuo *CarsFlightUpdateOne) SetNillableCarName(s *string) *CarsFlightUpdateOne {
	if s != nil {
		cfuo.SetCarName(*s)
	}
	return cfuo
}

// SetRouteID sets the "route_id" field.
func (cfuo *CarsFlightUpdateOne) SetRouteID(i int) *CarsFlightUpdateOne {
	cfuo.mutation.ResetRouteID()
	cfuo.mutation.SetRouteID(i)
	return cfuo
}

// SetNillableRouteID sets the "route_id" field if the given value is not nil.
func (cfuo *CarsFlightUpdateOne) SetNillableRouteID(i *int) *CarsFlightUpdateOne {
	if i != nil {
		cfuo.SetRouteID(*i)
	}
	return cfuo
}

// AddRouteID adds i to the "route_id" field.
func (cfuo *CarsFlightUpdateOne) AddRouteID(i int) *CarsFlightUpdateOne {
	cfuo.mutation.AddRouteID(i)
	return cfuo
}

// SetRouteName sets the "route_name" field.
func (cfuo *CarsFlightUpdateOne) SetRouteName(s string) *CarsFlightUpdateOne {
	cfuo.mutation.SetRouteName(s)
	return cfuo
}

// SetNillableRouteName sets the "route_name" field if the given value is not nil.
func (cfuo *CarsFlightUpdateOne) SetNillableRouteName(s *string) *CarsFlightUpdateOne {
	if s != nil {
		cfuo.SetRouteName(*s)
	}
	return cfuo
}

// SetSeatsNum sets the "seats_num" field.
func (cfuo *CarsFlightUpdateOne) SetSeatsNum(i int) *CarsFlightUpdateOne {
	cfuo.mutation.ResetSeatsNum()
	cfuo.mutation.SetSeatsNum(i)
	return cfuo
}

// SetNillableSeatsNum sets the "seats_num" field if the given value is not nil.
func (cfuo *CarsFlightUpdateOne) SetNillableSeatsNum(i *int) *CarsFlightUpdateOne {
	if i != nil {
		cfuo.SetSeatsNum(*i)
	}
	return cfuo
}

// AddSeatsNum adds i to the "seats_num" field.
func (cfuo *CarsFlightUpdateOne) AddSeatsNum(i int) *CarsFlightUpdateOne {
	cfuo.mutation.AddSeatsNum(i)
	return cfuo
}

// SetState sets the "state" field.
func (cfuo *CarsFlightUpdateOne) SetState(i int) *CarsFlightUpdateOne {
	cfuo.mutation.ResetState()
	cfuo.mutation.SetState(i)
	return cfuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (cfuo *CarsFlightUpdateOne) SetNillableState(i *int) *CarsFlightUpdateOne {
	if i != nil {
		cfuo.SetState(*i)
	}
	return cfuo
}

// AddState adds i to the "state" field.
func (cfuo *CarsFlightUpdateOne) AddState(i int) *CarsFlightUpdateOne {
	cfuo.mutation.AddState(i)
	return cfuo
}

// SetStopIds sets the "stop_ids" field.
func (cfuo *CarsFlightUpdateOne) SetStopIds(i []int) *CarsFlightUpdateOne {
	cfuo.mutation.SetStopIds(i)
	return cfuo
}

// AppendStopIds appends i to the "stop_ids" field.
func (cfuo *CarsFlightUpdateOne) AppendStopIds(i []int) *CarsFlightUpdateOne {
	cfuo.mutation.AppendStopIds(i)
	return cfuo
}

// ClearStopIds clears the value of the "stop_ids" field.
func (cfuo *CarsFlightUpdateOne) ClearStopIds() *CarsFlightUpdateOne {
	cfuo.mutation.ClearStopIds()
	return cfuo
}

// SetPassIds sets the "pass_ids" field.
func (cfuo *CarsFlightUpdateOne) SetPassIds(i []int) *CarsFlightUpdateOne {
	cfuo.mutation.SetPassIds(i)
	return cfuo
}

// AppendPassIds appends i to the "pass_ids" field.
func (cfuo *CarsFlightUpdateOne) AppendPassIds(i []int) *CarsFlightUpdateOne {
	cfuo.mutation.AppendPassIds(i)
	return cfuo
}

// ClearPassIds clears the value of the "pass_ids" field.
func (cfuo *CarsFlightUpdateOne) ClearPassIds() *CarsFlightUpdateOne {
	cfuo.mutation.ClearPassIds()
	return cfuo
}

// SetRemark sets the "remark" field.
func (cfuo *CarsFlightUpdateOne) SetRemark(s string) *CarsFlightUpdateOne {
	cfuo.mutation.SetRemark(s)
	return cfuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (cfuo *CarsFlightUpdateOne) SetNillableRemark(s *string) *CarsFlightUpdateOne {
	if s != nil {
		cfuo.SetRemark(*s)
	}
	return cfuo
}

// SetStopStock sets the "stop_stock" field.
func (cfuo *CarsFlightUpdateOne) SetStopStock(ts []types.StopStock) *CarsFlightUpdateOne {
	cfuo.mutation.SetStopStock(ts)
	return cfuo
}

// AppendStopStock appends ts to the "stop_stock" field.
func (cfuo *CarsFlightUpdateOne) AppendStopStock(ts []types.StopStock) *CarsFlightUpdateOne {
	cfuo.mutation.AppendStopStock(ts)
	return cfuo
}

// SetExtendYokeeID sets the "extend_yokee_id" field.
func (cfuo *CarsFlightUpdateOne) SetExtendYokeeID(i int) *CarsFlightUpdateOne {
	cfuo.mutation.ResetExtendYokeeID()
	cfuo.mutation.SetExtendYokeeID(i)
	return cfuo
}

// SetNillableExtendYokeeID sets the "extend_yokee_id" field if the given value is not nil.
func (cfuo *CarsFlightUpdateOne) SetNillableExtendYokeeID(i *int) *CarsFlightUpdateOne {
	if i != nil {
		cfuo.SetExtendYokeeID(*i)
	}
	return cfuo
}

// AddExtendYokeeID adds i to the "extend_yokee_id" field.
func (cfuo *CarsFlightUpdateOne) AddExtendYokeeID(i int) *CarsFlightUpdateOne {
	cfuo.mutation.AddExtendYokeeID(i)
	return cfuo
}

// ClearExtendYokeeID clears the value of the "extend_yokee_id" field.
func (cfuo *CarsFlightUpdateOne) ClearExtendYokeeID() *CarsFlightUpdateOne {
	cfuo.mutation.ClearExtendYokeeID()
	return cfuo
}

// SetDepartureTime sets the "departure_time" field.
func (cfuo *CarsFlightUpdateOne) SetDepartureTime(t time.Time) *CarsFlightUpdateOne {
	cfuo.mutation.SetDepartureTime(t)
	return cfuo
}

// SetNillableDepartureTime sets the "departure_time" field if the given value is not nil.
func (cfuo *CarsFlightUpdateOne) SetNillableDepartureTime(t *time.Time) *CarsFlightUpdateOne {
	if t != nil {
		cfuo.SetDepartureTime(*t)
	}
	return cfuo
}

// ClearDepartureTime clears the value of the "departure_time" field.
func (cfuo *CarsFlightUpdateOne) ClearDepartureTime() *CarsFlightUpdateOne {
	cfuo.mutation.ClearDepartureTime()
	return cfuo
}

// SetFinishTime sets the "finish_time" field.
func (cfuo *CarsFlightUpdateOne) SetFinishTime(t time.Time) *CarsFlightUpdateOne {
	cfuo.mutation.SetFinishTime(t)
	return cfuo
}

// SetNillableFinishTime sets the "finish_time" field if the given value is not nil.
func (cfuo *CarsFlightUpdateOne) SetNillableFinishTime(t *time.Time) *CarsFlightUpdateOne {
	if t != nil {
		cfuo.SetFinishTime(*t)
	}
	return cfuo
}

// ClearFinishTime clears the value of the "finish_time" field.
func (cfuo *CarsFlightUpdateOne) ClearFinishTime() *CarsFlightUpdateOne {
	cfuo.mutation.ClearFinishTime()
	return cfuo
}

// SetUpdateTime sets the "update_time" field.
func (cfuo *CarsFlightUpdateOne) SetUpdateTime(t time.Time) *CarsFlightUpdateOne {
	cfuo.mutation.SetUpdateTime(t)
	return cfuo
}

// Mutation returns the CarsFlightMutation object of the builder.
func (cfuo *CarsFlightUpdateOne) Mutation() *CarsFlightMutation {
	return cfuo.mutation
}

// Where appends a list predicates to the CarsFlightUpdate builder.
func (cfuo *CarsFlightUpdateOne) Where(ps ...predicate.CarsFlight) *CarsFlightUpdateOne {
	cfuo.mutation.Where(ps...)
	return cfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cfuo *CarsFlightUpdateOne) Select(field string, fields ...string) *CarsFlightUpdateOne {
	cfuo.fields = append([]string{field}, fields...)
	return cfuo
}

// Save executes the query and returns the updated CarsFlight entity.
func (cfuo *CarsFlightUpdateOne) Save(ctx context.Context) (*CarsFlight, error) {
	cfuo.defaults()
	return withHooks(ctx, cfuo.sqlSave, cfuo.mutation, cfuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cfuo *CarsFlightUpdateOne) SaveX(ctx context.Context) *CarsFlight {
	node, err := cfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cfuo *CarsFlightUpdateOne) Exec(ctx context.Context) error {
	_, err := cfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cfuo *CarsFlightUpdateOne) ExecX(ctx context.Context) {
	if err := cfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cfuo *CarsFlightUpdateOne) defaults() {
	if _, ok := cfuo.mutation.UpdateTime(); !ok {
		v := carsflight.UpdateDefaultUpdateTime()
		cfuo.mutation.SetUpdateTime(v)
	}
}

func (cfuo *CarsFlightUpdateOne) sqlSave(ctx context.Context) (_node *CarsFlight, err error) {
	_spec := sqlgraph.NewUpdateSpec(carsflight.Table, carsflight.Columns, sqlgraph.NewFieldSpec(carsflight.FieldID, field.TypeInt))
	id, ok := cfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CarsFlight.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carsflight.FieldID)
		for _, f := range fields {
			if !carsflight.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != carsflight.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cfuo.mutation.ScenicAreaID(); ok {
		_spec.SetField(carsflight.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := cfuo.mutation.AddedScenicAreaID(); ok {
		_spec.AddField(carsflight.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := cfuo.mutation.FlightNo(); ok {
		_spec.SetField(carsflight.FieldFlightNo, field.TypeString, value)
	}
	if value, ok := cfuo.mutation.CarID(); ok {
		_spec.SetField(carsflight.FieldCarID, field.TypeInt, value)
	}
	if value, ok := cfuo.mutation.AddedCarID(); ok {
		_spec.AddField(carsflight.FieldCarID, field.TypeInt, value)
	}
	if value, ok := cfuo.mutation.CarName(); ok {
		_spec.SetField(carsflight.FieldCarName, field.TypeString, value)
	}
	if value, ok := cfuo.mutation.RouteID(); ok {
		_spec.SetField(carsflight.FieldRouteID, field.TypeInt, value)
	}
	if value, ok := cfuo.mutation.AddedRouteID(); ok {
		_spec.AddField(carsflight.FieldRouteID, field.TypeInt, value)
	}
	if value, ok := cfuo.mutation.RouteName(); ok {
		_spec.SetField(carsflight.FieldRouteName, field.TypeString, value)
	}
	if value, ok := cfuo.mutation.SeatsNum(); ok {
		_spec.SetField(carsflight.FieldSeatsNum, field.TypeInt, value)
	}
	if value, ok := cfuo.mutation.AddedSeatsNum(); ok {
		_spec.AddField(carsflight.FieldSeatsNum, field.TypeInt, value)
	}
	if value, ok := cfuo.mutation.State(); ok {
		_spec.SetField(carsflight.FieldState, field.TypeInt, value)
	}
	if value, ok := cfuo.mutation.AddedState(); ok {
		_spec.AddField(carsflight.FieldState, field.TypeInt, value)
	}
	if value, ok := cfuo.mutation.StopIds(); ok {
		_spec.SetField(carsflight.FieldStopIds, field.TypeJSON, value)
	}
	if value, ok := cfuo.mutation.AppendedStopIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, carsflight.FieldStopIds, value)
		})
	}
	if cfuo.mutation.StopIdsCleared() {
		_spec.ClearField(carsflight.FieldStopIds, field.TypeJSON)
	}
	if value, ok := cfuo.mutation.PassIds(); ok {
		_spec.SetField(carsflight.FieldPassIds, field.TypeJSON, value)
	}
	if value, ok := cfuo.mutation.AppendedPassIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, carsflight.FieldPassIds, value)
		})
	}
	if cfuo.mutation.PassIdsCleared() {
		_spec.ClearField(carsflight.FieldPassIds, field.TypeJSON)
	}
	if value, ok := cfuo.mutation.Remark(); ok {
		_spec.SetField(carsflight.FieldRemark, field.TypeString, value)
	}
	if value, ok := cfuo.mutation.StopStock(); ok {
		_spec.SetField(carsflight.FieldStopStock, field.TypeJSON, value)
	}
	if value, ok := cfuo.mutation.AppendedStopStock(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, carsflight.FieldStopStock, value)
		})
	}
	if value, ok := cfuo.mutation.ExtendYokeeID(); ok {
		_spec.SetField(carsflight.FieldExtendYokeeID, field.TypeInt, value)
	}
	if value, ok := cfuo.mutation.AddedExtendYokeeID(); ok {
		_spec.AddField(carsflight.FieldExtendYokeeID, field.TypeInt, value)
	}
	if cfuo.mutation.ExtendYokeeIDCleared() {
		_spec.ClearField(carsflight.FieldExtendYokeeID, field.TypeInt)
	}
	if value, ok := cfuo.mutation.DepartureTime(); ok {
		_spec.SetField(carsflight.FieldDepartureTime, field.TypeTime, value)
	}
	if cfuo.mutation.DepartureTimeCleared() {
		_spec.ClearField(carsflight.FieldDepartureTime, field.TypeTime)
	}
	if value, ok := cfuo.mutation.FinishTime(); ok {
		_spec.SetField(carsflight.FieldFinishTime, field.TypeTime, value)
	}
	if cfuo.mutation.FinishTimeCleared() {
		_spec.ClearField(carsflight.FieldFinishTime, field.TypeTime)
	}
	if value, ok := cfuo.mutation.UpdateTime(); ok {
		_spec.SetField(carsflight.FieldUpdateTime, field.TypeTime, value)
	}
	_node = &CarsFlight{config: cfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carsflight.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cfuo.mutation.done = true
	return _node, nil
}
