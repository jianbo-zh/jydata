// Code generated by ent, DO NOT EDIT.

package task

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the task type in the database.
	Label = "task"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldRelID holds the string denoting the rel_id field in the database.
	FieldRelID = "rel_id"
	// FieldRelData holds the string denoting the rel_data field in the database.
	FieldRelData = "rel_data"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldTryTimes holds the string denoting the try_times field in the database.
	FieldTryTimes = "try_times"
	// FieldErrorMsg holds the string denoting the error_msg field in the database.
	FieldErrorMsg = "error_msg"
	// FieldStartTime holds the string denoting the start_time field in the database.
	FieldStartTime = "start_time"
	// FieldNextTime holds the string denoting the next_time field in the database.
	FieldNextTime = "next_time"
	// FieldEndTime holds the string denoting the end_time field in the database.
	FieldEndTime = "end_time"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// Table holds the table name of the task in the database.
	Table = "tasks"
)

// Columns holds all SQL columns for task fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldRelID,
	FieldRelData,
	FieldState,
	FieldTryTimes,
	FieldErrorMsg,
	FieldStartTime,
	FieldNextTime,
	FieldEndTime,
	FieldCreateTime,
	FieldUpdateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultRelID holds the default value on creation for the "rel_id" field.
	DefaultRelID int
	// DefaultState holds the default value on creation for the "state" field.
	DefaultState int
	// DefaultTryTimes holds the default value on creation for the "try_times" field.
	DefaultTryTimes int
	// DefaultErrorMsg holds the default value on creation for the "error_msg" field.
	DefaultErrorMsg string
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)

// OrderOption defines the ordering options for the Task queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByRelID orders the results by the rel_id field.
func ByRelID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRelID, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByTryTimes orders the results by the try_times field.
func ByTryTimes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTryTimes, opts...).ToFunc()
}

// ByErrorMsg orders the results by the error_msg field.
func ByErrorMsg(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldErrorMsg, opts...).ToFunc()
}

// ByStartTime orders the results by the start_time field.
func ByStartTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartTime, opts...).ToFunc()
}

// ByNextTime orders the results by the next_time field.
func ByNextTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNextTime, opts...).ToFunc()
}

// ByEndTime orders the results by the end_time field.
func ByEndTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndTime, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}
