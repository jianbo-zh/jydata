// Code generated by ent, DO NOT EDIT.

package task

import (
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldID, id))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldType, v))
}

// RelID applies equality check predicate on the "rel_id" field. It's identical to RelIDEQ.
func RelID(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldRelID, v))
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldState, v))
}

// TryTimes applies equality check predicate on the "try_times" field. It's identical to TryTimesEQ.
func TryTimes(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldTryTimes, v))
}

// ErrorMsg applies equality check predicate on the "error_msg" field. It's identical to ErrorMsgEQ.
func ErrorMsg(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldErrorMsg, v))
}

// StartTime applies equality check predicate on the "start_time" field. It's identical to StartTimeEQ.
func StartTime(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldStartTime, v))
}

// NextTime applies equality check predicate on the "next_time" field. It's identical to NextTimeEQ.
func NextTime(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldNextTime, v))
}

// EndTime applies equality check predicate on the "end_time" field. It's identical to EndTimeEQ.
func EndTime(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldEndTime, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldUpdateTime, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldType, v))
}

// RelIDEQ applies the EQ predicate on the "rel_id" field.
func RelIDEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldRelID, v))
}

// RelIDNEQ applies the NEQ predicate on the "rel_id" field.
func RelIDNEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldRelID, v))
}

// RelIDIn applies the In predicate on the "rel_id" field.
func RelIDIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldRelID, vs...))
}

// RelIDNotIn applies the NotIn predicate on the "rel_id" field.
func RelIDNotIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldRelID, vs...))
}

// RelIDGT applies the GT predicate on the "rel_id" field.
func RelIDGT(v int) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldRelID, v))
}

// RelIDGTE applies the GTE predicate on the "rel_id" field.
func RelIDGTE(v int) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldRelID, v))
}

// RelIDLT applies the LT predicate on the "rel_id" field.
func RelIDLT(v int) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldRelID, v))
}

// RelIDLTE applies the LTE predicate on the "rel_id" field.
func RelIDLTE(v int) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldRelID, v))
}

// RelDataIsNil applies the IsNil predicate on the "rel_data" field.
func RelDataIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldRelData))
}

// RelDataNotNil applies the NotNil predicate on the "rel_data" field.
func RelDataNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldRelData))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v int) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v int) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v int) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v int) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldState, v))
}

// TryTimesEQ applies the EQ predicate on the "try_times" field.
func TryTimesEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldTryTimes, v))
}

// TryTimesNEQ applies the NEQ predicate on the "try_times" field.
func TryTimesNEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldTryTimes, v))
}

// TryTimesIn applies the In predicate on the "try_times" field.
func TryTimesIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldTryTimes, vs...))
}

// TryTimesNotIn applies the NotIn predicate on the "try_times" field.
func TryTimesNotIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldTryTimes, vs...))
}

// TryTimesGT applies the GT predicate on the "try_times" field.
func TryTimesGT(v int) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldTryTimes, v))
}

// TryTimesGTE applies the GTE predicate on the "try_times" field.
func TryTimesGTE(v int) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldTryTimes, v))
}

// TryTimesLT applies the LT predicate on the "try_times" field.
func TryTimesLT(v int) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldTryTimes, v))
}

// TryTimesLTE applies the LTE predicate on the "try_times" field.
func TryTimesLTE(v int) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldTryTimes, v))
}

// ErrorMsgEQ applies the EQ predicate on the "error_msg" field.
func ErrorMsgEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldErrorMsg, v))
}

// ErrorMsgNEQ applies the NEQ predicate on the "error_msg" field.
func ErrorMsgNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldErrorMsg, v))
}

// ErrorMsgIn applies the In predicate on the "error_msg" field.
func ErrorMsgIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldErrorMsg, vs...))
}

// ErrorMsgNotIn applies the NotIn predicate on the "error_msg" field.
func ErrorMsgNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldErrorMsg, vs...))
}

// ErrorMsgGT applies the GT predicate on the "error_msg" field.
func ErrorMsgGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldErrorMsg, v))
}

// ErrorMsgGTE applies the GTE predicate on the "error_msg" field.
func ErrorMsgGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldErrorMsg, v))
}

// ErrorMsgLT applies the LT predicate on the "error_msg" field.
func ErrorMsgLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldErrorMsg, v))
}

// ErrorMsgLTE applies the LTE predicate on the "error_msg" field.
func ErrorMsgLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldErrorMsg, v))
}

// ErrorMsgContains applies the Contains predicate on the "error_msg" field.
func ErrorMsgContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldErrorMsg, v))
}

// ErrorMsgHasPrefix applies the HasPrefix predicate on the "error_msg" field.
func ErrorMsgHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldErrorMsg, v))
}

// ErrorMsgHasSuffix applies the HasSuffix predicate on the "error_msg" field.
func ErrorMsgHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldErrorMsg, v))
}

// ErrorMsgEqualFold applies the EqualFold predicate on the "error_msg" field.
func ErrorMsgEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldErrorMsg, v))
}

// ErrorMsgContainsFold applies the ContainsFold predicate on the "error_msg" field.
func ErrorMsgContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldErrorMsg, v))
}

// StartTimeEQ applies the EQ predicate on the "start_time" field.
func StartTimeEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldStartTime, v))
}

// StartTimeNEQ applies the NEQ predicate on the "start_time" field.
func StartTimeNEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldStartTime, v))
}

// StartTimeIn applies the In predicate on the "start_time" field.
func StartTimeIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldStartTime, vs...))
}

// StartTimeNotIn applies the NotIn predicate on the "start_time" field.
func StartTimeNotIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldStartTime, vs...))
}

// StartTimeGT applies the GT predicate on the "start_time" field.
func StartTimeGT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldStartTime, v))
}

// StartTimeGTE applies the GTE predicate on the "start_time" field.
func StartTimeGTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldStartTime, v))
}

// StartTimeLT applies the LT predicate on the "start_time" field.
func StartTimeLT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldStartTime, v))
}

// StartTimeLTE applies the LTE predicate on the "start_time" field.
func StartTimeLTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldStartTime, v))
}

// NextTimeEQ applies the EQ predicate on the "next_time" field.
func NextTimeEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldNextTime, v))
}

// NextTimeNEQ applies the NEQ predicate on the "next_time" field.
func NextTimeNEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldNextTime, v))
}

// NextTimeIn applies the In predicate on the "next_time" field.
func NextTimeIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldNextTime, vs...))
}

// NextTimeNotIn applies the NotIn predicate on the "next_time" field.
func NextTimeNotIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldNextTime, vs...))
}

// NextTimeGT applies the GT predicate on the "next_time" field.
func NextTimeGT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldNextTime, v))
}

// NextTimeGTE applies the GTE predicate on the "next_time" field.
func NextTimeGTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldNextTime, v))
}

// NextTimeLT applies the LT predicate on the "next_time" field.
func NextTimeLT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldNextTime, v))
}

// NextTimeLTE applies the LTE predicate on the "next_time" field.
func NextTimeLTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldNextTime, v))
}

// EndTimeEQ applies the EQ predicate on the "end_time" field.
func EndTimeEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldEndTime, v))
}

// EndTimeNEQ applies the NEQ predicate on the "end_time" field.
func EndTimeNEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldEndTime, v))
}

// EndTimeIn applies the In predicate on the "end_time" field.
func EndTimeIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldEndTime, vs...))
}

// EndTimeNotIn applies the NotIn predicate on the "end_time" field.
func EndTimeNotIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldEndTime, vs...))
}

// EndTimeGT applies the GT predicate on the "end_time" field.
func EndTimeGT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldEndTime, v))
}

// EndTimeGTE applies the GTE predicate on the "end_time" field.
func EndTimeGTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldEndTime, v))
}

// EndTimeLT applies the LT predicate on the "end_time" field.
func EndTimeLT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldEndTime, v))
}

// EndTimeLTE applies the LTE predicate on the "end_time" field.
func EndTimeLTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldEndTime, v))
}

// EndTimeIsNil applies the IsNil predicate on the "end_time" field.
func EndTimeIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldEndTime))
}

// EndTimeNotNil applies the NotNil predicate on the "end_time" field.
func EndTimeNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldEndTime))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldUpdateTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Task) predicate.Task {
	return predicate.Task(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Task) predicate.Task {
	return predicate.Task(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Task) predicate.Task {
	return predicate.Task(sql.NotPredicates(p))
}
