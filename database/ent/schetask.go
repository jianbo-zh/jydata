// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/car"
	"github.com/jianbo-zh/jydata/database/ent/schetask"
	"github.com/jianbo-zh/jydata/database/schema/types"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ScheTask is the model entity for the ScheTask schema.
type ScheTask struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 用户类型(1-user 2-admin 3-devops)
	UserType int `json:"user_type,omitempty"`
	// 用户ID
	UserID int `json:"user_id,omitempty"`
	// 景区ID
	ScenicAreaID int `json:"scenic_area_id,omitempty"`
	// 车辆ID
	CarID int `json:"car_id,omitempty"`
	// 设备ID
	DeviceID string `json:"device_id,omitempty"`
	// 地点ID
	DestID int `json:"dest_id,omitempty"`
	// 经度(wgs84)
	DestLon float64 `json:"dest_lon,omitempty"`
	// 纬度(wgs84)
	DestLat float64 `json:"dest_lat,omitempty"`
	// 调度类型（1-运营调度、2-运维调度）
	Type int `json:"type,omitempty"`
	// 负载限制（1-无限制 2-无负载调度 3-有负载调度）
	LoadLimit int `json:"load_limit,omitempty"`
	// 当前状态（1-初始化 2-调度中 3-已暂停 5-停滞不前 6-已完成 7-已取消 8-系统终止 9-异常状态）
	State int `json:"state,omitempty"`
	// 异常子状态（1-无异常 2-离线 3-道路外 4-有载人或物 5-驾驶状态异常 6-紧急制动中）
	AbnormalState int `json:"abnormal_state,omitempty"`
	// 备注
	Remark string `json:"remark,omitempty"`
	// 调度路径
	RoutingPath types.RoutingPath `json:"routing_path,omitempty"`
	// 结束时间
	EndTime time.Time `json:"end_time,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ScheTaskQuery when eager-loading is set.
	Edges        ScheTaskEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ScheTaskEdges holds the relations/edges for other nodes in the graph.
type ScheTaskEdges struct {
	// Car holds the value of the car edge.
	Car *Car `json:"car,omitempty"`
	// Events holds the value of the events edge.
	Events []*ScheTaskEvent `json:"events,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CarOrErr returns the Car value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScheTaskEdges) CarOrErr() (*Car, error) {
	if e.Car != nil {
		return e.Car, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: car.Label}
	}
	return nil, &NotLoadedError{edge: "car"}
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading.
func (e ScheTaskEdges) EventsOrErr() ([]*ScheTaskEvent, error) {
	if e.loadedTypes[1] {
		return e.Events, nil
	}
	return nil, &NotLoadedError{edge: "events"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ScheTask) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case schetask.FieldRoutingPath:
			values[i] = new([]byte)
		case schetask.FieldDestLon, schetask.FieldDestLat:
			values[i] = new(sql.NullFloat64)
		case schetask.FieldID, schetask.FieldUserType, schetask.FieldUserID, schetask.FieldScenicAreaID, schetask.FieldCarID, schetask.FieldDestID, schetask.FieldType, schetask.FieldLoadLimit, schetask.FieldState, schetask.FieldAbnormalState:
			values[i] = new(sql.NullInt64)
		case schetask.FieldDeviceID, schetask.FieldRemark:
			values[i] = new(sql.NullString)
		case schetask.FieldEndTime, schetask.FieldCreateTime, schetask.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ScheTask fields.
func (st *ScheTask) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case schetask.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			st.ID = int(value.Int64)
		case schetask.FieldUserType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_type", values[i])
			} else if value.Valid {
				st.UserType = int(value.Int64)
			}
		case schetask.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				st.UserID = int(value.Int64)
			}
		case schetask.FieldScenicAreaID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field scenic_area_id", values[i])
			} else if value.Valid {
				st.ScenicAreaID = int(value.Int64)
			}
		case schetask.FieldCarID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field car_id", values[i])
			} else if value.Valid {
				st.CarID = int(value.Int64)
			}
		case schetask.FieldDeviceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device_id", values[i])
			} else if value.Valid {
				st.DeviceID = value.String
			}
		case schetask.FieldDestID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dest_id", values[i])
			} else if value.Valid {
				st.DestID = int(value.Int64)
			}
		case schetask.FieldDestLon:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field dest_lon", values[i])
			} else if value.Valid {
				st.DestLon = value.Float64
			}
		case schetask.FieldDestLat:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field dest_lat", values[i])
			} else if value.Valid {
				st.DestLat = value.Float64
			}
		case schetask.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				st.Type = int(value.Int64)
			}
		case schetask.FieldLoadLimit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field load_limit", values[i])
			} else if value.Valid {
				st.LoadLimit = int(value.Int64)
			}
		case schetask.FieldState:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				st.State = int(value.Int64)
			}
		case schetask.FieldAbnormalState:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field abnormal_state", values[i])
			} else if value.Valid {
				st.AbnormalState = int(value.Int64)
			}
		case schetask.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				st.Remark = value.String
			}
		case schetask.FieldRoutingPath:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field routing_path", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &st.RoutingPath); err != nil {
					return fmt.Errorf("unmarshal field routing_path: %w", err)
				}
			}
		case schetask.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				st.EndTime = value.Time
			}
		case schetask.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				st.CreateTime = value.Time
			}
		case schetask.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				st.UpdateTime = value.Time
			}
		default:
			st.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ScheTask.
// This includes values selected through modifiers, order, etc.
func (st *ScheTask) Value(name string) (ent.Value, error) {
	return st.selectValues.Get(name)
}

// QueryCar queries the "car" edge of the ScheTask entity.
func (st *ScheTask) QueryCar() *CarQuery {
	return NewScheTaskClient(st.config).QueryCar(st)
}

// QueryEvents queries the "events" edge of the ScheTask entity.
func (st *ScheTask) QueryEvents() *ScheTaskEventQuery {
	return NewScheTaskClient(st.config).QueryEvents(st)
}

// Update returns a builder for updating this ScheTask.
// Note that you need to call ScheTask.Unwrap() before calling this method if this ScheTask
// was returned from a transaction, and the transaction was committed or rolled back.
func (st *ScheTask) Update() *ScheTaskUpdateOne {
	return NewScheTaskClient(st.config).UpdateOne(st)
}

// Unwrap unwraps the ScheTask entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (st *ScheTask) Unwrap() *ScheTask {
	_tx, ok := st.config.driver.(*txDriver)
	if !ok {
		panic("ent: ScheTask is not a transactional entity")
	}
	st.config.driver = _tx.drv
	return st
}

// String implements the fmt.Stringer.
func (st *ScheTask) String() string {
	var builder strings.Builder
	builder.WriteString("ScheTask(")
	builder.WriteString(fmt.Sprintf("id=%v, ", st.ID))
	builder.WriteString("user_type=")
	builder.WriteString(fmt.Sprintf("%v", st.UserType))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", st.UserID))
	builder.WriteString(", ")
	builder.WriteString("scenic_area_id=")
	builder.WriteString(fmt.Sprintf("%v", st.ScenicAreaID))
	builder.WriteString(", ")
	builder.WriteString("car_id=")
	builder.WriteString(fmt.Sprintf("%v", st.CarID))
	builder.WriteString(", ")
	builder.WriteString("device_id=")
	builder.WriteString(st.DeviceID)
	builder.WriteString(", ")
	builder.WriteString("dest_id=")
	builder.WriteString(fmt.Sprintf("%v", st.DestID))
	builder.WriteString(", ")
	builder.WriteString("dest_lon=")
	builder.WriteString(fmt.Sprintf("%v", st.DestLon))
	builder.WriteString(", ")
	builder.WriteString("dest_lat=")
	builder.WriteString(fmt.Sprintf("%v", st.DestLat))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", st.Type))
	builder.WriteString(", ")
	builder.WriteString("load_limit=")
	builder.WriteString(fmt.Sprintf("%v", st.LoadLimit))
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(fmt.Sprintf("%v", st.State))
	builder.WriteString(", ")
	builder.WriteString("abnormal_state=")
	builder.WriteString(fmt.Sprintf("%v", st.AbnormalState))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(st.Remark)
	builder.WriteString(", ")
	builder.WriteString("routing_path=")
	builder.WriteString(fmt.Sprintf("%v", st.RoutingPath))
	builder.WriteString(", ")
	builder.WriteString("end_time=")
	builder.WriteString(st.EndTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(st.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(st.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ScheTasks is a parsable slice of ScheTask.
type ScheTasks []*ScheTask
