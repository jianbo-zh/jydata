// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/poiextendyokee"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PoiExtendYokee is the model entity for the PoiExtendYokee schema.
type PoiExtendYokee struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// POI点
	PoiID int `json:"poi_id,omitempty"`
	// 九识站点ID
	YokeeStationID int `json:"yokee_station_id,omitempty"`
	// 九识站点ID
	YokeeStationName string `json:"yokee_station_name,omitempty"`
	// 九识停车点ID
	YokeeStopID int `json:"yokee_stop_id,omitempty"`
	// 九识停车点名称
	YokeeStopName string `json:"yokee_stop_name,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime   time.Time `json:"update_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PoiExtendYokee) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case poiextendyokee.FieldID, poiextendyokee.FieldPoiID, poiextendyokee.FieldYokeeStationID, poiextendyokee.FieldYokeeStopID:
			values[i] = new(sql.NullInt64)
		case poiextendyokee.FieldYokeeStationName, poiextendyokee.FieldYokeeStopName:
			values[i] = new(sql.NullString)
		case poiextendyokee.FieldCreateTime, poiextendyokee.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PoiExtendYokee fields.
func (pey *PoiExtendYokee) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case poiextendyokee.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pey.ID = int(value.Int64)
		case poiextendyokee.FieldPoiID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field poi_id", values[i])
			} else if value.Valid {
				pey.PoiID = int(value.Int64)
			}
		case poiextendyokee.FieldYokeeStationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field yokee_station_id", values[i])
			} else if value.Valid {
				pey.YokeeStationID = int(value.Int64)
			}
		case poiextendyokee.FieldYokeeStationName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field yokee_station_name", values[i])
			} else if value.Valid {
				pey.YokeeStationName = value.String
			}
		case poiextendyokee.FieldYokeeStopID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field yokee_stop_id", values[i])
			} else if value.Valid {
				pey.YokeeStopID = int(value.Int64)
			}
		case poiextendyokee.FieldYokeeStopName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field yokee_stop_name", values[i])
			} else if value.Valid {
				pey.YokeeStopName = value.String
			}
		case poiextendyokee.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				pey.CreateTime = value.Time
			}
		case poiextendyokee.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				pey.UpdateTime = value.Time
			}
		default:
			pey.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PoiExtendYokee.
// This includes values selected through modifiers, order, etc.
func (pey *PoiExtendYokee) Value(name string) (ent.Value, error) {
	return pey.selectValues.Get(name)
}

// Update returns a builder for updating this PoiExtendYokee.
// Note that you need to call PoiExtendYokee.Unwrap() before calling this method if this PoiExtendYokee
// was returned from a transaction, and the transaction was committed or rolled back.
func (pey *PoiExtendYokee) Update() *PoiExtendYokeeUpdateOne {
	return NewPoiExtendYokeeClient(pey.config).UpdateOne(pey)
}

// Unwrap unwraps the PoiExtendYokee entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pey *PoiExtendYokee) Unwrap() *PoiExtendYokee {
	_tx, ok := pey.config.driver.(*txDriver)
	if !ok {
		panic("ent: PoiExtendYokee is not a transactional entity")
	}
	pey.config.driver = _tx.drv
	return pey
}

// String implements the fmt.Stringer.
func (pey *PoiExtendYokee) String() string {
	var builder strings.Builder
	builder.WriteString("PoiExtendYokee(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pey.ID))
	builder.WriteString("poi_id=")
	builder.WriteString(fmt.Sprintf("%v", pey.PoiID))
	builder.WriteString(", ")
	builder.WriteString("yokee_station_id=")
	builder.WriteString(fmt.Sprintf("%v", pey.YokeeStationID))
	builder.WriteString(", ")
	builder.WriteString("yokee_station_name=")
	builder.WriteString(pey.YokeeStationName)
	builder.WriteString(", ")
	builder.WriteString("yokee_stop_id=")
	builder.WriteString(fmt.Sprintf("%v", pey.YokeeStopID))
	builder.WriteString(", ")
	builder.WriteString("yokee_stop_name=")
	builder.WriteString(pey.YokeeStopName)
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(pey.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(pey.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// PoiExtendYokees is a parsable slice of PoiExtendYokee.
type PoiExtendYokees []*PoiExtendYokee
