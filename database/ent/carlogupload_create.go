// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/carlogupload"
)

// CarLogUploadCreate is the builder for creating a CarLogUpload entity.
type CarLogUploadCreate struct {
	config
	mutation *CarLogUploadMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (cluc *CarLogUploadCreate) SetUUID(i int64) *CarLogUploadCreate {
	cluc.mutation.SetUUID(i)
	return cluc
}

// SetCarID sets the "car_id" field.
func (cluc *CarLogUploadCreate) SetCarID(i int) *CarLogUploadCreate {
	cluc.mutation.SetCarID(i)
	return cluc
}

// SetDeviceID sets the "device_id" field.
func (cluc *CarLogUploadCreate) SetDeviceID(s string) *CarLogUploadCreate {
	cluc.mutation.SetDeviceID(s)
	return cluc
}

// SetUploadState sets the "upload_state" field.
func (cluc *CarLogUploadCreate) SetUploadState(s string) *CarLogUploadCreate {
	cluc.mutation.SetUploadState(s)
	return cluc
}

// SetNillableUploadState sets the "upload_state" field if the given value is not nil.
func (cluc *CarLogUploadCreate) SetNillableUploadState(s *string) *CarLogUploadCreate {
	if s != nil {
		cluc.SetUploadState(*s)
	}
	return cluc
}

// SetUploadProcess sets the "upload_process" field.
func (cluc *CarLogUploadCreate) SetUploadProcess(i int) *CarLogUploadCreate {
	cluc.mutation.SetUploadProcess(i)
	return cluc
}

// SetNillableUploadProcess sets the "upload_process" field if the given value is not nil.
func (cluc *CarLogUploadCreate) SetNillableUploadProcess(i *int) *CarLogUploadCreate {
	if i != nil {
		cluc.SetUploadProcess(*i)
	}
	return cluc
}

// SetDownloadURL sets the "download_url" field.
func (cluc *CarLogUploadCreate) SetDownloadURL(s string) *CarLogUploadCreate {
	cluc.mutation.SetDownloadURL(s)
	return cluc
}

// SetCreateTime sets the "create_time" field.
func (cluc *CarLogUploadCreate) SetCreateTime(t time.Time) *CarLogUploadCreate {
	cluc.mutation.SetCreateTime(t)
	return cluc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (cluc *CarLogUploadCreate) SetNillableCreateTime(t *time.Time) *CarLogUploadCreate {
	if t != nil {
		cluc.SetCreateTime(*t)
	}
	return cluc
}

// SetUpdateTime sets the "update_time" field.
func (cluc *CarLogUploadCreate) SetUpdateTime(t time.Time) *CarLogUploadCreate {
	cluc.mutation.SetUpdateTime(t)
	return cluc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (cluc *CarLogUploadCreate) SetNillableUpdateTime(t *time.Time) *CarLogUploadCreate {
	if t != nil {
		cluc.SetUpdateTime(*t)
	}
	return cluc
}

// SetID sets the "id" field.
func (cluc *CarLogUploadCreate) SetID(i int) *CarLogUploadCreate {
	cluc.mutation.SetID(i)
	return cluc
}

// Mutation returns the CarLogUploadMutation object of the builder.
func (cluc *CarLogUploadCreate) Mutation() *CarLogUploadMutation {
	return cluc.mutation
}

// Save creates the CarLogUpload in the database.
func (cluc *CarLogUploadCreate) Save(ctx context.Context) (*CarLogUpload, error) {
	cluc.defaults()
	return withHooks(ctx, cluc.sqlSave, cluc.mutation, cluc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cluc *CarLogUploadCreate) SaveX(ctx context.Context) *CarLogUpload {
	v, err := cluc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cluc *CarLogUploadCreate) Exec(ctx context.Context) error {
	_, err := cluc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cluc *CarLogUploadCreate) ExecX(ctx context.Context) {
	if err := cluc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cluc *CarLogUploadCreate) defaults() {
	if _, ok := cluc.mutation.UploadState(); !ok {
		v := carlogupload.DefaultUploadState
		cluc.mutation.SetUploadState(v)
	}
	if _, ok := cluc.mutation.UploadProcess(); !ok {
		v := carlogupload.DefaultUploadProcess
		cluc.mutation.SetUploadProcess(v)
	}
	if _, ok := cluc.mutation.CreateTime(); !ok {
		v := carlogupload.DefaultCreateTime()
		cluc.mutation.SetCreateTime(v)
	}
	if _, ok := cluc.mutation.UpdateTime(); !ok {
		v := carlogupload.DefaultUpdateTime()
		cluc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cluc *CarLogUploadCreate) check() error {
	if _, ok := cluc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`ent: missing required field "CarLogUpload.uuid"`)}
	}
	if _, ok := cluc.mutation.CarID(); !ok {
		return &ValidationError{Name: "car_id", err: errors.New(`ent: missing required field "CarLogUpload.car_id"`)}
	}
	if _, ok := cluc.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device_id", err: errors.New(`ent: missing required field "CarLogUpload.device_id"`)}
	}
	if _, ok := cluc.mutation.UploadState(); !ok {
		return &ValidationError{Name: "upload_state", err: errors.New(`ent: missing required field "CarLogUpload.upload_state"`)}
	}
	if _, ok := cluc.mutation.UploadProcess(); !ok {
		return &ValidationError{Name: "upload_process", err: errors.New(`ent: missing required field "CarLogUpload.upload_process"`)}
	}
	if _, ok := cluc.mutation.DownloadURL(); !ok {
		return &ValidationError{Name: "download_url", err: errors.New(`ent: missing required field "CarLogUpload.download_url"`)}
	}
	if _, ok := cluc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "CarLogUpload.create_time"`)}
	}
	if _, ok := cluc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "CarLogUpload.update_time"`)}
	}
	return nil
}

func (cluc *CarLogUploadCreate) sqlSave(ctx context.Context) (*CarLogUpload, error) {
	if err := cluc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cluc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cluc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	cluc.mutation.id = &_node.ID
	cluc.mutation.done = true
	return _node, nil
}

func (cluc *CarLogUploadCreate) createSpec() (*CarLogUpload, *sqlgraph.CreateSpec) {
	var (
		_node = &CarLogUpload{config: cluc.config}
		_spec = sqlgraph.NewCreateSpec(carlogupload.Table, sqlgraph.NewFieldSpec(carlogupload.FieldID, field.TypeInt))
	)
	if id, ok := cluc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cluc.mutation.UUID(); ok {
		_spec.SetField(carlogupload.FieldUUID, field.TypeInt64, value)
		_node.UUID = value
	}
	if value, ok := cluc.mutation.CarID(); ok {
		_spec.SetField(carlogupload.FieldCarID, field.TypeInt, value)
		_node.CarID = value
	}
	if value, ok := cluc.mutation.DeviceID(); ok {
		_spec.SetField(carlogupload.FieldDeviceID, field.TypeString, value)
		_node.DeviceID = value
	}
	if value, ok := cluc.mutation.UploadState(); ok {
		_spec.SetField(carlogupload.FieldUploadState, field.TypeString, value)
		_node.UploadState = value
	}
	if value, ok := cluc.mutation.UploadProcess(); ok {
		_spec.SetField(carlogupload.FieldUploadProcess, field.TypeInt, value)
		_node.UploadProcess = value
	}
	if value, ok := cluc.mutation.DownloadURL(); ok {
		_spec.SetField(carlogupload.FieldDownloadURL, field.TypeString, value)
		_node.DownloadURL = value
	}
	if value, ok := cluc.mutation.CreateTime(); ok {
		_spec.SetField(carlogupload.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := cluc.mutation.UpdateTime(); ok {
		_spec.SetField(carlogupload.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// CarLogUploadCreateBulk is the builder for creating many CarLogUpload entities in bulk.
type CarLogUploadCreateBulk struct {
	config
	err      error
	builders []*CarLogUploadCreate
}

// Save creates the CarLogUpload entities in the database.
func (clucb *CarLogUploadCreateBulk) Save(ctx context.Context) ([]*CarLogUpload, error) {
	if clucb.err != nil {
		return nil, clucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(clucb.builders))
	nodes := make([]*CarLogUpload, len(clucb.builders))
	mutators := make([]Mutator, len(clucb.builders))
	for i := range clucb.builders {
		func(i int, root context.Context) {
			builder := clucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CarLogUploadMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, clucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, clucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, clucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (clucb *CarLogUploadCreateBulk) SaveX(ctx context.Context) []*CarLogUpload {
	v, err := clucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (clucb *CarLogUploadCreateBulk) Exec(ctx context.Context) error {
	_, err := clucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clucb *CarLogUploadCreateBulk) ExecX(ctx context.Context) {
	if err := clucb.Exec(ctx); err != nil {
		panic(err)
	}
}
