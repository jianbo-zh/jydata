// Code generated by ent, DO NOT EDIT.

package car

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the car type in the database.
	Label = "car"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDeleteTime holds the string denoting the delete_time field in the database.
	FieldDeleteTime = "delete_time"
	// FieldOperationMode holds the string denoting the operation_mode field in the database.
	FieldOperationMode = "operation_mode"
	// FieldCarName holds the string denoting the car_name field in the database.
	FieldCarName = "car_name"
	// FieldScenicAreaID holds the string denoting the scenic_area_id field in the database.
	FieldScenicAreaID = "scenic_area_id"
	// FieldDeviceID holds the string denoting the device_id field in the database.
	FieldDeviceID = "device_id"
	// FieldModelID holds the string denoting the model_id field in the database.
	FieldModelID = "model_id"
	// FieldImages holds the string denoting the images field in the database.
	FieldImages = "images"
	// FieldLicensePlate holds the string denoting the license_plate field in the database.
	FieldLicensePlate = "license_plate"
	// FieldPassengers holds the string denoting the passengers field in the database.
	FieldPassengers = "passengers"
	// FieldReservedSeats holds the string denoting the reserved_seats field in the database.
	FieldReservedSeats = "reserved_seats"
	// FieldProduceTime holds the string denoting the produce_time field in the database.
	FieldProduceTime = "produce_time"
	// FieldPowerThreshold holds the string denoting the power_threshold field in the database.
	FieldPowerThreshold = "power_threshold"
	// FieldActivateCode holds the string denoting the activate_code field in the database.
	FieldActivateCode = "activate_code"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldUseState holds the string denoting the use_state field in the database.
	FieldUseState = "use_state"
	// FieldDrivingState holds the string denoting the driving_state field in the database.
	FieldDrivingState = "driving_state"
	// FieldEmergencyState holds the string denoting the emergency_state field in the database.
	FieldEmergencyState = "emergency_state"
	// FieldUseOrderID holds the string denoting the use_order_id field in the database.
	FieldUseOrderID = "use_order_id"
	// FieldDispatchTaskID holds the string denoting the dispatch_task_id field in the database.
	FieldDispatchTaskID = "dispatch_task_id"
	// FieldUseFlightID holds the string denoting the use_flight_id field in the database.
	FieldUseFlightID = "use_flight_id"
	// FieldBindOrderCount holds the string denoting the bind_order_count field in the database.
	FieldBindOrderCount = "bind_order_count"
	// FieldTotalOrderMileage holds the string denoting the total_order_mileage field in the database.
	FieldTotalOrderMileage = "total_order_mileage"
	// FieldTotalOrderTime holds the string denoting the total_order_time field in the database.
	FieldTotalOrderTime = "total_order_time"
	// FieldTotalOrderCount holds the string denoting the total_order_count field in the database.
	FieldTotalOrderCount = "total_order_count"
	// FieldTotalOrderAmount holds the string denoting the total_order_amount field in the database.
	FieldTotalOrderAmount = "total_order_amount"
	// FieldPowerRemaining holds the string denoting the power_remaining field in the database.
	FieldPowerRemaining = "power_remaining"
	// FieldErrorCount holds the string denoting the error_count field in the database.
	FieldErrorCount = "error_count"
	// FieldErrorMessage holds the string denoting the error_message field in the database.
	FieldErrorMessage = "error_message"
	// FieldIsDeleted holds the string denoting the is_deleted field in the database.
	FieldIsDeleted = "is_deleted"
	// FieldIsCommercialCar holds the string denoting the is_commercial_car field in the database.
	FieldIsCommercialCar = "is_commercial_car"
	// FieldIsDrivingStateValid holds the string denoting the is_driving_state_valid field in the database.
	FieldIsDrivingStateValid = "is_driving_state_valid"
	// FieldMapVersion holds the string denoting the map_version field in the database.
	FieldMapVersion = "map_version"
	// FieldNextMapVersion holds the string denoting the next_map_version field in the database.
	FieldNextMapVersion = "next_map_version"
	// FieldNextMapVersionState holds the string denoting the next_map_version_state field in the database.
	FieldNextMapVersionState = "next_map_version_state"
	// FieldNextMapVersionProcess holds the string denoting the next_map_version_process field in the database.
	FieldNextMapVersionProcess = "next_map_version_process"
	// FieldGrAutoVersion holds the string denoting the gr_auto_version field in the database.
	FieldGrAutoVersion = "gr_auto_version"
	// FieldGrUIVersion holds the string denoting the gr_ui_version field in the database.
	FieldGrUIVersion = "gr_ui_version"
	// FieldCarproxyID holds the string denoting the carproxy_id field in the database.
	FieldCarproxyID = "carproxy_id"
	// FieldExtendYokeeID holds the string denoting the extend_yokee_id field in the database.
	FieldExtendYokeeID = "extend_yokee_id"
	// FieldMaxSpeedLimit holds the string denoting the max_speed_limit field in the database.
	FieldMaxSpeedLimit = "max_speed_limit"
	// FieldAliveTime holds the string denoting the alive_time field in the database.
	FieldAliveTime = "alive_time"
	// FieldRegisterTime holds the string denoting the register_time field in the database.
	FieldRegisterTime = "register_time"
	// FieldDrivingStateTime holds the string denoting the driving_state_time field in the database.
	FieldDrivingStateTime = "driving_state_time"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// EdgeBackgroundScenicArea holds the string denoting the background_scenic_area edge name in mutations.
	EdgeBackgroundScenicArea = "background_scenic_area"
	// EdgeCarsModels holds the string denoting the cars_models edge name in mutations.
	EdgeCarsModels = "cars_models"
	// EdgeCarOperateLogs holds the string denoting the car_operate_logs edge name in mutations.
	EdgeCarOperateLogs = "car_operate_logs"
	// EdgeOrders holds the string denoting the orders edge name in mutations.
	EdgeOrders = "orders"
	// EdgeStatsHourlyCar holds the string denoting the stats_hourly_car edge name in mutations.
	EdgeStatsHourlyCar = "stats_hourly_car"
	// EdgeScheTask holds the string denoting the sche_task edge name in mutations.
	EdgeScheTask = "sche_task"
	// EdgeConfigFiles holds the string denoting the config_files edge name in mutations.
	EdgeConfigFiles = "config_files"
	// EdgeCarConfigs holds the string denoting the car_configs edge name in mutations.
	EdgeCarConfigs = "car_configs"
	// Table holds the table name of the car in the database.
	Table = "cars"
	// BackgroundScenicAreaTable is the table that holds the background_scenic_area relation/edge.
	BackgroundScenicAreaTable = "cars"
	// BackgroundScenicAreaInverseTable is the table name for the ScenicArea entity.
	// It exists in this package in order to avoid circular dependency with the "scenicarea" package.
	BackgroundScenicAreaInverseTable = "scenic_areas"
	// BackgroundScenicAreaColumn is the table column denoting the background_scenic_area relation/edge.
	BackgroundScenicAreaColumn = "scenic_area_id"
	// CarsModelsTable is the table that holds the cars_models relation/edge.
	CarsModelsTable = "cars"
	// CarsModelsInverseTable is the table name for the CarsModels entity.
	// It exists in this package in order to avoid circular dependency with the "carsmodels" package.
	CarsModelsInverseTable = "cars_models"
	// CarsModelsColumn is the table column denoting the cars_models relation/edge.
	CarsModelsColumn = "model_id"
	// CarOperateLogsTable is the table that holds the car_operate_logs relation/edge.
	CarOperateLogsTable = "cars_operate_logs"
	// CarOperateLogsInverseTable is the table name for the CarsOperateLog entity.
	// It exists in this package in order to avoid circular dependency with the "carsoperatelog" package.
	CarOperateLogsInverseTable = "cars_operate_logs"
	// CarOperateLogsColumn is the table column denoting the car_operate_logs relation/edge.
	CarOperateLogsColumn = "car_id"
	// OrdersTable is the table that holds the orders relation/edge.
	OrdersTable = "orders"
	// OrdersInverseTable is the table name for the Order entity.
	// It exists in this package in order to avoid circular dependency with the "order" package.
	OrdersInverseTable = "orders"
	// OrdersColumn is the table column denoting the orders relation/edge.
	OrdersColumn = "car_id"
	// StatsHourlyCarTable is the table that holds the stats_hourly_car relation/edge.
	StatsHourlyCarTable = "stats_hourly_cars"
	// StatsHourlyCarInverseTable is the table name for the StatsHourlyCar entity.
	// It exists in this package in order to avoid circular dependency with the "statshourlycar" package.
	StatsHourlyCarInverseTable = "stats_hourly_cars"
	// StatsHourlyCarColumn is the table column denoting the stats_hourly_car relation/edge.
	StatsHourlyCarColumn = "car_id"
	// ScheTaskTable is the table that holds the sche_task relation/edge.
	ScheTaskTable = "sche_tasks"
	// ScheTaskInverseTable is the table name for the ScheTask entity.
	// It exists in this package in order to avoid circular dependency with the "schetask" package.
	ScheTaskInverseTable = "sche_tasks"
	// ScheTaskColumn is the table column denoting the sche_task relation/edge.
	ScheTaskColumn = "car_id"
	// ConfigFilesTable is the table that holds the config_files relation/edge.
	ConfigFilesTable = "car_configs"
	// ConfigFilesInverseTable is the table name for the CarConfig entity.
	// It exists in this package in order to avoid circular dependency with the "carconfig" package.
	ConfigFilesInverseTable = "car_configs"
	// ConfigFilesColumn is the table column denoting the config_files relation/edge.
	ConfigFilesColumn = "car_id"
	// CarConfigsTable is the table that holds the car_configs relation/edge.
	CarConfigsTable = "car_config_downloads"
	// CarConfigsInverseTable is the table name for the CarConfigDownload entity.
	// It exists in this package in order to avoid circular dependency with the "carconfigdownload" package.
	CarConfigsInverseTable = "car_config_downloads"
	// CarConfigsColumn is the table column denoting the car_configs relation/edge.
	CarConfigsColumn = "car_car_configs"
)

// Columns holds all SQL columns for car fields.
var Columns = []string{
	FieldID,
	FieldDeleteTime,
	FieldOperationMode,
	FieldCarName,
	FieldScenicAreaID,
	FieldDeviceID,
	FieldModelID,
	FieldImages,
	FieldLicensePlate,
	FieldPassengers,
	FieldReservedSeats,
	FieldProduceTime,
	FieldPowerThreshold,
	FieldActivateCode,
	FieldState,
	FieldUseState,
	FieldDrivingState,
	FieldEmergencyState,
	FieldUseOrderID,
	FieldDispatchTaskID,
	FieldUseFlightID,
	FieldBindOrderCount,
	FieldTotalOrderMileage,
	FieldTotalOrderTime,
	FieldTotalOrderCount,
	FieldTotalOrderAmount,
	FieldPowerRemaining,
	FieldErrorCount,
	FieldErrorMessage,
	FieldIsDeleted,
	FieldIsCommercialCar,
	FieldIsDrivingStateValid,
	FieldMapVersion,
	FieldNextMapVersion,
	FieldNextMapVersionState,
	FieldNextMapVersionProcess,
	FieldGrAutoVersion,
	FieldGrUIVersion,
	FieldCarproxyID,
	FieldExtendYokeeID,
	FieldMaxSpeedLimit,
	FieldAliveTime,
	FieldRegisterTime,
	FieldDrivingStateTime,
	FieldCreateTime,
	FieldUpdateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/jianbo-zh/jydata/database/ent/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultOperationMode holds the default value on creation for the "operation_mode" field.
	DefaultOperationMode int
	// DefaultReservedSeats holds the default value on creation for the "reserved_seats" field.
	DefaultReservedSeats int
	// DefaultState holds the default value on creation for the "state" field.
	DefaultState int
	// DefaultUseState holds the default value on creation for the "use_state" field.
	DefaultUseState int
	// DefaultDrivingState holds the default value on creation for the "driving_state" field.
	DefaultDrivingState int
	// DefaultEmergencyState holds the default value on creation for the "emergency_state" field.
	DefaultEmergencyState int
	// DefaultUseOrderID holds the default value on creation for the "use_order_id" field.
	DefaultUseOrderID int
	// DefaultDispatchTaskID holds the default value on creation for the "dispatch_task_id" field.
	DefaultDispatchTaskID int
	// DefaultUseFlightID holds the default value on creation for the "use_flight_id" field.
	DefaultUseFlightID int
	// DefaultBindOrderCount holds the default value on creation for the "bind_order_count" field.
	DefaultBindOrderCount int
	// DefaultTotalOrderMileage holds the default value on creation for the "total_order_mileage" field.
	DefaultTotalOrderMileage int
	// DefaultTotalOrderTime holds the default value on creation for the "total_order_time" field.
	DefaultTotalOrderTime int
	// DefaultTotalOrderCount holds the default value on creation for the "total_order_count" field.
	DefaultTotalOrderCount int
	// DefaultTotalOrderAmount holds the default value on creation for the "total_order_amount" field.
	DefaultTotalOrderAmount int
	// DefaultPowerRemaining holds the default value on creation for the "power_remaining" field.
	DefaultPowerRemaining int
	// DefaultErrorCount holds the default value on creation for the "error_count" field.
	DefaultErrorCount int
	// DefaultErrorMessage holds the default value on creation for the "error_message" field.
	DefaultErrorMessage string
	// DefaultIsDeleted holds the default value on creation for the "is_deleted" field.
	DefaultIsDeleted int
	// DefaultIsCommercialCar holds the default value on creation for the "is_commercial_car" field.
	DefaultIsCommercialCar int
	// DefaultIsDrivingStateValid holds the default value on creation for the "is_driving_state_valid" field.
	DefaultIsDrivingStateValid int
	// DefaultMapVersion holds the default value on creation for the "map_version" field.
	DefaultMapVersion string
	// DefaultNextMapVersion holds the default value on creation for the "next_map_version" field.
	DefaultNextMapVersion string
	// DefaultNextMapVersionState holds the default value on creation for the "next_map_version_state" field.
	DefaultNextMapVersionState string
	// DefaultNextMapVersionProcess holds the default value on creation for the "next_map_version_process" field.
	DefaultNextMapVersionProcess int
	// DefaultGrAutoVersion holds the default value on creation for the "gr_auto_version" field.
	DefaultGrAutoVersion string
	// DefaultGrUIVersion holds the default value on creation for the "gr_ui_version" field.
	DefaultGrUIVersion string
	// DefaultCarproxyID holds the default value on creation for the "carproxy_id" field.
	DefaultCarproxyID string
	// DefaultMaxSpeedLimit holds the default value on creation for the "max_speed_limit" field.
	DefaultMaxSpeedLimit float32
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)

// OrderOption defines the ordering options for the Car queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDeleteTime orders the results by the delete_time field.
func ByDeleteTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeleteTime, opts...).ToFunc()
}

// ByOperationMode orders the results by the operation_mode field.
func ByOperationMode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOperationMode, opts...).ToFunc()
}

// ByCarName orders the results by the car_name field.
func ByCarName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCarName, opts...).ToFunc()
}

// ByScenicAreaID orders the results by the scenic_area_id field.
func ByScenicAreaID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScenicAreaID, opts...).ToFunc()
}

// ByDeviceID orders the results by the device_id field.
func ByDeviceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceID, opts...).ToFunc()
}

// ByModelID orders the results by the model_id field.
func ByModelID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModelID, opts...).ToFunc()
}

// ByLicensePlate orders the results by the license_plate field.
func ByLicensePlate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLicensePlate, opts...).ToFunc()
}

// ByPassengers orders the results by the passengers field.
func ByPassengers(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassengers, opts...).ToFunc()
}

// ByReservedSeats orders the results by the reserved_seats field.
func ByReservedSeats(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReservedSeats, opts...).ToFunc()
}

// ByProduceTime orders the results by the produce_time field.
func ByProduceTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProduceTime, opts...).ToFunc()
}

// ByPowerThreshold orders the results by the power_threshold field.
func ByPowerThreshold(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPowerThreshold, opts...).ToFunc()
}

// ByActivateCode orders the results by the activate_code field.
func ByActivateCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActivateCode, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByUseState orders the results by the use_state field.
func ByUseState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUseState, opts...).ToFunc()
}

// ByDrivingState orders the results by the driving_state field.
func ByDrivingState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDrivingState, opts...).ToFunc()
}

// ByEmergencyState orders the results by the emergency_state field.
func ByEmergencyState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmergencyState, opts...).ToFunc()
}

// ByUseOrderID orders the results by the use_order_id field.
func ByUseOrderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUseOrderID, opts...).ToFunc()
}

// ByDispatchTaskID orders the results by the dispatch_task_id field.
func ByDispatchTaskID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDispatchTaskID, opts...).ToFunc()
}

// ByUseFlightID orders the results by the use_flight_id field.
func ByUseFlightID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUseFlightID, opts...).ToFunc()
}

// ByBindOrderCount orders the results by the bind_order_count field.
func ByBindOrderCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBindOrderCount, opts...).ToFunc()
}

// ByTotalOrderMileage orders the results by the total_order_mileage field.
func ByTotalOrderMileage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalOrderMileage, opts...).ToFunc()
}

// ByTotalOrderTime orders the results by the total_order_time field.
func ByTotalOrderTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalOrderTime, opts...).ToFunc()
}

// ByTotalOrderCount orders the results by the total_order_count field.
func ByTotalOrderCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalOrderCount, opts...).ToFunc()
}

// ByTotalOrderAmount orders the results by the total_order_amount field.
func ByTotalOrderAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalOrderAmount, opts...).ToFunc()
}

// ByPowerRemaining orders the results by the power_remaining field.
func ByPowerRemaining(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPowerRemaining, opts...).ToFunc()
}

// ByErrorCount orders the results by the error_count field.
func ByErrorCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldErrorCount, opts...).ToFunc()
}

// ByErrorMessage orders the results by the error_message field.
func ByErrorMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldErrorMessage, opts...).ToFunc()
}

// ByIsDeleted orders the results by the is_deleted field.
func ByIsDeleted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDeleted, opts...).ToFunc()
}

// ByIsCommercialCar orders the results by the is_commercial_car field.
func ByIsCommercialCar(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsCommercialCar, opts...).ToFunc()
}

// ByIsDrivingStateValid orders the results by the is_driving_state_valid field.
func ByIsDrivingStateValid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDrivingStateValid, opts...).ToFunc()
}

// ByMapVersion orders the results by the map_version field.
func ByMapVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMapVersion, opts...).ToFunc()
}

// ByNextMapVersion orders the results by the next_map_version field.
func ByNextMapVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNextMapVersion, opts...).ToFunc()
}

// ByNextMapVersionState orders the results by the next_map_version_state field.
func ByNextMapVersionState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNextMapVersionState, opts...).ToFunc()
}

// ByNextMapVersionProcess orders the results by the next_map_version_process field.
func ByNextMapVersionProcess(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNextMapVersionProcess, opts...).ToFunc()
}

// ByGrAutoVersion orders the results by the gr_auto_version field.
func ByGrAutoVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGrAutoVersion, opts...).ToFunc()
}

// ByGrUIVersion orders the results by the gr_ui_version field.
func ByGrUIVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGrUIVersion, opts...).ToFunc()
}

// ByCarproxyID orders the results by the carproxy_id field.
func ByCarproxyID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCarproxyID, opts...).ToFunc()
}

// ByExtendYokeeID orders the results by the extend_yokee_id field.
func ByExtendYokeeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExtendYokeeID, opts...).ToFunc()
}

// ByMaxSpeedLimit orders the results by the max_speed_limit field.
func ByMaxSpeedLimit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaxSpeedLimit, opts...).ToFunc()
}

// ByAliveTime orders the results by the alive_time field.
func ByAliveTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAliveTime, opts...).ToFunc()
}

// ByRegisterTime orders the results by the register_time field.
func ByRegisterTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegisterTime, opts...).ToFunc()
}

// ByDrivingStateTime orders the results by the driving_state_time field.
func ByDrivingStateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDrivingStateTime, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByBackgroundScenicAreaField orders the results by background_scenic_area field.
func ByBackgroundScenicAreaField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBackgroundScenicAreaStep(), sql.OrderByField(field, opts...))
	}
}

// ByCarsModelsField orders the results by cars_models field.
func ByCarsModelsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarsModelsStep(), sql.OrderByField(field, opts...))
	}
}

// ByCarOperateLogsCount orders the results by car_operate_logs count.
func ByCarOperateLogsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCarOperateLogsStep(), opts...)
	}
}

// ByCarOperateLogs orders the results by car_operate_logs terms.
func ByCarOperateLogs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarOperateLogsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOrdersCount orders the results by orders count.
func ByOrdersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrdersStep(), opts...)
	}
}

// ByOrders orders the results by orders terms.
func ByOrders(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrdersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByStatsHourlyCarCount orders the results by stats_hourly_car count.
func ByStatsHourlyCarCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newStatsHourlyCarStep(), opts...)
	}
}

// ByStatsHourlyCar orders the results by stats_hourly_car terms.
func ByStatsHourlyCar(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStatsHourlyCarStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByScheTaskCount orders the results by sche_task count.
func ByScheTaskCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newScheTaskStep(), opts...)
	}
}

// ByScheTask orders the results by sche_task terms.
func ByScheTask(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newScheTaskStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByConfigFilesCount orders the results by config_files count.
func ByConfigFilesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newConfigFilesStep(), opts...)
	}
}

// ByConfigFiles orders the results by config_files terms.
func ByConfigFiles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newConfigFilesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCarConfigsCount orders the results by car_configs count.
func ByCarConfigsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCarConfigsStep(), opts...)
	}
}

// ByCarConfigs orders the results by car_configs terms.
func ByCarConfigs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarConfigsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newBackgroundScenicAreaStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BackgroundScenicAreaInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BackgroundScenicAreaTable, BackgroundScenicAreaColumn),
	)
}
func newCarsModelsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarsModelsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CarsModelsTable, CarsModelsColumn),
	)
}
func newCarOperateLogsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarOperateLogsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CarOperateLogsTable, CarOperateLogsColumn),
	)
}
func newOrdersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrdersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OrdersTable, OrdersColumn),
	)
}
func newStatsHourlyCarStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StatsHourlyCarInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, StatsHourlyCarTable, StatsHourlyCarColumn),
	)
}
func newScheTaskStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ScheTaskInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ScheTaskTable, ScheTaskColumn),
	)
}
func newConfigFilesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ConfigFilesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ConfigFilesTable, ConfigFilesColumn),
	)
}
func newCarConfigsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarConfigsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CarConfigsTable, CarConfigsColumn),
	)
}
