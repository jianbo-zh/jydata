// Code generated by ent, DO NOT EDIT.

package car

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldID, id))
}

// DeleteTime applies equality check predicate on the "delete_time" field. It's identical to DeleteTimeEQ.
func DeleteTime(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldDeleteTime, v))
}

// OperationMode applies equality check predicate on the "operation_mode" field. It's identical to OperationModeEQ.
func OperationMode(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldOperationMode, v))
}

// CarName applies equality check predicate on the "car_name" field. It's identical to CarNameEQ.
func CarName(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldCarName, v))
}

// ScenicAreaID applies equality check predicate on the "scenic_area_id" field. It's identical to ScenicAreaIDEQ.
func ScenicAreaID(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldScenicAreaID, v))
}

// DeviceID applies equality check predicate on the "device_id" field. It's identical to DeviceIDEQ.
func DeviceID(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldDeviceID, v))
}

// ModelID applies equality check predicate on the "model_id" field. It's identical to ModelIDEQ.
func ModelID(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldModelID, v))
}

// LicensePlate applies equality check predicate on the "license_plate" field. It's identical to LicensePlateEQ.
func LicensePlate(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldLicensePlate, v))
}

// Passengers applies equality check predicate on the "passengers" field. It's identical to PassengersEQ.
func Passengers(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldPassengers, v))
}

// ReservedSeats applies equality check predicate on the "reserved_seats" field. It's identical to ReservedSeatsEQ.
func ReservedSeats(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldReservedSeats, v))
}

// ProduceTime applies equality check predicate on the "produce_time" field. It's identical to ProduceTimeEQ.
func ProduceTime(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldProduceTime, v))
}

// PowerThreshold applies equality check predicate on the "power_threshold" field. It's identical to PowerThresholdEQ.
func PowerThreshold(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldPowerThreshold, v))
}

// ActivateCode applies equality check predicate on the "activate_code" field. It's identical to ActivateCodeEQ.
func ActivateCode(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldActivateCode, v))
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldState, v))
}

// UseState applies equality check predicate on the "use_state" field. It's identical to UseStateEQ.
func UseState(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldUseState, v))
}

// DrivingState applies equality check predicate on the "driving_state" field. It's identical to DrivingStateEQ.
func DrivingState(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldDrivingState, v))
}

// EmergencyState applies equality check predicate on the "emergency_state" field. It's identical to EmergencyStateEQ.
func EmergencyState(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldEmergencyState, v))
}

// UseOrderID applies equality check predicate on the "use_order_id" field. It's identical to UseOrderIDEQ.
func UseOrderID(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldUseOrderID, v))
}

// DispatchTaskID applies equality check predicate on the "dispatch_task_id" field. It's identical to DispatchTaskIDEQ.
func DispatchTaskID(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldDispatchTaskID, v))
}

// UseFlightID applies equality check predicate on the "use_flight_id" field. It's identical to UseFlightIDEQ.
func UseFlightID(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldUseFlightID, v))
}

// BindOrderCount applies equality check predicate on the "bind_order_count" field. It's identical to BindOrderCountEQ.
func BindOrderCount(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldBindOrderCount, v))
}

// TotalOrderMileage applies equality check predicate on the "total_order_mileage" field. It's identical to TotalOrderMileageEQ.
func TotalOrderMileage(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldTotalOrderMileage, v))
}

// TotalOrderTime applies equality check predicate on the "total_order_time" field. It's identical to TotalOrderTimeEQ.
func TotalOrderTime(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldTotalOrderTime, v))
}

// TotalOrderCount applies equality check predicate on the "total_order_count" field. It's identical to TotalOrderCountEQ.
func TotalOrderCount(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldTotalOrderCount, v))
}

// TotalOrderAmount applies equality check predicate on the "total_order_amount" field. It's identical to TotalOrderAmountEQ.
func TotalOrderAmount(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldTotalOrderAmount, v))
}

// PowerRemaining applies equality check predicate on the "power_remaining" field. It's identical to PowerRemainingEQ.
func PowerRemaining(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldPowerRemaining, v))
}

// ErrorCount applies equality check predicate on the "error_count" field. It's identical to ErrorCountEQ.
func ErrorCount(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldErrorCount, v))
}

// ErrorMessage applies equality check predicate on the "error_message" field. It's identical to ErrorMessageEQ.
func ErrorMessage(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldErrorMessage, v))
}

// IsDeleted applies equality check predicate on the "is_deleted" field. It's identical to IsDeletedEQ.
func IsDeleted(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldIsDeleted, v))
}

// IsCommercialCar applies equality check predicate on the "is_commercial_car" field. It's identical to IsCommercialCarEQ.
func IsCommercialCar(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldIsCommercialCar, v))
}

// IsDrivingStateValid applies equality check predicate on the "is_driving_state_valid" field. It's identical to IsDrivingStateValidEQ.
func IsDrivingStateValid(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldIsDrivingStateValid, v))
}

// MapVersion applies equality check predicate on the "map_version" field. It's identical to MapVersionEQ.
func MapVersion(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldMapVersion, v))
}

// NextMapVersion applies equality check predicate on the "next_map_version" field. It's identical to NextMapVersionEQ.
func NextMapVersion(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldNextMapVersion, v))
}

// NextMapVersionState applies equality check predicate on the "next_map_version_state" field. It's identical to NextMapVersionStateEQ.
func NextMapVersionState(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldNextMapVersionState, v))
}

// NextMapVersionProcess applies equality check predicate on the "next_map_version_process" field. It's identical to NextMapVersionProcessEQ.
func NextMapVersionProcess(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldNextMapVersionProcess, v))
}

// GrAutoVersion applies equality check predicate on the "gr_auto_version" field. It's identical to GrAutoVersionEQ.
func GrAutoVersion(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldGrAutoVersion, v))
}

// GrUIVersion applies equality check predicate on the "gr_ui_version" field. It's identical to GrUIVersionEQ.
func GrUIVersion(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldGrUIVersion, v))
}

// CarproxyID applies equality check predicate on the "carproxy_id" field. It's identical to CarproxyIDEQ.
func CarproxyID(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldCarproxyID, v))
}

// ExtendYokeeID applies equality check predicate on the "extend_yokee_id" field. It's identical to ExtendYokeeIDEQ.
func ExtendYokeeID(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldExtendYokeeID, v))
}

// AliveTime applies equality check predicate on the "alive_time" field. It's identical to AliveTimeEQ.
func AliveTime(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldAliveTime, v))
}

// RegisterTime applies equality check predicate on the "register_time" field. It's identical to RegisterTimeEQ.
func RegisterTime(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldRegisterTime, v))
}

// DrivingStateTime applies equality check predicate on the "driving_state_time" field. It's identical to DrivingStateTimeEQ.
func DrivingStateTime(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldDrivingStateTime, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldUpdateTime, v))
}

// DeleteTimeEQ applies the EQ predicate on the "delete_time" field.
func DeleteTimeEQ(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldDeleteTime, v))
}

// DeleteTimeNEQ applies the NEQ predicate on the "delete_time" field.
func DeleteTimeNEQ(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldDeleteTime, v))
}

// DeleteTimeIn applies the In predicate on the "delete_time" field.
func DeleteTimeIn(vs ...time.Time) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldDeleteTime, vs...))
}

// DeleteTimeNotIn applies the NotIn predicate on the "delete_time" field.
func DeleteTimeNotIn(vs ...time.Time) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldDeleteTime, vs...))
}

// DeleteTimeGT applies the GT predicate on the "delete_time" field.
func DeleteTimeGT(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldDeleteTime, v))
}

// DeleteTimeGTE applies the GTE predicate on the "delete_time" field.
func DeleteTimeGTE(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldDeleteTime, v))
}

// DeleteTimeLT applies the LT predicate on the "delete_time" field.
func DeleteTimeLT(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldDeleteTime, v))
}

// DeleteTimeLTE applies the LTE predicate on the "delete_time" field.
func DeleteTimeLTE(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldDeleteTime, v))
}

// DeleteTimeIsNil applies the IsNil predicate on the "delete_time" field.
func DeleteTimeIsNil() predicate.Car {
	return predicate.Car(sql.FieldIsNull(FieldDeleteTime))
}

// DeleteTimeNotNil applies the NotNil predicate on the "delete_time" field.
func DeleteTimeNotNil() predicate.Car {
	return predicate.Car(sql.FieldNotNull(FieldDeleteTime))
}

// OperationModeEQ applies the EQ predicate on the "operation_mode" field.
func OperationModeEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldOperationMode, v))
}

// OperationModeNEQ applies the NEQ predicate on the "operation_mode" field.
func OperationModeNEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldOperationMode, v))
}

// OperationModeIn applies the In predicate on the "operation_mode" field.
func OperationModeIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldOperationMode, vs...))
}

// OperationModeNotIn applies the NotIn predicate on the "operation_mode" field.
func OperationModeNotIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldOperationMode, vs...))
}

// OperationModeGT applies the GT predicate on the "operation_mode" field.
func OperationModeGT(v int) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldOperationMode, v))
}

// OperationModeGTE applies the GTE predicate on the "operation_mode" field.
func OperationModeGTE(v int) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldOperationMode, v))
}

// OperationModeLT applies the LT predicate on the "operation_mode" field.
func OperationModeLT(v int) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldOperationMode, v))
}

// OperationModeLTE applies the LTE predicate on the "operation_mode" field.
func OperationModeLTE(v int) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldOperationMode, v))
}

// CarNameEQ applies the EQ predicate on the "car_name" field.
func CarNameEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldCarName, v))
}

// CarNameNEQ applies the NEQ predicate on the "car_name" field.
func CarNameNEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldCarName, v))
}

// CarNameIn applies the In predicate on the "car_name" field.
func CarNameIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldCarName, vs...))
}

// CarNameNotIn applies the NotIn predicate on the "car_name" field.
func CarNameNotIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldCarName, vs...))
}

// CarNameGT applies the GT predicate on the "car_name" field.
func CarNameGT(v string) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldCarName, v))
}

// CarNameGTE applies the GTE predicate on the "car_name" field.
func CarNameGTE(v string) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldCarName, v))
}

// CarNameLT applies the LT predicate on the "car_name" field.
func CarNameLT(v string) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldCarName, v))
}

// CarNameLTE applies the LTE predicate on the "car_name" field.
func CarNameLTE(v string) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldCarName, v))
}

// CarNameContains applies the Contains predicate on the "car_name" field.
func CarNameContains(v string) predicate.Car {
	return predicate.Car(sql.FieldContains(FieldCarName, v))
}

// CarNameHasPrefix applies the HasPrefix predicate on the "car_name" field.
func CarNameHasPrefix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasPrefix(FieldCarName, v))
}

// CarNameHasSuffix applies the HasSuffix predicate on the "car_name" field.
func CarNameHasSuffix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasSuffix(FieldCarName, v))
}

// CarNameEqualFold applies the EqualFold predicate on the "car_name" field.
func CarNameEqualFold(v string) predicate.Car {
	return predicate.Car(sql.FieldEqualFold(FieldCarName, v))
}

// CarNameContainsFold applies the ContainsFold predicate on the "car_name" field.
func CarNameContainsFold(v string) predicate.Car {
	return predicate.Car(sql.FieldContainsFold(FieldCarName, v))
}

// ScenicAreaIDEQ applies the EQ predicate on the "scenic_area_id" field.
func ScenicAreaIDEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldScenicAreaID, v))
}

// ScenicAreaIDNEQ applies the NEQ predicate on the "scenic_area_id" field.
func ScenicAreaIDNEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldScenicAreaID, v))
}

// ScenicAreaIDIn applies the In predicate on the "scenic_area_id" field.
func ScenicAreaIDIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldScenicAreaID, vs...))
}

// ScenicAreaIDNotIn applies the NotIn predicate on the "scenic_area_id" field.
func ScenicAreaIDNotIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldScenicAreaID, vs...))
}

// DeviceIDEQ applies the EQ predicate on the "device_id" field.
func DeviceIDEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldDeviceID, v))
}

// DeviceIDNEQ applies the NEQ predicate on the "device_id" field.
func DeviceIDNEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldDeviceID, v))
}

// DeviceIDIn applies the In predicate on the "device_id" field.
func DeviceIDIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldDeviceID, vs...))
}

// DeviceIDNotIn applies the NotIn predicate on the "device_id" field.
func DeviceIDNotIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldDeviceID, vs...))
}

// DeviceIDGT applies the GT predicate on the "device_id" field.
func DeviceIDGT(v string) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldDeviceID, v))
}

// DeviceIDGTE applies the GTE predicate on the "device_id" field.
func DeviceIDGTE(v string) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldDeviceID, v))
}

// DeviceIDLT applies the LT predicate on the "device_id" field.
func DeviceIDLT(v string) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldDeviceID, v))
}

// DeviceIDLTE applies the LTE predicate on the "device_id" field.
func DeviceIDLTE(v string) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldDeviceID, v))
}

// DeviceIDContains applies the Contains predicate on the "device_id" field.
func DeviceIDContains(v string) predicate.Car {
	return predicate.Car(sql.FieldContains(FieldDeviceID, v))
}

// DeviceIDHasPrefix applies the HasPrefix predicate on the "device_id" field.
func DeviceIDHasPrefix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasPrefix(FieldDeviceID, v))
}

// DeviceIDHasSuffix applies the HasSuffix predicate on the "device_id" field.
func DeviceIDHasSuffix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasSuffix(FieldDeviceID, v))
}

// DeviceIDEqualFold applies the EqualFold predicate on the "device_id" field.
func DeviceIDEqualFold(v string) predicate.Car {
	return predicate.Car(sql.FieldEqualFold(FieldDeviceID, v))
}

// DeviceIDContainsFold applies the ContainsFold predicate on the "device_id" field.
func DeviceIDContainsFold(v string) predicate.Car {
	return predicate.Car(sql.FieldContainsFold(FieldDeviceID, v))
}

// ModelIDEQ applies the EQ predicate on the "model_id" field.
func ModelIDEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldModelID, v))
}

// ModelIDNEQ applies the NEQ predicate on the "model_id" field.
func ModelIDNEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldModelID, v))
}

// ModelIDIn applies the In predicate on the "model_id" field.
func ModelIDIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldModelID, vs...))
}

// ModelIDNotIn applies the NotIn predicate on the "model_id" field.
func ModelIDNotIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldModelID, vs...))
}

// LicensePlateEQ applies the EQ predicate on the "license_plate" field.
func LicensePlateEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldLicensePlate, v))
}

// LicensePlateNEQ applies the NEQ predicate on the "license_plate" field.
func LicensePlateNEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldLicensePlate, v))
}

// LicensePlateIn applies the In predicate on the "license_plate" field.
func LicensePlateIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldLicensePlate, vs...))
}

// LicensePlateNotIn applies the NotIn predicate on the "license_plate" field.
func LicensePlateNotIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldLicensePlate, vs...))
}

// LicensePlateGT applies the GT predicate on the "license_plate" field.
func LicensePlateGT(v string) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldLicensePlate, v))
}

// LicensePlateGTE applies the GTE predicate on the "license_plate" field.
func LicensePlateGTE(v string) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldLicensePlate, v))
}

// LicensePlateLT applies the LT predicate on the "license_plate" field.
func LicensePlateLT(v string) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldLicensePlate, v))
}

// LicensePlateLTE applies the LTE predicate on the "license_plate" field.
func LicensePlateLTE(v string) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldLicensePlate, v))
}

// LicensePlateContains applies the Contains predicate on the "license_plate" field.
func LicensePlateContains(v string) predicate.Car {
	return predicate.Car(sql.FieldContains(FieldLicensePlate, v))
}

// LicensePlateHasPrefix applies the HasPrefix predicate on the "license_plate" field.
func LicensePlateHasPrefix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasPrefix(FieldLicensePlate, v))
}

// LicensePlateHasSuffix applies the HasSuffix predicate on the "license_plate" field.
func LicensePlateHasSuffix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasSuffix(FieldLicensePlate, v))
}

// LicensePlateEqualFold applies the EqualFold predicate on the "license_plate" field.
func LicensePlateEqualFold(v string) predicate.Car {
	return predicate.Car(sql.FieldEqualFold(FieldLicensePlate, v))
}

// LicensePlateContainsFold applies the ContainsFold predicate on the "license_plate" field.
func LicensePlateContainsFold(v string) predicate.Car {
	return predicate.Car(sql.FieldContainsFold(FieldLicensePlate, v))
}

// PassengersEQ applies the EQ predicate on the "passengers" field.
func PassengersEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldPassengers, v))
}

// PassengersNEQ applies the NEQ predicate on the "passengers" field.
func PassengersNEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldPassengers, v))
}

// PassengersIn applies the In predicate on the "passengers" field.
func PassengersIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldPassengers, vs...))
}

// PassengersNotIn applies the NotIn predicate on the "passengers" field.
func PassengersNotIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldPassengers, vs...))
}

// PassengersGT applies the GT predicate on the "passengers" field.
func PassengersGT(v int) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldPassengers, v))
}

// PassengersGTE applies the GTE predicate on the "passengers" field.
func PassengersGTE(v int) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldPassengers, v))
}

// PassengersLT applies the LT predicate on the "passengers" field.
func PassengersLT(v int) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldPassengers, v))
}

// PassengersLTE applies the LTE predicate on the "passengers" field.
func PassengersLTE(v int) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldPassengers, v))
}

// ReservedSeatsEQ applies the EQ predicate on the "reserved_seats" field.
func ReservedSeatsEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldReservedSeats, v))
}

// ReservedSeatsNEQ applies the NEQ predicate on the "reserved_seats" field.
func ReservedSeatsNEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldReservedSeats, v))
}

// ReservedSeatsIn applies the In predicate on the "reserved_seats" field.
func ReservedSeatsIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldReservedSeats, vs...))
}

// ReservedSeatsNotIn applies the NotIn predicate on the "reserved_seats" field.
func ReservedSeatsNotIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldReservedSeats, vs...))
}

// ReservedSeatsGT applies the GT predicate on the "reserved_seats" field.
func ReservedSeatsGT(v int) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldReservedSeats, v))
}

// ReservedSeatsGTE applies the GTE predicate on the "reserved_seats" field.
func ReservedSeatsGTE(v int) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldReservedSeats, v))
}

// ReservedSeatsLT applies the LT predicate on the "reserved_seats" field.
func ReservedSeatsLT(v int) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldReservedSeats, v))
}

// ReservedSeatsLTE applies the LTE predicate on the "reserved_seats" field.
func ReservedSeatsLTE(v int) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldReservedSeats, v))
}

// ProduceTimeEQ applies the EQ predicate on the "produce_time" field.
func ProduceTimeEQ(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldProduceTime, v))
}

// ProduceTimeNEQ applies the NEQ predicate on the "produce_time" field.
func ProduceTimeNEQ(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldProduceTime, v))
}

// ProduceTimeIn applies the In predicate on the "produce_time" field.
func ProduceTimeIn(vs ...time.Time) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldProduceTime, vs...))
}

// ProduceTimeNotIn applies the NotIn predicate on the "produce_time" field.
func ProduceTimeNotIn(vs ...time.Time) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldProduceTime, vs...))
}

// ProduceTimeGT applies the GT predicate on the "produce_time" field.
func ProduceTimeGT(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldProduceTime, v))
}

// ProduceTimeGTE applies the GTE predicate on the "produce_time" field.
func ProduceTimeGTE(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldProduceTime, v))
}

// ProduceTimeLT applies the LT predicate on the "produce_time" field.
func ProduceTimeLT(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldProduceTime, v))
}

// ProduceTimeLTE applies the LTE predicate on the "produce_time" field.
func ProduceTimeLTE(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldProduceTime, v))
}

// PowerThresholdEQ applies the EQ predicate on the "power_threshold" field.
func PowerThresholdEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldPowerThreshold, v))
}

// PowerThresholdNEQ applies the NEQ predicate on the "power_threshold" field.
func PowerThresholdNEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldPowerThreshold, v))
}

// PowerThresholdIn applies the In predicate on the "power_threshold" field.
func PowerThresholdIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldPowerThreshold, vs...))
}

// PowerThresholdNotIn applies the NotIn predicate on the "power_threshold" field.
func PowerThresholdNotIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldPowerThreshold, vs...))
}

// PowerThresholdGT applies the GT predicate on the "power_threshold" field.
func PowerThresholdGT(v int) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldPowerThreshold, v))
}

// PowerThresholdGTE applies the GTE predicate on the "power_threshold" field.
func PowerThresholdGTE(v int) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldPowerThreshold, v))
}

// PowerThresholdLT applies the LT predicate on the "power_threshold" field.
func PowerThresholdLT(v int) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldPowerThreshold, v))
}

// PowerThresholdLTE applies the LTE predicate on the "power_threshold" field.
func PowerThresholdLTE(v int) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldPowerThreshold, v))
}

// ActivateCodeEQ applies the EQ predicate on the "activate_code" field.
func ActivateCodeEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldActivateCode, v))
}

// ActivateCodeNEQ applies the NEQ predicate on the "activate_code" field.
func ActivateCodeNEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldActivateCode, v))
}

// ActivateCodeIn applies the In predicate on the "activate_code" field.
func ActivateCodeIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldActivateCode, vs...))
}

// ActivateCodeNotIn applies the NotIn predicate on the "activate_code" field.
func ActivateCodeNotIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldActivateCode, vs...))
}

// ActivateCodeGT applies the GT predicate on the "activate_code" field.
func ActivateCodeGT(v string) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldActivateCode, v))
}

// ActivateCodeGTE applies the GTE predicate on the "activate_code" field.
func ActivateCodeGTE(v string) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldActivateCode, v))
}

// ActivateCodeLT applies the LT predicate on the "activate_code" field.
func ActivateCodeLT(v string) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldActivateCode, v))
}

// ActivateCodeLTE applies the LTE predicate on the "activate_code" field.
func ActivateCodeLTE(v string) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldActivateCode, v))
}

// ActivateCodeContains applies the Contains predicate on the "activate_code" field.
func ActivateCodeContains(v string) predicate.Car {
	return predicate.Car(sql.FieldContains(FieldActivateCode, v))
}

// ActivateCodeHasPrefix applies the HasPrefix predicate on the "activate_code" field.
func ActivateCodeHasPrefix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasPrefix(FieldActivateCode, v))
}

// ActivateCodeHasSuffix applies the HasSuffix predicate on the "activate_code" field.
func ActivateCodeHasSuffix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasSuffix(FieldActivateCode, v))
}

// ActivateCodeEqualFold applies the EqualFold predicate on the "activate_code" field.
func ActivateCodeEqualFold(v string) predicate.Car {
	return predicate.Car(sql.FieldEqualFold(FieldActivateCode, v))
}

// ActivateCodeContainsFold applies the ContainsFold predicate on the "activate_code" field.
func ActivateCodeContainsFold(v string) predicate.Car {
	return predicate.Car(sql.FieldContainsFold(FieldActivateCode, v))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v int) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v int) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v int) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v int) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldState, v))
}

// UseStateEQ applies the EQ predicate on the "use_state" field.
func UseStateEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldUseState, v))
}

// UseStateNEQ applies the NEQ predicate on the "use_state" field.
func UseStateNEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldUseState, v))
}

// UseStateIn applies the In predicate on the "use_state" field.
func UseStateIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldUseState, vs...))
}

// UseStateNotIn applies the NotIn predicate on the "use_state" field.
func UseStateNotIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldUseState, vs...))
}

// UseStateGT applies the GT predicate on the "use_state" field.
func UseStateGT(v int) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldUseState, v))
}

// UseStateGTE applies the GTE predicate on the "use_state" field.
func UseStateGTE(v int) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldUseState, v))
}

// UseStateLT applies the LT predicate on the "use_state" field.
func UseStateLT(v int) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldUseState, v))
}

// UseStateLTE applies the LTE predicate on the "use_state" field.
func UseStateLTE(v int) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldUseState, v))
}

// DrivingStateEQ applies the EQ predicate on the "driving_state" field.
func DrivingStateEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldDrivingState, v))
}

// DrivingStateNEQ applies the NEQ predicate on the "driving_state" field.
func DrivingStateNEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldDrivingState, v))
}

// DrivingStateIn applies the In predicate on the "driving_state" field.
func DrivingStateIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldDrivingState, vs...))
}

// DrivingStateNotIn applies the NotIn predicate on the "driving_state" field.
func DrivingStateNotIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldDrivingState, vs...))
}

// DrivingStateGT applies the GT predicate on the "driving_state" field.
func DrivingStateGT(v int) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldDrivingState, v))
}

// DrivingStateGTE applies the GTE predicate on the "driving_state" field.
func DrivingStateGTE(v int) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldDrivingState, v))
}

// DrivingStateLT applies the LT predicate on the "driving_state" field.
func DrivingStateLT(v int) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldDrivingState, v))
}

// DrivingStateLTE applies the LTE predicate on the "driving_state" field.
func DrivingStateLTE(v int) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldDrivingState, v))
}

// EmergencyStateEQ applies the EQ predicate on the "emergency_state" field.
func EmergencyStateEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldEmergencyState, v))
}

// EmergencyStateNEQ applies the NEQ predicate on the "emergency_state" field.
func EmergencyStateNEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldEmergencyState, v))
}

// EmergencyStateIn applies the In predicate on the "emergency_state" field.
func EmergencyStateIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldEmergencyState, vs...))
}

// EmergencyStateNotIn applies the NotIn predicate on the "emergency_state" field.
func EmergencyStateNotIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldEmergencyState, vs...))
}

// EmergencyStateGT applies the GT predicate on the "emergency_state" field.
func EmergencyStateGT(v int) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldEmergencyState, v))
}

// EmergencyStateGTE applies the GTE predicate on the "emergency_state" field.
func EmergencyStateGTE(v int) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldEmergencyState, v))
}

// EmergencyStateLT applies the LT predicate on the "emergency_state" field.
func EmergencyStateLT(v int) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldEmergencyState, v))
}

// EmergencyStateLTE applies the LTE predicate on the "emergency_state" field.
func EmergencyStateLTE(v int) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldEmergencyState, v))
}

// UseOrderIDEQ applies the EQ predicate on the "use_order_id" field.
func UseOrderIDEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldUseOrderID, v))
}

// UseOrderIDNEQ applies the NEQ predicate on the "use_order_id" field.
func UseOrderIDNEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldUseOrderID, v))
}

// UseOrderIDIn applies the In predicate on the "use_order_id" field.
func UseOrderIDIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldUseOrderID, vs...))
}

// UseOrderIDNotIn applies the NotIn predicate on the "use_order_id" field.
func UseOrderIDNotIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldUseOrderID, vs...))
}

// UseOrderIDGT applies the GT predicate on the "use_order_id" field.
func UseOrderIDGT(v int) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldUseOrderID, v))
}

// UseOrderIDGTE applies the GTE predicate on the "use_order_id" field.
func UseOrderIDGTE(v int) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldUseOrderID, v))
}

// UseOrderIDLT applies the LT predicate on the "use_order_id" field.
func UseOrderIDLT(v int) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldUseOrderID, v))
}

// UseOrderIDLTE applies the LTE predicate on the "use_order_id" field.
func UseOrderIDLTE(v int) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldUseOrderID, v))
}

// DispatchTaskIDEQ applies the EQ predicate on the "dispatch_task_id" field.
func DispatchTaskIDEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldDispatchTaskID, v))
}

// DispatchTaskIDNEQ applies the NEQ predicate on the "dispatch_task_id" field.
func DispatchTaskIDNEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldDispatchTaskID, v))
}

// DispatchTaskIDIn applies the In predicate on the "dispatch_task_id" field.
func DispatchTaskIDIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldDispatchTaskID, vs...))
}

// DispatchTaskIDNotIn applies the NotIn predicate on the "dispatch_task_id" field.
func DispatchTaskIDNotIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldDispatchTaskID, vs...))
}

// DispatchTaskIDGT applies the GT predicate on the "dispatch_task_id" field.
func DispatchTaskIDGT(v int) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldDispatchTaskID, v))
}

// DispatchTaskIDGTE applies the GTE predicate on the "dispatch_task_id" field.
func DispatchTaskIDGTE(v int) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldDispatchTaskID, v))
}

// DispatchTaskIDLT applies the LT predicate on the "dispatch_task_id" field.
func DispatchTaskIDLT(v int) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldDispatchTaskID, v))
}

// DispatchTaskIDLTE applies the LTE predicate on the "dispatch_task_id" field.
func DispatchTaskIDLTE(v int) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldDispatchTaskID, v))
}

// UseFlightIDEQ applies the EQ predicate on the "use_flight_id" field.
func UseFlightIDEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldUseFlightID, v))
}

// UseFlightIDNEQ applies the NEQ predicate on the "use_flight_id" field.
func UseFlightIDNEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldUseFlightID, v))
}

// UseFlightIDIn applies the In predicate on the "use_flight_id" field.
func UseFlightIDIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldUseFlightID, vs...))
}

// UseFlightIDNotIn applies the NotIn predicate on the "use_flight_id" field.
func UseFlightIDNotIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldUseFlightID, vs...))
}

// UseFlightIDGT applies the GT predicate on the "use_flight_id" field.
func UseFlightIDGT(v int) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldUseFlightID, v))
}

// UseFlightIDGTE applies the GTE predicate on the "use_flight_id" field.
func UseFlightIDGTE(v int) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldUseFlightID, v))
}

// UseFlightIDLT applies the LT predicate on the "use_flight_id" field.
func UseFlightIDLT(v int) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldUseFlightID, v))
}

// UseFlightIDLTE applies the LTE predicate on the "use_flight_id" field.
func UseFlightIDLTE(v int) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldUseFlightID, v))
}

// BindOrderCountEQ applies the EQ predicate on the "bind_order_count" field.
func BindOrderCountEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldBindOrderCount, v))
}

// BindOrderCountNEQ applies the NEQ predicate on the "bind_order_count" field.
func BindOrderCountNEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldBindOrderCount, v))
}

// BindOrderCountIn applies the In predicate on the "bind_order_count" field.
func BindOrderCountIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldBindOrderCount, vs...))
}

// BindOrderCountNotIn applies the NotIn predicate on the "bind_order_count" field.
func BindOrderCountNotIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldBindOrderCount, vs...))
}

// BindOrderCountGT applies the GT predicate on the "bind_order_count" field.
func BindOrderCountGT(v int) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldBindOrderCount, v))
}

// BindOrderCountGTE applies the GTE predicate on the "bind_order_count" field.
func BindOrderCountGTE(v int) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldBindOrderCount, v))
}

// BindOrderCountLT applies the LT predicate on the "bind_order_count" field.
func BindOrderCountLT(v int) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldBindOrderCount, v))
}

// BindOrderCountLTE applies the LTE predicate on the "bind_order_count" field.
func BindOrderCountLTE(v int) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldBindOrderCount, v))
}

// TotalOrderMileageEQ applies the EQ predicate on the "total_order_mileage" field.
func TotalOrderMileageEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldTotalOrderMileage, v))
}

// TotalOrderMileageNEQ applies the NEQ predicate on the "total_order_mileage" field.
func TotalOrderMileageNEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldTotalOrderMileage, v))
}

// TotalOrderMileageIn applies the In predicate on the "total_order_mileage" field.
func TotalOrderMileageIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldTotalOrderMileage, vs...))
}

// TotalOrderMileageNotIn applies the NotIn predicate on the "total_order_mileage" field.
func TotalOrderMileageNotIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldTotalOrderMileage, vs...))
}

// TotalOrderMileageGT applies the GT predicate on the "total_order_mileage" field.
func TotalOrderMileageGT(v int) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldTotalOrderMileage, v))
}

// TotalOrderMileageGTE applies the GTE predicate on the "total_order_mileage" field.
func TotalOrderMileageGTE(v int) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldTotalOrderMileage, v))
}

// TotalOrderMileageLT applies the LT predicate on the "total_order_mileage" field.
func TotalOrderMileageLT(v int) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldTotalOrderMileage, v))
}

// TotalOrderMileageLTE applies the LTE predicate on the "total_order_mileage" field.
func TotalOrderMileageLTE(v int) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldTotalOrderMileage, v))
}

// TotalOrderTimeEQ applies the EQ predicate on the "total_order_time" field.
func TotalOrderTimeEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldTotalOrderTime, v))
}

// TotalOrderTimeNEQ applies the NEQ predicate on the "total_order_time" field.
func TotalOrderTimeNEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldTotalOrderTime, v))
}

// TotalOrderTimeIn applies the In predicate on the "total_order_time" field.
func TotalOrderTimeIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldTotalOrderTime, vs...))
}

// TotalOrderTimeNotIn applies the NotIn predicate on the "total_order_time" field.
func TotalOrderTimeNotIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldTotalOrderTime, vs...))
}

// TotalOrderTimeGT applies the GT predicate on the "total_order_time" field.
func TotalOrderTimeGT(v int) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldTotalOrderTime, v))
}

// TotalOrderTimeGTE applies the GTE predicate on the "total_order_time" field.
func TotalOrderTimeGTE(v int) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldTotalOrderTime, v))
}

// TotalOrderTimeLT applies the LT predicate on the "total_order_time" field.
func TotalOrderTimeLT(v int) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldTotalOrderTime, v))
}

// TotalOrderTimeLTE applies the LTE predicate on the "total_order_time" field.
func TotalOrderTimeLTE(v int) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldTotalOrderTime, v))
}

// TotalOrderCountEQ applies the EQ predicate on the "total_order_count" field.
func TotalOrderCountEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldTotalOrderCount, v))
}

// TotalOrderCountNEQ applies the NEQ predicate on the "total_order_count" field.
func TotalOrderCountNEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldTotalOrderCount, v))
}

// TotalOrderCountIn applies the In predicate on the "total_order_count" field.
func TotalOrderCountIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldTotalOrderCount, vs...))
}

// TotalOrderCountNotIn applies the NotIn predicate on the "total_order_count" field.
func TotalOrderCountNotIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldTotalOrderCount, vs...))
}

// TotalOrderCountGT applies the GT predicate on the "total_order_count" field.
func TotalOrderCountGT(v int) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldTotalOrderCount, v))
}

// TotalOrderCountGTE applies the GTE predicate on the "total_order_count" field.
func TotalOrderCountGTE(v int) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldTotalOrderCount, v))
}

// TotalOrderCountLT applies the LT predicate on the "total_order_count" field.
func TotalOrderCountLT(v int) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldTotalOrderCount, v))
}

// TotalOrderCountLTE applies the LTE predicate on the "total_order_count" field.
func TotalOrderCountLTE(v int) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldTotalOrderCount, v))
}

// TotalOrderAmountEQ applies the EQ predicate on the "total_order_amount" field.
func TotalOrderAmountEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldTotalOrderAmount, v))
}

// TotalOrderAmountNEQ applies the NEQ predicate on the "total_order_amount" field.
func TotalOrderAmountNEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldTotalOrderAmount, v))
}

// TotalOrderAmountIn applies the In predicate on the "total_order_amount" field.
func TotalOrderAmountIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldTotalOrderAmount, vs...))
}

// TotalOrderAmountNotIn applies the NotIn predicate on the "total_order_amount" field.
func TotalOrderAmountNotIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldTotalOrderAmount, vs...))
}

// TotalOrderAmountGT applies the GT predicate on the "total_order_amount" field.
func TotalOrderAmountGT(v int) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldTotalOrderAmount, v))
}

// TotalOrderAmountGTE applies the GTE predicate on the "total_order_amount" field.
func TotalOrderAmountGTE(v int) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldTotalOrderAmount, v))
}

// TotalOrderAmountLT applies the LT predicate on the "total_order_amount" field.
func TotalOrderAmountLT(v int) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldTotalOrderAmount, v))
}

// TotalOrderAmountLTE applies the LTE predicate on the "total_order_amount" field.
func TotalOrderAmountLTE(v int) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldTotalOrderAmount, v))
}

// PowerRemainingEQ applies the EQ predicate on the "power_remaining" field.
func PowerRemainingEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldPowerRemaining, v))
}

// PowerRemainingNEQ applies the NEQ predicate on the "power_remaining" field.
func PowerRemainingNEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldPowerRemaining, v))
}

// PowerRemainingIn applies the In predicate on the "power_remaining" field.
func PowerRemainingIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldPowerRemaining, vs...))
}

// PowerRemainingNotIn applies the NotIn predicate on the "power_remaining" field.
func PowerRemainingNotIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldPowerRemaining, vs...))
}

// PowerRemainingGT applies the GT predicate on the "power_remaining" field.
func PowerRemainingGT(v int) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldPowerRemaining, v))
}

// PowerRemainingGTE applies the GTE predicate on the "power_remaining" field.
func PowerRemainingGTE(v int) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldPowerRemaining, v))
}

// PowerRemainingLT applies the LT predicate on the "power_remaining" field.
func PowerRemainingLT(v int) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldPowerRemaining, v))
}

// PowerRemainingLTE applies the LTE predicate on the "power_remaining" field.
func PowerRemainingLTE(v int) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldPowerRemaining, v))
}

// ErrorCountEQ applies the EQ predicate on the "error_count" field.
func ErrorCountEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldErrorCount, v))
}

// ErrorCountNEQ applies the NEQ predicate on the "error_count" field.
func ErrorCountNEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldErrorCount, v))
}

// ErrorCountIn applies the In predicate on the "error_count" field.
func ErrorCountIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldErrorCount, vs...))
}

// ErrorCountNotIn applies the NotIn predicate on the "error_count" field.
func ErrorCountNotIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldErrorCount, vs...))
}

// ErrorCountGT applies the GT predicate on the "error_count" field.
func ErrorCountGT(v int) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldErrorCount, v))
}

// ErrorCountGTE applies the GTE predicate on the "error_count" field.
func ErrorCountGTE(v int) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldErrorCount, v))
}

// ErrorCountLT applies the LT predicate on the "error_count" field.
func ErrorCountLT(v int) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldErrorCount, v))
}

// ErrorCountLTE applies the LTE predicate on the "error_count" field.
func ErrorCountLTE(v int) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldErrorCount, v))
}

// ErrorMessageEQ applies the EQ predicate on the "error_message" field.
func ErrorMessageEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldErrorMessage, v))
}

// ErrorMessageNEQ applies the NEQ predicate on the "error_message" field.
func ErrorMessageNEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldErrorMessage, v))
}

// ErrorMessageIn applies the In predicate on the "error_message" field.
func ErrorMessageIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldErrorMessage, vs...))
}

// ErrorMessageNotIn applies the NotIn predicate on the "error_message" field.
func ErrorMessageNotIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldErrorMessage, vs...))
}

// ErrorMessageGT applies the GT predicate on the "error_message" field.
func ErrorMessageGT(v string) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldErrorMessage, v))
}

// ErrorMessageGTE applies the GTE predicate on the "error_message" field.
func ErrorMessageGTE(v string) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldErrorMessage, v))
}

// ErrorMessageLT applies the LT predicate on the "error_message" field.
func ErrorMessageLT(v string) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldErrorMessage, v))
}

// ErrorMessageLTE applies the LTE predicate on the "error_message" field.
func ErrorMessageLTE(v string) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldErrorMessage, v))
}

// ErrorMessageContains applies the Contains predicate on the "error_message" field.
func ErrorMessageContains(v string) predicate.Car {
	return predicate.Car(sql.FieldContains(FieldErrorMessage, v))
}

// ErrorMessageHasPrefix applies the HasPrefix predicate on the "error_message" field.
func ErrorMessageHasPrefix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasPrefix(FieldErrorMessage, v))
}

// ErrorMessageHasSuffix applies the HasSuffix predicate on the "error_message" field.
func ErrorMessageHasSuffix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasSuffix(FieldErrorMessage, v))
}

// ErrorMessageEqualFold applies the EqualFold predicate on the "error_message" field.
func ErrorMessageEqualFold(v string) predicate.Car {
	return predicate.Car(sql.FieldEqualFold(FieldErrorMessage, v))
}

// ErrorMessageContainsFold applies the ContainsFold predicate on the "error_message" field.
func ErrorMessageContainsFold(v string) predicate.Car {
	return predicate.Car(sql.FieldContainsFold(FieldErrorMessage, v))
}

// IsDeletedEQ applies the EQ predicate on the "is_deleted" field.
func IsDeletedEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldIsDeleted, v))
}

// IsDeletedNEQ applies the NEQ predicate on the "is_deleted" field.
func IsDeletedNEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldIsDeleted, v))
}

// IsDeletedIn applies the In predicate on the "is_deleted" field.
func IsDeletedIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldIsDeleted, vs...))
}

// IsDeletedNotIn applies the NotIn predicate on the "is_deleted" field.
func IsDeletedNotIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldIsDeleted, vs...))
}

// IsDeletedGT applies the GT predicate on the "is_deleted" field.
func IsDeletedGT(v int) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldIsDeleted, v))
}

// IsDeletedGTE applies the GTE predicate on the "is_deleted" field.
func IsDeletedGTE(v int) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldIsDeleted, v))
}

// IsDeletedLT applies the LT predicate on the "is_deleted" field.
func IsDeletedLT(v int) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldIsDeleted, v))
}

// IsDeletedLTE applies the LTE predicate on the "is_deleted" field.
func IsDeletedLTE(v int) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldIsDeleted, v))
}

// IsCommercialCarEQ applies the EQ predicate on the "is_commercial_car" field.
func IsCommercialCarEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldIsCommercialCar, v))
}

// IsCommercialCarNEQ applies the NEQ predicate on the "is_commercial_car" field.
func IsCommercialCarNEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldIsCommercialCar, v))
}

// IsCommercialCarIn applies the In predicate on the "is_commercial_car" field.
func IsCommercialCarIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldIsCommercialCar, vs...))
}

// IsCommercialCarNotIn applies the NotIn predicate on the "is_commercial_car" field.
func IsCommercialCarNotIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldIsCommercialCar, vs...))
}

// IsCommercialCarGT applies the GT predicate on the "is_commercial_car" field.
func IsCommercialCarGT(v int) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldIsCommercialCar, v))
}

// IsCommercialCarGTE applies the GTE predicate on the "is_commercial_car" field.
func IsCommercialCarGTE(v int) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldIsCommercialCar, v))
}

// IsCommercialCarLT applies the LT predicate on the "is_commercial_car" field.
func IsCommercialCarLT(v int) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldIsCommercialCar, v))
}

// IsCommercialCarLTE applies the LTE predicate on the "is_commercial_car" field.
func IsCommercialCarLTE(v int) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldIsCommercialCar, v))
}

// IsDrivingStateValidEQ applies the EQ predicate on the "is_driving_state_valid" field.
func IsDrivingStateValidEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldIsDrivingStateValid, v))
}

// IsDrivingStateValidNEQ applies the NEQ predicate on the "is_driving_state_valid" field.
func IsDrivingStateValidNEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldIsDrivingStateValid, v))
}

// IsDrivingStateValidIn applies the In predicate on the "is_driving_state_valid" field.
func IsDrivingStateValidIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldIsDrivingStateValid, vs...))
}

// IsDrivingStateValidNotIn applies the NotIn predicate on the "is_driving_state_valid" field.
func IsDrivingStateValidNotIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldIsDrivingStateValid, vs...))
}

// IsDrivingStateValidGT applies the GT predicate on the "is_driving_state_valid" field.
func IsDrivingStateValidGT(v int) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldIsDrivingStateValid, v))
}

// IsDrivingStateValidGTE applies the GTE predicate on the "is_driving_state_valid" field.
func IsDrivingStateValidGTE(v int) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldIsDrivingStateValid, v))
}

// IsDrivingStateValidLT applies the LT predicate on the "is_driving_state_valid" field.
func IsDrivingStateValidLT(v int) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldIsDrivingStateValid, v))
}

// IsDrivingStateValidLTE applies the LTE predicate on the "is_driving_state_valid" field.
func IsDrivingStateValidLTE(v int) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldIsDrivingStateValid, v))
}

// MapVersionEQ applies the EQ predicate on the "map_version" field.
func MapVersionEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldMapVersion, v))
}

// MapVersionNEQ applies the NEQ predicate on the "map_version" field.
func MapVersionNEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldMapVersion, v))
}

// MapVersionIn applies the In predicate on the "map_version" field.
func MapVersionIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldMapVersion, vs...))
}

// MapVersionNotIn applies the NotIn predicate on the "map_version" field.
func MapVersionNotIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldMapVersion, vs...))
}

// MapVersionGT applies the GT predicate on the "map_version" field.
func MapVersionGT(v string) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldMapVersion, v))
}

// MapVersionGTE applies the GTE predicate on the "map_version" field.
func MapVersionGTE(v string) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldMapVersion, v))
}

// MapVersionLT applies the LT predicate on the "map_version" field.
func MapVersionLT(v string) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldMapVersion, v))
}

// MapVersionLTE applies the LTE predicate on the "map_version" field.
func MapVersionLTE(v string) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldMapVersion, v))
}

// MapVersionContains applies the Contains predicate on the "map_version" field.
func MapVersionContains(v string) predicate.Car {
	return predicate.Car(sql.FieldContains(FieldMapVersion, v))
}

// MapVersionHasPrefix applies the HasPrefix predicate on the "map_version" field.
func MapVersionHasPrefix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasPrefix(FieldMapVersion, v))
}

// MapVersionHasSuffix applies the HasSuffix predicate on the "map_version" field.
func MapVersionHasSuffix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasSuffix(FieldMapVersion, v))
}

// MapVersionEqualFold applies the EqualFold predicate on the "map_version" field.
func MapVersionEqualFold(v string) predicate.Car {
	return predicate.Car(sql.FieldEqualFold(FieldMapVersion, v))
}

// MapVersionContainsFold applies the ContainsFold predicate on the "map_version" field.
func MapVersionContainsFold(v string) predicate.Car {
	return predicate.Car(sql.FieldContainsFold(FieldMapVersion, v))
}

// NextMapVersionEQ applies the EQ predicate on the "next_map_version" field.
func NextMapVersionEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldNextMapVersion, v))
}

// NextMapVersionNEQ applies the NEQ predicate on the "next_map_version" field.
func NextMapVersionNEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldNextMapVersion, v))
}

// NextMapVersionIn applies the In predicate on the "next_map_version" field.
func NextMapVersionIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldNextMapVersion, vs...))
}

// NextMapVersionNotIn applies the NotIn predicate on the "next_map_version" field.
func NextMapVersionNotIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldNextMapVersion, vs...))
}

// NextMapVersionGT applies the GT predicate on the "next_map_version" field.
func NextMapVersionGT(v string) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldNextMapVersion, v))
}

// NextMapVersionGTE applies the GTE predicate on the "next_map_version" field.
func NextMapVersionGTE(v string) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldNextMapVersion, v))
}

// NextMapVersionLT applies the LT predicate on the "next_map_version" field.
func NextMapVersionLT(v string) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldNextMapVersion, v))
}

// NextMapVersionLTE applies the LTE predicate on the "next_map_version" field.
func NextMapVersionLTE(v string) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldNextMapVersion, v))
}

// NextMapVersionContains applies the Contains predicate on the "next_map_version" field.
func NextMapVersionContains(v string) predicate.Car {
	return predicate.Car(sql.FieldContains(FieldNextMapVersion, v))
}

// NextMapVersionHasPrefix applies the HasPrefix predicate on the "next_map_version" field.
func NextMapVersionHasPrefix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasPrefix(FieldNextMapVersion, v))
}

// NextMapVersionHasSuffix applies the HasSuffix predicate on the "next_map_version" field.
func NextMapVersionHasSuffix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasSuffix(FieldNextMapVersion, v))
}

// NextMapVersionEqualFold applies the EqualFold predicate on the "next_map_version" field.
func NextMapVersionEqualFold(v string) predicate.Car {
	return predicate.Car(sql.FieldEqualFold(FieldNextMapVersion, v))
}

// NextMapVersionContainsFold applies the ContainsFold predicate on the "next_map_version" field.
func NextMapVersionContainsFold(v string) predicate.Car {
	return predicate.Car(sql.FieldContainsFold(FieldNextMapVersion, v))
}

// NextMapVersionStateEQ applies the EQ predicate on the "next_map_version_state" field.
func NextMapVersionStateEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldNextMapVersionState, v))
}

// NextMapVersionStateNEQ applies the NEQ predicate on the "next_map_version_state" field.
func NextMapVersionStateNEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldNextMapVersionState, v))
}

// NextMapVersionStateIn applies the In predicate on the "next_map_version_state" field.
func NextMapVersionStateIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldNextMapVersionState, vs...))
}

// NextMapVersionStateNotIn applies the NotIn predicate on the "next_map_version_state" field.
func NextMapVersionStateNotIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldNextMapVersionState, vs...))
}

// NextMapVersionStateGT applies the GT predicate on the "next_map_version_state" field.
func NextMapVersionStateGT(v string) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldNextMapVersionState, v))
}

// NextMapVersionStateGTE applies the GTE predicate on the "next_map_version_state" field.
func NextMapVersionStateGTE(v string) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldNextMapVersionState, v))
}

// NextMapVersionStateLT applies the LT predicate on the "next_map_version_state" field.
func NextMapVersionStateLT(v string) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldNextMapVersionState, v))
}

// NextMapVersionStateLTE applies the LTE predicate on the "next_map_version_state" field.
func NextMapVersionStateLTE(v string) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldNextMapVersionState, v))
}

// NextMapVersionStateContains applies the Contains predicate on the "next_map_version_state" field.
func NextMapVersionStateContains(v string) predicate.Car {
	return predicate.Car(sql.FieldContains(FieldNextMapVersionState, v))
}

// NextMapVersionStateHasPrefix applies the HasPrefix predicate on the "next_map_version_state" field.
func NextMapVersionStateHasPrefix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasPrefix(FieldNextMapVersionState, v))
}

// NextMapVersionStateHasSuffix applies the HasSuffix predicate on the "next_map_version_state" field.
func NextMapVersionStateHasSuffix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasSuffix(FieldNextMapVersionState, v))
}

// NextMapVersionStateEqualFold applies the EqualFold predicate on the "next_map_version_state" field.
func NextMapVersionStateEqualFold(v string) predicate.Car {
	return predicate.Car(sql.FieldEqualFold(FieldNextMapVersionState, v))
}

// NextMapVersionStateContainsFold applies the ContainsFold predicate on the "next_map_version_state" field.
func NextMapVersionStateContainsFold(v string) predicate.Car {
	return predicate.Car(sql.FieldContainsFold(FieldNextMapVersionState, v))
}

// NextMapVersionProcessEQ applies the EQ predicate on the "next_map_version_process" field.
func NextMapVersionProcessEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldNextMapVersionProcess, v))
}

// NextMapVersionProcessNEQ applies the NEQ predicate on the "next_map_version_process" field.
func NextMapVersionProcessNEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldNextMapVersionProcess, v))
}

// NextMapVersionProcessIn applies the In predicate on the "next_map_version_process" field.
func NextMapVersionProcessIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldNextMapVersionProcess, vs...))
}

// NextMapVersionProcessNotIn applies the NotIn predicate on the "next_map_version_process" field.
func NextMapVersionProcessNotIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldNextMapVersionProcess, vs...))
}

// NextMapVersionProcessGT applies the GT predicate on the "next_map_version_process" field.
func NextMapVersionProcessGT(v int) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldNextMapVersionProcess, v))
}

// NextMapVersionProcessGTE applies the GTE predicate on the "next_map_version_process" field.
func NextMapVersionProcessGTE(v int) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldNextMapVersionProcess, v))
}

// NextMapVersionProcessLT applies the LT predicate on the "next_map_version_process" field.
func NextMapVersionProcessLT(v int) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldNextMapVersionProcess, v))
}

// NextMapVersionProcessLTE applies the LTE predicate on the "next_map_version_process" field.
func NextMapVersionProcessLTE(v int) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldNextMapVersionProcess, v))
}

// GrAutoVersionEQ applies the EQ predicate on the "gr_auto_version" field.
func GrAutoVersionEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldGrAutoVersion, v))
}

// GrAutoVersionNEQ applies the NEQ predicate on the "gr_auto_version" field.
func GrAutoVersionNEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldGrAutoVersion, v))
}

// GrAutoVersionIn applies the In predicate on the "gr_auto_version" field.
func GrAutoVersionIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldGrAutoVersion, vs...))
}

// GrAutoVersionNotIn applies the NotIn predicate on the "gr_auto_version" field.
func GrAutoVersionNotIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldGrAutoVersion, vs...))
}

// GrAutoVersionGT applies the GT predicate on the "gr_auto_version" field.
func GrAutoVersionGT(v string) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldGrAutoVersion, v))
}

// GrAutoVersionGTE applies the GTE predicate on the "gr_auto_version" field.
func GrAutoVersionGTE(v string) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldGrAutoVersion, v))
}

// GrAutoVersionLT applies the LT predicate on the "gr_auto_version" field.
func GrAutoVersionLT(v string) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldGrAutoVersion, v))
}

// GrAutoVersionLTE applies the LTE predicate on the "gr_auto_version" field.
func GrAutoVersionLTE(v string) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldGrAutoVersion, v))
}

// GrAutoVersionContains applies the Contains predicate on the "gr_auto_version" field.
func GrAutoVersionContains(v string) predicate.Car {
	return predicate.Car(sql.FieldContains(FieldGrAutoVersion, v))
}

// GrAutoVersionHasPrefix applies the HasPrefix predicate on the "gr_auto_version" field.
func GrAutoVersionHasPrefix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasPrefix(FieldGrAutoVersion, v))
}

// GrAutoVersionHasSuffix applies the HasSuffix predicate on the "gr_auto_version" field.
func GrAutoVersionHasSuffix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasSuffix(FieldGrAutoVersion, v))
}

// GrAutoVersionEqualFold applies the EqualFold predicate on the "gr_auto_version" field.
func GrAutoVersionEqualFold(v string) predicate.Car {
	return predicate.Car(sql.FieldEqualFold(FieldGrAutoVersion, v))
}

// GrAutoVersionContainsFold applies the ContainsFold predicate on the "gr_auto_version" field.
func GrAutoVersionContainsFold(v string) predicate.Car {
	return predicate.Car(sql.FieldContainsFold(FieldGrAutoVersion, v))
}

// GrUIVersionEQ applies the EQ predicate on the "gr_ui_version" field.
func GrUIVersionEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldGrUIVersion, v))
}

// GrUIVersionNEQ applies the NEQ predicate on the "gr_ui_version" field.
func GrUIVersionNEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldGrUIVersion, v))
}

// GrUIVersionIn applies the In predicate on the "gr_ui_version" field.
func GrUIVersionIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldGrUIVersion, vs...))
}

// GrUIVersionNotIn applies the NotIn predicate on the "gr_ui_version" field.
func GrUIVersionNotIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldGrUIVersion, vs...))
}

// GrUIVersionGT applies the GT predicate on the "gr_ui_version" field.
func GrUIVersionGT(v string) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldGrUIVersion, v))
}

// GrUIVersionGTE applies the GTE predicate on the "gr_ui_version" field.
func GrUIVersionGTE(v string) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldGrUIVersion, v))
}

// GrUIVersionLT applies the LT predicate on the "gr_ui_version" field.
func GrUIVersionLT(v string) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldGrUIVersion, v))
}

// GrUIVersionLTE applies the LTE predicate on the "gr_ui_version" field.
func GrUIVersionLTE(v string) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldGrUIVersion, v))
}

// GrUIVersionContains applies the Contains predicate on the "gr_ui_version" field.
func GrUIVersionContains(v string) predicate.Car {
	return predicate.Car(sql.FieldContains(FieldGrUIVersion, v))
}

// GrUIVersionHasPrefix applies the HasPrefix predicate on the "gr_ui_version" field.
func GrUIVersionHasPrefix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasPrefix(FieldGrUIVersion, v))
}

// GrUIVersionHasSuffix applies the HasSuffix predicate on the "gr_ui_version" field.
func GrUIVersionHasSuffix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasSuffix(FieldGrUIVersion, v))
}

// GrUIVersionEqualFold applies the EqualFold predicate on the "gr_ui_version" field.
func GrUIVersionEqualFold(v string) predicate.Car {
	return predicate.Car(sql.FieldEqualFold(FieldGrUIVersion, v))
}

// GrUIVersionContainsFold applies the ContainsFold predicate on the "gr_ui_version" field.
func GrUIVersionContainsFold(v string) predicate.Car {
	return predicate.Car(sql.FieldContainsFold(FieldGrUIVersion, v))
}

// CarproxyIDEQ applies the EQ predicate on the "carproxy_id" field.
func CarproxyIDEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldCarproxyID, v))
}

// CarproxyIDNEQ applies the NEQ predicate on the "carproxy_id" field.
func CarproxyIDNEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldCarproxyID, v))
}

// CarproxyIDIn applies the In predicate on the "carproxy_id" field.
func CarproxyIDIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldCarproxyID, vs...))
}

// CarproxyIDNotIn applies the NotIn predicate on the "carproxy_id" field.
func CarproxyIDNotIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldCarproxyID, vs...))
}

// CarproxyIDGT applies the GT predicate on the "carproxy_id" field.
func CarproxyIDGT(v string) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldCarproxyID, v))
}

// CarproxyIDGTE applies the GTE predicate on the "carproxy_id" field.
func CarproxyIDGTE(v string) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldCarproxyID, v))
}

// CarproxyIDLT applies the LT predicate on the "carproxy_id" field.
func CarproxyIDLT(v string) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldCarproxyID, v))
}

// CarproxyIDLTE applies the LTE predicate on the "carproxy_id" field.
func CarproxyIDLTE(v string) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldCarproxyID, v))
}

// CarproxyIDContains applies the Contains predicate on the "carproxy_id" field.
func CarproxyIDContains(v string) predicate.Car {
	return predicate.Car(sql.FieldContains(FieldCarproxyID, v))
}

// CarproxyIDHasPrefix applies the HasPrefix predicate on the "carproxy_id" field.
func CarproxyIDHasPrefix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasPrefix(FieldCarproxyID, v))
}

// CarproxyIDHasSuffix applies the HasSuffix predicate on the "carproxy_id" field.
func CarproxyIDHasSuffix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasSuffix(FieldCarproxyID, v))
}

// CarproxyIDEqualFold applies the EqualFold predicate on the "carproxy_id" field.
func CarproxyIDEqualFold(v string) predicate.Car {
	return predicate.Car(sql.FieldEqualFold(FieldCarproxyID, v))
}

// CarproxyIDContainsFold applies the ContainsFold predicate on the "carproxy_id" field.
func CarproxyIDContainsFold(v string) predicate.Car {
	return predicate.Car(sql.FieldContainsFold(FieldCarproxyID, v))
}

// ExtendYokeeIDEQ applies the EQ predicate on the "extend_yokee_id" field.
func ExtendYokeeIDEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldExtendYokeeID, v))
}

// ExtendYokeeIDNEQ applies the NEQ predicate on the "extend_yokee_id" field.
func ExtendYokeeIDNEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldExtendYokeeID, v))
}

// ExtendYokeeIDIn applies the In predicate on the "extend_yokee_id" field.
func ExtendYokeeIDIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldExtendYokeeID, vs...))
}

// ExtendYokeeIDNotIn applies the NotIn predicate on the "extend_yokee_id" field.
func ExtendYokeeIDNotIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldExtendYokeeID, vs...))
}

// ExtendYokeeIDGT applies the GT predicate on the "extend_yokee_id" field.
func ExtendYokeeIDGT(v int) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldExtendYokeeID, v))
}

// ExtendYokeeIDGTE applies the GTE predicate on the "extend_yokee_id" field.
func ExtendYokeeIDGTE(v int) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldExtendYokeeID, v))
}

// ExtendYokeeIDLT applies the LT predicate on the "extend_yokee_id" field.
func ExtendYokeeIDLT(v int) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldExtendYokeeID, v))
}

// ExtendYokeeIDLTE applies the LTE predicate on the "extend_yokee_id" field.
func ExtendYokeeIDLTE(v int) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldExtendYokeeID, v))
}

// ExtendYokeeIDIsNil applies the IsNil predicate on the "extend_yokee_id" field.
func ExtendYokeeIDIsNil() predicate.Car {
	return predicate.Car(sql.FieldIsNull(FieldExtendYokeeID))
}

// ExtendYokeeIDNotNil applies the NotNil predicate on the "extend_yokee_id" field.
func ExtendYokeeIDNotNil() predicate.Car {
	return predicate.Car(sql.FieldNotNull(FieldExtendYokeeID))
}

// AliveTimeEQ applies the EQ predicate on the "alive_time" field.
func AliveTimeEQ(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldAliveTime, v))
}

// AliveTimeNEQ applies the NEQ predicate on the "alive_time" field.
func AliveTimeNEQ(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldAliveTime, v))
}

// AliveTimeIn applies the In predicate on the "alive_time" field.
func AliveTimeIn(vs ...time.Time) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldAliveTime, vs...))
}

// AliveTimeNotIn applies the NotIn predicate on the "alive_time" field.
func AliveTimeNotIn(vs ...time.Time) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldAliveTime, vs...))
}

// AliveTimeGT applies the GT predicate on the "alive_time" field.
func AliveTimeGT(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldAliveTime, v))
}

// AliveTimeGTE applies the GTE predicate on the "alive_time" field.
func AliveTimeGTE(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldAliveTime, v))
}

// AliveTimeLT applies the LT predicate on the "alive_time" field.
func AliveTimeLT(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldAliveTime, v))
}

// AliveTimeLTE applies the LTE predicate on the "alive_time" field.
func AliveTimeLTE(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldAliveTime, v))
}

// AliveTimeIsNil applies the IsNil predicate on the "alive_time" field.
func AliveTimeIsNil() predicate.Car {
	return predicate.Car(sql.FieldIsNull(FieldAliveTime))
}

// AliveTimeNotNil applies the NotNil predicate on the "alive_time" field.
func AliveTimeNotNil() predicate.Car {
	return predicate.Car(sql.FieldNotNull(FieldAliveTime))
}

// RegisterTimeEQ applies the EQ predicate on the "register_time" field.
func RegisterTimeEQ(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldRegisterTime, v))
}

// RegisterTimeNEQ applies the NEQ predicate on the "register_time" field.
func RegisterTimeNEQ(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldRegisterTime, v))
}

// RegisterTimeIn applies the In predicate on the "register_time" field.
func RegisterTimeIn(vs ...time.Time) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldRegisterTime, vs...))
}

// RegisterTimeNotIn applies the NotIn predicate on the "register_time" field.
func RegisterTimeNotIn(vs ...time.Time) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldRegisterTime, vs...))
}

// RegisterTimeGT applies the GT predicate on the "register_time" field.
func RegisterTimeGT(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldRegisterTime, v))
}

// RegisterTimeGTE applies the GTE predicate on the "register_time" field.
func RegisterTimeGTE(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldRegisterTime, v))
}

// RegisterTimeLT applies the LT predicate on the "register_time" field.
func RegisterTimeLT(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldRegisterTime, v))
}

// RegisterTimeLTE applies the LTE predicate on the "register_time" field.
func RegisterTimeLTE(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldRegisterTime, v))
}

// RegisterTimeIsNil applies the IsNil predicate on the "register_time" field.
func RegisterTimeIsNil() predicate.Car {
	return predicate.Car(sql.FieldIsNull(FieldRegisterTime))
}

// RegisterTimeNotNil applies the NotNil predicate on the "register_time" field.
func RegisterTimeNotNil() predicate.Car {
	return predicate.Car(sql.FieldNotNull(FieldRegisterTime))
}

// DrivingStateTimeEQ applies the EQ predicate on the "driving_state_time" field.
func DrivingStateTimeEQ(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldDrivingStateTime, v))
}

// DrivingStateTimeNEQ applies the NEQ predicate on the "driving_state_time" field.
func DrivingStateTimeNEQ(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldDrivingStateTime, v))
}

// DrivingStateTimeIn applies the In predicate on the "driving_state_time" field.
func DrivingStateTimeIn(vs ...time.Time) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldDrivingStateTime, vs...))
}

// DrivingStateTimeNotIn applies the NotIn predicate on the "driving_state_time" field.
func DrivingStateTimeNotIn(vs ...time.Time) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldDrivingStateTime, vs...))
}

// DrivingStateTimeGT applies the GT predicate on the "driving_state_time" field.
func DrivingStateTimeGT(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldDrivingStateTime, v))
}

// DrivingStateTimeGTE applies the GTE predicate on the "driving_state_time" field.
func DrivingStateTimeGTE(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldDrivingStateTime, v))
}

// DrivingStateTimeLT applies the LT predicate on the "driving_state_time" field.
func DrivingStateTimeLT(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldDrivingStateTime, v))
}

// DrivingStateTimeLTE applies the LTE predicate on the "driving_state_time" field.
func DrivingStateTimeLTE(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldDrivingStateTime, v))
}

// DrivingStateTimeIsNil applies the IsNil predicate on the "driving_state_time" field.
func DrivingStateTimeIsNil() predicate.Car {
	return predicate.Car(sql.FieldIsNull(FieldDrivingStateTime))
}

// DrivingStateTimeNotNil applies the NotNil predicate on the "driving_state_time" field.
func DrivingStateTimeNotNil() predicate.Car {
	return predicate.Car(sql.FieldNotNull(FieldDrivingStateTime))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldUpdateTime, v))
}

// HasBackgroundScenicArea applies the HasEdge predicate on the "background_scenic_area" edge.
func HasBackgroundScenicArea() predicate.Car {
	return predicate.Car(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BackgroundScenicAreaTable, BackgroundScenicAreaColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBackgroundScenicAreaWith applies the HasEdge predicate on the "background_scenic_area" edge with a given conditions (other predicates).
func HasBackgroundScenicAreaWith(preds ...predicate.ScenicArea) predicate.Car {
	return predicate.Car(func(s *sql.Selector) {
		step := newBackgroundScenicAreaStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCarsModels applies the HasEdge predicate on the "cars_models" edge.
func HasCarsModels() predicate.Car {
	return predicate.Car(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CarsModelsTable, CarsModelsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarsModelsWith applies the HasEdge predicate on the "cars_models" edge with a given conditions (other predicates).
func HasCarsModelsWith(preds ...predicate.CarsModels) predicate.Car {
	return predicate.Car(func(s *sql.Selector) {
		step := newCarsModelsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCarOperateLogs applies the HasEdge predicate on the "car_operate_logs" edge.
func HasCarOperateLogs() predicate.Car {
	return predicate.Car(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CarOperateLogsTable, CarOperateLogsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarOperateLogsWith applies the HasEdge predicate on the "car_operate_logs" edge with a given conditions (other predicates).
func HasCarOperateLogsWith(preds ...predicate.CarsOperateLog) predicate.Car {
	return predicate.Car(func(s *sql.Selector) {
		step := newCarOperateLogsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrders applies the HasEdge predicate on the "orders" edge.
func HasOrders() predicate.Car {
	return predicate.Car(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrdersTable, OrdersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrdersWith applies the HasEdge predicate on the "orders" edge with a given conditions (other predicates).
func HasOrdersWith(preds ...predicate.Order) predicate.Car {
	return predicate.Car(func(s *sql.Selector) {
		step := newOrdersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStatsHourlyCar applies the HasEdge predicate on the "stats_hourly_car" edge.
func HasStatsHourlyCar() predicate.Car {
	return predicate.Car(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, StatsHourlyCarTable, StatsHourlyCarColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStatsHourlyCarWith applies the HasEdge predicate on the "stats_hourly_car" edge with a given conditions (other predicates).
func HasStatsHourlyCarWith(preds ...predicate.StatsHourlyCar) predicate.Car {
	return predicate.Car(func(s *sql.Selector) {
		step := newStatsHourlyCarStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasScheTask applies the HasEdge predicate on the "sche_task" edge.
func HasScheTask() predicate.Car {
	return predicate.Car(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ScheTaskTable, ScheTaskColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasScheTaskWith applies the HasEdge predicate on the "sche_task" edge with a given conditions (other predicates).
func HasScheTaskWith(preds ...predicate.ScheTask) predicate.Car {
	return predicate.Car(func(s *sql.Selector) {
		step := newScheTaskStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasConfigFiles applies the HasEdge predicate on the "config_files" edge.
func HasConfigFiles() predicate.Car {
	return predicate.Car(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ConfigFilesTable, ConfigFilesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasConfigFilesWith applies the HasEdge predicate on the "config_files" edge with a given conditions (other predicates).
func HasConfigFilesWith(preds ...predicate.CarConfig) predicate.Car {
	return predicate.Car(func(s *sql.Selector) {
		step := newConfigFilesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCarConfigs applies the HasEdge predicate on the "car_configs" edge.
func HasCarConfigs() predicate.Car {
	return predicate.Car(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CarConfigsTable, CarConfigsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarConfigsWith applies the HasEdge predicate on the "car_configs" edge with a given conditions (other predicates).
func HasCarConfigsWith(preds ...predicate.CarConfigDownload) predicate.Car {
	return predicate.Car(func(s *sql.Selector) {
		step := newCarConfigsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Car) predicate.Car {
	return predicate.Car(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Car) predicate.Car {
	return predicate.Car(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Car) predicate.Car {
	return predicate.Car(sql.NotPredicates(p))
}
