// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/order"
	"github.com/jianbo-zh/jydata/database/ent/orderrefund"
)

// OrderRefundCreate is the builder for creating a OrderRefund entity.
type OrderRefundCreate struct {
	config
	mutation *OrderRefundMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (orc *OrderRefundCreate) SetType(i int) *OrderRefundCreate {
	orc.mutation.SetType(i)
	return orc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (orc *OrderRefundCreate) SetNillableType(i *int) *OrderRefundCreate {
	if i != nil {
		orc.SetType(*i)
	}
	return orc
}

// SetInitiatorID sets the "initiator_id" field.
func (orc *OrderRefundCreate) SetInitiatorID(i int) *OrderRefundCreate {
	orc.mutation.SetInitiatorID(i)
	return orc
}

// SetNillableInitiatorID sets the "initiator_id" field if the given value is not nil.
func (orc *OrderRefundCreate) SetNillableInitiatorID(i *int) *OrderRefundCreate {
	if i != nil {
		orc.SetInitiatorID(*i)
	}
	return orc
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (orc *OrderRefundCreate) SetScenicAreaID(i int) *OrderRefundCreate {
	orc.mutation.SetScenicAreaID(i)
	return orc
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (orc *OrderRefundCreate) SetNillableScenicAreaID(i *int) *OrderRefundCreate {
	if i != nil {
		orc.SetScenicAreaID(*i)
	}
	return orc
}

// SetOrderID sets the "order_id" field.
func (orc *OrderRefundCreate) SetOrderID(i int) *OrderRefundCreate {
	orc.mutation.SetOrderID(i)
	return orc
}

// SetOrderNo sets the "order_no" field.
func (orc *OrderRefundCreate) SetOrderNo(s string) *OrderRefundCreate {
	orc.mutation.SetOrderNo(s)
	return orc
}

// SetNillableOrderNo sets the "order_no" field if the given value is not nil.
func (orc *OrderRefundCreate) SetNillableOrderNo(s *string) *OrderRefundCreate {
	if s != nil {
		orc.SetOrderNo(*s)
	}
	return orc
}

// SetRefundNo sets the "refund_no" field.
func (orc *OrderRefundCreate) SetRefundNo(s string) *OrderRefundCreate {
	orc.mutation.SetRefundNo(s)
	return orc
}

// SetWxRefundID sets the "wx_refund_id" field.
func (orc *OrderRefundCreate) SetWxRefundID(s string) *OrderRefundCreate {
	orc.mutation.SetWxRefundID(s)
	return orc
}

// SetNillableWxRefundID sets the "wx_refund_id" field if the given value is not nil.
func (orc *OrderRefundCreate) SetNillableWxRefundID(s *string) *OrderRefundCreate {
	if s != nil {
		orc.SetWxRefundID(*s)
	}
	return orc
}

// SetRefundAmount sets the "refund_amount" field.
func (orc *OrderRefundCreate) SetRefundAmount(i int) *OrderRefundCreate {
	orc.mutation.SetRefundAmount(i)
	return orc
}

// SetNillableRefundAmount sets the "refund_amount" field if the given value is not nil.
func (orc *OrderRefundCreate) SetNillableRefundAmount(i *int) *OrderRefundCreate {
	if i != nil {
		orc.SetRefundAmount(*i)
	}
	return orc
}

// SetState sets the "state" field.
func (orc *OrderRefundCreate) SetState(i int) *OrderRefundCreate {
	orc.mutation.SetState(i)
	return orc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (orc *OrderRefundCreate) SetNillableState(i *int) *OrderRefundCreate {
	if i != nil {
		orc.SetState(*i)
	}
	return orc
}

// SetRemark sets the "remark" field.
func (orc *OrderRefundCreate) SetRemark(s string) *OrderRefundCreate {
	orc.mutation.SetRemark(s)
	return orc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (orc *OrderRefundCreate) SetNillableRemark(s *string) *OrderRefundCreate {
	if s != nil {
		orc.SetRemark(*s)
	}
	return orc
}

// SetErrmsg sets the "errmsg" field.
func (orc *OrderRefundCreate) SetErrmsg(s string) *OrderRefundCreate {
	orc.mutation.SetErrmsg(s)
	return orc
}

// SetNillableErrmsg sets the "errmsg" field if the given value is not nil.
func (orc *OrderRefundCreate) SetNillableErrmsg(s *string) *OrderRefundCreate {
	if s != nil {
		orc.SetErrmsg(*s)
	}
	return orc
}

// SetFinishTime sets the "finish_time" field.
func (orc *OrderRefundCreate) SetFinishTime(t time.Time) *OrderRefundCreate {
	orc.mutation.SetFinishTime(t)
	return orc
}

// SetNillableFinishTime sets the "finish_time" field if the given value is not nil.
func (orc *OrderRefundCreate) SetNillableFinishTime(t *time.Time) *OrderRefundCreate {
	if t != nil {
		orc.SetFinishTime(*t)
	}
	return orc
}

// SetCreateTime sets the "create_time" field.
func (orc *OrderRefundCreate) SetCreateTime(t time.Time) *OrderRefundCreate {
	orc.mutation.SetCreateTime(t)
	return orc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (orc *OrderRefundCreate) SetNillableCreateTime(t *time.Time) *OrderRefundCreate {
	if t != nil {
		orc.SetCreateTime(*t)
	}
	return orc
}

// SetUpdateTime sets the "update_time" field.
func (orc *OrderRefundCreate) SetUpdateTime(t time.Time) *OrderRefundCreate {
	orc.mutation.SetUpdateTime(t)
	return orc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (orc *OrderRefundCreate) SetNillableUpdateTime(t *time.Time) *OrderRefundCreate {
	if t != nil {
		orc.SetUpdateTime(*t)
	}
	return orc
}

// SetID sets the "id" field.
func (orc *OrderRefundCreate) SetID(i int) *OrderRefundCreate {
	orc.mutation.SetID(i)
	return orc
}

// SetOrder sets the "order" edge to the Order entity.
func (orc *OrderRefundCreate) SetOrder(o *Order) *OrderRefundCreate {
	return orc.SetOrderID(o.ID)
}

// Mutation returns the OrderRefundMutation object of the builder.
func (orc *OrderRefundCreate) Mutation() *OrderRefundMutation {
	return orc.mutation
}

// Save creates the OrderRefund in the database.
func (orc *OrderRefundCreate) Save(ctx context.Context) (*OrderRefund, error) {
	orc.defaults()
	return withHooks(ctx, orc.sqlSave, orc.mutation, orc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (orc *OrderRefundCreate) SaveX(ctx context.Context) *OrderRefund {
	v, err := orc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (orc *OrderRefundCreate) Exec(ctx context.Context) error {
	_, err := orc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (orc *OrderRefundCreate) ExecX(ctx context.Context) {
	if err := orc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (orc *OrderRefundCreate) defaults() {
	if _, ok := orc.mutation.GetType(); !ok {
		v := orderrefund.DefaultType
		orc.mutation.SetType(v)
	}
	if _, ok := orc.mutation.InitiatorID(); !ok {
		v := orderrefund.DefaultInitiatorID
		orc.mutation.SetInitiatorID(v)
	}
	if _, ok := orc.mutation.ScenicAreaID(); !ok {
		v := orderrefund.DefaultScenicAreaID
		orc.mutation.SetScenicAreaID(v)
	}
	if _, ok := orc.mutation.OrderNo(); !ok {
		v := orderrefund.DefaultOrderNo
		orc.mutation.SetOrderNo(v)
	}
	if _, ok := orc.mutation.WxRefundID(); !ok {
		v := orderrefund.DefaultWxRefundID
		orc.mutation.SetWxRefundID(v)
	}
	if _, ok := orc.mutation.RefundAmount(); !ok {
		v := orderrefund.DefaultRefundAmount
		orc.mutation.SetRefundAmount(v)
	}
	if _, ok := orc.mutation.State(); !ok {
		v := orderrefund.DefaultState
		orc.mutation.SetState(v)
	}
	if _, ok := orc.mutation.Remark(); !ok {
		v := orderrefund.DefaultRemark
		orc.mutation.SetRemark(v)
	}
	if _, ok := orc.mutation.Errmsg(); !ok {
		v := orderrefund.DefaultErrmsg
		orc.mutation.SetErrmsg(v)
	}
	if _, ok := orc.mutation.CreateTime(); !ok {
		v := orderrefund.DefaultCreateTime()
		orc.mutation.SetCreateTime(v)
	}
	if _, ok := orc.mutation.UpdateTime(); !ok {
		v := orderrefund.DefaultUpdateTime()
		orc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (orc *OrderRefundCreate) check() error {
	if _, ok := orc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "OrderRefund.type"`)}
	}
	if _, ok := orc.mutation.InitiatorID(); !ok {
		return &ValidationError{Name: "initiator_id", err: errors.New(`ent: missing required field "OrderRefund.initiator_id"`)}
	}
	if _, ok := orc.mutation.ScenicAreaID(); !ok {
		return &ValidationError{Name: "scenic_area_id", err: errors.New(`ent: missing required field "OrderRefund.scenic_area_id"`)}
	}
	if _, ok := orc.mutation.OrderID(); !ok {
		return &ValidationError{Name: "order_id", err: errors.New(`ent: missing required field "OrderRefund.order_id"`)}
	}
	if _, ok := orc.mutation.OrderNo(); !ok {
		return &ValidationError{Name: "order_no", err: errors.New(`ent: missing required field "OrderRefund.order_no"`)}
	}
	if _, ok := orc.mutation.RefundNo(); !ok {
		return &ValidationError{Name: "refund_no", err: errors.New(`ent: missing required field "OrderRefund.refund_no"`)}
	}
	if _, ok := orc.mutation.WxRefundID(); !ok {
		return &ValidationError{Name: "wx_refund_id", err: errors.New(`ent: missing required field "OrderRefund.wx_refund_id"`)}
	}
	if _, ok := orc.mutation.RefundAmount(); !ok {
		return &ValidationError{Name: "refund_amount", err: errors.New(`ent: missing required field "OrderRefund.refund_amount"`)}
	}
	if _, ok := orc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "OrderRefund.state"`)}
	}
	if _, ok := orc.mutation.Remark(); !ok {
		return &ValidationError{Name: "remark", err: errors.New(`ent: missing required field "OrderRefund.remark"`)}
	}
	if _, ok := orc.mutation.Errmsg(); !ok {
		return &ValidationError{Name: "errmsg", err: errors.New(`ent: missing required field "OrderRefund.errmsg"`)}
	}
	if _, ok := orc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "OrderRefund.create_time"`)}
	}
	if _, ok := orc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "OrderRefund.update_time"`)}
	}
	if len(orc.mutation.OrderIDs()) == 0 {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required edge "OrderRefund.order"`)}
	}
	return nil
}

func (orc *OrderRefundCreate) sqlSave(ctx context.Context) (*OrderRefund, error) {
	if err := orc.check(); err != nil {
		return nil, err
	}
	_node, _spec := orc.createSpec()
	if err := sqlgraph.CreateNode(ctx, orc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	orc.mutation.id = &_node.ID
	orc.mutation.done = true
	return _node, nil
}

func (orc *OrderRefundCreate) createSpec() (*OrderRefund, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderRefund{config: orc.config}
		_spec = sqlgraph.NewCreateSpec(orderrefund.Table, sqlgraph.NewFieldSpec(orderrefund.FieldID, field.TypeInt))
	)
	if id, ok := orc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := orc.mutation.GetType(); ok {
		_spec.SetField(orderrefund.FieldType, field.TypeInt, value)
		_node.Type = value
	}
	if value, ok := orc.mutation.InitiatorID(); ok {
		_spec.SetField(orderrefund.FieldInitiatorID, field.TypeInt, value)
		_node.InitiatorID = value
	}
	if value, ok := orc.mutation.ScenicAreaID(); ok {
		_spec.SetField(orderrefund.FieldScenicAreaID, field.TypeInt, value)
		_node.ScenicAreaID = value
	}
	if value, ok := orc.mutation.OrderNo(); ok {
		_spec.SetField(orderrefund.FieldOrderNo, field.TypeString, value)
		_node.OrderNo = value
	}
	if value, ok := orc.mutation.RefundNo(); ok {
		_spec.SetField(orderrefund.FieldRefundNo, field.TypeString, value)
		_node.RefundNo = value
	}
	if value, ok := orc.mutation.WxRefundID(); ok {
		_spec.SetField(orderrefund.FieldWxRefundID, field.TypeString, value)
		_node.WxRefundID = value
	}
	if value, ok := orc.mutation.RefundAmount(); ok {
		_spec.SetField(orderrefund.FieldRefundAmount, field.TypeInt, value)
		_node.RefundAmount = value
	}
	if value, ok := orc.mutation.State(); ok {
		_spec.SetField(orderrefund.FieldState, field.TypeInt, value)
		_node.State = value
	}
	if value, ok := orc.mutation.Remark(); ok {
		_spec.SetField(orderrefund.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := orc.mutation.Errmsg(); ok {
		_spec.SetField(orderrefund.FieldErrmsg, field.TypeString, value)
		_node.Errmsg = value
	}
	if value, ok := orc.mutation.FinishTime(); ok {
		_spec.SetField(orderrefund.FieldFinishTime, field.TypeTime, value)
		_node.FinishTime = &value
	}
	if value, ok := orc.mutation.CreateTime(); ok {
		_spec.SetField(orderrefund.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := orc.mutation.UpdateTime(); ok {
		_spec.SetField(orderrefund.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if nodes := orc.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderrefund.OrderTable,
			Columns: []string{orderrefund.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OrderRefundCreateBulk is the builder for creating many OrderRefund entities in bulk.
type OrderRefundCreateBulk struct {
	config
	err      error
	builders []*OrderRefundCreate
}

// Save creates the OrderRefund entities in the database.
func (orcb *OrderRefundCreateBulk) Save(ctx context.Context) ([]*OrderRefund, error) {
	if orcb.err != nil {
		return nil, orcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(orcb.builders))
	nodes := make([]*OrderRefund, len(orcb.builders))
	mutators := make([]Mutator, len(orcb.builders))
	for i := range orcb.builders {
		func(i int, root context.Context) {
			builder := orcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderRefundMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, orcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, orcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, orcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (orcb *OrderRefundCreateBulk) SaveX(ctx context.Context) []*OrderRefund {
	v, err := orcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (orcb *OrderRefundCreateBulk) Exec(ctx context.Context) error {
	_, err := orcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (orcb *OrderRefundCreateBulk) ExecX(ctx context.Context) {
	if err := orcb.Exec(ctx); err != nil {
		panic(err)
	}
}
