// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"github.com/jianbo-zh/jydata/database/ent/scenicareaextendyokee"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScenicAreaExtendYokeeUpdate is the builder for updating ScenicAreaExtendYokee entities.
type ScenicAreaExtendYokeeUpdate struct {
	config
	hooks    []Hook
	mutation *ScenicAreaExtendYokeeMutation
}

// Where appends a list predicates to the ScenicAreaExtendYokeeUpdate builder.
func (saeyu *ScenicAreaExtendYokeeUpdate) Where(ps ...predicate.ScenicAreaExtendYokee) *ScenicAreaExtendYokeeUpdate {
	saeyu.mutation.Where(ps...)
	return saeyu
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (saeyu *ScenicAreaExtendYokeeUpdate) SetScenicAreaID(i int) *ScenicAreaExtendYokeeUpdate {
	saeyu.mutation.ResetScenicAreaID()
	saeyu.mutation.SetScenicAreaID(i)
	return saeyu
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (saeyu *ScenicAreaExtendYokeeUpdate) SetNillableScenicAreaID(i *int) *ScenicAreaExtendYokeeUpdate {
	if i != nil {
		saeyu.SetScenicAreaID(*i)
	}
	return saeyu
}

// AddScenicAreaID adds i to the "scenic_area_id" field.
func (saeyu *ScenicAreaExtendYokeeUpdate) AddScenicAreaID(i int) *ScenicAreaExtendYokeeUpdate {
	saeyu.mutation.AddScenicAreaID(i)
	return saeyu
}

// SetYokeeAppID sets the "yokee_app_id" field.
func (saeyu *ScenicAreaExtendYokeeUpdate) SetYokeeAppID(s string) *ScenicAreaExtendYokeeUpdate {
	saeyu.mutation.SetYokeeAppID(s)
	return saeyu
}

// SetNillableYokeeAppID sets the "yokee_app_id" field if the given value is not nil.
func (saeyu *ScenicAreaExtendYokeeUpdate) SetNillableYokeeAppID(s *string) *ScenicAreaExtendYokeeUpdate {
	if s != nil {
		saeyu.SetYokeeAppID(*s)
	}
	return saeyu
}

// SetYokeeAppKey sets the "yokee_app_key" field.
func (saeyu *ScenicAreaExtendYokeeUpdate) SetYokeeAppKey(s string) *ScenicAreaExtendYokeeUpdate {
	saeyu.mutation.SetYokeeAppKey(s)
	return saeyu
}

// SetNillableYokeeAppKey sets the "yokee_app_key" field if the given value is not nil.
func (saeyu *ScenicAreaExtendYokeeUpdate) SetNillableYokeeAppKey(s *string) *ScenicAreaExtendYokeeUpdate {
	if s != nil {
		saeyu.SetYokeeAppKey(*s)
	}
	return saeyu
}

// SetYokeeOrgID sets the "yokee_org_id" field.
func (saeyu *ScenicAreaExtendYokeeUpdate) SetYokeeOrgID(i int) *ScenicAreaExtendYokeeUpdate {
	saeyu.mutation.ResetYokeeOrgID()
	saeyu.mutation.SetYokeeOrgID(i)
	return saeyu
}

// SetNillableYokeeOrgID sets the "yokee_org_id" field if the given value is not nil.
func (saeyu *ScenicAreaExtendYokeeUpdate) SetNillableYokeeOrgID(i *int) *ScenicAreaExtendYokeeUpdate {
	if i != nil {
		saeyu.SetYokeeOrgID(*i)
	}
	return saeyu
}

// AddYokeeOrgID adds i to the "yokee_org_id" field.
func (saeyu *ScenicAreaExtendYokeeUpdate) AddYokeeOrgID(i int) *ScenicAreaExtendYokeeUpdate {
	saeyu.mutation.AddYokeeOrgID(i)
	return saeyu
}

// SetYokeeOrgName sets the "yokee_org_name" field.
func (saeyu *ScenicAreaExtendYokeeUpdate) SetYokeeOrgName(s string) *ScenicAreaExtendYokeeUpdate {
	saeyu.mutation.SetYokeeOrgName(s)
	return saeyu
}

// SetNillableYokeeOrgName sets the "yokee_org_name" field if the given value is not nil.
func (saeyu *ScenicAreaExtendYokeeUpdate) SetNillableYokeeOrgName(s *string) *ScenicAreaExtendYokeeUpdate {
	if s != nil {
		saeyu.SetYokeeOrgName(*s)
	}
	return saeyu
}

// SetYokeeStationID sets the "yokee_station_id" field.
func (saeyu *ScenicAreaExtendYokeeUpdate) SetYokeeStationID(i int) *ScenicAreaExtendYokeeUpdate {
	saeyu.mutation.ResetYokeeStationID()
	saeyu.mutation.SetYokeeStationID(i)
	return saeyu
}

// SetNillableYokeeStationID sets the "yokee_station_id" field if the given value is not nil.
func (saeyu *ScenicAreaExtendYokeeUpdate) SetNillableYokeeStationID(i *int) *ScenicAreaExtendYokeeUpdate {
	if i != nil {
		saeyu.SetYokeeStationID(*i)
	}
	return saeyu
}

// AddYokeeStationID adds i to the "yokee_station_id" field.
func (saeyu *ScenicAreaExtendYokeeUpdate) AddYokeeStationID(i int) *ScenicAreaExtendYokeeUpdate {
	saeyu.mutation.AddYokeeStationID(i)
	return saeyu
}

// SetYokeeStationName sets the "yokee_station_name" field.
func (saeyu *ScenicAreaExtendYokeeUpdate) SetYokeeStationName(s string) *ScenicAreaExtendYokeeUpdate {
	saeyu.mutation.SetYokeeStationName(s)
	return saeyu
}

// SetNillableYokeeStationName sets the "yokee_station_name" field if the given value is not nil.
func (saeyu *ScenicAreaExtendYokeeUpdate) SetNillableYokeeStationName(s *string) *ScenicAreaExtendYokeeUpdate {
	if s != nil {
		saeyu.SetYokeeStationName(*s)
	}
	return saeyu
}

// SetUpdateTime sets the "update_time" field.
func (saeyu *ScenicAreaExtendYokeeUpdate) SetUpdateTime(t time.Time) *ScenicAreaExtendYokeeUpdate {
	saeyu.mutation.SetUpdateTime(t)
	return saeyu
}

// Mutation returns the ScenicAreaExtendYokeeMutation object of the builder.
func (saeyu *ScenicAreaExtendYokeeUpdate) Mutation() *ScenicAreaExtendYokeeMutation {
	return saeyu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (saeyu *ScenicAreaExtendYokeeUpdate) Save(ctx context.Context) (int, error) {
	saeyu.defaults()
	return withHooks(ctx, saeyu.sqlSave, saeyu.mutation, saeyu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (saeyu *ScenicAreaExtendYokeeUpdate) SaveX(ctx context.Context) int {
	affected, err := saeyu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (saeyu *ScenicAreaExtendYokeeUpdate) Exec(ctx context.Context) error {
	_, err := saeyu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (saeyu *ScenicAreaExtendYokeeUpdate) ExecX(ctx context.Context) {
	if err := saeyu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (saeyu *ScenicAreaExtendYokeeUpdate) defaults() {
	if _, ok := saeyu.mutation.UpdateTime(); !ok {
		v := scenicareaextendyokee.UpdateDefaultUpdateTime()
		saeyu.mutation.SetUpdateTime(v)
	}
}

func (saeyu *ScenicAreaExtendYokeeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(scenicareaextendyokee.Table, scenicareaextendyokee.Columns, sqlgraph.NewFieldSpec(scenicareaextendyokee.FieldID, field.TypeInt))
	if ps := saeyu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := saeyu.mutation.ScenicAreaID(); ok {
		_spec.SetField(scenicareaextendyokee.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := saeyu.mutation.AddedScenicAreaID(); ok {
		_spec.AddField(scenicareaextendyokee.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := saeyu.mutation.YokeeAppID(); ok {
		_spec.SetField(scenicareaextendyokee.FieldYokeeAppID, field.TypeString, value)
	}
	if value, ok := saeyu.mutation.YokeeAppKey(); ok {
		_spec.SetField(scenicareaextendyokee.FieldYokeeAppKey, field.TypeString, value)
	}
	if value, ok := saeyu.mutation.YokeeOrgID(); ok {
		_spec.SetField(scenicareaextendyokee.FieldYokeeOrgID, field.TypeInt, value)
	}
	if value, ok := saeyu.mutation.AddedYokeeOrgID(); ok {
		_spec.AddField(scenicareaextendyokee.FieldYokeeOrgID, field.TypeInt, value)
	}
	if value, ok := saeyu.mutation.YokeeOrgName(); ok {
		_spec.SetField(scenicareaextendyokee.FieldYokeeOrgName, field.TypeString, value)
	}
	if value, ok := saeyu.mutation.YokeeStationID(); ok {
		_spec.SetField(scenicareaextendyokee.FieldYokeeStationID, field.TypeInt, value)
	}
	if value, ok := saeyu.mutation.AddedYokeeStationID(); ok {
		_spec.AddField(scenicareaextendyokee.FieldYokeeStationID, field.TypeInt, value)
	}
	if value, ok := saeyu.mutation.YokeeStationName(); ok {
		_spec.SetField(scenicareaextendyokee.FieldYokeeStationName, field.TypeString, value)
	}
	if value, ok := saeyu.mutation.UpdateTime(); ok {
		_spec.SetField(scenicareaextendyokee.FieldUpdateTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, saeyu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scenicareaextendyokee.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	saeyu.mutation.done = true
	return n, nil
}

// ScenicAreaExtendYokeeUpdateOne is the builder for updating a single ScenicAreaExtendYokee entity.
type ScenicAreaExtendYokeeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ScenicAreaExtendYokeeMutation
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (saeyuo *ScenicAreaExtendYokeeUpdateOne) SetScenicAreaID(i int) *ScenicAreaExtendYokeeUpdateOne {
	saeyuo.mutation.ResetScenicAreaID()
	saeyuo.mutation.SetScenicAreaID(i)
	return saeyuo
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (saeyuo *ScenicAreaExtendYokeeUpdateOne) SetNillableScenicAreaID(i *int) *ScenicAreaExtendYokeeUpdateOne {
	if i != nil {
		saeyuo.SetScenicAreaID(*i)
	}
	return saeyuo
}

// AddScenicAreaID adds i to the "scenic_area_id" field.
func (saeyuo *ScenicAreaExtendYokeeUpdateOne) AddScenicAreaID(i int) *ScenicAreaExtendYokeeUpdateOne {
	saeyuo.mutation.AddScenicAreaID(i)
	return saeyuo
}

// SetYokeeAppID sets the "yokee_app_id" field.
func (saeyuo *ScenicAreaExtendYokeeUpdateOne) SetYokeeAppID(s string) *ScenicAreaExtendYokeeUpdateOne {
	saeyuo.mutation.SetYokeeAppID(s)
	return saeyuo
}

// SetNillableYokeeAppID sets the "yokee_app_id" field if the given value is not nil.
func (saeyuo *ScenicAreaExtendYokeeUpdateOne) SetNillableYokeeAppID(s *string) *ScenicAreaExtendYokeeUpdateOne {
	if s != nil {
		saeyuo.SetYokeeAppID(*s)
	}
	return saeyuo
}

// SetYokeeAppKey sets the "yokee_app_key" field.
func (saeyuo *ScenicAreaExtendYokeeUpdateOne) SetYokeeAppKey(s string) *ScenicAreaExtendYokeeUpdateOne {
	saeyuo.mutation.SetYokeeAppKey(s)
	return saeyuo
}

// SetNillableYokeeAppKey sets the "yokee_app_key" field if the given value is not nil.
func (saeyuo *ScenicAreaExtendYokeeUpdateOne) SetNillableYokeeAppKey(s *string) *ScenicAreaExtendYokeeUpdateOne {
	if s != nil {
		saeyuo.SetYokeeAppKey(*s)
	}
	return saeyuo
}

// SetYokeeOrgID sets the "yokee_org_id" field.
func (saeyuo *ScenicAreaExtendYokeeUpdateOne) SetYokeeOrgID(i int) *ScenicAreaExtendYokeeUpdateOne {
	saeyuo.mutation.ResetYokeeOrgID()
	saeyuo.mutation.SetYokeeOrgID(i)
	return saeyuo
}

// SetNillableYokeeOrgID sets the "yokee_org_id" field if the given value is not nil.
func (saeyuo *ScenicAreaExtendYokeeUpdateOne) SetNillableYokeeOrgID(i *int) *ScenicAreaExtendYokeeUpdateOne {
	if i != nil {
		saeyuo.SetYokeeOrgID(*i)
	}
	return saeyuo
}

// AddYokeeOrgID adds i to the "yokee_org_id" field.
func (saeyuo *ScenicAreaExtendYokeeUpdateOne) AddYokeeOrgID(i int) *ScenicAreaExtendYokeeUpdateOne {
	saeyuo.mutation.AddYokeeOrgID(i)
	return saeyuo
}

// SetYokeeOrgName sets the "yokee_org_name" field.
func (saeyuo *ScenicAreaExtendYokeeUpdateOne) SetYokeeOrgName(s string) *ScenicAreaExtendYokeeUpdateOne {
	saeyuo.mutation.SetYokeeOrgName(s)
	return saeyuo
}

// SetNillableYokeeOrgName sets the "yokee_org_name" field if the given value is not nil.
func (saeyuo *ScenicAreaExtendYokeeUpdateOne) SetNillableYokeeOrgName(s *string) *ScenicAreaExtendYokeeUpdateOne {
	if s != nil {
		saeyuo.SetYokeeOrgName(*s)
	}
	return saeyuo
}

// SetYokeeStationID sets the "yokee_station_id" field.
func (saeyuo *ScenicAreaExtendYokeeUpdateOne) SetYokeeStationID(i int) *ScenicAreaExtendYokeeUpdateOne {
	saeyuo.mutation.ResetYokeeStationID()
	saeyuo.mutation.SetYokeeStationID(i)
	return saeyuo
}

// SetNillableYokeeStationID sets the "yokee_station_id" field if the given value is not nil.
func (saeyuo *ScenicAreaExtendYokeeUpdateOne) SetNillableYokeeStationID(i *int) *ScenicAreaExtendYokeeUpdateOne {
	if i != nil {
		saeyuo.SetYokeeStationID(*i)
	}
	return saeyuo
}

// AddYokeeStationID adds i to the "yokee_station_id" field.
func (saeyuo *ScenicAreaExtendYokeeUpdateOne) AddYokeeStationID(i int) *ScenicAreaExtendYokeeUpdateOne {
	saeyuo.mutation.AddYokeeStationID(i)
	return saeyuo
}

// SetYokeeStationName sets the "yokee_station_name" field.
func (saeyuo *ScenicAreaExtendYokeeUpdateOne) SetYokeeStationName(s string) *ScenicAreaExtendYokeeUpdateOne {
	saeyuo.mutation.SetYokeeStationName(s)
	return saeyuo
}

// SetNillableYokeeStationName sets the "yokee_station_name" field if the given value is not nil.
func (saeyuo *ScenicAreaExtendYokeeUpdateOne) SetNillableYokeeStationName(s *string) *ScenicAreaExtendYokeeUpdateOne {
	if s != nil {
		saeyuo.SetYokeeStationName(*s)
	}
	return saeyuo
}

// SetUpdateTime sets the "update_time" field.
func (saeyuo *ScenicAreaExtendYokeeUpdateOne) SetUpdateTime(t time.Time) *ScenicAreaExtendYokeeUpdateOne {
	saeyuo.mutation.SetUpdateTime(t)
	return saeyuo
}

// Mutation returns the ScenicAreaExtendYokeeMutation object of the builder.
func (saeyuo *ScenicAreaExtendYokeeUpdateOne) Mutation() *ScenicAreaExtendYokeeMutation {
	return saeyuo.mutation
}

// Where appends a list predicates to the ScenicAreaExtendYokeeUpdate builder.
func (saeyuo *ScenicAreaExtendYokeeUpdateOne) Where(ps ...predicate.ScenicAreaExtendYokee) *ScenicAreaExtendYokeeUpdateOne {
	saeyuo.mutation.Where(ps...)
	return saeyuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (saeyuo *ScenicAreaExtendYokeeUpdateOne) Select(field string, fields ...string) *ScenicAreaExtendYokeeUpdateOne {
	saeyuo.fields = append([]string{field}, fields...)
	return saeyuo
}

// Save executes the query and returns the updated ScenicAreaExtendYokee entity.
func (saeyuo *ScenicAreaExtendYokeeUpdateOne) Save(ctx context.Context) (*ScenicAreaExtendYokee, error) {
	saeyuo.defaults()
	return withHooks(ctx, saeyuo.sqlSave, saeyuo.mutation, saeyuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (saeyuo *ScenicAreaExtendYokeeUpdateOne) SaveX(ctx context.Context) *ScenicAreaExtendYokee {
	node, err := saeyuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (saeyuo *ScenicAreaExtendYokeeUpdateOne) Exec(ctx context.Context) error {
	_, err := saeyuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (saeyuo *ScenicAreaExtendYokeeUpdateOne) ExecX(ctx context.Context) {
	if err := saeyuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (saeyuo *ScenicAreaExtendYokeeUpdateOne) defaults() {
	if _, ok := saeyuo.mutation.UpdateTime(); !ok {
		v := scenicareaextendyokee.UpdateDefaultUpdateTime()
		saeyuo.mutation.SetUpdateTime(v)
	}
}

func (saeyuo *ScenicAreaExtendYokeeUpdateOne) sqlSave(ctx context.Context) (_node *ScenicAreaExtendYokee, err error) {
	_spec := sqlgraph.NewUpdateSpec(scenicareaextendyokee.Table, scenicareaextendyokee.Columns, sqlgraph.NewFieldSpec(scenicareaextendyokee.FieldID, field.TypeInt))
	id, ok := saeyuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ScenicAreaExtendYokee.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := saeyuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, scenicareaextendyokee.FieldID)
		for _, f := range fields {
			if !scenicareaextendyokee.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != scenicareaextendyokee.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := saeyuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := saeyuo.mutation.ScenicAreaID(); ok {
		_spec.SetField(scenicareaextendyokee.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := saeyuo.mutation.AddedScenicAreaID(); ok {
		_spec.AddField(scenicareaextendyokee.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := saeyuo.mutation.YokeeAppID(); ok {
		_spec.SetField(scenicareaextendyokee.FieldYokeeAppID, field.TypeString, value)
	}
	if value, ok := saeyuo.mutation.YokeeAppKey(); ok {
		_spec.SetField(scenicareaextendyokee.FieldYokeeAppKey, field.TypeString, value)
	}
	if value, ok := saeyuo.mutation.YokeeOrgID(); ok {
		_spec.SetField(scenicareaextendyokee.FieldYokeeOrgID, field.TypeInt, value)
	}
	if value, ok := saeyuo.mutation.AddedYokeeOrgID(); ok {
		_spec.AddField(scenicareaextendyokee.FieldYokeeOrgID, field.TypeInt, value)
	}
	if value, ok := saeyuo.mutation.YokeeOrgName(); ok {
		_spec.SetField(scenicareaextendyokee.FieldYokeeOrgName, field.TypeString, value)
	}
	if value, ok := saeyuo.mutation.YokeeStationID(); ok {
		_spec.SetField(scenicareaextendyokee.FieldYokeeStationID, field.TypeInt, value)
	}
	if value, ok := saeyuo.mutation.AddedYokeeStationID(); ok {
		_spec.AddField(scenicareaextendyokee.FieldYokeeStationID, field.TypeInt, value)
	}
	if value, ok := saeyuo.mutation.YokeeStationName(); ok {
		_spec.SetField(scenicareaextendyokee.FieldYokeeStationName, field.TypeString, value)
	}
	if value, ok := saeyuo.mutation.UpdateTime(); ok {
		_spec.SetField(scenicareaextendyokee.FieldUpdateTime, field.TypeTime, value)
	}
	_node = &ScenicAreaExtendYokee{config: saeyuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, saeyuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scenicareaextendyokee.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	saeyuo.mutation.done = true
	return _node, nil
}
