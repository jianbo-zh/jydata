// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/car"
	"github.com/jianbo-zh/jydata/database/ent/order"
	"github.com/jianbo-zh/jydata/database/ent/orderbilling"
	"github.com/jianbo-zh/jydata/database/ent/orderrefund"
	"github.com/jianbo-zh/jydata/database/ent/ordersharing"
	"github.com/jianbo-zh/jydata/database/ent/scenicarea"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderCreate is the builder for creating a Order entity.
type OrderCreate struct {
	config
	mutation *OrderMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (oc *OrderCreate) SetType(i int) *OrderCreate {
	oc.mutation.SetType(i)
	return oc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (oc *OrderCreate) SetNillableType(i *int) *OrderCreate {
	if i != nil {
		oc.SetType(*i)
	}
	return oc
}

// SetPeriod sets the "period" field.
func (oc *OrderCreate) SetPeriod(i int) *OrderCreate {
	oc.mutation.SetPeriod(i)
	return oc
}

// SetNillablePeriod sets the "period" field if the given value is not nil.
func (oc *OrderCreate) SetNillablePeriod(i *int) *OrderCreate {
	if i != nil {
		oc.SetPeriod(*i)
	}
	return oc
}

// SetOrderNo sets the "order_no" field.
func (oc *OrderCreate) SetOrderNo(s string) *OrderCreate {
	oc.mutation.SetOrderNo(s)
	return oc
}

// SetWxTxID sets the "wx_tx_id" field.
func (oc *OrderCreate) SetWxTxID(s string) *OrderCreate {
	oc.mutation.SetWxTxID(s)
	return oc
}

// SetNillableWxTxID sets the "wx_tx_id" field if the given value is not nil.
func (oc *OrderCreate) SetNillableWxTxID(s *string) *OrderCreate {
	if s != nil {
		oc.SetWxTxID(*s)
	}
	return oc
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (oc *OrderCreate) SetScenicAreaID(i int) *OrderCreate {
	oc.mutation.SetScenicAreaID(i)
	return oc
}

// SetMchID sets the "mch_id" field.
func (oc *OrderCreate) SetMchID(s string) *OrderCreate {
	oc.mutation.SetMchID(s)
	return oc
}

// SetNillableMchID sets the "mch_id" field if the given value is not nil.
func (oc *OrderCreate) SetNillableMchID(s *string) *OrderCreate {
	if s != nil {
		oc.SetMchID(*s)
	}
	return oc
}

// SetScenicAreaName sets the "scenic_area_name" field.
func (oc *OrderCreate) SetScenicAreaName(s string) *OrderCreate {
	oc.mutation.SetScenicAreaName(s)
	return oc
}

// SetUserID sets the "user_id" field.
func (oc *OrderCreate) SetUserID(i int) *OrderCreate {
	oc.mutation.SetUserID(i)
	return oc
}

// SetOpenID sets the "open_id" field.
func (oc *OrderCreate) SetOpenID(s string) *OrderCreate {
	oc.mutation.SetOpenID(s)
	return oc
}

// SetNickname sets the "nickname" field.
func (oc *OrderCreate) SetNickname(s string) *OrderCreate {
	oc.mutation.SetNickname(s)
	return oc
}

// SetPhone sets the "phone" field.
func (oc *OrderCreate) SetPhone(s string) *OrderCreate {
	oc.mutation.SetPhone(s)
	return oc
}

// SetCarID sets the "car_id" field.
func (oc *OrderCreate) SetCarID(i int) *OrderCreate {
	oc.mutation.SetCarID(i)
	return oc
}

// SetDeviceID sets the "device_id" field.
func (oc *OrderCreate) SetDeviceID(s string) *OrderCreate {
	oc.mutation.SetDeviceID(s)
	return oc
}

// SetCarName sets the "car_name" field.
func (oc *OrderCreate) SetCarName(s string) *OrderCreate {
	oc.mutation.SetCarName(s)
	return oc
}

// SetCarLicensePlate sets the "car_license_plate" field.
func (oc *OrderCreate) SetCarLicensePlate(s string) *OrderCreate {
	oc.mutation.SetCarLicensePlate(s)
	return oc
}

// SetModelID sets the "model_id" field.
func (oc *OrderCreate) SetModelID(i int) *OrderCreate {
	oc.mutation.SetModelID(i)
	return oc
}

// SetModelName sets the "model_name" field.
func (oc *OrderCreate) SetModelName(s string) *OrderCreate {
	oc.mutation.SetModelName(s)
	return oc
}

// SetCouponID sets the "coupon_id" field.
func (oc *OrderCreate) SetCouponID(i int) *OrderCreate {
	oc.mutation.SetCouponID(i)
	return oc
}

// SetNillableCouponID sets the "coupon_id" field if the given value is not nil.
func (oc *OrderCreate) SetNillableCouponID(i *int) *OrderCreate {
	if i != nil {
		oc.SetCouponID(*i)
	}
	return oc
}

// SetCouponName sets the "coupon_name" field.
func (oc *OrderCreate) SetCouponName(s string) *OrderCreate {
	oc.mutation.SetCouponName(s)
	return oc
}

// SetNillableCouponName sets the "coupon_name" field if the given value is not nil.
func (oc *OrderCreate) SetNillableCouponName(s *string) *OrderCreate {
	if s != nil {
		oc.SetCouponName(*s)
	}
	return oc
}

// SetUseMileageMeter sets the "use_mileage_meter" field.
func (oc *OrderCreate) SetUseMileageMeter(i int) *OrderCreate {
	oc.mutation.SetUseMileageMeter(i)
	return oc
}

// SetNillableUseMileageMeter sets the "use_mileage_meter" field if the given value is not nil.
func (oc *OrderCreate) SetNillableUseMileageMeter(i *int) *OrderCreate {
	if i != nil {
		oc.SetUseMileageMeter(*i)
	}
	return oc
}

// SetUseTimeSecond sets the "use_time_second" field.
func (oc *OrderCreate) SetUseTimeSecond(i int) *OrderCreate {
	oc.mutation.SetUseTimeSecond(i)
	return oc
}

// SetNillableUseTimeSecond sets the "use_time_second" field if the given value is not nil.
func (oc *OrderCreate) SetNillableUseTimeSecond(i *int) *OrderCreate {
	if i != nil {
		oc.SetUseTimeSecond(*i)
	}
	return oc
}

// SetDepositAmount sets the "deposit_amount" field.
func (oc *OrderCreate) SetDepositAmount(i int) *OrderCreate {
	oc.mutation.SetDepositAmount(i)
	return oc
}

// SetNillableDepositAmount sets the "deposit_amount" field if the given value is not nil.
func (oc *OrderCreate) SetNillableDepositAmount(i *int) *OrderCreate {
	if i != nil {
		oc.SetDepositAmount(*i)
	}
	return oc
}

// SetOrderAmount sets the "order_amount" field.
func (oc *OrderCreate) SetOrderAmount(i int) *OrderCreate {
	oc.mutation.SetOrderAmount(i)
	return oc
}

// SetNillableOrderAmount sets the "order_amount" field if the given value is not nil.
func (oc *OrderCreate) SetNillableOrderAmount(i *int) *OrderCreate {
	if i != nil {
		oc.SetOrderAmount(*i)
	}
	return oc
}

// SetRefundedAmount sets the "refunded_amount" field.
func (oc *OrderCreate) SetRefundedAmount(i int) *OrderCreate {
	oc.mutation.SetRefundedAmount(i)
	return oc
}

// SetNillableRefundedAmount sets the "refunded_amount" field if the given value is not nil.
func (oc *OrderCreate) SetNillableRefundedAmount(i *int) *OrderCreate {
	if i != nil {
		oc.SetRefundedAmount(*i)
	}
	return oc
}

// SetCouponAmount sets the "coupon_amount" field.
func (oc *OrderCreate) SetCouponAmount(i int) *OrderCreate {
	oc.mutation.SetCouponAmount(i)
	return oc
}

// SetNillableCouponAmount sets the "coupon_amount" field if the given value is not nil.
func (oc *OrderCreate) SetNillableCouponAmount(i *int) *OrderCreate {
	if i != nil {
		oc.SetCouponAmount(*i)
	}
	return oc
}

// SetOrderState sets the "order_state" field.
func (oc *OrderCreate) SetOrderState(i int) *OrderCreate {
	oc.mutation.SetOrderState(i)
	return oc
}

// SetNillableOrderState sets the "order_state" field if the given value is not nil.
func (oc *OrderCreate) SetNillableOrderState(i *int) *OrderCreate {
	if i != nil {
		oc.SetOrderState(*i)
	}
	return oc
}

// SetDepositState sets the "deposit_state" field.
func (oc *OrderCreate) SetDepositState(i int) *OrderCreate {
	oc.mutation.SetDepositState(i)
	return oc
}

// SetNillableDepositState sets the "deposit_state" field if the given value is not nil.
func (oc *OrderCreate) SetNillableDepositState(i *int) *OrderCreate {
	if i != nil {
		oc.SetDepositState(*i)
	}
	return oc
}

// SetEmergencyState sets the "emergency_state" field.
func (oc *OrderCreate) SetEmergencyState(i int) *OrderCreate {
	oc.mutation.SetEmergencyState(i)
	return oc
}

// SetNillableEmergencyState sets the "emergency_state" field if the given value is not nil.
func (oc *OrderCreate) SetNillableEmergencyState(i *int) *OrderCreate {
	if i != nil {
		oc.SetEmergencyState(*i)
	}
	return oc
}

// SetIsTestOrder sets the "is_test_order" field.
func (oc *OrderCreate) SetIsTestOrder(b bool) *OrderCreate {
	oc.mutation.SetIsTestOrder(b)
	return oc
}

// SetNillableIsTestOrder sets the "is_test_order" field if the given value is not nil.
func (oc *OrderCreate) SetNillableIsTestOrder(b *bool) *OrderCreate {
	if b != nil {
		oc.SetIsTestOrder(*b)
	}
	return oc
}

// SetIsCancel sets the "is_cancel" field.
func (oc *OrderCreate) SetIsCancel(b bool) *OrderCreate {
	oc.mutation.SetIsCancel(b)
	return oc
}

// SetNillableIsCancel sets the "is_cancel" field if the given value is not nil.
func (oc *OrderCreate) SetNillableIsCancel(b *bool) *OrderCreate {
	if b != nil {
		oc.SetIsCancel(*b)
	}
	return oc
}

// SetIsProfitSharing sets the "is_profit_sharing" field.
func (oc *OrderCreate) SetIsProfitSharing(b bool) *OrderCreate {
	oc.mutation.SetIsProfitSharing(b)
	return oc
}

// SetNillableIsProfitSharing sets the "is_profit_sharing" field if the given value is not nil.
func (oc *OrderCreate) SetNillableIsProfitSharing(b *bool) *OrderCreate {
	if b != nil {
		oc.SetIsProfitSharing(*b)
	}
	return oc
}

// SetRemark sets the "remark" field.
func (oc *OrderCreate) SetRemark(s string) *OrderCreate {
	oc.mutation.SetRemark(s)
	return oc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (oc *OrderCreate) SetNillableRemark(s *string) *OrderCreate {
	if s != nil {
		oc.SetRemark(*s)
	}
	return oc
}

// SetUserScore sets the "user_score" field.
func (oc *OrderCreate) SetUserScore(i int) *OrderCreate {
	oc.mutation.SetUserScore(i)
	return oc
}

// SetNillableUserScore sets the "user_score" field if the given value is not nil.
func (oc *OrderCreate) SetNillableUserScore(i *int) *OrderCreate {
	if i != nil {
		oc.SetUserScore(*i)
	}
	return oc
}

// SetUserComment sets the "user_comment" field.
func (oc *OrderCreate) SetUserComment(s string) *OrderCreate {
	oc.mutation.SetUserComment(s)
	return oc
}

// SetNillableUserComment sets the "user_comment" field if the given value is not nil.
func (oc *OrderCreate) SetNillableUserComment(s *string) *OrderCreate {
	if s != nil {
		oc.SetUserComment(*s)
	}
	return oc
}

// SetDepositTime sets the "deposit_time" field.
func (oc *OrderCreate) SetDepositTime(t time.Time) *OrderCreate {
	oc.mutation.SetDepositTime(t)
	return oc
}

// SetNillableDepositTime sets the "deposit_time" field if the given value is not nil.
func (oc *OrderCreate) SetNillableDepositTime(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetDepositTime(*t)
	}
	return oc
}

// SetFinishTime sets the "finish_time" field.
func (oc *OrderCreate) SetFinishTime(t time.Time) *OrderCreate {
	oc.mutation.SetFinishTime(t)
	return oc
}

// SetNillableFinishTime sets the "finish_time" field if the given value is not nil.
func (oc *OrderCreate) SetNillableFinishTime(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetFinishTime(*t)
	}
	return oc
}

// SetCreateTime sets the "create_time" field.
func (oc *OrderCreate) SetCreateTime(t time.Time) *OrderCreate {
	oc.mutation.SetCreateTime(t)
	return oc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (oc *OrderCreate) SetNillableCreateTime(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetCreateTime(*t)
	}
	return oc
}

// SetUpdateTime sets the "update_time" field.
func (oc *OrderCreate) SetUpdateTime(t time.Time) *OrderCreate {
	oc.mutation.SetUpdateTime(t)
	return oc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (oc *OrderCreate) SetNillableUpdateTime(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetUpdateTime(*t)
	}
	return oc
}

// SetID sets the "id" field.
func (oc *OrderCreate) SetID(i int) *OrderCreate {
	oc.mutation.SetID(i)
	return oc
}

// SetCar sets the "car" edge to the Car entity.
func (oc *OrderCreate) SetCar(c *Car) *OrderCreate {
	return oc.SetCarID(c.ID)
}

// SetBackgroundScenicAreaID sets the "background_scenic_area" edge to the ScenicArea entity by ID.
func (oc *OrderCreate) SetBackgroundScenicAreaID(id int) *OrderCreate {
	oc.mutation.SetBackgroundScenicAreaID(id)
	return oc
}

// SetBackgroundScenicArea sets the "background_scenic_area" edge to the ScenicArea entity.
func (oc *OrderCreate) SetBackgroundScenicArea(s *ScenicArea) *OrderCreate {
	return oc.SetBackgroundScenicAreaID(s.ID)
}

// SetBillingID sets the "billing" edge to the OrderBilling entity by ID.
func (oc *OrderCreate) SetBillingID(id int) *OrderCreate {
	oc.mutation.SetBillingID(id)
	return oc
}

// SetNillableBillingID sets the "billing" edge to the OrderBilling entity by ID if the given value is not nil.
func (oc *OrderCreate) SetNillableBillingID(id *int) *OrderCreate {
	if id != nil {
		oc = oc.SetBillingID(*id)
	}
	return oc
}

// SetBilling sets the "billing" edge to the OrderBilling entity.
func (oc *OrderCreate) SetBilling(o *OrderBilling) *OrderCreate {
	return oc.SetBillingID(o.ID)
}

// AddRefundIDs adds the "refund" edge to the OrderRefund entity by IDs.
func (oc *OrderCreate) AddRefundIDs(ids ...int) *OrderCreate {
	oc.mutation.AddRefundIDs(ids...)
	return oc
}

// AddRefund adds the "refund" edges to the OrderRefund entity.
func (oc *OrderCreate) AddRefund(o ...*OrderRefund) *OrderCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oc.AddRefundIDs(ids...)
}

// SetSharingID sets the "sharing" edge to the OrderSharing entity by ID.
func (oc *OrderCreate) SetSharingID(id int) *OrderCreate {
	oc.mutation.SetSharingID(id)
	return oc
}

// SetNillableSharingID sets the "sharing" edge to the OrderSharing entity by ID if the given value is not nil.
func (oc *OrderCreate) SetNillableSharingID(id *int) *OrderCreate {
	if id != nil {
		oc = oc.SetSharingID(*id)
	}
	return oc
}

// SetSharing sets the "sharing" edge to the OrderSharing entity.
func (oc *OrderCreate) SetSharing(o *OrderSharing) *OrderCreate {
	return oc.SetSharingID(o.ID)
}

// Mutation returns the OrderMutation object of the builder.
func (oc *OrderCreate) Mutation() *OrderMutation {
	return oc.mutation
}

// Save creates the Order in the database.
func (oc *OrderCreate) Save(ctx context.Context) (*Order, error) {
	oc.defaults()
	return withHooks(ctx, oc.sqlSave, oc.mutation, oc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OrderCreate) SaveX(ctx context.Context) *Order {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *OrderCreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *OrderCreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oc *OrderCreate) defaults() {
	if _, ok := oc.mutation.GetType(); !ok {
		v := order.DefaultType
		oc.mutation.SetType(v)
	}
	if _, ok := oc.mutation.Period(); !ok {
		v := order.DefaultPeriod
		oc.mutation.SetPeriod(v)
	}
	if _, ok := oc.mutation.WxTxID(); !ok {
		v := order.DefaultWxTxID
		oc.mutation.SetWxTxID(v)
	}
	if _, ok := oc.mutation.MchID(); !ok {
		v := order.DefaultMchID
		oc.mutation.SetMchID(v)
	}
	if _, ok := oc.mutation.CouponID(); !ok {
		v := order.DefaultCouponID
		oc.mutation.SetCouponID(v)
	}
	if _, ok := oc.mutation.CouponName(); !ok {
		v := order.DefaultCouponName
		oc.mutation.SetCouponName(v)
	}
	if _, ok := oc.mutation.UseMileageMeter(); !ok {
		v := order.DefaultUseMileageMeter
		oc.mutation.SetUseMileageMeter(v)
	}
	if _, ok := oc.mutation.UseTimeSecond(); !ok {
		v := order.DefaultUseTimeSecond
		oc.mutation.SetUseTimeSecond(v)
	}
	if _, ok := oc.mutation.DepositAmount(); !ok {
		v := order.DefaultDepositAmount
		oc.mutation.SetDepositAmount(v)
	}
	if _, ok := oc.mutation.OrderAmount(); !ok {
		v := order.DefaultOrderAmount
		oc.mutation.SetOrderAmount(v)
	}
	if _, ok := oc.mutation.RefundedAmount(); !ok {
		v := order.DefaultRefundedAmount
		oc.mutation.SetRefundedAmount(v)
	}
	if _, ok := oc.mutation.CouponAmount(); !ok {
		v := order.DefaultCouponAmount
		oc.mutation.SetCouponAmount(v)
	}
	if _, ok := oc.mutation.OrderState(); !ok {
		v := order.DefaultOrderState
		oc.mutation.SetOrderState(v)
	}
	if _, ok := oc.mutation.DepositState(); !ok {
		v := order.DefaultDepositState
		oc.mutation.SetDepositState(v)
	}
	if _, ok := oc.mutation.EmergencyState(); !ok {
		v := order.DefaultEmergencyState
		oc.mutation.SetEmergencyState(v)
	}
	if _, ok := oc.mutation.IsTestOrder(); !ok {
		v := order.DefaultIsTestOrder
		oc.mutation.SetIsTestOrder(v)
	}
	if _, ok := oc.mutation.IsCancel(); !ok {
		v := order.DefaultIsCancel
		oc.mutation.SetIsCancel(v)
	}
	if _, ok := oc.mutation.IsProfitSharing(); !ok {
		v := order.DefaultIsProfitSharing
		oc.mutation.SetIsProfitSharing(v)
	}
	if _, ok := oc.mutation.Remark(); !ok {
		v := order.DefaultRemark
		oc.mutation.SetRemark(v)
	}
	if _, ok := oc.mutation.UserScore(); !ok {
		v := order.DefaultUserScore
		oc.mutation.SetUserScore(v)
	}
	if _, ok := oc.mutation.UserComment(); !ok {
		v := order.DefaultUserComment
		oc.mutation.SetUserComment(v)
	}
	if _, ok := oc.mutation.CreateTime(); !ok {
		v := order.DefaultCreateTime()
		oc.mutation.SetCreateTime(v)
	}
	if _, ok := oc.mutation.UpdateTime(); !ok {
		v := order.DefaultUpdateTime()
		oc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oc *OrderCreate) check() error {
	if _, ok := oc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Order.type"`)}
	}
	if _, ok := oc.mutation.Period(); !ok {
		return &ValidationError{Name: "period", err: errors.New(`ent: missing required field "Order.period"`)}
	}
	if _, ok := oc.mutation.OrderNo(); !ok {
		return &ValidationError{Name: "order_no", err: errors.New(`ent: missing required field "Order.order_no"`)}
	}
	if _, ok := oc.mutation.WxTxID(); !ok {
		return &ValidationError{Name: "wx_tx_id", err: errors.New(`ent: missing required field "Order.wx_tx_id"`)}
	}
	if _, ok := oc.mutation.ScenicAreaID(); !ok {
		return &ValidationError{Name: "scenic_area_id", err: errors.New(`ent: missing required field "Order.scenic_area_id"`)}
	}
	if _, ok := oc.mutation.MchID(); !ok {
		return &ValidationError{Name: "mch_id", err: errors.New(`ent: missing required field "Order.mch_id"`)}
	}
	if _, ok := oc.mutation.ScenicAreaName(); !ok {
		return &ValidationError{Name: "scenic_area_name", err: errors.New(`ent: missing required field "Order.scenic_area_name"`)}
	}
	if _, ok := oc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Order.user_id"`)}
	}
	if _, ok := oc.mutation.OpenID(); !ok {
		return &ValidationError{Name: "open_id", err: errors.New(`ent: missing required field "Order.open_id"`)}
	}
	if _, ok := oc.mutation.Nickname(); !ok {
		return &ValidationError{Name: "nickname", err: errors.New(`ent: missing required field "Order.nickname"`)}
	}
	if _, ok := oc.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`ent: missing required field "Order.phone"`)}
	}
	if _, ok := oc.mutation.CarID(); !ok {
		return &ValidationError{Name: "car_id", err: errors.New(`ent: missing required field "Order.car_id"`)}
	}
	if _, ok := oc.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device_id", err: errors.New(`ent: missing required field "Order.device_id"`)}
	}
	if _, ok := oc.mutation.CarName(); !ok {
		return &ValidationError{Name: "car_name", err: errors.New(`ent: missing required field "Order.car_name"`)}
	}
	if _, ok := oc.mutation.CarLicensePlate(); !ok {
		return &ValidationError{Name: "car_license_plate", err: errors.New(`ent: missing required field "Order.car_license_plate"`)}
	}
	if _, ok := oc.mutation.ModelID(); !ok {
		return &ValidationError{Name: "model_id", err: errors.New(`ent: missing required field "Order.model_id"`)}
	}
	if _, ok := oc.mutation.ModelName(); !ok {
		return &ValidationError{Name: "model_name", err: errors.New(`ent: missing required field "Order.model_name"`)}
	}
	if _, ok := oc.mutation.CouponID(); !ok {
		return &ValidationError{Name: "coupon_id", err: errors.New(`ent: missing required field "Order.coupon_id"`)}
	}
	if _, ok := oc.mutation.CouponName(); !ok {
		return &ValidationError{Name: "coupon_name", err: errors.New(`ent: missing required field "Order.coupon_name"`)}
	}
	if _, ok := oc.mutation.UseMileageMeter(); !ok {
		return &ValidationError{Name: "use_mileage_meter", err: errors.New(`ent: missing required field "Order.use_mileage_meter"`)}
	}
	if _, ok := oc.mutation.UseTimeSecond(); !ok {
		return &ValidationError{Name: "use_time_second", err: errors.New(`ent: missing required field "Order.use_time_second"`)}
	}
	if _, ok := oc.mutation.DepositAmount(); !ok {
		return &ValidationError{Name: "deposit_amount", err: errors.New(`ent: missing required field "Order.deposit_amount"`)}
	}
	if _, ok := oc.mutation.OrderAmount(); !ok {
		return &ValidationError{Name: "order_amount", err: errors.New(`ent: missing required field "Order.order_amount"`)}
	}
	if _, ok := oc.mutation.RefundedAmount(); !ok {
		return &ValidationError{Name: "refunded_amount", err: errors.New(`ent: missing required field "Order.refunded_amount"`)}
	}
	if _, ok := oc.mutation.CouponAmount(); !ok {
		return &ValidationError{Name: "coupon_amount", err: errors.New(`ent: missing required field "Order.coupon_amount"`)}
	}
	if _, ok := oc.mutation.OrderState(); !ok {
		return &ValidationError{Name: "order_state", err: errors.New(`ent: missing required field "Order.order_state"`)}
	}
	if _, ok := oc.mutation.DepositState(); !ok {
		return &ValidationError{Name: "deposit_state", err: errors.New(`ent: missing required field "Order.deposit_state"`)}
	}
	if _, ok := oc.mutation.EmergencyState(); !ok {
		return &ValidationError{Name: "emergency_state", err: errors.New(`ent: missing required field "Order.emergency_state"`)}
	}
	if _, ok := oc.mutation.IsTestOrder(); !ok {
		return &ValidationError{Name: "is_test_order", err: errors.New(`ent: missing required field "Order.is_test_order"`)}
	}
	if _, ok := oc.mutation.IsCancel(); !ok {
		return &ValidationError{Name: "is_cancel", err: errors.New(`ent: missing required field "Order.is_cancel"`)}
	}
	if _, ok := oc.mutation.IsProfitSharing(); !ok {
		return &ValidationError{Name: "is_profit_sharing", err: errors.New(`ent: missing required field "Order.is_profit_sharing"`)}
	}
	if _, ok := oc.mutation.Remark(); !ok {
		return &ValidationError{Name: "remark", err: errors.New(`ent: missing required field "Order.remark"`)}
	}
	if _, ok := oc.mutation.UserScore(); !ok {
		return &ValidationError{Name: "user_score", err: errors.New(`ent: missing required field "Order.user_score"`)}
	}
	if _, ok := oc.mutation.UserComment(); !ok {
		return &ValidationError{Name: "user_comment", err: errors.New(`ent: missing required field "Order.user_comment"`)}
	}
	if _, ok := oc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Order.create_time"`)}
	}
	if _, ok := oc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Order.update_time"`)}
	}
	if len(oc.mutation.CarIDs()) == 0 {
		return &ValidationError{Name: "car", err: errors.New(`ent: missing required edge "Order.car"`)}
	}
	if len(oc.mutation.BackgroundScenicAreaIDs()) == 0 {
		return &ValidationError{Name: "background_scenic_area", err: errors.New(`ent: missing required edge "Order.background_scenic_area"`)}
	}
	return nil
}

func (oc *OrderCreate) sqlSave(ctx context.Context) (*Order, error) {
	if err := oc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	oc.mutation.id = &_node.ID
	oc.mutation.done = true
	return _node, nil
}

func (oc *OrderCreate) createSpec() (*Order, *sqlgraph.CreateSpec) {
	var (
		_node = &Order{config: oc.config}
		_spec = sqlgraph.NewCreateSpec(order.Table, sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt))
	)
	if id, ok := oc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := oc.mutation.GetType(); ok {
		_spec.SetField(order.FieldType, field.TypeInt, value)
		_node.Type = value
	}
	if value, ok := oc.mutation.Period(); ok {
		_spec.SetField(order.FieldPeriod, field.TypeInt, value)
		_node.Period = value
	}
	if value, ok := oc.mutation.OrderNo(); ok {
		_spec.SetField(order.FieldOrderNo, field.TypeString, value)
		_node.OrderNo = value
	}
	if value, ok := oc.mutation.WxTxID(); ok {
		_spec.SetField(order.FieldWxTxID, field.TypeString, value)
		_node.WxTxID = value
	}
	if value, ok := oc.mutation.MchID(); ok {
		_spec.SetField(order.FieldMchID, field.TypeString, value)
		_node.MchID = value
	}
	if value, ok := oc.mutation.ScenicAreaName(); ok {
		_spec.SetField(order.FieldScenicAreaName, field.TypeString, value)
		_node.ScenicAreaName = value
	}
	if value, ok := oc.mutation.UserID(); ok {
		_spec.SetField(order.FieldUserID, field.TypeInt, value)
		_node.UserID = value
	}
	if value, ok := oc.mutation.OpenID(); ok {
		_spec.SetField(order.FieldOpenID, field.TypeString, value)
		_node.OpenID = value
	}
	if value, ok := oc.mutation.Nickname(); ok {
		_spec.SetField(order.FieldNickname, field.TypeString, value)
		_node.Nickname = value
	}
	if value, ok := oc.mutation.Phone(); ok {
		_spec.SetField(order.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := oc.mutation.DeviceID(); ok {
		_spec.SetField(order.FieldDeviceID, field.TypeString, value)
		_node.DeviceID = value
	}
	if value, ok := oc.mutation.CarName(); ok {
		_spec.SetField(order.FieldCarName, field.TypeString, value)
		_node.CarName = value
	}
	if value, ok := oc.mutation.CarLicensePlate(); ok {
		_spec.SetField(order.FieldCarLicensePlate, field.TypeString, value)
		_node.CarLicensePlate = value
	}
	if value, ok := oc.mutation.ModelID(); ok {
		_spec.SetField(order.FieldModelID, field.TypeInt, value)
		_node.ModelID = value
	}
	if value, ok := oc.mutation.ModelName(); ok {
		_spec.SetField(order.FieldModelName, field.TypeString, value)
		_node.ModelName = value
	}
	if value, ok := oc.mutation.CouponID(); ok {
		_spec.SetField(order.FieldCouponID, field.TypeInt, value)
		_node.CouponID = value
	}
	if value, ok := oc.mutation.CouponName(); ok {
		_spec.SetField(order.FieldCouponName, field.TypeString, value)
		_node.CouponName = value
	}
	if value, ok := oc.mutation.UseMileageMeter(); ok {
		_spec.SetField(order.FieldUseMileageMeter, field.TypeInt, value)
		_node.UseMileageMeter = value
	}
	if value, ok := oc.mutation.UseTimeSecond(); ok {
		_spec.SetField(order.FieldUseTimeSecond, field.TypeInt, value)
		_node.UseTimeSecond = value
	}
	if value, ok := oc.mutation.DepositAmount(); ok {
		_spec.SetField(order.FieldDepositAmount, field.TypeInt, value)
		_node.DepositAmount = value
	}
	if value, ok := oc.mutation.OrderAmount(); ok {
		_spec.SetField(order.FieldOrderAmount, field.TypeInt, value)
		_node.OrderAmount = value
	}
	if value, ok := oc.mutation.RefundedAmount(); ok {
		_spec.SetField(order.FieldRefundedAmount, field.TypeInt, value)
		_node.RefundedAmount = value
	}
	if value, ok := oc.mutation.CouponAmount(); ok {
		_spec.SetField(order.FieldCouponAmount, field.TypeInt, value)
		_node.CouponAmount = value
	}
	if value, ok := oc.mutation.OrderState(); ok {
		_spec.SetField(order.FieldOrderState, field.TypeInt, value)
		_node.OrderState = value
	}
	if value, ok := oc.mutation.DepositState(); ok {
		_spec.SetField(order.FieldDepositState, field.TypeInt, value)
		_node.DepositState = value
	}
	if value, ok := oc.mutation.EmergencyState(); ok {
		_spec.SetField(order.FieldEmergencyState, field.TypeInt, value)
		_node.EmergencyState = value
	}
	if value, ok := oc.mutation.IsTestOrder(); ok {
		_spec.SetField(order.FieldIsTestOrder, field.TypeBool, value)
		_node.IsTestOrder = value
	}
	if value, ok := oc.mutation.IsCancel(); ok {
		_spec.SetField(order.FieldIsCancel, field.TypeBool, value)
		_node.IsCancel = value
	}
	if value, ok := oc.mutation.IsProfitSharing(); ok {
		_spec.SetField(order.FieldIsProfitSharing, field.TypeBool, value)
		_node.IsProfitSharing = value
	}
	if value, ok := oc.mutation.Remark(); ok {
		_spec.SetField(order.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := oc.mutation.UserScore(); ok {
		_spec.SetField(order.FieldUserScore, field.TypeInt, value)
		_node.UserScore = value
	}
	if value, ok := oc.mutation.UserComment(); ok {
		_spec.SetField(order.FieldUserComment, field.TypeString, value)
		_node.UserComment = value
	}
	if value, ok := oc.mutation.DepositTime(); ok {
		_spec.SetField(order.FieldDepositTime, field.TypeTime, value)
		_node.DepositTime = value
	}
	if value, ok := oc.mutation.FinishTime(); ok {
		_spec.SetField(order.FieldFinishTime, field.TypeTime, value)
		_node.FinishTime = value
	}
	if value, ok := oc.mutation.CreateTime(); ok {
		_spec.SetField(order.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := oc.mutation.UpdateTime(); ok {
		_spec.SetField(order.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if nodes := oc.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.CarTable,
			Columns: []string{order.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CarID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.BackgroundScenicAreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.BackgroundScenicAreaTable,
			Columns: []string{order.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ScenicAreaID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.BillingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   order.BillingTable,
			Columns: []string{order.BillingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderbilling.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.RefundIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.RefundTable,
			Columns: []string{order.RefundColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderrefund.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.SharingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   order.SharingTable,
			Columns: []string{order.SharingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ordersharing.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OrderCreateBulk is the builder for creating many Order entities in bulk.
type OrderCreateBulk struct {
	config
	err      error
	builders []*OrderCreate
}

// Save creates the Order entities in the database.
func (ocb *OrderCreateBulk) Save(ctx context.Context) ([]*Order, error) {
	if ocb.err != nil {
		return nil, ocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Order, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *OrderCreateBulk) SaveX(ctx context.Context) []*Order {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ocb *OrderCreateBulk) Exec(ctx context.Context) error {
	_, err := ocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocb *OrderCreateBulk) ExecX(ctx context.Context) {
	if err := ocb.Exec(ctx); err != nil {
		panic(err)
	}
}
