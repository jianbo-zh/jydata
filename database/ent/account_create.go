// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/account"
	"github.com/jianbo-zh/jydata/database/ent/scenicarea"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AccountCreate is the builder for creating a Account entity.
type AccountCreate struct {
	config
	mutation *AccountMutation
	hooks    []Hook
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (ac *AccountCreate) SetScenicAreaID(i int) *AccountCreate {
	ac.mutation.SetScenicAreaID(i)
	return ac
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (ac *AccountCreate) SetNillableScenicAreaID(i *int) *AccountCreate {
	if i != nil {
		ac.SetScenicAreaID(*i)
	}
	return ac
}

// SetName sets the "name" field.
func (ac *AccountCreate) SetName(s string) *AccountCreate {
	ac.mutation.SetName(s)
	return ac
}

// SetAccount sets the "account" field.
func (ac *AccountCreate) SetAccount(s string) *AccountCreate {
	ac.mutation.SetAccount(s)
	return ac
}

// SetPassword sets the "password" field.
func (ac *AccountCreate) SetPassword(s string) *AccountCreate {
	ac.mutation.SetPassword(s)
	return ac
}

// SetRoleID sets the "role_id" field.
func (ac *AccountCreate) SetRoleID(i int) *AccountCreate {
	ac.mutation.SetRoleID(i)
	return ac
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (ac *AccountCreate) SetNillableRoleID(i *int) *AccountCreate {
	if i != nil {
		ac.SetRoleID(*i)
	}
	return ac
}

// SetStatus sets the "status" field.
func (ac *AccountCreate) SetStatus(i int) *AccountCreate {
	ac.mutation.SetStatus(i)
	return ac
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ac *AccountCreate) SetNillableStatus(i *int) *AccountCreate {
	if i != nil {
		ac.SetStatus(*i)
	}
	return ac
}

// SetIsSuper sets the "is_super" field.
func (ac *AccountCreate) SetIsSuper(b bool) *AccountCreate {
	ac.mutation.SetIsSuper(b)
	return ac
}

// SetNillableIsSuper sets the "is_super" field if the given value is not nil.
func (ac *AccountCreate) SetNillableIsSuper(b *bool) *AccountCreate {
	if b != nil {
		ac.SetIsSuper(*b)
	}
	return ac
}

// SetTokenHash sets the "token_hash" field.
func (ac *AccountCreate) SetTokenHash(s string) *AccountCreate {
	ac.mutation.SetTokenHash(s)
	return ac
}

// SetNillableTokenHash sets the "token_hash" field if the given value is not nil.
func (ac *AccountCreate) SetNillableTokenHash(s *string) *AccountCreate {
	if s != nil {
		ac.SetTokenHash(*s)
	}
	return ac
}

// SetCreateTime sets the "create_time" field.
func (ac *AccountCreate) SetCreateTime(t time.Time) *AccountCreate {
	ac.mutation.SetCreateTime(t)
	return ac
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ac *AccountCreate) SetNillableCreateTime(t *time.Time) *AccountCreate {
	if t != nil {
		ac.SetCreateTime(*t)
	}
	return ac
}

// SetUpdateTime sets the "update_time" field.
func (ac *AccountCreate) SetUpdateTime(t time.Time) *AccountCreate {
	ac.mutation.SetUpdateTime(t)
	return ac
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ac *AccountCreate) SetNillableUpdateTime(t *time.Time) *AccountCreate {
	if t != nil {
		ac.SetUpdateTime(*t)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *AccountCreate) SetID(i int) *AccountCreate {
	ac.mutation.SetID(i)
	return ac
}

// SetBackgroundScenicAreaID sets the "background_scenic_area" edge to the ScenicArea entity by ID.
func (ac *AccountCreate) SetBackgroundScenicAreaID(id int) *AccountCreate {
	ac.mutation.SetBackgroundScenicAreaID(id)
	return ac
}

// SetNillableBackgroundScenicAreaID sets the "background_scenic_area" edge to the ScenicArea entity by ID if the given value is not nil.
func (ac *AccountCreate) SetNillableBackgroundScenicAreaID(id *int) *AccountCreate {
	if id != nil {
		ac = ac.SetBackgroundScenicAreaID(*id)
	}
	return ac
}

// SetBackgroundScenicArea sets the "background_scenic_area" edge to the ScenicArea entity.
func (ac *AccountCreate) SetBackgroundScenicArea(s *ScenicArea) *AccountCreate {
	return ac.SetBackgroundScenicAreaID(s.ID)
}

// Mutation returns the AccountMutation object of the builder.
func (ac *AccountCreate) Mutation() *AccountMutation {
	return ac.mutation
}

// Save creates the Account in the database.
func (ac *AccountCreate) Save(ctx context.Context) (*Account, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AccountCreate) SaveX(ctx context.Context) *Account {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AccountCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AccountCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AccountCreate) defaults() {
	if _, ok := ac.mutation.RoleID(); !ok {
		v := account.DefaultRoleID
		ac.mutation.SetRoleID(v)
	}
	if _, ok := ac.mutation.Status(); !ok {
		v := account.DefaultStatus
		ac.mutation.SetStatus(v)
	}
	if _, ok := ac.mutation.IsSuper(); !ok {
		v := account.DefaultIsSuper
		ac.mutation.SetIsSuper(v)
	}
	if _, ok := ac.mutation.TokenHash(); !ok {
		v := account.DefaultTokenHash
		ac.mutation.SetTokenHash(v)
	}
	if _, ok := ac.mutation.CreateTime(); !ok {
		v := account.DefaultCreateTime()
		ac.mutation.SetCreateTime(v)
	}
	if _, ok := ac.mutation.UpdateTime(); !ok {
		v := account.DefaultUpdateTime()
		ac.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AccountCreate) check() error {
	if _, ok := ac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Account.name"`)}
	}
	if v, ok := ac.mutation.Name(); ok {
		if err := account.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Account.name": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Account(); !ok {
		return &ValidationError{Name: "account", err: errors.New(`ent: missing required field "Account.account"`)}
	}
	if v, ok := ac.mutation.Account(); ok {
		if err := account.AccountValidator(v); err != nil {
			return &ValidationError{Name: "account", err: fmt.Errorf(`ent: validator failed for field "Account.account": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "Account.password"`)}
	}
	if v, ok := ac.mutation.Password(); ok {
		if err := account.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "Account.password": %w`, err)}
		}
	}
	if _, ok := ac.mutation.RoleID(); !ok {
		return &ValidationError{Name: "role_id", err: errors.New(`ent: missing required field "Account.role_id"`)}
	}
	if _, ok := ac.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Account.status"`)}
	}
	if _, ok := ac.mutation.IsSuper(); !ok {
		return &ValidationError{Name: "is_super", err: errors.New(`ent: missing required field "Account.is_super"`)}
	}
	if _, ok := ac.mutation.TokenHash(); !ok {
		return &ValidationError{Name: "token_hash", err: errors.New(`ent: missing required field "Account.token_hash"`)}
	}
	if _, ok := ac.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Account.create_time"`)}
	}
	if _, ok := ac.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Account.update_time"`)}
	}
	return nil
}

func (ac *AccountCreate) sqlSave(ctx context.Context) (*Account, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AccountCreate) createSpec() (*Account, *sqlgraph.CreateSpec) {
	var (
		_node = &Account{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(account.Table, sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt))
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.Name(); ok {
		_spec.SetField(account.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ac.mutation.Account(); ok {
		_spec.SetField(account.FieldAccount, field.TypeString, value)
		_node.Account = value
	}
	if value, ok := ac.mutation.Password(); ok {
		_spec.SetField(account.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := ac.mutation.RoleID(); ok {
		_spec.SetField(account.FieldRoleID, field.TypeInt, value)
		_node.RoleID = value
	}
	if value, ok := ac.mutation.Status(); ok {
		_spec.SetField(account.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	if value, ok := ac.mutation.IsSuper(); ok {
		_spec.SetField(account.FieldIsSuper, field.TypeBool, value)
		_node.IsSuper = value
	}
	if value, ok := ac.mutation.TokenHash(); ok {
		_spec.SetField(account.FieldTokenHash, field.TypeString, value)
		_node.TokenHash = value
	}
	if value, ok := ac.mutation.CreateTime(); ok {
		_spec.SetField(account.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := ac.mutation.UpdateTime(); ok {
		_spec.SetField(account.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if nodes := ac.mutation.BackgroundScenicAreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   account.BackgroundScenicAreaTable,
			Columns: []string{account.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ScenicAreaID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AccountCreateBulk is the builder for creating many Account entities in bulk.
type AccountCreateBulk struct {
	config
	err      error
	builders []*AccountCreate
}

// Save creates the Account entities in the database.
func (acb *AccountCreateBulk) Save(ctx context.Context) ([]*Account, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Account, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AccountCreateBulk) SaveX(ctx context.Context) []*Account {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AccountCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AccountCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
