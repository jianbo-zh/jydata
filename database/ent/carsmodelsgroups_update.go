// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/carsmodels"
	"github.com/jianbo-zh/jydata/database/ent/carsmodelsgroups"
	"github.com/jianbo-zh/jydata/database/ent/carsmodelsgroupsparams"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarsModelsGroupsUpdate is the builder for updating CarsModelsGroups entities.
type CarsModelsGroupsUpdate struct {
	config
	hooks    []Hook
	mutation *CarsModelsGroupsMutation
}

// Where appends a list predicates to the CarsModelsGroupsUpdate builder.
func (cmgu *CarsModelsGroupsUpdate) Where(ps ...predicate.CarsModelsGroups) *CarsModelsGroupsUpdate {
	cmgu.mutation.Where(ps...)
	return cmgu
}

// SetModelID sets the "model_id" field.
func (cmgu *CarsModelsGroupsUpdate) SetModelID(i int) *CarsModelsGroupsUpdate {
	cmgu.mutation.SetModelID(i)
	return cmgu
}

// SetNillableModelID sets the "model_id" field if the given value is not nil.
func (cmgu *CarsModelsGroupsUpdate) SetNillableModelID(i *int) *CarsModelsGroupsUpdate {
	if i != nil {
		cmgu.SetModelID(*i)
	}
	return cmgu
}

// SetGroupRemark sets the "group_remark" field.
func (cmgu *CarsModelsGroupsUpdate) SetGroupRemark(s string) *CarsModelsGroupsUpdate {
	cmgu.mutation.SetGroupRemark(s)
	return cmgu
}

// SetNillableGroupRemark sets the "group_remark" field if the given value is not nil.
func (cmgu *CarsModelsGroupsUpdate) SetNillableGroupRemark(s *string) *CarsModelsGroupsUpdate {
	if s != nil {
		cmgu.SetGroupRemark(*s)
	}
	return cmgu
}

// SetGroupName sets the "group_name" field.
func (cmgu *CarsModelsGroupsUpdate) SetGroupName(s string) *CarsModelsGroupsUpdate {
	cmgu.mutation.SetGroupName(s)
	return cmgu
}

// SetNillableGroupName sets the "group_name" field if the given value is not nil.
func (cmgu *CarsModelsGroupsUpdate) SetNillableGroupName(s *string) *CarsModelsGroupsUpdate {
	if s != nil {
		cmgu.SetGroupName(*s)
	}
	return cmgu
}

// SetStatus sets the "status" field.
func (cmgu *CarsModelsGroupsUpdate) SetStatus(i int) *CarsModelsGroupsUpdate {
	cmgu.mutation.ResetStatus()
	cmgu.mutation.SetStatus(i)
	return cmgu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cmgu *CarsModelsGroupsUpdate) SetNillableStatus(i *int) *CarsModelsGroupsUpdate {
	if i != nil {
		cmgu.SetStatus(*i)
	}
	return cmgu
}

// AddStatus adds i to the "status" field.
func (cmgu *CarsModelsGroupsUpdate) AddStatus(i int) *CarsModelsGroupsUpdate {
	cmgu.mutation.AddStatus(i)
	return cmgu
}

// SetIsDeleted sets the "is_deleted" field.
func (cmgu *CarsModelsGroupsUpdate) SetIsDeleted(i int) *CarsModelsGroupsUpdate {
	cmgu.mutation.ResetIsDeleted()
	cmgu.mutation.SetIsDeleted(i)
	return cmgu
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (cmgu *CarsModelsGroupsUpdate) SetNillableIsDeleted(i *int) *CarsModelsGroupsUpdate {
	if i != nil {
		cmgu.SetIsDeleted(*i)
	}
	return cmgu
}

// AddIsDeleted adds i to the "is_deleted" field.
func (cmgu *CarsModelsGroupsUpdate) AddIsDeleted(i int) *CarsModelsGroupsUpdate {
	cmgu.mutation.AddIsDeleted(i)
	return cmgu
}

// SetUpdateTime sets the "update_time" field.
func (cmgu *CarsModelsGroupsUpdate) SetUpdateTime(t time.Time) *CarsModelsGroupsUpdate {
	cmgu.mutation.SetUpdateTime(t)
	return cmgu
}

// SetModel sets the "model" edge to the CarsModels entity.
func (cmgu *CarsModelsGroupsUpdate) SetModel(c *CarsModels) *CarsModelsGroupsUpdate {
	return cmgu.SetModelID(c.ID)
}

// AddParamIDs adds the "params" edge to the CarsModelsGroupsParams entity by IDs.
func (cmgu *CarsModelsGroupsUpdate) AddParamIDs(ids ...int) *CarsModelsGroupsUpdate {
	cmgu.mutation.AddParamIDs(ids...)
	return cmgu
}

// AddParams adds the "params" edges to the CarsModelsGroupsParams entity.
func (cmgu *CarsModelsGroupsUpdate) AddParams(c ...*CarsModelsGroupsParams) *CarsModelsGroupsUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cmgu.AddParamIDs(ids...)
}

// Mutation returns the CarsModelsGroupsMutation object of the builder.
func (cmgu *CarsModelsGroupsUpdate) Mutation() *CarsModelsGroupsMutation {
	return cmgu.mutation
}

// ClearModel clears the "model" edge to the CarsModels entity.
func (cmgu *CarsModelsGroupsUpdate) ClearModel() *CarsModelsGroupsUpdate {
	cmgu.mutation.ClearModel()
	return cmgu
}

// ClearParams clears all "params" edges to the CarsModelsGroupsParams entity.
func (cmgu *CarsModelsGroupsUpdate) ClearParams() *CarsModelsGroupsUpdate {
	cmgu.mutation.ClearParams()
	return cmgu
}

// RemoveParamIDs removes the "params" edge to CarsModelsGroupsParams entities by IDs.
func (cmgu *CarsModelsGroupsUpdate) RemoveParamIDs(ids ...int) *CarsModelsGroupsUpdate {
	cmgu.mutation.RemoveParamIDs(ids...)
	return cmgu
}

// RemoveParams removes "params" edges to CarsModelsGroupsParams entities.
func (cmgu *CarsModelsGroupsUpdate) RemoveParams(c ...*CarsModelsGroupsParams) *CarsModelsGroupsUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cmgu.RemoveParamIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cmgu *CarsModelsGroupsUpdate) Save(ctx context.Context) (int, error) {
	cmgu.defaults()
	return withHooks(ctx, cmgu.sqlSave, cmgu.mutation, cmgu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cmgu *CarsModelsGroupsUpdate) SaveX(ctx context.Context) int {
	affected, err := cmgu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cmgu *CarsModelsGroupsUpdate) Exec(ctx context.Context) error {
	_, err := cmgu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmgu *CarsModelsGroupsUpdate) ExecX(ctx context.Context) {
	if err := cmgu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cmgu *CarsModelsGroupsUpdate) defaults() {
	if _, ok := cmgu.mutation.UpdateTime(); !ok {
		v := carsmodelsgroups.UpdateDefaultUpdateTime()
		cmgu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmgu *CarsModelsGroupsUpdate) check() error {
	if cmgu.mutation.ModelCleared() && len(cmgu.mutation.ModelIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarsModelsGroups.model"`)
	}
	return nil
}

func (cmgu *CarsModelsGroupsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cmgu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(carsmodelsgroups.Table, carsmodelsgroups.Columns, sqlgraph.NewFieldSpec(carsmodelsgroups.FieldID, field.TypeInt))
	if ps := cmgu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmgu.mutation.GroupRemark(); ok {
		_spec.SetField(carsmodelsgroups.FieldGroupRemark, field.TypeString, value)
	}
	if value, ok := cmgu.mutation.GroupName(); ok {
		_spec.SetField(carsmodelsgroups.FieldGroupName, field.TypeString, value)
	}
	if value, ok := cmgu.mutation.Status(); ok {
		_spec.SetField(carsmodelsgroups.FieldStatus, field.TypeInt, value)
	}
	if value, ok := cmgu.mutation.AddedStatus(); ok {
		_spec.AddField(carsmodelsgroups.FieldStatus, field.TypeInt, value)
	}
	if value, ok := cmgu.mutation.IsDeleted(); ok {
		_spec.SetField(carsmodelsgroups.FieldIsDeleted, field.TypeInt, value)
	}
	if value, ok := cmgu.mutation.AddedIsDeleted(); ok {
		_spec.AddField(carsmodelsgroups.FieldIsDeleted, field.TypeInt, value)
	}
	if value, ok := cmgu.mutation.UpdateTime(); ok {
		_spec.SetField(carsmodelsgroups.FieldUpdateTime, field.TypeTime, value)
	}
	if cmgu.mutation.ModelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carsmodelsgroups.ModelTable,
			Columns: []string{carsmodelsgroups.ModelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsmodels.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmgu.mutation.ModelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carsmodelsgroups.ModelTable,
			Columns: []string{carsmodelsgroups.ModelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsmodels.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cmgu.mutation.ParamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carsmodelsgroups.ParamsTable,
			Columns: []string{carsmodelsgroups.ParamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsmodelsgroupsparams.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmgu.mutation.RemovedParamsIDs(); len(nodes) > 0 && !cmgu.mutation.ParamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carsmodelsgroups.ParamsTable,
			Columns: []string{carsmodelsgroups.ParamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsmodelsgroupsparams.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmgu.mutation.ParamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carsmodelsgroups.ParamsTable,
			Columns: []string{carsmodelsgroups.ParamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsmodelsgroupsparams.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cmgu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carsmodelsgroups.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cmgu.mutation.done = true
	return n, nil
}

// CarsModelsGroupsUpdateOne is the builder for updating a single CarsModelsGroups entity.
type CarsModelsGroupsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CarsModelsGroupsMutation
}

// SetModelID sets the "model_id" field.
func (cmguo *CarsModelsGroupsUpdateOne) SetModelID(i int) *CarsModelsGroupsUpdateOne {
	cmguo.mutation.SetModelID(i)
	return cmguo
}

// SetNillableModelID sets the "model_id" field if the given value is not nil.
func (cmguo *CarsModelsGroupsUpdateOne) SetNillableModelID(i *int) *CarsModelsGroupsUpdateOne {
	if i != nil {
		cmguo.SetModelID(*i)
	}
	return cmguo
}

// SetGroupRemark sets the "group_remark" field.
func (cmguo *CarsModelsGroupsUpdateOne) SetGroupRemark(s string) *CarsModelsGroupsUpdateOne {
	cmguo.mutation.SetGroupRemark(s)
	return cmguo
}

// SetNillableGroupRemark sets the "group_remark" field if the given value is not nil.
func (cmguo *CarsModelsGroupsUpdateOne) SetNillableGroupRemark(s *string) *CarsModelsGroupsUpdateOne {
	if s != nil {
		cmguo.SetGroupRemark(*s)
	}
	return cmguo
}

// SetGroupName sets the "group_name" field.
func (cmguo *CarsModelsGroupsUpdateOne) SetGroupName(s string) *CarsModelsGroupsUpdateOne {
	cmguo.mutation.SetGroupName(s)
	return cmguo
}

// SetNillableGroupName sets the "group_name" field if the given value is not nil.
func (cmguo *CarsModelsGroupsUpdateOne) SetNillableGroupName(s *string) *CarsModelsGroupsUpdateOne {
	if s != nil {
		cmguo.SetGroupName(*s)
	}
	return cmguo
}

// SetStatus sets the "status" field.
func (cmguo *CarsModelsGroupsUpdateOne) SetStatus(i int) *CarsModelsGroupsUpdateOne {
	cmguo.mutation.ResetStatus()
	cmguo.mutation.SetStatus(i)
	return cmguo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cmguo *CarsModelsGroupsUpdateOne) SetNillableStatus(i *int) *CarsModelsGroupsUpdateOne {
	if i != nil {
		cmguo.SetStatus(*i)
	}
	return cmguo
}

// AddStatus adds i to the "status" field.
func (cmguo *CarsModelsGroupsUpdateOne) AddStatus(i int) *CarsModelsGroupsUpdateOne {
	cmguo.mutation.AddStatus(i)
	return cmguo
}

// SetIsDeleted sets the "is_deleted" field.
func (cmguo *CarsModelsGroupsUpdateOne) SetIsDeleted(i int) *CarsModelsGroupsUpdateOne {
	cmguo.mutation.ResetIsDeleted()
	cmguo.mutation.SetIsDeleted(i)
	return cmguo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (cmguo *CarsModelsGroupsUpdateOne) SetNillableIsDeleted(i *int) *CarsModelsGroupsUpdateOne {
	if i != nil {
		cmguo.SetIsDeleted(*i)
	}
	return cmguo
}

// AddIsDeleted adds i to the "is_deleted" field.
func (cmguo *CarsModelsGroupsUpdateOne) AddIsDeleted(i int) *CarsModelsGroupsUpdateOne {
	cmguo.mutation.AddIsDeleted(i)
	return cmguo
}

// SetUpdateTime sets the "update_time" field.
func (cmguo *CarsModelsGroupsUpdateOne) SetUpdateTime(t time.Time) *CarsModelsGroupsUpdateOne {
	cmguo.mutation.SetUpdateTime(t)
	return cmguo
}

// SetModel sets the "model" edge to the CarsModels entity.
func (cmguo *CarsModelsGroupsUpdateOne) SetModel(c *CarsModels) *CarsModelsGroupsUpdateOne {
	return cmguo.SetModelID(c.ID)
}

// AddParamIDs adds the "params" edge to the CarsModelsGroupsParams entity by IDs.
func (cmguo *CarsModelsGroupsUpdateOne) AddParamIDs(ids ...int) *CarsModelsGroupsUpdateOne {
	cmguo.mutation.AddParamIDs(ids...)
	return cmguo
}

// AddParams adds the "params" edges to the CarsModelsGroupsParams entity.
func (cmguo *CarsModelsGroupsUpdateOne) AddParams(c ...*CarsModelsGroupsParams) *CarsModelsGroupsUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cmguo.AddParamIDs(ids...)
}

// Mutation returns the CarsModelsGroupsMutation object of the builder.
func (cmguo *CarsModelsGroupsUpdateOne) Mutation() *CarsModelsGroupsMutation {
	return cmguo.mutation
}

// ClearModel clears the "model" edge to the CarsModels entity.
func (cmguo *CarsModelsGroupsUpdateOne) ClearModel() *CarsModelsGroupsUpdateOne {
	cmguo.mutation.ClearModel()
	return cmguo
}

// ClearParams clears all "params" edges to the CarsModelsGroupsParams entity.
func (cmguo *CarsModelsGroupsUpdateOne) ClearParams() *CarsModelsGroupsUpdateOne {
	cmguo.mutation.ClearParams()
	return cmguo
}

// RemoveParamIDs removes the "params" edge to CarsModelsGroupsParams entities by IDs.
func (cmguo *CarsModelsGroupsUpdateOne) RemoveParamIDs(ids ...int) *CarsModelsGroupsUpdateOne {
	cmguo.mutation.RemoveParamIDs(ids...)
	return cmguo
}

// RemoveParams removes "params" edges to CarsModelsGroupsParams entities.
func (cmguo *CarsModelsGroupsUpdateOne) RemoveParams(c ...*CarsModelsGroupsParams) *CarsModelsGroupsUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cmguo.RemoveParamIDs(ids...)
}

// Where appends a list predicates to the CarsModelsGroupsUpdate builder.
func (cmguo *CarsModelsGroupsUpdateOne) Where(ps ...predicate.CarsModelsGroups) *CarsModelsGroupsUpdateOne {
	cmguo.mutation.Where(ps...)
	return cmguo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cmguo *CarsModelsGroupsUpdateOne) Select(field string, fields ...string) *CarsModelsGroupsUpdateOne {
	cmguo.fields = append([]string{field}, fields...)
	return cmguo
}

// Save executes the query and returns the updated CarsModelsGroups entity.
func (cmguo *CarsModelsGroupsUpdateOne) Save(ctx context.Context) (*CarsModelsGroups, error) {
	cmguo.defaults()
	return withHooks(ctx, cmguo.sqlSave, cmguo.mutation, cmguo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cmguo *CarsModelsGroupsUpdateOne) SaveX(ctx context.Context) *CarsModelsGroups {
	node, err := cmguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cmguo *CarsModelsGroupsUpdateOne) Exec(ctx context.Context) error {
	_, err := cmguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmguo *CarsModelsGroupsUpdateOne) ExecX(ctx context.Context) {
	if err := cmguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cmguo *CarsModelsGroupsUpdateOne) defaults() {
	if _, ok := cmguo.mutation.UpdateTime(); !ok {
		v := carsmodelsgroups.UpdateDefaultUpdateTime()
		cmguo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmguo *CarsModelsGroupsUpdateOne) check() error {
	if cmguo.mutation.ModelCleared() && len(cmguo.mutation.ModelIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarsModelsGroups.model"`)
	}
	return nil
}

func (cmguo *CarsModelsGroupsUpdateOne) sqlSave(ctx context.Context) (_node *CarsModelsGroups, err error) {
	if err := cmguo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(carsmodelsgroups.Table, carsmodelsgroups.Columns, sqlgraph.NewFieldSpec(carsmodelsgroups.FieldID, field.TypeInt))
	id, ok := cmguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CarsModelsGroups.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cmguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carsmodelsgroups.FieldID)
		for _, f := range fields {
			if !carsmodelsgroups.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != carsmodelsgroups.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cmguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmguo.mutation.GroupRemark(); ok {
		_spec.SetField(carsmodelsgroups.FieldGroupRemark, field.TypeString, value)
	}
	if value, ok := cmguo.mutation.GroupName(); ok {
		_spec.SetField(carsmodelsgroups.FieldGroupName, field.TypeString, value)
	}
	if value, ok := cmguo.mutation.Status(); ok {
		_spec.SetField(carsmodelsgroups.FieldStatus, field.TypeInt, value)
	}
	if value, ok := cmguo.mutation.AddedStatus(); ok {
		_spec.AddField(carsmodelsgroups.FieldStatus, field.TypeInt, value)
	}
	if value, ok := cmguo.mutation.IsDeleted(); ok {
		_spec.SetField(carsmodelsgroups.FieldIsDeleted, field.TypeInt, value)
	}
	if value, ok := cmguo.mutation.AddedIsDeleted(); ok {
		_spec.AddField(carsmodelsgroups.FieldIsDeleted, field.TypeInt, value)
	}
	if value, ok := cmguo.mutation.UpdateTime(); ok {
		_spec.SetField(carsmodelsgroups.FieldUpdateTime, field.TypeTime, value)
	}
	if cmguo.mutation.ModelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carsmodelsgroups.ModelTable,
			Columns: []string{carsmodelsgroups.ModelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsmodels.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmguo.mutation.ModelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carsmodelsgroups.ModelTable,
			Columns: []string{carsmodelsgroups.ModelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsmodels.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cmguo.mutation.ParamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carsmodelsgroups.ParamsTable,
			Columns: []string{carsmodelsgroups.ParamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsmodelsgroupsparams.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmguo.mutation.RemovedParamsIDs(); len(nodes) > 0 && !cmguo.mutation.ParamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carsmodelsgroups.ParamsTable,
			Columns: []string{carsmodelsgroups.ParamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsmodelsgroupsparams.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmguo.mutation.ParamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carsmodelsgroups.ParamsTable,
			Columns: []string{carsmodelsgroups.ParamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsmodelsgroupsparams.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CarsModelsGroups{config: cmguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cmguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carsmodelsgroups.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cmguo.mutation.done = true
	return _node, nil
}
