// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/paytxbill"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"github.com/jianbo-zh/jydata/database/ent/scenicarea"
)

// PayTxBillQuery is the builder for querying PayTxBill entities.
type PayTxBillQuery struct {
	config
	ctx                      *QueryContext
	order                    []paytxbill.OrderOption
	inters                   []Interceptor
	predicates               []predicate.PayTxBill
	withBackgroundScenicArea *ScenicAreaQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PayTxBillQuery builder.
func (ptbq *PayTxBillQuery) Where(ps ...predicate.PayTxBill) *PayTxBillQuery {
	ptbq.predicates = append(ptbq.predicates, ps...)
	return ptbq
}

// Limit the number of records to be returned by this query.
func (ptbq *PayTxBillQuery) Limit(limit int) *PayTxBillQuery {
	ptbq.ctx.Limit = &limit
	return ptbq
}

// Offset to start from.
func (ptbq *PayTxBillQuery) Offset(offset int) *PayTxBillQuery {
	ptbq.ctx.Offset = &offset
	return ptbq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ptbq *PayTxBillQuery) Unique(unique bool) *PayTxBillQuery {
	ptbq.ctx.Unique = &unique
	return ptbq
}

// Order specifies how the records should be ordered.
func (ptbq *PayTxBillQuery) Order(o ...paytxbill.OrderOption) *PayTxBillQuery {
	ptbq.order = append(ptbq.order, o...)
	return ptbq
}

// QueryBackgroundScenicArea chains the current query on the "background_scenic_area" edge.
func (ptbq *PayTxBillQuery) QueryBackgroundScenicArea() *ScenicAreaQuery {
	query := (&ScenicAreaClient{config: ptbq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ptbq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ptbq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(paytxbill.Table, paytxbill.FieldID, selector),
			sqlgraph.To(scenicarea.Table, scenicarea.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, paytxbill.BackgroundScenicAreaTable, paytxbill.BackgroundScenicAreaColumn),
		)
		fromU = sqlgraph.SetNeighbors(ptbq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PayTxBill entity from the query.
// Returns a *NotFoundError when no PayTxBill was found.
func (ptbq *PayTxBillQuery) First(ctx context.Context) (*PayTxBill, error) {
	nodes, err := ptbq.Limit(1).All(setContextOp(ctx, ptbq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{paytxbill.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ptbq *PayTxBillQuery) FirstX(ctx context.Context) *PayTxBill {
	node, err := ptbq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PayTxBill ID from the query.
// Returns a *NotFoundError when no PayTxBill ID was found.
func (ptbq *PayTxBillQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ptbq.Limit(1).IDs(setContextOp(ctx, ptbq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{paytxbill.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ptbq *PayTxBillQuery) FirstIDX(ctx context.Context) int {
	id, err := ptbq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PayTxBill entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PayTxBill entity is found.
// Returns a *NotFoundError when no PayTxBill entities are found.
func (ptbq *PayTxBillQuery) Only(ctx context.Context) (*PayTxBill, error) {
	nodes, err := ptbq.Limit(2).All(setContextOp(ctx, ptbq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{paytxbill.Label}
	default:
		return nil, &NotSingularError{paytxbill.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ptbq *PayTxBillQuery) OnlyX(ctx context.Context) *PayTxBill {
	node, err := ptbq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PayTxBill ID in the query.
// Returns a *NotSingularError when more than one PayTxBill ID is found.
// Returns a *NotFoundError when no entities are found.
func (ptbq *PayTxBillQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ptbq.Limit(2).IDs(setContextOp(ctx, ptbq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{paytxbill.Label}
	default:
		err = &NotSingularError{paytxbill.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ptbq *PayTxBillQuery) OnlyIDX(ctx context.Context) int {
	id, err := ptbq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PayTxBills.
func (ptbq *PayTxBillQuery) All(ctx context.Context) ([]*PayTxBill, error) {
	ctx = setContextOp(ctx, ptbq.ctx, ent.OpQueryAll)
	if err := ptbq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PayTxBill, *PayTxBillQuery]()
	return withInterceptors[[]*PayTxBill](ctx, ptbq, qr, ptbq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ptbq *PayTxBillQuery) AllX(ctx context.Context) []*PayTxBill {
	nodes, err := ptbq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PayTxBill IDs.
func (ptbq *PayTxBillQuery) IDs(ctx context.Context) (ids []int, err error) {
	if ptbq.ctx.Unique == nil && ptbq.path != nil {
		ptbq.Unique(true)
	}
	ctx = setContextOp(ctx, ptbq.ctx, ent.OpQueryIDs)
	if err = ptbq.Select(paytxbill.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ptbq *PayTxBillQuery) IDsX(ctx context.Context) []int {
	ids, err := ptbq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ptbq *PayTxBillQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ptbq.ctx, ent.OpQueryCount)
	if err := ptbq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ptbq, querierCount[*PayTxBillQuery](), ptbq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ptbq *PayTxBillQuery) CountX(ctx context.Context) int {
	count, err := ptbq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ptbq *PayTxBillQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ptbq.ctx, ent.OpQueryExist)
	switch _, err := ptbq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ptbq *PayTxBillQuery) ExistX(ctx context.Context) bool {
	exist, err := ptbq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PayTxBillQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ptbq *PayTxBillQuery) Clone() *PayTxBillQuery {
	if ptbq == nil {
		return nil
	}
	return &PayTxBillQuery{
		config:                   ptbq.config,
		ctx:                      ptbq.ctx.Clone(),
		order:                    append([]paytxbill.OrderOption{}, ptbq.order...),
		inters:                   append([]Interceptor{}, ptbq.inters...),
		predicates:               append([]predicate.PayTxBill{}, ptbq.predicates...),
		withBackgroundScenicArea: ptbq.withBackgroundScenicArea.Clone(),
		// clone intermediate query.
		sql:  ptbq.sql.Clone(),
		path: ptbq.path,
	}
}

// WithBackgroundScenicArea tells the query-builder to eager-load the nodes that are connected to
// the "background_scenic_area" edge. The optional arguments are used to configure the query builder of the edge.
func (ptbq *PayTxBillQuery) WithBackgroundScenicArea(opts ...func(*ScenicAreaQuery)) *PayTxBillQuery {
	query := (&ScenicAreaClient{config: ptbq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ptbq.withBackgroundScenicArea = query
	return ptbq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TxID string `json:"tx_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PayTxBill.Query().
//		GroupBy(paytxbill.FieldTxID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ptbq *PayTxBillQuery) GroupBy(field string, fields ...string) *PayTxBillGroupBy {
	ptbq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PayTxBillGroupBy{build: ptbq}
	grbuild.flds = &ptbq.ctx.Fields
	grbuild.label = paytxbill.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TxID string `json:"tx_id,omitempty"`
//	}
//
//	client.PayTxBill.Query().
//		Select(paytxbill.FieldTxID).
//		Scan(ctx, &v)
func (ptbq *PayTxBillQuery) Select(fields ...string) *PayTxBillSelect {
	ptbq.ctx.Fields = append(ptbq.ctx.Fields, fields...)
	sbuild := &PayTxBillSelect{PayTxBillQuery: ptbq}
	sbuild.label = paytxbill.Label
	sbuild.flds, sbuild.scan = &ptbq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PayTxBillSelect configured with the given aggregations.
func (ptbq *PayTxBillQuery) Aggregate(fns ...AggregateFunc) *PayTxBillSelect {
	return ptbq.Select().Aggregate(fns...)
}

func (ptbq *PayTxBillQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ptbq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ptbq); err != nil {
				return err
			}
		}
	}
	for _, f := range ptbq.ctx.Fields {
		if !paytxbill.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ptbq.path != nil {
		prev, err := ptbq.path(ctx)
		if err != nil {
			return err
		}
		ptbq.sql = prev
	}
	return nil
}

func (ptbq *PayTxBillQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PayTxBill, error) {
	var (
		nodes       = []*PayTxBill{}
		_spec       = ptbq.querySpec()
		loadedTypes = [1]bool{
			ptbq.withBackgroundScenicArea != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PayTxBill).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PayTxBill{config: ptbq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ptbq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ptbq.withBackgroundScenicArea; query != nil {
		if err := ptbq.loadBackgroundScenicArea(ctx, query, nodes, nil,
			func(n *PayTxBill, e *ScenicArea) { n.Edges.BackgroundScenicArea = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ptbq *PayTxBillQuery) loadBackgroundScenicArea(ctx context.Context, query *ScenicAreaQuery, nodes []*PayTxBill, init func(*PayTxBill), assign func(*PayTxBill, *ScenicArea)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*PayTxBill)
	for i := range nodes {
		fk := nodes[i].ScenicAreaID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(scenicarea.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "scenic_area_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ptbq *PayTxBillQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ptbq.querySpec()
	_spec.Node.Columns = ptbq.ctx.Fields
	if len(ptbq.ctx.Fields) > 0 {
		_spec.Unique = ptbq.ctx.Unique != nil && *ptbq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ptbq.driver, _spec)
}

func (ptbq *PayTxBillQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(paytxbill.Table, paytxbill.Columns, sqlgraph.NewFieldSpec(paytxbill.FieldID, field.TypeInt))
	_spec.From = ptbq.sql
	if unique := ptbq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ptbq.path != nil {
		_spec.Unique = true
	}
	if fields := ptbq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, paytxbill.FieldID)
		for i := range fields {
			if fields[i] != paytxbill.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if ptbq.withBackgroundScenicArea != nil {
			_spec.Node.AddColumnOnce(paytxbill.FieldScenicAreaID)
		}
	}
	if ps := ptbq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ptbq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ptbq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ptbq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ptbq *PayTxBillQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ptbq.driver.Dialect())
	t1 := builder.Table(paytxbill.Table)
	columns := ptbq.ctx.Fields
	if len(columns) == 0 {
		columns = paytxbill.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ptbq.sql != nil {
		selector = ptbq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ptbq.ctx.Unique != nil && *ptbq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ptbq.predicates {
		p(selector)
	}
	for _, p := range ptbq.order {
		p(selector)
	}
	if offset := ptbq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ptbq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// PayTxBillGroupBy is the group-by builder for PayTxBill entities.
type PayTxBillGroupBy struct {
	selector
	build *PayTxBillQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ptbgb *PayTxBillGroupBy) Aggregate(fns ...AggregateFunc) *PayTxBillGroupBy {
	ptbgb.fns = append(ptbgb.fns, fns...)
	return ptbgb
}

// Scan applies the selector query and scans the result into the given value.
func (ptbgb *PayTxBillGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ptbgb.build.ctx, ent.OpQueryGroupBy)
	if err := ptbgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PayTxBillQuery, *PayTxBillGroupBy](ctx, ptbgb.build, ptbgb, ptbgb.build.inters, v)
}

func (ptbgb *PayTxBillGroupBy) sqlScan(ctx context.Context, root *PayTxBillQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ptbgb.fns))
	for _, fn := range ptbgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ptbgb.flds)+len(ptbgb.fns))
		for _, f := range *ptbgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ptbgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ptbgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PayTxBillSelect is the builder for selecting fields of PayTxBill entities.
type PayTxBillSelect struct {
	*PayTxBillQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ptbs *PayTxBillSelect) Aggregate(fns ...AggregateFunc) *PayTxBillSelect {
	ptbs.fns = append(ptbs.fns, fns...)
	return ptbs
}

// Scan applies the selector query and scans the result into the given value.
func (ptbs *PayTxBillSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ptbs.ctx, ent.OpQuerySelect)
	if err := ptbs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PayTxBillQuery, *PayTxBillSelect](ctx, ptbs.PayTxBillQuery, ptbs, ptbs.inters, v)
}

func (ptbs *PayTxBillSelect) sqlScan(ctx context.Context, root *PayTxBillQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ptbs.fns))
	for _, fn := range ptbs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ptbs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ptbs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
