// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/car"
	"github.com/jianbo-zh/jydata/database/ent/order"
	"github.com/jianbo-zh/jydata/database/ent/orderbilling"
	"github.com/jianbo-zh/jydata/database/ent/orderrefund"
	"github.com/jianbo-zh/jydata/database/ent/ordersharing"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"github.com/jianbo-zh/jydata/database/ent/scenicarea"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderUpdate is the builder for updating Order entities.
type OrderUpdate struct {
	config
	hooks    []Hook
	mutation *OrderMutation
}

// Where appends a list predicates to the OrderUpdate builder.
func (ou *OrderUpdate) Where(ps ...predicate.Order) *OrderUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetType sets the "type" field.
func (ou *OrderUpdate) SetType(i int) *OrderUpdate {
	ou.mutation.ResetType()
	ou.mutation.SetType(i)
	return ou
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableType(i *int) *OrderUpdate {
	if i != nil {
		ou.SetType(*i)
	}
	return ou
}

// AddType adds i to the "type" field.
func (ou *OrderUpdate) AddType(i int) *OrderUpdate {
	ou.mutation.AddType(i)
	return ou
}

// SetPeriod sets the "period" field.
func (ou *OrderUpdate) SetPeriod(i int) *OrderUpdate {
	ou.mutation.ResetPeriod()
	ou.mutation.SetPeriod(i)
	return ou
}

// SetNillablePeriod sets the "period" field if the given value is not nil.
func (ou *OrderUpdate) SetNillablePeriod(i *int) *OrderUpdate {
	if i != nil {
		ou.SetPeriod(*i)
	}
	return ou
}

// AddPeriod adds i to the "period" field.
func (ou *OrderUpdate) AddPeriod(i int) *OrderUpdate {
	ou.mutation.AddPeriod(i)
	return ou
}

// SetOrderNo sets the "order_no" field.
func (ou *OrderUpdate) SetOrderNo(s string) *OrderUpdate {
	ou.mutation.SetOrderNo(s)
	return ou
}

// SetNillableOrderNo sets the "order_no" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableOrderNo(s *string) *OrderUpdate {
	if s != nil {
		ou.SetOrderNo(*s)
	}
	return ou
}

// SetWxTxID sets the "wx_tx_id" field.
func (ou *OrderUpdate) SetWxTxID(s string) *OrderUpdate {
	ou.mutation.SetWxTxID(s)
	return ou
}

// SetNillableWxTxID sets the "wx_tx_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableWxTxID(s *string) *OrderUpdate {
	if s != nil {
		ou.SetWxTxID(*s)
	}
	return ou
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (ou *OrderUpdate) SetScenicAreaID(i int) *OrderUpdate {
	ou.mutation.SetScenicAreaID(i)
	return ou
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableScenicAreaID(i *int) *OrderUpdate {
	if i != nil {
		ou.SetScenicAreaID(*i)
	}
	return ou
}

// SetMchID sets the "mch_id" field.
func (ou *OrderUpdate) SetMchID(s string) *OrderUpdate {
	ou.mutation.SetMchID(s)
	return ou
}

// SetNillableMchID sets the "mch_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableMchID(s *string) *OrderUpdate {
	if s != nil {
		ou.SetMchID(*s)
	}
	return ou
}

// SetScenicAreaName sets the "scenic_area_name" field.
func (ou *OrderUpdate) SetScenicAreaName(s string) *OrderUpdate {
	ou.mutation.SetScenicAreaName(s)
	return ou
}

// SetNillableScenicAreaName sets the "scenic_area_name" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableScenicAreaName(s *string) *OrderUpdate {
	if s != nil {
		ou.SetScenicAreaName(*s)
	}
	return ou
}

// SetUserID sets the "user_id" field.
func (ou *OrderUpdate) SetUserID(i int) *OrderUpdate {
	ou.mutation.ResetUserID()
	ou.mutation.SetUserID(i)
	return ou
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableUserID(i *int) *OrderUpdate {
	if i != nil {
		ou.SetUserID(*i)
	}
	return ou
}

// AddUserID adds i to the "user_id" field.
func (ou *OrderUpdate) AddUserID(i int) *OrderUpdate {
	ou.mutation.AddUserID(i)
	return ou
}

// SetOpenID sets the "open_id" field.
func (ou *OrderUpdate) SetOpenID(s string) *OrderUpdate {
	ou.mutation.SetOpenID(s)
	return ou
}

// SetNillableOpenID sets the "open_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableOpenID(s *string) *OrderUpdate {
	if s != nil {
		ou.SetOpenID(*s)
	}
	return ou
}

// SetNickname sets the "nickname" field.
func (ou *OrderUpdate) SetNickname(s string) *OrderUpdate {
	ou.mutation.SetNickname(s)
	return ou
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableNickname(s *string) *OrderUpdate {
	if s != nil {
		ou.SetNickname(*s)
	}
	return ou
}

// SetPhone sets the "phone" field.
func (ou *OrderUpdate) SetPhone(s string) *OrderUpdate {
	ou.mutation.SetPhone(s)
	return ou
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (ou *OrderUpdate) SetNillablePhone(s *string) *OrderUpdate {
	if s != nil {
		ou.SetPhone(*s)
	}
	return ou
}

// SetCarID sets the "car_id" field.
func (ou *OrderUpdate) SetCarID(i int) *OrderUpdate {
	ou.mutation.SetCarID(i)
	return ou
}

// SetNillableCarID sets the "car_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableCarID(i *int) *OrderUpdate {
	if i != nil {
		ou.SetCarID(*i)
	}
	return ou
}

// SetDeviceID sets the "device_id" field.
func (ou *OrderUpdate) SetDeviceID(s string) *OrderUpdate {
	ou.mutation.SetDeviceID(s)
	return ou
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableDeviceID(s *string) *OrderUpdate {
	if s != nil {
		ou.SetDeviceID(*s)
	}
	return ou
}

// SetCarName sets the "car_name" field.
func (ou *OrderUpdate) SetCarName(s string) *OrderUpdate {
	ou.mutation.SetCarName(s)
	return ou
}

// SetNillableCarName sets the "car_name" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableCarName(s *string) *OrderUpdate {
	if s != nil {
		ou.SetCarName(*s)
	}
	return ou
}

// SetCarLicensePlate sets the "car_license_plate" field.
func (ou *OrderUpdate) SetCarLicensePlate(s string) *OrderUpdate {
	ou.mutation.SetCarLicensePlate(s)
	return ou
}

// SetNillableCarLicensePlate sets the "car_license_plate" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableCarLicensePlate(s *string) *OrderUpdate {
	if s != nil {
		ou.SetCarLicensePlate(*s)
	}
	return ou
}

// SetModelID sets the "model_id" field.
func (ou *OrderUpdate) SetModelID(i int) *OrderUpdate {
	ou.mutation.ResetModelID()
	ou.mutation.SetModelID(i)
	return ou
}

// SetNillableModelID sets the "model_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableModelID(i *int) *OrderUpdate {
	if i != nil {
		ou.SetModelID(*i)
	}
	return ou
}

// AddModelID adds i to the "model_id" field.
func (ou *OrderUpdate) AddModelID(i int) *OrderUpdate {
	ou.mutation.AddModelID(i)
	return ou
}

// SetModelName sets the "model_name" field.
func (ou *OrderUpdate) SetModelName(s string) *OrderUpdate {
	ou.mutation.SetModelName(s)
	return ou
}

// SetNillableModelName sets the "model_name" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableModelName(s *string) *OrderUpdate {
	if s != nil {
		ou.SetModelName(*s)
	}
	return ou
}

// SetCouponID sets the "coupon_id" field.
func (ou *OrderUpdate) SetCouponID(i int) *OrderUpdate {
	ou.mutation.ResetCouponID()
	ou.mutation.SetCouponID(i)
	return ou
}

// SetNillableCouponID sets the "coupon_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableCouponID(i *int) *OrderUpdate {
	if i != nil {
		ou.SetCouponID(*i)
	}
	return ou
}

// AddCouponID adds i to the "coupon_id" field.
func (ou *OrderUpdate) AddCouponID(i int) *OrderUpdate {
	ou.mutation.AddCouponID(i)
	return ou
}

// SetCouponName sets the "coupon_name" field.
func (ou *OrderUpdate) SetCouponName(s string) *OrderUpdate {
	ou.mutation.SetCouponName(s)
	return ou
}

// SetNillableCouponName sets the "coupon_name" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableCouponName(s *string) *OrderUpdate {
	if s != nil {
		ou.SetCouponName(*s)
	}
	return ou
}

// SetUseMileageMeter sets the "use_mileage_meter" field.
func (ou *OrderUpdate) SetUseMileageMeter(i int) *OrderUpdate {
	ou.mutation.ResetUseMileageMeter()
	ou.mutation.SetUseMileageMeter(i)
	return ou
}

// SetNillableUseMileageMeter sets the "use_mileage_meter" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableUseMileageMeter(i *int) *OrderUpdate {
	if i != nil {
		ou.SetUseMileageMeter(*i)
	}
	return ou
}

// AddUseMileageMeter adds i to the "use_mileage_meter" field.
func (ou *OrderUpdate) AddUseMileageMeter(i int) *OrderUpdate {
	ou.mutation.AddUseMileageMeter(i)
	return ou
}

// SetUseTimeSecond sets the "use_time_second" field.
func (ou *OrderUpdate) SetUseTimeSecond(i int) *OrderUpdate {
	ou.mutation.ResetUseTimeSecond()
	ou.mutation.SetUseTimeSecond(i)
	return ou
}

// SetNillableUseTimeSecond sets the "use_time_second" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableUseTimeSecond(i *int) *OrderUpdate {
	if i != nil {
		ou.SetUseTimeSecond(*i)
	}
	return ou
}

// AddUseTimeSecond adds i to the "use_time_second" field.
func (ou *OrderUpdate) AddUseTimeSecond(i int) *OrderUpdate {
	ou.mutation.AddUseTimeSecond(i)
	return ou
}

// SetDepositAmount sets the "deposit_amount" field.
func (ou *OrderUpdate) SetDepositAmount(i int) *OrderUpdate {
	ou.mutation.ResetDepositAmount()
	ou.mutation.SetDepositAmount(i)
	return ou
}

// SetNillableDepositAmount sets the "deposit_amount" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableDepositAmount(i *int) *OrderUpdate {
	if i != nil {
		ou.SetDepositAmount(*i)
	}
	return ou
}

// AddDepositAmount adds i to the "deposit_amount" field.
func (ou *OrderUpdate) AddDepositAmount(i int) *OrderUpdate {
	ou.mutation.AddDepositAmount(i)
	return ou
}

// SetOrderAmount sets the "order_amount" field.
func (ou *OrderUpdate) SetOrderAmount(i int) *OrderUpdate {
	ou.mutation.ResetOrderAmount()
	ou.mutation.SetOrderAmount(i)
	return ou
}

// SetNillableOrderAmount sets the "order_amount" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableOrderAmount(i *int) *OrderUpdate {
	if i != nil {
		ou.SetOrderAmount(*i)
	}
	return ou
}

// AddOrderAmount adds i to the "order_amount" field.
func (ou *OrderUpdate) AddOrderAmount(i int) *OrderUpdate {
	ou.mutation.AddOrderAmount(i)
	return ou
}

// SetRefundedAmount sets the "refunded_amount" field.
func (ou *OrderUpdate) SetRefundedAmount(i int) *OrderUpdate {
	ou.mutation.ResetRefundedAmount()
	ou.mutation.SetRefundedAmount(i)
	return ou
}

// SetNillableRefundedAmount sets the "refunded_amount" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableRefundedAmount(i *int) *OrderUpdate {
	if i != nil {
		ou.SetRefundedAmount(*i)
	}
	return ou
}

// AddRefundedAmount adds i to the "refunded_amount" field.
func (ou *OrderUpdate) AddRefundedAmount(i int) *OrderUpdate {
	ou.mutation.AddRefundedAmount(i)
	return ou
}

// SetCouponAmount sets the "coupon_amount" field.
func (ou *OrderUpdate) SetCouponAmount(i int) *OrderUpdate {
	ou.mutation.ResetCouponAmount()
	ou.mutation.SetCouponAmount(i)
	return ou
}

// SetNillableCouponAmount sets the "coupon_amount" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableCouponAmount(i *int) *OrderUpdate {
	if i != nil {
		ou.SetCouponAmount(*i)
	}
	return ou
}

// AddCouponAmount adds i to the "coupon_amount" field.
func (ou *OrderUpdate) AddCouponAmount(i int) *OrderUpdate {
	ou.mutation.AddCouponAmount(i)
	return ou
}

// SetOrderState sets the "order_state" field.
func (ou *OrderUpdate) SetOrderState(i int) *OrderUpdate {
	ou.mutation.ResetOrderState()
	ou.mutation.SetOrderState(i)
	return ou
}

// SetNillableOrderState sets the "order_state" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableOrderState(i *int) *OrderUpdate {
	if i != nil {
		ou.SetOrderState(*i)
	}
	return ou
}

// AddOrderState adds i to the "order_state" field.
func (ou *OrderUpdate) AddOrderState(i int) *OrderUpdate {
	ou.mutation.AddOrderState(i)
	return ou
}

// SetDepositState sets the "deposit_state" field.
func (ou *OrderUpdate) SetDepositState(i int) *OrderUpdate {
	ou.mutation.ResetDepositState()
	ou.mutation.SetDepositState(i)
	return ou
}

// SetNillableDepositState sets the "deposit_state" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableDepositState(i *int) *OrderUpdate {
	if i != nil {
		ou.SetDepositState(*i)
	}
	return ou
}

// AddDepositState adds i to the "deposit_state" field.
func (ou *OrderUpdate) AddDepositState(i int) *OrderUpdate {
	ou.mutation.AddDepositState(i)
	return ou
}

// SetEmergencyState sets the "emergency_state" field.
func (ou *OrderUpdate) SetEmergencyState(i int) *OrderUpdate {
	ou.mutation.ResetEmergencyState()
	ou.mutation.SetEmergencyState(i)
	return ou
}

// SetNillableEmergencyState sets the "emergency_state" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableEmergencyState(i *int) *OrderUpdate {
	if i != nil {
		ou.SetEmergencyState(*i)
	}
	return ou
}

// AddEmergencyState adds i to the "emergency_state" field.
func (ou *OrderUpdate) AddEmergencyState(i int) *OrderUpdate {
	ou.mutation.AddEmergencyState(i)
	return ou
}

// SetIsTestOrder sets the "is_test_order" field.
func (ou *OrderUpdate) SetIsTestOrder(b bool) *OrderUpdate {
	ou.mutation.SetIsTestOrder(b)
	return ou
}

// SetNillableIsTestOrder sets the "is_test_order" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableIsTestOrder(b *bool) *OrderUpdate {
	if b != nil {
		ou.SetIsTestOrder(*b)
	}
	return ou
}

// SetIsCancel sets the "is_cancel" field.
func (ou *OrderUpdate) SetIsCancel(b bool) *OrderUpdate {
	ou.mutation.SetIsCancel(b)
	return ou
}

// SetNillableIsCancel sets the "is_cancel" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableIsCancel(b *bool) *OrderUpdate {
	if b != nil {
		ou.SetIsCancel(*b)
	}
	return ou
}

// SetIsProfitSharing sets the "is_profit_sharing" field.
func (ou *OrderUpdate) SetIsProfitSharing(b bool) *OrderUpdate {
	ou.mutation.SetIsProfitSharing(b)
	return ou
}

// SetNillableIsProfitSharing sets the "is_profit_sharing" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableIsProfitSharing(b *bool) *OrderUpdate {
	if b != nil {
		ou.SetIsProfitSharing(*b)
	}
	return ou
}

// SetRemark sets the "remark" field.
func (ou *OrderUpdate) SetRemark(s string) *OrderUpdate {
	ou.mutation.SetRemark(s)
	return ou
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableRemark(s *string) *OrderUpdate {
	if s != nil {
		ou.SetRemark(*s)
	}
	return ou
}

// SetUserScore sets the "user_score" field.
func (ou *OrderUpdate) SetUserScore(i int) *OrderUpdate {
	ou.mutation.ResetUserScore()
	ou.mutation.SetUserScore(i)
	return ou
}

// SetNillableUserScore sets the "user_score" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableUserScore(i *int) *OrderUpdate {
	if i != nil {
		ou.SetUserScore(*i)
	}
	return ou
}

// AddUserScore adds i to the "user_score" field.
func (ou *OrderUpdate) AddUserScore(i int) *OrderUpdate {
	ou.mutation.AddUserScore(i)
	return ou
}

// SetUserComment sets the "user_comment" field.
func (ou *OrderUpdate) SetUserComment(s string) *OrderUpdate {
	ou.mutation.SetUserComment(s)
	return ou
}

// SetNillableUserComment sets the "user_comment" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableUserComment(s *string) *OrderUpdate {
	if s != nil {
		ou.SetUserComment(*s)
	}
	return ou
}

// SetDepositTime sets the "deposit_time" field.
func (ou *OrderUpdate) SetDepositTime(t time.Time) *OrderUpdate {
	ou.mutation.SetDepositTime(t)
	return ou
}

// SetNillableDepositTime sets the "deposit_time" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableDepositTime(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetDepositTime(*t)
	}
	return ou
}

// ClearDepositTime clears the value of the "deposit_time" field.
func (ou *OrderUpdate) ClearDepositTime() *OrderUpdate {
	ou.mutation.ClearDepositTime()
	return ou
}

// SetFinishTime sets the "finish_time" field.
func (ou *OrderUpdate) SetFinishTime(t time.Time) *OrderUpdate {
	ou.mutation.SetFinishTime(t)
	return ou
}

// SetNillableFinishTime sets the "finish_time" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableFinishTime(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetFinishTime(*t)
	}
	return ou
}

// ClearFinishTime clears the value of the "finish_time" field.
func (ou *OrderUpdate) ClearFinishTime() *OrderUpdate {
	ou.mutation.ClearFinishTime()
	return ou
}

// SetUpdateTime sets the "update_time" field.
func (ou *OrderUpdate) SetUpdateTime(t time.Time) *OrderUpdate {
	ou.mutation.SetUpdateTime(t)
	return ou
}

// SetCar sets the "car" edge to the Car entity.
func (ou *OrderUpdate) SetCar(c *Car) *OrderUpdate {
	return ou.SetCarID(c.ID)
}

// SetBackgroundScenicAreaID sets the "background_scenic_area" edge to the ScenicArea entity by ID.
func (ou *OrderUpdate) SetBackgroundScenicAreaID(id int) *OrderUpdate {
	ou.mutation.SetBackgroundScenicAreaID(id)
	return ou
}

// SetBackgroundScenicArea sets the "background_scenic_area" edge to the ScenicArea entity.
func (ou *OrderUpdate) SetBackgroundScenicArea(s *ScenicArea) *OrderUpdate {
	return ou.SetBackgroundScenicAreaID(s.ID)
}

// SetBillingID sets the "billing" edge to the OrderBilling entity by ID.
func (ou *OrderUpdate) SetBillingID(id int) *OrderUpdate {
	ou.mutation.SetBillingID(id)
	return ou
}

// SetNillableBillingID sets the "billing" edge to the OrderBilling entity by ID if the given value is not nil.
func (ou *OrderUpdate) SetNillableBillingID(id *int) *OrderUpdate {
	if id != nil {
		ou = ou.SetBillingID(*id)
	}
	return ou
}

// SetBilling sets the "billing" edge to the OrderBilling entity.
func (ou *OrderUpdate) SetBilling(o *OrderBilling) *OrderUpdate {
	return ou.SetBillingID(o.ID)
}

// AddRefundIDs adds the "refund" edge to the OrderRefund entity by IDs.
func (ou *OrderUpdate) AddRefundIDs(ids ...int) *OrderUpdate {
	ou.mutation.AddRefundIDs(ids...)
	return ou
}

// AddRefund adds the "refund" edges to the OrderRefund entity.
func (ou *OrderUpdate) AddRefund(o ...*OrderRefund) *OrderUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddRefundIDs(ids...)
}

// SetSharingID sets the "sharing" edge to the OrderSharing entity by ID.
func (ou *OrderUpdate) SetSharingID(id int) *OrderUpdate {
	ou.mutation.SetSharingID(id)
	return ou
}

// SetNillableSharingID sets the "sharing" edge to the OrderSharing entity by ID if the given value is not nil.
func (ou *OrderUpdate) SetNillableSharingID(id *int) *OrderUpdate {
	if id != nil {
		ou = ou.SetSharingID(*id)
	}
	return ou
}

// SetSharing sets the "sharing" edge to the OrderSharing entity.
func (ou *OrderUpdate) SetSharing(o *OrderSharing) *OrderUpdate {
	return ou.SetSharingID(o.ID)
}

// Mutation returns the OrderMutation object of the builder.
func (ou *OrderUpdate) Mutation() *OrderMutation {
	return ou.mutation
}

// ClearCar clears the "car" edge to the Car entity.
func (ou *OrderUpdate) ClearCar() *OrderUpdate {
	ou.mutation.ClearCar()
	return ou
}

// ClearBackgroundScenicArea clears the "background_scenic_area" edge to the ScenicArea entity.
func (ou *OrderUpdate) ClearBackgroundScenicArea() *OrderUpdate {
	ou.mutation.ClearBackgroundScenicArea()
	return ou
}

// ClearBilling clears the "billing" edge to the OrderBilling entity.
func (ou *OrderUpdate) ClearBilling() *OrderUpdate {
	ou.mutation.ClearBilling()
	return ou
}

// ClearRefund clears all "refund" edges to the OrderRefund entity.
func (ou *OrderUpdate) ClearRefund() *OrderUpdate {
	ou.mutation.ClearRefund()
	return ou
}

// RemoveRefundIDs removes the "refund" edge to OrderRefund entities by IDs.
func (ou *OrderUpdate) RemoveRefundIDs(ids ...int) *OrderUpdate {
	ou.mutation.RemoveRefundIDs(ids...)
	return ou
}

// RemoveRefund removes "refund" edges to OrderRefund entities.
func (ou *OrderUpdate) RemoveRefund(o ...*OrderRefund) *OrderUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemoveRefundIDs(ids...)
}

// ClearSharing clears the "sharing" edge to the OrderSharing entity.
func (ou *OrderUpdate) ClearSharing() *OrderUpdate {
	ou.mutation.ClearSharing()
	return ou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrderUpdate) Save(ctx context.Context) (int, error) {
	ou.defaults()
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrderUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrderUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrderUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ou *OrderUpdate) defaults() {
	if _, ok := ou.mutation.UpdateTime(); !ok {
		v := order.UpdateDefaultUpdateTime()
		ou.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ou *OrderUpdate) check() error {
	if ou.mutation.CarCleared() && len(ou.mutation.CarIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Order.car"`)
	}
	if ou.mutation.BackgroundScenicAreaCleared() && len(ou.mutation.BackgroundScenicAreaIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Order.background_scenic_area"`)
	}
	return nil
}

func (ou *OrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.GetType(); ok {
		_spec.SetField(order.FieldType, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedType(); ok {
		_spec.AddField(order.FieldType, field.TypeInt, value)
	}
	if value, ok := ou.mutation.Period(); ok {
		_spec.SetField(order.FieldPeriod, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedPeriod(); ok {
		_spec.AddField(order.FieldPeriod, field.TypeInt, value)
	}
	if value, ok := ou.mutation.OrderNo(); ok {
		_spec.SetField(order.FieldOrderNo, field.TypeString, value)
	}
	if value, ok := ou.mutation.WxTxID(); ok {
		_spec.SetField(order.FieldWxTxID, field.TypeString, value)
	}
	if value, ok := ou.mutation.MchID(); ok {
		_spec.SetField(order.FieldMchID, field.TypeString, value)
	}
	if value, ok := ou.mutation.ScenicAreaName(); ok {
		_spec.SetField(order.FieldScenicAreaName, field.TypeString, value)
	}
	if value, ok := ou.mutation.UserID(); ok {
		_spec.SetField(order.FieldUserID, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedUserID(); ok {
		_spec.AddField(order.FieldUserID, field.TypeInt, value)
	}
	if value, ok := ou.mutation.OpenID(); ok {
		_spec.SetField(order.FieldOpenID, field.TypeString, value)
	}
	if value, ok := ou.mutation.Nickname(); ok {
		_spec.SetField(order.FieldNickname, field.TypeString, value)
	}
	if value, ok := ou.mutation.Phone(); ok {
		_spec.SetField(order.FieldPhone, field.TypeString, value)
	}
	if value, ok := ou.mutation.DeviceID(); ok {
		_spec.SetField(order.FieldDeviceID, field.TypeString, value)
	}
	if value, ok := ou.mutation.CarName(); ok {
		_spec.SetField(order.FieldCarName, field.TypeString, value)
	}
	if value, ok := ou.mutation.CarLicensePlate(); ok {
		_spec.SetField(order.FieldCarLicensePlate, field.TypeString, value)
	}
	if value, ok := ou.mutation.ModelID(); ok {
		_spec.SetField(order.FieldModelID, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedModelID(); ok {
		_spec.AddField(order.FieldModelID, field.TypeInt, value)
	}
	if value, ok := ou.mutation.ModelName(); ok {
		_spec.SetField(order.FieldModelName, field.TypeString, value)
	}
	if value, ok := ou.mutation.CouponID(); ok {
		_spec.SetField(order.FieldCouponID, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedCouponID(); ok {
		_spec.AddField(order.FieldCouponID, field.TypeInt, value)
	}
	if value, ok := ou.mutation.CouponName(); ok {
		_spec.SetField(order.FieldCouponName, field.TypeString, value)
	}
	if value, ok := ou.mutation.UseMileageMeter(); ok {
		_spec.SetField(order.FieldUseMileageMeter, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedUseMileageMeter(); ok {
		_spec.AddField(order.FieldUseMileageMeter, field.TypeInt, value)
	}
	if value, ok := ou.mutation.UseTimeSecond(); ok {
		_spec.SetField(order.FieldUseTimeSecond, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedUseTimeSecond(); ok {
		_spec.AddField(order.FieldUseTimeSecond, field.TypeInt, value)
	}
	if value, ok := ou.mutation.DepositAmount(); ok {
		_spec.SetField(order.FieldDepositAmount, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedDepositAmount(); ok {
		_spec.AddField(order.FieldDepositAmount, field.TypeInt, value)
	}
	if value, ok := ou.mutation.OrderAmount(); ok {
		_spec.SetField(order.FieldOrderAmount, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedOrderAmount(); ok {
		_spec.AddField(order.FieldOrderAmount, field.TypeInt, value)
	}
	if value, ok := ou.mutation.RefundedAmount(); ok {
		_spec.SetField(order.FieldRefundedAmount, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedRefundedAmount(); ok {
		_spec.AddField(order.FieldRefundedAmount, field.TypeInt, value)
	}
	if value, ok := ou.mutation.CouponAmount(); ok {
		_spec.SetField(order.FieldCouponAmount, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedCouponAmount(); ok {
		_spec.AddField(order.FieldCouponAmount, field.TypeInt, value)
	}
	if value, ok := ou.mutation.OrderState(); ok {
		_spec.SetField(order.FieldOrderState, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedOrderState(); ok {
		_spec.AddField(order.FieldOrderState, field.TypeInt, value)
	}
	if value, ok := ou.mutation.DepositState(); ok {
		_spec.SetField(order.FieldDepositState, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedDepositState(); ok {
		_spec.AddField(order.FieldDepositState, field.TypeInt, value)
	}
	if value, ok := ou.mutation.EmergencyState(); ok {
		_spec.SetField(order.FieldEmergencyState, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedEmergencyState(); ok {
		_spec.AddField(order.FieldEmergencyState, field.TypeInt, value)
	}
	if value, ok := ou.mutation.IsTestOrder(); ok {
		_spec.SetField(order.FieldIsTestOrder, field.TypeBool, value)
	}
	if value, ok := ou.mutation.IsCancel(); ok {
		_spec.SetField(order.FieldIsCancel, field.TypeBool, value)
	}
	if value, ok := ou.mutation.IsProfitSharing(); ok {
		_spec.SetField(order.FieldIsProfitSharing, field.TypeBool, value)
	}
	if value, ok := ou.mutation.Remark(); ok {
		_spec.SetField(order.FieldRemark, field.TypeString, value)
	}
	if value, ok := ou.mutation.UserScore(); ok {
		_spec.SetField(order.FieldUserScore, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedUserScore(); ok {
		_spec.AddField(order.FieldUserScore, field.TypeInt, value)
	}
	if value, ok := ou.mutation.UserComment(); ok {
		_spec.SetField(order.FieldUserComment, field.TypeString, value)
	}
	if value, ok := ou.mutation.DepositTime(); ok {
		_spec.SetField(order.FieldDepositTime, field.TypeTime, value)
	}
	if ou.mutation.DepositTimeCleared() {
		_spec.ClearField(order.FieldDepositTime, field.TypeTime)
	}
	if value, ok := ou.mutation.FinishTime(); ok {
		_spec.SetField(order.FieldFinishTime, field.TypeTime, value)
	}
	if ou.mutation.FinishTimeCleared() {
		_spec.ClearField(order.FieldFinishTime, field.TypeTime)
	}
	if value, ok := ou.mutation.UpdateTime(); ok {
		_spec.SetField(order.FieldUpdateTime, field.TypeTime, value)
	}
	if ou.mutation.CarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.CarTable,
			Columns: []string{order.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.CarTable,
			Columns: []string{order.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.BackgroundScenicAreaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.BackgroundScenicAreaTable,
			Columns: []string{order.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.BackgroundScenicAreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.BackgroundScenicAreaTable,
			Columns: []string{order.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.BillingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   order.BillingTable,
			Columns: []string{order.BillingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderbilling.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.BillingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   order.BillingTable,
			Columns: []string{order.BillingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderbilling.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.RefundCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.RefundTable,
			Columns: []string{order.RefundColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderrefund.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedRefundIDs(); len(nodes) > 0 && !ou.mutation.RefundCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.RefundTable,
			Columns: []string{order.RefundColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderrefund.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RefundIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.RefundTable,
			Columns: []string{order.RefundColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderrefund.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.SharingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   order.SharingTable,
			Columns: []string{order.SharingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ordersharing.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.SharingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   order.SharingTable,
			Columns: []string{order.SharingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ordersharing.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OrderUpdateOne is the builder for updating a single Order entity.
type OrderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderMutation
}

// SetType sets the "type" field.
func (ouo *OrderUpdateOne) SetType(i int) *OrderUpdateOne {
	ouo.mutation.ResetType()
	ouo.mutation.SetType(i)
	return ouo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableType(i *int) *OrderUpdateOne {
	if i != nil {
		ouo.SetType(*i)
	}
	return ouo
}

// AddType adds i to the "type" field.
func (ouo *OrderUpdateOne) AddType(i int) *OrderUpdateOne {
	ouo.mutation.AddType(i)
	return ouo
}

// SetPeriod sets the "period" field.
func (ouo *OrderUpdateOne) SetPeriod(i int) *OrderUpdateOne {
	ouo.mutation.ResetPeriod()
	ouo.mutation.SetPeriod(i)
	return ouo
}

// SetNillablePeriod sets the "period" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillablePeriod(i *int) *OrderUpdateOne {
	if i != nil {
		ouo.SetPeriod(*i)
	}
	return ouo
}

// AddPeriod adds i to the "period" field.
func (ouo *OrderUpdateOne) AddPeriod(i int) *OrderUpdateOne {
	ouo.mutation.AddPeriod(i)
	return ouo
}

// SetOrderNo sets the "order_no" field.
func (ouo *OrderUpdateOne) SetOrderNo(s string) *OrderUpdateOne {
	ouo.mutation.SetOrderNo(s)
	return ouo
}

// SetNillableOrderNo sets the "order_no" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableOrderNo(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetOrderNo(*s)
	}
	return ouo
}

// SetWxTxID sets the "wx_tx_id" field.
func (ouo *OrderUpdateOne) SetWxTxID(s string) *OrderUpdateOne {
	ouo.mutation.SetWxTxID(s)
	return ouo
}

// SetNillableWxTxID sets the "wx_tx_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableWxTxID(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetWxTxID(*s)
	}
	return ouo
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (ouo *OrderUpdateOne) SetScenicAreaID(i int) *OrderUpdateOne {
	ouo.mutation.SetScenicAreaID(i)
	return ouo
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableScenicAreaID(i *int) *OrderUpdateOne {
	if i != nil {
		ouo.SetScenicAreaID(*i)
	}
	return ouo
}

// SetMchID sets the "mch_id" field.
func (ouo *OrderUpdateOne) SetMchID(s string) *OrderUpdateOne {
	ouo.mutation.SetMchID(s)
	return ouo
}

// SetNillableMchID sets the "mch_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableMchID(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetMchID(*s)
	}
	return ouo
}

// SetScenicAreaName sets the "scenic_area_name" field.
func (ouo *OrderUpdateOne) SetScenicAreaName(s string) *OrderUpdateOne {
	ouo.mutation.SetScenicAreaName(s)
	return ouo
}

// SetNillableScenicAreaName sets the "scenic_area_name" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableScenicAreaName(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetScenicAreaName(*s)
	}
	return ouo
}

// SetUserID sets the "user_id" field.
func (ouo *OrderUpdateOne) SetUserID(i int) *OrderUpdateOne {
	ouo.mutation.ResetUserID()
	ouo.mutation.SetUserID(i)
	return ouo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableUserID(i *int) *OrderUpdateOne {
	if i != nil {
		ouo.SetUserID(*i)
	}
	return ouo
}

// AddUserID adds i to the "user_id" field.
func (ouo *OrderUpdateOne) AddUserID(i int) *OrderUpdateOne {
	ouo.mutation.AddUserID(i)
	return ouo
}

// SetOpenID sets the "open_id" field.
func (ouo *OrderUpdateOne) SetOpenID(s string) *OrderUpdateOne {
	ouo.mutation.SetOpenID(s)
	return ouo
}

// SetNillableOpenID sets the "open_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableOpenID(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetOpenID(*s)
	}
	return ouo
}

// SetNickname sets the "nickname" field.
func (ouo *OrderUpdateOne) SetNickname(s string) *OrderUpdateOne {
	ouo.mutation.SetNickname(s)
	return ouo
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableNickname(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetNickname(*s)
	}
	return ouo
}

// SetPhone sets the "phone" field.
func (ouo *OrderUpdateOne) SetPhone(s string) *OrderUpdateOne {
	ouo.mutation.SetPhone(s)
	return ouo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillablePhone(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetPhone(*s)
	}
	return ouo
}

// SetCarID sets the "car_id" field.
func (ouo *OrderUpdateOne) SetCarID(i int) *OrderUpdateOne {
	ouo.mutation.SetCarID(i)
	return ouo
}

// SetNillableCarID sets the "car_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCarID(i *int) *OrderUpdateOne {
	if i != nil {
		ouo.SetCarID(*i)
	}
	return ouo
}

// SetDeviceID sets the "device_id" field.
func (ouo *OrderUpdateOne) SetDeviceID(s string) *OrderUpdateOne {
	ouo.mutation.SetDeviceID(s)
	return ouo
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableDeviceID(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetDeviceID(*s)
	}
	return ouo
}

// SetCarName sets the "car_name" field.
func (ouo *OrderUpdateOne) SetCarName(s string) *OrderUpdateOne {
	ouo.mutation.SetCarName(s)
	return ouo
}

// SetNillableCarName sets the "car_name" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCarName(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetCarName(*s)
	}
	return ouo
}

// SetCarLicensePlate sets the "car_license_plate" field.
func (ouo *OrderUpdateOne) SetCarLicensePlate(s string) *OrderUpdateOne {
	ouo.mutation.SetCarLicensePlate(s)
	return ouo
}

// SetNillableCarLicensePlate sets the "car_license_plate" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCarLicensePlate(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetCarLicensePlate(*s)
	}
	return ouo
}

// SetModelID sets the "model_id" field.
func (ouo *OrderUpdateOne) SetModelID(i int) *OrderUpdateOne {
	ouo.mutation.ResetModelID()
	ouo.mutation.SetModelID(i)
	return ouo
}

// SetNillableModelID sets the "model_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableModelID(i *int) *OrderUpdateOne {
	if i != nil {
		ouo.SetModelID(*i)
	}
	return ouo
}

// AddModelID adds i to the "model_id" field.
func (ouo *OrderUpdateOne) AddModelID(i int) *OrderUpdateOne {
	ouo.mutation.AddModelID(i)
	return ouo
}

// SetModelName sets the "model_name" field.
func (ouo *OrderUpdateOne) SetModelName(s string) *OrderUpdateOne {
	ouo.mutation.SetModelName(s)
	return ouo
}

// SetNillableModelName sets the "model_name" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableModelName(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetModelName(*s)
	}
	return ouo
}

// SetCouponID sets the "coupon_id" field.
func (ouo *OrderUpdateOne) SetCouponID(i int) *OrderUpdateOne {
	ouo.mutation.ResetCouponID()
	ouo.mutation.SetCouponID(i)
	return ouo
}

// SetNillableCouponID sets the "coupon_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCouponID(i *int) *OrderUpdateOne {
	if i != nil {
		ouo.SetCouponID(*i)
	}
	return ouo
}

// AddCouponID adds i to the "coupon_id" field.
func (ouo *OrderUpdateOne) AddCouponID(i int) *OrderUpdateOne {
	ouo.mutation.AddCouponID(i)
	return ouo
}

// SetCouponName sets the "coupon_name" field.
func (ouo *OrderUpdateOne) SetCouponName(s string) *OrderUpdateOne {
	ouo.mutation.SetCouponName(s)
	return ouo
}

// SetNillableCouponName sets the "coupon_name" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCouponName(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetCouponName(*s)
	}
	return ouo
}

// SetUseMileageMeter sets the "use_mileage_meter" field.
func (ouo *OrderUpdateOne) SetUseMileageMeter(i int) *OrderUpdateOne {
	ouo.mutation.ResetUseMileageMeter()
	ouo.mutation.SetUseMileageMeter(i)
	return ouo
}

// SetNillableUseMileageMeter sets the "use_mileage_meter" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableUseMileageMeter(i *int) *OrderUpdateOne {
	if i != nil {
		ouo.SetUseMileageMeter(*i)
	}
	return ouo
}

// AddUseMileageMeter adds i to the "use_mileage_meter" field.
func (ouo *OrderUpdateOne) AddUseMileageMeter(i int) *OrderUpdateOne {
	ouo.mutation.AddUseMileageMeter(i)
	return ouo
}

// SetUseTimeSecond sets the "use_time_second" field.
func (ouo *OrderUpdateOne) SetUseTimeSecond(i int) *OrderUpdateOne {
	ouo.mutation.ResetUseTimeSecond()
	ouo.mutation.SetUseTimeSecond(i)
	return ouo
}

// SetNillableUseTimeSecond sets the "use_time_second" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableUseTimeSecond(i *int) *OrderUpdateOne {
	if i != nil {
		ouo.SetUseTimeSecond(*i)
	}
	return ouo
}

// AddUseTimeSecond adds i to the "use_time_second" field.
func (ouo *OrderUpdateOne) AddUseTimeSecond(i int) *OrderUpdateOne {
	ouo.mutation.AddUseTimeSecond(i)
	return ouo
}

// SetDepositAmount sets the "deposit_amount" field.
func (ouo *OrderUpdateOne) SetDepositAmount(i int) *OrderUpdateOne {
	ouo.mutation.ResetDepositAmount()
	ouo.mutation.SetDepositAmount(i)
	return ouo
}

// SetNillableDepositAmount sets the "deposit_amount" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableDepositAmount(i *int) *OrderUpdateOne {
	if i != nil {
		ouo.SetDepositAmount(*i)
	}
	return ouo
}

// AddDepositAmount adds i to the "deposit_amount" field.
func (ouo *OrderUpdateOne) AddDepositAmount(i int) *OrderUpdateOne {
	ouo.mutation.AddDepositAmount(i)
	return ouo
}

// SetOrderAmount sets the "order_amount" field.
func (ouo *OrderUpdateOne) SetOrderAmount(i int) *OrderUpdateOne {
	ouo.mutation.ResetOrderAmount()
	ouo.mutation.SetOrderAmount(i)
	return ouo
}

// SetNillableOrderAmount sets the "order_amount" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableOrderAmount(i *int) *OrderUpdateOne {
	if i != nil {
		ouo.SetOrderAmount(*i)
	}
	return ouo
}

// AddOrderAmount adds i to the "order_amount" field.
func (ouo *OrderUpdateOne) AddOrderAmount(i int) *OrderUpdateOne {
	ouo.mutation.AddOrderAmount(i)
	return ouo
}

// SetRefundedAmount sets the "refunded_amount" field.
func (ouo *OrderUpdateOne) SetRefundedAmount(i int) *OrderUpdateOne {
	ouo.mutation.ResetRefundedAmount()
	ouo.mutation.SetRefundedAmount(i)
	return ouo
}

// SetNillableRefundedAmount sets the "refunded_amount" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableRefundedAmount(i *int) *OrderUpdateOne {
	if i != nil {
		ouo.SetRefundedAmount(*i)
	}
	return ouo
}

// AddRefundedAmount adds i to the "refunded_amount" field.
func (ouo *OrderUpdateOne) AddRefundedAmount(i int) *OrderUpdateOne {
	ouo.mutation.AddRefundedAmount(i)
	return ouo
}

// SetCouponAmount sets the "coupon_amount" field.
func (ouo *OrderUpdateOne) SetCouponAmount(i int) *OrderUpdateOne {
	ouo.mutation.ResetCouponAmount()
	ouo.mutation.SetCouponAmount(i)
	return ouo
}

// SetNillableCouponAmount sets the "coupon_amount" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCouponAmount(i *int) *OrderUpdateOne {
	if i != nil {
		ouo.SetCouponAmount(*i)
	}
	return ouo
}

// AddCouponAmount adds i to the "coupon_amount" field.
func (ouo *OrderUpdateOne) AddCouponAmount(i int) *OrderUpdateOne {
	ouo.mutation.AddCouponAmount(i)
	return ouo
}

// SetOrderState sets the "order_state" field.
func (ouo *OrderUpdateOne) SetOrderState(i int) *OrderUpdateOne {
	ouo.mutation.ResetOrderState()
	ouo.mutation.SetOrderState(i)
	return ouo
}

// SetNillableOrderState sets the "order_state" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableOrderState(i *int) *OrderUpdateOne {
	if i != nil {
		ouo.SetOrderState(*i)
	}
	return ouo
}

// AddOrderState adds i to the "order_state" field.
func (ouo *OrderUpdateOne) AddOrderState(i int) *OrderUpdateOne {
	ouo.mutation.AddOrderState(i)
	return ouo
}

// SetDepositState sets the "deposit_state" field.
func (ouo *OrderUpdateOne) SetDepositState(i int) *OrderUpdateOne {
	ouo.mutation.ResetDepositState()
	ouo.mutation.SetDepositState(i)
	return ouo
}

// SetNillableDepositState sets the "deposit_state" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableDepositState(i *int) *OrderUpdateOne {
	if i != nil {
		ouo.SetDepositState(*i)
	}
	return ouo
}

// AddDepositState adds i to the "deposit_state" field.
func (ouo *OrderUpdateOne) AddDepositState(i int) *OrderUpdateOne {
	ouo.mutation.AddDepositState(i)
	return ouo
}

// SetEmergencyState sets the "emergency_state" field.
func (ouo *OrderUpdateOne) SetEmergencyState(i int) *OrderUpdateOne {
	ouo.mutation.ResetEmergencyState()
	ouo.mutation.SetEmergencyState(i)
	return ouo
}

// SetNillableEmergencyState sets the "emergency_state" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableEmergencyState(i *int) *OrderUpdateOne {
	if i != nil {
		ouo.SetEmergencyState(*i)
	}
	return ouo
}

// AddEmergencyState adds i to the "emergency_state" field.
func (ouo *OrderUpdateOne) AddEmergencyState(i int) *OrderUpdateOne {
	ouo.mutation.AddEmergencyState(i)
	return ouo
}

// SetIsTestOrder sets the "is_test_order" field.
func (ouo *OrderUpdateOne) SetIsTestOrder(b bool) *OrderUpdateOne {
	ouo.mutation.SetIsTestOrder(b)
	return ouo
}

// SetNillableIsTestOrder sets the "is_test_order" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableIsTestOrder(b *bool) *OrderUpdateOne {
	if b != nil {
		ouo.SetIsTestOrder(*b)
	}
	return ouo
}

// SetIsCancel sets the "is_cancel" field.
func (ouo *OrderUpdateOne) SetIsCancel(b bool) *OrderUpdateOne {
	ouo.mutation.SetIsCancel(b)
	return ouo
}

// SetNillableIsCancel sets the "is_cancel" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableIsCancel(b *bool) *OrderUpdateOne {
	if b != nil {
		ouo.SetIsCancel(*b)
	}
	return ouo
}

// SetIsProfitSharing sets the "is_profit_sharing" field.
func (ouo *OrderUpdateOne) SetIsProfitSharing(b bool) *OrderUpdateOne {
	ouo.mutation.SetIsProfitSharing(b)
	return ouo
}

// SetNillableIsProfitSharing sets the "is_profit_sharing" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableIsProfitSharing(b *bool) *OrderUpdateOne {
	if b != nil {
		ouo.SetIsProfitSharing(*b)
	}
	return ouo
}

// SetRemark sets the "remark" field.
func (ouo *OrderUpdateOne) SetRemark(s string) *OrderUpdateOne {
	ouo.mutation.SetRemark(s)
	return ouo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableRemark(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetRemark(*s)
	}
	return ouo
}

// SetUserScore sets the "user_score" field.
func (ouo *OrderUpdateOne) SetUserScore(i int) *OrderUpdateOne {
	ouo.mutation.ResetUserScore()
	ouo.mutation.SetUserScore(i)
	return ouo
}

// SetNillableUserScore sets the "user_score" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableUserScore(i *int) *OrderUpdateOne {
	if i != nil {
		ouo.SetUserScore(*i)
	}
	return ouo
}

// AddUserScore adds i to the "user_score" field.
func (ouo *OrderUpdateOne) AddUserScore(i int) *OrderUpdateOne {
	ouo.mutation.AddUserScore(i)
	return ouo
}

// SetUserComment sets the "user_comment" field.
func (ouo *OrderUpdateOne) SetUserComment(s string) *OrderUpdateOne {
	ouo.mutation.SetUserComment(s)
	return ouo
}

// SetNillableUserComment sets the "user_comment" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableUserComment(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetUserComment(*s)
	}
	return ouo
}

// SetDepositTime sets the "deposit_time" field.
func (ouo *OrderUpdateOne) SetDepositTime(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetDepositTime(t)
	return ouo
}

// SetNillableDepositTime sets the "deposit_time" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableDepositTime(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetDepositTime(*t)
	}
	return ouo
}

// ClearDepositTime clears the value of the "deposit_time" field.
func (ouo *OrderUpdateOne) ClearDepositTime() *OrderUpdateOne {
	ouo.mutation.ClearDepositTime()
	return ouo
}

// SetFinishTime sets the "finish_time" field.
func (ouo *OrderUpdateOne) SetFinishTime(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetFinishTime(t)
	return ouo
}

// SetNillableFinishTime sets the "finish_time" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableFinishTime(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetFinishTime(*t)
	}
	return ouo
}

// ClearFinishTime clears the value of the "finish_time" field.
func (ouo *OrderUpdateOne) ClearFinishTime() *OrderUpdateOne {
	ouo.mutation.ClearFinishTime()
	return ouo
}

// SetUpdateTime sets the "update_time" field.
func (ouo *OrderUpdateOne) SetUpdateTime(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetUpdateTime(t)
	return ouo
}

// SetCar sets the "car" edge to the Car entity.
func (ouo *OrderUpdateOne) SetCar(c *Car) *OrderUpdateOne {
	return ouo.SetCarID(c.ID)
}

// SetBackgroundScenicAreaID sets the "background_scenic_area" edge to the ScenicArea entity by ID.
func (ouo *OrderUpdateOne) SetBackgroundScenicAreaID(id int) *OrderUpdateOne {
	ouo.mutation.SetBackgroundScenicAreaID(id)
	return ouo
}

// SetBackgroundScenicArea sets the "background_scenic_area" edge to the ScenicArea entity.
func (ouo *OrderUpdateOne) SetBackgroundScenicArea(s *ScenicArea) *OrderUpdateOne {
	return ouo.SetBackgroundScenicAreaID(s.ID)
}

// SetBillingID sets the "billing" edge to the OrderBilling entity by ID.
func (ouo *OrderUpdateOne) SetBillingID(id int) *OrderUpdateOne {
	ouo.mutation.SetBillingID(id)
	return ouo
}

// SetNillableBillingID sets the "billing" edge to the OrderBilling entity by ID if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableBillingID(id *int) *OrderUpdateOne {
	if id != nil {
		ouo = ouo.SetBillingID(*id)
	}
	return ouo
}

// SetBilling sets the "billing" edge to the OrderBilling entity.
func (ouo *OrderUpdateOne) SetBilling(o *OrderBilling) *OrderUpdateOne {
	return ouo.SetBillingID(o.ID)
}

// AddRefundIDs adds the "refund" edge to the OrderRefund entity by IDs.
func (ouo *OrderUpdateOne) AddRefundIDs(ids ...int) *OrderUpdateOne {
	ouo.mutation.AddRefundIDs(ids...)
	return ouo
}

// AddRefund adds the "refund" edges to the OrderRefund entity.
func (ouo *OrderUpdateOne) AddRefund(o ...*OrderRefund) *OrderUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddRefundIDs(ids...)
}

// SetSharingID sets the "sharing" edge to the OrderSharing entity by ID.
func (ouo *OrderUpdateOne) SetSharingID(id int) *OrderUpdateOne {
	ouo.mutation.SetSharingID(id)
	return ouo
}

// SetNillableSharingID sets the "sharing" edge to the OrderSharing entity by ID if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableSharingID(id *int) *OrderUpdateOne {
	if id != nil {
		ouo = ouo.SetSharingID(*id)
	}
	return ouo
}

// SetSharing sets the "sharing" edge to the OrderSharing entity.
func (ouo *OrderUpdateOne) SetSharing(o *OrderSharing) *OrderUpdateOne {
	return ouo.SetSharingID(o.ID)
}

// Mutation returns the OrderMutation object of the builder.
func (ouo *OrderUpdateOne) Mutation() *OrderMutation {
	return ouo.mutation
}

// ClearCar clears the "car" edge to the Car entity.
func (ouo *OrderUpdateOne) ClearCar() *OrderUpdateOne {
	ouo.mutation.ClearCar()
	return ouo
}

// ClearBackgroundScenicArea clears the "background_scenic_area" edge to the ScenicArea entity.
func (ouo *OrderUpdateOne) ClearBackgroundScenicArea() *OrderUpdateOne {
	ouo.mutation.ClearBackgroundScenicArea()
	return ouo
}

// ClearBilling clears the "billing" edge to the OrderBilling entity.
func (ouo *OrderUpdateOne) ClearBilling() *OrderUpdateOne {
	ouo.mutation.ClearBilling()
	return ouo
}

// ClearRefund clears all "refund" edges to the OrderRefund entity.
func (ouo *OrderUpdateOne) ClearRefund() *OrderUpdateOne {
	ouo.mutation.ClearRefund()
	return ouo
}

// RemoveRefundIDs removes the "refund" edge to OrderRefund entities by IDs.
func (ouo *OrderUpdateOne) RemoveRefundIDs(ids ...int) *OrderUpdateOne {
	ouo.mutation.RemoveRefundIDs(ids...)
	return ouo
}

// RemoveRefund removes "refund" edges to OrderRefund entities.
func (ouo *OrderUpdateOne) RemoveRefund(o ...*OrderRefund) *OrderUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemoveRefundIDs(ids...)
}

// ClearSharing clears the "sharing" edge to the OrderSharing entity.
func (ouo *OrderUpdateOne) ClearSharing() *OrderUpdateOne {
	ouo.mutation.ClearSharing()
	return ouo
}

// Where appends a list predicates to the OrderUpdate builder.
func (ouo *OrderUpdateOne) Where(ps ...predicate.Order) *OrderUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrderUpdateOne) Select(field string, fields ...string) *OrderUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Order entity.
func (ouo *OrderUpdateOne) Save(ctx context.Context) (*Order, error) {
	ouo.defaults()
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrderUpdateOne) SaveX(ctx context.Context) *Order {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrderUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrderUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouo *OrderUpdateOne) defaults() {
	if _, ok := ouo.mutation.UpdateTime(); !ok {
		v := order.UpdateDefaultUpdateTime()
		ouo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouo *OrderUpdateOne) check() error {
	if ouo.mutation.CarCleared() && len(ouo.mutation.CarIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Order.car"`)
	}
	if ouo.mutation.BackgroundScenicAreaCleared() && len(ouo.mutation.BackgroundScenicAreaIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Order.background_scenic_area"`)
	}
	return nil
}

func (ouo *OrderUpdateOne) sqlSave(ctx context.Context) (_node *Order, err error) {
	if err := ouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Order.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, order.FieldID)
		for _, f := range fields {
			if !order.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != order.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.GetType(); ok {
		_spec.SetField(order.FieldType, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedType(); ok {
		_spec.AddField(order.FieldType, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.Period(); ok {
		_spec.SetField(order.FieldPeriod, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedPeriod(); ok {
		_spec.AddField(order.FieldPeriod, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.OrderNo(); ok {
		_spec.SetField(order.FieldOrderNo, field.TypeString, value)
	}
	if value, ok := ouo.mutation.WxTxID(); ok {
		_spec.SetField(order.FieldWxTxID, field.TypeString, value)
	}
	if value, ok := ouo.mutation.MchID(); ok {
		_spec.SetField(order.FieldMchID, field.TypeString, value)
	}
	if value, ok := ouo.mutation.ScenicAreaName(); ok {
		_spec.SetField(order.FieldScenicAreaName, field.TypeString, value)
	}
	if value, ok := ouo.mutation.UserID(); ok {
		_spec.SetField(order.FieldUserID, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedUserID(); ok {
		_spec.AddField(order.FieldUserID, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.OpenID(); ok {
		_spec.SetField(order.FieldOpenID, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Nickname(); ok {
		_spec.SetField(order.FieldNickname, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Phone(); ok {
		_spec.SetField(order.FieldPhone, field.TypeString, value)
	}
	if value, ok := ouo.mutation.DeviceID(); ok {
		_spec.SetField(order.FieldDeviceID, field.TypeString, value)
	}
	if value, ok := ouo.mutation.CarName(); ok {
		_spec.SetField(order.FieldCarName, field.TypeString, value)
	}
	if value, ok := ouo.mutation.CarLicensePlate(); ok {
		_spec.SetField(order.FieldCarLicensePlate, field.TypeString, value)
	}
	if value, ok := ouo.mutation.ModelID(); ok {
		_spec.SetField(order.FieldModelID, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedModelID(); ok {
		_spec.AddField(order.FieldModelID, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.ModelName(); ok {
		_spec.SetField(order.FieldModelName, field.TypeString, value)
	}
	if value, ok := ouo.mutation.CouponID(); ok {
		_spec.SetField(order.FieldCouponID, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedCouponID(); ok {
		_spec.AddField(order.FieldCouponID, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.CouponName(); ok {
		_spec.SetField(order.FieldCouponName, field.TypeString, value)
	}
	if value, ok := ouo.mutation.UseMileageMeter(); ok {
		_spec.SetField(order.FieldUseMileageMeter, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedUseMileageMeter(); ok {
		_spec.AddField(order.FieldUseMileageMeter, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.UseTimeSecond(); ok {
		_spec.SetField(order.FieldUseTimeSecond, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedUseTimeSecond(); ok {
		_spec.AddField(order.FieldUseTimeSecond, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.DepositAmount(); ok {
		_spec.SetField(order.FieldDepositAmount, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedDepositAmount(); ok {
		_spec.AddField(order.FieldDepositAmount, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.OrderAmount(); ok {
		_spec.SetField(order.FieldOrderAmount, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedOrderAmount(); ok {
		_spec.AddField(order.FieldOrderAmount, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.RefundedAmount(); ok {
		_spec.SetField(order.FieldRefundedAmount, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedRefundedAmount(); ok {
		_spec.AddField(order.FieldRefundedAmount, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.CouponAmount(); ok {
		_spec.SetField(order.FieldCouponAmount, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedCouponAmount(); ok {
		_spec.AddField(order.FieldCouponAmount, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.OrderState(); ok {
		_spec.SetField(order.FieldOrderState, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedOrderState(); ok {
		_spec.AddField(order.FieldOrderState, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.DepositState(); ok {
		_spec.SetField(order.FieldDepositState, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedDepositState(); ok {
		_spec.AddField(order.FieldDepositState, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.EmergencyState(); ok {
		_spec.SetField(order.FieldEmergencyState, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedEmergencyState(); ok {
		_spec.AddField(order.FieldEmergencyState, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.IsTestOrder(); ok {
		_spec.SetField(order.FieldIsTestOrder, field.TypeBool, value)
	}
	if value, ok := ouo.mutation.IsCancel(); ok {
		_spec.SetField(order.FieldIsCancel, field.TypeBool, value)
	}
	if value, ok := ouo.mutation.IsProfitSharing(); ok {
		_spec.SetField(order.FieldIsProfitSharing, field.TypeBool, value)
	}
	if value, ok := ouo.mutation.Remark(); ok {
		_spec.SetField(order.FieldRemark, field.TypeString, value)
	}
	if value, ok := ouo.mutation.UserScore(); ok {
		_spec.SetField(order.FieldUserScore, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedUserScore(); ok {
		_spec.AddField(order.FieldUserScore, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.UserComment(); ok {
		_spec.SetField(order.FieldUserComment, field.TypeString, value)
	}
	if value, ok := ouo.mutation.DepositTime(); ok {
		_spec.SetField(order.FieldDepositTime, field.TypeTime, value)
	}
	if ouo.mutation.DepositTimeCleared() {
		_spec.ClearField(order.FieldDepositTime, field.TypeTime)
	}
	if value, ok := ouo.mutation.FinishTime(); ok {
		_spec.SetField(order.FieldFinishTime, field.TypeTime, value)
	}
	if ouo.mutation.FinishTimeCleared() {
		_spec.ClearField(order.FieldFinishTime, field.TypeTime)
	}
	if value, ok := ouo.mutation.UpdateTime(); ok {
		_spec.SetField(order.FieldUpdateTime, field.TypeTime, value)
	}
	if ouo.mutation.CarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.CarTable,
			Columns: []string{order.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.CarTable,
			Columns: []string{order.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.BackgroundScenicAreaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.BackgroundScenicAreaTable,
			Columns: []string{order.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.BackgroundScenicAreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.BackgroundScenicAreaTable,
			Columns: []string{order.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.BillingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   order.BillingTable,
			Columns: []string{order.BillingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderbilling.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.BillingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   order.BillingTable,
			Columns: []string{order.BillingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderbilling.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.RefundCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.RefundTable,
			Columns: []string{order.RefundColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderrefund.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedRefundIDs(); len(nodes) > 0 && !ouo.mutation.RefundCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.RefundTable,
			Columns: []string{order.RefundColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderrefund.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RefundIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.RefundTable,
			Columns: []string{order.RefundColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderrefund.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.SharingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   order.SharingTable,
			Columns: []string{order.SharingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ordersharing.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.SharingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   order.SharingTable,
			Columns: []string{order.SharingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ordersharing.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Order{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
