// Code generated by ent, DO NOT EDIT.

package sshaccount

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldLTE(FieldID, id))
}

// DeleteTime applies equality check predicate on the "delete_time" field. It's identical to DeleteTimeEQ.
func DeleteTime(v time.Time) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldEQ(FieldDeleteTime, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldEQ(FieldType, v))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldEQ(FieldUsername, v))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldEQ(FieldPassword, v))
}

// ScenicAreaID applies equality check predicate on the "scenic_area_id" field. It's identical to ScenicAreaIDEQ.
func ScenicAreaID(v int) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldEQ(FieldScenicAreaID, v))
}

// CarID applies equality check predicate on the "car_id" field. It's identical to CarIDEQ.
func CarID(v int) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldEQ(FieldCarID, v))
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v int) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldEQ(FieldState, v))
}

// UseTime applies equality check predicate on the "use_time" field. It's identical to UseTimeEQ.
func UseTime(v time.Time) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldEQ(FieldUseTime, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldEQ(FieldUpdateTime, v))
}

// DeleteTimeEQ applies the EQ predicate on the "delete_time" field.
func DeleteTimeEQ(v time.Time) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldEQ(FieldDeleteTime, v))
}

// DeleteTimeNEQ applies the NEQ predicate on the "delete_time" field.
func DeleteTimeNEQ(v time.Time) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldNEQ(FieldDeleteTime, v))
}

// DeleteTimeIn applies the In predicate on the "delete_time" field.
func DeleteTimeIn(vs ...time.Time) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldIn(FieldDeleteTime, vs...))
}

// DeleteTimeNotIn applies the NotIn predicate on the "delete_time" field.
func DeleteTimeNotIn(vs ...time.Time) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldNotIn(FieldDeleteTime, vs...))
}

// DeleteTimeGT applies the GT predicate on the "delete_time" field.
func DeleteTimeGT(v time.Time) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldGT(FieldDeleteTime, v))
}

// DeleteTimeGTE applies the GTE predicate on the "delete_time" field.
func DeleteTimeGTE(v time.Time) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldGTE(FieldDeleteTime, v))
}

// DeleteTimeLT applies the LT predicate on the "delete_time" field.
func DeleteTimeLT(v time.Time) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldLT(FieldDeleteTime, v))
}

// DeleteTimeLTE applies the LTE predicate on the "delete_time" field.
func DeleteTimeLTE(v time.Time) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldLTE(FieldDeleteTime, v))
}

// DeleteTimeIsNil applies the IsNil predicate on the "delete_time" field.
func DeleteTimeIsNil() predicate.SshAccount {
	return predicate.SshAccount(sql.FieldIsNull(FieldDeleteTime))
}

// DeleteTimeNotNil applies the NotNil predicate on the "delete_time" field.
func DeleteTimeNotNil() predicate.SshAccount {
	return predicate.SshAccount(sql.FieldNotNull(FieldDeleteTime))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldContainsFold(FieldType, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldContainsFold(FieldUsername, v))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldContainsFold(FieldPassword, v))
}

// ScenicAreaIDEQ applies the EQ predicate on the "scenic_area_id" field.
func ScenicAreaIDEQ(v int) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldEQ(FieldScenicAreaID, v))
}

// ScenicAreaIDNEQ applies the NEQ predicate on the "scenic_area_id" field.
func ScenicAreaIDNEQ(v int) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldNEQ(FieldScenicAreaID, v))
}

// ScenicAreaIDIn applies the In predicate on the "scenic_area_id" field.
func ScenicAreaIDIn(vs ...int) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldIn(FieldScenicAreaID, vs...))
}

// ScenicAreaIDNotIn applies the NotIn predicate on the "scenic_area_id" field.
func ScenicAreaIDNotIn(vs ...int) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldNotIn(FieldScenicAreaID, vs...))
}

// ScenicAreaIDGT applies the GT predicate on the "scenic_area_id" field.
func ScenicAreaIDGT(v int) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldGT(FieldScenicAreaID, v))
}

// ScenicAreaIDGTE applies the GTE predicate on the "scenic_area_id" field.
func ScenicAreaIDGTE(v int) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldGTE(FieldScenicAreaID, v))
}

// ScenicAreaIDLT applies the LT predicate on the "scenic_area_id" field.
func ScenicAreaIDLT(v int) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldLT(FieldScenicAreaID, v))
}

// ScenicAreaIDLTE applies the LTE predicate on the "scenic_area_id" field.
func ScenicAreaIDLTE(v int) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldLTE(FieldScenicAreaID, v))
}

// ScenicAreaIDIsNil applies the IsNil predicate on the "scenic_area_id" field.
func ScenicAreaIDIsNil() predicate.SshAccount {
	return predicate.SshAccount(sql.FieldIsNull(FieldScenicAreaID))
}

// ScenicAreaIDNotNil applies the NotNil predicate on the "scenic_area_id" field.
func ScenicAreaIDNotNil() predicate.SshAccount {
	return predicate.SshAccount(sql.FieldNotNull(FieldScenicAreaID))
}

// CarIDEQ applies the EQ predicate on the "car_id" field.
func CarIDEQ(v int) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldEQ(FieldCarID, v))
}

// CarIDNEQ applies the NEQ predicate on the "car_id" field.
func CarIDNEQ(v int) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldNEQ(FieldCarID, v))
}

// CarIDIn applies the In predicate on the "car_id" field.
func CarIDIn(vs ...int) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldIn(FieldCarID, vs...))
}

// CarIDNotIn applies the NotIn predicate on the "car_id" field.
func CarIDNotIn(vs ...int) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldNotIn(FieldCarID, vs...))
}

// CarIDGT applies the GT predicate on the "car_id" field.
func CarIDGT(v int) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldGT(FieldCarID, v))
}

// CarIDGTE applies the GTE predicate on the "car_id" field.
func CarIDGTE(v int) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldGTE(FieldCarID, v))
}

// CarIDLT applies the LT predicate on the "car_id" field.
func CarIDLT(v int) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldLT(FieldCarID, v))
}

// CarIDLTE applies the LTE predicate on the "car_id" field.
func CarIDLTE(v int) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldLTE(FieldCarID, v))
}

// CarIDIsNil applies the IsNil predicate on the "car_id" field.
func CarIDIsNil() predicate.SshAccount {
	return predicate.SshAccount(sql.FieldIsNull(FieldCarID))
}

// CarIDNotNil applies the NotNil predicate on the "car_id" field.
func CarIDNotNil() predicate.SshAccount {
	return predicate.SshAccount(sql.FieldNotNull(FieldCarID))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v int) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v int) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...int) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...int) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v int) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v int) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v int) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v int) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldLTE(FieldState, v))
}

// UseTimeEQ applies the EQ predicate on the "use_time" field.
func UseTimeEQ(v time.Time) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldEQ(FieldUseTime, v))
}

// UseTimeNEQ applies the NEQ predicate on the "use_time" field.
func UseTimeNEQ(v time.Time) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldNEQ(FieldUseTime, v))
}

// UseTimeIn applies the In predicate on the "use_time" field.
func UseTimeIn(vs ...time.Time) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldIn(FieldUseTime, vs...))
}

// UseTimeNotIn applies the NotIn predicate on the "use_time" field.
func UseTimeNotIn(vs ...time.Time) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldNotIn(FieldUseTime, vs...))
}

// UseTimeGT applies the GT predicate on the "use_time" field.
func UseTimeGT(v time.Time) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldGT(FieldUseTime, v))
}

// UseTimeGTE applies the GTE predicate on the "use_time" field.
func UseTimeGTE(v time.Time) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldGTE(FieldUseTime, v))
}

// UseTimeLT applies the LT predicate on the "use_time" field.
func UseTimeLT(v time.Time) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldLT(FieldUseTime, v))
}

// UseTimeLTE applies the LTE predicate on the "use_time" field.
func UseTimeLTE(v time.Time) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldLTE(FieldUseTime, v))
}

// UseTimeIsNil applies the IsNil predicate on the "use_time" field.
func UseTimeIsNil() predicate.SshAccount {
	return predicate.SshAccount(sql.FieldIsNull(FieldUseTime))
}

// UseTimeNotNil applies the NotNil predicate on the "use_time" field.
func UseTimeNotNil() predicate.SshAccount {
	return predicate.SshAccount(sql.FieldNotNull(FieldUseTime))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.SshAccount {
	return predicate.SshAccount(sql.FieldLTE(FieldUpdateTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SshAccount) predicate.SshAccount {
	return predicate.SshAccount(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SshAccount) predicate.SshAccount {
	return predicate.SshAccount(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SshAccount) predicate.SshAccount {
	return predicate.SshAccount(sql.NotPredicates(p))
}
