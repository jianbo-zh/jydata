// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/carsoperatelog"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
)

// CarsOperateLogDelete is the builder for deleting a CarsOperateLog entity.
type CarsOperateLogDelete struct {
	config
	hooks    []Hook
	mutation *CarsOperateLogMutation
}

// Where appends a list predicates to the CarsOperateLogDelete builder.
func (cold *CarsOperateLogDelete) Where(ps ...predicate.CarsOperateLog) *CarsOperateLogDelete {
	cold.mutation.Where(ps...)
	return cold
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (cold *CarsOperateLogDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, cold.sqlExec, cold.mutation, cold.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (cold *CarsOperateLogDelete) ExecX(ctx context.Context) int {
	n, err := cold.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (cold *CarsOperateLogDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(carsoperatelog.Table, sqlgraph.NewFieldSpec(carsoperatelog.FieldID, field.TypeInt))
	if ps := cold.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, cold.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	cold.mutation.done = true
	return affected, err
}

// CarsOperateLogDeleteOne is the builder for deleting a single CarsOperateLog entity.
type CarsOperateLogDeleteOne struct {
	cold *CarsOperateLogDelete
}

// Where appends a list predicates to the CarsOperateLogDelete builder.
func (coldo *CarsOperateLogDeleteOne) Where(ps ...predicate.CarsOperateLog) *CarsOperateLogDeleteOne {
	coldo.cold.mutation.Where(ps...)
	return coldo
}

// Exec executes the deletion query.
func (coldo *CarsOperateLogDeleteOne) Exec(ctx context.Context) error {
	n, err := coldo.cold.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{carsoperatelog.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (coldo *CarsOperateLogDeleteOne) ExecX(ctx context.Context) {
	if err := coldo.Exec(ctx); err != nil {
		panic(err)
	}
}
