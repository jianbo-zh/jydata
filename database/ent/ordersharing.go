// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jianbo-zh/jydata/database/ent/order"
	"github.com/jianbo-zh/jydata/database/ent/ordersharing"
	"github.com/jianbo-zh/jydata/database/schema/types"
)

// OrderSharing is the model entity for the OrderSharing schema.
type OrderSharing struct {
	config `json:"-"`
	// ID of the ent.
	// ID
	ID int `json:"id,omitempty"`
	// 订单ID
	OrderID int `json:"order_id,omitempty"`
	// 分润单号
	SharingNo string `json:"sharing_no,omitempty"`
	// 分润单号
	WxSharingID string `json:"wx_sharing_id,omitempty"`
	// 分润金额
	SharingAmount int `json:"sharing_amount,omitempty"`
	// 分润接收者
	Receivers []types.OrderSharingReceiver `json:"receivers,omitempty"`
	// 分润状态(1-待分润、2-已完成)
	State int `json:"state,omitempty"`
	// 备注
	Remark string `json:"remark,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderSharingQuery when eager-loading is set.
	Edges        OrderSharingEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OrderSharingEdges holds the relations/edges for other nodes in the graph.
type OrderSharingEdges struct {
	// Order holds the value of the order edge.
	Order *Order `json:"order,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OrderOrErr returns the Order value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderSharingEdges) OrderOrErr() (*Order, error) {
	if e.Order != nil {
		return e.Order, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: order.Label}
	}
	return nil, &NotLoadedError{edge: "order"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderSharing) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ordersharing.FieldReceivers:
			values[i] = new([]byte)
		case ordersharing.FieldID, ordersharing.FieldOrderID, ordersharing.FieldSharingAmount, ordersharing.FieldState:
			values[i] = new(sql.NullInt64)
		case ordersharing.FieldSharingNo, ordersharing.FieldWxSharingID, ordersharing.FieldRemark:
			values[i] = new(sql.NullString)
		case ordersharing.FieldCreateTime, ordersharing.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderSharing fields.
func (os *OrderSharing) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ordersharing.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			os.ID = int(value.Int64)
		case ordersharing.FieldOrderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value.Valid {
				os.OrderID = int(value.Int64)
			}
		case ordersharing.FieldSharingNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sharing_no", values[i])
			} else if value.Valid {
				os.SharingNo = value.String
			}
		case ordersharing.FieldWxSharingID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field wx_sharing_id", values[i])
			} else if value.Valid {
				os.WxSharingID = value.String
			}
		case ordersharing.FieldSharingAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sharing_amount", values[i])
			} else if value.Valid {
				os.SharingAmount = int(value.Int64)
			}
		case ordersharing.FieldReceivers:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field receivers", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &os.Receivers); err != nil {
					return fmt.Errorf("unmarshal field receivers: %w", err)
				}
			}
		case ordersharing.FieldState:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				os.State = int(value.Int64)
			}
		case ordersharing.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				os.Remark = value.String
			}
		case ordersharing.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				os.CreateTime = value.Time
			}
		case ordersharing.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				os.UpdateTime = value.Time
			}
		default:
			os.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OrderSharing.
// This includes values selected through modifiers, order, etc.
func (os *OrderSharing) Value(name string) (ent.Value, error) {
	return os.selectValues.Get(name)
}

// QueryOrder queries the "order" edge of the OrderSharing entity.
func (os *OrderSharing) QueryOrder() *OrderQuery {
	return NewOrderSharingClient(os.config).QueryOrder(os)
}

// Update returns a builder for updating this OrderSharing.
// Note that you need to call OrderSharing.Unwrap() before calling this method if this OrderSharing
// was returned from a transaction, and the transaction was committed or rolled back.
func (os *OrderSharing) Update() *OrderSharingUpdateOne {
	return NewOrderSharingClient(os.config).UpdateOne(os)
}

// Unwrap unwraps the OrderSharing entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (os *OrderSharing) Unwrap() *OrderSharing {
	_tx, ok := os.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrderSharing is not a transactional entity")
	}
	os.config.driver = _tx.drv
	return os
}

// String implements the fmt.Stringer.
func (os *OrderSharing) String() string {
	var builder strings.Builder
	builder.WriteString("OrderSharing(")
	builder.WriteString(fmt.Sprintf("id=%v, ", os.ID))
	builder.WriteString("order_id=")
	builder.WriteString(fmt.Sprintf("%v", os.OrderID))
	builder.WriteString(", ")
	builder.WriteString("sharing_no=")
	builder.WriteString(os.SharingNo)
	builder.WriteString(", ")
	builder.WriteString("wx_sharing_id=")
	builder.WriteString(os.WxSharingID)
	builder.WriteString(", ")
	builder.WriteString("sharing_amount=")
	builder.WriteString(fmt.Sprintf("%v", os.SharingAmount))
	builder.WriteString(", ")
	builder.WriteString("receivers=")
	builder.WriteString(fmt.Sprintf("%v", os.Receivers))
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(fmt.Sprintf("%v", os.State))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(os.Remark)
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(os.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(os.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// OrderSharings is a parsable slice of OrderSharing.
type OrderSharings []*OrderSharing
