// Code generated by ent, DO NOT EDIT.

package carsflight

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the carsflight type in the database.
	Label = "cars_flight"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldScenicAreaID holds the string denoting the scenic_area_id field in the database.
	FieldScenicAreaID = "scenic_area_id"
	// FieldFlightNo holds the string denoting the flight_no field in the database.
	FieldFlightNo = "flight_no"
	// FieldCarID holds the string denoting the car_id field in the database.
	FieldCarID = "car_id"
	// FieldDeviceID holds the string denoting the device_id field in the database.
	FieldDeviceID = "device_id"
	// FieldCarName holds the string denoting the car_name field in the database.
	FieldCarName = "car_name"
	// FieldRouteID holds the string denoting the route_id field in the database.
	FieldRouteID = "route_id"
	// FieldRouteName holds the string denoting the route_name field in the database.
	FieldRouteName = "route_name"
	// FieldSeatsNum holds the string denoting the seats_num field in the database.
	FieldSeatsNum = "seats_num"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldCurrStopID holds the string denoting the curr_stop_id field in the database.
	FieldCurrStopID = "curr_stop_id"
	// FieldStopIds holds the string denoting the stop_ids field in the database.
	FieldStopIds = "stop_ids"
	// FieldPassIds holds the string denoting the pass_ids field in the database.
	FieldPassIds = "pass_ids"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldStopStock holds the string denoting the stop_stock field in the database.
	FieldStopStock = "stop_stock"
	// FieldExtendYokeeID holds the string denoting the extend_yokee_id field in the database.
	FieldExtendYokeeID = "extend_yokee_id"
	// FieldDepartureTime holds the string denoting the departure_time field in the database.
	FieldDepartureTime = "departure_time"
	// FieldFinishTime holds the string denoting the finish_time field in the database.
	FieldFinishTime = "finish_time"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// Table holds the table name of the carsflight in the database.
	Table = "cars_flights"
)

// Columns holds all SQL columns for carsflight fields.
var Columns = []string{
	FieldID,
	FieldScenicAreaID,
	FieldFlightNo,
	FieldCarID,
	FieldDeviceID,
	FieldCarName,
	FieldRouteID,
	FieldRouteName,
	FieldSeatsNum,
	FieldState,
	FieldCurrStopID,
	FieldStopIds,
	FieldPassIds,
	FieldRemark,
	FieldStopStock,
	FieldExtendYokeeID,
	FieldDepartureTime,
	FieldFinishTime,
	FieldCreateTime,
	FieldUpdateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultDeviceID holds the default value on creation for the "device_id" field.
	DefaultDeviceID string
	// DefaultState holds the default value on creation for the "state" field.
	DefaultState int
	// DefaultCurrStopID holds the default value on creation for the "curr_stop_id" field.
	DefaultCurrStopID int
	// DefaultStopIds holds the default value on creation for the "stop_ids" field.
	DefaultStopIds []int
	// DefaultPassIds holds the default value on creation for the "pass_ids" field.
	DefaultPassIds []int
	// DefaultRemark holds the default value on creation for the "remark" field.
	DefaultRemark string
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)

// OrderOption defines the ordering options for the CarsFlight queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByScenicAreaID orders the results by the scenic_area_id field.
func ByScenicAreaID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScenicAreaID, opts...).ToFunc()
}

// ByFlightNo orders the results by the flight_no field.
func ByFlightNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFlightNo, opts...).ToFunc()
}

// ByCarID orders the results by the car_id field.
func ByCarID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCarID, opts...).ToFunc()
}

// ByDeviceID orders the results by the device_id field.
func ByDeviceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceID, opts...).ToFunc()
}

// ByCarName orders the results by the car_name field.
func ByCarName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCarName, opts...).ToFunc()
}

// ByRouteID orders the results by the route_id field.
func ByRouteID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRouteID, opts...).ToFunc()
}

// ByRouteName orders the results by the route_name field.
func ByRouteName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRouteName, opts...).ToFunc()
}

// BySeatsNum orders the results by the seats_num field.
func BySeatsNum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSeatsNum, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByCurrStopID orders the results by the curr_stop_id field.
func ByCurrStopID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrStopID, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByExtendYokeeID orders the results by the extend_yokee_id field.
func ByExtendYokeeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExtendYokeeID, opts...).ToFunc()
}

// ByDepartureTime orders the results by the departure_time field.
func ByDepartureTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDepartureTime, opts...).ToFunc()
}

// ByFinishTime orders the results by the finish_time field.
func ByFinishTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFinishTime, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}
