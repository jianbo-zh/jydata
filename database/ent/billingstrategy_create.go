// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/billingstrategy"
	"github.com/jianbo-zh/jydata/database/ent/scenicarea"
)

// BillingStrategyCreate is the builder for creating a BillingStrategy entity.
type BillingStrategyCreate struct {
	config
	mutation *BillingStrategyMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (bsc *BillingStrategyCreate) SetName(s string) *BillingStrategyCreate {
	bsc.mutation.SetName(s)
	return bsc
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (bsc *BillingStrategyCreate) SetScenicAreaID(i int) *BillingStrategyCreate {
	bsc.mutation.SetScenicAreaID(i)
	return bsc
}

// SetModelID sets the "model_id" field.
func (bsc *BillingStrategyCreate) SetModelID(i int) *BillingStrategyCreate {
	bsc.mutation.SetModelID(i)
	return bsc
}

// SetMainMode sets the "main_mode" field.
func (bsc *BillingStrategyCreate) SetMainMode(i int) *BillingStrategyCreate {
	bsc.mutation.SetMainMode(i)
	return bsc
}

// SetStartTimePrice sets the "start_time_price" field.
func (bsc *BillingStrategyCreate) SetStartTimePrice(i int) *BillingStrategyCreate {
	bsc.mutation.SetStartTimePrice(i)
	return bsc
}

// SetStartTimeUnit sets the "start_time_unit" field.
func (bsc *BillingStrategyCreate) SetStartTimeUnit(i int) *BillingStrategyCreate {
	bsc.mutation.SetStartTimeUnit(i)
	return bsc
}

// SetNillableStartTimeUnit sets the "start_time_unit" field if the given value is not nil.
func (bsc *BillingStrategyCreate) SetNillableStartTimeUnit(i *int) *BillingStrategyCreate {
	if i != nil {
		bsc.SetStartTimeUnit(*i)
	}
	return bsc
}

// SetNormalTimePrice sets the "normal_time_price" field.
func (bsc *BillingStrategyCreate) SetNormalTimePrice(i int) *BillingStrategyCreate {
	bsc.mutation.SetNormalTimePrice(i)
	return bsc
}

// SetNormalTimeUnit sets the "normal_time_unit" field.
func (bsc *BillingStrategyCreate) SetNormalTimeUnit(i int) *BillingStrategyCreate {
	bsc.mutation.SetNormalTimeUnit(i)
	return bsc
}

// SetNillableNormalTimeUnit sets the "normal_time_unit" field if the given value is not nil.
func (bsc *BillingStrategyCreate) SetNillableNormalTimeUnit(i *int) *BillingStrategyCreate {
	if i != nil {
		bsc.SetNormalTimeUnit(*i)
	}
	return bsc
}

// SetStartMileagePrice sets the "start_mileage_price" field.
func (bsc *BillingStrategyCreate) SetStartMileagePrice(i int) *BillingStrategyCreate {
	bsc.mutation.SetStartMileagePrice(i)
	return bsc
}

// SetStartMileageUnit sets the "start_mileage_unit" field.
func (bsc *BillingStrategyCreate) SetStartMileageUnit(i int) *BillingStrategyCreate {
	bsc.mutation.SetStartMileageUnit(i)
	return bsc
}

// SetNillableStartMileageUnit sets the "start_mileage_unit" field if the given value is not nil.
func (bsc *BillingStrategyCreate) SetNillableStartMileageUnit(i *int) *BillingStrategyCreate {
	if i != nil {
		bsc.SetStartMileageUnit(*i)
	}
	return bsc
}

// SetNormalMileagePrice sets the "normal_mileage_price" field.
func (bsc *BillingStrategyCreate) SetNormalMileagePrice(i int) *BillingStrategyCreate {
	bsc.mutation.SetNormalMileagePrice(i)
	return bsc
}

// SetNormalMileageUnit sets the "normal_mileage_unit" field.
func (bsc *BillingStrategyCreate) SetNormalMileageUnit(i int) *BillingStrategyCreate {
	bsc.mutation.SetNormalMileageUnit(i)
	return bsc
}

// SetNillableNormalMileageUnit sets the "normal_mileage_unit" field if the given value is not nil.
func (bsc *BillingStrategyCreate) SetNillableNormalMileageUnit(i *int) *BillingStrategyCreate {
	if i != nil {
		bsc.SetNormalMileageUnit(*i)
	}
	return bsc
}

// SetCappedAmount sets the "capped_amount" field.
func (bsc *BillingStrategyCreate) SetCappedAmount(i int) *BillingStrategyCreate {
	bsc.mutation.SetCappedAmount(i)
	return bsc
}

// SetDepositAmount sets the "deposit_amount" field.
func (bsc *BillingStrategyCreate) SetDepositAmount(i int) *BillingStrategyCreate {
	bsc.mutation.SetDepositAmount(i)
	return bsc
}

// SetCreateTime sets the "create_time" field.
func (bsc *BillingStrategyCreate) SetCreateTime(t time.Time) *BillingStrategyCreate {
	bsc.mutation.SetCreateTime(t)
	return bsc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (bsc *BillingStrategyCreate) SetNillableCreateTime(t *time.Time) *BillingStrategyCreate {
	if t != nil {
		bsc.SetCreateTime(*t)
	}
	return bsc
}

// SetUpdateTime sets the "update_time" field.
func (bsc *BillingStrategyCreate) SetUpdateTime(t time.Time) *BillingStrategyCreate {
	bsc.mutation.SetUpdateTime(t)
	return bsc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (bsc *BillingStrategyCreate) SetNillableUpdateTime(t *time.Time) *BillingStrategyCreate {
	if t != nil {
		bsc.SetUpdateTime(*t)
	}
	return bsc
}

// SetID sets the "id" field.
func (bsc *BillingStrategyCreate) SetID(i int) *BillingStrategyCreate {
	bsc.mutation.SetID(i)
	return bsc
}

// SetBackgroundScenicAreaID sets the "background_scenic_area" edge to the ScenicArea entity by ID.
func (bsc *BillingStrategyCreate) SetBackgroundScenicAreaID(id int) *BillingStrategyCreate {
	bsc.mutation.SetBackgroundScenicAreaID(id)
	return bsc
}

// SetBackgroundScenicArea sets the "background_scenic_area" edge to the ScenicArea entity.
func (bsc *BillingStrategyCreate) SetBackgroundScenicArea(s *ScenicArea) *BillingStrategyCreate {
	return bsc.SetBackgroundScenicAreaID(s.ID)
}

// Mutation returns the BillingStrategyMutation object of the builder.
func (bsc *BillingStrategyCreate) Mutation() *BillingStrategyMutation {
	return bsc.mutation
}

// Save creates the BillingStrategy in the database.
func (bsc *BillingStrategyCreate) Save(ctx context.Context) (*BillingStrategy, error) {
	bsc.defaults()
	return withHooks(ctx, bsc.sqlSave, bsc.mutation, bsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bsc *BillingStrategyCreate) SaveX(ctx context.Context) *BillingStrategy {
	v, err := bsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bsc *BillingStrategyCreate) Exec(ctx context.Context) error {
	_, err := bsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bsc *BillingStrategyCreate) ExecX(ctx context.Context) {
	if err := bsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bsc *BillingStrategyCreate) defaults() {
	if _, ok := bsc.mutation.StartTimeUnit(); !ok {
		v := billingstrategy.DefaultStartTimeUnit
		bsc.mutation.SetStartTimeUnit(v)
	}
	if _, ok := bsc.mutation.NormalTimeUnit(); !ok {
		v := billingstrategy.DefaultNormalTimeUnit
		bsc.mutation.SetNormalTimeUnit(v)
	}
	if _, ok := bsc.mutation.StartMileageUnit(); !ok {
		v := billingstrategy.DefaultStartMileageUnit
		bsc.mutation.SetStartMileageUnit(v)
	}
	if _, ok := bsc.mutation.NormalMileageUnit(); !ok {
		v := billingstrategy.DefaultNormalMileageUnit
		bsc.mutation.SetNormalMileageUnit(v)
	}
	if _, ok := bsc.mutation.CreateTime(); !ok {
		v := billingstrategy.DefaultCreateTime()
		bsc.mutation.SetCreateTime(v)
	}
	if _, ok := bsc.mutation.UpdateTime(); !ok {
		v := billingstrategy.DefaultUpdateTime()
		bsc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bsc *BillingStrategyCreate) check() error {
	if _, ok := bsc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "BillingStrategy.name"`)}
	}
	if _, ok := bsc.mutation.ScenicAreaID(); !ok {
		return &ValidationError{Name: "scenic_area_id", err: errors.New(`ent: missing required field "BillingStrategy.scenic_area_id"`)}
	}
	if _, ok := bsc.mutation.ModelID(); !ok {
		return &ValidationError{Name: "model_id", err: errors.New(`ent: missing required field "BillingStrategy.model_id"`)}
	}
	if _, ok := bsc.mutation.MainMode(); !ok {
		return &ValidationError{Name: "main_mode", err: errors.New(`ent: missing required field "BillingStrategy.main_mode"`)}
	}
	if _, ok := bsc.mutation.StartTimePrice(); !ok {
		return &ValidationError{Name: "start_time_price", err: errors.New(`ent: missing required field "BillingStrategy.start_time_price"`)}
	}
	if _, ok := bsc.mutation.StartTimeUnit(); !ok {
		return &ValidationError{Name: "start_time_unit", err: errors.New(`ent: missing required field "BillingStrategy.start_time_unit"`)}
	}
	if _, ok := bsc.mutation.NormalTimePrice(); !ok {
		return &ValidationError{Name: "normal_time_price", err: errors.New(`ent: missing required field "BillingStrategy.normal_time_price"`)}
	}
	if _, ok := bsc.mutation.NormalTimeUnit(); !ok {
		return &ValidationError{Name: "normal_time_unit", err: errors.New(`ent: missing required field "BillingStrategy.normal_time_unit"`)}
	}
	if _, ok := bsc.mutation.StartMileagePrice(); !ok {
		return &ValidationError{Name: "start_mileage_price", err: errors.New(`ent: missing required field "BillingStrategy.start_mileage_price"`)}
	}
	if _, ok := bsc.mutation.StartMileageUnit(); !ok {
		return &ValidationError{Name: "start_mileage_unit", err: errors.New(`ent: missing required field "BillingStrategy.start_mileage_unit"`)}
	}
	if _, ok := bsc.mutation.NormalMileagePrice(); !ok {
		return &ValidationError{Name: "normal_mileage_price", err: errors.New(`ent: missing required field "BillingStrategy.normal_mileage_price"`)}
	}
	if _, ok := bsc.mutation.NormalMileageUnit(); !ok {
		return &ValidationError{Name: "normal_mileage_unit", err: errors.New(`ent: missing required field "BillingStrategy.normal_mileage_unit"`)}
	}
	if _, ok := bsc.mutation.CappedAmount(); !ok {
		return &ValidationError{Name: "capped_amount", err: errors.New(`ent: missing required field "BillingStrategy.capped_amount"`)}
	}
	if _, ok := bsc.mutation.DepositAmount(); !ok {
		return &ValidationError{Name: "deposit_amount", err: errors.New(`ent: missing required field "BillingStrategy.deposit_amount"`)}
	}
	if _, ok := bsc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "BillingStrategy.create_time"`)}
	}
	if _, ok := bsc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "BillingStrategy.update_time"`)}
	}
	if len(bsc.mutation.BackgroundScenicAreaIDs()) == 0 {
		return &ValidationError{Name: "background_scenic_area", err: errors.New(`ent: missing required edge "BillingStrategy.background_scenic_area"`)}
	}
	return nil
}

func (bsc *BillingStrategyCreate) sqlSave(ctx context.Context) (*BillingStrategy, error) {
	if err := bsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	bsc.mutation.id = &_node.ID
	bsc.mutation.done = true
	return _node, nil
}

func (bsc *BillingStrategyCreate) createSpec() (*BillingStrategy, *sqlgraph.CreateSpec) {
	var (
		_node = &BillingStrategy{config: bsc.config}
		_spec = sqlgraph.NewCreateSpec(billingstrategy.Table, sqlgraph.NewFieldSpec(billingstrategy.FieldID, field.TypeInt))
	)
	if id, ok := bsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bsc.mutation.Name(); ok {
		_spec.SetField(billingstrategy.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := bsc.mutation.ModelID(); ok {
		_spec.SetField(billingstrategy.FieldModelID, field.TypeInt, value)
		_node.ModelID = value
	}
	if value, ok := bsc.mutation.MainMode(); ok {
		_spec.SetField(billingstrategy.FieldMainMode, field.TypeInt, value)
		_node.MainMode = value
	}
	if value, ok := bsc.mutation.StartTimePrice(); ok {
		_spec.SetField(billingstrategy.FieldStartTimePrice, field.TypeInt, value)
		_node.StartTimePrice = value
	}
	if value, ok := bsc.mutation.StartTimeUnit(); ok {
		_spec.SetField(billingstrategy.FieldStartTimeUnit, field.TypeInt, value)
		_node.StartTimeUnit = value
	}
	if value, ok := bsc.mutation.NormalTimePrice(); ok {
		_spec.SetField(billingstrategy.FieldNormalTimePrice, field.TypeInt, value)
		_node.NormalTimePrice = value
	}
	if value, ok := bsc.mutation.NormalTimeUnit(); ok {
		_spec.SetField(billingstrategy.FieldNormalTimeUnit, field.TypeInt, value)
		_node.NormalTimeUnit = value
	}
	if value, ok := bsc.mutation.StartMileagePrice(); ok {
		_spec.SetField(billingstrategy.FieldStartMileagePrice, field.TypeInt, value)
		_node.StartMileagePrice = value
	}
	if value, ok := bsc.mutation.StartMileageUnit(); ok {
		_spec.SetField(billingstrategy.FieldStartMileageUnit, field.TypeInt, value)
		_node.StartMileageUnit = value
	}
	if value, ok := bsc.mutation.NormalMileagePrice(); ok {
		_spec.SetField(billingstrategy.FieldNormalMileagePrice, field.TypeInt, value)
		_node.NormalMileagePrice = value
	}
	if value, ok := bsc.mutation.NormalMileageUnit(); ok {
		_spec.SetField(billingstrategy.FieldNormalMileageUnit, field.TypeInt, value)
		_node.NormalMileageUnit = value
	}
	if value, ok := bsc.mutation.CappedAmount(); ok {
		_spec.SetField(billingstrategy.FieldCappedAmount, field.TypeInt, value)
		_node.CappedAmount = value
	}
	if value, ok := bsc.mutation.DepositAmount(); ok {
		_spec.SetField(billingstrategy.FieldDepositAmount, field.TypeInt, value)
		_node.DepositAmount = value
	}
	if value, ok := bsc.mutation.CreateTime(); ok {
		_spec.SetField(billingstrategy.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := bsc.mutation.UpdateTime(); ok {
		_spec.SetField(billingstrategy.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if nodes := bsc.mutation.BackgroundScenicAreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billingstrategy.BackgroundScenicAreaTable,
			Columns: []string{billingstrategy.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ScenicAreaID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BillingStrategyCreateBulk is the builder for creating many BillingStrategy entities in bulk.
type BillingStrategyCreateBulk struct {
	config
	err      error
	builders []*BillingStrategyCreate
}

// Save creates the BillingStrategy entities in the database.
func (bscb *BillingStrategyCreateBulk) Save(ctx context.Context) ([]*BillingStrategy, error) {
	if bscb.err != nil {
		return nil, bscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bscb.builders))
	nodes := make([]*BillingStrategy, len(bscb.builders))
	mutators := make([]Mutator, len(bscb.builders))
	for i := range bscb.builders {
		func(i int, root context.Context) {
			builder := bscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BillingStrategyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bscb *BillingStrategyCreateBulk) SaveX(ctx context.Context) []*BillingStrategy {
	v, err := bscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bscb *BillingStrategyCreateBulk) Exec(ctx context.Context) error {
	_, err := bscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bscb *BillingStrategyCreateBulk) ExecX(ctx context.Context) {
	if err := bscb.Exec(ctx); err != nil {
		panic(err)
	}
}
