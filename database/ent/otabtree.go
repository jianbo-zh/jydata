// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jianbo-zh/jydata/database/ent/otabtree"
)

// OtaBtree is the model entity for the OtaBtree schema.
type OtaBtree struct {
	config `json:"-"`
	// ID of the ent.
	// ID
	ID int `json:"id,omitempty"`
	// DeleteTime holds the value of the "delete_time" field.
	DeleteTime time.Time `json:"delete_time,omitempty"`
	// 文件ID
	FileID int `json:"file_id,omitempty"`
	// 名称
	Name string `json:"name,omitempty"`
	// 备注
	Remark string `json:"remark,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime   time.Time `json:"update_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OtaBtree) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case otabtree.FieldID, otabtree.FieldFileID:
			values[i] = new(sql.NullInt64)
		case otabtree.FieldName, otabtree.FieldRemark:
			values[i] = new(sql.NullString)
		case otabtree.FieldDeleteTime, otabtree.FieldCreateTime, otabtree.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OtaBtree fields.
func (ob *OtaBtree) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case otabtree.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ob.ID = int(value.Int64)
		case otabtree.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				ob.DeleteTime = value.Time
			}
		case otabtree.FieldFileID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field file_id", values[i])
			} else if value.Valid {
				ob.FileID = int(value.Int64)
			}
		case otabtree.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ob.Name = value.String
			}
		case otabtree.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				ob.Remark = value.String
			}
		case otabtree.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ob.CreateTime = value.Time
			}
		case otabtree.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ob.UpdateTime = value.Time
			}
		default:
			ob.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OtaBtree.
// This includes values selected through modifiers, order, etc.
func (ob *OtaBtree) Value(name string) (ent.Value, error) {
	return ob.selectValues.Get(name)
}

// Update returns a builder for updating this OtaBtree.
// Note that you need to call OtaBtree.Unwrap() before calling this method if this OtaBtree
// was returned from a transaction, and the transaction was committed or rolled back.
func (ob *OtaBtree) Update() *OtaBtreeUpdateOne {
	return NewOtaBtreeClient(ob.config).UpdateOne(ob)
}

// Unwrap unwraps the OtaBtree entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ob *OtaBtree) Unwrap() *OtaBtree {
	_tx, ok := ob.config.driver.(*txDriver)
	if !ok {
		panic("ent: OtaBtree is not a transactional entity")
	}
	ob.config.driver = _tx.drv
	return ob
}

// String implements the fmt.Stringer.
func (ob *OtaBtree) String() string {
	var builder strings.Builder
	builder.WriteString("OtaBtree(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ob.ID))
	builder.WriteString("delete_time=")
	builder.WriteString(ob.DeleteTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("file_id=")
	builder.WriteString(fmt.Sprintf("%v", ob.FileID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ob.Name)
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(ob.Remark)
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(ob.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(ob.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// OtaBtrees is a parsable slice of OtaBtree.
type OtaBtrees []*OtaBtree
