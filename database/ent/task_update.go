// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"github.com/jianbo-zh/jydata/database/ent/task"
)

// TaskUpdate is the builder for updating Task entities.
type TaskUpdate struct {
	config
	hooks    []Hook
	mutation *TaskMutation
}

// Where appends a list predicates to the TaskUpdate builder.
func (tu *TaskUpdate) Where(ps ...predicate.Task) *TaskUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetType sets the "type" field.
func (tu *TaskUpdate) SetType(s string) *TaskUpdate {
	tu.mutation.SetType(s)
	return tu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableType(s *string) *TaskUpdate {
	if s != nil {
		tu.SetType(*s)
	}
	return tu
}

// SetRelID sets the "rel_id" field.
func (tu *TaskUpdate) SetRelID(i int) *TaskUpdate {
	tu.mutation.ResetRelID()
	tu.mutation.SetRelID(i)
	return tu
}

// SetNillableRelID sets the "rel_id" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableRelID(i *int) *TaskUpdate {
	if i != nil {
		tu.SetRelID(*i)
	}
	return tu
}

// AddRelID adds i to the "rel_id" field.
func (tu *TaskUpdate) AddRelID(i int) *TaskUpdate {
	tu.mutation.AddRelID(i)
	return tu
}

// SetRelData sets the "rel_data" field.
func (tu *TaskUpdate) SetRelData(a any) *TaskUpdate {
	tu.mutation.SetRelData(a)
	return tu
}

// ClearRelData clears the value of the "rel_data" field.
func (tu *TaskUpdate) ClearRelData() *TaskUpdate {
	tu.mutation.ClearRelData()
	return tu
}

// SetState sets the "state" field.
func (tu *TaskUpdate) SetState(i int) *TaskUpdate {
	tu.mutation.ResetState()
	tu.mutation.SetState(i)
	return tu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableState(i *int) *TaskUpdate {
	if i != nil {
		tu.SetState(*i)
	}
	return tu
}

// AddState adds i to the "state" field.
func (tu *TaskUpdate) AddState(i int) *TaskUpdate {
	tu.mutation.AddState(i)
	return tu
}

// SetTryTimes sets the "try_times" field.
func (tu *TaskUpdate) SetTryTimes(i int) *TaskUpdate {
	tu.mutation.ResetTryTimes()
	tu.mutation.SetTryTimes(i)
	return tu
}

// SetNillableTryTimes sets the "try_times" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableTryTimes(i *int) *TaskUpdate {
	if i != nil {
		tu.SetTryTimes(*i)
	}
	return tu
}

// AddTryTimes adds i to the "try_times" field.
func (tu *TaskUpdate) AddTryTimes(i int) *TaskUpdate {
	tu.mutation.AddTryTimes(i)
	return tu
}

// SetErrorMsg sets the "error_msg" field.
func (tu *TaskUpdate) SetErrorMsg(s string) *TaskUpdate {
	tu.mutation.SetErrorMsg(s)
	return tu
}

// SetNillableErrorMsg sets the "error_msg" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableErrorMsg(s *string) *TaskUpdate {
	if s != nil {
		tu.SetErrorMsg(*s)
	}
	return tu
}

// SetStartTime sets the "start_time" field.
func (tu *TaskUpdate) SetStartTime(t time.Time) *TaskUpdate {
	tu.mutation.SetStartTime(t)
	return tu
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableStartTime(t *time.Time) *TaskUpdate {
	if t != nil {
		tu.SetStartTime(*t)
	}
	return tu
}

// SetNextTime sets the "next_time" field.
func (tu *TaskUpdate) SetNextTime(t time.Time) *TaskUpdate {
	tu.mutation.SetNextTime(t)
	return tu
}

// SetNillableNextTime sets the "next_time" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableNextTime(t *time.Time) *TaskUpdate {
	if t != nil {
		tu.SetNextTime(*t)
	}
	return tu
}

// SetEndTime sets the "end_time" field.
func (tu *TaskUpdate) SetEndTime(t time.Time) *TaskUpdate {
	tu.mutation.SetEndTime(t)
	return tu
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableEndTime(t *time.Time) *TaskUpdate {
	if t != nil {
		tu.SetEndTime(*t)
	}
	return tu
}

// ClearEndTime clears the value of the "end_time" field.
func (tu *TaskUpdate) ClearEndTime() *TaskUpdate {
	tu.mutation.ClearEndTime()
	return tu
}

// SetUpdateTime sets the "update_time" field.
func (tu *TaskUpdate) SetUpdateTime(t time.Time) *TaskUpdate {
	tu.mutation.SetUpdateTime(t)
	return tu
}

// Mutation returns the TaskMutation object of the builder.
func (tu *TaskUpdate) Mutation() *TaskMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TaskUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TaskUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TaskUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TaskUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TaskUpdate) defaults() {
	if _, ok := tu.mutation.UpdateTime(); !ok {
		v := task.UpdateDefaultUpdateTime()
		tu.mutation.SetUpdateTime(v)
	}
}

func (tu *TaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.GetType(); ok {
		_spec.SetField(task.FieldType, field.TypeString, value)
	}
	if value, ok := tu.mutation.RelID(); ok {
		_spec.SetField(task.FieldRelID, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedRelID(); ok {
		_spec.AddField(task.FieldRelID, field.TypeInt, value)
	}
	if value, ok := tu.mutation.RelData(); ok {
		_spec.SetField(task.FieldRelData, field.TypeJSON, value)
	}
	if tu.mutation.RelDataCleared() {
		_spec.ClearField(task.FieldRelData, field.TypeJSON)
	}
	if value, ok := tu.mutation.State(); ok {
		_spec.SetField(task.FieldState, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedState(); ok {
		_spec.AddField(task.FieldState, field.TypeInt, value)
	}
	if value, ok := tu.mutation.TryTimes(); ok {
		_spec.SetField(task.FieldTryTimes, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedTryTimes(); ok {
		_spec.AddField(task.FieldTryTimes, field.TypeInt, value)
	}
	if value, ok := tu.mutation.ErrorMsg(); ok {
		_spec.SetField(task.FieldErrorMsg, field.TypeString, value)
	}
	if value, ok := tu.mutation.StartTime(); ok {
		_spec.SetField(task.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := tu.mutation.NextTime(); ok {
		_spec.SetField(task.FieldNextTime, field.TypeTime, value)
	}
	if value, ok := tu.mutation.EndTime(); ok {
		_spec.SetField(task.FieldEndTime, field.TypeTime, value)
	}
	if tu.mutation.EndTimeCleared() {
		_spec.ClearField(task.FieldEndTime, field.TypeTime)
	}
	if value, ok := tu.mutation.UpdateTime(); ok {
		_spec.SetField(task.FieldUpdateTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TaskUpdateOne is the builder for updating a single Task entity.
type TaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskMutation
}

// SetType sets the "type" field.
func (tuo *TaskUpdateOne) SetType(s string) *TaskUpdateOne {
	tuo.mutation.SetType(s)
	return tuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableType(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetType(*s)
	}
	return tuo
}

// SetRelID sets the "rel_id" field.
func (tuo *TaskUpdateOne) SetRelID(i int) *TaskUpdateOne {
	tuo.mutation.ResetRelID()
	tuo.mutation.SetRelID(i)
	return tuo
}

// SetNillableRelID sets the "rel_id" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableRelID(i *int) *TaskUpdateOne {
	if i != nil {
		tuo.SetRelID(*i)
	}
	return tuo
}

// AddRelID adds i to the "rel_id" field.
func (tuo *TaskUpdateOne) AddRelID(i int) *TaskUpdateOne {
	tuo.mutation.AddRelID(i)
	return tuo
}

// SetRelData sets the "rel_data" field.
func (tuo *TaskUpdateOne) SetRelData(a any) *TaskUpdateOne {
	tuo.mutation.SetRelData(a)
	return tuo
}

// ClearRelData clears the value of the "rel_data" field.
func (tuo *TaskUpdateOne) ClearRelData() *TaskUpdateOne {
	tuo.mutation.ClearRelData()
	return tuo
}

// SetState sets the "state" field.
func (tuo *TaskUpdateOne) SetState(i int) *TaskUpdateOne {
	tuo.mutation.ResetState()
	tuo.mutation.SetState(i)
	return tuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableState(i *int) *TaskUpdateOne {
	if i != nil {
		tuo.SetState(*i)
	}
	return tuo
}

// AddState adds i to the "state" field.
func (tuo *TaskUpdateOne) AddState(i int) *TaskUpdateOne {
	tuo.mutation.AddState(i)
	return tuo
}

// SetTryTimes sets the "try_times" field.
func (tuo *TaskUpdateOne) SetTryTimes(i int) *TaskUpdateOne {
	tuo.mutation.ResetTryTimes()
	tuo.mutation.SetTryTimes(i)
	return tuo
}

// SetNillableTryTimes sets the "try_times" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableTryTimes(i *int) *TaskUpdateOne {
	if i != nil {
		tuo.SetTryTimes(*i)
	}
	return tuo
}

// AddTryTimes adds i to the "try_times" field.
func (tuo *TaskUpdateOne) AddTryTimes(i int) *TaskUpdateOne {
	tuo.mutation.AddTryTimes(i)
	return tuo
}

// SetErrorMsg sets the "error_msg" field.
func (tuo *TaskUpdateOne) SetErrorMsg(s string) *TaskUpdateOne {
	tuo.mutation.SetErrorMsg(s)
	return tuo
}

// SetNillableErrorMsg sets the "error_msg" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableErrorMsg(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetErrorMsg(*s)
	}
	return tuo
}

// SetStartTime sets the "start_time" field.
func (tuo *TaskUpdateOne) SetStartTime(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetStartTime(t)
	return tuo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableStartTime(t *time.Time) *TaskUpdateOne {
	if t != nil {
		tuo.SetStartTime(*t)
	}
	return tuo
}

// SetNextTime sets the "next_time" field.
func (tuo *TaskUpdateOne) SetNextTime(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetNextTime(t)
	return tuo
}

// SetNillableNextTime sets the "next_time" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableNextTime(t *time.Time) *TaskUpdateOne {
	if t != nil {
		tuo.SetNextTime(*t)
	}
	return tuo
}

// SetEndTime sets the "end_time" field.
func (tuo *TaskUpdateOne) SetEndTime(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetEndTime(t)
	return tuo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableEndTime(t *time.Time) *TaskUpdateOne {
	if t != nil {
		tuo.SetEndTime(*t)
	}
	return tuo
}

// ClearEndTime clears the value of the "end_time" field.
func (tuo *TaskUpdateOne) ClearEndTime() *TaskUpdateOne {
	tuo.mutation.ClearEndTime()
	return tuo
}

// SetUpdateTime sets the "update_time" field.
func (tuo *TaskUpdateOne) SetUpdateTime(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetUpdateTime(t)
	return tuo
}

// Mutation returns the TaskMutation object of the builder.
func (tuo *TaskUpdateOne) Mutation() *TaskMutation {
	return tuo.mutation
}

// Where appends a list predicates to the TaskUpdate builder.
func (tuo *TaskUpdateOne) Where(ps ...predicate.Task) *TaskUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TaskUpdateOne) Select(field string, fields ...string) *TaskUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Task entity.
func (tuo *TaskUpdateOne) Save(ctx context.Context) (*Task, error) {
	tuo.defaults()
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TaskUpdateOne) SaveX(ctx context.Context) *Task {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TaskUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TaskUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TaskUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdateTime(); !ok {
		v := task.UpdateDefaultUpdateTime()
		tuo.mutation.SetUpdateTime(v)
	}
}

func (tuo *TaskUpdateOne) sqlSave(ctx context.Context) (_node *Task, err error) {
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Task.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, task.FieldID)
		for _, f := range fields {
			if !task.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != task.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.GetType(); ok {
		_spec.SetField(task.FieldType, field.TypeString, value)
	}
	if value, ok := tuo.mutation.RelID(); ok {
		_spec.SetField(task.FieldRelID, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedRelID(); ok {
		_spec.AddField(task.FieldRelID, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.RelData(); ok {
		_spec.SetField(task.FieldRelData, field.TypeJSON, value)
	}
	if tuo.mutation.RelDataCleared() {
		_spec.ClearField(task.FieldRelData, field.TypeJSON)
	}
	if value, ok := tuo.mutation.State(); ok {
		_spec.SetField(task.FieldState, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedState(); ok {
		_spec.AddField(task.FieldState, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.TryTimes(); ok {
		_spec.SetField(task.FieldTryTimes, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedTryTimes(); ok {
		_spec.AddField(task.FieldTryTimes, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.ErrorMsg(); ok {
		_spec.SetField(task.FieldErrorMsg, field.TypeString, value)
	}
	if value, ok := tuo.mutation.StartTime(); ok {
		_spec.SetField(task.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.NextTime(); ok {
		_spec.SetField(task.FieldNextTime, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.EndTime(); ok {
		_spec.SetField(task.FieldEndTime, field.TypeTime, value)
	}
	if tuo.mutation.EndTimeCleared() {
		_spec.ClearField(task.FieldEndTime, field.TypeTime)
	}
	if value, ok := tuo.mutation.UpdateTime(); ok {
		_spec.SetField(task.FieldUpdateTime, field.TypeTime, value)
	}
	_node = &Task{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
