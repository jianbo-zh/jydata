// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/carlogupload"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CarLogUpload is the model entity for the CarLogUpload schema.
type CarLogUpload struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID int64 `json:"uuid,omitempty"`
	// 车辆ID
	CarID int `json:"car_id,omitempty"`
	// 车辆设备ID
	DeviceID string `json:"device_id,omitempty"`
	// 上传状态
	UploadState string `json:"upload_state,omitempty"`
	// 上传进度
	UploadProcess int `json:"upload_process,omitempty"`
	// 下载地址
	DownloadURL string `json:"download_url,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime   time.Time `json:"update_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CarLogUpload) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case carlogupload.FieldID, carlogupload.FieldUUID, carlogupload.FieldCarID, carlogupload.FieldUploadProcess:
			values[i] = new(sql.NullInt64)
		case carlogupload.FieldDeviceID, carlogupload.FieldUploadState, carlogupload.FieldDownloadURL:
			values[i] = new(sql.NullString)
		case carlogupload.FieldCreateTime, carlogupload.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CarLogUpload fields.
func (clu *CarLogUpload) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case carlogupload.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			clu.ID = int(value.Int64)
		case carlogupload.FieldUUID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				clu.UUID = value.Int64
			}
		case carlogupload.FieldCarID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field car_id", values[i])
			} else if value.Valid {
				clu.CarID = int(value.Int64)
			}
		case carlogupload.FieldDeviceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device_id", values[i])
			} else if value.Valid {
				clu.DeviceID = value.String
			}
		case carlogupload.FieldUploadState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field upload_state", values[i])
			} else if value.Valid {
				clu.UploadState = value.String
			}
		case carlogupload.FieldUploadProcess:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field upload_process", values[i])
			} else if value.Valid {
				clu.UploadProcess = int(value.Int64)
			}
		case carlogupload.FieldDownloadURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field download_url", values[i])
			} else if value.Valid {
				clu.DownloadURL = value.String
			}
		case carlogupload.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				clu.CreateTime = value.Time
			}
		case carlogupload.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				clu.UpdateTime = value.Time
			}
		default:
			clu.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CarLogUpload.
// This includes values selected through modifiers, order, etc.
func (clu *CarLogUpload) Value(name string) (ent.Value, error) {
	return clu.selectValues.Get(name)
}

// Update returns a builder for updating this CarLogUpload.
// Note that you need to call CarLogUpload.Unwrap() before calling this method if this CarLogUpload
// was returned from a transaction, and the transaction was committed or rolled back.
func (clu *CarLogUpload) Update() *CarLogUploadUpdateOne {
	return NewCarLogUploadClient(clu.config).UpdateOne(clu)
}

// Unwrap unwraps the CarLogUpload entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (clu *CarLogUpload) Unwrap() *CarLogUpload {
	_tx, ok := clu.config.driver.(*txDriver)
	if !ok {
		panic("ent: CarLogUpload is not a transactional entity")
	}
	clu.config.driver = _tx.drv
	return clu
}

// String implements the fmt.Stringer.
func (clu *CarLogUpload) String() string {
	var builder strings.Builder
	builder.WriteString("CarLogUpload(")
	builder.WriteString(fmt.Sprintf("id=%v, ", clu.ID))
	builder.WriteString("uuid=")
	builder.WriteString(fmt.Sprintf("%v", clu.UUID))
	builder.WriteString(", ")
	builder.WriteString("car_id=")
	builder.WriteString(fmt.Sprintf("%v", clu.CarID))
	builder.WriteString(", ")
	builder.WriteString("device_id=")
	builder.WriteString(clu.DeviceID)
	builder.WriteString(", ")
	builder.WriteString("upload_state=")
	builder.WriteString(clu.UploadState)
	builder.WriteString(", ")
	builder.WriteString("upload_process=")
	builder.WriteString(fmt.Sprintf("%v", clu.UploadProcess))
	builder.WriteString(", ")
	builder.WriteString("download_url=")
	builder.WriteString(clu.DownloadURL)
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(clu.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(clu.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CarLogUploads is a parsable slice of CarLogUpload.
type CarLogUploads []*CarLogUpload
