// Code generated by ent, DO NOT EDIT.

package orderrefund

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the orderrefund type in the database.
	Label = "order_refund"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldInitiatorID holds the string denoting the initiator_id field in the database.
	FieldInitiatorID = "initiator_id"
	// FieldScenicAreaID holds the string denoting the scenic_area_id field in the database.
	FieldScenicAreaID = "scenic_area_id"
	// FieldOrderID holds the string denoting the order_id field in the database.
	FieldOrderID = "order_id"
	// FieldOrderNo holds the string denoting the order_no field in the database.
	FieldOrderNo = "order_no"
	// FieldRefundNo holds the string denoting the refund_no field in the database.
	FieldRefundNo = "refund_no"
	// FieldWxRefundID holds the string denoting the wx_refund_id field in the database.
	FieldWxRefundID = "wx_refund_id"
	// FieldRefundAmount holds the string denoting the refund_amount field in the database.
	FieldRefundAmount = "refund_amount"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldErrmsg holds the string denoting the errmsg field in the database.
	FieldErrmsg = "errmsg"
	// FieldFinishTime holds the string denoting the finish_time field in the database.
	FieldFinishTime = "finish_time"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// EdgeOrder holds the string denoting the order edge name in mutations.
	EdgeOrder = "order"
	// Table holds the table name of the orderrefund in the database.
	Table = "order_refunds"
	// OrderTable is the table that holds the order relation/edge.
	OrderTable = "order_refunds"
	// OrderInverseTable is the table name for the Order entity.
	// It exists in this package in order to avoid circular dependency with the "order" package.
	OrderInverseTable = "orders"
	// OrderColumn is the table column denoting the order relation/edge.
	OrderColumn = "order_id"
)

// Columns holds all SQL columns for orderrefund fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldInitiatorID,
	FieldScenicAreaID,
	FieldOrderID,
	FieldOrderNo,
	FieldRefundNo,
	FieldWxRefundID,
	FieldRefundAmount,
	FieldState,
	FieldRemark,
	FieldErrmsg,
	FieldFinishTime,
	FieldCreateTime,
	FieldUpdateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultType holds the default value on creation for the "type" field.
	DefaultType int
	// DefaultInitiatorID holds the default value on creation for the "initiator_id" field.
	DefaultInitiatorID int
	// DefaultScenicAreaID holds the default value on creation for the "scenic_area_id" field.
	DefaultScenicAreaID int
	// DefaultOrderNo holds the default value on creation for the "order_no" field.
	DefaultOrderNo string
	// DefaultWxRefundID holds the default value on creation for the "wx_refund_id" field.
	DefaultWxRefundID string
	// DefaultRefundAmount holds the default value on creation for the "refund_amount" field.
	DefaultRefundAmount int
	// DefaultState holds the default value on creation for the "state" field.
	DefaultState int
	// DefaultRemark holds the default value on creation for the "remark" field.
	DefaultRemark string
	// DefaultErrmsg holds the default value on creation for the "errmsg" field.
	DefaultErrmsg string
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)

// OrderOption defines the ordering options for the OrderRefund queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByInitiatorID orders the results by the initiator_id field.
func ByInitiatorID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInitiatorID, opts...).ToFunc()
}

// ByScenicAreaID orders the results by the scenic_area_id field.
func ByScenicAreaID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScenicAreaID, opts...).ToFunc()
}

// ByOrderID orders the results by the order_id field.
func ByOrderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderID, opts...).ToFunc()
}

// ByOrderNo orders the results by the order_no field.
func ByOrderNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderNo, opts...).ToFunc()
}

// ByRefundNo orders the results by the refund_no field.
func ByRefundNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRefundNo, opts...).ToFunc()
}

// ByWxRefundID orders the results by the wx_refund_id field.
func ByWxRefundID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWxRefundID, opts...).ToFunc()
}

// ByRefundAmount orders the results by the refund_amount field.
func ByRefundAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRefundAmount, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByErrmsg orders the results by the errmsg field.
func ByErrmsg(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldErrmsg, opts...).ToFunc()
}

// ByFinishTime orders the results by the finish_time field.
func ByFinishTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFinishTime, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByOrderField orders the results by order field.
func ByOrderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrderStep(), sql.OrderByField(field, opts...))
	}
}
func newOrderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OrderTable, OrderColumn),
	)
}
