// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/systemlog"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SystemLogCreate is the builder for creating a SystemLog entity.
type SystemLogCreate struct {
	config
	mutation *SystemLogMutation
	hooks    []Hook
}

// SetTimestamp sets the "timestamp" field.
func (slc *SystemLogCreate) SetTimestamp(i int) *SystemLogCreate {
	slc.mutation.SetTimestamp(i)
	return slc
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (slc *SystemLogCreate) SetNillableTimestamp(i *int) *SystemLogCreate {
	if i != nil {
		slc.SetTimestamp(*i)
	}
	return slc
}

// SetAction sets the "action" field.
func (slc *SystemLogCreate) SetAction(s string) *SystemLogCreate {
	slc.mutation.SetAction(s)
	return slc
}

// SetUser sets the "user" field.
func (slc *SystemLogCreate) SetUser(s string) *SystemLogCreate {
	slc.mutation.SetUser(s)
	return slc
}

// SetScenicArea sets the "scenic_area" field.
func (slc *SystemLogCreate) SetScenicArea(s string) *SystemLogCreate {
	slc.mutation.SetScenicArea(s)
	return slc
}

// SetSourceIP sets the "source_ip" field.
func (slc *SystemLogCreate) SetSourceIP(s string) *SystemLogCreate {
	slc.mutation.SetSourceIP(s)
	return slc
}

// SetLoginType sets the "login_type" field.
func (slc *SystemLogCreate) SetLoginType(st systemlog.LoginType) *SystemLogCreate {
	slc.mutation.SetLoginType(st)
	return slc
}

// SetContent sets the "content" field.
func (slc *SystemLogCreate) SetContent(s string) *SystemLogCreate {
	slc.mutation.SetContent(s)
	return slc
}

// SetStatus sets the "status" field.
func (slc *SystemLogCreate) SetStatus(s systemlog.Status) *SystemLogCreate {
	slc.mutation.SetStatus(s)
	return slc
}

// SetRemarks sets the "remarks" field.
func (slc *SystemLogCreate) SetRemarks(s string) *SystemLogCreate {
	slc.mutation.SetRemarks(s)
	return slc
}

// SetNillableRemarks sets the "remarks" field if the given value is not nil.
func (slc *SystemLogCreate) SetNillableRemarks(s *string) *SystemLogCreate {
	if s != nil {
		slc.SetRemarks(*s)
	}
	return slc
}

// SetCreateTime sets the "create_time" field.
func (slc *SystemLogCreate) SetCreateTime(t time.Time) *SystemLogCreate {
	slc.mutation.SetCreateTime(t)
	return slc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (slc *SystemLogCreate) SetNillableCreateTime(t *time.Time) *SystemLogCreate {
	if t != nil {
		slc.SetCreateTime(*t)
	}
	return slc
}

// SetID sets the "id" field.
func (slc *SystemLogCreate) SetID(u uint64) *SystemLogCreate {
	slc.mutation.SetID(u)
	return slc
}

// Mutation returns the SystemLogMutation object of the builder.
func (slc *SystemLogCreate) Mutation() *SystemLogMutation {
	return slc.mutation
}

// Save creates the SystemLog in the database.
func (slc *SystemLogCreate) Save(ctx context.Context) (*SystemLog, error) {
	slc.defaults()
	return withHooks(ctx, slc.sqlSave, slc.mutation, slc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (slc *SystemLogCreate) SaveX(ctx context.Context) *SystemLog {
	v, err := slc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (slc *SystemLogCreate) Exec(ctx context.Context) error {
	_, err := slc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (slc *SystemLogCreate) ExecX(ctx context.Context) {
	if err := slc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (slc *SystemLogCreate) defaults() {
	if _, ok := slc.mutation.Timestamp(); !ok {
		v := systemlog.DefaultTimestamp
		slc.mutation.SetTimestamp(v)
	}
	if _, ok := slc.mutation.CreateTime(); !ok {
		v := systemlog.DefaultCreateTime()
		slc.mutation.SetCreateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (slc *SystemLogCreate) check() error {
	if _, ok := slc.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New(`ent: missing required field "SystemLog.timestamp"`)}
	}
	if _, ok := slc.mutation.Action(); !ok {
		return &ValidationError{Name: "action", err: errors.New(`ent: missing required field "SystemLog.action"`)}
	}
	if v, ok := slc.mutation.Action(); ok {
		if err := systemlog.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`ent: validator failed for field "SystemLog.action": %w`, err)}
		}
	}
	if _, ok := slc.mutation.User(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required field "SystemLog.user"`)}
	}
	if v, ok := slc.mutation.User(); ok {
		if err := systemlog.UserValidator(v); err != nil {
			return &ValidationError{Name: "user", err: fmt.Errorf(`ent: validator failed for field "SystemLog.user": %w`, err)}
		}
	}
	if _, ok := slc.mutation.ScenicArea(); !ok {
		return &ValidationError{Name: "scenic_area", err: errors.New(`ent: missing required field "SystemLog.scenic_area"`)}
	}
	if v, ok := slc.mutation.ScenicArea(); ok {
		if err := systemlog.ScenicAreaValidator(v); err != nil {
			return &ValidationError{Name: "scenic_area", err: fmt.Errorf(`ent: validator failed for field "SystemLog.scenic_area": %w`, err)}
		}
	}
	if _, ok := slc.mutation.SourceIP(); !ok {
		return &ValidationError{Name: "source_ip", err: errors.New(`ent: missing required field "SystemLog.source_ip"`)}
	}
	if v, ok := slc.mutation.SourceIP(); ok {
		if err := systemlog.SourceIPValidator(v); err != nil {
			return &ValidationError{Name: "source_ip", err: fmt.Errorf(`ent: validator failed for field "SystemLog.source_ip": %w`, err)}
		}
	}
	if _, ok := slc.mutation.LoginType(); !ok {
		return &ValidationError{Name: "login_type", err: errors.New(`ent: missing required field "SystemLog.login_type"`)}
	}
	if v, ok := slc.mutation.LoginType(); ok {
		if err := systemlog.LoginTypeValidator(v); err != nil {
			return &ValidationError{Name: "login_type", err: fmt.Errorf(`ent: validator failed for field "SystemLog.login_type": %w`, err)}
		}
	}
	if _, ok := slc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "SystemLog.content"`)}
	}
	if v, ok := slc.mutation.Content(); ok {
		if err := systemlog.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "SystemLog.content": %w`, err)}
		}
	}
	if _, ok := slc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "SystemLog.status"`)}
	}
	if v, ok := slc.mutation.Status(); ok {
		if err := systemlog.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SystemLog.status": %w`, err)}
		}
	}
	if _, ok := slc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "SystemLog.create_time"`)}
	}
	return nil
}

func (slc *SystemLogCreate) sqlSave(ctx context.Context) (*SystemLog, error) {
	if err := slc.check(); err != nil {
		return nil, err
	}
	_node, _spec := slc.createSpec()
	if err := sqlgraph.CreateNode(ctx, slc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	slc.mutation.id = &_node.ID
	slc.mutation.done = true
	return _node, nil
}

func (slc *SystemLogCreate) createSpec() (*SystemLog, *sqlgraph.CreateSpec) {
	var (
		_node = &SystemLog{config: slc.config}
		_spec = sqlgraph.NewCreateSpec(systemlog.Table, sqlgraph.NewFieldSpec(systemlog.FieldID, field.TypeUint64))
	)
	if id, ok := slc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := slc.mutation.Timestamp(); ok {
		_spec.SetField(systemlog.FieldTimestamp, field.TypeInt, value)
		_node.Timestamp = value
	}
	if value, ok := slc.mutation.Action(); ok {
		_spec.SetField(systemlog.FieldAction, field.TypeString, value)
		_node.Action = value
	}
	if value, ok := slc.mutation.User(); ok {
		_spec.SetField(systemlog.FieldUser, field.TypeString, value)
		_node.User = value
	}
	if value, ok := slc.mutation.ScenicArea(); ok {
		_spec.SetField(systemlog.FieldScenicArea, field.TypeString, value)
		_node.ScenicArea = value
	}
	if value, ok := slc.mutation.SourceIP(); ok {
		_spec.SetField(systemlog.FieldSourceIP, field.TypeString, value)
		_node.SourceIP = value
	}
	if value, ok := slc.mutation.LoginType(); ok {
		_spec.SetField(systemlog.FieldLoginType, field.TypeEnum, value)
		_node.LoginType = value
	}
	if value, ok := slc.mutation.Content(); ok {
		_spec.SetField(systemlog.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := slc.mutation.Status(); ok {
		_spec.SetField(systemlog.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := slc.mutation.Remarks(); ok {
		_spec.SetField(systemlog.FieldRemarks, field.TypeString, value)
		_node.Remarks = value
	}
	if value, ok := slc.mutation.CreateTime(); ok {
		_spec.SetField(systemlog.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	return _node, _spec
}

// SystemLogCreateBulk is the builder for creating many SystemLog entities in bulk.
type SystemLogCreateBulk struct {
	config
	err      error
	builders []*SystemLogCreate
}

// Save creates the SystemLog entities in the database.
func (slcb *SystemLogCreateBulk) Save(ctx context.Context) ([]*SystemLog, error) {
	if slcb.err != nil {
		return nil, slcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(slcb.builders))
	nodes := make([]*SystemLog, len(slcb.builders))
	mutators := make([]Mutator, len(slcb.builders))
	for i := range slcb.builders {
		func(i int, root context.Context) {
			builder := slcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SystemLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, slcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, slcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, slcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (slcb *SystemLogCreateBulk) SaveX(ctx context.Context) []*SystemLog {
	v, err := slcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (slcb *SystemLogCreateBulk) Exec(ctx context.Context) error {
	_, err := slcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (slcb *SystemLogCreateBulk) ExecX(ctx context.Context) {
	if err := slcb.Exec(ctx); err != nil {
		panic(err)
	}
}
