// Code generated by ent, DO NOT EDIT.

package schetask

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldLTE(FieldID, id))
}

// UserOrigin applies equality check predicate on the "user_origin" field. It's identical to UserOriginEQ.
func UserOrigin(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldEQ(FieldUserOrigin, v))
}

// UserType applies equality check predicate on the "user_type" field. It's identical to UserTypeEQ.
func UserType(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldEQ(FieldUserType, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldEQ(FieldUserID, v))
}

// ScenicAreaID applies equality check predicate on the "scenic_area_id" field. It's identical to ScenicAreaIDEQ.
func ScenicAreaID(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldEQ(FieldScenicAreaID, v))
}

// CarID applies equality check predicate on the "car_id" field. It's identical to CarIDEQ.
func CarID(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldEQ(FieldCarID, v))
}

// DeviceID applies equality check predicate on the "device_id" field. It's identical to DeviceIDEQ.
func DeviceID(v string) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldEQ(FieldDeviceID, v))
}

// DestID applies equality check predicate on the "dest_id" field. It's identical to DestIDEQ.
func DestID(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldEQ(FieldDestID, v))
}

// StartLon applies equality check predicate on the "start_lon" field. It's identical to StartLonEQ.
func StartLon(v float64) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldEQ(FieldStartLon, v))
}

// StartLat applies equality check predicate on the "start_lat" field. It's identical to StartLatEQ.
func StartLat(v float64) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldEQ(FieldStartLat, v))
}

// DestLon applies equality check predicate on the "dest_lon" field. It's identical to DestLonEQ.
func DestLon(v float64) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldEQ(FieldDestLon, v))
}

// DestLat applies equality check predicate on the "dest_lat" field. It's identical to DestLatEQ.
func DestLat(v float64) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldEQ(FieldDestLat, v))
}

// ScheMode applies equality check predicate on the "sche_mode" field. It's identical to ScheModeEQ.
func ScheMode(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldEQ(FieldScheMode, v))
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldEQ(FieldState, v))
}

// AbnormalState applies equality check predicate on the "abnormal_state" field. It's identical to AbnormalStateEQ.
func AbnormalState(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldEQ(FieldAbnormalState, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldEQ(FieldRemark, v))
}

// RestartScheTime applies equality check predicate on the "restart_sche_time" field. It's identical to RestartScheTimeEQ.
func RestartScheTime(v time.Time) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldEQ(FieldRestartScheTime, v))
}

// EndTime applies equality check predicate on the "end_time" field. It's identical to EndTimeEQ.
func EndTime(v time.Time) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldEQ(FieldEndTime, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldEQ(FieldUpdateTime, v))
}

// UserOriginEQ applies the EQ predicate on the "user_origin" field.
func UserOriginEQ(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldEQ(FieldUserOrigin, v))
}

// UserOriginNEQ applies the NEQ predicate on the "user_origin" field.
func UserOriginNEQ(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldNEQ(FieldUserOrigin, v))
}

// UserOriginIn applies the In predicate on the "user_origin" field.
func UserOriginIn(vs ...int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldIn(FieldUserOrigin, vs...))
}

// UserOriginNotIn applies the NotIn predicate on the "user_origin" field.
func UserOriginNotIn(vs ...int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldNotIn(FieldUserOrigin, vs...))
}

// UserOriginGT applies the GT predicate on the "user_origin" field.
func UserOriginGT(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldGT(FieldUserOrigin, v))
}

// UserOriginGTE applies the GTE predicate on the "user_origin" field.
func UserOriginGTE(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldGTE(FieldUserOrigin, v))
}

// UserOriginLT applies the LT predicate on the "user_origin" field.
func UserOriginLT(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldLT(FieldUserOrigin, v))
}

// UserOriginLTE applies the LTE predicate on the "user_origin" field.
func UserOriginLTE(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldLTE(FieldUserOrigin, v))
}

// UserTypeEQ applies the EQ predicate on the "user_type" field.
func UserTypeEQ(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldEQ(FieldUserType, v))
}

// UserTypeNEQ applies the NEQ predicate on the "user_type" field.
func UserTypeNEQ(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldNEQ(FieldUserType, v))
}

// UserTypeIn applies the In predicate on the "user_type" field.
func UserTypeIn(vs ...int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldIn(FieldUserType, vs...))
}

// UserTypeNotIn applies the NotIn predicate on the "user_type" field.
func UserTypeNotIn(vs ...int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldNotIn(FieldUserType, vs...))
}

// UserTypeGT applies the GT predicate on the "user_type" field.
func UserTypeGT(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldGT(FieldUserType, v))
}

// UserTypeGTE applies the GTE predicate on the "user_type" field.
func UserTypeGTE(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldGTE(FieldUserType, v))
}

// UserTypeLT applies the LT predicate on the "user_type" field.
func UserTypeLT(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldLT(FieldUserType, v))
}

// UserTypeLTE applies the LTE predicate on the "user_type" field.
func UserTypeLTE(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldLTE(FieldUserType, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldLTE(FieldUserID, v))
}

// ScenicAreaIDEQ applies the EQ predicate on the "scenic_area_id" field.
func ScenicAreaIDEQ(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldEQ(FieldScenicAreaID, v))
}

// ScenicAreaIDNEQ applies the NEQ predicate on the "scenic_area_id" field.
func ScenicAreaIDNEQ(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldNEQ(FieldScenicAreaID, v))
}

// ScenicAreaIDIn applies the In predicate on the "scenic_area_id" field.
func ScenicAreaIDIn(vs ...int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldIn(FieldScenicAreaID, vs...))
}

// ScenicAreaIDNotIn applies the NotIn predicate on the "scenic_area_id" field.
func ScenicAreaIDNotIn(vs ...int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldNotIn(FieldScenicAreaID, vs...))
}

// ScenicAreaIDGT applies the GT predicate on the "scenic_area_id" field.
func ScenicAreaIDGT(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldGT(FieldScenicAreaID, v))
}

// ScenicAreaIDGTE applies the GTE predicate on the "scenic_area_id" field.
func ScenicAreaIDGTE(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldGTE(FieldScenicAreaID, v))
}

// ScenicAreaIDLT applies the LT predicate on the "scenic_area_id" field.
func ScenicAreaIDLT(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldLT(FieldScenicAreaID, v))
}

// ScenicAreaIDLTE applies the LTE predicate on the "scenic_area_id" field.
func ScenicAreaIDLTE(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldLTE(FieldScenicAreaID, v))
}

// CarIDEQ applies the EQ predicate on the "car_id" field.
func CarIDEQ(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldEQ(FieldCarID, v))
}

// CarIDNEQ applies the NEQ predicate on the "car_id" field.
func CarIDNEQ(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldNEQ(FieldCarID, v))
}

// CarIDIn applies the In predicate on the "car_id" field.
func CarIDIn(vs ...int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldIn(FieldCarID, vs...))
}

// CarIDNotIn applies the NotIn predicate on the "car_id" field.
func CarIDNotIn(vs ...int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldNotIn(FieldCarID, vs...))
}

// DeviceIDEQ applies the EQ predicate on the "device_id" field.
func DeviceIDEQ(v string) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldEQ(FieldDeviceID, v))
}

// DeviceIDNEQ applies the NEQ predicate on the "device_id" field.
func DeviceIDNEQ(v string) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldNEQ(FieldDeviceID, v))
}

// DeviceIDIn applies the In predicate on the "device_id" field.
func DeviceIDIn(vs ...string) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldIn(FieldDeviceID, vs...))
}

// DeviceIDNotIn applies the NotIn predicate on the "device_id" field.
func DeviceIDNotIn(vs ...string) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldNotIn(FieldDeviceID, vs...))
}

// DeviceIDGT applies the GT predicate on the "device_id" field.
func DeviceIDGT(v string) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldGT(FieldDeviceID, v))
}

// DeviceIDGTE applies the GTE predicate on the "device_id" field.
func DeviceIDGTE(v string) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldGTE(FieldDeviceID, v))
}

// DeviceIDLT applies the LT predicate on the "device_id" field.
func DeviceIDLT(v string) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldLT(FieldDeviceID, v))
}

// DeviceIDLTE applies the LTE predicate on the "device_id" field.
func DeviceIDLTE(v string) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldLTE(FieldDeviceID, v))
}

// DeviceIDContains applies the Contains predicate on the "device_id" field.
func DeviceIDContains(v string) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldContains(FieldDeviceID, v))
}

// DeviceIDHasPrefix applies the HasPrefix predicate on the "device_id" field.
func DeviceIDHasPrefix(v string) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldHasPrefix(FieldDeviceID, v))
}

// DeviceIDHasSuffix applies the HasSuffix predicate on the "device_id" field.
func DeviceIDHasSuffix(v string) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldHasSuffix(FieldDeviceID, v))
}

// DeviceIDEqualFold applies the EqualFold predicate on the "device_id" field.
func DeviceIDEqualFold(v string) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldEqualFold(FieldDeviceID, v))
}

// DeviceIDContainsFold applies the ContainsFold predicate on the "device_id" field.
func DeviceIDContainsFold(v string) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldContainsFold(FieldDeviceID, v))
}

// DestIDEQ applies the EQ predicate on the "dest_id" field.
func DestIDEQ(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldEQ(FieldDestID, v))
}

// DestIDNEQ applies the NEQ predicate on the "dest_id" field.
func DestIDNEQ(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldNEQ(FieldDestID, v))
}

// DestIDIn applies the In predicate on the "dest_id" field.
func DestIDIn(vs ...int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldIn(FieldDestID, vs...))
}

// DestIDNotIn applies the NotIn predicate on the "dest_id" field.
func DestIDNotIn(vs ...int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldNotIn(FieldDestID, vs...))
}

// DestIDGT applies the GT predicate on the "dest_id" field.
func DestIDGT(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldGT(FieldDestID, v))
}

// DestIDGTE applies the GTE predicate on the "dest_id" field.
func DestIDGTE(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldGTE(FieldDestID, v))
}

// DestIDLT applies the LT predicate on the "dest_id" field.
func DestIDLT(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldLT(FieldDestID, v))
}

// DestIDLTE applies the LTE predicate on the "dest_id" field.
func DestIDLTE(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldLTE(FieldDestID, v))
}

// StartLonEQ applies the EQ predicate on the "start_lon" field.
func StartLonEQ(v float64) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldEQ(FieldStartLon, v))
}

// StartLonNEQ applies the NEQ predicate on the "start_lon" field.
func StartLonNEQ(v float64) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldNEQ(FieldStartLon, v))
}

// StartLonIn applies the In predicate on the "start_lon" field.
func StartLonIn(vs ...float64) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldIn(FieldStartLon, vs...))
}

// StartLonNotIn applies the NotIn predicate on the "start_lon" field.
func StartLonNotIn(vs ...float64) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldNotIn(FieldStartLon, vs...))
}

// StartLonGT applies the GT predicate on the "start_lon" field.
func StartLonGT(v float64) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldGT(FieldStartLon, v))
}

// StartLonGTE applies the GTE predicate on the "start_lon" field.
func StartLonGTE(v float64) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldGTE(FieldStartLon, v))
}

// StartLonLT applies the LT predicate on the "start_lon" field.
func StartLonLT(v float64) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldLT(FieldStartLon, v))
}

// StartLonLTE applies the LTE predicate on the "start_lon" field.
func StartLonLTE(v float64) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldLTE(FieldStartLon, v))
}

// StartLatEQ applies the EQ predicate on the "start_lat" field.
func StartLatEQ(v float64) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldEQ(FieldStartLat, v))
}

// StartLatNEQ applies the NEQ predicate on the "start_lat" field.
func StartLatNEQ(v float64) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldNEQ(FieldStartLat, v))
}

// StartLatIn applies the In predicate on the "start_lat" field.
func StartLatIn(vs ...float64) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldIn(FieldStartLat, vs...))
}

// StartLatNotIn applies the NotIn predicate on the "start_lat" field.
func StartLatNotIn(vs ...float64) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldNotIn(FieldStartLat, vs...))
}

// StartLatGT applies the GT predicate on the "start_lat" field.
func StartLatGT(v float64) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldGT(FieldStartLat, v))
}

// StartLatGTE applies the GTE predicate on the "start_lat" field.
func StartLatGTE(v float64) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldGTE(FieldStartLat, v))
}

// StartLatLT applies the LT predicate on the "start_lat" field.
func StartLatLT(v float64) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldLT(FieldStartLat, v))
}

// StartLatLTE applies the LTE predicate on the "start_lat" field.
func StartLatLTE(v float64) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldLTE(FieldStartLat, v))
}

// DestLonEQ applies the EQ predicate on the "dest_lon" field.
func DestLonEQ(v float64) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldEQ(FieldDestLon, v))
}

// DestLonNEQ applies the NEQ predicate on the "dest_lon" field.
func DestLonNEQ(v float64) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldNEQ(FieldDestLon, v))
}

// DestLonIn applies the In predicate on the "dest_lon" field.
func DestLonIn(vs ...float64) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldIn(FieldDestLon, vs...))
}

// DestLonNotIn applies the NotIn predicate on the "dest_lon" field.
func DestLonNotIn(vs ...float64) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldNotIn(FieldDestLon, vs...))
}

// DestLonGT applies the GT predicate on the "dest_lon" field.
func DestLonGT(v float64) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldGT(FieldDestLon, v))
}

// DestLonGTE applies the GTE predicate on the "dest_lon" field.
func DestLonGTE(v float64) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldGTE(FieldDestLon, v))
}

// DestLonLT applies the LT predicate on the "dest_lon" field.
func DestLonLT(v float64) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldLT(FieldDestLon, v))
}

// DestLonLTE applies the LTE predicate on the "dest_lon" field.
func DestLonLTE(v float64) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldLTE(FieldDestLon, v))
}

// DestLatEQ applies the EQ predicate on the "dest_lat" field.
func DestLatEQ(v float64) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldEQ(FieldDestLat, v))
}

// DestLatNEQ applies the NEQ predicate on the "dest_lat" field.
func DestLatNEQ(v float64) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldNEQ(FieldDestLat, v))
}

// DestLatIn applies the In predicate on the "dest_lat" field.
func DestLatIn(vs ...float64) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldIn(FieldDestLat, vs...))
}

// DestLatNotIn applies the NotIn predicate on the "dest_lat" field.
func DestLatNotIn(vs ...float64) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldNotIn(FieldDestLat, vs...))
}

// DestLatGT applies the GT predicate on the "dest_lat" field.
func DestLatGT(v float64) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldGT(FieldDestLat, v))
}

// DestLatGTE applies the GTE predicate on the "dest_lat" field.
func DestLatGTE(v float64) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldGTE(FieldDestLat, v))
}

// DestLatLT applies the LT predicate on the "dest_lat" field.
func DestLatLT(v float64) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldLT(FieldDestLat, v))
}

// DestLatLTE applies the LTE predicate on the "dest_lat" field.
func DestLatLTE(v float64) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldLTE(FieldDestLat, v))
}

// ScheModeEQ applies the EQ predicate on the "sche_mode" field.
func ScheModeEQ(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldEQ(FieldScheMode, v))
}

// ScheModeNEQ applies the NEQ predicate on the "sche_mode" field.
func ScheModeNEQ(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldNEQ(FieldScheMode, v))
}

// ScheModeIn applies the In predicate on the "sche_mode" field.
func ScheModeIn(vs ...int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldIn(FieldScheMode, vs...))
}

// ScheModeNotIn applies the NotIn predicate on the "sche_mode" field.
func ScheModeNotIn(vs ...int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldNotIn(FieldScheMode, vs...))
}

// ScheModeGT applies the GT predicate on the "sche_mode" field.
func ScheModeGT(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldGT(FieldScheMode, v))
}

// ScheModeGTE applies the GTE predicate on the "sche_mode" field.
func ScheModeGTE(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldGTE(FieldScheMode, v))
}

// ScheModeLT applies the LT predicate on the "sche_mode" field.
func ScheModeLT(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldLT(FieldScheMode, v))
}

// ScheModeLTE applies the LTE predicate on the "sche_mode" field.
func ScheModeLTE(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldLTE(FieldScheMode, v))
}

// ScheArgsIsNil applies the IsNil predicate on the "sche_args" field.
func ScheArgsIsNil() predicate.ScheTask {
	return predicate.ScheTask(sql.FieldIsNull(FieldScheArgs))
}

// ScheArgsNotNil applies the NotNil predicate on the "sche_args" field.
func ScheArgsNotNil() predicate.ScheTask {
	return predicate.ScheTask(sql.FieldNotNull(FieldScheArgs))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldLTE(FieldState, v))
}

// AbnormalStateEQ applies the EQ predicate on the "abnormal_state" field.
func AbnormalStateEQ(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldEQ(FieldAbnormalState, v))
}

// AbnormalStateNEQ applies the NEQ predicate on the "abnormal_state" field.
func AbnormalStateNEQ(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldNEQ(FieldAbnormalState, v))
}

// AbnormalStateIn applies the In predicate on the "abnormal_state" field.
func AbnormalStateIn(vs ...int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldIn(FieldAbnormalState, vs...))
}

// AbnormalStateNotIn applies the NotIn predicate on the "abnormal_state" field.
func AbnormalStateNotIn(vs ...int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldNotIn(FieldAbnormalState, vs...))
}

// AbnormalStateGT applies the GT predicate on the "abnormal_state" field.
func AbnormalStateGT(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldGT(FieldAbnormalState, v))
}

// AbnormalStateGTE applies the GTE predicate on the "abnormal_state" field.
func AbnormalStateGTE(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldGTE(FieldAbnormalState, v))
}

// AbnormalStateLT applies the LT predicate on the "abnormal_state" field.
func AbnormalStateLT(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldLT(FieldAbnormalState, v))
}

// AbnormalStateLTE applies the LTE predicate on the "abnormal_state" field.
func AbnormalStateLTE(v int) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldLTE(FieldAbnormalState, v))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldContainsFold(FieldRemark, v))
}

// RestartScheTimeEQ applies the EQ predicate on the "restart_sche_time" field.
func RestartScheTimeEQ(v time.Time) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldEQ(FieldRestartScheTime, v))
}

// RestartScheTimeNEQ applies the NEQ predicate on the "restart_sche_time" field.
func RestartScheTimeNEQ(v time.Time) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldNEQ(FieldRestartScheTime, v))
}

// RestartScheTimeIn applies the In predicate on the "restart_sche_time" field.
func RestartScheTimeIn(vs ...time.Time) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldIn(FieldRestartScheTime, vs...))
}

// RestartScheTimeNotIn applies the NotIn predicate on the "restart_sche_time" field.
func RestartScheTimeNotIn(vs ...time.Time) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldNotIn(FieldRestartScheTime, vs...))
}

// RestartScheTimeGT applies the GT predicate on the "restart_sche_time" field.
func RestartScheTimeGT(v time.Time) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldGT(FieldRestartScheTime, v))
}

// RestartScheTimeGTE applies the GTE predicate on the "restart_sche_time" field.
func RestartScheTimeGTE(v time.Time) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldGTE(FieldRestartScheTime, v))
}

// RestartScheTimeLT applies the LT predicate on the "restart_sche_time" field.
func RestartScheTimeLT(v time.Time) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldLT(FieldRestartScheTime, v))
}

// RestartScheTimeLTE applies the LTE predicate on the "restart_sche_time" field.
func RestartScheTimeLTE(v time.Time) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldLTE(FieldRestartScheTime, v))
}

// RestartScheTimeIsNil applies the IsNil predicate on the "restart_sche_time" field.
func RestartScheTimeIsNil() predicate.ScheTask {
	return predicate.ScheTask(sql.FieldIsNull(FieldRestartScheTime))
}

// RestartScheTimeNotNil applies the NotNil predicate on the "restart_sche_time" field.
func RestartScheTimeNotNil() predicate.ScheTask {
	return predicate.ScheTask(sql.FieldNotNull(FieldRestartScheTime))
}

// EndTimeEQ applies the EQ predicate on the "end_time" field.
func EndTimeEQ(v time.Time) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldEQ(FieldEndTime, v))
}

// EndTimeNEQ applies the NEQ predicate on the "end_time" field.
func EndTimeNEQ(v time.Time) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldNEQ(FieldEndTime, v))
}

// EndTimeIn applies the In predicate on the "end_time" field.
func EndTimeIn(vs ...time.Time) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldIn(FieldEndTime, vs...))
}

// EndTimeNotIn applies the NotIn predicate on the "end_time" field.
func EndTimeNotIn(vs ...time.Time) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldNotIn(FieldEndTime, vs...))
}

// EndTimeGT applies the GT predicate on the "end_time" field.
func EndTimeGT(v time.Time) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldGT(FieldEndTime, v))
}

// EndTimeGTE applies the GTE predicate on the "end_time" field.
func EndTimeGTE(v time.Time) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldGTE(FieldEndTime, v))
}

// EndTimeLT applies the LT predicate on the "end_time" field.
func EndTimeLT(v time.Time) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldLT(FieldEndTime, v))
}

// EndTimeLTE applies the LTE predicate on the "end_time" field.
func EndTimeLTE(v time.Time) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldLTE(FieldEndTime, v))
}

// EndTimeIsNil applies the IsNil predicate on the "end_time" field.
func EndTimeIsNil() predicate.ScheTask {
	return predicate.ScheTask(sql.FieldIsNull(FieldEndTime))
}

// EndTimeNotNil applies the NotNil predicate on the "end_time" field.
func EndTimeNotNil() predicate.ScheTask {
	return predicate.ScheTask(sql.FieldNotNull(FieldEndTime))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.ScheTask {
	return predicate.ScheTask(sql.FieldLTE(FieldUpdateTime, v))
}

// HasCar applies the HasEdge predicate on the "car" edge.
func HasCar() predicate.ScheTask {
	return predicate.ScheTask(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CarTable, CarColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarWith applies the HasEdge predicate on the "car" edge with a given conditions (other predicates).
func HasCarWith(preds ...predicate.Car) predicate.ScheTask {
	return predicate.ScheTask(func(s *sql.Selector) {
		step := newCarStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEvents applies the HasEdge predicate on the "events" edge.
func HasEvents() predicate.ScheTask {
	return predicate.ScheTask(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EventsTable, EventsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventsWith applies the HasEdge predicate on the "events" edge with a given conditions (other predicates).
func HasEventsWith(preds ...predicate.ScheTaskEvent) predicate.ScheTask {
	return predicate.ScheTask(func(s *sql.Selector) {
		step := newEventsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ScheTask) predicate.ScheTask {
	return predicate.ScheTask(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ScheTask) predicate.ScheTask {
	return predicate.ScheTask(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ScheTask) predicate.ScheTask {
	return predicate.ScheTask(sql.NotPredicates(p))
}
