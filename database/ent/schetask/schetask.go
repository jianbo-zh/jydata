// Code generated by ent, DO NOT EDIT.

package schetask

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the schetask type in the database.
	Label = "sche_task"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserOrigin holds the string denoting the user_origin field in the database.
	FieldUserOrigin = "user_origin"
	// FieldUserType holds the string denoting the user_type field in the database.
	FieldUserType = "user_type"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldScenicAreaID holds the string denoting the scenic_area_id field in the database.
	FieldScenicAreaID = "scenic_area_id"
	// FieldCarID holds the string denoting the car_id field in the database.
	FieldCarID = "car_id"
	// FieldDeviceID holds the string denoting the device_id field in the database.
	FieldDeviceID = "device_id"
	// FieldDestID holds the string denoting the dest_id field in the database.
	FieldDestID = "dest_id"
	// FieldDestLon holds the string denoting the dest_lon field in the database.
	FieldDestLon = "dest_lon"
	// FieldDestLat holds the string denoting the dest_lat field in the database.
	FieldDestLat = "dest_lat"
	// FieldScheMode holds the string denoting the sche_mode field in the database.
	FieldScheMode = "sche_mode"
	// FieldScheArgs holds the string denoting the sche_args field in the database.
	FieldScheArgs = "sche_args"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldAbnormalState holds the string denoting the abnormal_state field in the database.
	FieldAbnormalState = "abnormal_state"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldRoutingPath holds the string denoting the routing_path field in the database.
	FieldRoutingPath = "routing_path"
	// FieldRestartScheTime holds the string denoting the restart_sche_time field in the database.
	FieldRestartScheTime = "restart_sche_time"
	// FieldEndTime holds the string denoting the end_time field in the database.
	FieldEndTime = "end_time"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// EdgeCar holds the string denoting the car edge name in mutations.
	EdgeCar = "car"
	// EdgeEvents holds the string denoting the events edge name in mutations.
	EdgeEvents = "events"
	// Table holds the table name of the schetask in the database.
	Table = "sche_tasks"
	// CarTable is the table that holds the car relation/edge.
	CarTable = "sche_tasks"
	// CarInverseTable is the table name for the Car entity.
	// It exists in this package in order to avoid circular dependency with the "car" package.
	CarInverseTable = "cars"
	// CarColumn is the table column denoting the car relation/edge.
	CarColumn = "car_id"
	// EventsTable is the table that holds the events relation/edge.
	EventsTable = "sche_task_events"
	// EventsInverseTable is the table name for the ScheTaskEvent entity.
	// It exists in this package in order to avoid circular dependency with the "schetaskevent" package.
	EventsInverseTable = "sche_task_events"
	// EventsColumn is the table column denoting the events relation/edge.
	EventsColumn = "sche_task_id"
)

// Columns holds all SQL columns for schetask fields.
var Columns = []string{
	FieldID,
	FieldUserOrigin,
	FieldUserType,
	FieldUserID,
	FieldScenicAreaID,
	FieldCarID,
	FieldDeviceID,
	FieldDestID,
	FieldDestLon,
	FieldDestLat,
	FieldScheMode,
	FieldScheArgs,
	FieldState,
	FieldAbnormalState,
	FieldRemark,
	FieldRoutingPath,
	FieldRestartScheTime,
	FieldEndTime,
	FieldCreateTime,
	FieldUpdateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUserOrigin holds the default value on creation for the "user_origin" field.
	DefaultUserOrigin int
	// DefaultUserType holds the default value on creation for the "user_type" field.
	DefaultUserType int
	// DefaultUserID holds the default value on creation for the "user_id" field.
	DefaultUserID int
	// DefaultScheMode holds the default value on creation for the "sche_mode" field.
	DefaultScheMode int
	// DefaultAbnormalState holds the default value on creation for the "abnormal_state" field.
	DefaultAbnormalState int
	// DefaultRemark holds the default value on creation for the "remark" field.
	DefaultRemark string
	// DefaultRestartScheTime holds the default value on creation for the "restart_sche_time" field.
	DefaultRestartScheTime time.Time
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)

// OrderOption defines the ordering options for the ScheTask queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserOrigin orders the results by the user_origin field.
func ByUserOrigin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserOrigin, opts...).ToFunc()
}

// ByUserType orders the results by the user_type field.
func ByUserType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserType, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByScenicAreaID orders the results by the scenic_area_id field.
func ByScenicAreaID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScenicAreaID, opts...).ToFunc()
}

// ByCarID orders the results by the car_id field.
func ByCarID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCarID, opts...).ToFunc()
}

// ByDeviceID orders the results by the device_id field.
func ByDeviceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceID, opts...).ToFunc()
}

// ByDestID orders the results by the dest_id field.
func ByDestID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDestID, opts...).ToFunc()
}

// ByDestLon orders the results by the dest_lon field.
func ByDestLon(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDestLon, opts...).ToFunc()
}

// ByDestLat orders the results by the dest_lat field.
func ByDestLat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDestLat, opts...).ToFunc()
}

// ByScheMode orders the results by the sche_mode field.
func ByScheMode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScheMode, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByAbnormalState orders the results by the abnormal_state field.
func ByAbnormalState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAbnormalState, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByRestartScheTime orders the results by the restart_sche_time field.
func ByRestartScheTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRestartScheTime, opts...).ToFunc()
}

// ByEndTime orders the results by the end_time field.
func ByEndTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndTime, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByCarField orders the results by car field.
func ByCarField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarStep(), sql.OrderByField(field, opts...))
	}
}

// ByEventsCount orders the results by events count.
func ByEventsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEventsStep(), opts...)
	}
}

// ByEvents orders the results by events terms.
func ByEvents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCarStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CarTable, CarColumn),
	)
}
func newEventsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EventsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EventsTable, EventsColumn),
	)
}
