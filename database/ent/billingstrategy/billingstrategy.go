// Code generated by ent, DO NOT EDIT.

package billingstrategy

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the billingstrategy type in the database.
	Label = "billing_strategy"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldScenicAreaID holds the string denoting the scenic_area_id field in the database.
	FieldScenicAreaID = "scenic_area_id"
	// FieldModelID holds the string denoting the model_id field in the database.
	FieldModelID = "model_id"
	// FieldMainMode holds the string denoting the main_mode field in the database.
	FieldMainMode = "main_mode"
	// FieldStartTimePrice holds the string denoting the start_time_price field in the database.
	FieldStartTimePrice = "start_time_price"
	// FieldStartTimeUnit holds the string denoting the start_time_unit field in the database.
	FieldStartTimeUnit = "start_time_unit"
	// FieldNormalTimePrice holds the string denoting the normal_time_price field in the database.
	FieldNormalTimePrice = "normal_time_price"
	// FieldNormalTimeUnit holds the string denoting the normal_time_unit field in the database.
	FieldNormalTimeUnit = "normal_time_unit"
	// FieldStartMileagePrice holds the string denoting the start_mileage_price field in the database.
	FieldStartMileagePrice = "start_mileage_price"
	// FieldStartMileageUnit holds the string denoting the start_mileage_unit field in the database.
	FieldStartMileageUnit = "start_mileage_unit"
	// FieldNormalMileagePrice holds the string denoting the normal_mileage_price field in the database.
	FieldNormalMileagePrice = "normal_mileage_price"
	// FieldNormalMileageUnit holds the string denoting the normal_mileage_unit field in the database.
	FieldNormalMileageUnit = "normal_mileage_unit"
	// FieldCappedAmount holds the string denoting the capped_amount field in the database.
	FieldCappedAmount = "capped_amount"
	// FieldDepositAmount holds the string denoting the deposit_amount field in the database.
	FieldDepositAmount = "deposit_amount"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// EdgeBackgroundScenicArea holds the string denoting the background_scenic_area edge name in mutations.
	EdgeBackgroundScenicArea = "background_scenic_area"
	// Table holds the table name of the billingstrategy in the database.
	Table = "billing_strategies"
	// BackgroundScenicAreaTable is the table that holds the background_scenic_area relation/edge.
	BackgroundScenicAreaTable = "billing_strategies"
	// BackgroundScenicAreaInverseTable is the table name for the ScenicArea entity.
	// It exists in this package in order to avoid circular dependency with the "scenicarea" package.
	BackgroundScenicAreaInverseTable = "scenic_areas"
	// BackgroundScenicAreaColumn is the table column denoting the background_scenic_area relation/edge.
	BackgroundScenicAreaColumn = "scenic_area_id"
)

// Columns holds all SQL columns for billingstrategy fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldScenicAreaID,
	FieldModelID,
	FieldMainMode,
	FieldStartTimePrice,
	FieldStartTimeUnit,
	FieldNormalTimePrice,
	FieldNormalTimeUnit,
	FieldStartMileagePrice,
	FieldStartMileageUnit,
	FieldNormalMileagePrice,
	FieldNormalMileageUnit,
	FieldCappedAmount,
	FieldDepositAmount,
	FieldCreateTime,
	FieldUpdateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultStartTimeUnit holds the default value on creation for the "start_time_unit" field.
	DefaultStartTimeUnit int
	// DefaultNormalTimeUnit holds the default value on creation for the "normal_time_unit" field.
	DefaultNormalTimeUnit int
	// DefaultStartMileageUnit holds the default value on creation for the "start_mileage_unit" field.
	DefaultStartMileageUnit int
	// DefaultNormalMileageUnit holds the default value on creation for the "normal_mileage_unit" field.
	DefaultNormalMileageUnit int
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)

// OrderOption defines the ordering options for the BillingStrategy queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByScenicAreaID orders the results by the scenic_area_id field.
func ByScenicAreaID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScenicAreaID, opts...).ToFunc()
}

// ByModelID orders the results by the model_id field.
func ByModelID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModelID, opts...).ToFunc()
}

// ByMainMode orders the results by the main_mode field.
func ByMainMode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMainMode, opts...).ToFunc()
}

// ByStartTimePrice orders the results by the start_time_price field.
func ByStartTimePrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartTimePrice, opts...).ToFunc()
}

// ByStartTimeUnit orders the results by the start_time_unit field.
func ByStartTimeUnit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartTimeUnit, opts...).ToFunc()
}

// ByNormalTimePrice orders the results by the normal_time_price field.
func ByNormalTimePrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNormalTimePrice, opts...).ToFunc()
}

// ByNormalTimeUnit orders the results by the normal_time_unit field.
func ByNormalTimeUnit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNormalTimeUnit, opts...).ToFunc()
}

// ByStartMileagePrice orders the results by the start_mileage_price field.
func ByStartMileagePrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartMileagePrice, opts...).ToFunc()
}

// ByStartMileageUnit orders the results by the start_mileage_unit field.
func ByStartMileageUnit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartMileageUnit, opts...).ToFunc()
}

// ByNormalMileagePrice orders the results by the normal_mileage_price field.
func ByNormalMileagePrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNormalMileagePrice, opts...).ToFunc()
}

// ByNormalMileageUnit orders the results by the normal_mileage_unit field.
func ByNormalMileageUnit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNormalMileageUnit, opts...).ToFunc()
}

// ByCappedAmount orders the results by the capped_amount field.
func ByCappedAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCappedAmount, opts...).ToFunc()
}

// ByDepositAmount orders the results by the deposit_amount field.
func ByDepositAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDepositAmount, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByBackgroundScenicAreaField orders the results by background_scenic_area field.
func ByBackgroundScenicAreaField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBackgroundScenicAreaStep(), sql.OrderByField(field, opts...))
	}
}
func newBackgroundScenicAreaStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BackgroundScenicAreaInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BackgroundScenicAreaTable, BackgroundScenicAreaColumn),
	)
}
