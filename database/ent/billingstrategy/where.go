// Code generated by ent, DO NOT EDIT.

package billingstrategy

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldEQ(FieldName, v))
}

// ScenicAreaID applies equality check predicate on the "scenic_area_id" field. It's identical to ScenicAreaIDEQ.
func ScenicAreaID(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldEQ(FieldScenicAreaID, v))
}

// ModelID applies equality check predicate on the "model_id" field. It's identical to ModelIDEQ.
func ModelID(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldEQ(FieldModelID, v))
}

// MainMode applies equality check predicate on the "main_mode" field. It's identical to MainModeEQ.
func MainMode(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldEQ(FieldMainMode, v))
}

// StartTimePrice applies equality check predicate on the "start_time_price" field. It's identical to StartTimePriceEQ.
func StartTimePrice(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldEQ(FieldStartTimePrice, v))
}

// StartTimeUnit applies equality check predicate on the "start_time_unit" field. It's identical to StartTimeUnitEQ.
func StartTimeUnit(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldEQ(FieldStartTimeUnit, v))
}

// NormalTimePrice applies equality check predicate on the "normal_time_price" field. It's identical to NormalTimePriceEQ.
func NormalTimePrice(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldEQ(FieldNormalTimePrice, v))
}

// NormalTimeUnit applies equality check predicate on the "normal_time_unit" field. It's identical to NormalTimeUnitEQ.
func NormalTimeUnit(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldEQ(FieldNormalTimeUnit, v))
}

// StartMileagePrice applies equality check predicate on the "start_mileage_price" field. It's identical to StartMileagePriceEQ.
func StartMileagePrice(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldEQ(FieldStartMileagePrice, v))
}

// StartMileageUnit applies equality check predicate on the "start_mileage_unit" field. It's identical to StartMileageUnitEQ.
func StartMileageUnit(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldEQ(FieldStartMileageUnit, v))
}

// NormalMileagePrice applies equality check predicate on the "normal_mileage_price" field. It's identical to NormalMileagePriceEQ.
func NormalMileagePrice(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldEQ(FieldNormalMileagePrice, v))
}

// NormalMileageUnit applies equality check predicate on the "normal_mileage_unit" field. It's identical to NormalMileageUnitEQ.
func NormalMileageUnit(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldEQ(FieldNormalMileageUnit, v))
}

// StartStopPrice applies equality check predicate on the "start_stop_price" field. It's identical to StartStopPriceEQ.
func StartStopPrice(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldEQ(FieldStartStopPrice, v))
}

// StartStopUnit applies equality check predicate on the "start_stop_unit" field. It's identical to StartStopUnitEQ.
func StartStopUnit(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldEQ(FieldStartStopUnit, v))
}

// NormalStopPrice applies equality check predicate on the "normal_stop_price" field. It's identical to NormalStopPriceEQ.
func NormalStopPrice(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldEQ(FieldNormalStopPrice, v))
}

// NormalStopUnit applies equality check predicate on the "normal_stop_unit" field. It's identical to NormalStopUnitEQ.
func NormalStopUnit(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldEQ(FieldNormalStopUnit, v))
}

// CappedAmount applies equality check predicate on the "capped_amount" field. It's identical to CappedAmountEQ.
func CappedAmount(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldEQ(FieldCappedAmount, v))
}

// DepositAmount applies equality check predicate on the "deposit_amount" field. It's identical to DepositAmountEQ.
func DepositAmount(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldEQ(FieldDepositAmount, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldEQ(FieldUpdateTime, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldContainsFold(FieldName, v))
}

// ScenicAreaIDEQ applies the EQ predicate on the "scenic_area_id" field.
func ScenicAreaIDEQ(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldEQ(FieldScenicAreaID, v))
}

// ScenicAreaIDNEQ applies the NEQ predicate on the "scenic_area_id" field.
func ScenicAreaIDNEQ(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldNEQ(FieldScenicAreaID, v))
}

// ScenicAreaIDIn applies the In predicate on the "scenic_area_id" field.
func ScenicAreaIDIn(vs ...int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldIn(FieldScenicAreaID, vs...))
}

// ScenicAreaIDNotIn applies the NotIn predicate on the "scenic_area_id" field.
func ScenicAreaIDNotIn(vs ...int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldNotIn(FieldScenicAreaID, vs...))
}

// ModelIDEQ applies the EQ predicate on the "model_id" field.
func ModelIDEQ(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldEQ(FieldModelID, v))
}

// ModelIDNEQ applies the NEQ predicate on the "model_id" field.
func ModelIDNEQ(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldNEQ(FieldModelID, v))
}

// ModelIDIn applies the In predicate on the "model_id" field.
func ModelIDIn(vs ...int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldIn(FieldModelID, vs...))
}

// ModelIDNotIn applies the NotIn predicate on the "model_id" field.
func ModelIDNotIn(vs ...int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldNotIn(FieldModelID, vs...))
}

// ModelIDGT applies the GT predicate on the "model_id" field.
func ModelIDGT(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldGT(FieldModelID, v))
}

// ModelIDGTE applies the GTE predicate on the "model_id" field.
func ModelIDGTE(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldGTE(FieldModelID, v))
}

// ModelIDLT applies the LT predicate on the "model_id" field.
func ModelIDLT(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldLT(FieldModelID, v))
}

// ModelIDLTE applies the LTE predicate on the "model_id" field.
func ModelIDLTE(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldLTE(FieldModelID, v))
}

// MainModeEQ applies the EQ predicate on the "main_mode" field.
func MainModeEQ(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldEQ(FieldMainMode, v))
}

// MainModeNEQ applies the NEQ predicate on the "main_mode" field.
func MainModeNEQ(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldNEQ(FieldMainMode, v))
}

// MainModeIn applies the In predicate on the "main_mode" field.
func MainModeIn(vs ...int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldIn(FieldMainMode, vs...))
}

// MainModeNotIn applies the NotIn predicate on the "main_mode" field.
func MainModeNotIn(vs ...int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldNotIn(FieldMainMode, vs...))
}

// MainModeGT applies the GT predicate on the "main_mode" field.
func MainModeGT(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldGT(FieldMainMode, v))
}

// MainModeGTE applies the GTE predicate on the "main_mode" field.
func MainModeGTE(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldGTE(FieldMainMode, v))
}

// MainModeLT applies the LT predicate on the "main_mode" field.
func MainModeLT(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldLT(FieldMainMode, v))
}

// MainModeLTE applies the LTE predicate on the "main_mode" field.
func MainModeLTE(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldLTE(FieldMainMode, v))
}

// StartTimePriceEQ applies the EQ predicate on the "start_time_price" field.
func StartTimePriceEQ(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldEQ(FieldStartTimePrice, v))
}

// StartTimePriceNEQ applies the NEQ predicate on the "start_time_price" field.
func StartTimePriceNEQ(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldNEQ(FieldStartTimePrice, v))
}

// StartTimePriceIn applies the In predicate on the "start_time_price" field.
func StartTimePriceIn(vs ...int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldIn(FieldStartTimePrice, vs...))
}

// StartTimePriceNotIn applies the NotIn predicate on the "start_time_price" field.
func StartTimePriceNotIn(vs ...int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldNotIn(FieldStartTimePrice, vs...))
}

// StartTimePriceGT applies the GT predicate on the "start_time_price" field.
func StartTimePriceGT(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldGT(FieldStartTimePrice, v))
}

// StartTimePriceGTE applies the GTE predicate on the "start_time_price" field.
func StartTimePriceGTE(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldGTE(FieldStartTimePrice, v))
}

// StartTimePriceLT applies the LT predicate on the "start_time_price" field.
func StartTimePriceLT(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldLT(FieldStartTimePrice, v))
}

// StartTimePriceLTE applies the LTE predicate on the "start_time_price" field.
func StartTimePriceLTE(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldLTE(FieldStartTimePrice, v))
}

// StartTimeUnitEQ applies the EQ predicate on the "start_time_unit" field.
func StartTimeUnitEQ(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldEQ(FieldStartTimeUnit, v))
}

// StartTimeUnitNEQ applies the NEQ predicate on the "start_time_unit" field.
func StartTimeUnitNEQ(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldNEQ(FieldStartTimeUnit, v))
}

// StartTimeUnitIn applies the In predicate on the "start_time_unit" field.
func StartTimeUnitIn(vs ...int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldIn(FieldStartTimeUnit, vs...))
}

// StartTimeUnitNotIn applies the NotIn predicate on the "start_time_unit" field.
func StartTimeUnitNotIn(vs ...int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldNotIn(FieldStartTimeUnit, vs...))
}

// StartTimeUnitGT applies the GT predicate on the "start_time_unit" field.
func StartTimeUnitGT(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldGT(FieldStartTimeUnit, v))
}

// StartTimeUnitGTE applies the GTE predicate on the "start_time_unit" field.
func StartTimeUnitGTE(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldGTE(FieldStartTimeUnit, v))
}

// StartTimeUnitLT applies the LT predicate on the "start_time_unit" field.
func StartTimeUnitLT(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldLT(FieldStartTimeUnit, v))
}

// StartTimeUnitLTE applies the LTE predicate on the "start_time_unit" field.
func StartTimeUnitLTE(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldLTE(FieldStartTimeUnit, v))
}

// NormalTimePriceEQ applies the EQ predicate on the "normal_time_price" field.
func NormalTimePriceEQ(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldEQ(FieldNormalTimePrice, v))
}

// NormalTimePriceNEQ applies the NEQ predicate on the "normal_time_price" field.
func NormalTimePriceNEQ(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldNEQ(FieldNormalTimePrice, v))
}

// NormalTimePriceIn applies the In predicate on the "normal_time_price" field.
func NormalTimePriceIn(vs ...int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldIn(FieldNormalTimePrice, vs...))
}

// NormalTimePriceNotIn applies the NotIn predicate on the "normal_time_price" field.
func NormalTimePriceNotIn(vs ...int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldNotIn(FieldNormalTimePrice, vs...))
}

// NormalTimePriceGT applies the GT predicate on the "normal_time_price" field.
func NormalTimePriceGT(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldGT(FieldNormalTimePrice, v))
}

// NormalTimePriceGTE applies the GTE predicate on the "normal_time_price" field.
func NormalTimePriceGTE(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldGTE(FieldNormalTimePrice, v))
}

// NormalTimePriceLT applies the LT predicate on the "normal_time_price" field.
func NormalTimePriceLT(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldLT(FieldNormalTimePrice, v))
}

// NormalTimePriceLTE applies the LTE predicate on the "normal_time_price" field.
func NormalTimePriceLTE(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldLTE(FieldNormalTimePrice, v))
}

// NormalTimeUnitEQ applies the EQ predicate on the "normal_time_unit" field.
func NormalTimeUnitEQ(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldEQ(FieldNormalTimeUnit, v))
}

// NormalTimeUnitNEQ applies the NEQ predicate on the "normal_time_unit" field.
func NormalTimeUnitNEQ(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldNEQ(FieldNormalTimeUnit, v))
}

// NormalTimeUnitIn applies the In predicate on the "normal_time_unit" field.
func NormalTimeUnitIn(vs ...int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldIn(FieldNormalTimeUnit, vs...))
}

// NormalTimeUnitNotIn applies the NotIn predicate on the "normal_time_unit" field.
func NormalTimeUnitNotIn(vs ...int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldNotIn(FieldNormalTimeUnit, vs...))
}

// NormalTimeUnitGT applies the GT predicate on the "normal_time_unit" field.
func NormalTimeUnitGT(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldGT(FieldNormalTimeUnit, v))
}

// NormalTimeUnitGTE applies the GTE predicate on the "normal_time_unit" field.
func NormalTimeUnitGTE(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldGTE(FieldNormalTimeUnit, v))
}

// NormalTimeUnitLT applies the LT predicate on the "normal_time_unit" field.
func NormalTimeUnitLT(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldLT(FieldNormalTimeUnit, v))
}

// NormalTimeUnitLTE applies the LTE predicate on the "normal_time_unit" field.
func NormalTimeUnitLTE(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldLTE(FieldNormalTimeUnit, v))
}

// StartMileagePriceEQ applies the EQ predicate on the "start_mileage_price" field.
func StartMileagePriceEQ(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldEQ(FieldStartMileagePrice, v))
}

// StartMileagePriceNEQ applies the NEQ predicate on the "start_mileage_price" field.
func StartMileagePriceNEQ(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldNEQ(FieldStartMileagePrice, v))
}

// StartMileagePriceIn applies the In predicate on the "start_mileage_price" field.
func StartMileagePriceIn(vs ...int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldIn(FieldStartMileagePrice, vs...))
}

// StartMileagePriceNotIn applies the NotIn predicate on the "start_mileage_price" field.
func StartMileagePriceNotIn(vs ...int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldNotIn(FieldStartMileagePrice, vs...))
}

// StartMileagePriceGT applies the GT predicate on the "start_mileage_price" field.
func StartMileagePriceGT(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldGT(FieldStartMileagePrice, v))
}

// StartMileagePriceGTE applies the GTE predicate on the "start_mileage_price" field.
func StartMileagePriceGTE(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldGTE(FieldStartMileagePrice, v))
}

// StartMileagePriceLT applies the LT predicate on the "start_mileage_price" field.
func StartMileagePriceLT(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldLT(FieldStartMileagePrice, v))
}

// StartMileagePriceLTE applies the LTE predicate on the "start_mileage_price" field.
func StartMileagePriceLTE(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldLTE(FieldStartMileagePrice, v))
}

// StartMileageUnitEQ applies the EQ predicate on the "start_mileage_unit" field.
func StartMileageUnitEQ(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldEQ(FieldStartMileageUnit, v))
}

// StartMileageUnitNEQ applies the NEQ predicate on the "start_mileage_unit" field.
func StartMileageUnitNEQ(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldNEQ(FieldStartMileageUnit, v))
}

// StartMileageUnitIn applies the In predicate on the "start_mileage_unit" field.
func StartMileageUnitIn(vs ...int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldIn(FieldStartMileageUnit, vs...))
}

// StartMileageUnitNotIn applies the NotIn predicate on the "start_mileage_unit" field.
func StartMileageUnitNotIn(vs ...int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldNotIn(FieldStartMileageUnit, vs...))
}

// StartMileageUnitGT applies the GT predicate on the "start_mileage_unit" field.
func StartMileageUnitGT(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldGT(FieldStartMileageUnit, v))
}

// StartMileageUnitGTE applies the GTE predicate on the "start_mileage_unit" field.
func StartMileageUnitGTE(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldGTE(FieldStartMileageUnit, v))
}

// StartMileageUnitLT applies the LT predicate on the "start_mileage_unit" field.
func StartMileageUnitLT(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldLT(FieldStartMileageUnit, v))
}

// StartMileageUnitLTE applies the LTE predicate on the "start_mileage_unit" field.
func StartMileageUnitLTE(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldLTE(FieldStartMileageUnit, v))
}

// NormalMileagePriceEQ applies the EQ predicate on the "normal_mileage_price" field.
func NormalMileagePriceEQ(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldEQ(FieldNormalMileagePrice, v))
}

// NormalMileagePriceNEQ applies the NEQ predicate on the "normal_mileage_price" field.
func NormalMileagePriceNEQ(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldNEQ(FieldNormalMileagePrice, v))
}

// NormalMileagePriceIn applies the In predicate on the "normal_mileage_price" field.
func NormalMileagePriceIn(vs ...int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldIn(FieldNormalMileagePrice, vs...))
}

// NormalMileagePriceNotIn applies the NotIn predicate on the "normal_mileage_price" field.
func NormalMileagePriceNotIn(vs ...int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldNotIn(FieldNormalMileagePrice, vs...))
}

// NormalMileagePriceGT applies the GT predicate on the "normal_mileage_price" field.
func NormalMileagePriceGT(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldGT(FieldNormalMileagePrice, v))
}

// NormalMileagePriceGTE applies the GTE predicate on the "normal_mileage_price" field.
func NormalMileagePriceGTE(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldGTE(FieldNormalMileagePrice, v))
}

// NormalMileagePriceLT applies the LT predicate on the "normal_mileage_price" field.
func NormalMileagePriceLT(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldLT(FieldNormalMileagePrice, v))
}

// NormalMileagePriceLTE applies the LTE predicate on the "normal_mileage_price" field.
func NormalMileagePriceLTE(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldLTE(FieldNormalMileagePrice, v))
}

// NormalMileageUnitEQ applies the EQ predicate on the "normal_mileage_unit" field.
func NormalMileageUnitEQ(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldEQ(FieldNormalMileageUnit, v))
}

// NormalMileageUnitNEQ applies the NEQ predicate on the "normal_mileage_unit" field.
func NormalMileageUnitNEQ(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldNEQ(FieldNormalMileageUnit, v))
}

// NormalMileageUnitIn applies the In predicate on the "normal_mileage_unit" field.
func NormalMileageUnitIn(vs ...int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldIn(FieldNormalMileageUnit, vs...))
}

// NormalMileageUnitNotIn applies the NotIn predicate on the "normal_mileage_unit" field.
func NormalMileageUnitNotIn(vs ...int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldNotIn(FieldNormalMileageUnit, vs...))
}

// NormalMileageUnitGT applies the GT predicate on the "normal_mileage_unit" field.
func NormalMileageUnitGT(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldGT(FieldNormalMileageUnit, v))
}

// NormalMileageUnitGTE applies the GTE predicate on the "normal_mileage_unit" field.
func NormalMileageUnitGTE(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldGTE(FieldNormalMileageUnit, v))
}

// NormalMileageUnitLT applies the LT predicate on the "normal_mileage_unit" field.
func NormalMileageUnitLT(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldLT(FieldNormalMileageUnit, v))
}

// NormalMileageUnitLTE applies the LTE predicate on the "normal_mileage_unit" field.
func NormalMileageUnitLTE(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldLTE(FieldNormalMileageUnit, v))
}

// StartStopPriceEQ applies the EQ predicate on the "start_stop_price" field.
func StartStopPriceEQ(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldEQ(FieldStartStopPrice, v))
}

// StartStopPriceNEQ applies the NEQ predicate on the "start_stop_price" field.
func StartStopPriceNEQ(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldNEQ(FieldStartStopPrice, v))
}

// StartStopPriceIn applies the In predicate on the "start_stop_price" field.
func StartStopPriceIn(vs ...int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldIn(FieldStartStopPrice, vs...))
}

// StartStopPriceNotIn applies the NotIn predicate on the "start_stop_price" field.
func StartStopPriceNotIn(vs ...int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldNotIn(FieldStartStopPrice, vs...))
}

// StartStopPriceGT applies the GT predicate on the "start_stop_price" field.
func StartStopPriceGT(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldGT(FieldStartStopPrice, v))
}

// StartStopPriceGTE applies the GTE predicate on the "start_stop_price" field.
func StartStopPriceGTE(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldGTE(FieldStartStopPrice, v))
}

// StartStopPriceLT applies the LT predicate on the "start_stop_price" field.
func StartStopPriceLT(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldLT(FieldStartStopPrice, v))
}

// StartStopPriceLTE applies the LTE predicate on the "start_stop_price" field.
func StartStopPriceLTE(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldLTE(FieldStartStopPrice, v))
}

// StartStopUnitEQ applies the EQ predicate on the "start_stop_unit" field.
func StartStopUnitEQ(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldEQ(FieldStartStopUnit, v))
}

// StartStopUnitNEQ applies the NEQ predicate on the "start_stop_unit" field.
func StartStopUnitNEQ(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldNEQ(FieldStartStopUnit, v))
}

// StartStopUnitIn applies the In predicate on the "start_stop_unit" field.
func StartStopUnitIn(vs ...int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldIn(FieldStartStopUnit, vs...))
}

// StartStopUnitNotIn applies the NotIn predicate on the "start_stop_unit" field.
func StartStopUnitNotIn(vs ...int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldNotIn(FieldStartStopUnit, vs...))
}

// StartStopUnitGT applies the GT predicate on the "start_stop_unit" field.
func StartStopUnitGT(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldGT(FieldStartStopUnit, v))
}

// StartStopUnitGTE applies the GTE predicate on the "start_stop_unit" field.
func StartStopUnitGTE(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldGTE(FieldStartStopUnit, v))
}

// StartStopUnitLT applies the LT predicate on the "start_stop_unit" field.
func StartStopUnitLT(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldLT(FieldStartStopUnit, v))
}

// StartStopUnitLTE applies the LTE predicate on the "start_stop_unit" field.
func StartStopUnitLTE(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldLTE(FieldStartStopUnit, v))
}

// NormalStopPriceEQ applies the EQ predicate on the "normal_stop_price" field.
func NormalStopPriceEQ(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldEQ(FieldNormalStopPrice, v))
}

// NormalStopPriceNEQ applies the NEQ predicate on the "normal_stop_price" field.
func NormalStopPriceNEQ(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldNEQ(FieldNormalStopPrice, v))
}

// NormalStopPriceIn applies the In predicate on the "normal_stop_price" field.
func NormalStopPriceIn(vs ...int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldIn(FieldNormalStopPrice, vs...))
}

// NormalStopPriceNotIn applies the NotIn predicate on the "normal_stop_price" field.
func NormalStopPriceNotIn(vs ...int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldNotIn(FieldNormalStopPrice, vs...))
}

// NormalStopPriceGT applies the GT predicate on the "normal_stop_price" field.
func NormalStopPriceGT(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldGT(FieldNormalStopPrice, v))
}

// NormalStopPriceGTE applies the GTE predicate on the "normal_stop_price" field.
func NormalStopPriceGTE(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldGTE(FieldNormalStopPrice, v))
}

// NormalStopPriceLT applies the LT predicate on the "normal_stop_price" field.
func NormalStopPriceLT(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldLT(FieldNormalStopPrice, v))
}

// NormalStopPriceLTE applies the LTE predicate on the "normal_stop_price" field.
func NormalStopPriceLTE(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldLTE(FieldNormalStopPrice, v))
}

// NormalStopUnitEQ applies the EQ predicate on the "normal_stop_unit" field.
func NormalStopUnitEQ(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldEQ(FieldNormalStopUnit, v))
}

// NormalStopUnitNEQ applies the NEQ predicate on the "normal_stop_unit" field.
func NormalStopUnitNEQ(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldNEQ(FieldNormalStopUnit, v))
}

// NormalStopUnitIn applies the In predicate on the "normal_stop_unit" field.
func NormalStopUnitIn(vs ...int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldIn(FieldNormalStopUnit, vs...))
}

// NormalStopUnitNotIn applies the NotIn predicate on the "normal_stop_unit" field.
func NormalStopUnitNotIn(vs ...int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldNotIn(FieldNormalStopUnit, vs...))
}

// NormalStopUnitGT applies the GT predicate on the "normal_stop_unit" field.
func NormalStopUnitGT(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldGT(FieldNormalStopUnit, v))
}

// NormalStopUnitGTE applies the GTE predicate on the "normal_stop_unit" field.
func NormalStopUnitGTE(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldGTE(FieldNormalStopUnit, v))
}

// NormalStopUnitLT applies the LT predicate on the "normal_stop_unit" field.
func NormalStopUnitLT(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldLT(FieldNormalStopUnit, v))
}

// NormalStopUnitLTE applies the LTE predicate on the "normal_stop_unit" field.
func NormalStopUnitLTE(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldLTE(FieldNormalStopUnit, v))
}

// CappedAmountEQ applies the EQ predicate on the "capped_amount" field.
func CappedAmountEQ(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldEQ(FieldCappedAmount, v))
}

// CappedAmountNEQ applies the NEQ predicate on the "capped_amount" field.
func CappedAmountNEQ(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldNEQ(FieldCappedAmount, v))
}

// CappedAmountIn applies the In predicate on the "capped_amount" field.
func CappedAmountIn(vs ...int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldIn(FieldCappedAmount, vs...))
}

// CappedAmountNotIn applies the NotIn predicate on the "capped_amount" field.
func CappedAmountNotIn(vs ...int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldNotIn(FieldCappedAmount, vs...))
}

// CappedAmountGT applies the GT predicate on the "capped_amount" field.
func CappedAmountGT(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldGT(FieldCappedAmount, v))
}

// CappedAmountGTE applies the GTE predicate on the "capped_amount" field.
func CappedAmountGTE(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldGTE(FieldCappedAmount, v))
}

// CappedAmountLT applies the LT predicate on the "capped_amount" field.
func CappedAmountLT(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldLT(FieldCappedAmount, v))
}

// CappedAmountLTE applies the LTE predicate on the "capped_amount" field.
func CappedAmountLTE(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldLTE(FieldCappedAmount, v))
}

// DepositAmountEQ applies the EQ predicate on the "deposit_amount" field.
func DepositAmountEQ(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldEQ(FieldDepositAmount, v))
}

// DepositAmountNEQ applies the NEQ predicate on the "deposit_amount" field.
func DepositAmountNEQ(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldNEQ(FieldDepositAmount, v))
}

// DepositAmountIn applies the In predicate on the "deposit_amount" field.
func DepositAmountIn(vs ...int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldIn(FieldDepositAmount, vs...))
}

// DepositAmountNotIn applies the NotIn predicate on the "deposit_amount" field.
func DepositAmountNotIn(vs ...int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldNotIn(FieldDepositAmount, vs...))
}

// DepositAmountGT applies the GT predicate on the "deposit_amount" field.
func DepositAmountGT(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldGT(FieldDepositAmount, v))
}

// DepositAmountGTE applies the GTE predicate on the "deposit_amount" field.
func DepositAmountGTE(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldGTE(FieldDepositAmount, v))
}

// DepositAmountLT applies the LT predicate on the "deposit_amount" field.
func DepositAmountLT(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldLT(FieldDepositAmount, v))
}

// DepositAmountLTE applies the LTE predicate on the "deposit_amount" field.
func DepositAmountLTE(v int) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldLTE(FieldDepositAmount, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.FieldLTE(FieldUpdateTime, v))
}

// HasBackgroundScenicArea applies the HasEdge predicate on the "background_scenic_area" edge.
func HasBackgroundScenicArea() predicate.BillingStrategy {
	return predicate.BillingStrategy(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BackgroundScenicAreaTable, BackgroundScenicAreaColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBackgroundScenicAreaWith applies the HasEdge predicate on the "background_scenic_area" edge with a given conditions (other predicates).
func HasBackgroundScenicAreaWith(preds ...predicate.ScenicArea) predicate.BillingStrategy {
	return predicate.BillingStrategy(func(s *sql.Selector) {
		step := newBackgroundScenicAreaStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BillingStrategy) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BillingStrategy) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BillingStrategy) predicate.BillingStrategy {
	return predicate.BillingStrategy(sql.NotPredicates(p))
}
