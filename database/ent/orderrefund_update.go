// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/order"
	"github.com/jianbo-zh/jydata/database/ent/orderrefund"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
)

// OrderRefundUpdate is the builder for updating OrderRefund entities.
type OrderRefundUpdate struct {
	config
	hooks    []Hook
	mutation *OrderRefundMutation
}

// Where appends a list predicates to the OrderRefundUpdate builder.
func (oru *OrderRefundUpdate) Where(ps ...predicate.OrderRefund) *OrderRefundUpdate {
	oru.mutation.Where(ps...)
	return oru
}

// SetType sets the "type" field.
func (oru *OrderRefundUpdate) SetType(i int) *OrderRefundUpdate {
	oru.mutation.ResetType()
	oru.mutation.SetType(i)
	return oru
}

// SetNillableType sets the "type" field if the given value is not nil.
func (oru *OrderRefundUpdate) SetNillableType(i *int) *OrderRefundUpdate {
	if i != nil {
		oru.SetType(*i)
	}
	return oru
}

// AddType adds i to the "type" field.
func (oru *OrderRefundUpdate) AddType(i int) *OrderRefundUpdate {
	oru.mutation.AddType(i)
	return oru
}

// SetInitiatorID sets the "initiator_id" field.
func (oru *OrderRefundUpdate) SetInitiatorID(i int) *OrderRefundUpdate {
	oru.mutation.ResetInitiatorID()
	oru.mutation.SetInitiatorID(i)
	return oru
}

// SetNillableInitiatorID sets the "initiator_id" field if the given value is not nil.
func (oru *OrderRefundUpdate) SetNillableInitiatorID(i *int) *OrderRefundUpdate {
	if i != nil {
		oru.SetInitiatorID(*i)
	}
	return oru
}

// AddInitiatorID adds i to the "initiator_id" field.
func (oru *OrderRefundUpdate) AddInitiatorID(i int) *OrderRefundUpdate {
	oru.mutation.AddInitiatorID(i)
	return oru
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (oru *OrderRefundUpdate) SetScenicAreaID(i int) *OrderRefundUpdate {
	oru.mutation.ResetScenicAreaID()
	oru.mutation.SetScenicAreaID(i)
	return oru
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (oru *OrderRefundUpdate) SetNillableScenicAreaID(i *int) *OrderRefundUpdate {
	if i != nil {
		oru.SetScenicAreaID(*i)
	}
	return oru
}

// AddScenicAreaID adds i to the "scenic_area_id" field.
func (oru *OrderRefundUpdate) AddScenicAreaID(i int) *OrderRefundUpdate {
	oru.mutation.AddScenicAreaID(i)
	return oru
}

// SetOrderID sets the "order_id" field.
func (oru *OrderRefundUpdate) SetOrderID(i int) *OrderRefundUpdate {
	oru.mutation.SetOrderID(i)
	return oru
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (oru *OrderRefundUpdate) SetNillableOrderID(i *int) *OrderRefundUpdate {
	if i != nil {
		oru.SetOrderID(*i)
	}
	return oru
}

// SetOrderAppealID sets the "order_appeal_id" field.
func (oru *OrderRefundUpdate) SetOrderAppealID(i int) *OrderRefundUpdate {
	oru.mutation.ResetOrderAppealID()
	oru.mutation.SetOrderAppealID(i)
	return oru
}

// SetNillableOrderAppealID sets the "order_appeal_id" field if the given value is not nil.
func (oru *OrderRefundUpdate) SetNillableOrderAppealID(i *int) *OrderRefundUpdate {
	if i != nil {
		oru.SetOrderAppealID(*i)
	}
	return oru
}

// AddOrderAppealID adds i to the "order_appeal_id" field.
func (oru *OrderRefundUpdate) AddOrderAppealID(i int) *OrderRefundUpdate {
	oru.mutation.AddOrderAppealID(i)
	return oru
}

// ClearOrderAppealID clears the value of the "order_appeal_id" field.
func (oru *OrderRefundUpdate) ClearOrderAppealID() *OrderRefundUpdate {
	oru.mutation.ClearOrderAppealID()
	return oru
}

// SetOrderNo sets the "order_no" field.
func (oru *OrderRefundUpdate) SetOrderNo(s string) *OrderRefundUpdate {
	oru.mutation.SetOrderNo(s)
	return oru
}

// SetNillableOrderNo sets the "order_no" field if the given value is not nil.
func (oru *OrderRefundUpdate) SetNillableOrderNo(s *string) *OrderRefundUpdate {
	if s != nil {
		oru.SetOrderNo(*s)
	}
	return oru
}

// SetRefundNo sets the "refund_no" field.
func (oru *OrderRefundUpdate) SetRefundNo(s string) *OrderRefundUpdate {
	oru.mutation.SetRefundNo(s)
	return oru
}

// SetNillableRefundNo sets the "refund_no" field if the given value is not nil.
func (oru *OrderRefundUpdate) SetNillableRefundNo(s *string) *OrderRefundUpdate {
	if s != nil {
		oru.SetRefundNo(*s)
	}
	return oru
}

// SetWxRefundID sets the "wx_refund_id" field.
func (oru *OrderRefundUpdate) SetWxRefundID(s string) *OrderRefundUpdate {
	oru.mutation.SetWxRefundID(s)
	return oru
}

// SetNillableWxRefundID sets the "wx_refund_id" field if the given value is not nil.
func (oru *OrderRefundUpdate) SetNillableWxRefundID(s *string) *OrderRefundUpdate {
	if s != nil {
		oru.SetWxRefundID(*s)
	}
	return oru
}

// SetRefundAmount sets the "refund_amount" field.
func (oru *OrderRefundUpdate) SetRefundAmount(i int) *OrderRefundUpdate {
	oru.mutation.ResetRefundAmount()
	oru.mutation.SetRefundAmount(i)
	return oru
}

// SetNillableRefundAmount sets the "refund_amount" field if the given value is not nil.
func (oru *OrderRefundUpdate) SetNillableRefundAmount(i *int) *OrderRefundUpdate {
	if i != nil {
		oru.SetRefundAmount(*i)
	}
	return oru
}

// AddRefundAmount adds i to the "refund_amount" field.
func (oru *OrderRefundUpdate) AddRefundAmount(i int) *OrderRefundUpdate {
	oru.mutation.AddRefundAmount(i)
	return oru
}

// SetState sets the "state" field.
func (oru *OrderRefundUpdate) SetState(i int) *OrderRefundUpdate {
	oru.mutation.ResetState()
	oru.mutation.SetState(i)
	return oru
}

// SetNillableState sets the "state" field if the given value is not nil.
func (oru *OrderRefundUpdate) SetNillableState(i *int) *OrderRefundUpdate {
	if i != nil {
		oru.SetState(*i)
	}
	return oru
}

// AddState adds i to the "state" field.
func (oru *OrderRefundUpdate) AddState(i int) *OrderRefundUpdate {
	oru.mutation.AddState(i)
	return oru
}

// SetRemark sets the "remark" field.
func (oru *OrderRefundUpdate) SetRemark(s string) *OrderRefundUpdate {
	oru.mutation.SetRemark(s)
	return oru
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (oru *OrderRefundUpdate) SetNillableRemark(s *string) *OrderRefundUpdate {
	if s != nil {
		oru.SetRemark(*s)
	}
	return oru
}

// SetErrmsg sets the "errmsg" field.
func (oru *OrderRefundUpdate) SetErrmsg(s string) *OrderRefundUpdate {
	oru.mutation.SetErrmsg(s)
	return oru
}

// SetNillableErrmsg sets the "errmsg" field if the given value is not nil.
func (oru *OrderRefundUpdate) SetNillableErrmsg(s *string) *OrderRefundUpdate {
	if s != nil {
		oru.SetErrmsg(*s)
	}
	return oru
}

// SetFinishTime sets the "finish_time" field.
func (oru *OrderRefundUpdate) SetFinishTime(t time.Time) *OrderRefundUpdate {
	oru.mutation.SetFinishTime(t)
	return oru
}

// SetNillableFinishTime sets the "finish_time" field if the given value is not nil.
func (oru *OrderRefundUpdate) SetNillableFinishTime(t *time.Time) *OrderRefundUpdate {
	if t != nil {
		oru.SetFinishTime(*t)
	}
	return oru
}

// ClearFinishTime clears the value of the "finish_time" field.
func (oru *OrderRefundUpdate) ClearFinishTime() *OrderRefundUpdate {
	oru.mutation.ClearFinishTime()
	return oru
}

// SetUpdateTime sets the "update_time" field.
func (oru *OrderRefundUpdate) SetUpdateTime(t time.Time) *OrderRefundUpdate {
	oru.mutation.SetUpdateTime(t)
	return oru
}

// SetOrder sets the "order" edge to the Order entity.
func (oru *OrderRefundUpdate) SetOrder(o *Order) *OrderRefundUpdate {
	return oru.SetOrderID(o.ID)
}

// Mutation returns the OrderRefundMutation object of the builder.
func (oru *OrderRefundUpdate) Mutation() *OrderRefundMutation {
	return oru.mutation
}

// ClearOrder clears the "order" edge to the Order entity.
func (oru *OrderRefundUpdate) ClearOrder() *OrderRefundUpdate {
	oru.mutation.ClearOrder()
	return oru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oru *OrderRefundUpdate) Save(ctx context.Context) (int, error) {
	oru.defaults()
	return withHooks(ctx, oru.sqlSave, oru.mutation, oru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oru *OrderRefundUpdate) SaveX(ctx context.Context) int {
	affected, err := oru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oru *OrderRefundUpdate) Exec(ctx context.Context) error {
	_, err := oru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oru *OrderRefundUpdate) ExecX(ctx context.Context) {
	if err := oru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oru *OrderRefundUpdate) defaults() {
	if _, ok := oru.mutation.UpdateTime(); !ok {
		v := orderrefund.UpdateDefaultUpdateTime()
		oru.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oru *OrderRefundUpdate) check() error {
	if oru.mutation.OrderCleared() && len(oru.mutation.OrderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OrderRefund.order"`)
	}
	return nil
}

func (oru *OrderRefundUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := oru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(orderrefund.Table, orderrefund.Columns, sqlgraph.NewFieldSpec(orderrefund.FieldID, field.TypeInt))
	if ps := oru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oru.mutation.GetType(); ok {
		_spec.SetField(orderrefund.FieldType, field.TypeInt, value)
	}
	if value, ok := oru.mutation.AddedType(); ok {
		_spec.AddField(orderrefund.FieldType, field.TypeInt, value)
	}
	if value, ok := oru.mutation.InitiatorID(); ok {
		_spec.SetField(orderrefund.FieldInitiatorID, field.TypeInt, value)
	}
	if value, ok := oru.mutation.AddedInitiatorID(); ok {
		_spec.AddField(orderrefund.FieldInitiatorID, field.TypeInt, value)
	}
	if value, ok := oru.mutation.ScenicAreaID(); ok {
		_spec.SetField(orderrefund.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := oru.mutation.AddedScenicAreaID(); ok {
		_spec.AddField(orderrefund.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := oru.mutation.OrderAppealID(); ok {
		_spec.SetField(orderrefund.FieldOrderAppealID, field.TypeInt, value)
	}
	if value, ok := oru.mutation.AddedOrderAppealID(); ok {
		_spec.AddField(orderrefund.FieldOrderAppealID, field.TypeInt, value)
	}
	if oru.mutation.OrderAppealIDCleared() {
		_spec.ClearField(orderrefund.FieldOrderAppealID, field.TypeInt)
	}
	if value, ok := oru.mutation.OrderNo(); ok {
		_spec.SetField(orderrefund.FieldOrderNo, field.TypeString, value)
	}
	if value, ok := oru.mutation.RefundNo(); ok {
		_spec.SetField(orderrefund.FieldRefundNo, field.TypeString, value)
	}
	if value, ok := oru.mutation.WxRefundID(); ok {
		_spec.SetField(orderrefund.FieldWxRefundID, field.TypeString, value)
	}
	if value, ok := oru.mutation.RefundAmount(); ok {
		_spec.SetField(orderrefund.FieldRefundAmount, field.TypeInt, value)
	}
	if value, ok := oru.mutation.AddedRefundAmount(); ok {
		_spec.AddField(orderrefund.FieldRefundAmount, field.TypeInt, value)
	}
	if value, ok := oru.mutation.State(); ok {
		_spec.SetField(orderrefund.FieldState, field.TypeInt, value)
	}
	if value, ok := oru.mutation.AddedState(); ok {
		_spec.AddField(orderrefund.FieldState, field.TypeInt, value)
	}
	if value, ok := oru.mutation.Remark(); ok {
		_spec.SetField(orderrefund.FieldRemark, field.TypeString, value)
	}
	if value, ok := oru.mutation.Errmsg(); ok {
		_spec.SetField(orderrefund.FieldErrmsg, field.TypeString, value)
	}
	if value, ok := oru.mutation.FinishTime(); ok {
		_spec.SetField(orderrefund.FieldFinishTime, field.TypeTime, value)
	}
	if oru.mutation.FinishTimeCleared() {
		_spec.ClearField(orderrefund.FieldFinishTime, field.TypeTime)
	}
	if value, ok := oru.mutation.UpdateTime(); ok {
		_spec.SetField(orderrefund.FieldUpdateTime, field.TypeTime, value)
	}
	if oru.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderrefund.OrderTable,
			Columns: []string{orderrefund.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oru.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderrefund.OrderTable,
			Columns: []string{orderrefund.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, oru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderrefund.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	oru.mutation.done = true
	return n, nil
}

// OrderRefundUpdateOne is the builder for updating a single OrderRefund entity.
type OrderRefundUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderRefundMutation
}

// SetType sets the "type" field.
func (oruo *OrderRefundUpdateOne) SetType(i int) *OrderRefundUpdateOne {
	oruo.mutation.ResetType()
	oruo.mutation.SetType(i)
	return oruo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (oruo *OrderRefundUpdateOne) SetNillableType(i *int) *OrderRefundUpdateOne {
	if i != nil {
		oruo.SetType(*i)
	}
	return oruo
}

// AddType adds i to the "type" field.
func (oruo *OrderRefundUpdateOne) AddType(i int) *OrderRefundUpdateOne {
	oruo.mutation.AddType(i)
	return oruo
}

// SetInitiatorID sets the "initiator_id" field.
func (oruo *OrderRefundUpdateOne) SetInitiatorID(i int) *OrderRefundUpdateOne {
	oruo.mutation.ResetInitiatorID()
	oruo.mutation.SetInitiatorID(i)
	return oruo
}

// SetNillableInitiatorID sets the "initiator_id" field if the given value is not nil.
func (oruo *OrderRefundUpdateOne) SetNillableInitiatorID(i *int) *OrderRefundUpdateOne {
	if i != nil {
		oruo.SetInitiatorID(*i)
	}
	return oruo
}

// AddInitiatorID adds i to the "initiator_id" field.
func (oruo *OrderRefundUpdateOne) AddInitiatorID(i int) *OrderRefundUpdateOne {
	oruo.mutation.AddInitiatorID(i)
	return oruo
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (oruo *OrderRefundUpdateOne) SetScenicAreaID(i int) *OrderRefundUpdateOne {
	oruo.mutation.ResetScenicAreaID()
	oruo.mutation.SetScenicAreaID(i)
	return oruo
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (oruo *OrderRefundUpdateOne) SetNillableScenicAreaID(i *int) *OrderRefundUpdateOne {
	if i != nil {
		oruo.SetScenicAreaID(*i)
	}
	return oruo
}

// AddScenicAreaID adds i to the "scenic_area_id" field.
func (oruo *OrderRefundUpdateOne) AddScenicAreaID(i int) *OrderRefundUpdateOne {
	oruo.mutation.AddScenicAreaID(i)
	return oruo
}

// SetOrderID sets the "order_id" field.
func (oruo *OrderRefundUpdateOne) SetOrderID(i int) *OrderRefundUpdateOne {
	oruo.mutation.SetOrderID(i)
	return oruo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (oruo *OrderRefundUpdateOne) SetNillableOrderID(i *int) *OrderRefundUpdateOne {
	if i != nil {
		oruo.SetOrderID(*i)
	}
	return oruo
}

// SetOrderAppealID sets the "order_appeal_id" field.
func (oruo *OrderRefundUpdateOne) SetOrderAppealID(i int) *OrderRefundUpdateOne {
	oruo.mutation.ResetOrderAppealID()
	oruo.mutation.SetOrderAppealID(i)
	return oruo
}

// SetNillableOrderAppealID sets the "order_appeal_id" field if the given value is not nil.
func (oruo *OrderRefundUpdateOne) SetNillableOrderAppealID(i *int) *OrderRefundUpdateOne {
	if i != nil {
		oruo.SetOrderAppealID(*i)
	}
	return oruo
}

// AddOrderAppealID adds i to the "order_appeal_id" field.
func (oruo *OrderRefundUpdateOne) AddOrderAppealID(i int) *OrderRefundUpdateOne {
	oruo.mutation.AddOrderAppealID(i)
	return oruo
}

// ClearOrderAppealID clears the value of the "order_appeal_id" field.
func (oruo *OrderRefundUpdateOne) ClearOrderAppealID() *OrderRefundUpdateOne {
	oruo.mutation.ClearOrderAppealID()
	return oruo
}

// SetOrderNo sets the "order_no" field.
func (oruo *OrderRefundUpdateOne) SetOrderNo(s string) *OrderRefundUpdateOne {
	oruo.mutation.SetOrderNo(s)
	return oruo
}

// SetNillableOrderNo sets the "order_no" field if the given value is not nil.
func (oruo *OrderRefundUpdateOne) SetNillableOrderNo(s *string) *OrderRefundUpdateOne {
	if s != nil {
		oruo.SetOrderNo(*s)
	}
	return oruo
}

// SetRefundNo sets the "refund_no" field.
func (oruo *OrderRefundUpdateOne) SetRefundNo(s string) *OrderRefundUpdateOne {
	oruo.mutation.SetRefundNo(s)
	return oruo
}

// SetNillableRefundNo sets the "refund_no" field if the given value is not nil.
func (oruo *OrderRefundUpdateOne) SetNillableRefundNo(s *string) *OrderRefundUpdateOne {
	if s != nil {
		oruo.SetRefundNo(*s)
	}
	return oruo
}

// SetWxRefundID sets the "wx_refund_id" field.
func (oruo *OrderRefundUpdateOne) SetWxRefundID(s string) *OrderRefundUpdateOne {
	oruo.mutation.SetWxRefundID(s)
	return oruo
}

// SetNillableWxRefundID sets the "wx_refund_id" field if the given value is not nil.
func (oruo *OrderRefundUpdateOne) SetNillableWxRefundID(s *string) *OrderRefundUpdateOne {
	if s != nil {
		oruo.SetWxRefundID(*s)
	}
	return oruo
}

// SetRefundAmount sets the "refund_amount" field.
func (oruo *OrderRefundUpdateOne) SetRefundAmount(i int) *OrderRefundUpdateOne {
	oruo.mutation.ResetRefundAmount()
	oruo.mutation.SetRefundAmount(i)
	return oruo
}

// SetNillableRefundAmount sets the "refund_amount" field if the given value is not nil.
func (oruo *OrderRefundUpdateOne) SetNillableRefundAmount(i *int) *OrderRefundUpdateOne {
	if i != nil {
		oruo.SetRefundAmount(*i)
	}
	return oruo
}

// AddRefundAmount adds i to the "refund_amount" field.
func (oruo *OrderRefundUpdateOne) AddRefundAmount(i int) *OrderRefundUpdateOne {
	oruo.mutation.AddRefundAmount(i)
	return oruo
}

// SetState sets the "state" field.
func (oruo *OrderRefundUpdateOne) SetState(i int) *OrderRefundUpdateOne {
	oruo.mutation.ResetState()
	oruo.mutation.SetState(i)
	return oruo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (oruo *OrderRefundUpdateOne) SetNillableState(i *int) *OrderRefundUpdateOne {
	if i != nil {
		oruo.SetState(*i)
	}
	return oruo
}

// AddState adds i to the "state" field.
func (oruo *OrderRefundUpdateOne) AddState(i int) *OrderRefundUpdateOne {
	oruo.mutation.AddState(i)
	return oruo
}

// SetRemark sets the "remark" field.
func (oruo *OrderRefundUpdateOne) SetRemark(s string) *OrderRefundUpdateOne {
	oruo.mutation.SetRemark(s)
	return oruo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (oruo *OrderRefundUpdateOne) SetNillableRemark(s *string) *OrderRefundUpdateOne {
	if s != nil {
		oruo.SetRemark(*s)
	}
	return oruo
}

// SetErrmsg sets the "errmsg" field.
func (oruo *OrderRefundUpdateOne) SetErrmsg(s string) *OrderRefundUpdateOne {
	oruo.mutation.SetErrmsg(s)
	return oruo
}

// SetNillableErrmsg sets the "errmsg" field if the given value is not nil.
func (oruo *OrderRefundUpdateOne) SetNillableErrmsg(s *string) *OrderRefundUpdateOne {
	if s != nil {
		oruo.SetErrmsg(*s)
	}
	return oruo
}

// SetFinishTime sets the "finish_time" field.
func (oruo *OrderRefundUpdateOne) SetFinishTime(t time.Time) *OrderRefundUpdateOne {
	oruo.mutation.SetFinishTime(t)
	return oruo
}

// SetNillableFinishTime sets the "finish_time" field if the given value is not nil.
func (oruo *OrderRefundUpdateOne) SetNillableFinishTime(t *time.Time) *OrderRefundUpdateOne {
	if t != nil {
		oruo.SetFinishTime(*t)
	}
	return oruo
}

// ClearFinishTime clears the value of the "finish_time" field.
func (oruo *OrderRefundUpdateOne) ClearFinishTime() *OrderRefundUpdateOne {
	oruo.mutation.ClearFinishTime()
	return oruo
}

// SetUpdateTime sets the "update_time" field.
func (oruo *OrderRefundUpdateOne) SetUpdateTime(t time.Time) *OrderRefundUpdateOne {
	oruo.mutation.SetUpdateTime(t)
	return oruo
}

// SetOrder sets the "order" edge to the Order entity.
func (oruo *OrderRefundUpdateOne) SetOrder(o *Order) *OrderRefundUpdateOne {
	return oruo.SetOrderID(o.ID)
}

// Mutation returns the OrderRefundMutation object of the builder.
func (oruo *OrderRefundUpdateOne) Mutation() *OrderRefundMutation {
	return oruo.mutation
}

// ClearOrder clears the "order" edge to the Order entity.
func (oruo *OrderRefundUpdateOne) ClearOrder() *OrderRefundUpdateOne {
	oruo.mutation.ClearOrder()
	return oruo
}

// Where appends a list predicates to the OrderRefundUpdate builder.
func (oruo *OrderRefundUpdateOne) Where(ps ...predicate.OrderRefund) *OrderRefundUpdateOne {
	oruo.mutation.Where(ps...)
	return oruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oruo *OrderRefundUpdateOne) Select(field string, fields ...string) *OrderRefundUpdateOne {
	oruo.fields = append([]string{field}, fields...)
	return oruo
}

// Save executes the query and returns the updated OrderRefund entity.
func (oruo *OrderRefundUpdateOne) Save(ctx context.Context) (*OrderRefund, error) {
	oruo.defaults()
	return withHooks(ctx, oruo.sqlSave, oruo.mutation, oruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oruo *OrderRefundUpdateOne) SaveX(ctx context.Context) *OrderRefund {
	node, err := oruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oruo *OrderRefundUpdateOne) Exec(ctx context.Context) error {
	_, err := oruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oruo *OrderRefundUpdateOne) ExecX(ctx context.Context) {
	if err := oruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oruo *OrderRefundUpdateOne) defaults() {
	if _, ok := oruo.mutation.UpdateTime(); !ok {
		v := orderrefund.UpdateDefaultUpdateTime()
		oruo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oruo *OrderRefundUpdateOne) check() error {
	if oruo.mutation.OrderCleared() && len(oruo.mutation.OrderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OrderRefund.order"`)
	}
	return nil
}

func (oruo *OrderRefundUpdateOne) sqlSave(ctx context.Context) (_node *OrderRefund, err error) {
	if err := oruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(orderrefund.Table, orderrefund.Columns, sqlgraph.NewFieldSpec(orderrefund.FieldID, field.TypeInt))
	id, ok := oruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrderRefund.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderrefund.FieldID)
		for _, f := range fields {
			if !orderrefund.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orderrefund.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oruo.mutation.GetType(); ok {
		_spec.SetField(orderrefund.FieldType, field.TypeInt, value)
	}
	if value, ok := oruo.mutation.AddedType(); ok {
		_spec.AddField(orderrefund.FieldType, field.TypeInt, value)
	}
	if value, ok := oruo.mutation.InitiatorID(); ok {
		_spec.SetField(orderrefund.FieldInitiatorID, field.TypeInt, value)
	}
	if value, ok := oruo.mutation.AddedInitiatorID(); ok {
		_spec.AddField(orderrefund.FieldInitiatorID, field.TypeInt, value)
	}
	if value, ok := oruo.mutation.ScenicAreaID(); ok {
		_spec.SetField(orderrefund.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := oruo.mutation.AddedScenicAreaID(); ok {
		_spec.AddField(orderrefund.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := oruo.mutation.OrderAppealID(); ok {
		_spec.SetField(orderrefund.FieldOrderAppealID, field.TypeInt, value)
	}
	if value, ok := oruo.mutation.AddedOrderAppealID(); ok {
		_spec.AddField(orderrefund.FieldOrderAppealID, field.TypeInt, value)
	}
	if oruo.mutation.OrderAppealIDCleared() {
		_spec.ClearField(orderrefund.FieldOrderAppealID, field.TypeInt)
	}
	if value, ok := oruo.mutation.OrderNo(); ok {
		_spec.SetField(orderrefund.FieldOrderNo, field.TypeString, value)
	}
	if value, ok := oruo.mutation.RefundNo(); ok {
		_spec.SetField(orderrefund.FieldRefundNo, field.TypeString, value)
	}
	if value, ok := oruo.mutation.WxRefundID(); ok {
		_spec.SetField(orderrefund.FieldWxRefundID, field.TypeString, value)
	}
	if value, ok := oruo.mutation.RefundAmount(); ok {
		_spec.SetField(orderrefund.FieldRefundAmount, field.TypeInt, value)
	}
	if value, ok := oruo.mutation.AddedRefundAmount(); ok {
		_spec.AddField(orderrefund.FieldRefundAmount, field.TypeInt, value)
	}
	if value, ok := oruo.mutation.State(); ok {
		_spec.SetField(orderrefund.FieldState, field.TypeInt, value)
	}
	if value, ok := oruo.mutation.AddedState(); ok {
		_spec.AddField(orderrefund.FieldState, field.TypeInt, value)
	}
	if value, ok := oruo.mutation.Remark(); ok {
		_spec.SetField(orderrefund.FieldRemark, field.TypeString, value)
	}
	if value, ok := oruo.mutation.Errmsg(); ok {
		_spec.SetField(orderrefund.FieldErrmsg, field.TypeString, value)
	}
	if value, ok := oruo.mutation.FinishTime(); ok {
		_spec.SetField(orderrefund.FieldFinishTime, field.TypeTime, value)
	}
	if oruo.mutation.FinishTimeCleared() {
		_spec.ClearField(orderrefund.FieldFinishTime, field.TypeTime)
	}
	if value, ok := oruo.mutation.UpdateTime(); ok {
		_spec.SetField(orderrefund.FieldUpdateTime, field.TypeTime, value)
	}
	if oruo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderrefund.OrderTable,
			Columns: []string{orderrefund.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oruo.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderrefund.OrderTable,
			Columns: []string{orderrefund.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrderRefund{config: oruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderrefund.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oruo.mutation.done = true
	return _node, nil
}
