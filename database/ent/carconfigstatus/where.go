// Code generated by ent, DO NOT EDIT.

package carconfigstatus

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldLTE(FieldID, id))
}

// CarID applies equality check predicate on the "car_id" field. It's identical to CarIDEQ.
func CarID(v int) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldEQ(FieldCarID, v))
}

// DeviceID applies equality check predicate on the "device_id" field. It's identical to DeviceIDEQ.
func DeviceID(v string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldEQ(FieldDeviceID, v))
}

// ConfigPath applies equality check predicate on the "config_path" field. It's identical to ConfigPathEQ.
func ConfigPath(v string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldEQ(FieldConfigPath, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldEQ(FieldVersion, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldEQ(FieldRemark, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldEQ(FieldUpdateTime, v))
}

// CarIDEQ applies the EQ predicate on the "car_id" field.
func CarIDEQ(v int) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldEQ(FieldCarID, v))
}

// CarIDNEQ applies the NEQ predicate on the "car_id" field.
func CarIDNEQ(v int) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldNEQ(FieldCarID, v))
}

// CarIDIn applies the In predicate on the "car_id" field.
func CarIDIn(vs ...int) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldIn(FieldCarID, vs...))
}

// CarIDNotIn applies the NotIn predicate on the "car_id" field.
func CarIDNotIn(vs ...int) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldNotIn(FieldCarID, vs...))
}

// CarIDGT applies the GT predicate on the "car_id" field.
func CarIDGT(v int) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldGT(FieldCarID, v))
}

// CarIDGTE applies the GTE predicate on the "car_id" field.
func CarIDGTE(v int) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldGTE(FieldCarID, v))
}

// CarIDLT applies the LT predicate on the "car_id" field.
func CarIDLT(v int) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldLT(FieldCarID, v))
}

// CarIDLTE applies the LTE predicate on the "car_id" field.
func CarIDLTE(v int) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldLTE(FieldCarID, v))
}

// DeviceIDEQ applies the EQ predicate on the "device_id" field.
func DeviceIDEQ(v string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldEQ(FieldDeviceID, v))
}

// DeviceIDNEQ applies the NEQ predicate on the "device_id" field.
func DeviceIDNEQ(v string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldNEQ(FieldDeviceID, v))
}

// DeviceIDIn applies the In predicate on the "device_id" field.
func DeviceIDIn(vs ...string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldIn(FieldDeviceID, vs...))
}

// DeviceIDNotIn applies the NotIn predicate on the "device_id" field.
func DeviceIDNotIn(vs ...string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldNotIn(FieldDeviceID, vs...))
}

// DeviceIDGT applies the GT predicate on the "device_id" field.
func DeviceIDGT(v string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldGT(FieldDeviceID, v))
}

// DeviceIDGTE applies the GTE predicate on the "device_id" field.
func DeviceIDGTE(v string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldGTE(FieldDeviceID, v))
}

// DeviceIDLT applies the LT predicate on the "device_id" field.
func DeviceIDLT(v string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldLT(FieldDeviceID, v))
}

// DeviceIDLTE applies the LTE predicate on the "device_id" field.
func DeviceIDLTE(v string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldLTE(FieldDeviceID, v))
}

// DeviceIDContains applies the Contains predicate on the "device_id" field.
func DeviceIDContains(v string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldContains(FieldDeviceID, v))
}

// DeviceIDHasPrefix applies the HasPrefix predicate on the "device_id" field.
func DeviceIDHasPrefix(v string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldHasPrefix(FieldDeviceID, v))
}

// DeviceIDHasSuffix applies the HasSuffix predicate on the "device_id" field.
func DeviceIDHasSuffix(v string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldHasSuffix(FieldDeviceID, v))
}

// DeviceIDEqualFold applies the EqualFold predicate on the "device_id" field.
func DeviceIDEqualFold(v string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldEqualFold(FieldDeviceID, v))
}

// DeviceIDContainsFold applies the ContainsFold predicate on the "device_id" field.
func DeviceIDContainsFold(v string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldContainsFold(FieldDeviceID, v))
}

// ConfigPathEQ applies the EQ predicate on the "config_path" field.
func ConfigPathEQ(v string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldEQ(FieldConfigPath, v))
}

// ConfigPathNEQ applies the NEQ predicate on the "config_path" field.
func ConfigPathNEQ(v string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldNEQ(FieldConfigPath, v))
}

// ConfigPathIn applies the In predicate on the "config_path" field.
func ConfigPathIn(vs ...string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldIn(FieldConfigPath, vs...))
}

// ConfigPathNotIn applies the NotIn predicate on the "config_path" field.
func ConfigPathNotIn(vs ...string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldNotIn(FieldConfigPath, vs...))
}

// ConfigPathGT applies the GT predicate on the "config_path" field.
func ConfigPathGT(v string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldGT(FieldConfigPath, v))
}

// ConfigPathGTE applies the GTE predicate on the "config_path" field.
func ConfigPathGTE(v string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldGTE(FieldConfigPath, v))
}

// ConfigPathLT applies the LT predicate on the "config_path" field.
func ConfigPathLT(v string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldLT(FieldConfigPath, v))
}

// ConfigPathLTE applies the LTE predicate on the "config_path" field.
func ConfigPathLTE(v string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldLTE(FieldConfigPath, v))
}

// ConfigPathContains applies the Contains predicate on the "config_path" field.
func ConfigPathContains(v string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldContains(FieldConfigPath, v))
}

// ConfigPathHasPrefix applies the HasPrefix predicate on the "config_path" field.
func ConfigPathHasPrefix(v string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldHasPrefix(FieldConfigPath, v))
}

// ConfigPathHasSuffix applies the HasSuffix predicate on the "config_path" field.
func ConfigPathHasSuffix(v string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldHasSuffix(FieldConfigPath, v))
}

// ConfigPathEqualFold applies the EqualFold predicate on the "config_path" field.
func ConfigPathEqualFold(v string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldEqualFold(FieldConfigPath, v))
}

// ConfigPathContainsFold applies the ContainsFold predicate on the "config_path" field.
func ConfigPathContainsFold(v string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldContainsFold(FieldConfigPath, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldLTE(FieldVersion, v))
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldContains(FieldVersion, v))
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldHasPrefix(FieldVersion, v))
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldHasSuffix(FieldVersion, v))
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldEqualFold(FieldVersion, v))
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldContainsFold(FieldVersion, v))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldContainsFold(FieldRemark, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.FieldLTE(FieldUpdateTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CarConfigStatus) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CarConfigStatus) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CarConfigStatus) predicate.CarConfigStatus {
	return predicate.CarConfigStatus(sql.NotPredicates(p))
}
