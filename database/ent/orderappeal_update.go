// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/orderappeal"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderAppealUpdate is the builder for updating OrderAppeal entities.
type OrderAppealUpdate struct {
	config
	hooks    []Hook
	mutation *OrderAppealMutation
}

// Where appends a list predicates to the OrderAppealUpdate builder.
func (oau *OrderAppealUpdate) Where(ps ...predicate.OrderAppeal) *OrderAppealUpdate {
	oau.mutation.Where(ps...)
	return oau
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (oau *OrderAppealUpdate) SetScenicAreaID(i int) *OrderAppealUpdate {
	oau.mutation.ResetScenicAreaID()
	oau.mutation.SetScenicAreaID(i)
	return oau
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (oau *OrderAppealUpdate) SetNillableScenicAreaID(i *int) *OrderAppealUpdate {
	if i != nil {
		oau.SetScenicAreaID(*i)
	}
	return oau
}

// AddScenicAreaID adds i to the "scenic_area_id" field.
func (oau *OrderAppealUpdate) AddScenicAreaID(i int) *OrderAppealUpdate {
	oau.mutation.AddScenicAreaID(i)
	return oau
}

// SetUserID sets the "user_id" field.
func (oau *OrderAppealUpdate) SetUserID(i int) *OrderAppealUpdate {
	oau.mutation.ResetUserID()
	oau.mutation.SetUserID(i)
	return oau
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (oau *OrderAppealUpdate) SetNillableUserID(i *int) *OrderAppealUpdate {
	if i != nil {
		oau.SetUserID(*i)
	}
	return oau
}

// AddUserID adds i to the "user_id" field.
func (oau *OrderAppealUpdate) AddUserID(i int) *OrderAppealUpdate {
	oau.mutation.AddUserID(i)
	return oau
}

// SetOrderID sets the "order_id" field.
func (oau *OrderAppealUpdate) SetOrderID(i int) *OrderAppealUpdate {
	oau.mutation.ResetOrderID()
	oau.mutation.SetOrderID(i)
	return oau
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (oau *OrderAppealUpdate) SetNillableOrderID(i *int) *OrderAppealUpdate {
	if i != nil {
		oau.SetOrderID(*i)
	}
	return oau
}

// AddOrderID adds i to the "order_id" field.
func (oau *OrderAppealUpdate) AddOrderID(i int) *OrderAppealUpdate {
	oau.mutation.AddOrderID(i)
	return oau
}

// SetOrderNo sets the "order_no" field.
func (oau *OrderAppealUpdate) SetOrderNo(s string) *OrderAppealUpdate {
	oau.mutation.SetOrderNo(s)
	return oau
}

// SetNillableOrderNo sets the "order_no" field if the given value is not nil.
func (oau *OrderAppealUpdate) SetNillableOrderNo(s *string) *OrderAppealUpdate {
	if s != nil {
		oau.SetOrderNo(*s)
	}
	return oau
}

// SetType sets the "type" field.
func (oau *OrderAppealUpdate) SetType(i int) *OrderAppealUpdate {
	oau.mutation.ResetType()
	oau.mutation.SetType(i)
	return oau
}

// SetNillableType sets the "type" field if the given value is not nil.
func (oau *OrderAppealUpdate) SetNillableType(i *int) *OrderAppealUpdate {
	if i != nil {
		oau.SetType(*i)
	}
	return oau
}

// AddType adds i to the "type" field.
func (oau *OrderAppealUpdate) AddType(i int) *OrderAppealUpdate {
	oau.mutation.AddType(i)
	return oau
}

// SetEndStopID sets the "end_stop_id" field.
func (oau *OrderAppealUpdate) SetEndStopID(i int) *OrderAppealUpdate {
	oau.mutation.ResetEndStopID()
	oau.mutation.SetEndStopID(i)
	return oau
}

// SetNillableEndStopID sets the "end_stop_id" field if the given value is not nil.
func (oau *OrderAppealUpdate) SetNillableEndStopID(i *int) *OrderAppealUpdate {
	if i != nil {
		oau.SetEndStopID(*i)
	}
	return oau
}

// AddEndStopID adds i to the "end_stop_id" field.
func (oau *OrderAppealUpdate) AddEndStopID(i int) *OrderAppealUpdate {
	oau.mutation.AddEndStopID(i)
	return oau
}

// SetEndStopImageID sets the "end_stop_image_id" field.
func (oau *OrderAppealUpdate) SetEndStopImageID(i int) *OrderAppealUpdate {
	oau.mutation.ResetEndStopImageID()
	oau.mutation.SetEndStopImageID(i)
	return oau
}

// SetNillableEndStopImageID sets the "end_stop_image_id" field if the given value is not nil.
func (oau *OrderAppealUpdate) SetNillableEndStopImageID(i *int) *OrderAppealUpdate {
	if i != nil {
		oau.SetEndStopImageID(*i)
	}
	return oau
}

// AddEndStopImageID adds i to the "end_stop_image_id" field.
func (oau *OrderAppealUpdate) AddEndStopImageID(i int) *OrderAppealUpdate {
	oau.mutation.AddEndStopImageID(i)
	return oau
}

// SetState sets the "state" field.
func (oau *OrderAppealUpdate) SetState(i int) *OrderAppealUpdate {
	oau.mutation.ResetState()
	oau.mutation.SetState(i)
	return oau
}

// SetNillableState sets the "state" field if the given value is not nil.
func (oau *OrderAppealUpdate) SetNillableState(i *int) *OrderAppealUpdate {
	if i != nil {
		oau.SetState(*i)
	}
	return oau
}

// AddState adds i to the "state" field.
func (oau *OrderAppealUpdate) AddState(i int) *OrderAppealUpdate {
	oau.mutation.AddState(i)
	return oau
}

// SetRefundAmount sets the "refund_amount" field.
func (oau *OrderAppealUpdate) SetRefundAmount(i int) *OrderAppealUpdate {
	oau.mutation.ResetRefundAmount()
	oau.mutation.SetRefundAmount(i)
	return oau
}

// SetNillableRefundAmount sets the "refund_amount" field if the given value is not nil.
func (oau *OrderAppealUpdate) SetNillableRefundAmount(i *int) *OrderAppealUpdate {
	if i != nil {
		oau.SetRefundAmount(*i)
	}
	return oau
}

// AddRefundAmount adds i to the "refund_amount" field.
func (oau *OrderAppealUpdate) AddRefundAmount(i int) *OrderAppealUpdate {
	oau.mutation.AddRefundAmount(i)
	return oau
}

// SetUserComment sets the "user_comment" field.
func (oau *OrderAppealUpdate) SetUserComment(s string) *OrderAppealUpdate {
	oau.mutation.SetUserComment(s)
	return oau
}

// SetNillableUserComment sets the "user_comment" field if the given value is not nil.
func (oau *OrderAppealUpdate) SetNillableUserComment(s *string) *OrderAppealUpdate {
	if s != nil {
		oau.SetUserComment(*s)
	}
	return oau
}

// SetReviewComment sets the "review_comment" field.
func (oau *OrderAppealUpdate) SetReviewComment(s string) *OrderAppealUpdate {
	oau.mutation.SetReviewComment(s)
	return oau
}

// SetNillableReviewComment sets the "review_comment" field if the given value is not nil.
func (oau *OrderAppealUpdate) SetNillableReviewComment(s *string) *OrderAppealUpdate {
	if s != nil {
		oau.SetReviewComment(*s)
	}
	return oau
}

// SetRefundTime sets the "refund_time" field.
func (oau *OrderAppealUpdate) SetRefundTime(t time.Time) *OrderAppealUpdate {
	oau.mutation.SetRefundTime(t)
	return oau
}

// SetNillableRefundTime sets the "refund_time" field if the given value is not nil.
func (oau *OrderAppealUpdate) SetNillableRefundTime(t *time.Time) *OrderAppealUpdate {
	if t != nil {
		oau.SetRefundTime(*t)
	}
	return oau
}

// ClearRefundTime clears the value of the "refund_time" field.
func (oau *OrderAppealUpdate) ClearRefundTime() *OrderAppealUpdate {
	oau.mutation.ClearRefundTime()
	return oau
}

// SetReviewTime sets the "review_time" field.
func (oau *OrderAppealUpdate) SetReviewTime(t time.Time) *OrderAppealUpdate {
	oau.mutation.SetReviewTime(t)
	return oau
}

// SetNillableReviewTime sets the "review_time" field if the given value is not nil.
func (oau *OrderAppealUpdate) SetNillableReviewTime(t *time.Time) *OrderAppealUpdate {
	if t != nil {
		oau.SetReviewTime(*t)
	}
	return oau
}

// ClearReviewTime clears the value of the "review_time" field.
func (oau *OrderAppealUpdate) ClearReviewTime() *OrderAppealUpdate {
	oau.mutation.ClearReviewTime()
	return oau
}

// SetUpdateTime sets the "update_time" field.
func (oau *OrderAppealUpdate) SetUpdateTime(t time.Time) *OrderAppealUpdate {
	oau.mutation.SetUpdateTime(t)
	return oau
}

// Mutation returns the OrderAppealMutation object of the builder.
func (oau *OrderAppealUpdate) Mutation() *OrderAppealMutation {
	return oau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oau *OrderAppealUpdate) Save(ctx context.Context) (int, error) {
	oau.defaults()
	return withHooks(ctx, oau.sqlSave, oau.mutation, oau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oau *OrderAppealUpdate) SaveX(ctx context.Context) int {
	affected, err := oau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oau *OrderAppealUpdate) Exec(ctx context.Context) error {
	_, err := oau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oau *OrderAppealUpdate) ExecX(ctx context.Context) {
	if err := oau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oau *OrderAppealUpdate) defaults() {
	if _, ok := oau.mutation.UpdateTime(); !ok {
		v := orderappeal.UpdateDefaultUpdateTime()
		oau.mutation.SetUpdateTime(v)
	}
}

func (oau *OrderAppealUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(orderappeal.Table, orderappeal.Columns, sqlgraph.NewFieldSpec(orderappeal.FieldID, field.TypeInt))
	if ps := oau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oau.mutation.ScenicAreaID(); ok {
		_spec.SetField(orderappeal.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := oau.mutation.AddedScenicAreaID(); ok {
		_spec.AddField(orderappeal.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := oau.mutation.UserID(); ok {
		_spec.SetField(orderappeal.FieldUserID, field.TypeInt, value)
	}
	if value, ok := oau.mutation.AddedUserID(); ok {
		_spec.AddField(orderappeal.FieldUserID, field.TypeInt, value)
	}
	if value, ok := oau.mutation.OrderID(); ok {
		_spec.SetField(orderappeal.FieldOrderID, field.TypeInt, value)
	}
	if value, ok := oau.mutation.AddedOrderID(); ok {
		_spec.AddField(orderappeal.FieldOrderID, field.TypeInt, value)
	}
	if value, ok := oau.mutation.OrderNo(); ok {
		_spec.SetField(orderappeal.FieldOrderNo, field.TypeString, value)
	}
	if value, ok := oau.mutation.GetType(); ok {
		_spec.SetField(orderappeal.FieldType, field.TypeInt, value)
	}
	if value, ok := oau.mutation.AddedType(); ok {
		_spec.AddField(orderappeal.FieldType, field.TypeInt, value)
	}
	if value, ok := oau.mutation.EndStopID(); ok {
		_spec.SetField(orderappeal.FieldEndStopID, field.TypeInt, value)
	}
	if value, ok := oau.mutation.AddedEndStopID(); ok {
		_spec.AddField(orderappeal.FieldEndStopID, field.TypeInt, value)
	}
	if value, ok := oau.mutation.EndStopImageID(); ok {
		_spec.SetField(orderappeal.FieldEndStopImageID, field.TypeInt, value)
	}
	if value, ok := oau.mutation.AddedEndStopImageID(); ok {
		_spec.AddField(orderappeal.FieldEndStopImageID, field.TypeInt, value)
	}
	if value, ok := oau.mutation.State(); ok {
		_spec.SetField(orderappeal.FieldState, field.TypeInt, value)
	}
	if value, ok := oau.mutation.AddedState(); ok {
		_spec.AddField(orderappeal.FieldState, field.TypeInt, value)
	}
	if value, ok := oau.mutation.RefundAmount(); ok {
		_spec.SetField(orderappeal.FieldRefundAmount, field.TypeInt, value)
	}
	if value, ok := oau.mutation.AddedRefundAmount(); ok {
		_spec.AddField(orderappeal.FieldRefundAmount, field.TypeInt, value)
	}
	if value, ok := oau.mutation.UserComment(); ok {
		_spec.SetField(orderappeal.FieldUserComment, field.TypeString, value)
	}
	if value, ok := oau.mutation.ReviewComment(); ok {
		_spec.SetField(orderappeal.FieldReviewComment, field.TypeString, value)
	}
	if value, ok := oau.mutation.RefundTime(); ok {
		_spec.SetField(orderappeal.FieldRefundTime, field.TypeTime, value)
	}
	if oau.mutation.RefundTimeCleared() {
		_spec.ClearField(orderappeal.FieldRefundTime, field.TypeTime)
	}
	if value, ok := oau.mutation.ReviewTime(); ok {
		_spec.SetField(orderappeal.FieldReviewTime, field.TypeTime, value)
	}
	if oau.mutation.ReviewTimeCleared() {
		_spec.ClearField(orderappeal.FieldReviewTime, field.TypeTime)
	}
	if value, ok := oau.mutation.UpdateTime(); ok {
		_spec.SetField(orderappeal.FieldUpdateTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, oau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderappeal.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	oau.mutation.done = true
	return n, nil
}

// OrderAppealUpdateOne is the builder for updating a single OrderAppeal entity.
type OrderAppealUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderAppealMutation
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (oauo *OrderAppealUpdateOne) SetScenicAreaID(i int) *OrderAppealUpdateOne {
	oauo.mutation.ResetScenicAreaID()
	oauo.mutation.SetScenicAreaID(i)
	return oauo
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (oauo *OrderAppealUpdateOne) SetNillableScenicAreaID(i *int) *OrderAppealUpdateOne {
	if i != nil {
		oauo.SetScenicAreaID(*i)
	}
	return oauo
}

// AddScenicAreaID adds i to the "scenic_area_id" field.
func (oauo *OrderAppealUpdateOne) AddScenicAreaID(i int) *OrderAppealUpdateOne {
	oauo.mutation.AddScenicAreaID(i)
	return oauo
}

// SetUserID sets the "user_id" field.
func (oauo *OrderAppealUpdateOne) SetUserID(i int) *OrderAppealUpdateOne {
	oauo.mutation.ResetUserID()
	oauo.mutation.SetUserID(i)
	return oauo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (oauo *OrderAppealUpdateOne) SetNillableUserID(i *int) *OrderAppealUpdateOne {
	if i != nil {
		oauo.SetUserID(*i)
	}
	return oauo
}

// AddUserID adds i to the "user_id" field.
func (oauo *OrderAppealUpdateOne) AddUserID(i int) *OrderAppealUpdateOne {
	oauo.mutation.AddUserID(i)
	return oauo
}

// SetOrderID sets the "order_id" field.
func (oauo *OrderAppealUpdateOne) SetOrderID(i int) *OrderAppealUpdateOne {
	oauo.mutation.ResetOrderID()
	oauo.mutation.SetOrderID(i)
	return oauo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (oauo *OrderAppealUpdateOne) SetNillableOrderID(i *int) *OrderAppealUpdateOne {
	if i != nil {
		oauo.SetOrderID(*i)
	}
	return oauo
}

// AddOrderID adds i to the "order_id" field.
func (oauo *OrderAppealUpdateOne) AddOrderID(i int) *OrderAppealUpdateOne {
	oauo.mutation.AddOrderID(i)
	return oauo
}

// SetOrderNo sets the "order_no" field.
func (oauo *OrderAppealUpdateOne) SetOrderNo(s string) *OrderAppealUpdateOne {
	oauo.mutation.SetOrderNo(s)
	return oauo
}

// SetNillableOrderNo sets the "order_no" field if the given value is not nil.
func (oauo *OrderAppealUpdateOne) SetNillableOrderNo(s *string) *OrderAppealUpdateOne {
	if s != nil {
		oauo.SetOrderNo(*s)
	}
	return oauo
}

// SetType sets the "type" field.
func (oauo *OrderAppealUpdateOne) SetType(i int) *OrderAppealUpdateOne {
	oauo.mutation.ResetType()
	oauo.mutation.SetType(i)
	return oauo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (oauo *OrderAppealUpdateOne) SetNillableType(i *int) *OrderAppealUpdateOne {
	if i != nil {
		oauo.SetType(*i)
	}
	return oauo
}

// AddType adds i to the "type" field.
func (oauo *OrderAppealUpdateOne) AddType(i int) *OrderAppealUpdateOne {
	oauo.mutation.AddType(i)
	return oauo
}

// SetEndStopID sets the "end_stop_id" field.
func (oauo *OrderAppealUpdateOne) SetEndStopID(i int) *OrderAppealUpdateOne {
	oauo.mutation.ResetEndStopID()
	oauo.mutation.SetEndStopID(i)
	return oauo
}

// SetNillableEndStopID sets the "end_stop_id" field if the given value is not nil.
func (oauo *OrderAppealUpdateOne) SetNillableEndStopID(i *int) *OrderAppealUpdateOne {
	if i != nil {
		oauo.SetEndStopID(*i)
	}
	return oauo
}

// AddEndStopID adds i to the "end_stop_id" field.
func (oauo *OrderAppealUpdateOne) AddEndStopID(i int) *OrderAppealUpdateOne {
	oauo.mutation.AddEndStopID(i)
	return oauo
}

// SetEndStopImageID sets the "end_stop_image_id" field.
func (oauo *OrderAppealUpdateOne) SetEndStopImageID(i int) *OrderAppealUpdateOne {
	oauo.mutation.ResetEndStopImageID()
	oauo.mutation.SetEndStopImageID(i)
	return oauo
}

// SetNillableEndStopImageID sets the "end_stop_image_id" field if the given value is not nil.
func (oauo *OrderAppealUpdateOne) SetNillableEndStopImageID(i *int) *OrderAppealUpdateOne {
	if i != nil {
		oauo.SetEndStopImageID(*i)
	}
	return oauo
}

// AddEndStopImageID adds i to the "end_stop_image_id" field.
func (oauo *OrderAppealUpdateOne) AddEndStopImageID(i int) *OrderAppealUpdateOne {
	oauo.mutation.AddEndStopImageID(i)
	return oauo
}

// SetState sets the "state" field.
func (oauo *OrderAppealUpdateOne) SetState(i int) *OrderAppealUpdateOne {
	oauo.mutation.ResetState()
	oauo.mutation.SetState(i)
	return oauo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (oauo *OrderAppealUpdateOne) SetNillableState(i *int) *OrderAppealUpdateOne {
	if i != nil {
		oauo.SetState(*i)
	}
	return oauo
}

// AddState adds i to the "state" field.
func (oauo *OrderAppealUpdateOne) AddState(i int) *OrderAppealUpdateOne {
	oauo.mutation.AddState(i)
	return oauo
}

// SetRefundAmount sets the "refund_amount" field.
func (oauo *OrderAppealUpdateOne) SetRefundAmount(i int) *OrderAppealUpdateOne {
	oauo.mutation.ResetRefundAmount()
	oauo.mutation.SetRefundAmount(i)
	return oauo
}

// SetNillableRefundAmount sets the "refund_amount" field if the given value is not nil.
func (oauo *OrderAppealUpdateOne) SetNillableRefundAmount(i *int) *OrderAppealUpdateOne {
	if i != nil {
		oauo.SetRefundAmount(*i)
	}
	return oauo
}

// AddRefundAmount adds i to the "refund_amount" field.
func (oauo *OrderAppealUpdateOne) AddRefundAmount(i int) *OrderAppealUpdateOne {
	oauo.mutation.AddRefundAmount(i)
	return oauo
}

// SetUserComment sets the "user_comment" field.
func (oauo *OrderAppealUpdateOne) SetUserComment(s string) *OrderAppealUpdateOne {
	oauo.mutation.SetUserComment(s)
	return oauo
}

// SetNillableUserComment sets the "user_comment" field if the given value is not nil.
func (oauo *OrderAppealUpdateOne) SetNillableUserComment(s *string) *OrderAppealUpdateOne {
	if s != nil {
		oauo.SetUserComment(*s)
	}
	return oauo
}

// SetReviewComment sets the "review_comment" field.
func (oauo *OrderAppealUpdateOne) SetReviewComment(s string) *OrderAppealUpdateOne {
	oauo.mutation.SetReviewComment(s)
	return oauo
}

// SetNillableReviewComment sets the "review_comment" field if the given value is not nil.
func (oauo *OrderAppealUpdateOne) SetNillableReviewComment(s *string) *OrderAppealUpdateOne {
	if s != nil {
		oauo.SetReviewComment(*s)
	}
	return oauo
}

// SetRefundTime sets the "refund_time" field.
func (oauo *OrderAppealUpdateOne) SetRefundTime(t time.Time) *OrderAppealUpdateOne {
	oauo.mutation.SetRefundTime(t)
	return oauo
}

// SetNillableRefundTime sets the "refund_time" field if the given value is not nil.
func (oauo *OrderAppealUpdateOne) SetNillableRefundTime(t *time.Time) *OrderAppealUpdateOne {
	if t != nil {
		oauo.SetRefundTime(*t)
	}
	return oauo
}

// ClearRefundTime clears the value of the "refund_time" field.
func (oauo *OrderAppealUpdateOne) ClearRefundTime() *OrderAppealUpdateOne {
	oauo.mutation.ClearRefundTime()
	return oauo
}

// SetReviewTime sets the "review_time" field.
func (oauo *OrderAppealUpdateOne) SetReviewTime(t time.Time) *OrderAppealUpdateOne {
	oauo.mutation.SetReviewTime(t)
	return oauo
}

// SetNillableReviewTime sets the "review_time" field if the given value is not nil.
func (oauo *OrderAppealUpdateOne) SetNillableReviewTime(t *time.Time) *OrderAppealUpdateOne {
	if t != nil {
		oauo.SetReviewTime(*t)
	}
	return oauo
}

// ClearReviewTime clears the value of the "review_time" field.
func (oauo *OrderAppealUpdateOne) ClearReviewTime() *OrderAppealUpdateOne {
	oauo.mutation.ClearReviewTime()
	return oauo
}

// SetUpdateTime sets the "update_time" field.
func (oauo *OrderAppealUpdateOne) SetUpdateTime(t time.Time) *OrderAppealUpdateOne {
	oauo.mutation.SetUpdateTime(t)
	return oauo
}

// Mutation returns the OrderAppealMutation object of the builder.
func (oauo *OrderAppealUpdateOne) Mutation() *OrderAppealMutation {
	return oauo.mutation
}

// Where appends a list predicates to the OrderAppealUpdate builder.
func (oauo *OrderAppealUpdateOne) Where(ps ...predicate.OrderAppeal) *OrderAppealUpdateOne {
	oauo.mutation.Where(ps...)
	return oauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oauo *OrderAppealUpdateOne) Select(field string, fields ...string) *OrderAppealUpdateOne {
	oauo.fields = append([]string{field}, fields...)
	return oauo
}

// Save executes the query and returns the updated OrderAppeal entity.
func (oauo *OrderAppealUpdateOne) Save(ctx context.Context) (*OrderAppeal, error) {
	oauo.defaults()
	return withHooks(ctx, oauo.sqlSave, oauo.mutation, oauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oauo *OrderAppealUpdateOne) SaveX(ctx context.Context) *OrderAppeal {
	node, err := oauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oauo *OrderAppealUpdateOne) Exec(ctx context.Context) error {
	_, err := oauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oauo *OrderAppealUpdateOne) ExecX(ctx context.Context) {
	if err := oauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oauo *OrderAppealUpdateOne) defaults() {
	if _, ok := oauo.mutation.UpdateTime(); !ok {
		v := orderappeal.UpdateDefaultUpdateTime()
		oauo.mutation.SetUpdateTime(v)
	}
}

func (oauo *OrderAppealUpdateOne) sqlSave(ctx context.Context) (_node *OrderAppeal, err error) {
	_spec := sqlgraph.NewUpdateSpec(orderappeal.Table, orderappeal.Columns, sqlgraph.NewFieldSpec(orderappeal.FieldID, field.TypeInt))
	id, ok := oauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrderAppeal.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderappeal.FieldID)
		for _, f := range fields {
			if !orderappeal.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orderappeal.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oauo.mutation.ScenicAreaID(); ok {
		_spec.SetField(orderappeal.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := oauo.mutation.AddedScenicAreaID(); ok {
		_spec.AddField(orderappeal.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := oauo.mutation.UserID(); ok {
		_spec.SetField(orderappeal.FieldUserID, field.TypeInt, value)
	}
	if value, ok := oauo.mutation.AddedUserID(); ok {
		_spec.AddField(orderappeal.FieldUserID, field.TypeInt, value)
	}
	if value, ok := oauo.mutation.OrderID(); ok {
		_spec.SetField(orderappeal.FieldOrderID, field.TypeInt, value)
	}
	if value, ok := oauo.mutation.AddedOrderID(); ok {
		_spec.AddField(orderappeal.FieldOrderID, field.TypeInt, value)
	}
	if value, ok := oauo.mutation.OrderNo(); ok {
		_spec.SetField(orderappeal.FieldOrderNo, field.TypeString, value)
	}
	if value, ok := oauo.mutation.GetType(); ok {
		_spec.SetField(orderappeal.FieldType, field.TypeInt, value)
	}
	if value, ok := oauo.mutation.AddedType(); ok {
		_spec.AddField(orderappeal.FieldType, field.TypeInt, value)
	}
	if value, ok := oauo.mutation.EndStopID(); ok {
		_spec.SetField(orderappeal.FieldEndStopID, field.TypeInt, value)
	}
	if value, ok := oauo.mutation.AddedEndStopID(); ok {
		_spec.AddField(orderappeal.FieldEndStopID, field.TypeInt, value)
	}
	if value, ok := oauo.mutation.EndStopImageID(); ok {
		_spec.SetField(orderappeal.FieldEndStopImageID, field.TypeInt, value)
	}
	if value, ok := oauo.mutation.AddedEndStopImageID(); ok {
		_spec.AddField(orderappeal.FieldEndStopImageID, field.TypeInt, value)
	}
	if value, ok := oauo.mutation.State(); ok {
		_spec.SetField(orderappeal.FieldState, field.TypeInt, value)
	}
	if value, ok := oauo.mutation.AddedState(); ok {
		_spec.AddField(orderappeal.FieldState, field.TypeInt, value)
	}
	if value, ok := oauo.mutation.RefundAmount(); ok {
		_spec.SetField(orderappeal.FieldRefundAmount, field.TypeInt, value)
	}
	if value, ok := oauo.mutation.AddedRefundAmount(); ok {
		_spec.AddField(orderappeal.FieldRefundAmount, field.TypeInt, value)
	}
	if value, ok := oauo.mutation.UserComment(); ok {
		_spec.SetField(orderappeal.FieldUserComment, field.TypeString, value)
	}
	if value, ok := oauo.mutation.ReviewComment(); ok {
		_spec.SetField(orderappeal.FieldReviewComment, field.TypeString, value)
	}
	if value, ok := oauo.mutation.RefundTime(); ok {
		_spec.SetField(orderappeal.FieldRefundTime, field.TypeTime, value)
	}
	if oauo.mutation.RefundTimeCleared() {
		_spec.ClearField(orderappeal.FieldRefundTime, field.TypeTime)
	}
	if value, ok := oauo.mutation.ReviewTime(); ok {
		_spec.SetField(orderappeal.FieldReviewTime, field.TypeTime, value)
	}
	if oauo.mutation.ReviewTimeCleared() {
		_spec.ClearField(orderappeal.FieldReviewTime, field.TypeTime)
	}
	if value, ok := oauo.mutation.UpdateTime(); ok {
		_spec.SetField(orderappeal.FieldUpdateTime, field.TypeTime, value)
	}
	_node = &OrderAppeal{config: oauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderappeal.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oauo.mutation.done = true
	return _node, nil
}
