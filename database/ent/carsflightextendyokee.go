// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/carsflightextendyokee"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CarsFlightExtendYokee is the model entity for the CarsFlightExtendYokee schema.
type CarsFlightExtendYokee struct {
	config `json:"-"`
	// ID of the ent.
	// ID
	ID int `json:"id,omitempty"`
	// 班次ID
	FlightID int `json:"flight_id,omitempty"`
	// 九识分配的任务ID
	YokeeDispatchID int `json:"yokee_dispatch_id,omitempty"`
	// 九识分配的任务ID
	YokeeSpeedLimit int `json:"yokee_speed_limit,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime   time.Time `json:"update_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CarsFlightExtendYokee) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case carsflightextendyokee.FieldID, carsflightextendyokee.FieldFlightID, carsflightextendyokee.FieldYokeeDispatchID, carsflightextendyokee.FieldYokeeSpeedLimit:
			values[i] = new(sql.NullInt64)
		case carsflightextendyokee.FieldCreateTime, carsflightextendyokee.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CarsFlightExtendYokee fields.
func (cfey *CarsFlightExtendYokee) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case carsflightextendyokee.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cfey.ID = int(value.Int64)
		case carsflightextendyokee.FieldFlightID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field flight_id", values[i])
			} else if value.Valid {
				cfey.FlightID = int(value.Int64)
			}
		case carsflightextendyokee.FieldYokeeDispatchID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field yokee_dispatch_id", values[i])
			} else if value.Valid {
				cfey.YokeeDispatchID = int(value.Int64)
			}
		case carsflightextendyokee.FieldYokeeSpeedLimit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field yokee_speed_limit", values[i])
			} else if value.Valid {
				cfey.YokeeSpeedLimit = int(value.Int64)
			}
		case carsflightextendyokee.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				cfey.CreateTime = value.Time
			}
		case carsflightextendyokee.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				cfey.UpdateTime = value.Time
			}
		default:
			cfey.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CarsFlightExtendYokee.
// This includes values selected through modifiers, order, etc.
func (cfey *CarsFlightExtendYokee) Value(name string) (ent.Value, error) {
	return cfey.selectValues.Get(name)
}

// Update returns a builder for updating this CarsFlightExtendYokee.
// Note that you need to call CarsFlightExtendYokee.Unwrap() before calling this method if this CarsFlightExtendYokee
// was returned from a transaction, and the transaction was committed or rolled back.
func (cfey *CarsFlightExtendYokee) Update() *CarsFlightExtendYokeeUpdateOne {
	return NewCarsFlightExtendYokeeClient(cfey.config).UpdateOne(cfey)
}

// Unwrap unwraps the CarsFlightExtendYokee entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cfey *CarsFlightExtendYokee) Unwrap() *CarsFlightExtendYokee {
	_tx, ok := cfey.config.driver.(*txDriver)
	if !ok {
		panic("ent: CarsFlightExtendYokee is not a transactional entity")
	}
	cfey.config.driver = _tx.drv
	return cfey
}

// String implements the fmt.Stringer.
func (cfey *CarsFlightExtendYokee) String() string {
	var builder strings.Builder
	builder.WriteString("CarsFlightExtendYokee(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cfey.ID))
	builder.WriteString("flight_id=")
	builder.WriteString(fmt.Sprintf("%v", cfey.FlightID))
	builder.WriteString(", ")
	builder.WriteString("yokee_dispatch_id=")
	builder.WriteString(fmt.Sprintf("%v", cfey.YokeeDispatchID))
	builder.WriteString(", ")
	builder.WriteString("yokee_speed_limit=")
	builder.WriteString(fmt.Sprintf("%v", cfey.YokeeSpeedLimit))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(cfey.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(cfey.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CarsFlightExtendYokees is a parsable slice of CarsFlightExtendYokee.
type CarsFlightExtendYokees []*CarsFlightExtendYokee
