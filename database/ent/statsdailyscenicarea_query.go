// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"github.com/jianbo-zh/jydata/database/ent/statsdailyscenicarea"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StatsDailyScenicAreaQuery is the builder for querying StatsDailyScenicArea entities.
type StatsDailyScenicAreaQuery struct {
	config
	ctx        *QueryContext
	order      []statsdailyscenicarea.OrderOption
	inters     []Interceptor
	predicates []predicate.StatsDailyScenicArea
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the StatsDailyScenicAreaQuery builder.
func (sdsaq *StatsDailyScenicAreaQuery) Where(ps ...predicate.StatsDailyScenicArea) *StatsDailyScenicAreaQuery {
	sdsaq.predicates = append(sdsaq.predicates, ps...)
	return sdsaq
}

// Limit the number of records to be returned by this query.
func (sdsaq *StatsDailyScenicAreaQuery) Limit(limit int) *StatsDailyScenicAreaQuery {
	sdsaq.ctx.Limit = &limit
	return sdsaq
}

// Offset to start from.
func (sdsaq *StatsDailyScenicAreaQuery) Offset(offset int) *StatsDailyScenicAreaQuery {
	sdsaq.ctx.Offset = &offset
	return sdsaq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sdsaq *StatsDailyScenicAreaQuery) Unique(unique bool) *StatsDailyScenicAreaQuery {
	sdsaq.ctx.Unique = &unique
	return sdsaq
}

// Order specifies how the records should be ordered.
func (sdsaq *StatsDailyScenicAreaQuery) Order(o ...statsdailyscenicarea.OrderOption) *StatsDailyScenicAreaQuery {
	sdsaq.order = append(sdsaq.order, o...)
	return sdsaq
}

// First returns the first StatsDailyScenicArea entity from the query.
// Returns a *NotFoundError when no StatsDailyScenicArea was found.
func (sdsaq *StatsDailyScenicAreaQuery) First(ctx context.Context) (*StatsDailyScenicArea, error) {
	nodes, err := sdsaq.Limit(1).All(setContextOp(ctx, sdsaq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{statsdailyscenicarea.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sdsaq *StatsDailyScenicAreaQuery) FirstX(ctx context.Context) *StatsDailyScenicArea {
	node, err := sdsaq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first StatsDailyScenicArea ID from the query.
// Returns a *NotFoundError when no StatsDailyScenicArea ID was found.
func (sdsaq *StatsDailyScenicAreaQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = sdsaq.Limit(1).IDs(setContextOp(ctx, sdsaq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{statsdailyscenicarea.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sdsaq *StatsDailyScenicAreaQuery) FirstIDX(ctx context.Context) int {
	id, err := sdsaq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single StatsDailyScenicArea entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one StatsDailyScenicArea entity is found.
// Returns a *NotFoundError when no StatsDailyScenicArea entities are found.
func (sdsaq *StatsDailyScenicAreaQuery) Only(ctx context.Context) (*StatsDailyScenicArea, error) {
	nodes, err := sdsaq.Limit(2).All(setContextOp(ctx, sdsaq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{statsdailyscenicarea.Label}
	default:
		return nil, &NotSingularError{statsdailyscenicarea.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sdsaq *StatsDailyScenicAreaQuery) OnlyX(ctx context.Context) *StatsDailyScenicArea {
	node, err := sdsaq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only StatsDailyScenicArea ID in the query.
// Returns a *NotSingularError when more than one StatsDailyScenicArea ID is found.
// Returns a *NotFoundError when no entities are found.
func (sdsaq *StatsDailyScenicAreaQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = sdsaq.Limit(2).IDs(setContextOp(ctx, sdsaq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{statsdailyscenicarea.Label}
	default:
		err = &NotSingularError{statsdailyscenicarea.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sdsaq *StatsDailyScenicAreaQuery) OnlyIDX(ctx context.Context) int {
	id, err := sdsaq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of StatsDailyScenicAreas.
func (sdsaq *StatsDailyScenicAreaQuery) All(ctx context.Context) ([]*StatsDailyScenicArea, error) {
	ctx = setContextOp(ctx, sdsaq.ctx, ent.OpQueryAll)
	if err := sdsaq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*StatsDailyScenicArea, *StatsDailyScenicAreaQuery]()
	return withInterceptors[[]*StatsDailyScenicArea](ctx, sdsaq, qr, sdsaq.inters)
}

// AllX is like All, but panics if an error occurs.
func (sdsaq *StatsDailyScenicAreaQuery) AllX(ctx context.Context) []*StatsDailyScenicArea {
	nodes, err := sdsaq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of StatsDailyScenicArea IDs.
func (sdsaq *StatsDailyScenicAreaQuery) IDs(ctx context.Context) (ids []int, err error) {
	if sdsaq.ctx.Unique == nil && sdsaq.path != nil {
		sdsaq.Unique(true)
	}
	ctx = setContextOp(ctx, sdsaq.ctx, ent.OpQueryIDs)
	if err = sdsaq.Select(statsdailyscenicarea.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sdsaq *StatsDailyScenicAreaQuery) IDsX(ctx context.Context) []int {
	ids, err := sdsaq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sdsaq *StatsDailyScenicAreaQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, sdsaq.ctx, ent.OpQueryCount)
	if err := sdsaq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, sdsaq, querierCount[*StatsDailyScenicAreaQuery](), sdsaq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (sdsaq *StatsDailyScenicAreaQuery) CountX(ctx context.Context) int {
	count, err := sdsaq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sdsaq *StatsDailyScenicAreaQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, sdsaq.ctx, ent.OpQueryExist)
	switch _, err := sdsaq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (sdsaq *StatsDailyScenicAreaQuery) ExistX(ctx context.Context) bool {
	exist, err := sdsaq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the StatsDailyScenicAreaQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sdsaq *StatsDailyScenicAreaQuery) Clone() *StatsDailyScenicAreaQuery {
	if sdsaq == nil {
		return nil
	}
	return &StatsDailyScenicAreaQuery{
		config:     sdsaq.config,
		ctx:        sdsaq.ctx.Clone(),
		order:      append([]statsdailyscenicarea.OrderOption{}, sdsaq.order...),
		inters:     append([]Interceptor{}, sdsaq.inters...),
		predicates: append([]predicate.StatsDailyScenicArea{}, sdsaq.predicates...),
		// clone intermediate query.
		sql:  sdsaq.sql.Clone(),
		path: sdsaq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ScenicAreaID int `json:"scenic_area_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.StatsDailyScenicArea.Query().
//		GroupBy(statsdailyscenicarea.FieldScenicAreaID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (sdsaq *StatsDailyScenicAreaQuery) GroupBy(field string, fields ...string) *StatsDailyScenicAreaGroupBy {
	sdsaq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &StatsDailyScenicAreaGroupBy{build: sdsaq}
	grbuild.flds = &sdsaq.ctx.Fields
	grbuild.label = statsdailyscenicarea.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ScenicAreaID int `json:"scenic_area_id,omitempty"`
//	}
//
//	client.StatsDailyScenicArea.Query().
//		Select(statsdailyscenicarea.FieldScenicAreaID).
//		Scan(ctx, &v)
func (sdsaq *StatsDailyScenicAreaQuery) Select(fields ...string) *StatsDailyScenicAreaSelect {
	sdsaq.ctx.Fields = append(sdsaq.ctx.Fields, fields...)
	sbuild := &StatsDailyScenicAreaSelect{StatsDailyScenicAreaQuery: sdsaq}
	sbuild.label = statsdailyscenicarea.Label
	sbuild.flds, sbuild.scan = &sdsaq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a StatsDailyScenicAreaSelect configured with the given aggregations.
func (sdsaq *StatsDailyScenicAreaQuery) Aggregate(fns ...AggregateFunc) *StatsDailyScenicAreaSelect {
	return sdsaq.Select().Aggregate(fns...)
}

func (sdsaq *StatsDailyScenicAreaQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range sdsaq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, sdsaq); err != nil {
				return err
			}
		}
	}
	for _, f := range sdsaq.ctx.Fields {
		if !statsdailyscenicarea.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if sdsaq.path != nil {
		prev, err := sdsaq.path(ctx)
		if err != nil {
			return err
		}
		sdsaq.sql = prev
	}
	return nil
}

func (sdsaq *StatsDailyScenicAreaQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*StatsDailyScenicArea, error) {
	var (
		nodes = []*StatsDailyScenicArea{}
		_spec = sdsaq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*StatsDailyScenicArea).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &StatsDailyScenicArea{config: sdsaq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, sdsaq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (sdsaq *StatsDailyScenicAreaQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sdsaq.querySpec()
	_spec.Node.Columns = sdsaq.ctx.Fields
	if len(sdsaq.ctx.Fields) > 0 {
		_spec.Unique = sdsaq.ctx.Unique != nil && *sdsaq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, sdsaq.driver, _spec)
}

func (sdsaq *StatsDailyScenicAreaQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(statsdailyscenicarea.Table, statsdailyscenicarea.Columns, sqlgraph.NewFieldSpec(statsdailyscenicarea.FieldID, field.TypeInt))
	_spec.From = sdsaq.sql
	if unique := sdsaq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if sdsaq.path != nil {
		_spec.Unique = true
	}
	if fields := sdsaq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, statsdailyscenicarea.FieldID)
		for i := range fields {
			if fields[i] != statsdailyscenicarea.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := sdsaq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sdsaq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sdsaq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sdsaq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sdsaq *StatsDailyScenicAreaQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sdsaq.driver.Dialect())
	t1 := builder.Table(statsdailyscenicarea.Table)
	columns := sdsaq.ctx.Fields
	if len(columns) == 0 {
		columns = statsdailyscenicarea.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sdsaq.sql != nil {
		selector = sdsaq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sdsaq.ctx.Unique != nil && *sdsaq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range sdsaq.predicates {
		p(selector)
	}
	for _, p := range sdsaq.order {
		p(selector)
	}
	if offset := sdsaq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sdsaq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// StatsDailyScenicAreaGroupBy is the group-by builder for StatsDailyScenicArea entities.
type StatsDailyScenicAreaGroupBy struct {
	selector
	build *StatsDailyScenicAreaQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sdsagb *StatsDailyScenicAreaGroupBy) Aggregate(fns ...AggregateFunc) *StatsDailyScenicAreaGroupBy {
	sdsagb.fns = append(sdsagb.fns, fns...)
	return sdsagb
}

// Scan applies the selector query and scans the result into the given value.
func (sdsagb *StatsDailyScenicAreaGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sdsagb.build.ctx, ent.OpQueryGroupBy)
	if err := sdsagb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*StatsDailyScenicAreaQuery, *StatsDailyScenicAreaGroupBy](ctx, sdsagb.build, sdsagb, sdsagb.build.inters, v)
}

func (sdsagb *StatsDailyScenicAreaGroupBy) sqlScan(ctx context.Context, root *StatsDailyScenicAreaQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(sdsagb.fns))
	for _, fn := range sdsagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*sdsagb.flds)+len(sdsagb.fns))
		for _, f := range *sdsagb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*sdsagb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sdsagb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// StatsDailyScenicAreaSelect is the builder for selecting fields of StatsDailyScenicArea entities.
type StatsDailyScenicAreaSelect struct {
	*StatsDailyScenicAreaQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (sdsas *StatsDailyScenicAreaSelect) Aggregate(fns ...AggregateFunc) *StatsDailyScenicAreaSelect {
	sdsas.fns = append(sdsas.fns, fns...)
	return sdsas
}

// Scan applies the selector query and scans the result into the given value.
func (sdsas *StatsDailyScenicAreaSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sdsas.ctx, ent.OpQuerySelect)
	if err := sdsas.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*StatsDailyScenicAreaQuery, *StatsDailyScenicAreaSelect](ctx, sdsas.StatsDailyScenicAreaQuery, sdsas, sdsas.inters, v)
}

func (sdsas *StatsDailyScenicAreaSelect) sqlScan(ctx context.Context, root *StatsDailyScenicAreaQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(sdsas.fns))
	for _, fn := range sdsas.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*sdsas.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sdsas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
