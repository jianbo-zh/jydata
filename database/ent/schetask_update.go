// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/car"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"github.com/jianbo-zh/jydata/database/ent/schetask"
	"github.com/jianbo-zh/jydata/database/ent/schetaskevent"
	"github.com/jianbo-zh/jydata/database/schema/types"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScheTaskUpdate is the builder for updating ScheTask entities.
type ScheTaskUpdate struct {
	config
	hooks    []Hook
	mutation *ScheTaskMutation
}

// Where appends a list predicates to the ScheTaskUpdate builder.
func (stu *ScheTaskUpdate) Where(ps ...predicate.ScheTask) *ScheTaskUpdate {
	stu.mutation.Where(ps...)
	return stu
}

// SetUserType sets the "user_type" field.
func (stu *ScheTaskUpdate) SetUserType(i int) *ScheTaskUpdate {
	stu.mutation.ResetUserType()
	stu.mutation.SetUserType(i)
	return stu
}

// SetNillableUserType sets the "user_type" field if the given value is not nil.
func (stu *ScheTaskUpdate) SetNillableUserType(i *int) *ScheTaskUpdate {
	if i != nil {
		stu.SetUserType(*i)
	}
	return stu
}

// AddUserType adds i to the "user_type" field.
func (stu *ScheTaskUpdate) AddUserType(i int) *ScheTaskUpdate {
	stu.mutation.AddUserType(i)
	return stu
}

// SetUserID sets the "user_id" field.
func (stu *ScheTaskUpdate) SetUserID(i int) *ScheTaskUpdate {
	stu.mutation.ResetUserID()
	stu.mutation.SetUserID(i)
	return stu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (stu *ScheTaskUpdate) SetNillableUserID(i *int) *ScheTaskUpdate {
	if i != nil {
		stu.SetUserID(*i)
	}
	return stu
}

// AddUserID adds i to the "user_id" field.
func (stu *ScheTaskUpdate) AddUserID(i int) *ScheTaskUpdate {
	stu.mutation.AddUserID(i)
	return stu
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (stu *ScheTaskUpdate) SetScenicAreaID(i int) *ScheTaskUpdate {
	stu.mutation.ResetScenicAreaID()
	stu.mutation.SetScenicAreaID(i)
	return stu
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (stu *ScheTaskUpdate) SetNillableScenicAreaID(i *int) *ScheTaskUpdate {
	if i != nil {
		stu.SetScenicAreaID(*i)
	}
	return stu
}

// AddScenicAreaID adds i to the "scenic_area_id" field.
func (stu *ScheTaskUpdate) AddScenicAreaID(i int) *ScheTaskUpdate {
	stu.mutation.AddScenicAreaID(i)
	return stu
}

// SetCarID sets the "car_id" field.
func (stu *ScheTaskUpdate) SetCarID(i int) *ScheTaskUpdate {
	stu.mutation.SetCarID(i)
	return stu
}

// SetNillableCarID sets the "car_id" field if the given value is not nil.
func (stu *ScheTaskUpdate) SetNillableCarID(i *int) *ScheTaskUpdate {
	if i != nil {
		stu.SetCarID(*i)
	}
	return stu
}

// SetDeviceID sets the "device_id" field.
func (stu *ScheTaskUpdate) SetDeviceID(s string) *ScheTaskUpdate {
	stu.mutation.SetDeviceID(s)
	return stu
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (stu *ScheTaskUpdate) SetNillableDeviceID(s *string) *ScheTaskUpdate {
	if s != nil {
		stu.SetDeviceID(*s)
	}
	return stu
}

// SetDestID sets the "dest_id" field.
func (stu *ScheTaskUpdate) SetDestID(i int) *ScheTaskUpdate {
	stu.mutation.ResetDestID()
	stu.mutation.SetDestID(i)
	return stu
}

// SetNillableDestID sets the "dest_id" field if the given value is not nil.
func (stu *ScheTaskUpdate) SetNillableDestID(i *int) *ScheTaskUpdate {
	if i != nil {
		stu.SetDestID(*i)
	}
	return stu
}

// AddDestID adds i to the "dest_id" field.
func (stu *ScheTaskUpdate) AddDestID(i int) *ScheTaskUpdate {
	stu.mutation.AddDestID(i)
	return stu
}

// SetDestLon sets the "dest_lon" field.
func (stu *ScheTaskUpdate) SetDestLon(f float64) *ScheTaskUpdate {
	stu.mutation.ResetDestLon()
	stu.mutation.SetDestLon(f)
	return stu
}

// SetNillableDestLon sets the "dest_lon" field if the given value is not nil.
func (stu *ScheTaskUpdate) SetNillableDestLon(f *float64) *ScheTaskUpdate {
	if f != nil {
		stu.SetDestLon(*f)
	}
	return stu
}

// AddDestLon adds f to the "dest_lon" field.
func (stu *ScheTaskUpdate) AddDestLon(f float64) *ScheTaskUpdate {
	stu.mutation.AddDestLon(f)
	return stu
}

// SetDestLat sets the "dest_lat" field.
func (stu *ScheTaskUpdate) SetDestLat(f float64) *ScheTaskUpdate {
	stu.mutation.ResetDestLat()
	stu.mutation.SetDestLat(f)
	return stu
}

// SetNillableDestLat sets the "dest_lat" field if the given value is not nil.
func (stu *ScheTaskUpdate) SetNillableDestLat(f *float64) *ScheTaskUpdate {
	if f != nil {
		stu.SetDestLat(*f)
	}
	return stu
}

// AddDestLat adds f to the "dest_lat" field.
func (stu *ScheTaskUpdate) AddDestLat(f float64) *ScheTaskUpdate {
	stu.mutation.AddDestLat(f)
	return stu
}

// SetType sets the "type" field.
func (stu *ScheTaskUpdate) SetType(i int) *ScheTaskUpdate {
	stu.mutation.ResetType()
	stu.mutation.SetType(i)
	return stu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (stu *ScheTaskUpdate) SetNillableType(i *int) *ScheTaskUpdate {
	if i != nil {
		stu.SetType(*i)
	}
	return stu
}

// AddType adds i to the "type" field.
func (stu *ScheTaskUpdate) AddType(i int) *ScheTaskUpdate {
	stu.mutation.AddType(i)
	return stu
}

// SetLoadLimit sets the "load_limit" field.
func (stu *ScheTaskUpdate) SetLoadLimit(i int) *ScheTaskUpdate {
	stu.mutation.ResetLoadLimit()
	stu.mutation.SetLoadLimit(i)
	return stu
}

// SetNillableLoadLimit sets the "load_limit" field if the given value is not nil.
func (stu *ScheTaskUpdate) SetNillableLoadLimit(i *int) *ScheTaskUpdate {
	if i != nil {
		stu.SetLoadLimit(*i)
	}
	return stu
}

// AddLoadLimit adds i to the "load_limit" field.
func (stu *ScheTaskUpdate) AddLoadLimit(i int) *ScheTaskUpdate {
	stu.mutation.AddLoadLimit(i)
	return stu
}

// SetState sets the "state" field.
func (stu *ScheTaskUpdate) SetState(i int) *ScheTaskUpdate {
	stu.mutation.ResetState()
	stu.mutation.SetState(i)
	return stu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (stu *ScheTaskUpdate) SetNillableState(i *int) *ScheTaskUpdate {
	if i != nil {
		stu.SetState(*i)
	}
	return stu
}

// AddState adds i to the "state" field.
func (stu *ScheTaskUpdate) AddState(i int) *ScheTaskUpdate {
	stu.mutation.AddState(i)
	return stu
}

// SetAbnormalState sets the "abnormal_state" field.
func (stu *ScheTaskUpdate) SetAbnormalState(i int) *ScheTaskUpdate {
	stu.mutation.ResetAbnormalState()
	stu.mutation.SetAbnormalState(i)
	return stu
}

// SetNillableAbnormalState sets the "abnormal_state" field if the given value is not nil.
func (stu *ScheTaskUpdate) SetNillableAbnormalState(i *int) *ScheTaskUpdate {
	if i != nil {
		stu.SetAbnormalState(*i)
	}
	return stu
}

// AddAbnormalState adds i to the "abnormal_state" field.
func (stu *ScheTaskUpdate) AddAbnormalState(i int) *ScheTaskUpdate {
	stu.mutation.AddAbnormalState(i)
	return stu
}

// SetRemark sets the "remark" field.
func (stu *ScheTaskUpdate) SetRemark(s string) *ScheTaskUpdate {
	stu.mutation.SetRemark(s)
	return stu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (stu *ScheTaskUpdate) SetNillableRemark(s *string) *ScheTaskUpdate {
	if s != nil {
		stu.SetRemark(*s)
	}
	return stu
}

// SetRoutingPath sets the "routing_path" field.
func (stu *ScheTaskUpdate) SetRoutingPath(tp types.RoutingPath) *ScheTaskUpdate {
	stu.mutation.SetRoutingPath(tp)
	return stu
}

// SetNillableRoutingPath sets the "routing_path" field if the given value is not nil.
func (stu *ScheTaskUpdate) SetNillableRoutingPath(tp *types.RoutingPath) *ScheTaskUpdate {
	if tp != nil {
		stu.SetRoutingPath(*tp)
	}
	return stu
}

// SetEndTime sets the "end_time" field.
func (stu *ScheTaskUpdate) SetEndTime(t time.Time) *ScheTaskUpdate {
	stu.mutation.SetEndTime(t)
	return stu
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (stu *ScheTaskUpdate) SetNillableEndTime(t *time.Time) *ScheTaskUpdate {
	if t != nil {
		stu.SetEndTime(*t)
	}
	return stu
}

// ClearEndTime clears the value of the "end_time" field.
func (stu *ScheTaskUpdate) ClearEndTime() *ScheTaskUpdate {
	stu.mutation.ClearEndTime()
	return stu
}

// SetUpdateTime sets the "update_time" field.
func (stu *ScheTaskUpdate) SetUpdateTime(t time.Time) *ScheTaskUpdate {
	stu.mutation.SetUpdateTime(t)
	return stu
}

// SetCar sets the "car" edge to the Car entity.
func (stu *ScheTaskUpdate) SetCar(c *Car) *ScheTaskUpdate {
	return stu.SetCarID(c.ID)
}

// AddEventIDs adds the "events" edge to the ScheTaskEvent entity by IDs.
func (stu *ScheTaskUpdate) AddEventIDs(ids ...int) *ScheTaskUpdate {
	stu.mutation.AddEventIDs(ids...)
	return stu
}

// AddEvents adds the "events" edges to the ScheTaskEvent entity.
func (stu *ScheTaskUpdate) AddEvents(s ...*ScheTaskEvent) *ScheTaskUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stu.AddEventIDs(ids...)
}

// Mutation returns the ScheTaskMutation object of the builder.
func (stu *ScheTaskUpdate) Mutation() *ScheTaskMutation {
	return stu.mutation
}

// ClearCar clears the "car" edge to the Car entity.
func (stu *ScheTaskUpdate) ClearCar() *ScheTaskUpdate {
	stu.mutation.ClearCar()
	return stu
}

// ClearEvents clears all "events" edges to the ScheTaskEvent entity.
func (stu *ScheTaskUpdate) ClearEvents() *ScheTaskUpdate {
	stu.mutation.ClearEvents()
	return stu
}

// RemoveEventIDs removes the "events" edge to ScheTaskEvent entities by IDs.
func (stu *ScheTaskUpdate) RemoveEventIDs(ids ...int) *ScheTaskUpdate {
	stu.mutation.RemoveEventIDs(ids...)
	return stu
}

// RemoveEvents removes "events" edges to ScheTaskEvent entities.
func (stu *ScheTaskUpdate) RemoveEvents(s ...*ScheTaskEvent) *ScheTaskUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stu.RemoveEventIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (stu *ScheTaskUpdate) Save(ctx context.Context) (int, error) {
	stu.defaults()
	return withHooks(ctx, stu.sqlSave, stu.mutation, stu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (stu *ScheTaskUpdate) SaveX(ctx context.Context) int {
	affected, err := stu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (stu *ScheTaskUpdate) Exec(ctx context.Context) error {
	_, err := stu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stu *ScheTaskUpdate) ExecX(ctx context.Context) {
	if err := stu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stu *ScheTaskUpdate) defaults() {
	if _, ok := stu.mutation.UpdateTime(); !ok {
		v := schetask.UpdateDefaultUpdateTime()
		stu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stu *ScheTaskUpdate) check() error {
	if stu.mutation.CarCleared() && len(stu.mutation.CarIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ScheTask.car"`)
	}
	return nil
}

func (stu *ScheTaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := stu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(schetask.Table, schetask.Columns, sqlgraph.NewFieldSpec(schetask.FieldID, field.TypeInt))
	if ps := stu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stu.mutation.UserType(); ok {
		_spec.SetField(schetask.FieldUserType, field.TypeInt, value)
	}
	if value, ok := stu.mutation.AddedUserType(); ok {
		_spec.AddField(schetask.FieldUserType, field.TypeInt, value)
	}
	if value, ok := stu.mutation.UserID(); ok {
		_spec.SetField(schetask.FieldUserID, field.TypeInt, value)
	}
	if value, ok := stu.mutation.AddedUserID(); ok {
		_spec.AddField(schetask.FieldUserID, field.TypeInt, value)
	}
	if value, ok := stu.mutation.ScenicAreaID(); ok {
		_spec.SetField(schetask.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := stu.mutation.AddedScenicAreaID(); ok {
		_spec.AddField(schetask.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := stu.mutation.DeviceID(); ok {
		_spec.SetField(schetask.FieldDeviceID, field.TypeString, value)
	}
	if value, ok := stu.mutation.DestID(); ok {
		_spec.SetField(schetask.FieldDestID, field.TypeInt, value)
	}
	if value, ok := stu.mutation.AddedDestID(); ok {
		_spec.AddField(schetask.FieldDestID, field.TypeInt, value)
	}
	if value, ok := stu.mutation.DestLon(); ok {
		_spec.SetField(schetask.FieldDestLon, field.TypeFloat64, value)
	}
	if value, ok := stu.mutation.AddedDestLon(); ok {
		_spec.AddField(schetask.FieldDestLon, field.TypeFloat64, value)
	}
	if value, ok := stu.mutation.DestLat(); ok {
		_spec.SetField(schetask.FieldDestLat, field.TypeFloat64, value)
	}
	if value, ok := stu.mutation.AddedDestLat(); ok {
		_spec.AddField(schetask.FieldDestLat, field.TypeFloat64, value)
	}
	if value, ok := stu.mutation.GetType(); ok {
		_spec.SetField(schetask.FieldType, field.TypeInt, value)
	}
	if value, ok := stu.mutation.AddedType(); ok {
		_spec.AddField(schetask.FieldType, field.TypeInt, value)
	}
	if value, ok := stu.mutation.LoadLimit(); ok {
		_spec.SetField(schetask.FieldLoadLimit, field.TypeInt, value)
	}
	if value, ok := stu.mutation.AddedLoadLimit(); ok {
		_spec.AddField(schetask.FieldLoadLimit, field.TypeInt, value)
	}
	if value, ok := stu.mutation.State(); ok {
		_spec.SetField(schetask.FieldState, field.TypeInt, value)
	}
	if value, ok := stu.mutation.AddedState(); ok {
		_spec.AddField(schetask.FieldState, field.TypeInt, value)
	}
	if value, ok := stu.mutation.AbnormalState(); ok {
		_spec.SetField(schetask.FieldAbnormalState, field.TypeInt, value)
	}
	if value, ok := stu.mutation.AddedAbnormalState(); ok {
		_spec.AddField(schetask.FieldAbnormalState, field.TypeInt, value)
	}
	if value, ok := stu.mutation.Remark(); ok {
		_spec.SetField(schetask.FieldRemark, field.TypeString, value)
	}
	if value, ok := stu.mutation.RoutingPath(); ok {
		_spec.SetField(schetask.FieldRoutingPath, field.TypeJSON, value)
	}
	if value, ok := stu.mutation.EndTime(); ok {
		_spec.SetField(schetask.FieldEndTime, field.TypeTime, value)
	}
	if stu.mutation.EndTimeCleared() {
		_spec.ClearField(schetask.FieldEndTime, field.TypeTime)
	}
	if value, ok := stu.mutation.UpdateTime(); ok {
		_spec.SetField(schetask.FieldUpdateTime, field.TypeTime, value)
	}
	if stu.mutation.CarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   schetask.CarTable,
			Columns: []string{schetask.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   schetask.CarTable,
			Columns: []string{schetask.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   schetask.EventsTable,
			Columns: []string{schetask.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schetaskevent.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.RemovedEventsIDs(); len(nodes) > 0 && !stu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   schetask.EventsTable,
			Columns: []string{schetask.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schetaskevent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   schetask.EventsTable,
			Columns: []string{schetask.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schetaskevent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, stu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{schetask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	stu.mutation.done = true
	return n, nil
}

// ScheTaskUpdateOne is the builder for updating a single ScheTask entity.
type ScheTaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ScheTaskMutation
}

// SetUserType sets the "user_type" field.
func (stuo *ScheTaskUpdateOne) SetUserType(i int) *ScheTaskUpdateOne {
	stuo.mutation.ResetUserType()
	stuo.mutation.SetUserType(i)
	return stuo
}

// SetNillableUserType sets the "user_type" field if the given value is not nil.
func (stuo *ScheTaskUpdateOne) SetNillableUserType(i *int) *ScheTaskUpdateOne {
	if i != nil {
		stuo.SetUserType(*i)
	}
	return stuo
}

// AddUserType adds i to the "user_type" field.
func (stuo *ScheTaskUpdateOne) AddUserType(i int) *ScheTaskUpdateOne {
	stuo.mutation.AddUserType(i)
	return stuo
}

// SetUserID sets the "user_id" field.
func (stuo *ScheTaskUpdateOne) SetUserID(i int) *ScheTaskUpdateOne {
	stuo.mutation.ResetUserID()
	stuo.mutation.SetUserID(i)
	return stuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (stuo *ScheTaskUpdateOne) SetNillableUserID(i *int) *ScheTaskUpdateOne {
	if i != nil {
		stuo.SetUserID(*i)
	}
	return stuo
}

// AddUserID adds i to the "user_id" field.
func (stuo *ScheTaskUpdateOne) AddUserID(i int) *ScheTaskUpdateOne {
	stuo.mutation.AddUserID(i)
	return stuo
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (stuo *ScheTaskUpdateOne) SetScenicAreaID(i int) *ScheTaskUpdateOne {
	stuo.mutation.ResetScenicAreaID()
	stuo.mutation.SetScenicAreaID(i)
	return stuo
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (stuo *ScheTaskUpdateOne) SetNillableScenicAreaID(i *int) *ScheTaskUpdateOne {
	if i != nil {
		stuo.SetScenicAreaID(*i)
	}
	return stuo
}

// AddScenicAreaID adds i to the "scenic_area_id" field.
func (stuo *ScheTaskUpdateOne) AddScenicAreaID(i int) *ScheTaskUpdateOne {
	stuo.mutation.AddScenicAreaID(i)
	return stuo
}

// SetCarID sets the "car_id" field.
func (stuo *ScheTaskUpdateOne) SetCarID(i int) *ScheTaskUpdateOne {
	stuo.mutation.SetCarID(i)
	return stuo
}

// SetNillableCarID sets the "car_id" field if the given value is not nil.
func (stuo *ScheTaskUpdateOne) SetNillableCarID(i *int) *ScheTaskUpdateOne {
	if i != nil {
		stuo.SetCarID(*i)
	}
	return stuo
}

// SetDeviceID sets the "device_id" field.
func (stuo *ScheTaskUpdateOne) SetDeviceID(s string) *ScheTaskUpdateOne {
	stuo.mutation.SetDeviceID(s)
	return stuo
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (stuo *ScheTaskUpdateOne) SetNillableDeviceID(s *string) *ScheTaskUpdateOne {
	if s != nil {
		stuo.SetDeviceID(*s)
	}
	return stuo
}

// SetDestID sets the "dest_id" field.
func (stuo *ScheTaskUpdateOne) SetDestID(i int) *ScheTaskUpdateOne {
	stuo.mutation.ResetDestID()
	stuo.mutation.SetDestID(i)
	return stuo
}

// SetNillableDestID sets the "dest_id" field if the given value is not nil.
func (stuo *ScheTaskUpdateOne) SetNillableDestID(i *int) *ScheTaskUpdateOne {
	if i != nil {
		stuo.SetDestID(*i)
	}
	return stuo
}

// AddDestID adds i to the "dest_id" field.
func (stuo *ScheTaskUpdateOne) AddDestID(i int) *ScheTaskUpdateOne {
	stuo.mutation.AddDestID(i)
	return stuo
}

// SetDestLon sets the "dest_lon" field.
func (stuo *ScheTaskUpdateOne) SetDestLon(f float64) *ScheTaskUpdateOne {
	stuo.mutation.ResetDestLon()
	stuo.mutation.SetDestLon(f)
	return stuo
}

// SetNillableDestLon sets the "dest_lon" field if the given value is not nil.
func (stuo *ScheTaskUpdateOne) SetNillableDestLon(f *float64) *ScheTaskUpdateOne {
	if f != nil {
		stuo.SetDestLon(*f)
	}
	return stuo
}

// AddDestLon adds f to the "dest_lon" field.
func (stuo *ScheTaskUpdateOne) AddDestLon(f float64) *ScheTaskUpdateOne {
	stuo.mutation.AddDestLon(f)
	return stuo
}

// SetDestLat sets the "dest_lat" field.
func (stuo *ScheTaskUpdateOne) SetDestLat(f float64) *ScheTaskUpdateOne {
	stuo.mutation.ResetDestLat()
	stuo.mutation.SetDestLat(f)
	return stuo
}

// SetNillableDestLat sets the "dest_lat" field if the given value is not nil.
func (stuo *ScheTaskUpdateOne) SetNillableDestLat(f *float64) *ScheTaskUpdateOne {
	if f != nil {
		stuo.SetDestLat(*f)
	}
	return stuo
}

// AddDestLat adds f to the "dest_lat" field.
func (stuo *ScheTaskUpdateOne) AddDestLat(f float64) *ScheTaskUpdateOne {
	stuo.mutation.AddDestLat(f)
	return stuo
}

// SetType sets the "type" field.
func (stuo *ScheTaskUpdateOne) SetType(i int) *ScheTaskUpdateOne {
	stuo.mutation.ResetType()
	stuo.mutation.SetType(i)
	return stuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (stuo *ScheTaskUpdateOne) SetNillableType(i *int) *ScheTaskUpdateOne {
	if i != nil {
		stuo.SetType(*i)
	}
	return stuo
}

// AddType adds i to the "type" field.
func (stuo *ScheTaskUpdateOne) AddType(i int) *ScheTaskUpdateOne {
	stuo.mutation.AddType(i)
	return stuo
}

// SetLoadLimit sets the "load_limit" field.
func (stuo *ScheTaskUpdateOne) SetLoadLimit(i int) *ScheTaskUpdateOne {
	stuo.mutation.ResetLoadLimit()
	stuo.mutation.SetLoadLimit(i)
	return stuo
}

// SetNillableLoadLimit sets the "load_limit" field if the given value is not nil.
func (stuo *ScheTaskUpdateOne) SetNillableLoadLimit(i *int) *ScheTaskUpdateOne {
	if i != nil {
		stuo.SetLoadLimit(*i)
	}
	return stuo
}

// AddLoadLimit adds i to the "load_limit" field.
func (stuo *ScheTaskUpdateOne) AddLoadLimit(i int) *ScheTaskUpdateOne {
	stuo.mutation.AddLoadLimit(i)
	return stuo
}

// SetState sets the "state" field.
func (stuo *ScheTaskUpdateOne) SetState(i int) *ScheTaskUpdateOne {
	stuo.mutation.ResetState()
	stuo.mutation.SetState(i)
	return stuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (stuo *ScheTaskUpdateOne) SetNillableState(i *int) *ScheTaskUpdateOne {
	if i != nil {
		stuo.SetState(*i)
	}
	return stuo
}

// AddState adds i to the "state" field.
func (stuo *ScheTaskUpdateOne) AddState(i int) *ScheTaskUpdateOne {
	stuo.mutation.AddState(i)
	return stuo
}

// SetAbnormalState sets the "abnormal_state" field.
func (stuo *ScheTaskUpdateOne) SetAbnormalState(i int) *ScheTaskUpdateOne {
	stuo.mutation.ResetAbnormalState()
	stuo.mutation.SetAbnormalState(i)
	return stuo
}

// SetNillableAbnormalState sets the "abnormal_state" field if the given value is not nil.
func (stuo *ScheTaskUpdateOne) SetNillableAbnormalState(i *int) *ScheTaskUpdateOne {
	if i != nil {
		stuo.SetAbnormalState(*i)
	}
	return stuo
}

// AddAbnormalState adds i to the "abnormal_state" field.
func (stuo *ScheTaskUpdateOne) AddAbnormalState(i int) *ScheTaskUpdateOne {
	stuo.mutation.AddAbnormalState(i)
	return stuo
}

// SetRemark sets the "remark" field.
func (stuo *ScheTaskUpdateOne) SetRemark(s string) *ScheTaskUpdateOne {
	stuo.mutation.SetRemark(s)
	return stuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (stuo *ScheTaskUpdateOne) SetNillableRemark(s *string) *ScheTaskUpdateOne {
	if s != nil {
		stuo.SetRemark(*s)
	}
	return stuo
}

// SetRoutingPath sets the "routing_path" field.
func (stuo *ScheTaskUpdateOne) SetRoutingPath(tp types.RoutingPath) *ScheTaskUpdateOne {
	stuo.mutation.SetRoutingPath(tp)
	return stuo
}

// SetNillableRoutingPath sets the "routing_path" field if the given value is not nil.
func (stuo *ScheTaskUpdateOne) SetNillableRoutingPath(tp *types.RoutingPath) *ScheTaskUpdateOne {
	if tp != nil {
		stuo.SetRoutingPath(*tp)
	}
	return stuo
}

// SetEndTime sets the "end_time" field.
func (stuo *ScheTaskUpdateOne) SetEndTime(t time.Time) *ScheTaskUpdateOne {
	stuo.mutation.SetEndTime(t)
	return stuo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (stuo *ScheTaskUpdateOne) SetNillableEndTime(t *time.Time) *ScheTaskUpdateOne {
	if t != nil {
		stuo.SetEndTime(*t)
	}
	return stuo
}

// ClearEndTime clears the value of the "end_time" field.
func (stuo *ScheTaskUpdateOne) ClearEndTime() *ScheTaskUpdateOne {
	stuo.mutation.ClearEndTime()
	return stuo
}

// SetUpdateTime sets the "update_time" field.
func (stuo *ScheTaskUpdateOne) SetUpdateTime(t time.Time) *ScheTaskUpdateOne {
	stuo.mutation.SetUpdateTime(t)
	return stuo
}

// SetCar sets the "car" edge to the Car entity.
func (stuo *ScheTaskUpdateOne) SetCar(c *Car) *ScheTaskUpdateOne {
	return stuo.SetCarID(c.ID)
}

// AddEventIDs adds the "events" edge to the ScheTaskEvent entity by IDs.
func (stuo *ScheTaskUpdateOne) AddEventIDs(ids ...int) *ScheTaskUpdateOne {
	stuo.mutation.AddEventIDs(ids...)
	return stuo
}

// AddEvents adds the "events" edges to the ScheTaskEvent entity.
func (stuo *ScheTaskUpdateOne) AddEvents(s ...*ScheTaskEvent) *ScheTaskUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stuo.AddEventIDs(ids...)
}

// Mutation returns the ScheTaskMutation object of the builder.
func (stuo *ScheTaskUpdateOne) Mutation() *ScheTaskMutation {
	return stuo.mutation
}

// ClearCar clears the "car" edge to the Car entity.
func (stuo *ScheTaskUpdateOne) ClearCar() *ScheTaskUpdateOne {
	stuo.mutation.ClearCar()
	return stuo
}

// ClearEvents clears all "events" edges to the ScheTaskEvent entity.
func (stuo *ScheTaskUpdateOne) ClearEvents() *ScheTaskUpdateOne {
	stuo.mutation.ClearEvents()
	return stuo
}

// RemoveEventIDs removes the "events" edge to ScheTaskEvent entities by IDs.
func (stuo *ScheTaskUpdateOne) RemoveEventIDs(ids ...int) *ScheTaskUpdateOne {
	stuo.mutation.RemoveEventIDs(ids...)
	return stuo
}

// RemoveEvents removes "events" edges to ScheTaskEvent entities.
func (stuo *ScheTaskUpdateOne) RemoveEvents(s ...*ScheTaskEvent) *ScheTaskUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stuo.RemoveEventIDs(ids...)
}

// Where appends a list predicates to the ScheTaskUpdate builder.
func (stuo *ScheTaskUpdateOne) Where(ps ...predicate.ScheTask) *ScheTaskUpdateOne {
	stuo.mutation.Where(ps...)
	return stuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (stuo *ScheTaskUpdateOne) Select(field string, fields ...string) *ScheTaskUpdateOne {
	stuo.fields = append([]string{field}, fields...)
	return stuo
}

// Save executes the query and returns the updated ScheTask entity.
func (stuo *ScheTaskUpdateOne) Save(ctx context.Context) (*ScheTask, error) {
	stuo.defaults()
	return withHooks(ctx, stuo.sqlSave, stuo.mutation, stuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (stuo *ScheTaskUpdateOne) SaveX(ctx context.Context) *ScheTask {
	node, err := stuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (stuo *ScheTaskUpdateOne) Exec(ctx context.Context) error {
	_, err := stuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stuo *ScheTaskUpdateOne) ExecX(ctx context.Context) {
	if err := stuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stuo *ScheTaskUpdateOne) defaults() {
	if _, ok := stuo.mutation.UpdateTime(); !ok {
		v := schetask.UpdateDefaultUpdateTime()
		stuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stuo *ScheTaskUpdateOne) check() error {
	if stuo.mutation.CarCleared() && len(stuo.mutation.CarIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ScheTask.car"`)
	}
	return nil
}

func (stuo *ScheTaskUpdateOne) sqlSave(ctx context.Context) (_node *ScheTask, err error) {
	if err := stuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(schetask.Table, schetask.Columns, sqlgraph.NewFieldSpec(schetask.FieldID, field.TypeInt))
	id, ok := stuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ScheTask.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := stuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, schetask.FieldID)
		for _, f := range fields {
			if !schetask.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != schetask.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := stuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stuo.mutation.UserType(); ok {
		_spec.SetField(schetask.FieldUserType, field.TypeInt, value)
	}
	if value, ok := stuo.mutation.AddedUserType(); ok {
		_spec.AddField(schetask.FieldUserType, field.TypeInt, value)
	}
	if value, ok := stuo.mutation.UserID(); ok {
		_spec.SetField(schetask.FieldUserID, field.TypeInt, value)
	}
	if value, ok := stuo.mutation.AddedUserID(); ok {
		_spec.AddField(schetask.FieldUserID, field.TypeInt, value)
	}
	if value, ok := stuo.mutation.ScenicAreaID(); ok {
		_spec.SetField(schetask.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := stuo.mutation.AddedScenicAreaID(); ok {
		_spec.AddField(schetask.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := stuo.mutation.DeviceID(); ok {
		_spec.SetField(schetask.FieldDeviceID, field.TypeString, value)
	}
	if value, ok := stuo.mutation.DestID(); ok {
		_spec.SetField(schetask.FieldDestID, field.TypeInt, value)
	}
	if value, ok := stuo.mutation.AddedDestID(); ok {
		_spec.AddField(schetask.FieldDestID, field.TypeInt, value)
	}
	if value, ok := stuo.mutation.DestLon(); ok {
		_spec.SetField(schetask.FieldDestLon, field.TypeFloat64, value)
	}
	if value, ok := stuo.mutation.AddedDestLon(); ok {
		_spec.AddField(schetask.FieldDestLon, field.TypeFloat64, value)
	}
	if value, ok := stuo.mutation.DestLat(); ok {
		_spec.SetField(schetask.FieldDestLat, field.TypeFloat64, value)
	}
	if value, ok := stuo.mutation.AddedDestLat(); ok {
		_spec.AddField(schetask.FieldDestLat, field.TypeFloat64, value)
	}
	if value, ok := stuo.mutation.GetType(); ok {
		_spec.SetField(schetask.FieldType, field.TypeInt, value)
	}
	if value, ok := stuo.mutation.AddedType(); ok {
		_spec.AddField(schetask.FieldType, field.TypeInt, value)
	}
	if value, ok := stuo.mutation.LoadLimit(); ok {
		_spec.SetField(schetask.FieldLoadLimit, field.TypeInt, value)
	}
	if value, ok := stuo.mutation.AddedLoadLimit(); ok {
		_spec.AddField(schetask.FieldLoadLimit, field.TypeInt, value)
	}
	if value, ok := stuo.mutation.State(); ok {
		_spec.SetField(schetask.FieldState, field.TypeInt, value)
	}
	if value, ok := stuo.mutation.AddedState(); ok {
		_spec.AddField(schetask.FieldState, field.TypeInt, value)
	}
	if value, ok := stuo.mutation.AbnormalState(); ok {
		_spec.SetField(schetask.FieldAbnormalState, field.TypeInt, value)
	}
	if value, ok := stuo.mutation.AddedAbnormalState(); ok {
		_spec.AddField(schetask.FieldAbnormalState, field.TypeInt, value)
	}
	if value, ok := stuo.mutation.Remark(); ok {
		_spec.SetField(schetask.FieldRemark, field.TypeString, value)
	}
	if value, ok := stuo.mutation.RoutingPath(); ok {
		_spec.SetField(schetask.FieldRoutingPath, field.TypeJSON, value)
	}
	if value, ok := stuo.mutation.EndTime(); ok {
		_spec.SetField(schetask.FieldEndTime, field.TypeTime, value)
	}
	if stuo.mutation.EndTimeCleared() {
		_spec.ClearField(schetask.FieldEndTime, field.TypeTime)
	}
	if value, ok := stuo.mutation.UpdateTime(); ok {
		_spec.SetField(schetask.FieldUpdateTime, field.TypeTime, value)
	}
	if stuo.mutation.CarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   schetask.CarTable,
			Columns: []string{schetask.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   schetask.CarTable,
			Columns: []string{schetask.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stuo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   schetask.EventsTable,
			Columns: []string{schetask.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schetaskevent.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.RemovedEventsIDs(); len(nodes) > 0 && !stuo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   schetask.EventsTable,
			Columns: []string{schetask.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schetaskevent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   schetask.EventsTable,
			Columns: []string{schetask.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schetaskevent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ScheTask{config: stuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, stuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{schetask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	stuo.mutation.done = true
	return _node, nil
}
