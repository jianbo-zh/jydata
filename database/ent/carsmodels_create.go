// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/car"
	"github.com/jianbo-zh/jydata/database/ent/carconfig"
	"github.com/jianbo-zh/jydata/database/ent/carsmodels"
	"github.com/jianbo-zh/jydata/database/ent/carsmodelsgroups"
	"github.com/jianbo-zh/jydata/database/ent/carsmodelsgroupsparams"
)

// CarsModelsCreate is the builder for creating a CarsModels entity.
type CarsModelsCreate struct {
	config
	mutation *CarsModelsMutation
	hooks    []Hook
}

// SetModelName sets the "model_name" field.
func (cmc *CarsModelsCreate) SetModelName(s string) *CarsModelsCreate {
	cmc.mutation.SetModelName(s)
	return cmc
}

// SetModelRemark sets the "model_remark" field.
func (cmc *CarsModelsCreate) SetModelRemark(s string) *CarsModelsCreate {
	cmc.mutation.SetModelRemark(s)
	return cmc
}

// SetNillableModelRemark sets the "model_remark" field if the given value is not nil.
func (cmc *CarsModelsCreate) SetNillableModelRemark(s *string) *CarsModelsCreate {
	if s != nil {
		cmc.SetModelRemark(*s)
	}
	return cmc
}

// SetGroupCount sets the "group_count" field.
func (cmc *CarsModelsCreate) SetGroupCount(i int) *CarsModelsCreate {
	cmc.mutation.SetGroupCount(i)
	return cmc
}

// SetNillableGroupCount sets the "group_count" field if the given value is not nil.
func (cmc *CarsModelsCreate) SetNillableGroupCount(i *int) *CarsModelsCreate {
	if i != nil {
		cmc.SetGroupCount(*i)
	}
	return cmc
}

// SetStatus sets the "status" field.
func (cmc *CarsModelsCreate) SetStatus(i int) *CarsModelsCreate {
	cmc.mutation.SetStatus(i)
	return cmc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cmc *CarsModelsCreate) SetNillableStatus(i *int) *CarsModelsCreate {
	if i != nil {
		cmc.SetStatus(*i)
	}
	return cmc
}

// SetCarIncr sets the "car_incr" field.
func (cmc *CarsModelsCreate) SetCarIncr(i int) *CarsModelsCreate {
	cmc.mutation.SetCarIncr(i)
	return cmc
}

// SetNillableCarIncr sets the "car_incr" field if the given value is not nil.
func (cmc *CarsModelsCreate) SetNillableCarIncr(i *int) *CarsModelsCreate {
	if i != nil {
		cmc.SetCarIncr(*i)
	}
	return cmc
}

// SetIsDeleted sets the "is_deleted" field.
func (cmc *CarsModelsCreate) SetIsDeleted(i int) *CarsModelsCreate {
	cmc.mutation.SetIsDeleted(i)
	return cmc
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (cmc *CarsModelsCreate) SetNillableIsDeleted(i *int) *CarsModelsCreate {
	if i != nil {
		cmc.SetIsDeleted(*i)
	}
	return cmc
}

// SetVehicleDescFileID sets the "vehicle_desc_file_id" field.
func (cmc *CarsModelsCreate) SetVehicleDescFileID(i int) *CarsModelsCreate {
	cmc.mutation.SetVehicleDescFileID(i)
	return cmc
}

// SetNillableVehicleDescFileID sets the "vehicle_desc_file_id" field if the given value is not nil.
func (cmc *CarsModelsCreate) SetNillableVehicleDescFileID(i *int) *CarsModelsCreate {
	if i != nil {
		cmc.SetVehicleDescFileID(*i)
	}
	return cmc
}

// SetCreateTime sets the "create_time" field.
func (cmc *CarsModelsCreate) SetCreateTime(t time.Time) *CarsModelsCreate {
	cmc.mutation.SetCreateTime(t)
	return cmc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (cmc *CarsModelsCreate) SetNillableCreateTime(t *time.Time) *CarsModelsCreate {
	if t != nil {
		cmc.SetCreateTime(*t)
	}
	return cmc
}

// SetUpdateTime sets the "update_time" field.
func (cmc *CarsModelsCreate) SetUpdateTime(t time.Time) *CarsModelsCreate {
	cmc.mutation.SetUpdateTime(t)
	return cmc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (cmc *CarsModelsCreate) SetNillableUpdateTime(t *time.Time) *CarsModelsCreate {
	if t != nil {
		cmc.SetUpdateTime(*t)
	}
	return cmc
}

// SetID sets the "id" field.
func (cmc *CarsModelsCreate) SetID(i int) *CarsModelsCreate {
	cmc.mutation.SetID(i)
	return cmc
}

// AddCarIDs adds the "cars" edge to the Car entity by IDs.
func (cmc *CarsModelsCreate) AddCarIDs(ids ...int) *CarsModelsCreate {
	cmc.mutation.AddCarIDs(ids...)
	return cmc
}

// AddCars adds the "cars" edges to the Car entity.
func (cmc *CarsModelsCreate) AddCars(c ...*Car) *CarsModelsCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cmc.AddCarIDs(ids...)
}

// AddGroupIDs adds the "groups" edge to the CarsModelsGroups entity by IDs.
func (cmc *CarsModelsCreate) AddGroupIDs(ids ...int) *CarsModelsCreate {
	cmc.mutation.AddGroupIDs(ids...)
	return cmc
}

// AddGroups adds the "groups" edges to the CarsModelsGroups entity.
func (cmc *CarsModelsCreate) AddGroups(c ...*CarsModelsGroups) *CarsModelsCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cmc.AddGroupIDs(ids...)
}

// AddParamIDs adds the "params" edge to the CarsModelsGroupsParams entity by IDs.
func (cmc *CarsModelsCreate) AddParamIDs(ids ...int) *CarsModelsCreate {
	cmc.mutation.AddParamIDs(ids...)
	return cmc
}

// AddParams adds the "params" edges to the CarsModelsGroupsParams entity.
func (cmc *CarsModelsCreate) AddParams(c ...*CarsModelsGroupsParams) *CarsModelsCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cmc.AddParamIDs(ids...)
}

// AddConfigFileIDs adds the "config_files" edge to the CarConfig entity by IDs.
func (cmc *CarsModelsCreate) AddConfigFileIDs(ids ...int) *CarsModelsCreate {
	cmc.mutation.AddConfigFileIDs(ids...)
	return cmc
}

// AddConfigFiles adds the "config_files" edges to the CarConfig entity.
func (cmc *CarsModelsCreate) AddConfigFiles(c ...*CarConfig) *CarsModelsCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cmc.AddConfigFileIDs(ids...)
}

// Mutation returns the CarsModelsMutation object of the builder.
func (cmc *CarsModelsCreate) Mutation() *CarsModelsMutation {
	return cmc.mutation
}

// Save creates the CarsModels in the database.
func (cmc *CarsModelsCreate) Save(ctx context.Context) (*CarsModels, error) {
	cmc.defaults()
	return withHooks(ctx, cmc.sqlSave, cmc.mutation, cmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cmc *CarsModelsCreate) SaveX(ctx context.Context) *CarsModels {
	v, err := cmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cmc *CarsModelsCreate) Exec(ctx context.Context) error {
	_, err := cmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmc *CarsModelsCreate) ExecX(ctx context.Context) {
	if err := cmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cmc *CarsModelsCreate) defaults() {
	if _, ok := cmc.mutation.ModelRemark(); !ok {
		v := carsmodels.DefaultModelRemark
		cmc.mutation.SetModelRemark(v)
	}
	if _, ok := cmc.mutation.GroupCount(); !ok {
		v := carsmodels.DefaultGroupCount
		cmc.mutation.SetGroupCount(v)
	}
	if _, ok := cmc.mutation.Status(); !ok {
		v := carsmodels.DefaultStatus
		cmc.mutation.SetStatus(v)
	}
	if _, ok := cmc.mutation.CarIncr(); !ok {
		v := carsmodels.DefaultCarIncr
		cmc.mutation.SetCarIncr(v)
	}
	if _, ok := cmc.mutation.IsDeleted(); !ok {
		v := carsmodels.DefaultIsDeleted
		cmc.mutation.SetIsDeleted(v)
	}
	if _, ok := cmc.mutation.VehicleDescFileID(); !ok {
		v := carsmodels.DefaultVehicleDescFileID
		cmc.mutation.SetVehicleDescFileID(v)
	}
	if _, ok := cmc.mutation.CreateTime(); !ok {
		v := carsmodels.DefaultCreateTime()
		cmc.mutation.SetCreateTime(v)
	}
	if _, ok := cmc.mutation.UpdateTime(); !ok {
		v := carsmodels.DefaultUpdateTime()
		cmc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmc *CarsModelsCreate) check() error {
	if _, ok := cmc.mutation.ModelName(); !ok {
		return &ValidationError{Name: "model_name", err: errors.New(`ent: missing required field "CarsModels.model_name"`)}
	}
	if _, ok := cmc.mutation.ModelRemark(); !ok {
		return &ValidationError{Name: "model_remark", err: errors.New(`ent: missing required field "CarsModels.model_remark"`)}
	}
	if _, ok := cmc.mutation.GroupCount(); !ok {
		return &ValidationError{Name: "group_count", err: errors.New(`ent: missing required field "CarsModels.group_count"`)}
	}
	if _, ok := cmc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "CarsModels.status"`)}
	}
	if _, ok := cmc.mutation.CarIncr(); !ok {
		return &ValidationError{Name: "car_incr", err: errors.New(`ent: missing required field "CarsModels.car_incr"`)}
	}
	if _, ok := cmc.mutation.IsDeleted(); !ok {
		return &ValidationError{Name: "is_deleted", err: errors.New(`ent: missing required field "CarsModels.is_deleted"`)}
	}
	if _, ok := cmc.mutation.VehicleDescFileID(); !ok {
		return &ValidationError{Name: "vehicle_desc_file_id", err: errors.New(`ent: missing required field "CarsModels.vehicle_desc_file_id"`)}
	}
	if _, ok := cmc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "CarsModels.create_time"`)}
	}
	if _, ok := cmc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "CarsModels.update_time"`)}
	}
	return nil
}

func (cmc *CarsModelsCreate) sqlSave(ctx context.Context) (*CarsModels, error) {
	if err := cmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	cmc.mutation.id = &_node.ID
	cmc.mutation.done = true
	return _node, nil
}

func (cmc *CarsModelsCreate) createSpec() (*CarsModels, *sqlgraph.CreateSpec) {
	var (
		_node = &CarsModels{config: cmc.config}
		_spec = sqlgraph.NewCreateSpec(carsmodels.Table, sqlgraph.NewFieldSpec(carsmodels.FieldID, field.TypeInt))
	)
	if id, ok := cmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cmc.mutation.ModelName(); ok {
		_spec.SetField(carsmodels.FieldModelName, field.TypeString, value)
		_node.ModelName = value
	}
	if value, ok := cmc.mutation.ModelRemark(); ok {
		_spec.SetField(carsmodels.FieldModelRemark, field.TypeString, value)
		_node.ModelRemark = value
	}
	if value, ok := cmc.mutation.GroupCount(); ok {
		_spec.SetField(carsmodels.FieldGroupCount, field.TypeInt, value)
		_node.GroupCount = value
	}
	if value, ok := cmc.mutation.Status(); ok {
		_spec.SetField(carsmodels.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	if value, ok := cmc.mutation.CarIncr(); ok {
		_spec.SetField(carsmodels.FieldCarIncr, field.TypeInt, value)
		_node.CarIncr = value
	}
	if value, ok := cmc.mutation.IsDeleted(); ok {
		_spec.SetField(carsmodels.FieldIsDeleted, field.TypeInt, value)
		_node.IsDeleted = value
	}
	if value, ok := cmc.mutation.VehicleDescFileID(); ok {
		_spec.SetField(carsmodels.FieldVehicleDescFileID, field.TypeInt, value)
		_node.VehicleDescFileID = value
	}
	if value, ok := cmc.mutation.CreateTime(); ok {
		_spec.SetField(carsmodels.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := cmc.mutation.UpdateTime(); ok {
		_spec.SetField(carsmodels.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if nodes := cmc.mutation.CarsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carsmodels.CarsTable,
			Columns: []string{carsmodels.CarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cmc.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carsmodels.GroupsTable,
			Columns: []string{carsmodels.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsmodelsgroups.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cmc.mutation.ParamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carsmodels.ParamsTable,
			Columns: []string{carsmodels.ParamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsmodelsgroupsparams.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cmc.mutation.ConfigFilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carsmodels.ConfigFilesTable,
			Columns: []string{carsmodels.ConfigFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carconfig.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CarsModelsCreateBulk is the builder for creating many CarsModels entities in bulk.
type CarsModelsCreateBulk struct {
	config
	err      error
	builders []*CarsModelsCreate
}

// Save creates the CarsModels entities in the database.
func (cmcb *CarsModelsCreateBulk) Save(ctx context.Context) ([]*CarsModels, error) {
	if cmcb.err != nil {
		return nil, cmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cmcb.builders))
	nodes := make([]*CarsModels, len(cmcb.builders))
	mutators := make([]Mutator, len(cmcb.builders))
	for i := range cmcb.builders {
		func(i int, root context.Context) {
			builder := cmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CarsModelsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cmcb *CarsModelsCreateBulk) SaveX(ctx context.Context) []*CarsModels {
	v, err := cmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cmcb *CarsModelsCreateBulk) Exec(ctx context.Context) error {
	_, err := cmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmcb *CarsModelsCreateBulk) ExecX(ctx context.Context) {
	if err := cmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
