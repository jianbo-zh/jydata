// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/carconfigstatus"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CarConfigStatus is the model entity for the CarConfigStatus schema.
type CarConfigStatus struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 车辆ID
	CarID int `json:"car_id,omitempty"`
	// 车辆设备ID
	DeviceID string `json:"device_id,omitempty"`
	// 配置路径
	ConfigPath string `json:"config_path,omitempty"`
	// 配置版本号
	Version string `json:"version,omitempty"`
	// 备注说明
	Remark string `json:"remark,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime   time.Time `json:"update_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CarConfigStatus) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case carconfigstatus.FieldID, carconfigstatus.FieldCarID:
			values[i] = new(sql.NullInt64)
		case carconfigstatus.FieldDeviceID, carconfigstatus.FieldConfigPath, carconfigstatus.FieldVersion, carconfigstatus.FieldRemark:
			values[i] = new(sql.NullString)
		case carconfigstatus.FieldCreateTime, carconfigstatus.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CarConfigStatus fields.
func (ccs *CarConfigStatus) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case carconfigstatus.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ccs.ID = int(value.Int64)
		case carconfigstatus.FieldCarID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field car_id", values[i])
			} else if value.Valid {
				ccs.CarID = int(value.Int64)
			}
		case carconfigstatus.FieldDeviceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device_id", values[i])
			} else if value.Valid {
				ccs.DeviceID = value.String
			}
		case carconfigstatus.FieldConfigPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field config_path", values[i])
			} else if value.Valid {
				ccs.ConfigPath = value.String
			}
		case carconfigstatus.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				ccs.Version = value.String
			}
		case carconfigstatus.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				ccs.Remark = value.String
			}
		case carconfigstatus.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ccs.CreateTime = value.Time
			}
		case carconfigstatus.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ccs.UpdateTime = value.Time
			}
		default:
			ccs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CarConfigStatus.
// This includes values selected through modifiers, order, etc.
func (ccs *CarConfigStatus) Value(name string) (ent.Value, error) {
	return ccs.selectValues.Get(name)
}

// Update returns a builder for updating this CarConfigStatus.
// Note that you need to call CarConfigStatus.Unwrap() before calling this method if this CarConfigStatus
// was returned from a transaction, and the transaction was committed or rolled back.
func (ccs *CarConfigStatus) Update() *CarConfigStatusUpdateOne {
	return NewCarConfigStatusClient(ccs.config).UpdateOne(ccs)
}

// Unwrap unwraps the CarConfigStatus entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ccs *CarConfigStatus) Unwrap() *CarConfigStatus {
	_tx, ok := ccs.config.driver.(*txDriver)
	if !ok {
		panic("ent: CarConfigStatus is not a transactional entity")
	}
	ccs.config.driver = _tx.drv
	return ccs
}

// String implements the fmt.Stringer.
func (ccs *CarConfigStatus) String() string {
	var builder strings.Builder
	builder.WriteString("CarConfigStatus(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ccs.ID))
	builder.WriteString("car_id=")
	builder.WriteString(fmt.Sprintf("%v", ccs.CarID))
	builder.WriteString(", ")
	builder.WriteString("device_id=")
	builder.WriteString(ccs.DeviceID)
	builder.WriteString(", ")
	builder.WriteString("config_path=")
	builder.WriteString(ccs.ConfigPath)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(ccs.Version)
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(ccs.Remark)
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(ccs.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(ccs.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CarConfigStatusSlice is a parsable slice of CarConfigStatus.
type CarConfigStatusSlice []*CarConfigStatus
