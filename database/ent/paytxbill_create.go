// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/paytxbill"
	"github.com/jianbo-zh/jydata/database/ent/scenicarea"
)

// PayTxBillCreate is the builder for creating a PayTxBill entity.
type PayTxBillCreate struct {
	config
	mutation *PayTxBillMutation
	hooks    []Hook
}

// SetTxID sets the "tx_id" field.
func (ptbc *PayTxBillCreate) SetTxID(s string) *PayTxBillCreate {
	ptbc.mutation.SetTxID(s)
	return ptbc
}

// SetOrderID sets the "order_id" field.
func (ptbc *PayTxBillCreate) SetOrderID(i int) *PayTxBillCreate {
	ptbc.mutation.SetOrderID(i)
	return ptbc
}

// SetOrderNo sets the "order_no" field.
func (ptbc *PayTxBillCreate) SetOrderNo(s string) *PayTxBillCreate {
	ptbc.mutation.SetOrderNo(s)
	return ptbc
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (ptbc *PayTxBillCreate) SetScenicAreaID(i int) *PayTxBillCreate {
	ptbc.mutation.SetScenicAreaID(i)
	return ptbc
}

// SetScenicAreaName sets the "scenic_area_name" field.
func (ptbc *PayTxBillCreate) SetScenicAreaName(s string) *PayTxBillCreate {
	ptbc.mutation.SetScenicAreaName(s)
	return ptbc
}

// SetTxType sets the "tx_type" field.
func (ptbc *PayTxBillCreate) SetTxType(i int) *PayTxBillCreate {
	ptbc.mutation.SetTxType(i)
	return ptbc
}

// SetTxChannel sets the "tx_channel" field.
func (ptbc *PayTxBillCreate) SetTxChannel(i int) *PayTxBillCreate {
	ptbc.mutation.SetTxChannel(i)
	return ptbc
}

// SetTxAccount sets the "tx_account" field.
func (ptbc *PayTxBillCreate) SetTxAccount(s string) *PayTxBillCreate {
	ptbc.mutation.SetTxAccount(s)
	return ptbc
}

// SetTxAccountName sets the "tx_account_name" field.
func (ptbc *PayTxBillCreate) SetTxAccountName(s string) *PayTxBillCreate {
	ptbc.mutation.SetTxAccountName(s)
	return ptbc
}

// SetTxAmount sets the "tx_amount" field.
func (ptbc *PayTxBillCreate) SetTxAmount(i int) *PayTxBillCreate {
	ptbc.mutation.SetTxAmount(i)
	return ptbc
}

// SetTxTime sets the "tx_time" field.
func (ptbc *PayTxBillCreate) SetTxTime(t time.Time) *PayTxBillCreate {
	ptbc.mutation.SetTxTime(t)
	return ptbc
}

// SetRemark sets the "remark" field.
func (ptbc *PayTxBillCreate) SetRemark(s string) *PayTxBillCreate {
	ptbc.mutation.SetRemark(s)
	return ptbc
}

// SetCreateTime sets the "create_time" field.
func (ptbc *PayTxBillCreate) SetCreateTime(t time.Time) *PayTxBillCreate {
	ptbc.mutation.SetCreateTime(t)
	return ptbc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ptbc *PayTxBillCreate) SetNillableCreateTime(t *time.Time) *PayTxBillCreate {
	if t != nil {
		ptbc.SetCreateTime(*t)
	}
	return ptbc
}

// SetUpdateTime sets the "update_time" field.
func (ptbc *PayTxBillCreate) SetUpdateTime(t time.Time) *PayTxBillCreate {
	ptbc.mutation.SetUpdateTime(t)
	return ptbc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ptbc *PayTxBillCreate) SetNillableUpdateTime(t *time.Time) *PayTxBillCreate {
	if t != nil {
		ptbc.SetUpdateTime(*t)
	}
	return ptbc
}

// SetID sets the "id" field.
func (ptbc *PayTxBillCreate) SetID(i int) *PayTxBillCreate {
	ptbc.mutation.SetID(i)
	return ptbc
}

// SetBackgroundScenicAreaID sets the "background_scenic_area" edge to the ScenicArea entity by ID.
func (ptbc *PayTxBillCreate) SetBackgroundScenicAreaID(id int) *PayTxBillCreate {
	ptbc.mutation.SetBackgroundScenicAreaID(id)
	return ptbc
}

// SetBackgroundScenicArea sets the "background_scenic_area" edge to the ScenicArea entity.
func (ptbc *PayTxBillCreate) SetBackgroundScenicArea(s *ScenicArea) *PayTxBillCreate {
	return ptbc.SetBackgroundScenicAreaID(s.ID)
}

// Mutation returns the PayTxBillMutation object of the builder.
func (ptbc *PayTxBillCreate) Mutation() *PayTxBillMutation {
	return ptbc.mutation
}

// Save creates the PayTxBill in the database.
func (ptbc *PayTxBillCreate) Save(ctx context.Context) (*PayTxBill, error) {
	ptbc.defaults()
	return withHooks(ctx, ptbc.sqlSave, ptbc.mutation, ptbc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ptbc *PayTxBillCreate) SaveX(ctx context.Context) *PayTxBill {
	v, err := ptbc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptbc *PayTxBillCreate) Exec(ctx context.Context) error {
	_, err := ptbc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptbc *PayTxBillCreate) ExecX(ctx context.Context) {
	if err := ptbc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptbc *PayTxBillCreate) defaults() {
	if _, ok := ptbc.mutation.CreateTime(); !ok {
		v := paytxbill.DefaultCreateTime()
		ptbc.mutation.SetCreateTime(v)
	}
	if _, ok := ptbc.mutation.UpdateTime(); !ok {
		v := paytxbill.DefaultUpdateTime()
		ptbc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptbc *PayTxBillCreate) check() error {
	if _, ok := ptbc.mutation.TxID(); !ok {
		return &ValidationError{Name: "tx_id", err: errors.New(`ent: missing required field "PayTxBill.tx_id"`)}
	}
	if _, ok := ptbc.mutation.OrderID(); !ok {
		return &ValidationError{Name: "order_id", err: errors.New(`ent: missing required field "PayTxBill.order_id"`)}
	}
	if _, ok := ptbc.mutation.OrderNo(); !ok {
		return &ValidationError{Name: "order_no", err: errors.New(`ent: missing required field "PayTxBill.order_no"`)}
	}
	if _, ok := ptbc.mutation.ScenicAreaID(); !ok {
		return &ValidationError{Name: "scenic_area_id", err: errors.New(`ent: missing required field "PayTxBill.scenic_area_id"`)}
	}
	if _, ok := ptbc.mutation.ScenicAreaName(); !ok {
		return &ValidationError{Name: "scenic_area_name", err: errors.New(`ent: missing required field "PayTxBill.scenic_area_name"`)}
	}
	if _, ok := ptbc.mutation.TxType(); !ok {
		return &ValidationError{Name: "tx_type", err: errors.New(`ent: missing required field "PayTxBill.tx_type"`)}
	}
	if _, ok := ptbc.mutation.TxChannel(); !ok {
		return &ValidationError{Name: "tx_channel", err: errors.New(`ent: missing required field "PayTxBill.tx_channel"`)}
	}
	if _, ok := ptbc.mutation.TxAccount(); !ok {
		return &ValidationError{Name: "tx_account", err: errors.New(`ent: missing required field "PayTxBill.tx_account"`)}
	}
	if _, ok := ptbc.mutation.TxAccountName(); !ok {
		return &ValidationError{Name: "tx_account_name", err: errors.New(`ent: missing required field "PayTxBill.tx_account_name"`)}
	}
	if _, ok := ptbc.mutation.TxAmount(); !ok {
		return &ValidationError{Name: "tx_amount", err: errors.New(`ent: missing required field "PayTxBill.tx_amount"`)}
	}
	if _, ok := ptbc.mutation.TxTime(); !ok {
		return &ValidationError{Name: "tx_time", err: errors.New(`ent: missing required field "PayTxBill.tx_time"`)}
	}
	if _, ok := ptbc.mutation.Remark(); !ok {
		return &ValidationError{Name: "remark", err: errors.New(`ent: missing required field "PayTxBill.remark"`)}
	}
	if _, ok := ptbc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "PayTxBill.create_time"`)}
	}
	if _, ok := ptbc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "PayTxBill.update_time"`)}
	}
	if len(ptbc.mutation.BackgroundScenicAreaIDs()) == 0 {
		return &ValidationError{Name: "background_scenic_area", err: errors.New(`ent: missing required edge "PayTxBill.background_scenic_area"`)}
	}
	return nil
}

func (ptbc *PayTxBillCreate) sqlSave(ctx context.Context) (*PayTxBill, error) {
	if err := ptbc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ptbc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ptbc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	ptbc.mutation.id = &_node.ID
	ptbc.mutation.done = true
	return _node, nil
}

func (ptbc *PayTxBillCreate) createSpec() (*PayTxBill, *sqlgraph.CreateSpec) {
	var (
		_node = &PayTxBill{config: ptbc.config}
		_spec = sqlgraph.NewCreateSpec(paytxbill.Table, sqlgraph.NewFieldSpec(paytxbill.FieldID, field.TypeInt))
	)
	if id, ok := ptbc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ptbc.mutation.TxID(); ok {
		_spec.SetField(paytxbill.FieldTxID, field.TypeString, value)
		_node.TxID = value
	}
	if value, ok := ptbc.mutation.OrderID(); ok {
		_spec.SetField(paytxbill.FieldOrderID, field.TypeInt, value)
		_node.OrderID = value
	}
	if value, ok := ptbc.mutation.OrderNo(); ok {
		_spec.SetField(paytxbill.FieldOrderNo, field.TypeString, value)
		_node.OrderNo = value
	}
	if value, ok := ptbc.mutation.ScenicAreaName(); ok {
		_spec.SetField(paytxbill.FieldScenicAreaName, field.TypeString, value)
		_node.ScenicAreaName = value
	}
	if value, ok := ptbc.mutation.TxType(); ok {
		_spec.SetField(paytxbill.FieldTxType, field.TypeInt, value)
		_node.TxType = value
	}
	if value, ok := ptbc.mutation.TxChannel(); ok {
		_spec.SetField(paytxbill.FieldTxChannel, field.TypeInt, value)
		_node.TxChannel = value
	}
	if value, ok := ptbc.mutation.TxAccount(); ok {
		_spec.SetField(paytxbill.FieldTxAccount, field.TypeString, value)
		_node.TxAccount = value
	}
	if value, ok := ptbc.mutation.TxAccountName(); ok {
		_spec.SetField(paytxbill.FieldTxAccountName, field.TypeString, value)
		_node.TxAccountName = value
	}
	if value, ok := ptbc.mutation.TxAmount(); ok {
		_spec.SetField(paytxbill.FieldTxAmount, field.TypeInt, value)
		_node.TxAmount = value
	}
	if value, ok := ptbc.mutation.TxTime(); ok {
		_spec.SetField(paytxbill.FieldTxTime, field.TypeTime, value)
		_node.TxTime = value
	}
	if value, ok := ptbc.mutation.Remark(); ok {
		_spec.SetField(paytxbill.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := ptbc.mutation.CreateTime(); ok {
		_spec.SetField(paytxbill.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := ptbc.mutation.UpdateTime(); ok {
		_spec.SetField(paytxbill.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if nodes := ptbc.mutation.BackgroundScenicAreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paytxbill.BackgroundScenicAreaTable,
			Columns: []string{paytxbill.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ScenicAreaID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PayTxBillCreateBulk is the builder for creating many PayTxBill entities in bulk.
type PayTxBillCreateBulk struct {
	config
	err      error
	builders []*PayTxBillCreate
}

// Save creates the PayTxBill entities in the database.
func (ptbcb *PayTxBillCreateBulk) Save(ctx context.Context) ([]*PayTxBill, error) {
	if ptbcb.err != nil {
		return nil, ptbcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ptbcb.builders))
	nodes := make([]*PayTxBill, len(ptbcb.builders))
	mutators := make([]Mutator, len(ptbcb.builders))
	for i := range ptbcb.builders {
		func(i int, root context.Context) {
			builder := ptbcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PayTxBillMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ptbcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ptbcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ptbcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ptbcb *PayTxBillCreateBulk) SaveX(ctx context.Context) []*PayTxBill {
	v, err := ptbcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptbcb *PayTxBillCreateBulk) Exec(ctx context.Context) error {
	_, err := ptbcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptbcb *PayTxBillCreateBulk) ExecX(ctx context.Context) {
	if err := ptbcb.Exec(ctx); err != nil {
		panic(err)
	}
}
