// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jianbo-zh/jydata/database/ent/car"
	"github.com/jianbo-zh/jydata/database/ent/carsoperatelog"
	"github.com/jianbo-zh/jydata/database/ent/scenicarea"
)

// CarsOperateLog is the model entity for the CarsOperateLog schema.
type CarsOperateLog struct {
	config `json:"-"`
	// ID of the ent.
	// ID
	ID int `json:"id,omitempty"`
	// 景区ID
	ScenicAreaID int `json:"scenic_area_id,omitempty"`
	// 操作端(用户、运维、后台)
	Origin string `json:"origin,omitempty"`
	// 用户id
	OriginUID int `json:"origin_uid,omitempty"`
	// 用户ip
	OriginIP string `json:"origin_ip,omitempty"`
	// 操作动作
	OperateAction string `json:"operate_action,omitempty"`
	// 车辆id
	CarID int `json:"car_id,omitempty"`
	// 设备id
	DeviceID string `json:"device_id,omitempty"`
	// 经度
	CarLongitude *float64 `json:"car_longitude,omitempty"`
	// 纬度
	CarLatitude *float64 `json:"car_latitude,omitempty"`
	// 当前里程
	CarMileage *float64 `json:"car_mileage,omitempty"`
	// 当前速度
	CarSpeed *float64 `json:"car_speed,omitempty"`
	// 当前电量
	CarPower *float64 `json:"car_power,omitempty"`
	// 车辆状态
	CarStatus *string `json:"car_status,omitempty"`
	// 操作结果
	OperateResult string `json:"operate_result,omitempty"`
	// 操作状态(1-失败、2-成功)
	OperateState int `json:"operate_state,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CarsOperateLogQuery when eager-loading is set.
	Edges        CarsOperateLogEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CarsOperateLogEdges holds the relations/edges for other nodes in the graph.
type CarsOperateLogEdges struct {
	// BackgroundScenicArea holds the value of the background_scenic_area edge.
	BackgroundScenicArea *ScenicArea `json:"background_scenic_area,omitempty"`
	// Car holds the value of the car edge.
	Car *Car `json:"car,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// BackgroundScenicAreaOrErr returns the BackgroundScenicArea value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CarsOperateLogEdges) BackgroundScenicAreaOrErr() (*ScenicArea, error) {
	if e.BackgroundScenicArea != nil {
		return e.BackgroundScenicArea, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: scenicarea.Label}
	}
	return nil, &NotLoadedError{edge: "background_scenic_area"}
}

// CarOrErr returns the Car value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CarsOperateLogEdges) CarOrErr() (*Car, error) {
	if e.Car != nil {
		return e.Car, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: car.Label}
	}
	return nil, &NotLoadedError{edge: "car"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CarsOperateLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case carsoperatelog.FieldCarLongitude, carsoperatelog.FieldCarLatitude, carsoperatelog.FieldCarMileage, carsoperatelog.FieldCarSpeed, carsoperatelog.FieldCarPower:
			values[i] = new(sql.NullFloat64)
		case carsoperatelog.FieldID, carsoperatelog.FieldScenicAreaID, carsoperatelog.FieldOriginUID, carsoperatelog.FieldCarID, carsoperatelog.FieldOperateState:
			values[i] = new(sql.NullInt64)
		case carsoperatelog.FieldOrigin, carsoperatelog.FieldOriginIP, carsoperatelog.FieldOperateAction, carsoperatelog.FieldDeviceID, carsoperatelog.FieldCarStatus, carsoperatelog.FieldOperateResult:
			values[i] = new(sql.NullString)
		case carsoperatelog.FieldCreateTime, carsoperatelog.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CarsOperateLog fields.
func (col *CarsOperateLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case carsoperatelog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			col.ID = int(value.Int64)
		case carsoperatelog.FieldScenicAreaID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field scenic_area_id", values[i])
			} else if value.Valid {
				col.ScenicAreaID = int(value.Int64)
			}
		case carsoperatelog.FieldOrigin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field origin", values[i])
			} else if value.Valid {
				col.Origin = value.String
			}
		case carsoperatelog.FieldOriginUID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field origin_uid", values[i])
			} else if value.Valid {
				col.OriginUID = int(value.Int64)
			}
		case carsoperatelog.FieldOriginIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field origin_ip", values[i])
			} else if value.Valid {
				col.OriginIP = value.String
			}
		case carsoperatelog.FieldOperateAction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operate_action", values[i])
			} else if value.Valid {
				col.OperateAction = value.String
			}
		case carsoperatelog.FieldCarID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field car_id", values[i])
			} else if value.Valid {
				col.CarID = int(value.Int64)
			}
		case carsoperatelog.FieldDeviceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device_id", values[i])
			} else if value.Valid {
				col.DeviceID = value.String
			}
		case carsoperatelog.FieldCarLongitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field car_longitude", values[i])
			} else if value.Valid {
				col.CarLongitude = new(float64)
				*col.CarLongitude = value.Float64
			}
		case carsoperatelog.FieldCarLatitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field car_latitude", values[i])
			} else if value.Valid {
				col.CarLatitude = new(float64)
				*col.CarLatitude = value.Float64
			}
		case carsoperatelog.FieldCarMileage:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field car_mileage", values[i])
			} else if value.Valid {
				col.CarMileage = new(float64)
				*col.CarMileage = value.Float64
			}
		case carsoperatelog.FieldCarSpeed:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field car_speed", values[i])
			} else if value.Valid {
				col.CarSpeed = new(float64)
				*col.CarSpeed = value.Float64
			}
		case carsoperatelog.FieldCarPower:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field car_power", values[i])
			} else if value.Valid {
				col.CarPower = new(float64)
				*col.CarPower = value.Float64
			}
		case carsoperatelog.FieldCarStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field car_status", values[i])
			} else if value.Valid {
				col.CarStatus = new(string)
				*col.CarStatus = value.String
			}
		case carsoperatelog.FieldOperateResult:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operate_result", values[i])
			} else if value.Valid {
				col.OperateResult = value.String
			}
		case carsoperatelog.FieldOperateState:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field operate_state", values[i])
			} else if value.Valid {
				col.OperateState = int(value.Int64)
			}
		case carsoperatelog.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				col.CreateTime = value.Time
			}
		case carsoperatelog.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				col.UpdateTime = value.Time
			}
		default:
			col.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CarsOperateLog.
// This includes values selected through modifiers, order, etc.
func (col *CarsOperateLog) Value(name string) (ent.Value, error) {
	return col.selectValues.Get(name)
}

// QueryBackgroundScenicArea queries the "background_scenic_area" edge of the CarsOperateLog entity.
func (col *CarsOperateLog) QueryBackgroundScenicArea() *ScenicAreaQuery {
	return NewCarsOperateLogClient(col.config).QueryBackgroundScenicArea(col)
}

// QueryCar queries the "car" edge of the CarsOperateLog entity.
func (col *CarsOperateLog) QueryCar() *CarQuery {
	return NewCarsOperateLogClient(col.config).QueryCar(col)
}

// Update returns a builder for updating this CarsOperateLog.
// Note that you need to call CarsOperateLog.Unwrap() before calling this method if this CarsOperateLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (col *CarsOperateLog) Update() *CarsOperateLogUpdateOne {
	return NewCarsOperateLogClient(col.config).UpdateOne(col)
}

// Unwrap unwraps the CarsOperateLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (col *CarsOperateLog) Unwrap() *CarsOperateLog {
	_tx, ok := col.config.driver.(*txDriver)
	if !ok {
		panic("ent: CarsOperateLog is not a transactional entity")
	}
	col.config.driver = _tx.drv
	return col
}

// String implements the fmt.Stringer.
func (col *CarsOperateLog) String() string {
	var builder strings.Builder
	builder.WriteString("CarsOperateLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", col.ID))
	builder.WriteString("scenic_area_id=")
	builder.WriteString(fmt.Sprintf("%v", col.ScenicAreaID))
	builder.WriteString(", ")
	builder.WriteString("origin=")
	builder.WriteString(col.Origin)
	builder.WriteString(", ")
	builder.WriteString("origin_uid=")
	builder.WriteString(fmt.Sprintf("%v", col.OriginUID))
	builder.WriteString(", ")
	builder.WriteString("origin_ip=")
	builder.WriteString(col.OriginIP)
	builder.WriteString(", ")
	builder.WriteString("operate_action=")
	builder.WriteString(col.OperateAction)
	builder.WriteString(", ")
	builder.WriteString("car_id=")
	builder.WriteString(fmt.Sprintf("%v", col.CarID))
	builder.WriteString(", ")
	builder.WriteString("device_id=")
	builder.WriteString(col.DeviceID)
	builder.WriteString(", ")
	if v := col.CarLongitude; v != nil {
		builder.WriteString("car_longitude=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := col.CarLatitude; v != nil {
		builder.WriteString("car_latitude=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := col.CarMileage; v != nil {
		builder.WriteString("car_mileage=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := col.CarSpeed; v != nil {
		builder.WriteString("car_speed=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := col.CarPower; v != nil {
		builder.WriteString("car_power=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := col.CarStatus; v != nil {
		builder.WriteString("car_status=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("operate_result=")
	builder.WriteString(col.OperateResult)
	builder.WriteString(", ")
	builder.WriteString("operate_state=")
	builder.WriteString(fmt.Sprintf("%v", col.OperateState))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(col.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(col.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CarsOperateLogs is a parsable slice of CarsOperateLog.
type CarsOperateLogs []*CarsOperateLog
