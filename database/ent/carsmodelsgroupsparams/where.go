// Code generated by ent, DO NOT EDIT.

package carsmodelsgroupsparams

import (
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldLTE(FieldID, id))
}

// ModelID applies equality check predicate on the "model_id" field. It's identical to ModelIDEQ.
func ModelID(v int) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldEQ(FieldModelID, v))
}

// GroupID applies equality check predicate on the "group_id" field. It's identical to GroupIDEQ.
func GroupID(v int) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldEQ(FieldGroupID, v))
}

// ParamRemark applies equality check predicate on the "param_remark" field. It's identical to ParamRemarkEQ.
func ParamRemark(v string) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldEQ(FieldParamRemark, v))
}

// ParamName applies equality check predicate on the "param_name" field. It's identical to ParamNameEQ.
func ParamName(v string) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldEQ(FieldParamName, v))
}

// ValueRange applies equality check predicate on the "value_range" field. It's identical to ValueRangeEQ.
func ValueRange(v string) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldEQ(FieldValueRange, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldEQ(FieldStatus, v))
}

// IsDeleted applies equality check predicate on the "is_deleted" field. It's identical to IsDeletedEQ.
func IsDeleted(v int) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldEQ(FieldIsDeleted, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldEQ(FieldUpdateTime, v))
}

// ModelIDEQ applies the EQ predicate on the "model_id" field.
func ModelIDEQ(v int) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldEQ(FieldModelID, v))
}

// ModelIDNEQ applies the NEQ predicate on the "model_id" field.
func ModelIDNEQ(v int) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldNEQ(FieldModelID, v))
}

// ModelIDIn applies the In predicate on the "model_id" field.
func ModelIDIn(vs ...int) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldIn(FieldModelID, vs...))
}

// ModelIDNotIn applies the NotIn predicate on the "model_id" field.
func ModelIDNotIn(vs ...int) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldNotIn(FieldModelID, vs...))
}

// GroupIDEQ applies the EQ predicate on the "group_id" field.
func GroupIDEQ(v int) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldEQ(FieldGroupID, v))
}

// GroupIDNEQ applies the NEQ predicate on the "group_id" field.
func GroupIDNEQ(v int) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldNEQ(FieldGroupID, v))
}

// GroupIDIn applies the In predicate on the "group_id" field.
func GroupIDIn(vs ...int) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldIn(FieldGroupID, vs...))
}

// GroupIDNotIn applies the NotIn predicate on the "group_id" field.
func GroupIDNotIn(vs ...int) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldNotIn(FieldGroupID, vs...))
}

// ParamRemarkEQ applies the EQ predicate on the "param_remark" field.
func ParamRemarkEQ(v string) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldEQ(FieldParamRemark, v))
}

// ParamRemarkNEQ applies the NEQ predicate on the "param_remark" field.
func ParamRemarkNEQ(v string) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldNEQ(FieldParamRemark, v))
}

// ParamRemarkIn applies the In predicate on the "param_remark" field.
func ParamRemarkIn(vs ...string) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldIn(FieldParamRemark, vs...))
}

// ParamRemarkNotIn applies the NotIn predicate on the "param_remark" field.
func ParamRemarkNotIn(vs ...string) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldNotIn(FieldParamRemark, vs...))
}

// ParamRemarkGT applies the GT predicate on the "param_remark" field.
func ParamRemarkGT(v string) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldGT(FieldParamRemark, v))
}

// ParamRemarkGTE applies the GTE predicate on the "param_remark" field.
func ParamRemarkGTE(v string) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldGTE(FieldParamRemark, v))
}

// ParamRemarkLT applies the LT predicate on the "param_remark" field.
func ParamRemarkLT(v string) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldLT(FieldParamRemark, v))
}

// ParamRemarkLTE applies the LTE predicate on the "param_remark" field.
func ParamRemarkLTE(v string) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldLTE(FieldParamRemark, v))
}

// ParamRemarkContains applies the Contains predicate on the "param_remark" field.
func ParamRemarkContains(v string) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldContains(FieldParamRemark, v))
}

// ParamRemarkHasPrefix applies the HasPrefix predicate on the "param_remark" field.
func ParamRemarkHasPrefix(v string) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldHasPrefix(FieldParamRemark, v))
}

// ParamRemarkHasSuffix applies the HasSuffix predicate on the "param_remark" field.
func ParamRemarkHasSuffix(v string) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldHasSuffix(FieldParamRemark, v))
}

// ParamRemarkEqualFold applies the EqualFold predicate on the "param_remark" field.
func ParamRemarkEqualFold(v string) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldEqualFold(FieldParamRemark, v))
}

// ParamRemarkContainsFold applies the ContainsFold predicate on the "param_remark" field.
func ParamRemarkContainsFold(v string) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldContainsFold(FieldParamRemark, v))
}

// ParamNameEQ applies the EQ predicate on the "param_name" field.
func ParamNameEQ(v string) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldEQ(FieldParamName, v))
}

// ParamNameNEQ applies the NEQ predicate on the "param_name" field.
func ParamNameNEQ(v string) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldNEQ(FieldParamName, v))
}

// ParamNameIn applies the In predicate on the "param_name" field.
func ParamNameIn(vs ...string) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldIn(FieldParamName, vs...))
}

// ParamNameNotIn applies the NotIn predicate on the "param_name" field.
func ParamNameNotIn(vs ...string) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldNotIn(FieldParamName, vs...))
}

// ParamNameGT applies the GT predicate on the "param_name" field.
func ParamNameGT(v string) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldGT(FieldParamName, v))
}

// ParamNameGTE applies the GTE predicate on the "param_name" field.
func ParamNameGTE(v string) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldGTE(FieldParamName, v))
}

// ParamNameLT applies the LT predicate on the "param_name" field.
func ParamNameLT(v string) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldLT(FieldParamName, v))
}

// ParamNameLTE applies the LTE predicate on the "param_name" field.
func ParamNameLTE(v string) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldLTE(FieldParamName, v))
}

// ParamNameContains applies the Contains predicate on the "param_name" field.
func ParamNameContains(v string) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldContains(FieldParamName, v))
}

// ParamNameHasPrefix applies the HasPrefix predicate on the "param_name" field.
func ParamNameHasPrefix(v string) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldHasPrefix(FieldParamName, v))
}

// ParamNameHasSuffix applies the HasSuffix predicate on the "param_name" field.
func ParamNameHasSuffix(v string) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldHasSuffix(FieldParamName, v))
}

// ParamNameEqualFold applies the EqualFold predicate on the "param_name" field.
func ParamNameEqualFold(v string) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldEqualFold(FieldParamName, v))
}

// ParamNameContainsFold applies the ContainsFold predicate on the "param_name" field.
func ParamNameContainsFold(v string) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldContainsFold(FieldParamName, v))
}

// ParamTypeEQ applies the EQ predicate on the "param_type" field.
func ParamTypeEQ(v ParamType) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldEQ(FieldParamType, v))
}

// ParamTypeNEQ applies the NEQ predicate on the "param_type" field.
func ParamTypeNEQ(v ParamType) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldNEQ(FieldParamType, v))
}

// ParamTypeIn applies the In predicate on the "param_type" field.
func ParamTypeIn(vs ...ParamType) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldIn(FieldParamType, vs...))
}

// ParamTypeNotIn applies the NotIn predicate on the "param_type" field.
func ParamTypeNotIn(vs ...ParamType) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldNotIn(FieldParamType, vs...))
}

// ValueRangeEQ applies the EQ predicate on the "value_range" field.
func ValueRangeEQ(v string) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldEQ(FieldValueRange, v))
}

// ValueRangeNEQ applies the NEQ predicate on the "value_range" field.
func ValueRangeNEQ(v string) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldNEQ(FieldValueRange, v))
}

// ValueRangeIn applies the In predicate on the "value_range" field.
func ValueRangeIn(vs ...string) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldIn(FieldValueRange, vs...))
}

// ValueRangeNotIn applies the NotIn predicate on the "value_range" field.
func ValueRangeNotIn(vs ...string) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldNotIn(FieldValueRange, vs...))
}

// ValueRangeGT applies the GT predicate on the "value_range" field.
func ValueRangeGT(v string) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldGT(FieldValueRange, v))
}

// ValueRangeGTE applies the GTE predicate on the "value_range" field.
func ValueRangeGTE(v string) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldGTE(FieldValueRange, v))
}

// ValueRangeLT applies the LT predicate on the "value_range" field.
func ValueRangeLT(v string) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldLT(FieldValueRange, v))
}

// ValueRangeLTE applies the LTE predicate on the "value_range" field.
func ValueRangeLTE(v string) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldLTE(FieldValueRange, v))
}

// ValueRangeContains applies the Contains predicate on the "value_range" field.
func ValueRangeContains(v string) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldContains(FieldValueRange, v))
}

// ValueRangeHasPrefix applies the HasPrefix predicate on the "value_range" field.
func ValueRangeHasPrefix(v string) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldHasPrefix(FieldValueRange, v))
}

// ValueRangeHasSuffix applies the HasSuffix predicate on the "value_range" field.
func ValueRangeHasSuffix(v string) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldHasSuffix(FieldValueRange, v))
}

// ValueRangeEqualFold applies the EqualFold predicate on the "value_range" field.
func ValueRangeEqualFold(v string) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldEqualFold(FieldValueRange, v))
}

// ValueRangeContainsFold applies the ContainsFold predicate on the "value_range" field.
func ValueRangeContainsFold(v string) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldContainsFold(FieldValueRange, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldLTE(FieldStatus, v))
}

// IsDeletedEQ applies the EQ predicate on the "is_deleted" field.
func IsDeletedEQ(v int) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldEQ(FieldIsDeleted, v))
}

// IsDeletedNEQ applies the NEQ predicate on the "is_deleted" field.
func IsDeletedNEQ(v int) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldNEQ(FieldIsDeleted, v))
}

// IsDeletedIn applies the In predicate on the "is_deleted" field.
func IsDeletedIn(vs ...int) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldIn(FieldIsDeleted, vs...))
}

// IsDeletedNotIn applies the NotIn predicate on the "is_deleted" field.
func IsDeletedNotIn(vs ...int) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldNotIn(FieldIsDeleted, vs...))
}

// IsDeletedGT applies the GT predicate on the "is_deleted" field.
func IsDeletedGT(v int) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldGT(FieldIsDeleted, v))
}

// IsDeletedGTE applies the GTE predicate on the "is_deleted" field.
func IsDeletedGTE(v int) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldGTE(FieldIsDeleted, v))
}

// IsDeletedLT applies the LT predicate on the "is_deleted" field.
func IsDeletedLT(v int) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldLT(FieldIsDeleted, v))
}

// IsDeletedLTE applies the LTE predicate on the "is_deleted" field.
func IsDeletedLTE(v int) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldLTE(FieldIsDeleted, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.FieldLTE(FieldUpdateTime, v))
}

// HasModel applies the HasEdge predicate on the "model" edge.
func HasModel() predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ModelTable, ModelColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasModelWith applies the HasEdge predicate on the "model" edge with a given conditions (other predicates).
func HasModelWith(preds ...predicate.CarsModels) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(func(s *sql.Selector) {
		step := newModelStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGroup applies the HasEdge predicate on the "group" edge.
func HasGroup() predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GroupTable, GroupColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGroupWith applies the HasEdge predicate on the "group" edge with a given conditions (other predicates).
func HasGroupWith(preds ...predicate.CarsModelsGroups) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(func(s *sql.Selector) {
		step := newGroupStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CarsModelsGroupsParams) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CarsModelsGroupsParams) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CarsModelsGroupsParams) predicate.CarsModelsGroupsParams {
	return predicate.CarsModelsGroupsParams(sql.NotPredicates(p))
}
