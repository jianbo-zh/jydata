// Code generated by ent, DO NOT EDIT.

package carsmodelsgroupsparams

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the carsmodelsgroupsparams type in the database.
	Label = "cars_models_groups_params"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldModelID holds the string denoting the model_id field in the database.
	FieldModelID = "model_id"
	// FieldGroupID holds the string denoting the group_id field in the database.
	FieldGroupID = "group_id"
	// FieldParamRemark holds the string denoting the param_remark field in the database.
	FieldParamRemark = "param_remark"
	// FieldParamName holds the string denoting the param_name field in the database.
	FieldParamName = "param_name"
	// FieldParamType holds the string denoting the param_type field in the database.
	FieldParamType = "param_type"
	// FieldValueRange holds the string denoting the value_range field in the database.
	FieldValueRange = "value_range"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldIsDeleted holds the string denoting the is_deleted field in the database.
	FieldIsDeleted = "is_deleted"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// EdgeModel holds the string denoting the model edge name in mutations.
	EdgeModel = "model"
	// EdgeGroup holds the string denoting the group edge name in mutations.
	EdgeGroup = "group"
	// Table holds the table name of the carsmodelsgroupsparams in the database.
	Table = "cars_models_groups_params"
	// ModelTable is the table that holds the model relation/edge.
	ModelTable = "cars_models_groups_params"
	// ModelInverseTable is the table name for the CarsModels entity.
	// It exists in this package in order to avoid circular dependency with the "carsmodels" package.
	ModelInverseTable = "cars_models"
	// ModelColumn is the table column denoting the model relation/edge.
	ModelColumn = "model_id"
	// GroupTable is the table that holds the group relation/edge.
	GroupTable = "cars_models_groups_params"
	// GroupInverseTable is the table name for the CarsModelsGroups entity.
	// It exists in this package in order to avoid circular dependency with the "carsmodelsgroups" package.
	GroupInverseTable = "cars_models_groups"
	// GroupColumn is the table column denoting the group relation/edge.
	GroupColumn = "group_id"
)

// Columns holds all SQL columns for carsmodelsgroupsparams fields.
var Columns = []string{
	FieldID,
	FieldModelID,
	FieldGroupID,
	FieldParamRemark,
	FieldParamName,
	FieldParamType,
	FieldValueRange,
	FieldStatus,
	FieldIsDeleted,
	FieldCreateTime,
	FieldUpdateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultModelID holds the default value on creation for the "model_id" field.
	DefaultModelID int
	// DefaultGroupID holds the default value on creation for the "group_id" field.
	DefaultGroupID int
	// DefaultValueRange holds the default value on creation for the "value_range" field.
	DefaultValueRange string
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int
	// DefaultIsDeleted holds the default value on creation for the "is_deleted" field.
	DefaultIsDeleted int
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)

// ParamType defines the type for the "param_type" enum field.
type ParamType string

// ParamType values.
const (
	ParamTypeInt    ParamType = "int"
	ParamTypeDouble ParamType = "double"
	ParamTypeString ParamType = "string"
)

func (pt ParamType) String() string {
	return string(pt)
}

// ParamTypeValidator is a validator for the "param_type" field enum values. It is called by the builders before save.
func ParamTypeValidator(pt ParamType) error {
	switch pt {
	case ParamTypeInt, ParamTypeDouble, ParamTypeString:
		return nil
	default:
		return fmt.Errorf("carsmodelsgroupsparams: invalid enum value for param_type field: %q", pt)
	}
}

// OrderOption defines the ordering options for the CarsModelsGroupsParams queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByModelID orders the results by the model_id field.
func ByModelID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModelID, opts...).ToFunc()
}

// ByGroupID orders the results by the group_id field.
func ByGroupID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGroupID, opts...).ToFunc()
}

// ByParamRemark orders the results by the param_remark field.
func ByParamRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParamRemark, opts...).ToFunc()
}

// ByParamName orders the results by the param_name field.
func ByParamName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParamName, opts...).ToFunc()
}

// ByParamType orders the results by the param_type field.
func ByParamType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParamType, opts...).ToFunc()
}

// ByValueRange orders the results by the value_range field.
func ByValueRange(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValueRange, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByIsDeleted orders the results by the is_deleted field.
func ByIsDeleted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDeleted, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByModelField orders the results by model field.
func ByModelField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newModelStep(), sql.OrderByField(field, opts...))
	}
}

// ByGroupField orders the results by group field.
func ByGroupField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGroupStep(), sql.OrderByField(field, opts...))
	}
}
func newModelStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ModelInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ModelTable, ModelColumn),
	)
}
func newGroupStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GroupInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, GroupTable, GroupColumn),
	)
}
