// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/orderappeal"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderAppealCreate is the builder for creating a OrderAppeal entity.
type OrderAppealCreate struct {
	config
	mutation *OrderAppealMutation
	hooks    []Hook
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (oac *OrderAppealCreate) SetScenicAreaID(i int) *OrderAppealCreate {
	oac.mutation.SetScenicAreaID(i)
	return oac
}

// SetUserID sets the "user_id" field.
func (oac *OrderAppealCreate) SetUserID(i int) *OrderAppealCreate {
	oac.mutation.SetUserID(i)
	return oac
}

// SetOrderID sets the "order_id" field.
func (oac *OrderAppealCreate) SetOrderID(i int) *OrderAppealCreate {
	oac.mutation.SetOrderID(i)
	return oac
}

// SetOrderNo sets the "order_no" field.
func (oac *OrderAppealCreate) SetOrderNo(s string) *OrderAppealCreate {
	oac.mutation.SetOrderNo(s)
	return oac
}

// SetType sets the "type" field.
func (oac *OrderAppealCreate) SetType(i int) *OrderAppealCreate {
	oac.mutation.SetType(i)
	return oac
}

// SetNillableType sets the "type" field if the given value is not nil.
func (oac *OrderAppealCreate) SetNillableType(i *int) *OrderAppealCreate {
	if i != nil {
		oac.SetType(*i)
	}
	return oac
}

// SetEndStopID sets the "end_stop_id" field.
func (oac *OrderAppealCreate) SetEndStopID(i int) *OrderAppealCreate {
	oac.mutation.SetEndStopID(i)
	return oac
}

// SetNillableEndStopID sets the "end_stop_id" field if the given value is not nil.
func (oac *OrderAppealCreate) SetNillableEndStopID(i *int) *OrderAppealCreate {
	if i != nil {
		oac.SetEndStopID(*i)
	}
	return oac
}

// SetEndStopImageID sets the "end_stop_image_id" field.
func (oac *OrderAppealCreate) SetEndStopImageID(i int) *OrderAppealCreate {
	oac.mutation.SetEndStopImageID(i)
	return oac
}

// SetNillableEndStopImageID sets the "end_stop_image_id" field if the given value is not nil.
func (oac *OrderAppealCreate) SetNillableEndStopImageID(i *int) *OrderAppealCreate {
	if i != nil {
		oac.SetEndStopImageID(*i)
	}
	return oac
}

// SetState sets the "state" field.
func (oac *OrderAppealCreate) SetState(i int) *OrderAppealCreate {
	oac.mutation.SetState(i)
	return oac
}

// SetNillableState sets the "state" field if the given value is not nil.
func (oac *OrderAppealCreate) SetNillableState(i *int) *OrderAppealCreate {
	if i != nil {
		oac.SetState(*i)
	}
	return oac
}

// SetRefundAmount sets the "refund_amount" field.
func (oac *OrderAppealCreate) SetRefundAmount(i int) *OrderAppealCreate {
	oac.mutation.SetRefundAmount(i)
	return oac
}

// SetNillableRefundAmount sets the "refund_amount" field if the given value is not nil.
func (oac *OrderAppealCreate) SetNillableRefundAmount(i *int) *OrderAppealCreate {
	if i != nil {
		oac.SetRefundAmount(*i)
	}
	return oac
}

// SetUserComment sets the "user_comment" field.
func (oac *OrderAppealCreate) SetUserComment(s string) *OrderAppealCreate {
	oac.mutation.SetUserComment(s)
	return oac
}

// SetNillableUserComment sets the "user_comment" field if the given value is not nil.
func (oac *OrderAppealCreate) SetNillableUserComment(s *string) *OrderAppealCreate {
	if s != nil {
		oac.SetUserComment(*s)
	}
	return oac
}

// SetReviewComment sets the "review_comment" field.
func (oac *OrderAppealCreate) SetReviewComment(s string) *OrderAppealCreate {
	oac.mutation.SetReviewComment(s)
	return oac
}

// SetNillableReviewComment sets the "review_comment" field if the given value is not nil.
func (oac *OrderAppealCreate) SetNillableReviewComment(s *string) *OrderAppealCreate {
	if s != nil {
		oac.SetReviewComment(*s)
	}
	return oac
}

// SetRefundTime sets the "refund_time" field.
func (oac *OrderAppealCreate) SetRefundTime(t time.Time) *OrderAppealCreate {
	oac.mutation.SetRefundTime(t)
	return oac
}

// SetNillableRefundTime sets the "refund_time" field if the given value is not nil.
func (oac *OrderAppealCreate) SetNillableRefundTime(t *time.Time) *OrderAppealCreate {
	if t != nil {
		oac.SetRefundTime(*t)
	}
	return oac
}

// SetReviewTime sets the "review_time" field.
func (oac *OrderAppealCreate) SetReviewTime(t time.Time) *OrderAppealCreate {
	oac.mutation.SetReviewTime(t)
	return oac
}

// SetNillableReviewTime sets the "review_time" field if the given value is not nil.
func (oac *OrderAppealCreate) SetNillableReviewTime(t *time.Time) *OrderAppealCreate {
	if t != nil {
		oac.SetReviewTime(*t)
	}
	return oac
}

// SetCreateTime sets the "create_time" field.
func (oac *OrderAppealCreate) SetCreateTime(t time.Time) *OrderAppealCreate {
	oac.mutation.SetCreateTime(t)
	return oac
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (oac *OrderAppealCreate) SetNillableCreateTime(t *time.Time) *OrderAppealCreate {
	if t != nil {
		oac.SetCreateTime(*t)
	}
	return oac
}

// SetUpdateTime sets the "update_time" field.
func (oac *OrderAppealCreate) SetUpdateTime(t time.Time) *OrderAppealCreate {
	oac.mutation.SetUpdateTime(t)
	return oac
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (oac *OrderAppealCreate) SetNillableUpdateTime(t *time.Time) *OrderAppealCreate {
	if t != nil {
		oac.SetUpdateTime(*t)
	}
	return oac
}

// SetID sets the "id" field.
func (oac *OrderAppealCreate) SetID(i int) *OrderAppealCreate {
	oac.mutation.SetID(i)
	return oac
}

// Mutation returns the OrderAppealMutation object of the builder.
func (oac *OrderAppealCreate) Mutation() *OrderAppealMutation {
	return oac.mutation
}

// Save creates the OrderAppeal in the database.
func (oac *OrderAppealCreate) Save(ctx context.Context) (*OrderAppeal, error) {
	oac.defaults()
	return withHooks(ctx, oac.sqlSave, oac.mutation, oac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oac *OrderAppealCreate) SaveX(ctx context.Context) *OrderAppeal {
	v, err := oac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oac *OrderAppealCreate) Exec(ctx context.Context) error {
	_, err := oac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oac *OrderAppealCreate) ExecX(ctx context.Context) {
	if err := oac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oac *OrderAppealCreate) defaults() {
	if _, ok := oac.mutation.GetType(); !ok {
		v := orderappeal.DefaultType
		oac.mutation.SetType(v)
	}
	if _, ok := oac.mutation.EndStopID(); !ok {
		v := orderappeal.DefaultEndStopID
		oac.mutation.SetEndStopID(v)
	}
	if _, ok := oac.mutation.EndStopImageID(); !ok {
		v := orderappeal.DefaultEndStopImageID
		oac.mutation.SetEndStopImageID(v)
	}
	if _, ok := oac.mutation.State(); !ok {
		v := orderappeal.DefaultState
		oac.mutation.SetState(v)
	}
	if _, ok := oac.mutation.RefundAmount(); !ok {
		v := orderappeal.DefaultRefundAmount
		oac.mutation.SetRefundAmount(v)
	}
	if _, ok := oac.mutation.UserComment(); !ok {
		v := orderappeal.DefaultUserComment
		oac.mutation.SetUserComment(v)
	}
	if _, ok := oac.mutation.ReviewComment(); !ok {
		v := orderappeal.DefaultReviewComment
		oac.mutation.SetReviewComment(v)
	}
	if _, ok := oac.mutation.CreateTime(); !ok {
		v := orderappeal.DefaultCreateTime()
		oac.mutation.SetCreateTime(v)
	}
	if _, ok := oac.mutation.UpdateTime(); !ok {
		v := orderappeal.DefaultUpdateTime()
		oac.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oac *OrderAppealCreate) check() error {
	if _, ok := oac.mutation.ScenicAreaID(); !ok {
		return &ValidationError{Name: "scenic_area_id", err: errors.New(`ent: missing required field "OrderAppeal.scenic_area_id"`)}
	}
	if _, ok := oac.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "OrderAppeal.user_id"`)}
	}
	if _, ok := oac.mutation.OrderID(); !ok {
		return &ValidationError{Name: "order_id", err: errors.New(`ent: missing required field "OrderAppeal.order_id"`)}
	}
	if _, ok := oac.mutation.OrderNo(); !ok {
		return &ValidationError{Name: "order_no", err: errors.New(`ent: missing required field "OrderAppeal.order_no"`)}
	}
	if _, ok := oac.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "OrderAppeal.type"`)}
	}
	if _, ok := oac.mutation.EndStopID(); !ok {
		return &ValidationError{Name: "end_stop_id", err: errors.New(`ent: missing required field "OrderAppeal.end_stop_id"`)}
	}
	if _, ok := oac.mutation.EndStopImageID(); !ok {
		return &ValidationError{Name: "end_stop_image_id", err: errors.New(`ent: missing required field "OrderAppeal.end_stop_image_id"`)}
	}
	if _, ok := oac.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "OrderAppeal.state"`)}
	}
	if _, ok := oac.mutation.RefundAmount(); !ok {
		return &ValidationError{Name: "refund_amount", err: errors.New(`ent: missing required field "OrderAppeal.refund_amount"`)}
	}
	if _, ok := oac.mutation.UserComment(); !ok {
		return &ValidationError{Name: "user_comment", err: errors.New(`ent: missing required field "OrderAppeal.user_comment"`)}
	}
	if _, ok := oac.mutation.ReviewComment(); !ok {
		return &ValidationError{Name: "review_comment", err: errors.New(`ent: missing required field "OrderAppeal.review_comment"`)}
	}
	if _, ok := oac.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "OrderAppeal.create_time"`)}
	}
	if _, ok := oac.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "OrderAppeal.update_time"`)}
	}
	return nil
}

func (oac *OrderAppealCreate) sqlSave(ctx context.Context) (*OrderAppeal, error) {
	if err := oac.check(); err != nil {
		return nil, err
	}
	_node, _spec := oac.createSpec()
	if err := sqlgraph.CreateNode(ctx, oac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	oac.mutation.id = &_node.ID
	oac.mutation.done = true
	return _node, nil
}

func (oac *OrderAppealCreate) createSpec() (*OrderAppeal, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderAppeal{config: oac.config}
		_spec = sqlgraph.NewCreateSpec(orderappeal.Table, sqlgraph.NewFieldSpec(orderappeal.FieldID, field.TypeInt))
	)
	if id, ok := oac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := oac.mutation.ScenicAreaID(); ok {
		_spec.SetField(orderappeal.FieldScenicAreaID, field.TypeInt, value)
		_node.ScenicAreaID = value
	}
	if value, ok := oac.mutation.UserID(); ok {
		_spec.SetField(orderappeal.FieldUserID, field.TypeInt, value)
		_node.UserID = value
	}
	if value, ok := oac.mutation.OrderID(); ok {
		_spec.SetField(orderappeal.FieldOrderID, field.TypeInt, value)
		_node.OrderID = value
	}
	if value, ok := oac.mutation.OrderNo(); ok {
		_spec.SetField(orderappeal.FieldOrderNo, field.TypeString, value)
		_node.OrderNo = value
	}
	if value, ok := oac.mutation.GetType(); ok {
		_spec.SetField(orderappeal.FieldType, field.TypeInt, value)
		_node.Type = value
	}
	if value, ok := oac.mutation.EndStopID(); ok {
		_spec.SetField(orderappeal.FieldEndStopID, field.TypeInt, value)
		_node.EndStopID = value
	}
	if value, ok := oac.mutation.EndStopImageID(); ok {
		_spec.SetField(orderappeal.FieldEndStopImageID, field.TypeInt, value)
		_node.EndStopImageID = value
	}
	if value, ok := oac.mutation.State(); ok {
		_spec.SetField(orderappeal.FieldState, field.TypeInt, value)
		_node.State = value
	}
	if value, ok := oac.mutation.RefundAmount(); ok {
		_spec.SetField(orderappeal.FieldRefundAmount, field.TypeInt, value)
		_node.RefundAmount = value
	}
	if value, ok := oac.mutation.UserComment(); ok {
		_spec.SetField(orderappeal.FieldUserComment, field.TypeString, value)
		_node.UserComment = value
	}
	if value, ok := oac.mutation.ReviewComment(); ok {
		_spec.SetField(orderappeal.FieldReviewComment, field.TypeString, value)
		_node.ReviewComment = value
	}
	if value, ok := oac.mutation.RefundTime(); ok {
		_spec.SetField(orderappeal.FieldRefundTime, field.TypeTime, value)
		_node.RefundTime = &value
	}
	if value, ok := oac.mutation.ReviewTime(); ok {
		_spec.SetField(orderappeal.FieldReviewTime, field.TypeTime, value)
		_node.ReviewTime = &value
	}
	if value, ok := oac.mutation.CreateTime(); ok {
		_spec.SetField(orderappeal.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := oac.mutation.UpdateTime(); ok {
		_spec.SetField(orderappeal.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// OrderAppealCreateBulk is the builder for creating many OrderAppeal entities in bulk.
type OrderAppealCreateBulk struct {
	config
	err      error
	builders []*OrderAppealCreate
}

// Save creates the OrderAppeal entities in the database.
func (oacb *OrderAppealCreateBulk) Save(ctx context.Context) ([]*OrderAppeal, error) {
	if oacb.err != nil {
		return nil, oacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(oacb.builders))
	nodes := make([]*OrderAppeal, len(oacb.builders))
	mutators := make([]Mutator, len(oacb.builders))
	for i := range oacb.builders {
		func(i int, root context.Context) {
			builder := oacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderAppealMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oacb *OrderAppealCreateBulk) SaveX(ctx context.Context) []*OrderAppeal {
	v, err := oacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oacb *OrderAppealCreateBulk) Exec(ctx context.Context) error {
	_, err := oacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oacb *OrderAppealCreateBulk) ExecX(ctx context.Context) {
	if err := oacb.Exec(ctx); err != nil {
		panic(err)
	}
}
