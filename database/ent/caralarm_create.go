// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/caralarm"
)

// CarAlarmCreate is the builder for creating a CarAlarm entity.
type CarAlarmCreate struct {
	config
	mutation *CarAlarmMutation
	hooks    []Hook
}

// SetDeviceID sets the "device_id" field.
func (cac *CarAlarmCreate) SetDeviceID(s string) *CarAlarmCreate {
	cac.mutation.SetDeviceID(s)
	return cac
}

// SetAlarmID sets the "alarm_id" field.
func (cac *CarAlarmCreate) SetAlarmID(u uint32) *CarAlarmCreate {
	cac.mutation.SetAlarmID(u)
	return cac
}

// SetModuleName sets the "module_name" field.
func (cac *CarAlarmCreate) SetModuleName(s string) *CarAlarmCreate {
	cac.mutation.SetModuleName(s)
	return cac
}

// SetType sets the "type" field.
func (cac *CarAlarmCreate) SetType(u uint32) *CarAlarmCreate {
	cac.mutation.SetType(u)
	return cac
}

// SetLevel sets the "level" field.
func (cac *CarAlarmCreate) SetLevel(u uint32) *CarAlarmCreate {
	cac.mutation.SetLevel(u)
	return cac
}

// SetCanIgnore sets the "can_ignore" field.
func (cac *CarAlarmCreate) SetCanIgnore(u uint32) *CarAlarmCreate {
	cac.mutation.SetCanIgnore(u)
	return cac
}

// SetEffectState sets the "effect_state" field.
func (cac *CarAlarmCreate) SetEffectState(u uint32) *CarAlarmCreate {
	cac.mutation.SetEffectState(u)
	return cac
}

// SetDesc sets the "desc" field.
func (cac *CarAlarmCreate) SetDesc(s string) *CarAlarmCreate {
	cac.mutation.SetDesc(s)
	return cac
}

// SetUUID sets the "uuid" field.
func (cac *CarAlarmCreate) SetUUID(u uint64) *CarAlarmCreate {
	cac.mutation.SetUUID(u)
	return cac
}

// SetAssociatedIds sets the "associated_ids" field.
func (cac *CarAlarmCreate) SetAssociatedIds(i []int) *CarAlarmCreate {
	cac.mutation.SetAssociatedIds(i)
	return cac
}

// SetCreateTime sets the "create_time" field.
func (cac *CarAlarmCreate) SetCreateTime(t time.Time) *CarAlarmCreate {
	cac.mutation.SetCreateTime(t)
	return cac
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (cac *CarAlarmCreate) SetNillableCreateTime(t *time.Time) *CarAlarmCreate {
	if t != nil {
		cac.SetCreateTime(*t)
	}
	return cac
}

// SetUpdateTime sets the "update_time" field.
func (cac *CarAlarmCreate) SetUpdateTime(t time.Time) *CarAlarmCreate {
	cac.mutation.SetUpdateTime(t)
	return cac
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (cac *CarAlarmCreate) SetNillableUpdateTime(t *time.Time) *CarAlarmCreate {
	if t != nil {
		cac.SetUpdateTime(*t)
	}
	return cac
}

// SetID sets the "id" field.
func (cac *CarAlarmCreate) SetID(i int) *CarAlarmCreate {
	cac.mutation.SetID(i)
	return cac
}

// Mutation returns the CarAlarmMutation object of the builder.
func (cac *CarAlarmCreate) Mutation() *CarAlarmMutation {
	return cac.mutation
}

// Save creates the CarAlarm in the database.
func (cac *CarAlarmCreate) Save(ctx context.Context) (*CarAlarm, error) {
	cac.defaults()
	return withHooks(ctx, cac.sqlSave, cac.mutation, cac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cac *CarAlarmCreate) SaveX(ctx context.Context) *CarAlarm {
	v, err := cac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cac *CarAlarmCreate) Exec(ctx context.Context) error {
	_, err := cac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cac *CarAlarmCreate) ExecX(ctx context.Context) {
	if err := cac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cac *CarAlarmCreate) defaults() {
	if _, ok := cac.mutation.CreateTime(); !ok {
		v := caralarm.DefaultCreateTime()
		cac.mutation.SetCreateTime(v)
	}
	if _, ok := cac.mutation.UpdateTime(); !ok {
		v := caralarm.DefaultUpdateTime()
		cac.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cac *CarAlarmCreate) check() error {
	if _, ok := cac.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device_id", err: errors.New(`ent: missing required field "CarAlarm.device_id"`)}
	}
	if _, ok := cac.mutation.AlarmID(); !ok {
		return &ValidationError{Name: "alarm_id", err: errors.New(`ent: missing required field "CarAlarm.alarm_id"`)}
	}
	if _, ok := cac.mutation.ModuleName(); !ok {
		return &ValidationError{Name: "module_name", err: errors.New(`ent: missing required field "CarAlarm.module_name"`)}
	}
	if _, ok := cac.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "CarAlarm.type"`)}
	}
	if _, ok := cac.mutation.Level(); !ok {
		return &ValidationError{Name: "level", err: errors.New(`ent: missing required field "CarAlarm.level"`)}
	}
	if _, ok := cac.mutation.CanIgnore(); !ok {
		return &ValidationError{Name: "can_ignore", err: errors.New(`ent: missing required field "CarAlarm.can_ignore"`)}
	}
	if _, ok := cac.mutation.EffectState(); !ok {
		return &ValidationError{Name: "effect_state", err: errors.New(`ent: missing required field "CarAlarm.effect_state"`)}
	}
	if _, ok := cac.mutation.Desc(); !ok {
		return &ValidationError{Name: "desc", err: errors.New(`ent: missing required field "CarAlarm.desc"`)}
	}
	if _, ok := cac.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`ent: missing required field "CarAlarm.uuid"`)}
	}
	if _, ok := cac.mutation.AssociatedIds(); !ok {
		return &ValidationError{Name: "associated_ids", err: errors.New(`ent: missing required field "CarAlarm.associated_ids"`)}
	}
	if _, ok := cac.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "CarAlarm.create_time"`)}
	}
	if _, ok := cac.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "CarAlarm.update_time"`)}
	}
	return nil
}

func (cac *CarAlarmCreate) sqlSave(ctx context.Context) (*CarAlarm, error) {
	if err := cac.check(); err != nil {
		return nil, err
	}
	_node, _spec := cac.createSpec()
	if err := sqlgraph.CreateNode(ctx, cac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	cac.mutation.id = &_node.ID
	cac.mutation.done = true
	return _node, nil
}

func (cac *CarAlarmCreate) createSpec() (*CarAlarm, *sqlgraph.CreateSpec) {
	var (
		_node = &CarAlarm{config: cac.config}
		_spec = sqlgraph.NewCreateSpec(caralarm.Table, sqlgraph.NewFieldSpec(caralarm.FieldID, field.TypeInt))
	)
	if id, ok := cac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cac.mutation.DeviceID(); ok {
		_spec.SetField(caralarm.FieldDeviceID, field.TypeString, value)
		_node.DeviceID = value
	}
	if value, ok := cac.mutation.AlarmID(); ok {
		_spec.SetField(caralarm.FieldAlarmID, field.TypeUint32, value)
		_node.AlarmID = value
	}
	if value, ok := cac.mutation.ModuleName(); ok {
		_spec.SetField(caralarm.FieldModuleName, field.TypeString, value)
		_node.ModuleName = value
	}
	if value, ok := cac.mutation.GetType(); ok {
		_spec.SetField(caralarm.FieldType, field.TypeUint32, value)
		_node.Type = value
	}
	if value, ok := cac.mutation.Level(); ok {
		_spec.SetField(caralarm.FieldLevel, field.TypeUint32, value)
		_node.Level = value
	}
	if value, ok := cac.mutation.CanIgnore(); ok {
		_spec.SetField(caralarm.FieldCanIgnore, field.TypeUint32, value)
		_node.CanIgnore = value
	}
	if value, ok := cac.mutation.EffectState(); ok {
		_spec.SetField(caralarm.FieldEffectState, field.TypeUint32, value)
		_node.EffectState = value
	}
	if value, ok := cac.mutation.Desc(); ok {
		_spec.SetField(caralarm.FieldDesc, field.TypeString, value)
		_node.Desc = value
	}
	if value, ok := cac.mutation.UUID(); ok {
		_spec.SetField(caralarm.FieldUUID, field.TypeUint64, value)
		_node.UUID = value
	}
	if value, ok := cac.mutation.AssociatedIds(); ok {
		_spec.SetField(caralarm.FieldAssociatedIds, field.TypeJSON, value)
		_node.AssociatedIds = value
	}
	if value, ok := cac.mutation.CreateTime(); ok {
		_spec.SetField(caralarm.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := cac.mutation.UpdateTime(); ok {
		_spec.SetField(caralarm.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// CarAlarmCreateBulk is the builder for creating many CarAlarm entities in bulk.
type CarAlarmCreateBulk struct {
	config
	err      error
	builders []*CarAlarmCreate
}

// Save creates the CarAlarm entities in the database.
func (cacb *CarAlarmCreateBulk) Save(ctx context.Context) ([]*CarAlarm, error) {
	if cacb.err != nil {
		return nil, cacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cacb.builders))
	nodes := make([]*CarAlarm, len(cacb.builders))
	mutators := make([]Mutator, len(cacb.builders))
	for i := range cacb.builders {
		func(i int, root context.Context) {
			builder := cacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CarAlarmMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cacb *CarAlarmCreateBulk) SaveX(ctx context.Context) []*CarAlarm {
	v, err := cacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cacb *CarAlarmCreateBulk) Exec(ctx context.Context) error {
	_, err := cacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cacb *CarAlarmCreateBulk) ExecX(ctx context.Context) {
	if err := cacb.Exec(ctx); err != nil {
		panic(err)
	}
}
