// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jianbo-zh/jydata/database/ent/profitreceiver"
	"github.com/jianbo-zh/jydata/database/ent/scenicarea"
)

// ProfitReceiver is the model entity for the ProfitReceiver schema.
type ProfitReceiver struct {
	config `json:"-"`
	// ID of the ent.
	// ID
	ID int `json:"id,omitempty"`
	// 景区ID
	ScenicAreaID int `json:"scenic_area_id,omitempty"`
	// 商户号
	MchID string `json:"mch_id,omitempty"`
	// 手机号
	Phone string `json:"phone,omitempty"`
	// 接收方类型(1-商户ID,2-个人openid)
	ReceiverType int `json:"receiver_type,omitempty"`
	// 接收方账号
	ReceiverAccount string `json:"receiver_account,omitempty"`
	// 接收方姓名
	ReceiverName string `json:"receiver_name,omitempty"`
	// 分润比例
	SharingRatio float64 `json:"sharing_ratio,omitempty"`
	// 状态(1-启用 2-禁用)
	State int `json:"state,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProfitReceiverQuery when eager-loading is set.
	Edges        ProfitReceiverEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProfitReceiverEdges holds the relations/edges for other nodes in the graph.
type ProfitReceiverEdges struct {
	// BackgroundScenicArea holds the value of the background_scenic_area edge.
	BackgroundScenicArea *ScenicArea `json:"background_scenic_area,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BackgroundScenicAreaOrErr returns the BackgroundScenicArea value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProfitReceiverEdges) BackgroundScenicAreaOrErr() (*ScenicArea, error) {
	if e.BackgroundScenicArea != nil {
		return e.BackgroundScenicArea, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: scenicarea.Label}
	}
	return nil, &NotLoadedError{edge: "background_scenic_area"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProfitReceiver) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case profitreceiver.FieldSharingRatio:
			values[i] = new(sql.NullFloat64)
		case profitreceiver.FieldID, profitreceiver.FieldScenicAreaID, profitreceiver.FieldReceiverType, profitreceiver.FieldState:
			values[i] = new(sql.NullInt64)
		case profitreceiver.FieldMchID, profitreceiver.FieldPhone, profitreceiver.FieldReceiverAccount, profitreceiver.FieldReceiverName:
			values[i] = new(sql.NullString)
		case profitreceiver.FieldCreateTime, profitreceiver.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProfitReceiver fields.
func (pr *ProfitReceiver) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case profitreceiver.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case profitreceiver.FieldScenicAreaID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field scenic_area_id", values[i])
			} else if value.Valid {
				pr.ScenicAreaID = int(value.Int64)
			}
		case profitreceiver.FieldMchID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mch_id", values[i])
			} else if value.Valid {
				pr.MchID = value.String
			}
		case profitreceiver.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				pr.Phone = value.String
			}
		case profitreceiver.FieldReceiverType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field receiver_type", values[i])
			} else if value.Valid {
				pr.ReceiverType = int(value.Int64)
			}
		case profitreceiver.FieldReceiverAccount:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field receiver_account", values[i])
			} else if value.Valid {
				pr.ReceiverAccount = value.String
			}
		case profitreceiver.FieldReceiverName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field receiver_name", values[i])
			} else if value.Valid {
				pr.ReceiverName = value.String
			}
		case profitreceiver.FieldSharingRatio:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field sharing_ratio", values[i])
			} else if value.Valid {
				pr.SharingRatio = value.Float64
			}
		case profitreceiver.FieldState:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				pr.State = int(value.Int64)
			}
		case profitreceiver.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				pr.CreateTime = value.Time
			}
		case profitreceiver.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				pr.UpdateTime = value.Time
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProfitReceiver.
// This includes values selected through modifiers, order, etc.
func (pr *ProfitReceiver) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryBackgroundScenicArea queries the "background_scenic_area" edge of the ProfitReceiver entity.
func (pr *ProfitReceiver) QueryBackgroundScenicArea() *ScenicAreaQuery {
	return NewProfitReceiverClient(pr.config).QueryBackgroundScenicArea(pr)
}

// Update returns a builder for updating this ProfitReceiver.
// Note that you need to call ProfitReceiver.Unwrap() before calling this method if this ProfitReceiver
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *ProfitReceiver) Update() *ProfitReceiverUpdateOne {
	return NewProfitReceiverClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the ProfitReceiver entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *ProfitReceiver) Unwrap() *ProfitReceiver {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProfitReceiver is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *ProfitReceiver) String() string {
	var builder strings.Builder
	builder.WriteString("ProfitReceiver(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("scenic_area_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.ScenicAreaID))
	builder.WriteString(", ")
	builder.WriteString("mch_id=")
	builder.WriteString(pr.MchID)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(pr.Phone)
	builder.WriteString(", ")
	builder.WriteString("receiver_type=")
	builder.WriteString(fmt.Sprintf("%v", pr.ReceiverType))
	builder.WriteString(", ")
	builder.WriteString("receiver_account=")
	builder.WriteString(pr.ReceiverAccount)
	builder.WriteString(", ")
	builder.WriteString("receiver_name=")
	builder.WriteString(pr.ReceiverName)
	builder.WriteString(", ")
	builder.WriteString("sharing_ratio=")
	builder.WriteString(fmt.Sprintf("%v", pr.SharingRatio))
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(fmt.Sprintf("%v", pr.State))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(pr.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(pr.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ProfitReceivers is a parsable slice of ProfitReceiver.
type ProfitReceivers []*ProfitReceiver
