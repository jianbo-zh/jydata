// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/statsdailyscenicarea"
)

// StatsDailyScenicAreaCreate is the builder for creating a StatsDailyScenicArea entity.
type StatsDailyScenicAreaCreate struct {
	config
	mutation *StatsDailyScenicAreaMutation
	hooks    []Hook
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (sdsac *StatsDailyScenicAreaCreate) SetScenicAreaID(i int) *StatsDailyScenicAreaCreate {
	sdsac.mutation.SetScenicAreaID(i)
	return sdsac
}

// SetY sets the "y" field.
func (sdsac *StatsDailyScenicAreaCreate) SetY(i int) *StatsDailyScenicAreaCreate {
	sdsac.mutation.SetY(i)
	return sdsac
}

// SetM sets the "m" field.
func (sdsac *StatsDailyScenicAreaCreate) SetM(i int) *StatsDailyScenicAreaCreate {
	sdsac.mutation.SetM(i)
	return sdsac
}

// SetD sets the "d" field.
func (sdsac *StatsDailyScenicAreaCreate) SetD(i int) *StatsDailyScenicAreaCreate {
	sdsac.mutation.SetD(i)
	return sdsac
}

// SetWeek sets the "week" field.
func (sdsac *StatsDailyScenicAreaCreate) SetWeek(i int) *StatsDailyScenicAreaCreate {
	sdsac.mutation.SetWeek(i)
	return sdsac
}

// SetWeekday sets the "weekday" field.
func (sdsac *StatsDailyScenicAreaCreate) SetWeekday(i int) *StatsDailyScenicAreaCreate {
	sdsac.mutation.SetWeekday(i)
	return sdsac
}

// SetPeriod sets the "period" field.
func (sdsac *StatsDailyScenicAreaCreate) SetPeriod(i int) *StatsDailyScenicAreaCreate {
	sdsac.mutation.SetPeriod(i)
	return sdsac
}

// SetUserCountLogin sets the "user_count_login" field.
func (sdsac *StatsDailyScenicAreaCreate) SetUserCountLogin(i int) *StatsDailyScenicAreaCreate {
	sdsac.mutation.SetUserCountLogin(i)
	return sdsac
}

// SetNillableUserCountLogin sets the "user_count_login" field if the given value is not nil.
func (sdsac *StatsDailyScenicAreaCreate) SetNillableUserCountLogin(i *int) *StatsDailyScenicAreaCreate {
	if i != nil {
		sdsac.SetUserCountLogin(*i)
	}
	return sdsac
}

// SetUserCountRegister sets the "user_count_register" field.
func (sdsac *StatsDailyScenicAreaCreate) SetUserCountRegister(i int) *StatsDailyScenicAreaCreate {
	sdsac.mutation.SetUserCountRegister(i)
	return sdsac
}

// SetNillableUserCountRegister sets the "user_count_register" field if the given value is not nil.
func (sdsac *StatsDailyScenicAreaCreate) SetNillableUserCountRegister(i *int) *StatsDailyScenicAreaCreate {
	if i != nil {
		sdsac.SetUserCountRegister(*i)
	}
	return sdsac
}

// SetUserCountOrder sets the "user_count_order" field.
func (sdsac *StatsDailyScenicAreaCreate) SetUserCountOrder(i int) *StatsDailyScenicAreaCreate {
	sdsac.mutation.SetUserCountOrder(i)
	return sdsac
}

// SetNillableUserCountOrder sets the "user_count_order" field if the given value is not nil.
func (sdsac *StatsDailyScenicAreaCreate) SetNillableUserCountOrder(i *int) *StatsDailyScenicAreaCreate {
	if i != nil {
		sdsac.SetUserCountOrder(*i)
	}
	return sdsac
}

// SetUserCountLoginorder sets the "user_count_loginorder" field.
func (sdsac *StatsDailyScenicAreaCreate) SetUserCountLoginorder(i int) *StatsDailyScenicAreaCreate {
	sdsac.mutation.SetUserCountLoginorder(i)
	return sdsac
}

// SetNillableUserCountLoginorder sets the "user_count_loginorder" field if the given value is not nil.
func (sdsac *StatsDailyScenicAreaCreate) SetNillableUserCountLoginorder(i *int) *StatsDailyScenicAreaCreate {
	if i != nil {
		sdsac.SetUserCountLoginorder(*i)
	}
	return sdsac
}

// SetOrderCountCreate sets the "order_count_create" field.
func (sdsac *StatsDailyScenicAreaCreate) SetOrderCountCreate(i int) *StatsDailyScenicAreaCreate {
	sdsac.mutation.SetOrderCountCreate(i)
	return sdsac
}

// SetNillableOrderCountCreate sets the "order_count_create" field if the given value is not nil.
func (sdsac *StatsDailyScenicAreaCreate) SetNillableOrderCountCreate(i *int) *StatsDailyScenicAreaCreate {
	if i != nil {
		sdsac.SetOrderCountCreate(*i)
	}
	return sdsac
}

// SetOrderCountFinish sets the "order_count_finish" field.
func (sdsac *StatsDailyScenicAreaCreate) SetOrderCountFinish(i int) *StatsDailyScenicAreaCreate {
	sdsac.mutation.SetOrderCountFinish(i)
	return sdsac
}

// SetNillableOrderCountFinish sets the "order_count_finish" field if the given value is not nil.
func (sdsac *StatsDailyScenicAreaCreate) SetNillableOrderCountFinish(i *int) *StatsDailyScenicAreaCreate {
	if i != nil {
		sdsac.SetOrderCountFinish(*i)
	}
	return sdsac
}

// SetOrderCountCancel sets the "order_count_cancel" field.
func (sdsac *StatsDailyScenicAreaCreate) SetOrderCountCancel(i int) *StatsDailyScenicAreaCreate {
	sdsac.mutation.SetOrderCountCancel(i)
	return sdsac
}

// SetNillableOrderCountCancel sets the "order_count_cancel" field if the given value is not nil.
func (sdsac *StatsDailyScenicAreaCreate) SetNillableOrderCountCancel(i *int) *StatsDailyScenicAreaCreate {
	if i != nil {
		sdsac.SetOrderCountCancel(*i)
	}
	return sdsac
}

// SetOrderAmount sets the "order_amount" field.
func (sdsac *StatsDailyScenicAreaCreate) SetOrderAmount(i int) *StatsDailyScenicAreaCreate {
	sdsac.mutation.SetOrderAmount(i)
	return sdsac
}

// SetNillableOrderAmount sets the "order_amount" field if the given value is not nil.
func (sdsac *StatsDailyScenicAreaCreate) SetNillableOrderAmount(i *int) *StatsDailyScenicAreaCreate {
	if i != nil {
		sdsac.SetOrderAmount(*i)
	}
	return sdsac
}

// SetOrderDuration sets the "order_duration" field.
func (sdsac *StatsDailyScenicAreaCreate) SetOrderDuration(i int) *StatsDailyScenicAreaCreate {
	sdsac.mutation.SetOrderDuration(i)
	return sdsac
}

// SetNillableOrderDuration sets the "order_duration" field if the given value is not nil.
func (sdsac *StatsDailyScenicAreaCreate) SetNillableOrderDuration(i *int) *StatsDailyScenicAreaCreate {
	if i != nil {
		sdsac.SetOrderDuration(*i)
	}
	return sdsac
}

// SetOrderMileage sets the "order_mileage" field.
func (sdsac *StatsDailyScenicAreaCreate) SetOrderMileage(i int) *StatsDailyScenicAreaCreate {
	sdsac.mutation.SetOrderMileage(i)
	return sdsac
}

// SetNillableOrderMileage sets the "order_mileage" field if the given value is not nil.
func (sdsac *StatsDailyScenicAreaCreate) SetNillableOrderMileage(i *int) *StatsDailyScenicAreaCreate {
	if i != nil {
		sdsac.SetOrderMileage(*i)
	}
	return sdsac
}

// SetCarCountDeploy sets the "car_count_deploy" field.
func (sdsac *StatsDailyScenicAreaCreate) SetCarCountDeploy(i int) *StatsDailyScenicAreaCreate {
	sdsac.mutation.SetCarCountDeploy(i)
	return sdsac
}

// SetNillableCarCountDeploy sets the "car_count_deploy" field if the given value is not nil.
func (sdsac *StatsDailyScenicAreaCreate) SetNillableCarCountDeploy(i *int) *StatsDailyScenicAreaCreate {
	if i != nil {
		sdsac.SetCarCountDeploy(*i)
	}
	return sdsac
}

// SetCarCountOperation sets the "car_count_operation" field.
func (sdsac *StatsDailyScenicAreaCreate) SetCarCountOperation(i int) *StatsDailyScenicAreaCreate {
	sdsac.mutation.SetCarCountOperation(i)
	return sdsac
}

// SetNillableCarCountOperation sets the "car_count_operation" field if the given value is not nil.
func (sdsac *StatsDailyScenicAreaCreate) SetNillableCarCountOperation(i *int) *StatsDailyScenicAreaCreate {
	if i != nil {
		sdsac.SetCarCountOperation(*i)
	}
	return sdsac
}

// SetCarOperationManualDuration sets the "car_operation_manual_duration" field.
func (sdsac *StatsDailyScenicAreaCreate) SetCarOperationManualDuration(f float32) *StatsDailyScenicAreaCreate {
	sdsac.mutation.SetCarOperationManualDuration(f)
	return sdsac
}

// SetNillableCarOperationManualDuration sets the "car_operation_manual_duration" field if the given value is not nil.
func (sdsac *StatsDailyScenicAreaCreate) SetNillableCarOperationManualDuration(f *float32) *StatsDailyScenicAreaCreate {
	if f != nil {
		sdsac.SetCarOperationManualDuration(*f)
	}
	return sdsac
}

// SetCarOperationAutoDuration sets the "car_operation_auto_duration" field.
func (sdsac *StatsDailyScenicAreaCreate) SetCarOperationAutoDuration(f float32) *StatsDailyScenicAreaCreate {
	sdsac.mutation.SetCarOperationAutoDuration(f)
	return sdsac
}

// SetNillableCarOperationAutoDuration sets the "car_operation_auto_duration" field if the given value is not nil.
func (sdsac *StatsDailyScenicAreaCreate) SetNillableCarOperationAutoDuration(f *float32) *StatsDailyScenicAreaCreate {
	if f != nil {
		sdsac.SetCarOperationAutoDuration(*f)
	}
	return sdsac
}

// SetCarOperationNormalDuration sets the "car_operation_normal_duration" field.
func (sdsac *StatsDailyScenicAreaCreate) SetCarOperationNormalDuration(f float32) *StatsDailyScenicAreaCreate {
	sdsac.mutation.SetCarOperationNormalDuration(f)
	return sdsac
}

// SetNillableCarOperationNormalDuration sets the "car_operation_normal_duration" field if the given value is not nil.
func (sdsac *StatsDailyScenicAreaCreate) SetNillableCarOperationNormalDuration(f *float32) *StatsDailyScenicAreaCreate {
	if f != nil {
		sdsac.SetCarOperationNormalDuration(*f)
	}
	return sdsac
}

// SetCarOperationFaultDuration sets the "car_operation_fault_duration" field.
func (sdsac *StatsDailyScenicAreaCreate) SetCarOperationFaultDuration(f float32) *StatsDailyScenicAreaCreate {
	sdsac.mutation.SetCarOperationFaultDuration(f)
	return sdsac
}

// SetNillableCarOperationFaultDuration sets the "car_operation_fault_duration" field if the given value is not nil.
func (sdsac *StatsDailyScenicAreaCreate) SetNillableCarOperationFaultDuration(f *float32) *StatsDailyScenicAreaCreate {
	if f != nil {
		sdsac.SetCarOperationFaultDuration(*f)
	}
	return sdsac
}

// SetCarOperationMileage sets the "car_operation_mileage" field.
func (sdsac *StatsDailyScenicAreaCreate) SetCarOperationMileage(f float32) *StatsDailyScenicAreaCreate {
	sdsac.mutation.SetCarOperationMileage(f)
	return sdsac
}

// SetNillableCarOperationMileage sets the "car_operation_mileage" field if the given value is not nil.
func (sdsac *StatsDailyScenicAreaCreate) SetNillableCarOperationMileage(f *float32) *StatsDailyScenicAreaCreate {
	if f != nil {
		sdsac.SetCarOperationMileage(*f)
	}
	return sdsac
}

// SetCarOperationFaultTimes sets the "car_operation_fault_times" field.
func (sdsac *StatsDailyScenicAreaCreate) SetCarOperationFaultTimes(u uint32) *StatsDailyScenicAreaCreate {
	sdsac.mutation.SetCarOperationFaultTimes(u)
	return sdsac
}

// SetNillableCarOperationFaultTimes sets the "car_operation_fault_times" field if the given value is not nil.
func (sdsac *StatsDailyScenicAreaCreate) SetNillableCarOperationFaultTimes(u *uint32) *StatsDailyScenicAreaCreate {
	if u != nil {
		sdsac.SetCarOperationFaultTimes(*u)
	}
	return sdsac
}

// SetCarMaintainManualDuration sets the "car_maintain_manual_duration" field.
func (sdsac *StatsDailyScenicAreaCreate) SetCarMaintainManualDuration(f float32) *StatsDailyScenicAreaCreate {
	sdsac.mutation.SetCarMaintainManualDuration(f)
	return sdsac
}

// SetNillableCarMaintainManualDuration sets the "car_maintain_manual_duration" field if the given value is not nil.
func (sdsac *StatsDailyScenicAreaCreate) SetNillableCarMaintainManualDuration(f *float32) *StatsDailyScenicAreaCreate {
	if f != nil {
		sdsac.SetCarMaintainManualDuration(*f)
	}
	return sdsac
}

// SetCarMaintainAutoDuration sets the "car_maintain_auto_duration" field.
func (sdsac *StatsDailyScenicAreaCreate) SetCarMaintainAutoDuration(f float32) *StatsDailyScenicAreaCreate {
	sdsac.mutation.SetCarMaintainAutoDuration(f)
	return sdsac
}

// SetNillableCarMaintainAutoDuration sets the "car_maintain_auto_duration" field if the given value is not nil.
func (sdsac *StatsDailyScenicAreaCreate) SetNillableCarMaintainAutoDuration(f *float32) *StatsDailyScenicAreaCreate {
	if f != nil {
		sdsac.SetCarMaintainAutoDuration(*f)
	}
	return sdsac
}

// SetCarMaintainNormalDuration sets the "car_maintain_normal_duration" field.
func (sdsac *StatsDailyScenicAreaCreate) SetCarMaintainNormalDuration(f float32) *StatsDailyScenicAreaCreate {
	sdsac.mutation.SetCarMaintainNormalDuration(f)
	return sdsac
}

// SetNillableCarMaintainNormalDuration sets the "car_maintain_normal_duration" field if the given value is not nil.
func (sdsac *StatsDailyScenicAreaCreate) SetNillableCarMaintainNormalDuration(f *float32) *StatsDailyScenicAreaCreate {
	if f != nil {
		sdsac.SetCarMaintainNormalDuration(*f)
	}
	return sdsac
}

// SetCarMaintainFaultDuration sets the "car_maintain_fault_duration" field.
func (sdsac *StatsDailyScenicAreaCreate) SetCarMaintainFaultDuration(f float32) *StatsDailyScenicAreaCreate {
	sdsac.mutation.SetCarMaintainFaultDuration(f)
	return sdsac
}

// SetNillableCarMaintainFaultDuration sets the "car_maintain_fault_duration" field if the given value is not nil.
func (sdsac *StatsDailyScenicAreaCreate) SetNillableCarMaintainFaultDuration(f *float32) *StatsDailyScenicAreaCreate {
	if f != nil {
		sdsac.SetCarMaintainFaultDuration(*f)
	}
	return sdsac
}

// SetCarMaintainMileage sets the "car_maintain_mileage" field.
func (sdsac *StatsDailyScenicAreaCreate) SetCarMaintainMileage(f float32) *StatsDailyScenicAreaCreate {
	sdsac.mutation.SetCarMaintainMileage(f)
	return sdsac
}

// SetNillableCarMaintainMileage sets the "car_maintain_mileage" field if the given value is not nil.
func (sdsac *StatsDailyScenicAreaCreate) SetNillableCarMaintainMileage(f *float32) *StatsDailyScenicAreaCreate {
	if f != nil {
		sdsac.SetCarMaintainMileage(*f)
	}
	return sdsac
}

// SetCarMaintainFaultTimes sets the "car_maintain_fault_times" field.
func (sdsac *StatsDailyScenicAreaCreate) SetCarMaintainFaultTimes(u uint32) *StatsDailyScenicAreaCreate {
	sdsac.mutation.SetCarMaintainFaultTimes(u)
	return sdsac
}

// SetNillableCarMaintainFaultTimes sets the "car_maintain_fault_times" field if the given value is not nil.
func (sdsac *StatsDailyScenicAreaCreate) SetNillableCarMaintainFaultTimes(u *uint32) *StatsDailyScenicAreaCreate {
	if u != nil {
		sdsac.SetCarMaintainFaultTimes(*u)
	}
	return sdsac
}

// SetCarAlarmTimes sets the "car_alarm_times" field.
func (sdsac *StatsDailyScenicAreaCreate) SetCarAlarmTimes(i int) *StatsDailyScenicAreaCreate {
	sdsac.mutation.SetCarAlarmTimes(i)
	return sdsac
}

// SetNillableCarAlarmTimes sets the "car_alarm_times" field if the given value is not nil.
func (sdsac *StatsDailyScenicAreaCreate) SetNillableCarAlarmTimes(i *int) *StatsDailyScenicAreaCreate {
	if i != nil {
		sdsac.SetCarAlarmTimes(*i)
	}
	return sdsac
}

// SetStatsTime sets the "stats_time" field.
func (sdsac *StatsDailyScenicAreaCreate) SetStatsTime(t time.Time) *StatsDailyScenicAreaCreate {
	sdsac.mutation.SetStatsTime(t)
	return sdsac
}

// SetCreateTime sets the "create_time" field.
func (sdsac *StatsDailyScenicAreaCreate) SetCreateTime(t time.Time) *StatsDailyScenicAreaCreate {
	sdsac.mutation.SetCreateTime(t)
	return sdsac
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (sdsac *StatsDailyScenicAreaCreate) SetNillableCreateTime(t *time.Time) *StatsDailyScenicAreaCreate {
	if t != nil {
		sdsac.SetCreateTime(*t)
	}
	return sdsac
}

// SetID sets the "id" field.
func (sdsac *StatsDailyScenicAreaCreate) SetID(i int) *StatsDailyScenicAreaCreate {
	sdsac.mutation.SetID(i)
	return sdsac
}

// Mutation returns the StatsDailyScenicAreaMutation object of the builder.
func (sdsac *StatsDailyScenicAreaCreate) Mutation() *StatsDailyScenicAreaMutation {
	return sdsac.mutation
}

// Save creates the StatsDailyScenicArea in the database.
func (sdsac *StatsDailyScenicAreaCreate) Save(ctx context.Context) (*StatsDailyScenicArea, error) {
	sdsac.defaults()
	return withHooks(ctx, sdsac.sqlSave, sdsac.mutation, sdsac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sdsac *StatsDailyScenicAreaCreate) SaveX(ctx context.Context) *StatsDailyScenicArea {
	v, err := sdsac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sdsac *StatsDailyScenicAreaCreate) Exec(ctx context.Context) error {
	_, err := sdsac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdsac *StatsDailyScenicAreaCreate) ExecX(ctx context.Context) {
	if err := sdsac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sdsac *StatsDailyScenicAreaCreate) defaults() {
	if _, ok := sdsac.mutation.UserCountLogin(); !ok {
		v := statsdailyscenicarea.DefaultUserCountLogin
		sdsac.mutation.SetUserCountLogin(v)
	}
	if _, ok := sdsac.mutation.UserCountRegister(); !ok {
		v := statsdailyscenicarea.DefaultUserCountRegister
		sdsac.mutation.SetUserCountRegister(v)
	}
	if _, ok := sdsac.mutation.UserCountOrder(); !ok {
		v := statsdailyscenicarea.DefaultUserCountOrder
		sdsac.mutation.SetUserCountOrder(v)
	}
	if _, ok := sdsac.mutation.UserCountLoginorder(); !ok {
		v := statsdailyscenicarea.DefaultUserCountLoginorder
		sdsac.mutation.SetUserCountLoginorder(v)
	}
	if _, ok := sdsac.mutation.OrderCountCreate(); !ok {
		v := statsdailyscenicarea.DefaultOrderCountCreate
		sdsac.mutation.SetOrderCountCreate(v)
	}
	if _, ok := sdsac.mutation.OrderCountFinish(); !ok {
		v := statsdailyscenicarea.DefaultOrderCountFinish
		sdsac.mutation.SetOrderCountFinish(v)
	}
	if _, ok := sdsac.mutation.OrderCountCancel(); !ok {
		v := statsdailyscenicarea.DefaultOrderCountCancel
		sdsac.mutation.SetOrderCountCancel(v)
	}
	if _, ok := sdsac.mutation.OrderAmount(); !ok {
		v := statsdailyscenicarea.DefaultOrderAmount
		sdsac.mutation.SetOrderAmount(v)
	}
	if _, ok := sdsac.mutation.OrderDuration(); !ok {
		v := statsdailyscenicarea.DefaultOrderDuration
		sdsac.mutation.SetOrderDuration(v)
	}
	if _, ok := sdsac.mutation.OrderMileage(); !ok {
		v := statsdailyscenicarea.DefaultOrderMileage
		sdsac.mutation.SetOrderMileage(v)
	}
	if _, ok := sdsac.mutation.CarCountDeploy(); !ok {
		v := statsdailyscenicarea.DefaultCarCountDeploy
		sdsac.mutation.SetCarCountDeploy(v)
	}
	if _, ok := sdsac.mutation.CarCountOperation(); !ok {
		v := statsdailyscenicarea.DefaultCarCountOperation
		sdsac.mutation.SetCarCountOperation(v)
	}
	if _, ok := sdsac.mutation.CarOperationManualDuration(); !ok {
		v := statsdailyscenicarea.DefaultCarOperationManualDuration
		sdsac.mutation.SetCarOperationManualDuration(v)
	}
	if _, ok := sdsac.mutation.CarOperationAutoDuration(); !ok {
		v := statsdailyscenicarea.DefaultCarOperationAutoDuration
		sdsac.mutation.SetCarOperationAutoDuration(v)
	}
	if _, ok := sdsac.mutation.CarOperationNormalDuration(); !ok {
		v := statsdailyscenicarea.DefaultCarOperationNormalDuration
		sdsac.mutation.SetCarOperationNormalDuration(v)
	}
	if _, ok := sdsac.mutation.CarOperationFaultDuration(); !ok {
		v := statsdailyscenicarea.DefaultCarOperationFaultDuration
		sdsac.mutation.SetCarOperationFaultDuration(v)
	}
	if _, ok := sdsac.mutation.CarOperationMileage(); !ok {
		v := statsdailyscenicarea.DefaultCarOperationMileage
		sdsac.mutation.SetCarOperationMileage(v)
	}
	if _, ok := sdsac.mutation.CarOperationFaultTimes(); !ok {
		v := statsdailyscenicarea.DefaultCarOperationFaultTimes
		sdsac.mutation.SetCarOperationFaultTimes(v)
	}
	if _, ok := sdsac.mutation.CarMaintainManualDuration(); !ok {
		v := statsdailyscenicarea.DefaultCarMaintainManualDuration
		sdsac.mutation.SetCarMaintainManualDuration(v)
	}
	if _, ok := sdsac.mutation.CarMaintainAutoDuration(); !ok {
		v := statsdailyscenicarea.DefaultCarMaintainAutoDuration
		sdsac.mutation.SetCarMaintainAutoDuration(v)
	}
	if _, ok := sdsac.mutation.CarMaintainNormalDuration(); !ok {
		v := statsdailyscenicarea.DefaultCarMaintainNormalDuration
		sdsac.mutation.SetCarMaintainNormalDuration(v)
	}
	if _, ok := sdsac.mutation.CarMaintainFaultDuration(); !ok {
		v := statsdailyscenicarea.DefaultCarMaintainFaultDuration
		sdsac.mutation.SetCarMaintainFaultDuration(v)
	}
	if _, ok := sdsac.mutation.CarMaintainMileage(); !ok {
		v := statsdailyscenicarea.DefaultCarMaintainMileage
		sdsac.mutation.SetCarMaintainMileage(v)
	}
	if _, ok := sdsac.mutation.CarMaintainFaultTimes(); !ok {
		v := statsdailyscenicarea.DefaultCarMaintainFaultTimes
		sdsac.mutation.SetCarMaintainFaultTimes(v)
	}
	if _, ok := sdsac.mutation.CarAlarmTimes(); !ok {
		v := statsdailyscenicarea.DefaultCarAlarmTimes
		sdsac.mutation.SetCarAlarmTimes(v)
	}
	if _, ok := sdsac.mutation.CreateTime(); !ok {
		v := statsdailyscenicarea.DefaultCreateTime()
		sdsac.mutation.SetCreateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sdsac *StatsDailyScenicAreaCreate) check() error {
	if _, ok := sdsac.mutation.ScenicAreaID(); !ok {
		return &ValidationError{Name: "scenic_area_id", err: errors.New(`ent: missing required field "StatsDailyScenicArea.scenic_area_id"`)}
	}
	if _, ok := sdsac.mutation.Y(); !ok {
		return &ValidationError{Name: "y", err: errors.New(`ent: missing required field "StatsDailyScenicArea.y"`)}
	}
	if _, ok := sdsac.mutation.M(); !ok {
		return &ValidationError{Name: "m", err: errors.New(`ent: missing required field "StatsDailyScenicArea.m"`)}
	}
	if _, ok := sdsac.mutation.D(); !ok {
		return &ValidationError{Name: "d", err: errors.New(`ent: missing required field "StatsDailyScenicArea.d"`)}
	}
	if _, ok := sdsac.mutation.Week(); !ok {
		return &ValidationError{Name: "week", err: errors.New(`ent: missing required field "StatsDailyScenicArea.week"`)}
	}
	if _, ok := sdsac.mutation.Weekday(); !ok {
		return &ValidationError{Name: "weekday", err: errors.New(`ent: missing required field "StatsDailyScenicArea.weekday"`)}
	}
	if _, ok := sdsac.mutation.Period(); !ok {
		return &ValidationError{Name: "period", err: errors.New(`ent: missing required field "StatsDailyScenicArea.period"`)}
	}
	if _, ok := sdsac.mutation.UserCountLogin(); !ok {
		return &ValidationError{Name: "user_count_login", err: errors.New(`ent: missing required field "StatsDailyScenicArea.user_count_login"`)}
	}
	if _, ok := sdsac.mutation.UserCountRegister(); !ok {
		return &ValidationError{Name: "user_count_register", err: errors.New(`ent: missing required field "StatsDailyScenicArea.user_count_register"`)}
	}
	if _, ok := sdsac.mutation.UserCountOrder(); !ok {
		return &ValidationError{Name: "user_count_order", err: errors.New(`ent: missing required field "StatsDailyScenicArea.user_count_order"`)}
	}
	if _, ok := sdsac.mutation.UserCountLoginorder(); !ok {
		return &ValidationError{Name: "user_count_loginorder", err: errors.New(`ent: missing required field "StatsDailyScenicArea.user_count_loginorder"`)}
	}
	if _, ok := sdsac.mutation.OrderCountCreate(); !ok {
		return &ValidationError{Name: "order_count_create", err: errors.New(`ent: missing required field "StatsDailyScenicArea.order_count_create"`)}
	}
	if _, ok := sdsac.mutation.OrderCountFinish(); !ok {
		return &ValidationError{Name: "order_count_finish", err: errors.New(`ent: missing required field "StatsDailyScenicArea.order_count_finish"`)}
	}
	if _, ok := sdsac.mutation.OrderCountCancel(); !ok {
		return &ValidationError{Name: "order_count_cancel", err: errors.New(`ent: missing required field "StatsDailyScenicArea.order_count_cancel"`)}
	}
	if _, ok := sdsac.mutation.OrderAmount(); !ok {
		return &ValidationError{Name: "order_amount", err: errors.New(`ent: missing required field "StatsDailyScenicArea.order_amount"`)}
	}
	if _, ok := sdsac.mutation.OrderDuration(); !ok {
		return &ValidationError{Name: "order_duration", err: errors.New(`ent: missing required field "StatsDailyScenicArea.order_duration"`)}
	}
	if _, ok := sdsac.mutation.OrderMileage(); !ok {
		return &ValidationError{Name: "order_mileage", err: errors.New(`ent: missing required field "StatsDailyScenicArea.order_mileage"`)}
	}
	if _, ok := sdsac.mutation.CarCountDeploy(); !ok {
		return &ValidationError{Name: "car_count_deploy", err: errors.New(`ent: missing required field "StatsDailyScenicArea.car_count_deploy"`)}
	}
	if _, ok := sdsac.mutation.CarCountOperation(); !ok {
		return &ValidationError{Name: "car_count_operation", err: errors.New(`ent: missing required field "StatsDailyScenicArea.car_count_operation"`)}
	}
	if _, ok := sdsac.mutation.CarOperationManualDuration(); !ok {
		return &ValidationError{Name: "car_operation_manual_duration", err: errors.New(`ent: missing required field "StatsDailyScenicArea.car_operation_manual_duration"`)}
	}
	if _, ok := sdsac.mutation.CarOperationAutoDuration(); !ok {
		return &ValidationError{Name: "car_operation_auto_duration", err: errors.New(`ent: missing required field "StatsDailyScenicArea.car_operation_auto_duration"`)}
	}
	if _, ok := sdsac.mutation.CarOperationNormalDuration(); !ok {
		return &ValidationError{Name: "car_operation_normal_duration", err: errors.New(`ent: missing required field "StatsDailyScenicArea.car_operation_normal_duration"`)}
	}
	if _, ok := sdsac.mutation.CarOperationFaultDuration(); !ok {
		return &ValidationError{Name: "car_operation_fault_duration", err: errors.New(`ent: missing required field "StatsDailyScenicArea.car_operation_fault_duration"`)}
	}
	if _, ok := sdsac.mutation.CarOperationMileage(); !ok {
		return &ValidationError{Name: "car_operation_mileage", err: errors.New(`ent: missing required field "StatsDailyScenicArea.car_operation_mileage"`)}
	}
	if _, ok := sdsac.mutation.CarOperationFaultTimes(); !ok {
		return &ValidationError{Name: "car_operation_fault_times", err: errors.New(`ent: missing required field "StatsDailyScenicArea.car_operation_fault_times"`)}
	}
	if _, ok := sdsac.mutation.CarMaintainManualDuration(); !ok {
		return &ValidationError{Name: "car_maintain_manual_duration", err: errors.New(`ent: missing required field "StatsDailyScenicArea.car_maintain_manual_duration"`)}
	}
	if _, ok := sdsac.mutation.CarMaintainAutoDuration(); !ok {
		return &ValidationError{Name: "car_maintain_auto_duration", err: errors.New(`ent: missing required field "StatsDailyScenicArea.car_maintain_auto_duration"`)}
	}
	if _, ok := sdsac.mutation.CarMaintainNormalDuration(); !ok {
		return &ValidationError{Name: "car_maintain_normal_duration", err: errors.New(`ent: missing required field "StatsDailyScenicArea.car_maintain_normal_duration"`)}
	}
	if _, ok := sdsac.mutation.CarMaintainFaultDuration(); !ok {
		return &ValidationError{Name: "car_maintain_fault_duration", err: errors.New(`ent: missing required field "StatsDailyScenicArea.car_maintain_fault_duration"`)}
	}
	if _, ok := sdsac.mutation.CarMaintainMileage(); !ok {
		return &ValidationError{Name: "car_maintain_mileage", err: errors.New(`ent: missing required field "StatsDailyScenicArea.car_maintain_mileage"`)}
	}
	if _, ok := sdsac.mutation.CarMaintainFaultTimes(); !ok {
		return &ValidationError{Name: "car_maintain_fault_times", err: errors.New(`ent: missing required field "StatsDailyScenicArea.car_maintain_fault_times"`)}
	}
	if _, ok := sdsac.mutation.CarAlarmTimes(); !ok {
		return &ValidationError{Name: "car_alarm_times", err: errors.New(`ent: missing required field "StatsDailyScenicArea.car_alarm_times"`)}
	}
	if _, ok := sdsac.mutation.StatsTime(); !ok {
		return &ValidationError{Name: "stats_time", err: errors.New(`ent: missing required field "StatsDailyScenicArea.stats_time"`)}
	}
	if _, ok := sdsac.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "StatsDailyScenicArea.create_time"`)}
	}
	return nil
}

func (sdsac *StatsDailyScenicAreaCreate) sqlSave(ctx context.Context) (*StatsDailyScenicArea, error) {
	if err := sdsac.check(); err != nil {
		return nil, err
	}
	_node, _spec := sdsac.createSpec()
	if err := sqlgraph.CreateNode(ctx, sdsac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	sdsac.mutation.id = &_node.ID
	sdsac.mutation.done = true
	return _node, nil
}

func (sdsac *StatsDailyScenicAreaCreate) createSpec() (*StatsDailyScenicArea, *sqlgraph.CreateSpec) {
	var (
		_node = &StatsDailyScenicArea{config: sdsac.config}
		_spec = sqlgraph.NewCreateSpec(statsdailyscenicarea.Table, sqlgraph.NewFieldSpec(statsdailyscenicarea.FieldID, field.TypeInt))
	)
	if id, ok := sdsac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sdsac.mutation.ScenicAreaID(); ok {
		_spec.SetField(statsdailyscenicarea.FieldScenicAreaID, field.TypeInt, value)
		_node.ScenicAreaID = value
	}
	if value, ok := sdsac.mutation.Y(); ok {
		_spec.SetField(statsdailyscenicarea.FieldY, field.TypeInt, value)
		_node.Y = value
	}
	if value, ok := sdsac.mutation.M(); ok {
		_spec.SetField(statsdailyscenicarea.FieldM, field.TypeInt, value)
		_node.M = value
	}
	if value, ok := sdsac.mutation.D(); ok {
		_spec.SetField(statsdailyscenicarea.FieldD, field.TypeInt, value)
		_node.D = value
	}
	if value, ok := sdsac.mutation.Week(); ok {
		_spec.SetField(statsdailyscenicarea.FieldWeek, field.TypeInt, value)
		_node.Week = value
	}
	if value, ok := sdsac.mutation.Weekday(); ok {
		_spec.SetField(statsdailyscenicarea.FieldWeekday, field.TypeInt, value)
		_node.Weekday = value
	}
	if value, ok := sdsac.mutation.Period(); ok {
		_spec.SetField(statsdailyscenicarea.FieldPeriod, field.TypeInt, value)
		_node.Period = value
	}
	if value, ok := sdsac.mutation.UserCountLogin(); ok {
		_spec.SetField(statsdailyscenicarea.FieldUserCountLogin, field.TypeInt, value)
		_node.UserCountLogin = value
	}
	if value, ok := sdsac.mutation.UserCountRegister(); ok {
		_spec.SetField(statsdailyscenicarea.FieldUserCountRegister, field.TypeInt, value)
		_node.UserCountRegister = value
	}
	if value, ok := sdsac.mutation.UserCountOrder(); ok {
		_spec.SetField(statsdailyscenicarea.FieldUserCountOrder, field.TypeInt, value)
		_node.UserCountOrder = value
	}
	if value, ok := sdsac.mutation.UserCountLoginorder(); ok {
		_spec.SetField(statsdailyscenicarea.FieldUserCountLoginorder, field.TypeInt, value)
		_node.UserCountLoginorder = value
	}
	if value, ok := sdsac.mutation.OrderCountCreate(); ok {
		_spec.SetField(statsdailyscenicarea.FieldOrderCountCreate, field.TypeInt, value)
		_node.OrderCountCreate = value
	}
	if value, ok := sdsac.mutation.OrderCountFinish(); ok {
		_spec.SetField(statsdailyscenicarea.FieldOrderCountFinish, field.TypeInt, value)
		_node.OrderCountFinish = value
	}
	if value, ok := sdsac.mutation.OrderCountCancel(); ok {
		_spec.SetField(statsdailyscenicarea.FieldOrderCountCancel, field.TypeInt, value)
		_node.OrderCountCancel = value
	}
	if value, ok := sdsac.mutation.OrderAmount(); ok {
		_spec.SetField(statsdailyscenicarea.FieldOrderAmount, field.TypeInt, value)
		_node.OrderAmount = value
	}
	if value, ok := sdsac.mutation.OrderDuration(); ok {
		_spec.SetField(statsdailyscenicarea.FieldOrderDuration, field.TypeInt, value)
		_node.OrderDuration = value
	}
	if value, ok := sdsac.mutation.OrderMileage(); ok {
		_spec.SetField(statsdailyscenicarea.FieldOrderMileage, field.TypeInt, value)
		_node.OrderMileage = value
	}
	if value, ok := sdsac.mutation.CarCountDeploy(); ok {
		_spec.SetField(statsdailyscenicarea.FieldCarCountDeploy, field.TypeInt, value)
		_node.CarCountDeploy = value
	}
	if value, ok := sdsac.mutation.CarCountOperation(); ok {
		_spec.SetField(statsdailyscenicarea.FieldCarCountOperation, field.TypeInt, value)
		_node.CarCountOperation = value
	}
	if value, ok := sdsac.mutation.CarOperationManualDuration(); ok {
		_spec.SetField(statsdailyscenicarea.FieldCarOperationManualDuration, field.TypeFloat32, value)
		_node.CarOperationManualDuration = value
	}
	if value, ok := sdsac.mutation.CarOperationAutoDuration(); ok {
		_spec.SetField(statsdailyscenicarea.FieldCarOperationAutoDuration, field.TypeFloat32, value)
		_node.CarOperationAutoDuration = value
	}
	if value, ok := sdsac.mutation.CarOperationNormalDuration(); ok {
		_spec.SetField(statsdailyscenicarea.FieldCarOperationNormalDuration, field.TypeFloat32, value)
		_node.CarOperationNormalDuration = value
	}
	if value, ok := sdsac.mutation.CarOperationFaultDuration(); ok {
		_spec.SetField(statsdailyscenicarea.FieldCarOperationFaultDuration, field.TypeFloat32, value)
		_node.CarOperationFaultDuration = value
	}
	if value, ok := sdsac.mutation.CarOperationMileage(); ok {
		_spec.SetField(statsdailyscenicarea.FieldCarOperationMileage, field.TypeFloat32, value)
		_node.CarOperationMileage = value
	}
	if value, ok := sdsac.mutation.CarOperationFaultTimes(); ok {
		_spec.SetField(statsdailyscenicarea.FieldCarOperationFaultTimes, field.TypeUint32, value)
		_node.CarOperationFaultTimes = value
	}
	if value, ok := sdsac.mutation.CarMaintainManualDuration(); ok {
		_spec.SetField(statsdailyscenicarea.FieldCarMaintainManualDuration, field.TypeFloat32, value)
		_node.CarMaintainManualDuration = value
	}
	if value, ok := sdsac.mutation.CarMaintainAutoDuration(); ok {
		_spec.SetField(statsdailyscenicarea.FieldCarMaintainAutoDuration, field.TypeFloat32, value)
		_node.CarMaintainAutoDuration = value
	}
	if value, ok := sdsac.mutation.CarMaintainNormalDuration(); ok {
		_spec.SetField(statsdailyscenicarea.FieldCarMaintainNormalDuration, field.TypeFloat32, value)
		_node.CarMaintainNormalDuration = value
	}
	if value, ok := sdsac.mutation.CarMaintainFaultDuration(); ok {
		_spec.SetField(statsdailyscenicarea.FieldCarMaintainFaultDuration, field.TypeFloat32, value)
		_node.CarMaintainFaultDuration = value
	}
	if value, ok := sdsac.mutation.CarMaintainMileage(); ok {
		_spec.SetField(statsdailyscenicarea.FieldCarMaintainMileage, field.TypeFloat32, value)
		_node.CarMaintainMileage = value
	}
	if value, ok := sdsac.mutation.CarMaintainFaultTimes(); ok {
		_spec.SetField(statsdailyscenicarea.FieldCarMaintainFaultTimes, field.TypeUint32, value)
		_node.CarMaintainFaultTimes = value
	}
	if value, ok := sdsac.mutation.CarAlarmTimes(); ok {
		_spec.SetField(statsdailyscenicarea.FieldCarAlarmTimes, field.TypeInt, value)
		_node.CarAlarmTimes = value
	}
	if value, ok := sdsac.mutation.StatsTime(); ok {
		_spec.SetField(statsdailyscenicarea.FieldStatsTime, field.TypeTime, value)
		_node.StatsTime = value
	}
	if value, ok := sdsac.mutation.CreateTime(); ok {
		_spec.SetField(statsdailyscenicarea.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	return _node, _spec
}

// StatsDailyScenicAreaCreateBulk is the builder for creating many StatsDailyScenicArea entities in bulk.
type StatsDailyScenicAreaCreateBulk struct {
	config
	err      error
	builders []*StatsDailyScenicAreaCreate
}

// Save creates the StatsDailyScenicArea entities in the database.
func (sdsacb *StatsDailyScenicAreaCreateBulk) Save(ctx context.Context) ([]*StatsDailyScenicArea, error) {
	if sdsacb.err != nil {
		return nil, sdsacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sdsacb.builders))
	nodes := make([]*StatsDailyScenicArea, len(sdsacb.builders))
	mutators := make([]Mutator, len(sdsacb.builders))
	for i := range sdsacb.builders {
		func(i int, root context.Context) {
			builder := sdsacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StatsDailyScenicAreaMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sdsacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sdsacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sdsacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sdsacb *StatsDailyScenicAreaCreateBulk) SaveX(ctx context.Context) []*StatsDailyScenicArea {
	v, err := sdsacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sdsacb *StatsDailyScenicAreaCreateBulk) Exec(ctx context.Context) error {
	_, err := sdsacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdsacb *StatsDailyScenicAreaCreateBulk) ExecX(ctx context.Context) {
	if err := sdsacb.Exec(ctx); err != nil {
		panic(err)
	}
}
