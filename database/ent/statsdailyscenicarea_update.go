// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"github.com/jianbo-zh/jydata/database/ent/statsdailyscenicarea"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StatsDailyScenicAreaUpdate is the builder for updating StatsDailyScenicArea entities.
type StatsDailyScenicAreaUpdate struct {
	config
	hooks    []Hook
	mutation *StatsDailyScenicAreaMutation
}

// Where appends a list predicates to the StatsDailyScenicAreaUpdate builder.
func (sdsau *StatsDailyScenicAreaUpdate) Where(ps ...predicate.StatsDailyScenicArea) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.Where(ps...)
	return sdsau
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (sdsau *StatsDailyScenicAreaUpdate) SetScenicAreaID(i int) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.ResetScenicAreaID()
	sdsau.mutation.SetScenicAreaID(i)
	return sdsau
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (sdsau *StatsDailyScenicAreaUpdate) SetNillableScenicAreaID(i *int) *StatsDailyScenicAreaUpdate {
	if i != nil {
		sdsau.SetScenicAreaID(*i)
	}
	return sdsau
}

// AddScenicAreaID adds i to the "scenic_area_id" field.
func (sdsau *StatsDailyScenicAreaUpdate) AddScenicAreaID(i int) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.AddScenicAreaID(i)
	return sdsau
}

// SetY sets the "y" field.
func (sdsau *StatsDailyScenicAreaUpdate) SetY(i int) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.ResetY()
	sdsau.mutation.SetY(i)
	return sdsau
}

// SetNillableY sets the "y" field if the given value is not nil.
func (sdsau *StatsDailyScenicAreaUpdate) SetNillableY(i *int) *StatsDailyScenicAreaUpdate {
	if i != nil {
		sdsau.SetY(*i)
	}
	return sdsau
}

// AddY adds i to the "y" field.
func (sdsau *StatsDailyScenicAreaUpdate) AddY(i int) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.AddY(i)
	return sdsau
}

// SetM sets the "m" field.
func (sdsau *StatsDailyScenicAreaUpdate) SetM(i int) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.ResetM()
	sdsau.mutation.SetM(i)
	return sdsau
}

// SetNillableM sets the "m" field if the given value is not nil.
func (sdsau *StatsDailyScenicAreaUpdate) SetNillableM(i *int) *StatsDailyScenicAreaUpdate {
	if i != nil {
		sdsau.SetM(*i)
	}
	return sdsau
}

// AddM adds i to the "m" field.
func (sdsau *StatsDailyScenicAreaUpdate) AddM(i int) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.AddM(i)
	return sdsau
}

// SetD sets the "d" field.
func (sdsau *StatsDailyScenicAreaUpdate) SetD(i int) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.ResetD()
	sdsau.mutation.SetD(i)
	return sdsau
}

// SetNillableD sets the "d" field if the given value is not nil.
func (sdsau *StatsDailyScenicAreaUpdate) SetNillableD(i *int) *StatsDailyScenicAreaUpdate {
	if i != nil {
		sdsau.SetD(*i)
	}
	return sdsau
}

// AddD adds i to the "d" field.
func (sdsau *StatsDailyScenicAreaUpdate) AddD(i int) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.AddD(i)
	return sdsau
}

// SetWeek sets the "week" field.
func (sdsau *StatsDailyScenicAreaUpdate) SetWeek(i int) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.ResetWeek()
	sdsau.mutation.SetWeek(i)
	return sdsau
}

// SetNillableWeek sets the "week" field if the given value is not nil.
func (sdsau *StatsDailyScenicAreaUpdate) SetNillableWeek(i *int) *StatsDailyScenicAreaUpdate {
	if i != nil {
		sdsau.SetWeek(*i)
	}
	return sdsau
}

// AddWeek adds i to the "week" field.
func (sdsau *StatsDailyScenicAreaUpdate) AddWeek(i int) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.AddWeek(i)
	return sdsau
}

// SetWeekday sets the "weekday" field.
func (sdsau *StatsDailyScenicAreaUpdate) SetWeekday(i int) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.ResetWeekday()
	sdsau.mutation.SetWeekday(i)
	return sdsau
}

// SetNillableWeekday sets the "weekday" field if the given value is not nil.
func (sdsau *StatsDailyScenicAreaUpdate) SetNillableWeekday(i *int) *StatsDailyScenicAreaUpdate {
	if i != nil {
		sdsau.SetWeekday(*i)
	}
	return sdsau
}

// AddWeekday adds i to the "weekday" field.
func (sdsau *StatsDailyScenicAreaUpdate) AddWeekday(i int) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.AddWeekday(i)
	return sdsau
}

// SetPeriod sets the "period" field.
func (sdsau *StatsDailyScenicAreaUpdate) SetPeriod(i int) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.ResetPeriod()
	sdsau.mutation.SetPeriod(i)
	return sdsau
}

// SetNillablePeriod sets the "period" field if the given value is not nil.
func (sdsau *StatsDailyScenicAreaUpdate) SetNillablePeriod(i *int) *StatsDailyScenicAreaUpdate {
	if i != nil {
		sdsau.SetPeriod(*i)
	}
	return sdsau
}

// AddPeriod adds i to the "period" field.
func (sdsau *StatsDailyScenicAreaUpdate) AddPeriod(i int) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.AddPeriod(i)
	return sdsau
}

// SetUserCountLogin sets the "user_count_login" field.
func (sdsau *StatsDailyScenicAreaUpdate) SetUserCountLogin(i int) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.ResetUserCountLogin()
	sdsau.mutation.SetUserCountLogin(i)
	return sdsau
}

// SetNillableUserCountLogin sets the "user_count_login" field if the given value is not nil.
func (sdsau *StatsDailyScenicAreaUpdate) SetNillableUserCountLogin(i *int) *StatsDailyScenicAreaUpdate {
	if i != nil {
		sdsau.SetUserCountLogin(*i)
	}
	return sdsau
}

// AddUserCountLogin adds i to the "user_count_login" field.
func (sdsau *StatsDailyScenicAreaUpdate) AddUserCountLogin(i int) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.AddUserCountLogin(i)
	return sdsau
}

// SetUserCountRegister sets the "user_count_register" field.
func (sdsau *StatsDailyScenicAreaUpdate) SetUserCountRegister(i int) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.ResetUserCountRegister()
	sdsau.mutation.SetUserCountRegister(i)
	return sdsau
}

// SetNillableUserCountRegister sets the "user_count_register" field if the given value is not nil.
func (sdsau *StatsDailyScenicAreaUpdate) SetNillableUserCountRegister(i *int) *StatsDailyScenicAreaUpdate {
	if i != nil {
		sdsau.SetUserCountRegister(*i)
	}
	return sdsau
}

// AddUserCountRegister adds i to the "user_count_register" field.
func (sdsau *StatsDailyScenicAreaUpdate) AddUserCountRegister(i int) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.AddUserCountRegister(i)
	return sdsau
}

// SetUserCountOrder sets the "user_count_order" field.
func (sdsau *StatsDailyScenicAreaUpdate) SetUserCountOrder(i int) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.ResetUserCountOrder()
	sdsau.mutation.SetUserCountOrder(i)
	return sdsau
}

// SetNillableUserCountOrder sets the "user_count_order" field if the given value is not nil.
func (sdsau *StatsDailyScenicAreaUpdate) SetNillableUserCountOrder(i *int) *StatsDailyScenicAreaUpdate {
	if i != nil {
		sdsau.SetUserCountOrder(*i)
	}
	return sdsau
}

// AddUserCountOrder adds i to the "user_count_order" field.
func (sdsau *StatsDailyScenicAreaUpdate) AddUserCountOrder(i int) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.AddUserCountOrder(i)
	return sdsau
}

// SetUserCountLoginorder sets the "user_count_loginorder" field.
func (sdsau *StatsDailyScenicAreaUpdate) SetUserCountLoginorder(i int) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.ResetUserCountLoginorder()
	sdsau.mutation.SetUserCountLoginorder(i)
	return sdsau
}

// SetNillableUserCountLoginorder sets the "user_count_loginorder" field if the given value is not nil.
func (sdsau *StatsDailyScenicAreaUpdate) SetNillableUserCountLoginorder(i *int) *StatsDailyScenicAreaUpdate {
	if i != nil {
		sdsau.SetUserCountLoginorder(*i)
	}
	return sdsau
}

// AddUserCountLoginorder adds i to the "user_count_loginorder" field.
func (sdsau *StatsDailyScenicAreaUpdate) AddUserCountLoginorder(i int) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.AddUserCountLoginorder(i)
	return sdsau
}

// SetOrderCountCreate sets the "order_count_create" field.
func (sdsau *StatsDailyScenicAreaUpdate) SetOrderCountCreate(i int) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.ResetOrderCountCreate()
	sdsau.mutation.SetOrderCountCreate(i)
	return sdsau
}

// SetNillableOrderCountCreate sets the "order_count_create" field if the given value is not nil.
func (sdsau *StatsDailyScenicAreaUpdate) SetNillableOrderCountCreate(i *int) *StatsDailyScenicAreaUpdate {
	if i != nil {
		sdsau.SetOrderCountCreate(*i)
	}
	return sdsau
}

// AddOrderCountCreate adds i to the "order_count_create" field.
func (sdsau *StatsDailyScenicAreaUpdate) AddOrderCountCreate(i int) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.AddOrderCountCreate(i)
	return sdsau
}

// SetOrderCountFinish sets the "order_count_finish" field.
func (sdsau *StatsDailyScenicAreaUpdate) SetOrderCountFinish(i int) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.ResetOrderCountFinish()
	sdsau.mutation.SetOrderCountFinish(i)
	return sdsau
}

// SetNillableOrderCountFinish sets the "order_count_finish" field if the given value is not nil.
func (sdsau *StatsDailyScenicAreaUpdate) SetNillableOrderCountFinish(i *int) *StatsDailyScenicAreaUpdate {
	if i != nil {
		sdsau.SetOrderCountFinish(*i)
	}
	return sdsau
}

// AddOrderCountFinish adds i to the "order_count_finish" field.
func (sdsau *StatsDailyScenicAreaUpdate) AddOrderCountFinish(i int) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.AddOrderCountFinish(i)
	return sdsau
}

// SetOrderCountCancel sets the "order_count_cancel" field.
func (sdsau *StatsDailyScenicAreaUpdate) SetOrderCountCancel(i int) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.ResetOrderCountCancel()
	sdsau.mutation.SetOrderCountCancel(i)
	return sdsau
}

// SetNillableOrderCountCancel sets the "order_count_cancel" field if the given value is not nil.
func (sdsau *StatsDailyScenicAreaUpdate) SetNillableOrderCountCancel(i *int) *StatsDailyScenicAreaUpdate {
	if i != nil {
		sdsau.SetOrderCountCancel(*i)
	}
	return sdsau
}

// AddOrderCountCancel adds i to the "order_count_cancel" field.
func (sdsau *StatsDailyScenicAreaUpdate) AddOrderCountCancel(i int) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.AddOrderCountCancel(i)
	return sdsau
}

// SetOrderAmount sets the "order_amount" field.
func (sdsau *StatsDailyScenicAreaUpdate) SetOrderAmount(i int) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.ResetOrderAmount()
	sdsau.mutation.SetOrderAmount(i)
	return sdsau
}

// SetNillableOrderAmount sets the "order_amount" field if the given value is not nil.
func (sdsau *StatsDailyScenicAreaUpdate) SetNillableOrderAmount(i *int) *StatsDailyScenicAreaUpdate {
	if i != nil {
		sdsau.SetOrderAmount(*i)
	}
	return sdsau
}

// AddOrderAmount adds i to the "order_amount" field.
func (sdsau *StatsDailyScenicAreaUpdate) AddOrderAmount(i int) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.AddOrderAmount(i)
	return sdsau
}

// SetOrderDuration sets the "order_duration" field.
func (sdsau *StatsDailyScenicAreaUpdate) SetOrderDuration(i int) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.ResetOrderDuration()
	sdsau.mutation.SetOrderDuration(i)
	return sdsau
}

// SetNillableOrderDuration sets the "order_duration" field if the given value is not nil.
func (sdsau *StatsDailyScenicAreaUpdate) SetNillableOrderDuration(i *int) *StatsDailyScenicAreaUpdate {
	if i != nil {
		sdsau.SetOrderDuration(*i)
	}
	return sdsau
}

// AddOrderDuration adds i to the "order_duration" field.
func (sdsau *StatsDailyScenicAreaUpdate) AddOrderDuration(i int) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.AddOrderDuration(i)
	return sdsau
}

// SetOrderMileage sets the "order_mileage" field.
func (sdsau *StatsDailyScenicAreaUpdate) SetOrderMileage(i int) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.ResetOrderMileage()
	sdsau.mutation.SetOrderMileage(i)
	return sdsau
}

// SetNillableOrderMileage sets the "order_mileage" field if the given value is not nil.
func (sdsau *StatsDailyScenicAreaUpdate) SetNillableOrderMileage(i *int) *StatsDailyScenicAreaUpdate {
	if i != nil {
		sdsau.SetOrderMileage(*i)
	}
	return sdsau
}

// AddOrderMileage adds i to the "order_mileage" field.
func (sdsau *StatsDailyScenicAreaUpdate) AddOrderMileage(i int) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.AddOrderMileage(i)
	return sdsau
}

// SetCarCountDeploy sets the "car_count_deploy" field.
func (sdsau *StatsDailyScenicAreaUpdate) SetCarCountDeploy(i int) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.ResetCarCountDeploy()
	sdsau.mutation.SetCarCountDeploy(i)
	return sdsau
}

// SetNillableCarCountDeploy sets the "car_count_deploy" field if the given value is not nil.
func (sdsau *StatsDailyScenicAreaUpdate) SetNillableCarCountDeploy(i *int) *StatsDailyScenicAreaUpdate {
	if i != nil {
		sdsau.SetCarCountDeploy(*i)
	}
	return sdsau
}

// AddCarCountDeploy adds i to the "car_count_deploy" field.
func (sdsau *StatsDailyScenicAreaUpdate) AddCarCountDeploy(i int) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.AddCarCountDeploy(i)
	return sdsau
}

// SetCarCountOperation sets the "car_count_operation" field.
func (sdsau *StatsDailyScenicAreaUpdate) SetCarCountOperation(i int) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.ResetCarCountOperation()
	sdsau.mutation.SetCarCountOperation(i)
	return sdsau
}

// SetNillableCarCountOperation sets the "car_count_operation" field if the given value is not nil.
func (sdsau *StatsDailyScenicAreaUpdate) SetNillableCarCountOperation(i *int) *StatsDailyScenicAreaUpdate {
	if i != nil {
		sdsau.SetCarCountOperation(*i)
	}
	return sdsau
}

// AddCarCountOperation adds i to the "car_count_operation" field.
func (sdsau *StatsDailyScenicAreaUpdate) AddCarCountOperation(i int) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.AddCarCountOperation(i)
	return sdsau
}

// SetCarOperationManualDuration sets the "car_operation_manual_duration" field.
func (sdsau *StatsDailyScenicAreaUpdate) SetCarOperationManualDuration(f float32) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.ResetCarOperationManualDuration()
	sdsau.mutation.SetCarOperationManualDuration(f)
	return sdsau
}

// SetNillableCarOperationManualDuration sets the "car_operation_manual_duration" field if the given value is not nil.
func (sdsau *StatsDailyScenicAreaUpdate) SetNillableCarOperationManualDuration(f *float32) *StatsDailyScenicAreaUpdate {
	if f != nil {
		sdsau.SetCarOperationManualDuration(*f)
	}
	return sdsau
}

// AddCarOperationManualDuration adds f to the "car_operation_manual_duration" field.
func (sdsau *StatsDailyScenicAreaUpdate) AddCarOperationManualDuration(f float32) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.AddCarOperationManualDuration(f)
	return sdsau
}

// SetCarOperationAutoDuration sets the "car_operation_auto_duration" field.
func (sdsau *StatsDailyScenicAreaUpdate) SetCarOperationAutoDuration(f float32) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.ResetCarOperationAutoDuration()
	sdsau.mutation.SetCarOperationAutoDuration(f)
	return sdsau
}

// SetNillableCarOperationAutoDuration sets the "car_operation_auto_duration" field if the given value is not nil.
func (sdsau *StatsDailyScenicAreaUpdate) SetNillableCarOperationAutoDuration(f *float32) *StatsDailyScenicAreaUpdate {
	if f != nil {
		sdsau.SetCarOperationAutoDuration(*f)
	}
	return sdsau
}

// AddCarOperationAutoDuration adds f to the "car_operation_auto_duration" field.
func (sdsau *StatsDailyScenicAreaUpdate) AddCarOperationAutoDuration(f float32) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.AddCarOperationAutoDuration(f)
	return sdsau
}

// SetCarOperationNormalDuration sets the "car_operation_normal_duration" field.
func (sdsau *StatsDailyScenicAreaUpdate) SetCarOperationNormalDuration(f float32) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.ResetCarOperationNormalDuration()
	sdsau.mutation.SetCarOperationNormalDuration(f)
	return sdsau
}

// SetNillableCarOperationNormalDuration sets the "car_operation_normal_duration" field if the given value is not nil.
func (sdsau *StatsDailyScenicAreaUpdate) SetNillableCarOperationNormalDuration(f *float32) *StatsDailyScenicAreaUpdate {
	if f != nil {
		sdsau.SetCarOperationNormalDuration(*f)
	}
	return sdsau
}

// AddCarOperationNormalDuration adds f to the "car_operation_normal_duration" field.
func (sdsau *StatsDailyScenicAreaUpdate) AddCarOperationNormalDuration(f float32) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.AddCarOperationNormalDuration(f)
	return sdsau
}

// SetCarOperationFaultDuration sets the "car_operation_fault_duration" field.
func (sdsau *StatsDailyScenicAreaUpdate) SetCarOperationFaultDuration(f float32) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.ResetCarOperationFaultDuration()
	sdsau.mutation.SetCarOperationFaultDuration(f)
	return sdsau
}

// SetNillableCarOperationFaultDuration sets the "car_operation_fault_duration" field if the given value is not nil.
func (sdsau *StatsDailyScenicAreaUpdate) SetNillableCarOperationFaultDuration(f *float32) *StatsDailyScenicAreaUpdate {
	if f != nil {
		sdsau.SetCarOperationFaultDuration(*f)
	}
	return sdsau
}

// AddCarOperationFaultDuration adds f to the "car_operation_fault_duration" field.
func (sdsau *StatsDailyScenicAreaUpdate) AddCarOperationFaultDuration(f float32) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.AddCarOperationFaultDuration(f)
	return sdsau
}

// SetCarOperationMileage sets the "car_operation_mileage" field.
func (sdsau *StatsDailyScenicAreaUpdate) SetCarOperationMileage(f float32) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.ResetCarOperationMileage()
	sdsau.mutation.SetCarOperationMileage(f)
	return sdsau
}

// SetNillableCarOperationMileage sets the "car_operation_mileage" field if the given value is not nil.
func (sdsau *StatsDailyScenicAreaUpdate) SetNillableCarOperationMileage(f *float32) *StatsDailyScenicAreaUpdate {
	if f != nil {
		sdsau.SetCarOperationMileage(*f)
	}
	return sdsau
}

// AddCarOperationMileage adds f to the "car_operation_mileage" field.
func (sdsau *StatsDailyScenicAreaUpdate) AddCarOperationMileage(f float32) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.AddCarOperationMileage(f)
	return sdsau
}

// SetCarOperationFaultTimes sets the "car_operation_fault_times" field.
func (sdsau *StatsDailyScenicAreaUpdate) SetCarOperationFaultTimes(u uint32) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.ResetCarOperationFaultTimes()
	sdsau.mutation.SetCarOperationFaultTimes(u)
	return sdsau
}

// SetNillableCarOperationFaultTimes sets the "car_operation_fault_times" field if the given value is not nil.
func (sdsau *StatsDailyScenicAreaUpdate) SetNillableCarOperationFaultTimes(u *uint32) *StatsDailyScenicAreaUpdate {
	if u != nil {
		sdsau.SetCarOperationFaultTimes(*u)
	}
	return sdsau
}

// AddCarOperationFaultTimes adds u to the "car_operation_fault_times" field.
func (sdsau *StatsDailyScenicAreaUpdate) AddCarOperationFaultTimes(u int32) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.AddCarOperationFaultTimes(u)
	return sdsau
}

// SetCarMaintainManualDuration sets the "car_maintain_manual_duration" field.
func (sdsau *StatsDailyScenicAreaUpdate) SetCarMaintainManualDuration(f float32) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.ResetCarMaintainManualDuration()
	sdsau.mutation.SetCarMaintainManualDuration(f)
	return sdsau
}

// SetNillableCarMaintainManualDuration sets the "car_maintain_manual_duration" field if the given value is not nil.
func (sdsau *StatsDailyScenicAreaUpdate) SetNillableCarMaintainManualDuration(f *float32) *StatsDailyScenicAreaUpdate {
	if f != nil {
		sdsau.SetCarMaintainManualDuration(*f)
	}
	return sdsau
}

// AddCarMaintainManualDuration adds f to the "car_maintain_manual_duration" field.
func (sdsau *StatsDailyScenicAreaUpdate) AddCarMaintainManualDuration(f float32) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.AddCarMaintainManualDuration(f)
	return sdsau
}

// SetCarMaintainAutoDuration sets the "car_maintain_auto_duration" field.
func (sdsau *StatsDailyScenicAreaUpdate) SetCarMaintainAutoDuration(f float32) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.ResetCarMaintainAutoDuration()
	sdsau.mutation.SetCarMaintainAutoDuration(f)
	return sdsau
}

// SetNillableCarMaintainAutoDuration sets the "car_maintain_auto_duration" field if the given value is not nil.
func (sdsau *StatsDailyScenicAreaUpdate) SetNillableCarMaintainAutoDuration(f *float32) *StatsDailyScenicAreaUpdate {
	if f != nil {
		sdsau.SetCarMaintainAutoDuration(*f)
	}
	return sdsau
}

// AddCarMaintainAutoDuration adds f to the "car_maintain_auto_duration" field.
func (sdsau *StatsDailyScenicAreaUpdate) AddCarMaintainAutoDuration(f float32) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.AddCarMaintainAutoDuration(f)
	return sdsau
}

// SetCarMaintainNormalDuration sets the "car_maintain_normal_duration" field.
func (sdsau *StatsDailyScenicAreaUpdate) SetCarMaintainNormalDuration(f float32) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.ResetCarMaintainNormalDuration()
	sdsau.mutation.SetCarMaintainNormalDuration(f)
	return sdsau
}

// SetNillableCarMaintainNormalDuration sets the "car_maintain_normal_duration" field if the given value is not nil.
func (sdsau *StatsDailyScenicAreaUpdate) SetNillableCarMaintainNormalDuration(f *float32) *StatsDailyScenicAreaUpdate {
	if f != nil {
		sdsau.SetCarMaintainNormalDuration(*f)
	}
	return sdsau
}

// AddCarMaintainNormalDuration adds f to the "car_maintain_normal_duration" field.
func (sdsau *StatsDailyScenicAreaUpdate) AddCarMaintainNormalDuration(f float32) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.AddCarMaintainNormalDuration(f)
	return sdsau
}

// SetCarMaintainFaultDuration sets the "car_maintain_fault_duration" field.
func (sdsau *StatsDailyScenicAreaUpdate) SetCarMaintainFaultDuration(f float32) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.ResetCarMaintainFaultDuration()
	sdsau.mutation.SetCarMaintainFaultDuration(f)
	return sdsau
}

// SetNillableCarMaintainFaultDuration sets the "car_maintain_fault_duration" field if the given value is not nil.
func (sdsau *StatsDailyScenicAreaUpdate) SetNillableCarMaintainFaultDuration(f *float32) *StatsDailyScenicAreaUpdate {
	if f != nil {
		sdsau.SetCarMaintainFaultDuration(*f)
	}
	return sdsau
}

// AddCarMaintainFaultDuration adds f to the "car_maintain_fault_duration" field.
func (sdsau *StatsDailyScenicAreaUpdate) AddCarMaintainFaultDuration(f float32) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.AddCarMaintainFaultDuration(f)
	return sdsau
}

// SetCarMaintainMileage sets the "car_maintain_mileage" field.
func (sdsau *StatsDailyScenicAreaUpdate) SetCarMaintainMileage(f float32) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.ResetCarMaintainMileage()
	sdsau.mutation.SetCarMaintainMileage(f)
	return sdsau
}

// SetNillableCarMaintainMileage sets the "car_maintain_mileage" field if the given value is not nil.
func (sdsau *StatsDailyScenicAreaUpdate) SetNillableCarMaintainMileage(f *float32) *StatsDailyScenicAreaUpdate {
	if f != nil {
		sdsau.SetCarMaintainMileage(*f)
	}
	return sdsau
}

// AddCarMaintainMileage adds f to the "car_maintain_mileage" field.
func (sdsau *StatsDailyScenicAreaUpdate) AddCarMaintainMileage(f float32) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.AddCarMaintainMileage(f)
	return sdsau
}

// SetCarMaintainFaultTimes sets the "car_maintain_fault_times" field.
func (sdsau *StatsDailyScenicAreaUpdate) SetCarMaintainFaultTimes(u uint32) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.ResetCarMaintainFaultTimes()
	sdsau.mutation.SetCarMaintainFaultTimes(u)
	return sdsau
}

// SetNillableCarMaintainFaultTimes sets the "car_maintain_fault_times" field if the given value is not nil.
func (sdsau *StatsDailyScenicAreaUpdate) SetNillableCarMaintainFaultTimes(u *uint32) *StatsDailyScenicAreaUpdate {
	if u != nil {
		sdsau.SetCarMaintainFaultTimes(*u)
	}
	return sdsau
}

// AddCarMaintainFaultTimes adds u to the "car_maintain_fault_times" field.
func (sdsau *StatsDailyScenicAreaUpdate) AddCarMaintainFaultTimes(u int32) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.AddCarMaintainFaultTimes(u)
	return sdsau
}

// SetCarAlarmTimes sets the "car_alarm_times" field.
func (sdsau *StatsDailyScenicAreaUpdate) SetCarAlarmTimes(i int) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.ResetCarAlarmTimes()
	sdsau.mutation.SetCarAlarmTimes(i)
	return sdsau
}

// SetNillableCarAlarmTimes sets the "car_alarm_times" field if the given value is not nil.
func (sdsau *StatsDailyScenicAreaUpdate) SetNillableCarAlarmTimes(i *int) *StatsDailyScenicAreaUpdate {
	if i != nil {
		sdsau.SetCarAlarmTimes(*i)
	}
	return sdsau
}

// AddCarAlarmTimes adds i to the "car_alarm_times" field.
func (sdsau *StatsDailyScenicAreaUpdate) AddCarAlarmTimes(i int) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.AddCarAlarmTimes(i)
	return sdsau
}

// SetStatsTime sets the "stats_time" field.
func (sdsau *StatsDailyScenicAreaUpdate) SetStatsTime(t time.Time) *StatsDailyScenicAreaUpdate {
	sdsau.mutation.SetStatsTime(t)
	return sdsau
}

// SetNillableStatsTime sets the "stats_time" field if the given value is not nil.
func (sdsau *StatsDailyScenicAreaUpdate) SetNillableStatsTime(t *time.Time) *StatsDailyScenicAreaUpdate {
	if t != nil {
		sdsau.SetStatsTime(*t)
	}
	return sdsau
}

// Mutation returns the StatsDailyScenicAreaMutation object of the builder.
func (sdsau *StatsDailyScenicAreaUpdate) Mutation() *StatsDailyScenicAreaMutation {
	return sdsau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sdsau *StatsDailyScenicAreaUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sdsau.sqlSave, sdsau.mutation, sdsau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sdsau *StatsDailyScenicAreaUpdate) SaveX(ctx context.Context) int {
	affected, err := sdsau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sdsau *StatsDailyScenicAreaUpdate) Exec(ctx context.Context) error {
	_, err := sdsau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdsau *StatsDailyScenicAreaUpdate) ExecX(ctx context.Context) {
	if err := sdsau.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sdsau *StatsDailyScenicAreaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(statsdailyscenicarea.Table, statsdailyscenicarea.Columns, sqlgraph.NewFieldSpec(statsdailyscenicarea.FieldID, field.TypeInt))
	if ps := sdsau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sdsau.mutation.ScenicAreaID(); ok {
		_spec.SetField(statsdailyscenicarea.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := sdsau.mutation.AddedScenicAreaID(); ok {
		_spec.AddField(statsdailyscenicarea.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := sdsau.mutation.Y(); ok {
		_spec.SetField(statsdailyscenicarea.FieldY, field.TypeInt, value)
	}
	if value, ok := sdsau.mutation.AddedY(); ok {
		_spec.AddField(statsdailyscenicarea.FieldY, field.TypeInt, value)
	}
	if value, ok := sdsau.mutation.M(); ok {
		_spec.SetField(statsdailyscenicarea.FieldM, field.TypeInt, value)
	}
	if value, ok := sdsau.mutation.AddedM(); ok {
		_spec.AddField(statsdailyscenicarea.FieldM, field.TypeInt, value)
	}
	if value, ok := sdsau.mutation.D(); ok {
		_spec.SetField(statsdailyscenicarea.FieldD, field.TypeInt, value)
	}
	if value, ok := sdsau.mutation.AddedD(); ok {
		_spec.AddField(statsdailyscenicarea.FieldD, field.TypeInt, value)
	}
	if value, ok := sdsau.mutation.Week(); ok {
		_spec.SetField(statsdailyscenicarea.FieldWeek, field.TypeInt, value)
	}
	if value, ok := sdsau.mutation.AddedWeek(); ok {
		_spec.AddField(statsdailyscenicarea.FieldWeek, field.TypeInt, value)
	}
	if value, ok := sdsau.mutation.Weekday(); ok {
		_spec.SetField(statsdailyscenicarea.FieldWeekday, field.TypeInt, value)
	}
	if value, ok := sdsau.mutation.AddedWeekday(); ok {
		_spec.AddField(statsdailyscenicarea.FieldWeekday, field.TypeInt, value)
	}
	if value, ok := sdsau.mutation.Period(); ok {
		_spec.SetField(statsdailyscenicarea.FieldPeriod, field.TypeInt, value)
	}
	if value, ok := sdsau.mutation.AddedPeriod(); ok {
		_spec.AddField(statsdailyscenicarea.FieldPeriod, field.TypeInt, value)
	}
	if value, ok := sdsau.mutation.UserCountLogin(); ok {
		_spec.SetField(statsdailyscenicarea.FieldUserCountLogin, field.TypeInt, value)
	}
	if value, ok := sdsau.mutation.AddedUserCountLogin(); ok {
		_spec.AddField(statsdailyscenicarea.FieldUserCountLogin, field.TypeInt, value)
	}
	if value, ok := sdsau.mutation.UserCountRegister(); ok {
		_spec.SetField(statsdailyscenicarea.FieldUserCountRegister, field.TypeInt, value)
	}
	if value, ok := sdsau.mutation.AddedUserCountRegister(); ok {
		_spec.AddField(statsdailyscenicarea.FieldUserCountRegister, field.TypeInt, value)
	}
	if value, ok := sdsau.mutation.UserCountOrder(); ok {
		_spec.SetField(statsdailyscenicarea.FieldUserCountOrder, field.TypeInt, value)
	}
	if value, ok := sdsau.mutation.AddedUserCountOrder(); ok {
		_spec.AddField(statsdailyscenicarea.FieldUserCountOrder, field.TypeInt, value)
	}
	if value, ok := sdsau.mutation.UserCountLoginorder(); ok {
		_spec.SetField(statsdailyscenicarea.FieldUserCountLoginorder, field.TypeInt, value)
	}
	if value, ok := sdsau.mutation.AddedUserCountLoginorder(); ok {
		_spec.AddField(statsdailyscenicarea.FieldUserCountLoginorder, field.TypeInt, value)
	}
	if value, ok := sdsau.mutation.OrderCountCreate(); ok {
		_spec.SetField(statsdailyscenicarea.FieldOrderCountCreate, field.TypeInt, value)
	}
	if value, ok := sdsau.mutation.AddedOrderCountCreate(); ok {
		_spec.AddField(statsdailyscenicarea.FieldOrderCountCreate, field.TypeInt, value)
	}
	if value, ok := sdsau.mutation.OrderCountFinish(); ok {
		_spec.SetField(statsdailyscenicarea.FieldOrderCountFinish, field.TypeInt, value)
	}
	if value, ok := sdsau.mutation.AddedOrderCountFinish(); ok {
		_spec.AddField(statsdailyscenicarea.FieldOrderCountFinish, field.TypeInt, value)
	}
	if value, ok := sdsau.mutation.OrderCountCancel(); ok {
		_spec.SetField(statsdailyscenicarea.FieldOrderCountCancel, field.TypeInt, value)
	}
	if value, ok := sdsau.mutation.AddedOrderCountCancel(); ok {
		_spec.AddField(statsdailyscenicarea.FieldOrderCountCancel, field.TypeInt, value)
	}
	if value, ok := sdsau.mutation.OrderAmount(); ok {
		_spec.SetField(statsdailyscenicarea.FieldOrderAmount, field.TypeInt, value)
	}
	if value, ok := sdsau.mutation.AddedOrderAmount(); ok {
		_spec.AddField(statsdailyscenicarea.FieldOrderAmount, field.TypeInt, value)
	}
	if value, ok := sdsau.mutation.OrderDuration(); ok {
		_spec.SetField(statsdailyscenicarea.FieldOrderDuration, field.TypeInt, value)
	}
	if value, ok := sdsau.mutation.AddedOrderDuration(); ok {
		_spec.AddField(statsdailyscenicarea.FieldOrderDuration, field.TypeInt, value)
	}
	if value, ok := sdsau.mutation.OrderMileage(); ok {
		_spec.SetField(statsdailyscenicarea.FieldOrderMileage, field.TypeInt, value)
	}
	if value, ok := sdsau.mutation.AddedOrderMileage(); ok {
		_spec.AddField(statsdailyscenicarea.FieldOrderMileage, field.TypeInt, value)
	}
	if value, ok := sdsau.mutation.CarCountDeploy(); ok {
		_spec.SetField(statsdailyscenicarea.FieldCarCountDeploy, field.TypeInt, value)
	}
	if value, ok := sdsau.mutation.AddedCarCountDeploy(); ok {
		_spec.AddField(statsdailyscenicarea.FieldCarCountDeploy, field.TypeInt, value)
	}
	if value, ok := sdsau.mutation.CarCountOperation(); ok {
		_spec.SetField(statsdailyscenicarea.FieldCarCountOperation, field.TypeInt, value)
	}
	if value, ok := sdsau.mutation.AddedCarCountOperation(); ok {
		_spec.AddField(statsdailyscenicarea.FieldCarCountOperation, field.TypeInt, value)
	}
	if value, ok := sdsau.mutation.CarOperationManualDuration(); ok {
		_spec.SetField(statsdailyscenicarea.FieldCarOperationManualDuration, field.TypeFloat32, value)
	}
	if value, ok := sdsau.mutation.AddedCarOperationManualDuration(); ok {
		_spec.AddField(statsdailyscenicarea.FieldCarOperationManualDuration, field.TypeFloat32, value)
	}
	if value, ok := sdsau.mutation.CarOperationAutoDuration(); ok {
		_spec.SetField(statsdailyscenicarea.FieldCarOperationAutoDuration, field.TypeFloat32, value)
	}
	if value, ok := sdsau.mutation.AddedCarOperationAutoDuration(); ok {
		_spec.AddField(statsdailyscenicarea.FieldCarOperationAutoDuration, field.TypeFloat32, value)
	}
	if value, ok := sdsau.mutation.CarOperationNormalDuration(); ok {
		_spec.SetField(statsdailyscenicarea.FieldCarOperationNormalDuration, field.TypeFloat32, value)
	}
	if value, ok := sdsau.mutation.AddedCarOperationNormalDuration(); ok {
		_spec.AddField(statsdailyscenicarea.FieldCarOperationNormalDuration, field.TypeFloat32, value)
	}
	if value, ok := sdsau.mutation.CarOperationFaultDuration(); ok {
		_spec.SetField(statsdailyscenicarea.FieldCarOperationFaultDuration, field.TypeFloat32, value)
	}
	if value, ok := sdsau.mutation.AddedCarOperationFaultDuration(); ok {
		_spec.AddField(statsdailyscenicarea.FieldCarOperationFaultDuration, field.TypeFloat32, value)
	}
	if value, ok := sdsau.mutation.CarOperationMileage(); ok {
		_spec.SetField(statsdailyscenicarea.FieldCarOperationMileage, field.TypeFloat32, value)
	}
	if value, ok := sdsau.mutation.AddedCarOperationMileage(); ok {
		_spec.AddField(statsdailyscenicarea.FieldCarOperationMileage, field.TypeFloat32, value)
	}
	if value, ok := sdsau.mutation.CarOperationFaultTimes(); ok {
		_spec.SetField(statsdailyscenicarea.FieldCarOperationFaultTimes, field.TypeUint32, value)
	}
	if value, ok := sdsau.mutation.AddedCarOperationFaultTimes(); ok {
		_spec.AddField(statsdailyscenicarea.FieldCarOperationFaultTimes, field.TypeUint32, value)
	}
	if value, ok := sdsau.mutation.CarMaintainManualDuration(); ok {
		_spec.SetField(statsdailyscenicarea.FieldCarMaintainManualDuration, field.TypeFloat32, value)
	}
	if value, ok := sdsau.mutation.AddedCarMaintainManualDuration(); ok {
		_spec.AddField(statsdailyscenicarea.FieldCarMaintainManualDuration, field.TypeFloat32, value)
	}
	if value, ok := sdsau.mutation.CarMaintainAutoDuration(); ok {
		_spec.SetField(statsdailyscenicarea.FieldCarMaintainAutoDuration, field.TypeFloat32, value)
	}
	if value, ok := sdsau.mutation.AddedCarMaintainAutoDuration(); ok {
		_spec.AddField(statsdailyscenicarea.FieldCarMaintainAutoDuration, field.TypeFloat32, value)
	}
	if value, ok := sdsau.mutation.CarMaintainNormalDuration(); ok {
		_spec.SetField(statsdailyscenicarea.FieldCarMaintainNormalDuration, field.TypeFloat32, value)
	}
	if value, ok := sdsau.mutation.AddedCarMaintainNormalDuration(); ok {
		_spec.AddField(statsdailyscenicarea.FieldCarMaintainNormalDuration, field.TypeFloat32, value)
	}
	if value, ok := sdsau.mutation.CarMaintainFaultDuration(); ok {
		_spec.SetField(statsdailyscenicarea.FieldCarMaintainFaultDuration, field.TypeFloat32, value)
	}
	if value, ok := sdsau.mutation.AddedCarMaintainFaultDuration(); ok {
		_spec.AddField(statsdailyscenicarea.FieldCarMaintainFaultDuration, field.TypeFloat32, value)
	}
	if value, ok := sdsau.mutation.CarMaintainMileage(); ok {
		_spec.SetField(statsdailyscenicarea.FieldCarMaintainMileage, field.TypeFloat32, value)
	}
	if value, ok := sdsau.mutation.AddedCarMaintainMileage(); ok {
		_spec.AddField(statsdailyscenicarea.FieldCarMaintainMileage, field.TypeFloat32, value)
	}
	if value, ok := sdsau.mutation.CarMaintainFaultTimes(); ok {
		_spec.SetField(statsdailyscenicarea.FieldCarMaintainFaultTimes, field.TypeUint32, value)
	}
	if value, ok := sdsau.mutation.AddedCarMaintainFaultTimes(); ok {
		_spec.AddField(statsdailyscenicarea.FieldCarMaintainFaultTimes, field.TypeUint32, value)
	}
	if value, ok := sdsau.mutation.CarAlarmTimes(); ok {
		_spec.SetField(statsdailyscenicarea.FieldCarAlarmTimes, field.TypeInt, value)
	}
	if value, ok := sdsau.mutation.AddedCarAlarmTimes(); ok {
		_spec.AddField(statsdailyscenicarea.FieldCarAlarmTimes, field.TypeInt, value)
	}
	if value, ok := sdsau.mutation.StatsTime(); ok {
		_spec.SetField(statsdailyscenicarea.FieldStatsTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sdsau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{statsdailyscenicarea.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sdsau.mutation.done = true
	return n, nil
}

// StatsDailyScenicAreaUpdateOne is the builder for updating a single StatsDailyScenicArea entity.
type StatsDailyScenicAreaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StatsDailyScenicAreaMutation
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetScenicAreaID(i int) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.ResetScenicAreaID()
	sdsauo.mutation.SetScenicAreaID(i)
	return sdsauo
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetNillableScenicAreaID(i *int) *StatsDailyScenicAreaUpdateOne {
	if i != nil {
		sdsauo.SetScenicAreaID(*i)
	}
	return sdsauo
}

// AddScenicAreaID adds i to the "scenic_area_id" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) AddScenicAreaID(i int) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.AddScenicAreaID(i)
	return sdsauo
}

// SetY sets the "y" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetY(i int) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.ResetY()
	sdsauo.mutation.SetY(i)
	return sdsauo
}

// SetNillableY sets the "y" field if the given value is not nil.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetNillableY(i *int) *StatsDailyScenicAreaUpdateOne {
	if i != nil {
		sdsauo.SetY(*i)
	}
	return sdsauo
}

// AddY adds i to the "y" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) AddY(i int) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.AddY(i)
	return sdsauo
}

// SetM sets the "m" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetM(i int) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.ResetM()
	sdsauo.mutation.SetM(i)
	return sdsauo
}

// SetNillableM sets the "m" field if the given value is not nil.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetNillableM(i *int) *StatsDailyScenicAreaUpdateOne {
	if i != nil {
		sdsauo.SetM(*i)
	}
	return sdsauo
}

// AddM adds i to the "m" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) AddM(i int) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.AddM(i)
	return sdsauo
}

// SetD sets the "d" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetD(i int) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.ResetD()
	sdsauo.mutation.SetD(i)
	return sdsauo
}

// SetNillableD sets the "d" field if the given value is not nil.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetNillableD(i *int) *StatsDailyScenicAreaUpdateOne {
	if i != nil {
		sdsauo.SetD(*i)
	}
	return sdsauo
}

// AddD adds i to the "d" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) AddD(i int) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.AddD(i)
	return sdsauo
}

// SetWeek sets the "week" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetWeek(i int) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.ResetWeek()
	sdsauo.mutation.SetWeek(i)
	return sdsauo
}

// SetNillableWeek sets the "week" field if the given value is not nil.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetNillableWeek(i *int) *StatsDailyScenicAreaUpdateOne {
	if i != nil {
		sdsauo.SetWeek(*i)
	}
	return sdsauo
}

// AddWeek adds i to the "week" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) AddWeek(i int) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.AddWeek(i)
	return sdsauo
}

// SetWeekday sets the "weekday" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetWeekday(i int) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.ResetWeekday()
	sdsauo.mutation.SetWeekday(i)
	return sdsauo
}

// SetNillableWeekday sets the "weekday" field if the given value is not nil.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetNillableWeekday(i *int) *StatsDailyScenicAreaUpdateOne {
	if i != nil {
		sdsauo.SetWeekday(*i)
	}
	return sdsauo
}

// AddWeekday adds i to the "weekday" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) AddWeekday(i int) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.AddWeekday(i)
	return sdsauo
}

// SetPeriod sets the "period" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetPeriod(i int) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.ResetPeriod()
	sdsauo.mutation.SetPeriod(i)
	return sdsauo
}

// SetNillablePeriod sets the "period" field if the given value is not nil.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetNillablePeriod(i *int) *StatsDailyScenicAreaUpdateOne {
	if i != nil {
		sdsauo.SetPeriod(*i)
	}
	return sdsauo
}

// AddPeriod adds i to the "period" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) AddPeriod(i int) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.AddPeriod(i)
	return sdsauo
}

// SetUserCountLogin sets the "user_count_login" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetUserCountLogin(i int) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.ResetUserCountLogin()
	sdsauo.mutation.SetUserCountLogin(i)
	return sdsauo
}

// SetNillableUserCountLogin sets the "user_count_login" field if the given value is not nil.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetNillableUserCountLogin(i *int) *StatsDailyScenicAreaUpdateOne {
	if i != nil {
		sdsauo.SetUserCountLogin(*i)
	}
	return sdsauo
}

// AddUserCountLogin adds i to the "user_count_login" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) AddUserCountLogin(i int) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.AddUserCountLogin(i)
	return sdsauo
}

// SetUserCountRegister sets the "user_count_register" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetUserCountRegister(i int) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.ResetUserCountRegister()
	sdsauo.mutation.SetUserCountRegister(i)
	return sdsauo
}

// SetNillableUserCountRegister sets the "user_count_register" field if the given value is not nil.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetNillableUserCountRegister(i *int) *StatsDailyScenicAreaUpdateOne {
	if i != nil {
		sdsauo.SetUserCountRegister(*i)
	}
	return sdsauo
}

// AddUserCountRegister adds i to the "user_count_register" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) AddUserCountRegister(i int) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.AddUserCountRegister(i)
	return sdsauo
}

// SetUserCountOrder sets the "user_count_order" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetUserCountOrder(i int) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.ResetUserCountOrder()
	sdsauo.mutation.SetUserCountOrder(i)
	return sdsauo
}

// SetNillableUserCountOrder sets the "user_count_order" field if the given value is not nil.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetNillableUserCountOrder(i *int) *StatsDailyScenicAreaUpdateOne {
	if i != nil {
		sdsauo.SetUserCountOrder(*i)
	}
	return sdsauo
}

// AddUserCountOrder adds i to the "user_count_order" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) AddUserCountOrder(i int) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.AddUserCountOrder(i)
	return sdsauo
}

// SetUserCountLoginorder sets the "user_count_loginorder" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetUserCountLoginorder(i int) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.ResetUserCountLoginorder()
	sdsauo.mutation.SetUserCountLoginorder(i)
	return sdsauo
}

// SetNillableUserCountLoginorder sets the "user_count_loginorder" field if the given value is not nil.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetNillableUserCountLoginorder(i *int) *StatsDailyScenicAreaUpdateOne {
	if i != nil {
		sdsauo.SetUserCountLoginorder(*i)
	}
	return sdsauo
}

// AddUserCountLoginorder adds i to the "user_count_loginorder" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) AddUserCountLoginorder(i int) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.AddUserCountLoginorder(i)
	return sdsauo
}

// SetOrderCountCreate sets the "order_count_create" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetOrderCountCreate(i int) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.ResetOrderCountCreate()
	sdsauo.mutation.SetOrderCountCreate(i)
	return sdsauo
}

// SetNillableOrderCountCreate sets the "order_count_create" field if the given value is not nil.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetNillableOrderCountCreate(i *int) *StatsDailyScenicAreaUpdateOne {
	if i != nil {
		sdsauo.SetOrderCountCreate(*i)
	}
	return sdsauo
}

// AddOrderCountCreate adds i to the "order_count_create" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) AddOrderCountCreate(i int) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.AddOrderCountCreate(i)
	return sdsauo
}

// SetOrderCountFinish sets the "order_count_finish" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetOrderCountFinish(i int) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.ResetOrderCountFinish()
	sdsauo.mutation.SetOrderCountFinish(i)
	return sdsauo
}

// SetNillableOrderCountFinish sets the "order_count_finish" field if the given value is not nil.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetNillableOrderCountFinish(i *int) *StatsDailyScenicAreaUpdateOne {
	if i != nil {
		sdsauo.SetOrderCountFinish(*i)
	}
	return sdsauo
}

// AddOrderCountFinish adds i to the "order_count_finish" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) AddOrderCountFinish(i int) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.AddOrderCountFinish(i)
	return sdsauo
}

// SetOrderCountCancel sets the "order_count_cancel" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetOrderCountCancel(i int) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.ResetOrderCountCancel()
	sdsauo.mutation.SetOrderCountCancel(i)
	return sdsauo
}

// SetNillableOrderCountCancel sets the "order_count_cancel" field if the given value is not nil.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetNillableOrderCountCancel(i *int) *StatsDailyScenicAreaUpdateOne {
	if i != nil {
		sdsauo.SetOrderCountCancel(*i)
	}
	return sdsauo
}

// AddOrderCountCancel adds i to the "order_count_cancel" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) AddOrderCountCancel(i int) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.AddOrderCountCancel(i)
	return sdsauo
}

// SetOrderAmount sets the "order_amount" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetOrderAmount(i int) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.ResetOrderAmount()
	sdsauo.mutation.SetOrderAmount(i)
	return sdsauo
}

// SetNillableOrderAmount sets the "order_amount" field if the given value is not nil.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetNillableOrderAmount(i *int) *StatsDailyScenicAreaUpdateOne {
	if i != nil {
		sdsauo.SetOrderAmount(*i)
	}
	return sdsauo
}

// AddOrderAmount adds i to the "order_amount" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) AddOrderAmount(i int) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.AddOrderAmount(i)
	return sdsauo
}

// SetOrderDuration sets the "order_duration" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetOrderDuration(i int) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.ResetOrderDuration()
	sdsauo.mutation.SetOrderDuration(i)
	return sdsauo
}

// SetNillableOrderDuration sets the "order_duration" field if the given value is not nil.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetNillableOrderDuration(i *int) *StatsDailyScenicAreaUpdateOne {
	if i != nil {
		sdsauo.SetOrderDuration(*i)
	}
	return sdsauo
}

// AddOrderDuration adds i to the "order_duration" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) AddOrderDuration(i int) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.AddOrderDuration(i)
	return sdsauo
}

// SetOrderMileage sets the "order_mileage" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetOrderMileage(i int) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.ResetOrderMileage()
	sdsauo.mutation.SetOrderMileage(i)
	return sdsauo
}

// SetNillableOrderMileage sets the "order_mileage" field if the given value is not nil.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetNillableOrderMileage(i *int) *StatsDailyScenicAreaUpdateOne {
	if i != nil {
		sdsauo.SetOrderMileage(*i)
	}
	return sdsauo
}

// AddOrderMileage adds i to the "order_mileage" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) AddOrderMileage(i int) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.AddOrderMileage(i)
	return sdsauo
}

// SetCarCountDeploy sets the "car_count_deploy" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetCarCountDeploy(i int) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.ResetCarCountDeploy()
	sdsauo.mutation.SetCarCountDeploy(i)
	return sdsauo
}

// SetNillableCarCountDeploy sets the "car_count_deploy" field if the given value is not nil.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetNillableCarCountDeploy(i *int) *StatsDailyScenicAreaUpdateOne {
	if i != nil {
		sdsauo.SetCarCountDeploy(*i)
	}
	return sdsauo
}

// AddCarCountDeploy adds i to the "car_count_deploy" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) AddCarCountDeploy(i int) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.AddCarCountDeploy(i)
	return sdsauo
}

// SetCarCountOperation sets the "car_count_operation" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetCarCountOperation(i int) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.ResetCarCountOperation()
	sdsauo.mutation.SetCarCountOperation(i)
	return sdsauo
}

// SetNillableCarCountOperation sets the "car_count_operation" field if the given value is not nil.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetNillableCarCountOperation(i *int) *StatsDailyScenicAreaUpdateOne {
	if i != nil {
		sdsauo.SetCarCountOperation(*i)
	}
	return sdsauo
}

// AddCarCountOperation adds i to the "car_count_operation" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) AddCarCountOperation(i int) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.AddCarCountOperation(i)
	return sdsauo
}

// SetCarOperationManualDuration sets the "car_operation_manual_duration" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetCarOperationManualDuration(f float32) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.ResetCarOperationManualDuration()
	sdsauo.mutation.SetCarOperationManualDuration(f)
	return sdsauo
}

// SetNillableCarOperationManualDuration sets the "car_operation_manual_duration" field if the given value is not nil.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetNillableCarOperationManualDuration(f *float32) *StatsDailyScenicAreaUpdateOne {
	if f != nil {
		sdsauo.SetCarOperationManualDuration(*f)
	}
	return sdsauo
}

// AddCarOperationManualDuration adds f to the "car_operation_manual_duration" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) AddCarOperationManualDuration(f float32) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.AddCarOperationManualDuration(f)
	return sdsauo
}

// SetCarOperationAutoDuration sets the "car_operation_auto_duration" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetCarOperationAutoDuration(f float32) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.ResetCarOperationAutoDuration()
	sdsauo.mutation.SetCarOperationAutoDuration(f)
	return sdsauo
}

// SetNillableCarOperationAutoDuration sets the "car_operation_auto_duration" field if the given value is not nil.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetNillableCarOperationAutoDuration(f *float32) *StatsDailyScenicAreaUpdateOne {
	if f != nil {
		sdsauo.SetCarOperationAutoDuration(*f)
	}
	return sdsauo
}

// AddCarOperationAutoDuration adds f to the "car_operation_auto_duration" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) AddCarOperationAutoDuration(f float32) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.AddCarOperationAutoDuration(f)
	return sdsauo
}

// SetCarOperationNormalDuration sets the "car_operation_normal_duration" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetCarOperationNormalDuration(f float32) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.ResetCarOperationNormalDuration()
	sdsauo.mutation.SetCarOperationNormalDuration(f)
	return sdsauo
}

// SetNillableCarOperationNormalDuration sets the "car_operation_normal_duration" field if the given value is not nil.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetNillableCarOperationNormalDuration(f *float32) *StatsDailyScenicAreaUpdateOne {
	if f != nil {
		sdsauo.SetCarOperationNormalDuration(*f)
	}
	return sdsauo
}

// AddCarOperationNormalDuration adds f to the "car_operation_normal_duration" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) AddCarOperationNormalDuration(f float32) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.AddCarOperationNormalDuration(f)
	return sdsauo
}

// SetCarOperationFaultDuration sets the "car_operation_fault_duration" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetCarOperationFaultDuration(f float32) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.ResetCarOperationFaultDuration()
	sdsauo.mutation.SetCarOperationFaultDuration(f)
	return sdsauo
}

// SetNillableCarOperationFaultDuration sets the "car_operation_fault_duration" field if the given value is not nil.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetNillableCarOperationFaultDuration(f *float32) *StatsDailyScenicAreaUpdateOne {
	if f != nil {
		sdsauo.SetCarOperationFaultDuration(*f)
	}
	return sdsauo
}

// AddCarOperationFaultDuration adds f to the "car_operation_fault_duration" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) AddCarOperationFaultDuration(f float32) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.AddCarOperationFaultDuration(f)
	return sdsauo
}

// SetCarOperationMileage sets the "car_operation_mileage" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetCarOperationMileage(f float32) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.ResetCarOperationMileage()
	sdsauo.mutation.SetCarOperationMileage(f)
	return sdsauo
}

// SetNillableCarOperationMileage sets the "car_operation_mileage" field if the given value is not nil.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetNillableCarOperationMileage(f *float32) *StatsDailyScenicAreaUpdateOne {
	if f != nil {
		sdsauo.SetCarOperationMileage(*f)
	}
	return sdsauo
}

// AddCarOperationMileage adds f to the "car_operation_mileage" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) AddCarOperationMileage(f float32) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.AddCarOperationMileage(f)
	return sdsauo
}

// SetCarOperationFaultTimes sets the "car_operation_fault_times" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetCarOperationFaultTimes(u uint32) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.ResetCarOperationFaultTimes()
	sdsauo.mutation.SetCarOperationFaultTimes(u)
	return sdsauo
}

// SetNillableCarOperationFaultTimes sets the "car_operation_fault_times" field if the given value is not nil.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetNillableCarOperationFaultTimes(u *uint32) *StatsDailyScenicAreaUpdateOne {
	if u != nil {
		sdsauo.SetCarOperationFaultTimes(*u)
	}
	return sdsauo
}

// AddCarOperationFaultTimes adds u to the "car_operation_fault_times" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) AddCarOperationFaultTimes(u int32) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.AddCarOperationFaultTimes(u)
	return sdsauo
}

// SetCarMaintainManualDuration sets the "car_maintain_manual_duration" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetCarMaintainManualDuration(f float32) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.ResetCarMaintainManualDuration()
	sdsauo.mutation.SetCarMaintainManualDuration(f)
	return sdsauo
}

// SetNillableCarMaintainManualDuration sets the "car_maintain_manual_duration" field if the given value is not nil.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetNillableCarMaintainManualDuration(f *float32) *StatsDailyScenicAreaUpdateOne {
	if f != nil {
		sdsauo.SetCarMaintainManualDuration(*f)
	}
	return sdsauo
}

// AddCarMaintainManualDuration adds f to the "car_maintain_manual_duration" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) AddCarMaintainManualDuration(f float32) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.AddCarMaintainManualDuration(f)
	return sdsauo
}

// SetCarMaintainAutoDuration sets the "car_maintain_auto_duration" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetCarMaintainAutoDuration(f float32) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.ResetCarMaintainAutoDuration()
	sdsauo.mutation.SetCarMaintainAutoDuration(f)
	return sdsauo
}

// SetNillableCarMaintainAutoDuration sets the "car_maintain_auto_duration" field if the given value is not nil.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetNillableCarMaintainAutoDuration(f *float32) *StatsDailyScenicAreaUpdateOne {
	if f != nil {
		sdsauo.SetCarMaintainAutoDuration(*f)
	}
	return sdsauo
}

// AddCarMaintainAutoDuration adds f to the "car_maintain_auto_duration" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) AddCarMaintainAutoDuration(f float32) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.AddCarMaintainAutoDuration(f)
	return sdsauo
}

// SetCarMaintainNormalDuration sets the "car_maintain_normal_duration" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetCarMaintainNormalDuration(f float32) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.ResetCarMaintainNormalDuration()
	sdsauo.mutation.SetCarMaintainNormalDuration(f)
	return sdsauo
}

// SetNillableCarMaintainNormalDuration sets the "car_maintain_normal_duration" field if the given value is not nil.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetNillableCarMaintainNormalDuration(f *float32) *StatsDailyScenicAreaUpdateOne {
	if f != nil {
		sdsauo.SetCarMaintainNormalDuration(*f)
	}
	return sdsauo
}

// AddCarMaintainNormalDuration adds f to the "car_maintain_normal_duration" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) AddCarMaintainNormalDuration(f float32) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.AddCarMaintainNormalDuration(f)
	return sdsauo
}

// SetCarMaintainFaultDuration sets the "car_maintain_fault_duration" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetCarMaintainFaultDuration(f float32) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.ResetCarMaintainFaultDuration()
	sdsauo.mutation.SetCarMaintainFaultDuration(f)
	return sdsauo
}

// SetNillableCarMaintainFaultDuration sets the "car_maintain_fault_duration" field if the given value is not nil.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetNillableCarMaintainFaultDuration(f *float32) *StatsDailyScenicAreaUpdateOne {
	if f != nil {
		sdsauo.SetCarMaintainFaultDuration(*f)
	}
	return sdsauo
}

// AddCarMaintainFaultDuration adds f to the "car_maintain_fault_duration" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) AddCarMaintainFaultDuration(f float32) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.AddCarMaintainFaultDuration(f)
	return sdsauo
}

// SetCarMaintainMileage sets the "car_maintain_mileage" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetCarMaintainMileage(f float32) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.ResetCarMaintainMileage()
	sdsauo.mutation.SetCarMaintainMileage(f)
	return sdsauo
}

// SetNillableCarMaintainMileage sets the "car_maintain_mileage" field if the given value is not nil.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetNillableCarMaintainMileage(f *float32) *StatsDailyScenicAreaUpdateOne {
	if f != nil {
		sdsauo.SetCarMaintainMileage(*f)
	}
	return sdsauo
}

// AddCarMaintainMileage adds f to the "car_maintain_mileage" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) AddCarMaintainMileage(f float32) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.AddCarMaintainMileage(f)
	return sdsauo
}

// SetCarMaintainFaultTimes sets the "car_maintain_fault_times" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetCarMaintainFaultTimes(u uint32) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.ResetCarMaintainFaultTimes()
	sdsauo.mutation.SetCarMaintainFaultTimes(u)
	return sdsauo
}

// SetNillableCarMaintainFaultTimes sets the "car_maintain_fault_times" field if the given value is not nil.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetNillableCarMaintainFaultTimes(u *uint32) *StatsDailyScenicAreaUpdateOne {
	if u != nil {
		sdsauo.SetCarMaintainFaultTimes(*u)
	}
	return sdsauo
}

// AddCarMaintainFaultTimes adds u to the "car_maintain_fault_times" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) AddCarMaintainFaultTimes(u int32) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.AddCarMaintainFaultTimes(u)
	return sdsauo
}

// SetCarAlarmTimes sets the "car_alarm_times" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetCarAlarmTimes(i int) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.ResetCarAlarmTimes()
	sdsauo.mutation.SetCarAlarmTimes(i)
	return sdsauo
}

// SetNillableCarAlarmTimes sets the "car_alarm_times" field if the given value is not nil.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetNillableCarAlarmTimes(i *int) *StatsDailyScenicAreaUpdateOne {
	if i != nil {
		sdsauo.SetCarAlarmTimes(*i)
	}
	return sdsauo
}

// AddCarAlarmTimes adds i to the "car_alarm_times" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) AddCarAlarmTimes(i int) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.AddCarAlarmTimes(i)
	return sdsauo
}

// SetStatsTime sets the "stats_time" field.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetStatsTime(t time.Time) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.SetStatsTime(t)
	return sdsauo
}

// SetNillableStatsTime sets the "stats_time" field if the given value is not nil.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SetNillableStatsTime(t *time.Time) *StatsDailyScenicAreaUpdateOne {
	if t != nil {
		sdsauo.SetStatsTime(*t)
	}
	return sdsauo
}

// Mutation returns the StatsDailyScenicAreaMutation object of the builder.
func (sdsauo *StatsDailyScenicAreaUpdateOne) Mutation() *StatsDailyScenicAreaMutation {
	return sdsauo.mutation
}

// Where appends a list predicates to the StatsDailyScenicAreaUpdate builder.
func (sdsauo *StatsDailyScenicAreaUpdateOne) Where(ps ...predicate.StatsDailyScenicArea) *StatsDailyScenicAreaUpdateOne {
	sdsauo.mutation.Where(ps...)
	return sdsauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sdsauo *StatsDailyScenicAreaUpdateOne) Select(field string, fields ...string) *StatsDailyScenicAreaUpdateOne {
	sdsauo.fields = append([]string{field}, fields...)
	return sdsauo
}

// Save executes the query and returns the updated StatsDailyScenicArea entity.
func (sdsauo *StatsDailyScenicAreaUpdateOne) Save(ctx context.Context) (*StatsDailyScenicArea, error) {
	return withHooks(ctx, sdsauo.sqlSave, sdsauo.mutation, sdsauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sdsauo *StatsDailyScenicAreaUpdateOne) SaveX(ctx context.Context) *StatsDailyScenicArea {
	node, err := sdsauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sdsauo *StatsDailyScenicAreaUpdateOne) Exec(ctx context.Context) error {
	_, err := sdsauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdsauo *StatsDailyScenicAreaUpdateOne) ExecX(ctx context.Context) {
	if err := sdsauo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sdsauo *StatsDailyScenicAreaUpdateOne) sqlSave(ctx context.Context) (_node *StatsDailyScenicArea, err error) {
	_spec := sqlgraph.NewUpdateSpec(statsdailyscenicarea.Table, statsdailyscenicarea.Columns, sqlgraph.NewFieldSpec(statsdailyscenicarea.FieldID, field.TypeInt))
	id, ok := sdsauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "StatsDailyScenicArea.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sdsauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, statsdailyscenicarea.FieldID)
		for _, f := range fields {
			if !statsdailyscenicarea.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != statsdailyscenicarea.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sdsauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sdsauo.mutation.ScenicAreaID(); ok {
		_spec.SetField(statsdailyscenicarea.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := sdsauo.mutation.AddedScenicAreaID(); ok {
		_spec.AddField(statsdailyscenicarea.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := sdsauo.mutation.Y(); ok {
		_spec.SetField(statsdailyscenicarea.FieldY, field.TypeInt, value)
	}
	if value, ok := sdsauo.mutation.AddedY(); ok {
		_spec.AddField(statsdailyscenicarea.FieldY, field.TypeInt, value)
	}
	if value, ok := sdsauo.mutation.M(); ok {
		_spec.SetField(statsdailyscenicarea.FieldM, field.TypeInt, value)
	}
	if value, ok := sdsauo.mutation.AddedM(); ok {
		_spec.AddField(statsdailyscenicarea.FieldM, field.TypeInt, value)
	}
	if value, ok := sdsauo.mutation.D(); ok {
		_spec.SetField(statsdailyscenicarea.FieldD, field.TypeInt, value)
	}
	if value, ok := sdsauo.mutation.AddedD(); ok {
		_spec.AddField(statsdailyscenicarea.FieldD, field.TypeInt, value)
	}
	if value, ok := sdsauo.mutation.Week(); ok {
		_spec.SetField(statsdailyscenicarea.FieldWeek, field.TypeInt, value)
	}
	if value, ok := sdsauo.mutation.AddedWeek(); ok {
		_spec.AddField(statsdailyscenicarea.FieldWeek, field.TypeInt, value)
	}
	if value, ok := sdsauo.mutation.Weekday(); ok {
		_spec.SetField(statsdailyscenicarea.FieldWeekday, field.TypeInt, value)
	}
	if value, ok := sdsauo.mutation.AddedWeekday(); ok {
		_spec.AddField(statsdailyscenicarea.FieldWeekday, field.TypeInt, value)
	}
	if value, ok := sdsauo.mutation.Period(); ok {
		_spec.SetField(statsdailyscenicarea.FieldPeriod, field.TypeInt, value)
	}
	if value, ok := sdsauo.mutation.AddedPeriod(); ok {
		_spec.AddField(statsdailyscenicarea.FieldPeriod, field.TypeInt, value)
	}
	if value, ok := sdsauo.mutation.UserCountLogin(); ok {
		_spec.SetField(statsdailyscenicarea.FieldUserCountLogin, field.TypeInt, value)
	}
	if value, ok := sdsauo.mutation.AddedUserCountLogin(); ok {
		_spec.AddField(statsdailyscenicarea.FieldUserCountLogin, field.TypeInt, value)
	}
	if value, ok := sdsauo.mutation.UserCountRegister(); ok {
		_spec.SetField(statsdailyscenicarea.FieldUserCountRegister, field.TypeInt, value)
	}
	if value, ok := sdsauo.mutation.AddedUserCountRegister(); ok {
		_spec.AddField(statsdailyscenicarea.FieldUserCountRegister, field.TypeInt, value)
	}
	if value, ok := sdsauo.mutation.UserCountOrder(); ok {
		_spec.SetField(statsdailyscenicarea.FieldUserCountOrder, field.TypeInt, value)
	}
	if value, ok := sdsauo.mutation.AddedUserCountOrder(); ok {
		_spec.AddField(statsdailyscenicarea.FieldUserCountOrder, field.TypeInt, value)
	}
	if value, ok := sdsauo.mutation.UserCountLoginorder(); ok {
		_spec.SetField(statsdailyscenicarea.FieldUserCountLoginorder, field.TypeInt, value)
	}
	if value, ok := sdsauo.mutation.AddedUserCountLoginorder(); ok {
		_spec.AddField(statsdailyscenicarea.FieldUserCountLoginorder, field.TypeInt, value)
	}
	if value, ok := sdsauo.mutation.OrderCountCreate(); ok {
		_spec.SetField(statsdailyscenicarea.FieldOrderCountCreate, field.TypeInt, value)
	}
	if value, ok := sdsauo.mutation.AddedOrderCountCreate(); ok {
		_spec.AddField(statsdailyscenicarea.FieldOrderCountCreate, field.TypeInt, value)
	}
	if value, ok := sdsauo.mutation.OrderCountFinish(); ok {
		_spec.SetField(statsdailyscenicarea.FieldOrderCountFinish, field.TypeInt, value)
	}
	if value, ok := sdsauo.mutation.AddedOrderCountFinish(); ok {
		_spec.AddField(statsdailyscenicarea.FieldOrderCountFinish, field.TypeInt, value)
	}
	if value, ok := sdsauo.mutation.OrderCountCancel(); ok {
		_spec.SetField(statsdailyscenicarea.FieldOrderCountCancel, field.TypeInt, value)
	}
	if value, ok := sdsauo.mutation.AddedOrderCountCancel(); ok {
		_spec.AddField(statsdailyscenicarea.FieldOrderCountCancel, field.TypeInt, value)
	}
	if value, ok := sdsauo.mutation.OrderAmount(); ok {
		_spec.SetField(statsdailyscenicarea.FieldOrderAmount, field.TypeInt, value)
	}
	if value, ok := sdsauo.mutation.AddedOrderAmount(); ok {
		_spec.AddField(statsdailyscenicarea.FieldOrderAmount, field.TypeInt, value)
	}
	if value, ok := sdsauo.mutation.OrderDuration(); ok {
		_spec.SetField(statsdailyscenicarea.FieldOrderDuration, field.TypeInt, value)
	}
	if value, ok := sdsauo.mutation.AddedOrderDuration(); ok {
		_spec.AddField(statsdailyscenicarea.FieldOrderDuration, field.TypeInt, value)
	}
	if value, ok := sdsauo.mutation.OrderMileage(); ok {
		_spec.SetField(statsdailyscenicarea.FieldOrderMileage, field.TypeInt, value)
	}
	if value, ok := sdsauo.mutation.AddedOrderMileage(); ok {
		_spec.AddField(statsdailyscenicarea.FieldOrderMileage, field.TypeInt, value)
	}
	if value, ok := sdsauo.mutation.CarCountDeploy(); ok {
		_spec.SetField(statsdailyscenicarea.FieldCarCountDeploy, field.TypeInt, value)
	}
	if value, ok := sdsauo.mutation.AddedCarCountDeploy(); ok {
		_spec.AddField(statsdailyscenicarea.FieldCarCountDeploy, field.TypeInt, value)
	}
	if value, ok := sdsauo.mutation.CarCountOperation(); ok {
		_spec.SetField(statsdailyscenicarea.FieldCarCountOperation, field.TypeInt, value)
	}
	if value, ok := sdsauo.mutation.AddedCarCountOperation(); ok {
		_spec.AddField(statsdailyscenicarea.FieldCarCountOperation, field.TypeInt, value)
	}
	if value, ok := sdsauo.mutation.CarOperationManualDuration(); ok {
		_spec.SetField(statsdailyscenicarea.FieldCarOperationManualDuration, field.TypeFloat32, value)
	}
	if value, ok := sdsauo.mutation.AddedCarOperationManualDuration(); ok {
		_spec.AddField(statsdailyscenicarea.FieldCarOperationManualDuration, field.TypeFloat32, value)
	}
	if value, ok := sdsauo.mutation.CarOperationAutoDuration(); ok {
		_spec.SetField(statsdailyscenicarea.FieldCarOperationAutoDuration, field.TypeFloat32, value)
	}
	if value, ok := sdsauo.mutation.AddedCarOperationAutoDuration(); ok {
		_spec.AddField(statsdailyscenicarea.FieldCarOperationAutoDuration, field.TypeFloat32, value)
	}
	if value, ok := sdsauo.mutation.CarOperationNormalDuration(); ok {
		_spec.SetField(statsdailyscenicarea.FieldCarOperationNormalDuration, field.TypeFloat32, value)
	}
	if value, ok := sdsauo.mutation.AddedCarOperationNormalDuration(); ok {
		_spec.AddField(statsdailyscenicarea.FieldCarOperationNormalDuration, field.TypeFloat32, value)
	}
	if value, ok := sdsauo.mutation.CarOperationFaultDuration(); ok {
		_spec.SetField(statsdailyscenicarea.FieldCarOperationFaultDuration, field.TypeFloat32, value)
	}
	if value, ok := sdsauo.mutation.AddedCarOperationFaultDuration(); ok {
		_spec.AddField(statsdailyscenicarea.FieldCarOperationFaultDuration, field.TypeFloat32, value)
	}
	if value, ok := sdsauo.mutation.CarOperationMileage(); ok {
		_spec.SetField(statsdailyscenicarea.FieldCarOperationMileage, field.TypeFloat32, value)
	}
	if value, ok := sdsauo.mutation.AddedCarOperationMileage(); ok {
		_spec.AddField(statsdailyscenicarea.FieldCarOperationMileage, field.TypeFloat32, value)
	}
	if value, ok := sdsauo.mutation.CarOperationFaultTimes(); ok {
		_spec.SetField(statsdailyscenicarea.FieldCarOperationFaultTimes, field.TypeUint32, value)
	}
	if value, ok := sdsauo.mutation.AddedCarOperationFaultTimes(); ok {
		_spec.AddField(statsdailyscenicarea.FieldCarOperationFaultTimes, field.TypeUint32, value)
	}
	if value, ok := sdsauo.mutation.CarMaintainManualDuration(); ok {
		_spec.SetField(statsdailyscenicarea.FieldCarMaintainManualDuration, field.TypeFloat32, value)
	}
	if value, ok := sdsauo.mutation.AddedCarMaintainManualDuration(); ok {
		_spec.AddField(statsdailyscenicarea.FieldCarMaintainManualDuration, field.TypeFloat32, value)
	}
	if value, ok := sdsauo.mutation.CarMaintainAutoDuration(); ok {
		_spec.SetField(statsdailyscenicarea.FieldCarMaintainAutoDuration, field.TypeFloat32, value)
	}
	if value, ok := sdsauo.mutation.AddedCarMaintainAutoDuration(); ok {
		_spec.AddField(statsdailyscenicarea.FieldCarMaintainAutoDuration, field.TypeFloat32, value)
	}
	if value, ok := sdsauo.mutation.CarMaintainNormalDuration(); ok {
		_spec.SetField(statsdailyscenicarea.FieldCarMaintainNormalDuration, field.TypeFloat32, value)
	}
	if value, ok := sdsauo.mutation.AddedCarMaintainNormalDuration(); ok {
		_spec.AddField(statsdailyscenicarea.FieldCarMaintainNormalDuration, field.TypeFloat32, value)
	}
	if value, ok := sdsauo.mutation.CarMaintainFaultDuration(); ok {
		_spec.SetField(statsdailyscenicarea.FieldCarMaintainFaultDuration, field.TypeFloat32, value)
	}
	if value, ok := sdsauo.mutation.AddedCarMaintainFaultDuration(); ok {
		_spec.AddField(statsdailyscenicarea.FieldCarMaintainFaultDuration, field.TypeFloat32, value)
	}
	if value, ok := sdsauo.mutation.CarMaintainMileage(); ok {
		_spec.SetField(statsdailyscenicarea.FieldCarMaintainMileage, field.TypeFloat32, value)
	}
	if value, ok := sdsauo.mutation.AddedCarMaintainMileage(); ok {
		_spec.AddField(statsdailyscenicarea.FieldCarMaintainMileage, field.TypeFloat32, value)
	}
	if value, ok := sdsauo.mutation.CarMaintainFaultTimes(); ok {
		_spec.SetField(statsdailyscenicarea.FieldCarMaintainFaultTimes, field.TypeUint32, value)
	}
	if value, ok := sdsauo.mutation.AddedCarMaintainFaultTimes(); ok {
		_spec.AddField(statsdailyscenicarea.FieldCarMaintainFaultTimes, field.TypeUint32, value)
	}
	if value, ok := sdsauo.mutation.CarAlarmTimes(); ok {
		_spec.SetField(statsdailyscenicarea.FieldCarAlarmTimes, field.TypeInt, value)
	}
	if value, ok := sdsauo.mutation.AddedCarAlarmTimes(); ok {
		_spec.AddField(statsdailyscenicarea.FieldCarAlarmTimes, field.TypeInt, value)
	}
	if value, ok := sdsauo.mutation.StatsTime(); ok {
		_spec.SetField(statsdailyscenicarea.FieldStatsTime, field.TypeTime, value)
	}
	_node = &StatsDailyScenicArea{config: sdsauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sdsauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{statsdailyscenicarea.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sdsauo.mutation.done = true
	return _node, nil
}
