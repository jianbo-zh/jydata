// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jianbo-zh/jydata/database/ent/appversion"
)

// AppVersion is the model entity for the AppVersion schema.
type AppVersion struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 平台系统
	Platform string `json:"platform,omitempty"`
	// 应用名称
	AppName string `json:"app_name,omitempty"`
	// 版本号
	Version string `json:"version,omitempty"`
	// 升级说明
	Content string `json:"content,omitempty"`
	// 是否强制升级
	IsForceUpgrade bool `json:"is_force_upgrade,omitempty"`
	// 文件ID
	FileID int `json:"file_id,omitempty"`
	// 发布状态(1-预发布 2-正式发布 3-终止发布)
	State int `json:"state,omitempty"`
	// 发布时间
	PublishTime time.Time `json:"publish_time,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime   time.Time `json:"update_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppVersion) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case appversion.FieldIsForceUpgrade:
			values[i] = new(sql.NullBool)
		case appversion.FieldID, appversion.FieldFileID, appversion.FieldState:
			values[i] = new(sql.NullInt64)
		case appversion.FieldPlatform, appversion.FieldAppName, appversion.FieldVersion, appversion.FieldContent:
			values[i] = new(sql.NullString)
		case appversion.FieldPublishTime, appversion.FieldCreateTime, appversion.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppVersion fields.
func (av *AppVersion) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appversion.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			av.ID = int(value.Int64)
		case appversion.FieldPlatform:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform", values[i])
			} else if value.Valid {
				av.Platform = value.String
			}
		case appversion.FieldAppName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_name", values[i])
			} else if value.Valid {
				av.AppName = value.String
			}
		case appversion.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				av.Version = value.String
			}
		case appversion.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				av.Content = value.String
			}
		case appversion.FieldIsForceUpgrade:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_force_upgrade", values[i])
			} else if value.Valid {
				av.IsForceUpgrade = value.Bool
			}
		case appversion.FieldFileID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field file_id", values[i])
			} else if value.Valid {
				av.FileID = int(value.Int64)
			}
		case appversion.FieldState:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				av.State = int(value.Int64)
			}
		case appversion.FieldPublishTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field publish_time", values[i])
			} else if value.Valid {
				av.PublishTime = value.Time
			}
		case appversion.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				av.CreateTime = value.Time
			}
		case appversion.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				av.UpdateTime = value.Time
			}
		default:
			av.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AppVersion.
// This includes values selected through modifiers, order, etc.
func (av *AppVersion) Value(name string) (ent.Value, error) {
	return av.selectValues.Get(name)
}

// Update returns a builder for updating this AppVersion.
// Note that you need to call AppVersion.Unwrap() before calling this method if this AppVersion
// was returned from a transaction, and the transaction was committed or rolled back.
func (av *AppVersion) Update() *AppVersionUpdateOne {
	return NewAppVersionClient(av.config).UpdateOne(av)
}

// Unwrap unwraps the AppVersion entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (av *AppVersion) Unwrap() *AppVersion {
	_tx, ok := av.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppVersion is not a transactional entity")
	}
	av.config.driver = _tx.drv
	return av
}

// String implements the fmt.Stringer.
func (av *AppVersion) String() string {
	var builder strings.Builder
	builder.WriteString("AppVersion(")
	builder.WriteString(fmt.Sprintf("id=%v, ", av.ID))
	builder.WriteString("platform=")
	builder.WriteString(av.Platform)
	builder.WriteString(", ")
	builder.WriteString("app_name=")
	builder.WriteString(av.AppName)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(av.Version)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(av.Content)
	builder.WriteString(", ")
	builder.WriteString("is_force_upgrade=")
	builder.WriteString(fmt.Sprintf("%v", av.IsForceUpgrade))
	builder.WriteString(", ")
	builder.WriteString("file_id=")
	builder.WriteString(fmt.Sprintf("%v", av.FileID))
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(fmt.Sprintf("%v", av.State))
	builder.WriteString(", ")
	builder.WriteString("publish_time=")
	builder.WriteString(av.PublishTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(av.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(av.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AppVersions is a parsable slice of AppVersion.
type AppVersions []*AppVersion
