// Code generated by ent, DO NOT EDIT.

package appversion

import (
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldLTE(FieldID, id))
}

// Platform applies equality check predicate on the "platform" field. It's identical to PlatformEQ.
func Platform(v string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldEQ(FieldPlatform, v))
}

// AppName applies equality check predicate on the "app_name" field. It's identical to AppNameEQ.
func AppName(v string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldEQ(FieldAppName, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldEQ(FieldVersion, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldEQ(FieldContent, v))
}

// IsForceUpgrade applies equality check predicate on the "is_force_upgrade" field. It's identical to IsForceUpgradeEQ.
func IsForceUpgrade(v bool) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldEQ(FieldIsForceUpgrade, v))
}

// FileID applies equality check predicate on the "file_id" field. It's identical to FileIDEQ.
func FileID(v int) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldEQ(FieldFileID, v))
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v int) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldEQ(FieldState, v))
}

// PublishTime applies equality check predicate on the "publish_time" field. It's identical to PublishTimeEQ.
func PublishTime(v time.Time) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldEQ(FieldPublishTime, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldEQ(FieldUpdateTime, v))
}

// PlatformEQ applies the EQ predicate on the "platform" field.
func PlatformEQ(v string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldEQ(FieldPlatform, v))
}

// PlatformNEQ applies the NEQ predicate on the "platform" field.
func PlatformNEQ(v string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldNEQ(FieldPlatform, v))
}

// PlatformIn applies the In predicate on the "platform" field.
func PlatformIn(vs ...string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldIn(FieldPlatform, vs...))
}

// PlatformNotIn applies the NotIn predicate on the "platform" field.
func PlatformNotIn(vs ...string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldNotIn(FieldPlatform, vs...))
}

// PlatformGT applies the GT predicate on the "platform" field.
func PlatformGT(v string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldGT(FieldPlatform, v))
}

// PlatformGTE applies the GTE predicate on the "platform" field.
func PlatformGTE(v string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldGTE(FieldPlatform, v))
}

// PlatformLT applies the LT predicate on the "platform" field.
func PlatformLT(v string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldLT(FieldPlatform, v))
}

// PlatformLTE applies the LTE predicate on the "platform" field.
func PlatformLTE(v string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldLTE(FieldPlatform, v))
}

// PlatformContains applies the Contains predicate on the "platform" field.
func PlatformContains(v string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldContains(FieldPlatform, v))
}

// PlatformHasPrefix applies the HasPrefix predicate on the "platform" field.
func PlatformHasPrefix(v string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldHasPrefix(FieldPlatform, v))
}

// PlatformHasSuffix applies the HasSuffix predicate on the "platform" field.
func PlatformHasSuffix(v string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldHasSuffix(FieldPlatform, v))
}

// PlatformEqualFold applies the EqualFold predicate on the "platform" field.
func PlatformEqualFold(v string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldEqualFold(FieldPlatform, v))
}

// PlatformContainsFold applies the ContainsFold predicate on the "platform" field.
func PlatformContainsFold(v string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldContainsFold(FieldPlatform, v))
}

// AppNameEQ applies the EQ predicate on the "app_name" field.
func AppNameEQ(v string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldEQ(FieldAppName, v))
}

// AppNameNEQ applies the NEQ predicate on the "app_name" field.
func AppNameNEQ(v string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldNEQ(FieldAppName, v))
}

// AppNameIn applies the In predicate on the "app_name" field.
func AppNameIn(vs ...string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldIn(FieldAppName, vs...))
}

// AppNameNotIn applies the NotIn predicate on the "app_name" field.
func AppNameNotIn(vs ...string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldNotIn(FieldAppName, vs...))
}

// AppNameGT applies the GT predicate on the "app_name" field.
func AppNameGT(v string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldGT(FieldAppName, v))
}

// AppNameGTE applies the GTE predicate on the "app_name" field.
func AppNameGTE(v string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldGTE(FieldAppName, v))
}

// AppNameLT applies the LT predicate on the "app_name" field.
func AppNameLT(v string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldLT(FieldAppName, v))
}

// AppNameLTE applies the LTE predicate on the "app_name" field.
func AppNameLTE(v string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldLTE(FieldAppName, v))
}

// AppNameContains applies the Contains predicate on the "app_name" field.
func AppNameContains(v string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldContains(FieldAppName, v))
}

// AppNameHasPrefix applies the HasPrefix predicate on the "app_name" field.
func AppNameHasPrefix(v string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldHasPrefix(FieldAppName, v))
}

// AppNameHasSuffix applies the HasSuffix predicate on the "app_name" field.
func AppNameHasSuffix(v string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldHasSuffix(FieldAppName, v))
}

// AppNameEqualFold applies the EqualFold predicate on the "app_name" field.
func AppNameEqualFold(v string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldEqualFold(FieldAppName, v))
}

// AppNameContainsFold applies the ContainsFold predicate on the "app_name" field.
func AppNameContainsFold(v string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldContainsFold(FieldAppName, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldLTE(FieldVersion, v))
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldContains(FieldVersion, v))
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldHasPrefix(FieldVersion, v))
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldHasSuffix(FieldVersion, v))
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldEqualFold(FieldVersion, v))
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldContainsFold(FieldVersion, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldHasSuffix(FieldContent, v))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldContainsFold(FieldContent, v))
}

// IsForceUpgradeEQ applies the EQ predicate on the "is_force_upgrade" field.
func IsForceUpgradeEQ(v bool) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldEQ(FieldIsForceUpgrade, v))
}

// IsForceUpgradeNEQ applies the NEQ predicate on the "is_force_upgrade" field.
func IsForceUpgradeNEQ(v bool) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldNEQ(FieldIsForceUpgrade, v))
}

// FileIDEQ applies the EQ predicate on the "file_id" field.
func FileIDEQ(v int) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldEQ(FieldFileID, v))
}

// FileIDNEQ applies the NEQ predicate on the "file_id" field.
func FileIDNEQ(v int) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldNEQ(FieldFileID, v))
}

// FileIDIn applies the In predicate on the "file_id" field.
func FileIDIn(vs ...int) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldIn(FieldFileID, vs...))
}

// FileIDNotIn applies the NotIn predicate on the "file_id" field.
func FileIDNotIn(vs ...int) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldNotIn(FieldFileID, vs...))
}

// FileIDGT applies the GT predicate on the "file_id" field.
func FileIDGT(v int) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldGT(FieldFileID, v))
}

// FileIDGTE applies the GTE predicate on the "file_id" field.
func FileIDGTE(v int) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldGTE(FieldFileID, v))
}

// FileIDLT applies the LT predicate on the "file_id" field.
func FileIDLT(v int) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldLT(FieldFileID, v))
}

// FileIDLTE applies the LTE predicate on the "file_id" field.
func FileIDLTE(v int) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldLTE(FieldFileID, v))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v int) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v int) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...int) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...int) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v int) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v int) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v int) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v int) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldLTE(FieldState, v))
}

// PublishTimeEQ applies the EQ predicate on the "publish_time" field.
func PublishTimeEQ(v time.Time) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldEQ(FieldPublishTime, v))
}

// PublishTimeNEQ applies the NEQ predicate on the "publish_time" field.
func PublishTimeNEQ(v time.Time) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldNEQ(FieldPublishTime, v))
}

// PublishTimeIn applies the In predicate on the "publish_time" field.
func PublishTimeIn(vs ...time.Time) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldIn(FieldPublishTime, vs...))
}

// PublishTimeNotIn applies the NotIn predicate on the "publish_time" field.
func PublishTimeNotIn(vs ...time.Time) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldNotIn(FieldPublishTime, vs...))
}

// PublishTimeGT applies the GT predicate on the "publish_time" field.
func PublishTimeGT(v time.Time) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldGT(FieldPublishTime, v))
}

// PublishTimeGTE applies the GTE predicate on the "publish_time" field.
func PublishTimeGTE(v time.Time) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldGTE(FieldPublishTime, v))
}

// PublishTimeLT applies the LT predicate on the "publish_time" field.
func PublishTimeLT(v time.Time) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldLT(FieldPublishTime, v))
}

// PublishTimeLTE applies the LTE predicate on the "publish_time" field.
func PublishTimeLTE(v time.Time) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldLTE(FieldPublishTime, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.AppVersion {
	return predicate.AppVersion(sql.FieldLTE(FieldUpdateTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AppVersion) predicate.AppVersion {
	return predicate.AppVersion(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AppVersion) predicate.AppVersion {
	return predicate.AppVersion(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AppVersion) predicate.AppVersion {
	return predicate.AppVersion(sql.NotPredicates(p))
}
