// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"github.com/jianbo-zh/jydata/database/ent/orderextendflight"
	"github.com/jianbo-zh/jydata/database/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderExtendFlightDelete is the builder for deleting a OrderExtendFlight entity.
type OrderExtendFlightDelete struct {
	config
	hooks    []Hook
	mutation *OrderExtendFlightMutation
}

// Where appends a list predicates to the OrderExtendFlightDelete builder.
func (oefd *OrderExtendFlightDelete) Where(ps ...predicate.OrderExtendFlight) *OrderExtendFlightDelete {
	oefd.mutation.Where(ps...)
	return oefd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (oefd *OrderExtendFlightDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, oefd.sqlExec, oefd.mutation, oefd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (oefd *OrderExtendFlightDelete) ExecX(ctx context.Context) int {
	n, err := oefd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (oefd *OrderExtendFlightDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(orderextendflight.Table, sqlgraph.NewFieldSpec(orderextendflight.FieldID, field.TypeInt))
	if ps := oefd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, oefd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	oefd.mutation.done = true
	return affected, err
}

// OrderExtendFlightDeleteOne is the builder for deleting a single OrderExtendFlight entity.
type OrderExtendFlightDeleteOne struct {
	oefd *OrderExtendFlightDelete
}

// Where appends a list predicates to the OrderExtendFlightDelete builder.
func (oefdo *OrderExtendFlightDeleteOne) Where(ps ...predicate.OrderExtendFlight) *OrderExtendFlightDeleteOne {
	oefdo.oefd.mutation.Where(ps...)
	return oefdo
}

// Exec executes the deletion query.
func (oefdo *OrderExtendFlightDeleteOne) Exec(ctx context.Context) error {
	n, err := oefdo.oefd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{orderextendflight.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (oefdo *OrderExtendFlightDeleteOne) ExecX(ctx context.Context) {
	if err := oefdo.Exec(ctx); err != nil {
		panic(err)
	}
}
