// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jianbo-zh/jydata/database/ent/car"
	"github.com/jianbo-zh/jydata/database/ent/carsmodels"
	"github.com/jianbo-zh/jydata/database/ent/scenicarea"
)

// Car is the model entity for the Car schema.
type Car struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// DeleteTime holds the value of the "delete_time" field.
	DeleteTime time.Time `json:"delete_time,omitempty"`
	// 运营模式（1-租车模式 2-公交模式）
	OperationMode int `json:"operation_mode,omitempty"`
	// 车辆名称
	CarName string `json:"car_name,omitempty"`
	// 景区ID
	ScenicAreaID int `json:"scenic_area_id,omitempty"`
	// 设备ID
	DeviceID string `json:"device_id,omitempty"`
	// 车辆型号ID
	ModelID int `json:"model_id,omitempty"`
	// 车辆图片URL
	Images []int `json:"images,omitempty"`
	// 车牌号
	LicensePlate string `json:"license_plate,omitempty"`
	// 可乘坐人数
	Passengers int `json:"passengers,omitempty"`
	// 保留座位数
	ReservedSeats int `json:"reserved_seats,omitempty"`
	// 生产日期
	ProduceTime time.Time `json:"produce_time,omitempty"`
	// 电量阈值
	PowerThreshold int `json:"power_threshold,omitempty"`
	// 激活码
	ActivateCode string `json:"activate_code,omitempty"`
	// 1-未激活、3-运营中
	State int `json:"state,omitempty"`
	// 使用状态：1-空闲中、2-预约中、3-租用中、6-调度中
	UseState int `json:"use_state,omitempty"`
	// 驾驶状态：见proto
	DrivingState int `json:"driving_state,omitempty"`
	// 紧急状态(0-无紧急、1-紧急呼救)
	EmergencyState int `json:"emergency_state,omitempty"`
	// 绑定订单ID
	UseOrderID int `json:"use_order_id,omitempty"`
	// 调度任务ID
	DispatchTaskID int `json:"dispatch_task_id,omitempty"`
	// 班次任务ID
	UseFlightID int `json:"use_flight_id,omitempty"`
	// 绑定订单数
	BindOrderCount int `json:"bind_order_count,omitempty"`
	// 累积订单里程（米）
	TotalOrderMileage int `json:"total_order_mileage,omitempty"`
	// 累积订单使用时长（秒）
	TotalOrderTime int `json:"total_order_time,omitempty"`
	// 累积订单数
	TotalOrderCount int `json:"total_order_count,omitempty"`
	// 累积订单金额
	TotalOrderAmount int `json:"total_order_amount,omitempty"`
	// 剩余电量
	PowerRemaining int `json:"power_remaining,omitempty"`
	// 异常数量
	ErrorCount int `json:"error_count,omitempty"`
	// 当前异常
	ErrorMessage string `json:"error_message,omitempty"`
	// 是否删除（1-已删除、-1-未删除）
	IsDeleted int `json:"is_deleted,omitempty"`
	// 是否商用车辆(收费)
	IsCommercialCar int `json:"is_commercial_car,omitempty"`
	// 是否驾驶状态可用
	IsDrivingStateValid int `json:"is_driving_state_valid,omitempty"`
	// 地图版本
	MapVersion string `json:"map_version,omitempty"`
	// 当前地图版本类型
	NextMapVersion string `json:"next_map_version,omitempty"`
	// 地图版本类型
	NextMapVersionState string `json:"next_map_version_state,omitempty"`
	// 地图版本进度
	NextMapVersionProcess int `json:"next_map_version_process,omitempty"`
	// 车机版本
	GrAutoVersion string `json:"gr_auto_version,omitempty"`
	// CarUI版本
	GrUIVersion string `json:"gr_ui_version,omitempty"`
	// 车辆代理服务ID
	CarproxyID string `json:"carproxy_id,omitempty"`
	// Yokee扩展ID
	ExtendYokeeID *int `json:"extend_yokee_id,omitempty"`
	// 最大行驶速度(单位：m/s)
	MaxSpeedLimit float32 `json:"max_speed_limit,omitempty"`
	// 心跳时间
	AliveTime time.Time `json:"alive_time,omitempty"`
	// 激活时间
	RegisterTime time.Time `json:"register_time,omitempty"`
	// 驾驶状态更改时间
	DrivingStateTime time.Time `json:"driving_state_time,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CarQuery when eager-loading is set.
	Edges        CarEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CarEdges holds the relations/edges for other nodes in the graph.
type CarEdges struct {
	// BackgroundScenicArea holds the value of the background_scenic_area edge.
	BackgroundScenicArea *ScenicArea `json:"background_scenic_area,omitempty"`
	// CarsModels holds the value of the cars_models edge.
	CarsModels *CarsModels `json:"cars_models,omitempty"`
	// CarOperateLogs holds the value of the car_operate_logs edge.
	CarOperateLogs []*CarsOperateLog `json:"car_operate_logs,omitempty"`
	// Orders holds the value of the orders edge.
	Orders []*Order `json:"orders,omitempty"`
	// StatsHourlyCar holds the value of the stats_hourly_car edge.
	StatsHourlyCar []*StatsHourlyCar `json:"stats_hourly_car,omitempty"`
	// ScheTask holds the value of the sche_task edge.
	ScheTask []*ScheTask `json:"sche_task,omitempty"`
	// ConfigFiles holds the value of the config_files edge.
	ConfigFiles []*CarConfig `json:"config_files,omitempty"`
	// CarConfigs holds the value of the car_configs edge.
	CarConfigs []*CarConfigDownload `json:"car_configs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [8]bool
}

// BackgroundScenicAreaOrErr returns the BackgroundScenicArea value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CarEdges) BackgroundScenicAreaOrErr() (*ScenicArea, error) {
	if e.BackgroundScenicArea != nil {
		return e.BackgroundScenicArea, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: scenicarea.Label}
	}
	return nil, &NotLoadedError{edge: "background_scenic_area"}
}

// CarsModelsOrErr returns the CarsModels value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CarEdges) CarsModelsOrErr() (*CarsModels, error) {
	if e.CarsModels != nil {
		return e.CarsModels, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: carsmodels.Label}
	}
	return nil, &NotLoadedError{edge: "cars_models"}
}

// CarOperateLogsOrErr returns the CarOperateLogs value or an error if the edge
// was not loaded in eager-loading.
func (e CarEdges) CarOperateLogsOrErr() ([]*CarsOperateLog, error) {
	if e.loadedTypes[2] {
		return e.CarOperateLogs, nil
	}
	return nil, &NotLoadedError{edge: "car_operate_logs"}
}

// OrdersOrErr returns the Orders value or an error if the edge
// was not loaded in eager-loading.
func (e CarEdges) OrdersOrErr() ([]*Order, error) {
	if e.loadedTypes[3] {
		return e.Orders, nil
	}
	return nil, &NotLoadedError{edge: "orders"}
}

// StatsHourlyCarOrErr returns the StatsHourlyCar value or an error if the edge
// was not loaded in eager-loading.
func (e CarEdges) StatsHourlyCarOrErr() ([]*StatsHourlyCar, error) {
	if e.loadedTypes[4] {
		return e.StatsHourlyCar, nil
	}
	return nil, &NotLoadedError{edge: "stats_hourly_car"}
}

// ScheTaskOrErr returns the ScheTask value or an error if the edge
// was not loaded in eager-loading.
func (e CarEdges) ScheTaskOrErr() ([]*ScheTask, error) {
	if e.loadedTypes[5] {
		return e.ScheTask, nil
	}
	return nil, &NotLoadedError{edge: "sche_task"}
}

// ConfigFilesOrErr returns the ConfigFiles value or an error if the edge
// was not loaded in eager-loading.
func (e CarEdges) ConfigFilesOrErr() ([]*CarConfig, error) {
	if e.loadedTypes[6] {
		return e.ConfigFiles, nil
	}
	return nil, &NotLoadedError{edge: "config_files"}
}

// CarConfigsOrErr returns the CarConfigs value or an error if the edge
// was not loaded in eager-loading.
func (e CarEdges) CarConfigsOrErr() ([]*CarConfigDownload, error) {
	if e.loadedTypes[7] {
		return e.CarConfigs, nil
	}
	return nil, &NotLoadedError{edge: "car_configs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Car) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case car.FieldImages:
			values[i] = new([]byte)
		case car.FieldMaxSpeedLimit:
			values[i] = new(sql.NullFloat64)
		case car.FieldID, car.FieldOperationMode, car.FieldScenicAreaID, car.FieldModelID, car.FieldPassengers, car.FieldReservedSeats, car.FieldPowerThreshold, car.FieldState, car.FieldUseState, car.FieldDrivingState, car.FieldEmergencyState, car.FieldUseOrderID, car.FieldDispatchTaskID, car.FieldUseFlightID, car.FieldBindOrderCount, car.FieldTotalOrderMileage, car.FieldTotalOrderTime, car.FieldTotalOrderCount, car.FieldTotalOrderAmount, car.FieldPowerRemaining, car.FieldErrorCount, car.FieldIsDeleted, car.FieldIsCommercialCar, car.FieldIsDrivingStateValid, car.FieldNextMapVersionProcess, car.FieldExtendYokeeID:
			values[i] = new(sql.NullInt64)
		case car.FieldCarName, car.FieldDeviceID, car.FieldLicensePlate, car.FieldActivateCode, car.FieldErrorMessage, car.FieldMapVersion, car.FieldNextMapVersion, car.FieldNextMapVersionState, car.FieldGrAutoVersion, car.FieldGrUIVersion, car.FieldCarproxyID:
			values[i] = new(sql.NullString)
		case car.FieldDeleteTime, car.FieldProduceTime, car.FieldAliveTime, car.FieldRegisterTime, car.FieldDrivingStateTime, car.FieldCreateTime, car.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Car fields.
func (c *Car) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case car.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case car.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				c.DeleteTime = value.Time
			}
		case car.FieldOperationMode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field operation_mode", values[i])
			} else if value.Valid {
				c.OperationMode = int(value.Int64)
			}
		case car.FieldCarName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field car_name", values[i])
			} else if value.Valid {
				c.CarName = value.String
			}
		case car.FieldScenicAreaID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field scenic_area_id", values[i])
			} else if value.Valid {
				c.ScenicAreaID = int(value.Int64)
			}
		case car.FieldDeviceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device_id", values[i])
			} else if value.Valid {
				c.DeviceID = value.String
			}
		case car.FieldModelID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field model_id", values[i])
			} else if value.Valid {
				c.ModelID = int(value.Int64)
			}
		case car.FieldImages:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field images", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.Images); err != nil {
					return fmt.Errorf("unmarshal field images: %w", err)
				}
			}
		case car.FieldLicensePlate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field license_plate", values[i])
			} else if value.Valid {
				c.LicensePlate = value.String
			}
		case car.FieldPassengers:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field passengers", values[i])
			} else if value.Valid {
				c.Passengers = int(value.Int64)
			}
		case car.FieldReservedSeats:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field reserved_seats", values[i])
			} else if value.Valid {
				c.ReservedSeats = int(value.Int64)
			}
		case car.FieldProduceTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field produce_time", values[i])
			} else if value.Valid {
				c.ProduceTime = value.Time
			}
		case car.FieldPowerThreshold:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field power_threshold", values[i])
			} else if value.Valid {
				c.PowerThreshold = int(value.Int64)
			}
		case car.FieldActivateCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field activate_code", values[i])
			} else if value.Valid {
				c.ActivateCode = value.String
			}
		case car.FieldState:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				c.State = int(value.Int64)
			}
		case car.FieldUseState:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field use_state", values[i])
			} else if value.Valid {
				c.UseState = int(value.Int64)
			}
		case car.FieldDrivingState:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field driving_state", values[i])
			} else if value.Valid {
				c.DrivingState = int(value.Int64)
			}
		case car.FieldEmergencyState:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field emergency_state", values[i])
			} else if value.Valid {
				c.EmergencyState = int(value.Int64)
			}
		case car.FieldUseOrderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field use_order_id", values[i])
			} else if value.Valid {
				c.UseOrderID = int(value.Int64)
			}
		case car.FieldDispatchTaskID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dispatch_task_id", values[i])
			} else if value.Valid {
				c.DispatchTaskID = int(value.Int64)
			}
		case car.FieldUseFlightID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field use_flight_id", values[i])
			} else if value.Valid {
				c.UseFlightID = int(value.Int64)
			}
		case car.FieldBindOrderCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field bind_order_count", values[i])
			} else if value.Valid {
				c.BindOrderCount = int(value.Int64)
			}
		case car.FieldTotalOrderMileage:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_order_mileage", values[i])
			} else if value.Valid {
				c.TotalOrderMileage = int(value.Int64)
			}
		case car.FieldTotalOrderTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_order_time", values[i])
			} else if value.Valid {
				c.TotalOrderTime = int(value.Int64)
			}
		case car.FieldTotalOrderCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_order_count", values[i])
			} else if value.Valid {
				c.TotalOrderCount = int(value.Int64)
			}
		case car.FieldTotalOrderAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_order_amount", values[i])
			} else if value.Valid {
				c.TotalOrderAmount = int(value.Int64)
			}
		case car.FieldPowerRemaining:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field power_remaining", values[i])
			} else if value.Valid {
				c.PowerRemaining = int(value.Int64)
			}
		case car.FieldErrorCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field error_count", values[i])
			} else if value.Valid {
				c.ErrorCount = int(value.Int64)
			}
		case car.FieldErrorMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error_message", values[i])
			} else if value.Valid {
				c.ErrorMessage = value.String
			}
		case car.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_deleted", values[i])
			} else if value.Valid {
				c.IsDeleted = int(value.Int64)
			}
		case car.FieldIsCommercialCar:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_commercial_car", values[i])
			} else if value.Valid {
				c.IsCommercialCar = int(value.Int64)
			}
		case car.FieldIsDrivingStateValid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_driving_state_valid", values[i])
			} else if value.Valid {
				c.IsDrivingStateValid = int(value.Int64)
			}
		case car.FieldMapVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field map_version", values[i])
			} else if value.Valid {
				c.MapVersion = value.String
			}
		case car.FieldNextMapVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field next_map_version", values[i])
			} else if value.Valid {
				c.NextMapVersion = value.String
			}
		case car.FieldNextMapVersionState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field next_map_version_state", values[i])
			} else if value.Valid {
				c.NextMapVersionState = value.String
			}
		case car.FieldNextMapVersionProcess:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field next_map_version_process", values[i])
			} else if value.Valid {
				c.NextMapVersionProcess = int(value.Int64)
			}
		case car.FieldGrAutoVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gr_auto_version", values[i])
			} else if value.Valid {
				c.GrAutoVersion = value.String
			}
		case car.FieldGrUIVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gr_ui_version", values[i])
			} else if value.Valid {
				c.GrUIVersion = value.String
			}
		case car.FieldCarproxyID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field carproxy_id", values[i])
			} else if value.Valid {
				c.CarproxyID = value.String
			}
		case car.FieldExtendYokeeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field extend_yokee_id", values[i])
			} else if value.Valid {
				c.ExtendYokeeID = new(int)
				*c.ExtendYokeeID = int(value.Int64)
			}
		case car.FieldMaxSpeedLimit:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field max_speed_limit", values[i])
			} else if value.Valid {
				c.MaxSpeedLimit = float32(value.Float64)
			}
		case car.FieldAliveTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field alive_time", values[i])
			} else if value.Valid {
				c.AliveTime = value.Time
			}
		case car.FieldRegisterTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field register_time", values[i])
			} else if value.Valid {
				c.RegisterTime = value.Time
			}
		case car.FieldDrivingStateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field driving_state_time", values[i])
			} else if value.Valid {
				c.DrivingStateTime = value.Time
			}
		case car.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				c.CreateTime = value.Time
			}
		case car.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				c.UpdateTime = value.Time
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Car.
// This includes values selected through modifiers, order, etc.
func (c *Car) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryBackgroundScenicArea queries the "background_scenic_area" edge of the Car entity.
func (c *Car) QueryBackgroundScenicArea() *ScenicAreaQuery {
	return NewCarClient(c.config).QueryBackgroundScenicArea(c)
}

// QueryCarsModels queries the "cars_models" edge of the Car entity.
func (c *Car) QueryCarsModels() *CarsModelsQuery {
	return NewCarClient(c.config).QueryCarsModels(c)
}

// QueryCarOperateLogs queries the "car_operate_logs" edge of the Car entity.
func (c *Car) QueryCarOperateLogs() *CarsOperateLogQuery {
	return NewCarClient(c.config).QueryCarOperateLogs(c)
}

// QueryOrders queries the "orders" edge of the Car entity.
func (c *Car) QueryOrders() *OrderQuery {
	return NewCarClient(c.config).QueryOrders(c)
}

// QueryStatsHourlyCar queries the "stats_hourly_car" edge of the Car entity.
func (c *Car) QueryStatsHourlyCar() *StatsHourlyCarQuery {
	return NewCarClient(c.config).QueryStatsHourlyCar(c)
}

// QueryScheTask queries the "sche_task" edge of the Car entity.
func (c *Car) QueryScheTask() *ScheTaskQuery {
	return NewCarClient(c.config).QueryScheTask(c)
}

// QueryConfigFiles queries the "config_files" edge of the Car entity.
func (c *Car) QueryConfigFiles() *CarConfigQuery {
	return NewCarClient(c.config).QueryConfigFiles(c)
}

// QueryCarConfigs queries the "car_configs" edge of the Car entity.
func (c *Car) QueryCarConfigs() *CarConfigDownloadQuery {
	return NewCarClient(c.config).QueryCarConfigs(c)
}

// Update returns a builder for updating this Car.
// Note that you need to call Car.Unwrap() before calling this method if this Car
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Car) Update() *CarUpdateOne {
	return NewCarClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Car entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Car) Unwrap() *Car {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Car is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Car) String() string {
	var builder strings.Builder
	builder.WriteString("Car(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("delete_time=")
	builder.WriteString(c.DeleteTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("operation_mode=")
	builder.WriteString(fmt.Sprintf("%v", c.OperationMode))
	builder.WriteString(", ")
	builder.WriteString("car_name=")
	builder.WriteString(c.CarName)
	builder.WriteString(", ")
	builder.WriteString("scenic_area_id=")
	builder.WriteString(fmt.Sprintf("%v", c.ScenicAreaID))
	builder.WriteString(", ")
	builder.WriteString("device_id=")
	builder.WriteString(c.DeviceID)
	builder.WriteString(", ")
	builder.WriteString("model_id=")
	builder.WriteString(fmt.Sprintf("%v", c.ModelID))
	builder.WriteString(", ")
	builder.WriteString("images=")
	builder.WriteString(fmt.Sprintf("%v", c.Images))
	builder.WriteString(", ")
	builder.WriteString("license_plate=")
	builder.WriteString(c.LicensePlate)
	builder.WriteString(", ")
	builder.WriteString("passengers=")
	builder.WriteString(fmt.Sprintf("%v", c.Passengers))
	builder.WriteString(", ")
	builder.WriteString("reserved_seats=")
	builder.WriteString(fmt.Sprintf("%v", c.ReservedSeats))
	builder.WriteString(", ")
	builder.WriteString("produce_time=")
	builder.WriteString(c.ProduceTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("power_threshold=")
	builder.WriteString(fmt.Sprintf("%v", c.PowerThreshold))
	builder.WriteString(", ")
	builder.WriteString("activate_code=")
	builder.WriteString(c.ActivateCode)
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(fmt.Sprintf("%v", c.State))
	builder.WriteString(", ")
	builder.WriteString("use_state=")
	builder.WriteString(fmt.Sprintf("%v", c.UseState))
	builder.WriteString(", ")
	builder.WriteString("driving_state=")
	builder.WriteString(fmt.Sprintf("%v", c.DrivingState))
	builder.WriteString(", ")
	builder.WriteString("emergency_state=")
	builder.WriteString(fmt.Sprintf("%v", c.EmergencyState))
	builder.WriteString(", ")
	builder.WriteString("use_order_id=")
	builder.WriteString(fmt.Sprintf("%v", c.UseOrderID))
	builder.WriteString(", ")
	builder.WriteString("dispatch_task_id=")
	builder.WriteString(fmt.Sprintf("%v", c.DispatchTaskID))
	builder.WriteString(", ")
	builder.WriteString("use_flight_id=")
	builder.WriteString(fmt.Sprintf("%v", c.UseFlightID))
	builder.WriteString(", ")
	builder.WriteString("bind_order_count=")
	builder.WriteString(fmt.Sprintf("%v", c.BindOrderCount))
	builder.WriteString(", ")
	builder.WriteString("total_order_mileage=")
	builder.WriteString(fmt.Sprintf("%v", c.TotalOrderMileage))
	builder.WriteString(", ")
	builder.WriteString("total_order_time=")
	builder.WriteString(fmt.Sprintf("%v", c.TotalOrderTime))
	builder.WriteString(", ")
	builder.WriteString("total_order_count=")
	builder.WriteString(fmt.Sprintf("%v", c.TotalOrderCount))
	builder.WriteString(", ")
	builder.WriteString("total_order_amount=")
	builder.WriteString(fmt.Sprintf("%v", c.TotalOrderAmount))
	builder.WriteString(", ")
	builder.WriteString("power_remaining=")
	builder.WriteString(fmt.Sprintf("%v", c.PowerRemaining))
	builder.WriteString(", ")
	builder.WriteString("error_count=")
	builder.WriteString(fmt.Sprintf("%v", c.ErrorCount))
	builder.WriteString(", ")
	builder.WriteString("error_message=")
	builder.WriteString(c.ErrorMessage)
	builder.WriteString(", ")
	builder.WriteString("is_deleted=")
	builder.WriteString(fmt.Sprintf("%v", c.IsDeleted))
	builder.WriteString(", ")
	builder.WriteString("is_commercial_car=")
	builder.WriteString(fmt.Sprintf("%v", c.IsCommercialCar))
	builder.WriteString(", ")
	builder.WriteString("is_driving_state_valid=")
	builder.WriteString(fmt.Sprintf("%v", c.IsDrivingStateValid))
	builder.WriteString(", ")
	builder.WriteString("map_version=")
	builder.WriteString(c.MapVersion)
	builder.WriteString(", ")
	builder.WriteString("next_map_version=")
	builder.WriteString(c.NextMapVersion)
	builder.WriteString(", ")
	builder.WriteString("next_map_version_state=")
	builder.WriteString(c.NextMapVersionState)
	builder.WriteString(", ")
	builder.WriteString("next_map_version_process=")
	builder.WriteString(fmt.Sprintf("%v", c.NextMapVersionProcess))
	builder.WriteString(", ")
	builder.WriteString("gr_auto_version=")
	builder.WriteString(c.GrAutoVersion)
	builder.WriteString(", ")
	builder.WriteString("gr_ui_version=")
	builder.WriteString(c.GrUIVersion)
	builder.WriteString(", ")
	builder.WriteString("carproxy_id=")
	builder.WriteString(c.CarproxyID)
	builder.WriteString(", ")
	if v := c.ExtendYokeeID; v != nil {
		builder.WriteString("extend_yokee_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("max_speed_limit=")
	builder.WriteString(fmt.Sprintf("%v", c.MaxSpeedLimit))
	builder.WriteString(", ")
	builder.WriteString("alive_time=")
	builder.WriteString(c.AliveTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("register_time=")
	builder.WriteString(c.RegisterTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("driving_state_time=")
	builder.WriteString(c.DrivingStateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(c.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(c.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Cars is a parsable slice of Car.
type Cars []*Car
