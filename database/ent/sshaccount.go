// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jianbo-zh/jydata/database/ent/sshaccount"
)

// SshAccount is the model entity for the SshAccount schema.
type SshAccount struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// DeleteTime holds the value of the "delete_time" field.
	DeleteTime time.Time `json:"delete_time,omitempty"`
	// 账号类型（pgyvisitor-蒲公英）
	Type string `json:"type,omitempty"`
	// Ssh账号
	Username string `json:"username,omitempty"`
	// Ssh密码
	Password string `json:"password,omitempty"`
	// 景区ID
	ScenicAreaID *int `json:"scenic_area_id,omitempty"`
	// 车辆ID
	CarID *int `json:"car_id,omitempty"`
	// 使用状态（1-空闲中 2-已使用）
	State int `json:"state,omitempty"`
	// 使用时间
	UseTime time.Time `json:"use_time,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime   time.Time `json:"update_time,omitempty"`
	selectValues sql.SelectValues

	// StaticField defined by template.
	ScenicAreaName string `json:"scenic_area_name,omitempty"`
	CarName        string `json:"car_name,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SshAccount) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sshaccount.FieldID, sshaccount.FieldScenicAreaID, sshaccount.FieldCarID, sshaccount.FieldState:
			values[i] = new(sql.NullInt64)
		case sshaccount.FieldType, sshaccount.FieldUsername, sshaccount.FieldPassword:
			values[i] = new(sql.NullString)
		case sshaccount.FieldDeleteTime, sshaccount.FieldUseTime, sshaccount.FieldCreateTime, sshaccount.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SshAccount fields.
func (sa *SshAccount) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sshaccount.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sa.ID = int(value.Int64)
		case sshaccount.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				sa.DeleteTime = value.Time
			}
		case sshaccount.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				sa.Type = value.String
			}
		case sshaccount.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				sa.Username = value.String
			}
		case sshaccount.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				sa.Password = value.String
			}
		case sshaccount.FieldScenicAreaID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field scenic_area_id", values[i])
			} else if value.Valid {
				sa.ScenicAreaID = new(int)
				*sa.ScenicAreaID = int(value.Int64)
			}
		case sshaccount.FieldCarID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field car_id", values[i])
			} else if value.Valid {
				sa.CarID = new(int)
				*sa.CarID = int(value.Int64)
			}
		case sshaccount.FieldState:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				sa.State = int(value.Int64)
			}
		case sshaccount.FieldUseTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field use_time", values[i])
			} else if value.Valid {
				sa.UseTime = value.Time
			}
		case sshaccount.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				sa.CreateTime = value.Time
			}
		case sshaccount.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				sa.UpdateTime = value.Time
			}
		default:
			sa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SshAccount.
// This includes values selected through modifiers, order, etc.
func (sa *SshAccount) Value(name string) (ent.Value, error) {
	return sa.selectValues.Get(name)
}

// Update returns a builder for updating this SshAccount.
// Note that you need to call SshAccount.Unwrap() before calling this method if this SshAccount
// was returned from a transaction, and the transaction was committed or rolled back.
func (sa *SshAccount) Update() *SshAccountUpdateOne {
	return NewSshAccountClient(sa.config).UpdateOne(sa)
}

// Unwrap unwraps the SshAccount entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sa *SshAccount) Unwrap() *SshAccount {
	_tx, ok := sa.config.driver.(*txDriver)
	if !ok {
		panic("ent: SshAccount is not a transactional entity")
	}
	sa.config.driver = _tx.drv
	return sa
}

// String implements the fmt.Stringer.
func (sa *SshAccount) String() string {
	var builder strings.Builder
	builder.WriteString("SshAccount(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sa.ID))
	builder.WriteString("delete_time=")
	builder.WriteString(sa.DeleteTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(sa.Type)
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(sa.Username)
	builder.WriteString(", ")
	builder.WriteString("password=")
	builder.WriteString(sa.Password)
	builder.WriteString(", ")
	if v := sa.ScenicAreaID; v != nil {
		builder.WriteString("scenic_area_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := sa.CarID; v != nil {
		builder.WriteString("car_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(fmt.Sprintf("%v", sa.State))
	builder.WriteString(", ")
	builder.WriteString("use_time=")
	builder.WriteString(sa.UseTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(sa.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(sa.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SshAccounts is a parsable slice of SshAccount.
type SshAccounts []*SshAccount
