// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/carsmodels"
	"github.com/jianbo-zh/jydata/database/ent/carsmodelsgroups"
	"github.com/jianbo-zh/jydata/database/ent/carsmodelsgroupsparams"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CarsModelsGroupsParams is the model entity for the CarsModelsGroupsParams schema.
type CarsModelsGroupsParams struct {
	config `json:"-"`
	// ID of the ent.
	// ID
	ID int `json:"id,omitempty"`
	// 型号ID
	ModelID int `json:"model_id,omitempty"`
	// 分组ID
	GroupID int `json:"group_id,omitempty"`
	// 参数描述
	ParamRemark string `json:"param_remark,omitempty"`
	// 参数名称
	ParamName string `json:"param_name,omitempty"`
	// 参数类型
	ParamType carsmodelsgroupsparams.ParamType `json:"param_type,omitempty"`
	// 取值范围
	ValueRange string `json:"value_range,omitempty"`
	// 状态：0 - 不可用，1 - 可用
	Status int `json:"status,omitempty"`
	// 是否已删除：0 - 正常，1 - 已删除
	IsDeleted int `json:"is_deleted,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CarsModelsGroupsParamsQuery when eager-loading is set.
	Edges        CarsModelsGroupsParamsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CarsModelsGroupsParamsEdges holds the relations/edges for other nodes in the graph.
type CarsModelsGroupsParamsEdges struct {
	// Model holds the value of the model edge.
	Model *CarsModels `json:"model,omitempty"`
	// Group holds the value of the group edge.
	Group *CarsModelsGroups `json:"group,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ModelOrErr returns the Model value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CarsModelsGroupsParamsEdges) ModelOrErr() (*CarsModels, error) {
	if e.Model != nil {
		return e.Model, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: carsmodels.Label}
	}
	return nil, &NotLoadedError{edge: "model"}
}

// GroupOrErr returns the Group value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CarsModelsGroupsParamsEdges) GroupOrErr() (*CarsModelsGroups, error) {
	if e.Group != nil {
		return e.Group, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: carsmodelsgroups.Label}
	}
	return nil, &NotLoadedError{edge: "group"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CarsModelsGroupsParams) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case carsmodelsgroupsparams.FieldID, carsmodelsgroupsparams.FieldModelID, carsmodelsgroupsparams.FieldGroupID, carsmodelsgroupsparams.FieldStatus, carsmodelsgroupsparams.FieldIsDeleted:
			values[i] = new(sql.NullInt64)
		case carsmodelsgroupsparams.FieldParamRemark, carsmodelsgroupsparams.FieldParamName, carsmodelsgroupsparams.FieldParamType, carsmodelsgroupsparams.FieldValueRange:
			values[i] = new(sql.NullString)
		case carsmodelsgroupsparams.FieldCreateTime, carsmodelsgroupsparams.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CarsModelsGroupsParams fields.
func (cmgp *CarsModelsGroupsParams) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case carsmodelsgroupsparams.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cmgp.ID = int(value.Int64)
		case carsmodelsgroupsparams.FieldModelID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field model_id", values[i])
			} else if value.Valid {
				cmgp.ModelID = int(value.Int64)
			}
		case carsmodelsgroupsparams.FieldGroupID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field group_id", values[i])
			} else if value.Valid {
				cmgp.GroupID = int(value.Int64)
			}
		case carsmodelsgroupsparams.FieldParamRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field param_remark", values[i])
			} else if value.Valid {
				cmgp.ParamRemark = value.String
			}
		case carsmodelsgroupsparams.FieldParamName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field param_name", values[i])
			} else if value.Valid {
				cmgp.ParamName = value.String
			}
		case carsmodelsgroupsparams.FieldParamType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field param_type", values[i])
			} else if value.Valid {
				cmgp.ParamType = carsmodelsgroupsparams.ParamType(value.String)
			}
		case carsmodelsgroupsparams.FieldValueRange:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value_range", values[i])
			} else if value.Valid {
				cmgp.ValueRange = value.String
			}
		case carsmodelsgroupsparams.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				cmgp.Status = int(value.Int64)
			}
		case carsmodelsgroupsparams.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_deleted", values[i])
			} else if value.Valid {
				cmgp.IsDeleted = int(value.Int64)
			}
		case carsmodelsgroupsparams.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				cmgp.CreateTime = value.Time
			}
		case carsmodelsgroupsparams.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				cmgp.UpdateTime = value.Time
			}
		default:
			cmgp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CarsModelsGroupsParams.
// This includes values selected through modifiers, order, etc.
func (cmgp *CarsModelsGroupsParams) Value(name string) (ent.Value, error) {
	return cmgp.selectValues.Get(name)
}

// QueryModel queries the "model" edge of the CarsModelsGroupsParams entity.
func (cmgp *CarsModelsGroupsParams) QueryModel() *CarsModelsQuery {
	return NewCarsModelsGroupsParamsClient(cmgp.config).QueryModel(cmgp)
}

// QueryGroup queries the "group" edge of the CarsModelsGroupsParams entity.
func (cmgp *CarsModelsGroupsParams) QueryGroup() *CarsModelsGroupsQuery {
	return NewCarsModelsGroupsParamsClient(cmgp.config).QueryGroup(cmgp)
}

// Update returns a builder for updating this CarsModelsGroupsParams.
// Note that you need to call CarsModelsGroupsParams.Unwrap() before calling this method if this CarsModelsGroupsParams
// was returned from a transaction, and the transaction was committed or rolled back.
func (cmgp *CarsModelsGroupsParams) Update() *CarsModelsGroupsParamsUpdateOne {
	return NewCarsModelsGroupsParamsClient(cmgp.config).UpdateOne(cmgp)
}

// Unwrap unwraps the CarsModelsGroupsParams entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cmgp *CarsModelsGroupsParams) Unwrap() *CarsModelsGroupsParams {
	_tx, ok := cmgp.config.driver.(*txDriver)
	if !ok {
		panic("ent: CarsModelsGroupsParams is not a transactional entity")
	}
	cmgp.config.driver = _tx.drv
	return cmgp
}

// String implements the fmt.Stringer.
func (cmgp *CarsModelsGroupsParams) String() string {
	var builder strings.Builder
	builder.WriteString("CarsModelsGroupsParams(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cmgp.ID))
	builder.WriteString("model_id=")
	builder.WriteString(fmt.Sprintf("%v", cmgp.ModelID))
	builder.WriteString(", ")
	builder.WriteString("group_id=")
	builder.WriteString(fmt.Sprintf("%v", cmgp.GroupID))
	builder.WriteString(", ")
	builder.WriteString("param_remark=")
	builder.WriteString(cmgp.ParamRemark)
	builder.WriteString(", ")
	builder.WriteString("param_name=")
	builder.WriteString(cmgp.ParamName)
	builder.WriteString(", ")
	builder.WriteString("param_type=")
	builder.WriteString(fmt.Sprintf("%v", cmgp.ParamType))
	builder.WriteString(", ")
	builder.WriteString("value_range=")
	builder.WriteString(cmgp.ValueRange)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", cmgp.Status))
	builder.WriteString(", ")
	builder.WriteString("is_deleted=")
	builder.WriteString(fmt.Sprintf("%v", cmgp.IsDeleted))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(cmgp.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(cmgp.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CarsModelsGroupsParamsSlice is a parsable slice of CarsModelsGroupsParams.
type CarsModelsGroupsParamsSlice []*CarsModelsGroupsParams
