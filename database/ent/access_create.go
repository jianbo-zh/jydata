// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/access"
)

// AccessCreate is the builder for creating a Access entity.
type AccessCreate struct {
	config
	mutation *AccessMutation
	hooks    []Hook
}

// SetPid sets the "pid" field.
func (ac *AccessCreate) SetPid(i int) *AccessCreate {
	ac.mutation.SetPid(i)
	return ac
}

// SetCode sets the "code" field.
func (ac *AccessCreate) SetCode(s string) *AccessCreate {
	ac.mutation.SetCode(s)
	return ac
}

// SetName sets the "name" field.
func (ac *AccessCreate) SetName(s string) *AccessCreate {
	ac.mutation.SetName(s)
	return ac
}

// SetURL sets the "url" field.
func (ac *AccessCreate) SetURL(s string) *AccessCreate {
	ac.mutation.SetURL(s)
	return ac
}

// SetSort sets the "sort" field.
func (ac *AccessCreate) SetSort(i int) *AccessCreate {
	ac.mutation.SetSort(i)
	return ac
}

// SetCreateTime sets the "create_time" field.
func (ac *AccessCreate) SetCreateTime(t time.Time) *AccessCreate {
	ac.mutation.SetCreateTime(t)
	return ac
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ac *AccessCreate) SetNillableCreateTime(t *time.Time) *AccessCreate {
	if t != nil {
		ac.SetCreateTime(*t)
	}
	return ac
}

// SetUpdateTime sets the "update_time" field.
func (ac *AccessCreate) SetUpdateTime(t time.Time) *AccessCreate {
	ac.mutation.SetUpdateTime(t)
	return ac
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ac *AccessCreate) SetNillableUpdateTime(t *time.Time) *AccessCreate {
	if t != nil {
		ac.SetUpdateTime(*t)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *AccessCreate) SetID(i int) *AccessCreate {
	ac.mutation.SetID(i)
	return ac
}

// Mutation returns the AccessMutation object of the builder.
func (ac *AccessCreate) Mutation() *AccessMutation {
	return ac.mutation
}

// Save creates the Access in the database.
func (ac *AccessCreate) Save(ctx context.Context) (*Access, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AccessCreate) SaveX(ctx context.Context) *Access {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AccessCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AccessCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AccessCreate) defaults() {
	if _, ok := ac.mutation.CreateTime(); !ok {
		v := access.DefaultCreateTime()
		ac.mutation.SetCreateTime(v)
	}
	if _, ok := ac.mutation.UpdateTime(); !ok {
		v := access.DefaultUpdateTime()
		ac.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AccessCreate) check() error {
	if _, ok := ac.mutation.Pid(); !ok {
		return &ValidationError{Name: "pid", err: errors.New(`ent: missing required field "Access.pid"`)}
	}
	if _, ok := ac.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "Access.code"`)}
	}
	if _, ok := ac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Access.name"`)}
	}
	if _, ok := ac.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "Access.url"`)}
	}
	if _, ok := ac.mutation.Sort(); !ok {
		return &ValidationError{Name: "sort", err: errors.New(`ent: missing required field "Access.sort"`)}
	}
	if _, ok := ac.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Access.create_time"`)}
	}
	if _, ok := ac.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Access.update_time"`)}
	}
	return nil
}

func (ac *AccessCreate) sqlSave(ctx context.Context) (*Access, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AccessCreate) createSpec() (*Access, *sqlgraph.CreateSpec) {
	var (
		_node = &Access{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(access.Table, sqlgraph.NewFieldSpec(access.FieldID, field.TypeInt))
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.Pid(); ok {
		_spec.SetField(access.FieldPid, field.TypeInt, value)
		_node.Pid = value
	}
	if value, ok := ac.mutation.Code(); ok {
		_spec.SetField(access.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := ac.mutation.Name(); ok {
		_spec.SetField(access.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ac.mutation.URL(); ok {
		_spec.SetField(access.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := ac.mutation.Sort(); ok {
		_spec.SetField(access.FieldSort, field.TypeInt, value)
		_node.Sort = value
	}
	if value, ok := ac.mutation.CreateTime(); ok {
		_spec.SetField(access.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := ac.mutation.UpdateTime(); ok {
		_spec.SetField(access.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// AccessCreateBulk is the builder for creating many Access entities in bulk.
type AccessCreateBulk struct {
	config
	err      error
	builders []*AccessCreate
}

// Save creates the Access entities in the database.
func (acb *AccessCreateBulk) Save(ctx context.Context) ([]*Access, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Access, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AccessMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AccessCreateBulk) SaveX(ctx context.Context) []*Access {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AccessCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AccessCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
