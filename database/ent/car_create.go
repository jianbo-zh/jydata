// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/car"
	"github.com/jianbo-zh/jydata/database/ent/carconfig"
	"github.com/jianbo-zh/jydata/database/ent/carconfigdownload"
	"github.com/jianbo-zh/jydata/database/ent/carsmodels"
	"github.com/jianbo-zh/jydata/database/ent/carsoperatelog"
	"github.com/jianbo-zh/jydata/database/ent/order"
	"github.com/jianbo-zh/jydata/database/ent/scenicarea"
	"github.com/jianbo-zh/jydata/database/ent/schetask"
	"github.com/jianbo-zh/jydata/database/ent/statshourlycar"
)

// CarCreate is the builder for creating a Car entity.
type CarCreate struct {
	config
	mutation *CarMutation
	hooks    []Hook
}

// SetDeleteTime sets the "delete_time" field.
func (cc *CarCreate) SetDeleteTime(t time.Time) *CarCreate {
	cc.mutation.SetDeleteTime(t)
	return cc
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (cc *CarCreate) SetNillableDeleteTime(t *time.Time) *CarCreate {
	if t != nil {
		cc.SetDeleteTime(*t)
	}
	return cc
}

// SetOperationMode sets the "operation_mode" field.
func (cc *CarCreate) SetOperationMode(i int) *CarCreate {
	cc.mutation.SetOperationMode(i)
	return cc
}

// SetNillableOperationMode sets the "operation_mode" field if the given value is not nil.
func (cc *CarCreate) SetNillableOperationMode(i *int) *CarCreate {
	if i != nil {
		cc.SetOperationMode(*i)
	}
	return cc
}

// SetCarName sets the "car_name" field.
func (cc *CarCreate) SetCarName(s string) *CarCreate {
	cc.mutation.SetCarName(s)
	return cc
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (cc *CarCreate) SetScenicAreaID(i int) *CarCreate {
	cc.mutation.SetScenicAreaID(i)
	return cc
}

// SetDeviceID sets the "device_id" field.
func (cc *CarCreate) SetDeviceID(s string) *CarCreate {
	cc.mutation.SetDeviceID(s)
	return cc
}

// SetModelID sets the "model_id" field.
func (cc *CarCreate) SetModelID(i int) *CarCreate {
	cc.mutation.SetModelID(i)
	return cc
}

// SetImages sets the "images" field.
func (cc *CarCreate) SetImages(i []int) *CarCreate {
	cc.mutation.SetImages(i)
	return cc
}

// SetLicensePlate sets the "license_plate" field.
func (cc *CarCreate) SetLicensePlate(s string) *CarCreate {
	cc.mutation.SetLicensePlate(s)
	return cc
}

// SetPassengers sets the "passengers" field.
func (cc *CarCreate) SetPassengers(i int) *CarCreate {
	cc.mutation.SetPassengers(i)
	return cc
}

// SetReservedSeats sets the "reserved_seats" field.
func (cc *CarCreate) SetReservedSeats(i int) *CarCreate {
	cc.mutation.SetReservedSeats(i)
	return cc
}

// SetNillableReservedSeats sets the "reserved_seats" field if the given value is not nil.
func (cc *CarCreate) SetNillableReservedSeats(i *int) *CarCreate {
	if i != nil {
		cc.SetReservedSeats(*i)
	}
	return cc
}

// SetProduceTime sets the "produce_time" field.
func (cc *CarCreate) SetProduceTime(t time.Time) *CarCreate {
	cc.mutation.SetProduceTime(t)
	return cc
}

// SetPowerThreshold sets the "power_threshold" field.
func (cc *CarCreate) SetPowerThreshold(i int) *CarCreate {
	cc.mutation.SetPowerThreshold(i)
	return cc
}

// SetActivateCode sets the "activate_code" field.
func (cc *CarCreate) SetActivateCode(s string) *CarCreate {
	cc.mutation.SetActivateCode(s)
	return cc
}

// SetState sets the "state" field.
func (cc *CarCreate) SetState(i int) *CarCreate {
	cc.mutation.SetState(i)
	return cc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (cc *CarCreate) SetNillableState(i *int) *CarCreate {
	if i != nil {
		cc.SetState(*i)
	}
	return cc
}

// SetUseState sets the "use_state" field.
func (cc *CarCreate) SetUseState(i int) *CarCreate {
	cc.mutation.SetUseState(i)
	return cc
}

// SetNillableUseState sets the "use_state" field if the given value is not nil.
func (cc *CarCreate) SetNillableUseState(i *int) *CarCreate {
	if i != nil {
		cc.SetUseState(*i)
	}
	return cc
}

// SetDrivingState sets the "driving_state" field.
func (cc *CarCreate) SetDrivingState(i int) *CarCreate {
	cc.mutation.SetDrivingState(i)
	return cc
}

// SetNillableDrivingState sets the "driving_state" field if the given value is not nil.
func (cc *CarCreate) SetNillableDrivingState(i *int) *CarCreate {
	if i != nil {
		cc.SetDrivingState(*i)
	}
	return cc
}

// SetEmergencyState sets the "emergency_state" field.
func (cc *CarCreate) SetEmergencyState(i int) *CarCreate {
	cc.mutation.SetEmergencyState(i)
	return cc
}

// SetNillableEmergencyState sets the "emergency_state" field if the given value is not nil.
func (cc *CarCreate) SetNillableEmergencyState(i *int) *CarCreate {
	if i != nil {
		cc.SetEmergencyState(*i)
	}
	return cc
}

// SetUseOrderID sets the "use_order_id" field.
func (cc *CarCreate) SetUseOrderID(i int) *CarCreate {
	cc.mutation.SetUseOrderID(i)
	return cc
}

// SetNillableUseOrderID sets the "use_order_id" field if the given value is not nil.
func (cc *CarCreate) SetNillableUseOrderID(i *int) *CarCreate {
	if i != nil {
		cc.SetUseOrderID(*i)
	}
	return cc
}

// SetUseFlightID sets the "use_flight_id" field.
func (cc *CarCreate) SetUseFlightID(i int) *CarCreate {
	cc.mutation.SetUseFlightID(i)
	return cc
}

// SetNillableUseFlightID sets the "use_flight_id" field if the given value is not nil.
func (cc *CarCreate) SetNillableUseFlightID(i *int) *CarCreate {
	if i != nil {
		cc.SetUseFlightID(*i)
	}
	return cc
}

// SetDispatchTaskID sets the "dispatch_task_id" field.
func (cc *CarCreate) SetDispatchTaskID(i int) *CarCreate {
	cc.mutation.SetDispatchTaskID(i)
	return cc
}

// SetNillableDispatchTaskID sets the "dispatch_task_id" field if the given value is not nil.
func (cc *CarCreate) SetNillableDispatchTaskID(i *int) *CarCreate {
	if i != nil {
		cc.SetDispatchTaskID(*i)
	}
	return cc
}

// SetDispatchScheMode sets the "dispatch_sche_mode" field.
func (cc *CarCreate) SetDispatchScheMode(i int) *CarCreate {
	cc.mutation.SetDispatchScheMode(i)
	return cc
}

// SetNillableDispatchScheMode sets the "dispatch_sche_mode" field if the given value is not nil.
func (cc *CarCreate) SetNillableDispatchScheMode(i *int) *CarCreate {
	if i != nil {
		cc.SetDispatchScheMode(*i)
	}
	return cc
}

// SetBindOrderCount sets the "bind_order_count" field.
func (cc *CarCreate) SetBindOrderCount(i int) *CarCreate {
	cc.mutation.SetBindOrderCount(i)
	return cc
}

// SetNillableBindOrderCount sets the "bind_order_count" field if the given value is not nil.
func (cc *CarCreate) SetNillableBindOrderCount(i *int) *CarCreate {
	if i != nil {
		cc.SetBindOrderCount(*i)
	}
	return cc
}

// SetTotalOrderMileage sets the "total_order_mileage" field.
func (cc *CarCreate) SetTotalOrderMileage(i int) *CarCreate {
	cc.mutation.SetTotalOrderMileage(i)
	return cc
}

// SetNillableTotalOrderMileage sets the "total_order_mileage" field if the given value is not nil.
func (cc *CarCreate) SetNillableTotalOrderMileage(i *int) *CarCreate {
	if i != nil {
		cc.SetTotalOrderMileage(*i)
	}
	return cc
}

// SetTotalOrderTime sets the "total_order_time" field.
func (cc *CarCreate) SetTotalOrderTime(i int) *CarCreate {
	cc.mutation.SetTotalOrderTime(i)
	return cc
}

// SetNillableTotalOrderTime sets the "total_order_time" field if the given value is not nil.
func (cc *CarCreate) SetNillableTotalOrderTime(i *int) *CarCreate {
	if i != nil {
		cc.SetTotalOrderTime(*i)
	}
	return cc
}

// SetTotalOrderCount sets the "total_order_count" field.
func (cc *CarCreate) SetTotalOrderCount(i int) *CarCreate {
	cc.mutation.SetTotalOrderCount(i)
	return cc
}

// SetNillableTotalOrderCount sets the "total_order_count" field if the given value is not nil.
func (cc *CarCreate) SetNillableTotalOrderCount(i *int) *CarCreate {
	if i != nil {
		cc.SetTotalOrderCount(*i)
	}
	return cc
}

// SetTotalOrderAmount sets the "total_order_amount" field.
func (cc *CarCreate) SetTotalOrderAmount(i int) *CarCreate {
	cc.mutation.SetTotalOrderAmount(i)
	return cc
}

// SetNillableTotalOrderAmount sets the "total_order_amount" field if the given value is not nil.
func (cc *CarCreate) SetNillableTotalOrderAmount(i *int) *CarCreate {
	if i != nil {
		cc.SetTotalOrderAmount(*i)
	}
	return cc
}

// SetPowerRemaining sets the "power_remaining" field.
func (cc *CarCreate) SetPowerRemaining(i int) *CarCreate {
	cc.mutation.SetPowerRemaining(i)
	return cc
}

// SetNillablePowerRemaining sets the "power_remaining" field if the given value is not nil.
func (cc *CarCreate) SetNillablePowerRemaining(i *int) *CarCreate {
	if i != nil {
		cc.SetPowerRemaining(*i)
	}
	return cc
}

// SetErrorCount sets the "error_count" field.
func (cc *CarCreate) SetErrorCount(i int) *CarCreate {
	cc.mutation.SetErrorCount(i)
	return cc
}

// SetNillableErrorCount sets the "error_count" field if the given value is not nil.
func (cc *CarCreate) SetNillableErrorCount(i *int) *CarCreate {
	if i != nil {
		cc.SetErrorCount(*i)
	}
	return cc
}

// SetErrorMessage sets the "error_message" field.
func (cc *CarCreate) SetErrorMessage(s string) *CarCreate {
	cc.mutation.SetErrorMessage(s)
	return cc
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (cc *CarCreate) SetNillableErrorMessage(s *string) *CarCreate {
	if s != nil {
		cc.SetErrorMessage(*s)
	}
	return cc
}

// SetIsDeleted sets the "is_deleted" field.
func (cc *CarCreate) SetIsDeleted(i int) *CarCreate {
	cc.mutation.SetIsDeleted(i)
	return cc
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (cc *CarCreate) SetNillableIsDeleted(i *int) *CarCreate {
	if i != nil {
		cc.SetIsDeleted(*i)
	}
	return cc
}

// SetIsCommercialCar sets the "is_commercial_car" field.
func (cc *CarCreate) SetIsCommercialCar(i int) *CarCreate {
	cc.mutation.SetIsCommercialCar(i)
	return cc
}

// SetNillableIsCommercialCar sets the "is_commercial_car" field if the given value is not nil.
func (cc *CarCreate) SetNillableIsCommercialCar(i *int) *CarCreate {
	if i != nil {
		cc.SetIsCommercialCar(*i)
	}
	return cc
}

// SetIsDrivingStateValid sets the "is_driving_state_valid" field.
func (cc *CarCreate) SetIsDrivingStateValid(i int) *CarCreate {
	cc.mutation.SetIsDrivingStateValid(i)
	return cc
}

// SetNillableIsDrivingStateValid sets the "is_driving_state_valid" field if the given value is not nil.
func (cc *CarCreate) SetNillableIsDrivingStateValid(i *int) *CarCreate {
	if i != nil {
		cc.SetIsDrivingStateValid(*i)
	}
	return cc
}

// SetMapVersion sets the "map_version" field.
func (cc *CarCreate) SetMapVersion(s string) *CarCreate {
	cc.mutation.SetMapVersion(s)
	return cc
}

// SetNillableMapVersion sets the "map_version" field if the given value is not nil.
func (cc *CarCreate) SetNillableMapVersion(s *string) *CarCreate {
	if s != nil {
		cc.SetMapVersion(*s)
	}
	return cc
}

// SetNextMapVersion sets the "next_map_version" field.
func (cc *CarCreate) SetNextMapVersion(s string) *CarCreate {
	cc.mutation.SetNextMapVersion(s)
	return cc
}

// SetNillableNextMapVersion sets the "next_map_version" field if the given value is not nil.
func (cc *CarCreate) SetNillableNextMapVersion(s *string) *CarCreate {
	if s != nil {
		cc.SetNextMapVersion(*s)
	}
	return cc
}

// SetNextMapVersionState sets the "next_map_version_state" field.
func (cc *CarCreate) SetNextMapVersionState(s string) *CarCreate {
	cc.mutation.SetNextMapVersionState(s)
	return cc
}

// SetNillableNextMapVersionState sets the "next_map_version_state" field if the given value is not nil.
func (cc *CarCreate) SetNillableNextMapVersionState(s *string) *CarCreate {
	if s != nil {
		cc.SetNextMapVersionState(*s)
	}
	return cc
}

// SetNextMapVersionProcess sets the "next_map_version_process" field.
func (cc *CarCreate) SetNextMapVersionProcess(i int) *CarCreate {
	cc.mutation.SetNextMapVersionProcess(i)
	return cc
}

// SetNillableNextMapVersionProcess sets the "next_map_version_process" field if the given value is not nil.
func (cc *CarCreate) SetNillableNextMapVersionProcess(i *int) *CarCreate {
	if i != nil {
		cc.SetNextMapVersionProcess(*i)
	}
	return cc
}

// SetGrAutoVersion sets the "gr_auto_version" field.
func (cc *CarCreate) SetGrAutoVersion(s string) *CarCreate {
	cc.mutation.SetGrAutoVersion(s)
	return cc
}

// SetNillableGrAutoVersion sets the "gr_auto_version" field if the given value is not nil.
func (cc *CarCreate) SetNillableGrAutoVersion(s *string) *CarCreate {
	if s != nil {
		cc.SetGrAutoVersion(*s)
	}
	return cc
}

// SetGrUIVersion sets the "gr_ui_version" field.
func (cc *CarCreate) SetGrUIVersion(s string) *CarCreate {
	cc.mutation.SetGrUIVersion(s)
	return cc
}

// SetNillableGrUIVersion sets the "gr_ui_version" field if the given value is not nil.
func (cc *CarCreate) SetNillableGrUIVersion(s *string) *CarCreate {
	if s != nil {
		cc.SetGrUIVersion(*s)
	}
	return cc
}

// SetAllVersion sets the "all_version" field.
func (cc *CarCreate) SetAllVersion(s string) *CarCreate {
	cc.mutation.SetAllVersion(s)
	return cc
}

// SetNillableAllVersion sets the "all_version" field if the given value is not nil.
func (cc *CarCreate) SetNillableAllVersion(s *string) *CarCreate {
	if s != nil {
		cc.SetAllVersion(*s)
	}
	return cc
}

// SetCarproxyID sets the "carproxy_id" field.
func (cc *CarCreate) SetCarproxyID(s string) *CarCreate {
	cc.mutation.SetCarproxyID(s)
	return cc
}

// SetNillableCarproxyID sets the "carproxy_id" field if the given value is not nil.
func (cc *CarCreate) SetNillableCarproxyID(s *string) *CarCreate {
	if s != nil {
		cc.SetCarproxyID(*s)
	}
	return cc
}

// SetExtendYokeeID sets the "extend_yokee_id" field.
func (cc *CarCreate) SetExtendYokeeID(i int) *CarCreate {
	cc.mutation.SetExtendYokeeID(i)
	return cc
}

// SetNillableExtendYokeeID sets the "extend_yokee_id" field if the given value is not nil.
func (cc *CarCreate) SetNillableExtendYokeeID(i *int) *CarCreate {
	if i != nil {
		cc.SetExtendYokeeID(*i)
	}
	return cc
}

// SetMaxSpeedLimit sets the "max_speed_limit" field.
func (cc *CarCreate) SetMaxSpeedLimit(f float32) *CarCreate {
	cc.mutation.SetMaxSpeedLimit(f)
	return cc
}

// SetNillableMaxSpeedLimit sets the "max_speed_limit" field if the given value is not nil.
func (cc *CarCreate) SetNillableMaxSpeedLimit(f *float32) *CarCreate {
	if f != nil {
		cc.SetMaxSpeedLimit(*f)
	}
	return cc
}

// SetVin sets the "vin" field.
func (cc *CarCreate) SetVin(s string) *CarCreate {
	cc.mutation.SetVin(s)
	return cc
}

// SetNillableVin sets the "vin" field if the given value is not nil.
func (cc *CarCreate) SetNillableVin(s *string) *CarCreate {
	if s != nil {
		cc.SetVin(*s)
	}
	return cc
}

// SetAliveTime sets the "alive_time" field.
func (cc *CarCreate) SetAliveTime(t time.Time) *CarCreate {
	cc.mutation.SetAliveTime(t)
	return cc
}

// SetNillableAliveTime sets the "alive_time" field if the given value is not nil.
func (cc *CarCreate) SetNillableAliveTime(t *time.Time) *CarCreate {
	if t != nil {
		cc.SetAliveTime(*t)
	}
	return cc
}

// SetRegisterTime sets the "register_time" field.
func (cc *CarCreate) SetRegisterTime(t time.Time) *CarCreate {
	cc.mutation.SetRegisterTime(t)
	return cc
}

// SetNillableRegisterTime sets the "register_time" field if the given value is not nil.
func (cc *CarCreate) SetNillableRegisterTime(t *time.Time) *CarCreate {
	if t != nil {
		cc.SetRegisterTime(*t)
	}
	return cc
}

// SetDrivingStateTime sets the "driving_state_time" field.
func (cc *CarCreate) SetDrivingStateTime(t time.Time) *CarCreate {
	cc.mutation.SetDrivingStateTime(t)
	return cc
}

// SetNillableDrivingStateTime sets the "driving_state_time" field if the given value is not nil.
func (cc *CarCreate) SetNillableDrivingStateTime(t *time.Time) *CarCreate {
	if t != nil {
		cc.SetDrivingStateTime(*t)
	}
	return cc
}

// SetCreateTime sets the "create_time" field.
func (cc *CarCreate) SetCreateTime(t time.Time) *CarCreate {
	cc.mutation.SetCreateTime(t)
	return cc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (cc *CarCreate) SetNillableCreateTime(t *time.Time) *CarCreate {
	if t != nil {
		cc.SetCreateTime(*t)
	}
	return cc
}

// SetUpdateTime sets the "update_time" field.
func (cc *CarCreate) SetUpdateTime(t time.Time) *CarCreate {
	cc.mutation.SetUpdateTime(t)
	return cc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (cc *CarCreate) SetNillableUpdateTime(t *time.Time) *CarCreate {
	if t != nil {
		cc.SetUpdateTime(*t)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *CarCreate) SetID(i int) *CarCreate {
	cc.mutation.SetID(i)
	return cc
}

// SetBackgroundScenicAreaID sets the "background_scenic_area" edge to the ScenicArea entity by ID.
func (cc *CarCreate) SetBackgroundScenicAreaID(id int) *CarCreate {
	cc.mutation.SetBackgroundScenicAreaID(id)
	return cc
}

// SetBackgroundScenicArea sets the "background_scenic_area" edge to the ScenicArea entity.
func (cc *CarCreate) SetBackgroundScenicArea(s *ScenicArea) *CarCreate {
	return cc.SetBackgroundScenicAreaID(s.ID)
}

// SetCarsModelsID sets the "cars_models" edge to the CarsModels entity by ID.
func (cc *CarCreate) SetCarsModelsID(id int) *CarCreate {
	cc.mutation.SetCarsModelsID(id)
	return cc
}

// SetCarsModels sets the "cars_models" edge to the CarsModels entity.
func (cc *CarCreate) SetCarsModels(c *CarsModels) *CarCreate {
	return cc.SetCarsModelsID(c.ID)
}

// AddCarOperateLogIDs adds the "car_operate_logs" edge to the CarsOperateLog entity by IDs.
func (cc *CarCreate) AddCarOperateLogIDs(ids ...int) *CarCreate {
	cc.mutation.AddCarOperateLogIDs(ids...)
	return cc
}

// AddCarOperateLogs adds the "car_operate_logs" edges to the CarsOperateLog entity.
func (cc *CarCreate) AddCarOperateLogs(c ...*CarsOperateLog) *CarCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddCarOperateLogIDs(ids...)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (cc *CarCreate) AddOrderIDs(ids ...int) *CarCreate {
	cc.mutation.AddOrderIDs(ids...)
	return cc
}

// AddOrders adds the "orders" edges to the Order entity.
func (cc *CarCreate) AddOrders(o ...*Order) *CarCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cc.AddOrderIDs(ids...)
}

// AddStatsHourlyCarIDs adds the "stats_hourly_car" edge to the StatsHourlyCar entity by IDs.
func (cc *CarCreate) AddStatsHourlyCarIDs(ids ...int) *CarCreate {
	cc.mutation.AddStatsHourlyCarIDs(ids...)
	return cc
}

// AddStatsHourlyCar adds the "stats_hourly_car" edges to the StatsHourlyCar entity.
func (cc *CarCreate) AddStatsHourlyCar(s ...*StatsHourlyCar) *CarCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cc.AddStatsHourlyCarIDs(ids...)
}

// AddScheTaskIDs adds the "sche_task" edge to the ScheTask entity by IDs.
func (cc *CarCreate) AddScheTaskIDs(ids ...int) *CarCreate {
	cc.mutation.AddScheTaskIDs(ids...)
	return cc
}

// AddScheTask adds the "sche_task" edges to the ScheTask entity.
func (cc *CarCreate) AddScheTask(s ...*ScheTask) *CarCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cc.AddScheTaskIDs(ids...)
}

// AddConfigFileIDs adds the "config_files" edge to the CarConfig entity by IDs.
func (cc *CarCreate) AddConfigFileIDs(ids ...int) *CarCreate {
	cc.mutation.AddConfigFileIDs(ids...)
	return cc
}

// AddConfigFiles adds the "config_files" edges to the CarConfig entity.
func (cc *CarCreate) AddConfigFiles(c ...*CarConfig) *CarCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddConfigFileIDs(ids...)
}

// AddCarConfigIDs adds the "car_configs" edge to the CarConfigDownload entity by IDs.
func (cc *CarCreate) AddCarConfigIDs(ids ...int) *CarCreate {
	cc.mutation.AddCarConfigIDs(ids...)
	return cc
}

// AddCarConfigs adds the "car_configs" edges to the CarConfigDownload entity.
func (cc *CarCreate) AddCarConfigs(c ...*CarConfigDownload) *CarCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddCarConfigIDs(ids...)
}

// Mutation returns the CarMutation object of the builder.
func (cc *CarCreate) Mutation() *CarMutation {
	return cc.mutation
}

// Save creates the Car in the database.
func (cc *CarCreate) Save(ctx context.Context) (*Car, error) {
	if err := cc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CarCreate) SaveX(ctx context.Context) *Car {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CarCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CarCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CarCreate) defaults() error {
	if _, ok := cc.mutation.OperationMode(); !ok {
		v := car.DefaultOperationMode
		cc.mutation.SetOperationMode(v)
	}
	if _, ok := cc.mutation.ReservedSeats(); !ok {
		v := car.DefaultReservedSeats
		cc.mutation.SetReservedSeats(v)
	}
	if _, ok := cc.mutation.State(); !ok {
		v := car.DefaultState
		cc.mutation.SetState(v)
	}
	if _, ok := cc.mutation.UseState(); !ok {
		v := car.DefaultUseState
		cc.mutation.SetUseState(v)
	}
	if _, ok := cc.mutation.DrivingState(); !ok {
		v := car.DefaultDrivingState
		cc.mutation.SetDrivingState(v)
	}
	if _, ok := cc.mutation.EmergencyState(); !ok {
		v := car.DefaultEmergencyState
		cc.mutation.SetEmergencyState(v)
	}
	if _, ok := cc.mutation.UseOrderID(); !ok {
		v := car.DefaultUseOrderID
		cc.mutation.SetUseOrderID(v)
	}
	if _, ok := cc.mutation.UseFlightID(); !ok {
		v := car.DefaultUseFlightID
		cc.mutation.SetUseFlightID(v)
	}
	if _, ok := cc.mutation.DispatchTaskID(); !ok {
		v := car.DefaultDispatchTaskID
		cc.mutation.SetDispatchTaskID(v)
	}
	if _, ok := cc.mutation.DispatchScheMode(); !ok {
		v := car.DefaultDispatchScheMode
		cc.mutation.SetDispatchScheMode(v)
	}
	if _, ok := cc.mutation.BindOrderCount(); !ok {
		v := car.DefaultBindOrderCount
		cc.mutation.SetBindOrderCount(v)
	}
	if _, ok := cc.mutation.TotalOrderMileage(); !ok {
		v := car.DefaultTotalOrderMileage
		cc.mutation.SetTotalOrderMileage(v)
	}
	if _, ok := cc.mutation.TotalOrderTime(); !ok {
		v := car.DefaultTotalOrderTime
		cc.mutation.SetTotalOrderTime(v)
	}
	if _, ok := cc.mutation.TotalOrderCount(); !ok {
		v := car.DefaultTotalOrderCount
		cc.mutation.SetTotalOrderCount(v)
	}
	if _, ok := cc.mutation.TotalOrderAmount(); !ok {
		v := car.DefaultTotalOrderAmount
		cc.mutation.SetTotalOrderAmount(v)
	}
	if _, ok := cc.mutation.PowerRemaining(); !ok {
		v := car.DefaultPowerRemaining
		cc.mutation.SetPowerRemaining(v)
	}
	if _, ok := cc.mutation.ErrorCount(); !ok {
		v := car.DefaultErrorCount
		cc.mutation.SetErrorCount(v)
	}
	if _, ok := cc.mutation.ErrorMessage(); !ok {
		v := car.DefaultErrorMessage
		cc.mutation.SetErrorMessage(v)
	}
	if _, ok := cc.mutation.IsDeleted(); !ok {
		v := car.DefaultIsDeleted
		cc.mutation.SetIsDeleted(v)
	}
	if _, ok := cc.mutation.IsCommercialCar(); !ok {
		v := car.DefaultIsCommercialCar
		cc.mutation.SetIsCommercialCar(v)
	}
	if _, ok := cc.mutation.IsDrivingStateValid(); !ok {
		v := car.DefaultIsDrivingStateValid
		cc.mutation.SetIsDrivingStateValid(v)
	}
	if _, ok := cc.mutation.MapVersion(); !ok {
		v := car.DefaultMapVersion
		cc.mutation.SetMapVersion(v)
	}
	if _, ok := cc.mutation.NextMapVersion(); !ok {
		v := car.DefaultNextMapVersion
		cc.mutation.SetNextMapVersion(v)
	}
	if _, ok := cc.mutation.NextMapVersionState(); !ok {
		v := car.DefaultNextMapVersionState
		cc.mutation.SetNextMapVersionState(v)
	}
	if _, ok := cc.mutation.NextMapVersionProcess(); !ok {
		v := car.DefaultNextMapVersionProcess
		cc.mutation.SetNextMapVersionProcess(v)
	}
	if _, ok := cc.mutation.GrAutoVersion(); !ok {
		v := car.DefaultGrAutoVersion
		cc.mutation.SetGrAutoVersion(v)
	}
	if _, ok := cc.mutation.GrUIVersion(); !ok {
		v := car.DefaultGrUIVersion
		cc.mutation.SetGrUIVersion(v)
	}
	if _, ok := cc.mutation.AllVersion(); !ok {
		v := car.DefaultAllVersion
		cc.mutation.SetAllVersion(v)
	}
	if _, ok := cc.mutation.CarproxyID(); !ok {
		v := car.DefaultCarproxyID
		cc.mutation.SetCarproxyID(v)
	}
	if _, ok := cc.mutation.MaxSpeedLimit(); !ok {
		v := car.DefaultMaxSpeedLimit
		cc.mutation.SetMaxSpeedLimit(v)
	}
	if _, ok := cc.mutation.Vin(); !ok {
		v := car.DefaultVin
		cc.mutation.SetVin(v)
	}
	if _, ok := cc.mutation.CreateTime(); !ok {
		if car.DefaultCreateTime == nil {
			return fmt.Errorf("ent: uninitialized car.DefaultCreateTime (forgotten import ent/runtime?)")
		}
		v := car.DefaultCreateTime()
		cc.mutation.SetCreateTime(v)
	}
	if _, ok := cc.mutation.UpdateTime(); !ok {
		if car.DefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized car.DefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := car.DefaultUpdateTime()
		cc.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cc *CarCreate) check() error {
	if _, ok := cc.mutation.OperationMode(); !ok {
		return &ValidationError{Name: "operation_mode", err: errors.New(`ent: missing required field "Car.operation_mode"`)}
	}
	if _, ok := cc.mutation.CarName(); !ok {
		return &ValidationError{Name: "car_name", err: errors.New(`ent: missing required field "Car.car_name"`)}
	}
	if _, ok := cc.mutation.ScenicAreaID(); !ok {
		return &ValidationError{Name: "scenic_area_id", err: errors.New(`ent: missing required field "Car.scenic_area_id"`)}
	}
	if _, ok := cc.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device_id", err: errors.New(`ent: missing required field "Car.device_id"`)}
	}
	if _, ok := cc.mutation.ModelID(); !ok {
		return &ValidationError{Name: "model_id", err: errors.New(`ent: missing required field "Car.model_id"`)}
	}
	if _, ok := cc.mutation.Images(); !ok {
		return &ValidationError{Name: "images", err: errors.New(`ent: missing required field "Car.images"`)}
	}
	if _, ok := cc.mutation.LicensePlate(); !ok {
		return &ValidationError{Name: "license_plate", err: errors.New(`ent: missing required field "Car.license_plate"`)}
	}
	if _, ok := cc.mutation.Passengers(); !ok {
		return &ValidationError{Name: "passengers", err: errors.New(`ent: missing required field "Car.passengers"`)}
	}
	if _, ok := cc.mutation.ReservedSeats(); !ok {
		return &ValidationError{Name: "reserved_seats", err: errors.New(`ent: missing required field "Car.reserved_seats"`)}
	}
	if _, ok := cc.mutation.ProduceTime(); !ok {
		return &ValidationError{Name: "produce_time", err: errors.New(`ent: missing required field "Car.produce_time"`)}
	}
	if _, ok := cc.mutation.PowerThreshold(); !ok {
		return &ValidationError{Name: "power_threshold", err: errors.New(`ent: missing required field "Car.power_threshold"`)}
	}
	if _, ok := cc.mutation.ActivateCode(); !ok {
		return &ValidationError{Name: "activate_code", err: errors.New(`ent: missing required field "Car.activate_code"`)}
	}
	if _, ok := cc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "Car.state"`)}
	}
	if _, ok := cc.mutation.UseState(); !ok {
		return &ValidationError{Name: "use_state", err: errors.New(`ent: missing required field "Car.use_state"`)}
	}
	if _, ok := cc.mutation.DrivingState(); !ok {
		return &ValidationError{Name: "driving_state", err: errors.New(`ent: missing required field "Car.driving_state"`)}
	}
	if _, ok := cc.mutation.EmergencyState(); !ok {
		return &ValidationError{Name: "emergency_state", err: errors.New(`ent: missing required field "Car.emergency_state"`)}
	}
	if _, ok := cc.mutation.UseOrderID(); !ok {
		return &ValidationError{Name: "use_order_id", err: errors.New(`ent: missing required field "Car.use_order_id"`)}
	}
	if _, ok := cc.mutation.UseFlightID(); !ok {
		return &ValidationError{Name: "use_flight_id", err: errors.New(`ent: missing required field "Car.use_flight_id"`)}
	}
	if _, ok := cc.mutation.DispatchTaskID(); !ok {
		return &ValidationError{Name: "dispatch_task_id", err: errors.New(`ent: missing required field "Car.dispatch_task_id"`)}
	}
	if _, ok := cc.mutation.DispatchScheMode(); !ok {
		return &ValidationError{Name: "dispatch_sche_mode", err: errors.New(`ent: missing required field "Car.dispatch_sche_mode"`)}
	}
	if _, ok := cc.mutation.BindOrderCount(); !ok {
		return &ValidationError{Name: "bind_order_count", err: errors.New(`ent: missing required field "Car.bind_order_count"`)}
	}
	if _, ok := cc.mutation.TotalOrderMileage(); !ok {
		return &ValidationError{Name: "total_order_mileage", err: errors.New(`ent: missing required field "Car.total_order_mileage"`)}
	}
	if _, ok := cc.mutation.TotalOrderTime(); !ok {
		return &ValidationError{Name: "total_order_time", err: errors.New(`ent: missing required field "Car.total_order_time"`)}
	}
	if _, ok := cc.mutation.TotalOrderCount(); !ok {
		return &ValidationError{Name: "total_order_count", err: errors.New(`ent: missing required field "Car.total_order_count"`)}
	}
	if _, ok := cc.mutation.TotalOrderAmount(); !ok {
		return &ValidationError{Name: "total_order_amount", err: errors.New(`ent: missing required field "Car.total_order_amount"`)}
	}
	if _, ok := cc.mutation.PowerRemaining(); !ok {
		return &ValidationError{Name: "power_remaining", err: errors.New(`ent: missing required field "Car.power_remaining"`)}
	}
	if _, ok := cc.mutation.ErrorCount(); !ok {
		return &ValidationError{Name: "error_count", err: errors.New(`ent: missing required field "Car.error_count"`)}
	}
	if _, ok := cc.mutation.ErrorMessage(); !ok {
		return &ValidationError{Name: "error_message", err: errors.New(`ent: missing required field "Car.error_message"`)}
	}
	if _, ok := cc.mutation.IsDeleted(); !ok {
		return &ValidationError{Name: "is_deleted", err: errors.New(`ent: missing required field "Car.is_deleted"`)}
	}
	if _, ok := cc.mutation.IsCommercialCar(); !ok {
		return &ValidationError{Name: "is_commercial_car", err: errors.New(`ent: missing required field "Car.is_commercial_car"`)}
	}
	if _, ok := cc.mutation.IsDrivingStateValid(); !ok {
		return &ValidationError{Name: "is_driving_state_valid", err: errors.New(`ent: missing required field "Car.is_driving_state_valid"`)}
	}
	if _, ok := cc.mutation.MapVersion(); !ok {
		return &ValidationError{Name: "map_version", err: errors.New(`ent: missing required field "Car.map_version"`)}
	}
	if _, ok := cc.mutation.NextMapVersion(); !ok {
		return &ValidationError{Name: "next_map_version", err: errors.New(`ent: missing required field "Car.next_map_version"`)}
	}
	if _, ok := cc.mutation.NextMapVersionState(); !ok {
		return &ValidationError{Name: "next_map_version_state", err: errors.New(`ent: missing required field "Car.next_map_version_state"`)}
	}
	if _, ok := cc.mutation.NextMapVersionProcess(); !ok {
		return &ValidationError{Name: "next_map_version_process", err: errors.New(`ent: missing required field "Car.next_map_version_process"`)}
	}
	if _, ok := cc.mutation.GrAutoVersion(); !ok {
		return &ValidationError{Name: "gr_auto_version", err: errors.New(`ent: missing required field "Car.gr_auto_version"`)}
	}
	if _, ok := cc.mutation.GrUIVersion(); !ok {
		return &ValidationError{Name: "gr_ui_version", err: errors.New(`ent: missing required field "Car.gr_ui_version"`)}
	}
	if _, ok := cc.mutation.AllVersion(); !ok {
		return &ValidationError{Name: "all_version", err: errors.New(`ent: missing required field "Car.all_version"`)}
	}
	if _, ok := cc.mutation.CarproxyID(); !ok {
		return &ValidationError{Name: "carproxy_id", err: errors.New(`ent: missing required field "Car.carproxy_id"`)}
	}
	if _, ok := cc.mutation.MaxSpeedLimit(); !ok {
		return &ValidationError{Name: "max_speed_limit", err: errors.New(`ent: missing required field "Car.max_speed_limit"`)}
	}
	if _, ok := cc.mutation.Vin(); !ok {
		return &ValidationError{Name: "vin", err: errors.New(`ent: missing required field "Car.vin"`)}
	}
	if _, ok := cc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Car.create_time"`)}
	}
	if _, ok := cc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Car.update_time"`)}
	}
	if len(cc.mutation.BackgroundScenicAreaIDs()) == 0 {
		return &ValidationError{Name: "background_scenic_area", err: errors.New(`ent: missing required edge "Car.background_scenic_area"`)}
	}
	if len(cc.mutation.CarsModelsIDs()) == 0 {
		return &ValidationError{Name: "cars_models", err: errors.New(`ent: missing required edge "Car.cars_models"`)}
	}
	return nil
}

func (cc *CarCreate) sqlSave(ctx context.Context) (*Car, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CarCreate) createSpec() (*Car, *sqlgraph.CreateSpec) {
	var (
		_node = &Car{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(car.Table, sqlgraph.NewFieldSpec(car.FieldID, field.TypeInt))
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.DeleteTime(); ok {
		_spec.SetField(car.FieldDeleteTime, field.TypeTime, value)
		_node.DeleteTime = value
	}
	if value, ok := cc.mutation.OperationMode(); ok {
		_spec.SetField(car.FieldOperationMode, field.TypeInt, value)
		_node.OperationMode = value
	}
	if value, ok := cc.mutation.CarName(); ok {
		_spec.SetField(car.FieldCarName, field.TypeString, value)
		_node.CarName = value
	}
	if value, ok := cc.mutation.DeviceID(); ok {
		_spec.SetField(car.FieldDeviceID, field.TypeString, value)
		_node.DeviceID = value
	}
	if value, ok := cc.mutation.Images(); ok {
		_spec.SetField(car.FieldImages, field.TypeJSON, value)
		_node.Images = value
	}
	if value, ok := cc.mutation.LicensePlate(); ok {
		_spec.SetField(car.FieldLicensePlate, field.TypeString, value)
		_node.LicensePlate = value
	}
	if value, ok := cc.mutation.Passengers(); ok {
		_spec.SetField(car.FieldPassengers, field.TypeInt, value)
		_node.Passengers = value
	}
	if value, ok := cc.mutation.ReservedSeats(); ok {
		_spec.SetField(car.FieldReservedSeats, field.TypeInt, value)
		_node.ReservedSeats = value
	}
	if value, ok := cc.mutation.ProduceTime(); ok {
		_spec.SetField(car.FieldProduceTime, field.TypeTime, value)
		_node.ProduceTime = value
	}
	if value, ok := cc.mutation.PowerThreshold(); ok {
		_spec.SetField(car.FieldPowerThreshold, field.TypeInt, value)
		_node.PowerThreshold = value
	}
	if value, ok := cc.mutation.ActivateCode(); ok {
		_spec.SetField(car.FieldActivateCode, field.TypeString, value)
		_node.ActivateCode = value
	}
	if value, ok := cc.mutation.State(); ok {
		_spec.SetField(car.FieldState, field.TypeInt, value)
		_node.State = value
	}
	if value, ok := cc.mutation.UseState(); ok {
		_spec.SetField(car.FieldUseState, field.TypeInt, value)
		_node.UseState = value
	}
	if value, ok := cc.mutation.DrivingState(); ok {
		_spec.SetField(car.FieldDrivingState, field.TypeInt, value)
		_node.DrivingState = value
	}
	if value, ok := cc.mutation.EmergencyState(); ok {
		_spec.SetField(car.FieldEmergencyState, field.TypeInt, value)
		_node.EmergencyState = value
	}
	if value, ok := cc.mutation.UseOrderID(); ok {
		_spec.SetField(car.FieldUseOrderID, field.TypeInt, value)
		_node.UseOrderID = value
	}
	if value, ok := cc.mutation.UseFlightID(); ok {
		_spec.SetField(car.FieldUseFlightID, field.TypeInt, value)
		_node.UseFlightID = value
	}
	if value, ok := cc.mutation.DispatchTaskID(); ok {
		_spec.SetField(car.FieldDispatchTaskID, field.TypeInt, value)
		_node.DispatchTaskID = value
	}
	if value, ok := cc.mutation.DispatchScheMode(); ok {
		_spec.SetField(car.FieldDispatchScheMode, field.TypeInt, value)
		_node.DispatchScheMode = value
	}
	if value, ok := cc.mutation.BindOrderCount(); ok {
		_spec.SetField(car.FieldBindOrderCount, field.TypeInt, value)
		_node.BindOrderCount = value
	}
	if value, ok := cc.mutation.TotalOrderMileage(); ok {
		_spec.SetField(car.FieldTotalOrderMileage, field.TypeInt, value)
		_node.TotalOrderMileage = value
	}
	if value, ok := cc.mutation.TotalOrderTime(); ok {
		_spec.SetField(car.FieldTotalOrderTime, field.TypeInt, value)
		_node.TotalOrderTime = value
	}
	if value, ok := cc.mutation.TotalOrderCount(); ok {
		_spec.SetField(car.FieldTotalOrderCount, field.TypeInt, value)
		_node.TotalOrderCount = value
	}
	if value, ok := cc.mutation.TotalOrderAmount(); ok {
		_spec.SetField(car.FieldTotalOrderAmount, field.TypeInt, value)
		_node.TotalOrderAmount = value
	}
	if value, ok := cc.mutation.PowerRemaining(); ok {
		_spec.SetField(car.FieldPowerRemaining, field.TypeInt, value)
		_node.PowerRemaining = value
	}
	if value, ok := cc.mutation.ErrorCount(); ok {
		_spec.SetField(car.FieldErrorCount, field.TypeInt, value)
		_node.ErrorCount = value
	}
	if value, ok := cc.mutation.ErrorMessage(); ok {
		_spec.SetField(car.FieldErrorMessage, field.TypeString, value)
		_node.ErrorMessage = value
	}
	if value, ok := cc.mutation.IsDeleted(); ok {
		_spec.SetField(car.FieldIsDeleted, field.TypeInt, value)
		_node.IsDeleted = value
	}
	if value, ok := cc.mutation.IsCommercialCar(); ok {
		_spec.SetField(car.FieldIsCommercialCar, field.TypeInt, value)
		_node.IsCommercialCar = value
	}
	if value, ok := cc.mutation.IsDrivingStateValid(); ok {
		_spec.SetField(car.FieldIsDrivingStateValid, field.TypeInt, value)
		_node.IsDrivingStateValid = value
	}
	if value, ok := cc.mutation.MapVersion(); ok {
		_spec.SetField(car.FieldMapVersion, field.TypeString, value)
		_node.MapVersion = value
	}
	if value, ok := cc.mutation.NextMapVersion(); ok {
		_spec.SetField(car.FieldNextMapVersion, field.TypeString, value)
		_node.NextMapVersion = value
	}
	if value, ok := cc.mutation.NextMapVersionState(); ok {
		_spec.SetField(car.FieldNextMapVersionState, field.TypeString, value)
		_node.NextMapVersionState = value
	}
	if value, ok := cc.mutation.NextMapVersionProcess(); ok {
		_spec.SetField(car.FieldNextMapVersionProcess, field.TypeInt, value)
		_node.NextMapVersionProcess = value
	}
	if value, ok := cc.mutation.GrAutoVersion(); ok {
		_spec.SetField(car.FieldGrAutoVersion, field.TypeString, value)
		_node.GrAutoVersion = value
	}
	if value, ok := cc.mutation.GrUIVersion(); ok {
		_spec.SetField(car.FieldGrUIVersion, field.TypeString, value)
		_node.GrUIVersion = value
	}
	if value, ok := cc.mutation.AllVersion(); ok {
		_spec.SetField(car.FieldAllVersion, field.TypeString, value)
		_node.AllVersion = value
	}
	if value, ok := cc.mutation.CarproxyID(); ok {
		_spec.SetField(car.FieldCarproxyID, field.TypeString, value)
		_node.CarproxyID = value
	}
	if value, ok := cc.mutation.ExtendYokeeID(); ok {
		_spec.SetField(car.FieldExtendYokeeID, field.TypeInt, value)
		_node.ExtendYokeeID = &value
	}
	if value, ok := cc.mutation.MaxSpeedLimit(); ok {
		_spec.SetField(car.FieldMaxSpeedLimit, field.TypeFloat32, value)
		_node.MaxSpeedLimit = value
	}
	if value, ok := cc.mutation.Vin(); ok {
		_spec.SetField(car.FieldVin, field.TypeString, value)
		_node.Vin = value
	}
	if value, ok := cc.mutation.AliveTime(); ok {
		_spec.SetField(car.FieldAliveTime, field.TypeTime, value)
		_node.AliveTime = value
	}
	if value, ok := cc.mutation.RegisterTime(); ok {
		_spec.SetField(car.FieldRegisterTime, field.TypeTime, value)
		_node.RegisterTime = value
	}
	if value, ok := cc.mutation.DrivingStateTime(); ok {
		_spec.SetField(car.FieldDrivingStateTime, field.TypeTime, value)
		_node.DrivingStateTime = value
	}
	if value, ok := cc.mutation.CreateTime(); ok {
		_spec.SetField(car.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := cc.mutation.UpdateTime(); ok {
		_spec.SetField(car.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if nodes := cc.mutation.BackgroundScenicAreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   car.BackgroundScenicAreaTable,
			Columns: []string{car.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ScenicAreaID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.CarsModelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   car.CarsModelsTable,
			Columns: []string{car.CarsModelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsmodels.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ModelID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.CarOperateLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.CarOperateLogsTable,
			Columns: []string{car.CarOperateLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsoperatelog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.OrdersTable,
			Columns: []string{car.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.StatsHourlyCarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.StatsHourlyCarTable,
			Columns: []string{car.StatsHourlyCarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statshourlycar.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ScheTaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.ScheTaskTable,
			Columns: []string{car.ScheTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schetask.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ConfigFilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.ConfigFilesTable,
			Columns: []string{car.ConfigFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carconfig.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.CarConfigsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.CarConfigsTable,
			Columns: []string{car.CarConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carconfigdownload.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CarCreateBulk is the builder for creating many Car entities in bulk.
type CarCreateBulk struct {
	config
	err      error
	builders []*CarCreate
}

// Save creates the Car entities in the database.
func (ccb *CarCreateBulk) Save(ctx context.Context) ([]*Car, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Car, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CarMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CarCreateBulk) SaveX(ctx context.Context) []*Car {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CarCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CarCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
