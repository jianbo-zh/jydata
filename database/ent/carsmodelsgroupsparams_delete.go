// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"github.com/jianbo-zh/jydata/database/ent/carsmodelsgroupsparams"
	"github.com/jianbo-zh/jydata/database/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarsModelsGroupsParamsDelete is the builder for deleting a CarsModelsGroupsParams entity.
type CarsModelsGroupsParamsDelete struct {
	config
	hooks    []Hook
	mutation *CarsModelsGroupsParamsMutation
}

// Where appends a list predicates to the CarsModelsGroupsParamsDelete builder.
func (cmgpd *CarsModelsGroupsParamsDelete) Where(ps ...predicate.CarsModelsGroupsParams) *CarsModelsGroupsParamsDelete {
	cmgpd.mutation.Where(ps...)
	return cmgpd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (cmgpd *CarsModelsGroupsParamsDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, cmgpd.sqlExec, cmgpd.mutation, cmgpd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (cmgpd *CarsModelsGroupsParamsDelete) ExecX(ctx context.Context) int {
	n, err := cmgpd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (cmgpd *CarsModelsGroupsParamsDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(carsmodelsgroupsparams.Table, sqlgraph.NewFieldSpec(carsmodelsgroupsparams.FieldID, field.TypeInt))
	if ps := cmgpd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, cmgpd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	cmgpd.mutation.done = true
	return affected, err
}

// CarsModelsGroupsParamsDeleteOne is the builder for deleting a single CarsModelsGroupsParams entity.
type CarsModelsGroupsParamsDeleteOne struct {
	cmgpd *CarsModelsGroupsParamsDelete
}

// Where appends a list predicates to the CarsModelsGroupsParamsDelete builder.
func (cmgpdo *CarsModelsGroupsParamsDeleteOne) Where(ps ...predicate.CarsModelsGroupsParams) *CarsModelsGroupsParamsDeleteOne {
	cmgpdo.cmgpd.mutation.Where(ps...)
	return cmgpdo
}

// Exec executes the deletion query.
func (cmgpdo *CarsModelsGroupsParamsDeleteOne) Exec(ctx context.Context) error {
	n, err := cmgpdo.cmgpd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{carsmodelsgroupsparams.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (cmgpdo *CarsModelsGroupsParamsDeleteOne) ExecX(ctx context.Context) {
	if err := cmgpdo.Exec(ctx); err != nil {
		panic(err)
	}
}
