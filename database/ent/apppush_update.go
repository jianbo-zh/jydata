// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/apppush"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
)

// AppPushUpdate is the builder for updating AppPush entities.
type AppPushUpdate struct {
	config
	hooks    []Hook
	mutation *AppPushMutation
}

// Where appends a list predicates to the AppPushUpdate builder.
func (apu *AppPushUpdate) Where(ps ...predicate.AppPush) *AppPushUpdate {
	apu.mutation.Where(ps...)
	return apu
}

// SetUser sets the "user" field.
func (apu *AppPushUpdate) SetUser(s string) *AppPushUpdate {
	apu.mutation.SetUser(s)
	return apu
}

// SetNillableUser sets the "user" field if the given value is not nil.
func (apu *AppPushUpdate) SetNillableUser(s *string) *AppPushUpdate {
	if s != nil {
		apu.SetUser(*s)
	}
	return apu
}

// SetTitle sets the "title" field.
func (apu *AppPushUpdate) SetTitle(s string) *AppPushUpdate {
	apu.mutation.SetTitle(s)
	return apu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (apu *AppPushUpdate) SetNillableTitle(s *string) *AppPushUpdate {
	if s != nil {
		apu.SetTitle(*s)
	}
	return apu
}

// SetContent sets the "content" field.
func (apu *AppPushUpdate) SetContent(s string) *AppPushUpdate {
	apu.mutation.SetContent(s)
	return apu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (apu *AppPushUpdate) SetNillableContent(s *string) *AppPushUpdate {
	if s != nil {
		apu.SetContent(*s)
	}
	return apu
}

// SetState sets the "state" field.
func (apu *AppPushUpdate) SetState(i int) *AppPushUpdate {
	apu.mutation.ResetState()
	apu.mutation.SetState(i)
	return apu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (apu *AppPushUpdate) SetNillableState(i *int) *AppPushUpdate {
	if i != nil {
		apu.SetState(*i)
	}
	return apu
}

// AddState adds i to the "state" field.
func (apu *AppPushUpdate) AddState(i int) *AppPushUpdate {
	apu.mutation.AddState(i)
	return apu
}

// SetRemark sets the "remark" field.
func (apu *AppPushUpdate) SetRemark(s string) *AppPushUpdate {
	apu.mutation.SetRemark(s)
	return apu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (apu *AppPushUpdate) SetNillableRemark(s *string) *AppPushUpdate {
	if s != nil {
		apu.SetRemark(*s)
	}
	return apu
}

// SetUpdateTime sets the "update_time" field.
func (apu *AppPushUpdate) SetUpdateTime(t time.Time) *AppPushUpdate {
	apu.mutation.SetUpdateTime(t)
	return apu
}

// Mutation returns the AppPushMutation object of the builder.
func (apu *AppPushUpdate) Mutation() *AppPushMutation {
	return apu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (apu *AppPushUpdate) Save(ctx context.Context) (int, error) {
	apu.defaults()
	return withHooks(ctx, apu.sqlSave, apu.mutation, apu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (apu *AppPushUpdate) SaveX(ctx context.Context) int {
	affected, err := apu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (apu *AppPushUpdate) Exec(ctx context.Context) error {
	_, err := apu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apu *AppPushUpdate) ExecX(ctx context.Context) {
	if err := apu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (apu *AppPushUpdate) defaults() {
	if _, ok := apu.mutation.UpdateTime(); !ok {
		v := apppush.UpdateDefaultUpdateTime()
		apu.mutation.SetUpdateTime(v)
	}
}

func (apu *AppPushUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(apppush.Table, apppush.Columns, sqlgraph.NewFieldSpec(apppush.FieldID, field.TypeInt))
	if ps := apu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := apu.mutation.User(); ok {
		_spec.SetField(apppush.FieldUser, field.TypeString, value)
	}
	if value, ok := apu.mutation.Title(); ok {
		_spec.SetField(apppush.FieldTitle, field.TypeString, value)
	}
	if value, ok := apu.mutation.Content(); ok {
		_spec.SetField(apppush.FieldContent, field.TypeString, value)
	}
	if value, ok := apu.mutation.State(); ok {
		_spec.SetField(apppush.FieldState, field.TypeInt, value)
	}
	if value, ok := apu.mutation.AddedState(); ok {
		_spec.AddField(apppush.FieldState, field.TypeInt, value)
	}
	if value, ok := apu.mutation.Remark(); ok {
		_spec.SetField(apppush.FieldRemark, field.TypeString, value)
	}
	if value, ok := apu.mutation.UpdateTime(); ok {
		_spec.SetField(apppush.FieldUpdateTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, apu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apppush.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	apu.mutation.done = true
	return n, nil
}

// AppPushUpdateOne is the builder for updating a single AppPush entity.
type AppPushUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppPushMutation
}

// SetUser sets the "user" field.
func (apuo *AppPushUpdateOne) SetUser(s string) *AppPushUpdateOne {
	apuo.mutation.SetUser(s)
	return apuo
}

// SetNillableUser sets the "user" field if the given value is not nil.
func (apuo *AppPushUpdateOne) SetNillableUser(s *string) *AppPushUpdateOne {
	if s != nil {
		apuo.SetUser(*s)
	}
	return apuo
}

// SetTitle sets the "title" field.
func (apuo *AppPushUpdateOne) SetTitle(s string) *AppPushUpdateOne {
	apuo.mutation.SetTitle(s)
	return apuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (apuo *AppPushUpdateOne) SetNillableTitle(s *string) *AppPushUpdateOne {
	if s != nil {
		apuo.SetTitle(*s)
	}
	return apuo
}

// SetContent sets the "content" field.
func (apuo *AppPushUpdateOne) SetContent(s string) *AppPushUpdateOne {
	apuo.mutation.SetContent(s)
	return apuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (apuo *AppPushUpdateOne) SetNillableContent(s *string) *AppPushUpdateOne {
	if s != nil {
		apuo.SetContent(*s)
	}
	return apuo
}

// SetState sets the "state" field.
func (apuo *AppPushUpdateOne) SetState(i int) *AppPushUpdateOne {
	apuo.mutation.ResetState()
	apuo.mutation.SetState(i)
	return apuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (apuo *AppPushUpdateOne) SetNillableState(i *int) *AppPushUpdateOne {
	if i != nil {
		apuo.SetState(*i)
	}
	return apuo
}

// AddState adds i to the "state" field.
func (apuo *AppPushUpdateOne) AddState(i int) *AppPushUpdateOne {
	apuo.mutation.AddState(i)
	return apuo
}

// SetRemark sets the "remark" field.
func (apuo *AppPushUpdateOne) SetRemark(s string) *AppPushUpdateOne {
	apuo.mutation.SetRemark(s)
	return apuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (apuo *AppPushUpdateOne) SetNillableRemark(s *string) *AppPushUpdateOne {
	if s != nil {
		apuo.SetRemark(*s)
	}
	return apuo
}

// SetUpdateTime sets the "update_time" field.
func (apuo *AppPushUpdateOne) SetUpdateTime(t time.Time) *AppPushUpdateOne {
	apuo.mutation.SetUpdateTime(t)
	return apuo
}

// Mutation returns the AppPushMutation object of the builder.
func (apuo *AppPushUpdateOne) Mutation() *AppPushMutation {
	return apuo.mutation
}

// Where appends a list predicates to the AppPushUpdate builder.
func (apuo *AppPushUpdateOne) Where(ps ...predicate.AppPush) *AppPushUpdateOne {
	apuo.mutation.Where(ps...)
	return apuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (apuo *AppPushUpdateOne) Select(field string, fields ...string) *AppPushUpdateOne {
	apuo.fields = append([]string{field}, fields...)
	return apuo
}

// Save executes the query and returns the updated AppPush entity.
func (apuo *AppPushUpdateOne) Save(ctx context.Context) (*AppPush, error) {
	apuo.defaults()
	return withHooks(ctx, apuo.sqlSave, apuo.mutation, apuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (apuo *AppPushUpdateOne) SaveX(ctx context.Context) *AppPush {
	node, err := apuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (apuo *AppPushUpdateOne) Exec(ctx context.Context) error {
	_, err := apuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apuo *AppPushUpdateOne) ExecX(ctx context.Context) {
	if err := apuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (apuo *AppPushUpdateOne) defaults() {
	if _, ok := apuo.mutation.UpdateTime(); !ok {
		v := apppush.UpdateDefaultUpdateTime()
		apuo.mutation.SetUpdateTime(v)
	}
}

func (apuo *AppPushUpdateOne) sqlSave(ctx context.Context) (_node *AppPush, err error) {
	_spec := sqlgraph.NewUpdateSpec(apppush.Table, apppush.Columns, sqlgraph.NewFieldSpec(apppush.FieldID, field.TypeInt))
	id, ok := apuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AppPush.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := apuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, apppush.FieldID)
		for _, f := range fields {
			if !apppush.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != apppush.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := apuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := apuo.mutation.User(); ok {
		_spec.SetField(apppush.FieldUser, field.TypeString, value)
	}
	if value, ok := apuo.mutation.Title(); ok {
		_spec.SetField(apppush.FieldTitle, field.TypeString, value)
	}
	if value, ok := apuo.mutation.Content(); ok {
		_spec.SetField(apppush.FieldContent, field.TypeString, value)
	}
	if value, ok := apuo.mutation.State(); ok {
		_spec.SetField(apppush.FieldState, field.TypeInt, value)
	}
	if value, ok := apuo.mutation.AddedState(); ok {
		_spec.AddField(apppush.FieldState, field.TypeInt, value)
	}
	if value, ok := apuo.mutation.Remark(); ok {
		_spec.SetField(apppush.FieldRemark, field.TypeString, value)
	}
	if value, ok := apuo.mutation.UpdateTime(); ok {
		_spec.SetField(apppush.FieldUpdateTime, field.TypeTime, value)
	}
	_node = &AppPush{config: apuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, apuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apppush.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	apuo.mutation.done = true
	return _node, nil
}
