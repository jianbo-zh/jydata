// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/operationuser"
)

// OperationUserCreate is the builder for creating a OperationUser entity.
type OperationUserCreate struct {
	config
	mutation *OperationUserMutation
	hooks    []Hook
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (ouc *OperationUserCreate) SetScenicAreaID(i int) *OperationUserCreate {
	ouc.mutation.SetScenicAreaID(i)
	return ouc
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (ouc *OperationUserCreate) SetNillableScenicAreaID(i *int) *OperationUserCreate {
	if i != nil {
		ouc.SetScenicAreaID(*i)
	}
	return ouc
}

// SetUsername sets the "username" field.
func (ouc *OperationUserCreate) SetUsername(s string) *OperationUserCreate {
	ouc.mutation.SetUsername(s)
	return ouc
}

// SetNickname sets the "nickname" field.
func (ouc *OperationUserCreate) SetNickname(s string) *OperationUserCreate {
	ouc.mutation.SetNickname(s)
	return ouc
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (ouc *OperationUserCreate) SetNillableNickname(s *string) *OperationUserCreate {
	if s != nil {
		ouc.SetNickname(*s)
	}
	return ouc
}

// SetPhone sets the "phone" field.
func (ouc *OperationUserCreate) SetPhone(s string) *OperationUserCreate {
	ouc.mutation.SetPhone(s)
	return ouc
}

// SetPassword sets the "password" field.
func (ouc *OperationUserCreate) SetPassword(s string) *OperationUserCreate {
	ouc.mutation.SetPassword(s)
	return ouc
}

// SetOpenID sets the "open_id" field.
func (ouc *OperationUserCreate) SetOpenID(s string) *OperationUserCreate {
	ouc.mutation.SetOpenID(s)
	return ouc
}

// SetNillableOpenID sets the "open_id" field if the given value is not nil.
func (ouc *OperationUserCreate) SetNillableOpenID(s *string) *OperationUserCreate {
	if s != nil {
		ouc.SetOpenID(*s)
	}
	return ouc
}

// SetAvatarURL sets the "avatar_url" field.
func (ouc *OperationUserCreate) SetAvatarURL(s string) *OperationUserCreate {
	ouc.mutation.SetAvatarURL(s)
	return ouc
}

// SetNillableAvatarURL sets the "avatar_url" field if the given value is not nil.
func (ouc *OperationUserCreate) SetNillableAvatarURL(s *string) *OperationUserCreate {
	if s != nil {
		ouc.SetAvatarURL(*s)
	}
	return ouc
}

// SetStatus sets the "status" field.
func (ouc *OperationUserCreate) SetStatus(i int) *OperationUserCreate {
	ouc.mutation.SetStatus(i)
	return ouc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ouc *OperationUserCreate) SetNillableStatus(i *int) *OperationUserCreate {
	if i != nil {
		ouc.SetStatus(*i)
	}
	return ouc
}

// SetCreateTime sets the "create_time" field.
func (ouc *OperationUserCreate) SetCreateTime(t time.Time) *OperationUserCreate {
	ouc.mutation.SetCreateTime(t)
	return ouc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ouc *OperationUserCreate) SetNillableCreateTime(t *time.Time) *OperationUserCreate {
	if t != nil {
		ouc.SetCreateTime(*t)
	}
	return ouc
}

// SetUpdateTime sets the "update_time" field.
func (ouc *OperationUserCreate) SetUpdateTime(t time.Time) *OperationUserCreate {
	ouc.mutation.SetUpdateTime(t)
	return ouc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ouc *OperationUserCreate) SetNillableUpdateTime(t *time.Time) *OperationUserCreate {
	if t != nil {
		ouc.SetUpdateTime(*t)
	}
	return ouc
}

// SetID sets the "id" field.
func (ouc *OperationUserCreate) SetID(i int) *OperationUserCreate {
	ouc.mutation.SetID(i)
	return ouc
}

// Mutation returns the OperationUserMutation object of the builder.
func (ouc *OperationUserCreate) Mutation() *OperationUserMutation {
	return ouc.mutation
}

// Save creates the OperationUser in the database.
func (ouc *OperationUserCreate) Save(ctx context.Context) (*OperationUser, error) {
	ouc.defaults()
	return withHooks(ctx, ouc.sqlSave, ouc.mutation, ouc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ouc *OperationUserCreate) SaveX(ctx context.Context) *OperationUser {
	v, err := ouc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ouc *OperationUserCreate) Exec(ctx context.Context) error {
	_, err := ouc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouc *OperationUserCreate) ExecX(ctx context.Context) {
	if err := ouc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouc *OperationUserCreate) defaults() {
	if _, ok := ouc.mutation.ScenicAreaID(); !ok {
		v := operationuser.DefaultScenicAreaID
		ouc.mutation.SetScenicAreaID(v)
	}
	if _, ok := ouc.mutation.Nickname(); !ok {
		v := operationuser.DefaultNickname
		ouc.mutation.SetNickname(v)
	}
	if _, ok := ouc.mutation.OpenID(); !ok {
		v := operationuser.DefaultOpenID
		ouc.mutation.SetOpenID(v)
	}
	if _, ok := ouc.mutation.AvatarURL(); !ok {
		v := operationuser.DefaultAvatarURL
		ouc.mutation.SetAvatarURL(v)
	}
	if _, ok := ouc.mutation.Status(); !ok {
		v := operationuser.DefaultStatus
		ouc.mutation.SetStatus(v)
	}
	if _, ok := ouc.mutation.CreateTime(); !ok {
		v := operationuser.DefaultCreateTime()
		ouc.mutation.SetCreateTime(v)
	}
	if _, ok := ouc.mutation.UpdateTime(); !ok {
		v := operationuser.DefaultUpdateTime()
		ouc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouc *OperationUserCreate) check() error {
	if _, ok := ouc.mutation.ScenicAreaID(); !ok {
		return &ValidationError{Name: "scenic_area_id", err: errors.New(`ent: missing required field "OperationUser.scenic_area_id"`)}
	}
	if _, ok := ouc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "OperationUser.username"`)}
	}
	if _, ok := ouc.mutation.Nickname(); !ok {
		return &ValidationError{Name: "nickname", err: errors.New(`ent: missing required field "OperationUser.nickname"`)}
	}
	if _, ok := ouc.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`ent: missing required field "OperationUser.phone"`)}
	}
	if _, ok := ouc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "OperationUser.password"`)}
	}
	if _, ok := ouc.mutation.OpenID(); !ok {
		return &ValidationError{Name: "open_id", err: errors.New(`ent: missing required field "OperationUser.open_id"`)}
	}
	if _, ok := ouc.mutation.AvatarURL(); !ok {
		return &ValidationError{Name: "avatar_url", err: errors.New(`ent: missing required field "OperationUser.avatar_url"`)}
	}
	if _, ok := ouc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "OperationUser.status"`)}
	}
	if _, ok := ouc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "OperationUser.create_time"`)}
	}
	if _, ok := ouc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "OperationUser.update_time"`)}
	}
	return nil
}

func (ouc *OperationUserCreate) sqlSave(ctx context.Context) (*OperationUser, error) {
	if err := ouc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ouc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ouc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	ouc.mutation.id = &_node.ID
	ouc.mutation.done = true
	return _node, nil
}

func (ouc *OperationUserCreate) createSpec() (*OperationUser, *sqlgraph.CreateSpec) {
	var (
		_node = &OperationUser{config: ouc.config}
		_spec = sqlgraph.NewCreateSpec(operationuser.Table, sqlgraph.NewFieldSpec(operationuser.FieldID, field.TypeInt))
	)
	if id, ok := ouc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ouc.mutation.ScenicAreaID(); ok {
		_spec.SetField(operationuser.FieldScenicAreaID, field.TypeInt, value)
		_node.ScenicAreaID = value
	}
	if value, ok := ouc.mutation.Username(); ok {
		_spec.SetField(operationuser.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := ouc.mutation.Nickname(); ok {
		_spec.SetField(operationuser.FieldNickname, field.TypeString, value)
		_node.Nickname = value
	}
	if value, ok := ouc.mutation.Phone(); ok {
		_spec.SetField(operationuser.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := ouc.mutation.Password(); ok {
		_spec.SetField(operationuser.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := ouc.mutation.OpenID(); ok {
		_spec.SetField(operationuser.FieldOpenID, field.TypeString, value)
		_node.OpenID = value
	}
	if value, ok := ouc.mutation.AvatarURL(); ok {
		_spec.SetField(operationuser.FieldAvatarURL, field.TypeString, value)
		_node.AvatarURL = value
	}
	if value, ok := ouc.mutation.Status(); ok {
		_spec.SetField(operationuser.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	if value, ok := ouc.mutation.CreateTime(); ok {
		_spec.SetField(operationuser.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := ouc.mutation.UpdateTime(); ok {
		_spec.SetField(operationuser.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// OperationUserCreateBulk is the builder for creating many OperationUser entities in bulk.
type OperationUserCreateBulk struct {
	config
	err      error
	builders []*OperationUserCreate
}

// Save creates the OperationUser entities in the database.
func (oucb *OperationUserCreateBulk) Save(ctx context.Context) ([]*OperationUser, error) {
	if oucb.err != nil {
		return nil, oucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(oucb.builders))
	nodes := make([]*OperationUser, len(oucb.builders))
	mutators := make([]Mutator, len(oucb.builders))
	for i := range oucb.builders {
		func(i int, root context.Context) {
			builder := oucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OperationUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oucb *OperationUserCreateBulk) SaveX(ctx context.Context) []*OperationUser {
	v, err := oucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oucb *OperationUserCreateBulk) Exec(ctx context.Context) error {
	_, err := oucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oucb *OperationUserCreateBulk) ExecX(ctx context.Context) {
	if err := oucb.Exec(ctx); err != nil {
		panic(err)
	}
}
