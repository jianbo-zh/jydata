// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/poiextendyokee"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
)

// PoiExtendYokeeDelete is the builder for deleting a PoiExtendYokee entity.
type PoiExtendYokeeDelete struct {
	config
	hooks    []Hook
	mutation *PoiExtendYokeeMutation
}

// Where appends a list predicates to the PoiExtendYokeeDelete builder.
func (peyd *PoiExtendYokeeDelete) Where(ps ...predicate.PoiExtendYokee) *PoiExtendYokeeDelete {
	peyd.mutation.Where(ps...)
	return peyd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (peyd *PoiExtendYokeeDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, peyd.sqlExec, peyd.mutation, peyd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (peyd *PoiExtendYokeeDelete) ExecX(ctx context.Context) int {
	n, err := peyd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (peyd *PoiExtendYokeeDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(poiextendyokee.Table, sqlgraph.NewFieldSpec(poiextendyokee.FieldID, field.TypeInt))
	if ps := peyd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, peyd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	peyd.mutation.done = true
	return affected, err
}

// PoiExtendYokeeDeleteOne is the builder for deleting a single PoiExtendYokee entity.
type PoiExtendYokeeDeleteOne struct {
	peyd *PoiExtendYokeeDelete
}

// Where appends a list predicates to the PoiExtendYokeeDelete builder.
func (peydo *PoiExtendYokeeDeleteOne) Where(ps ...predicate.PoiExtendYokee) *PoiExtendYokeeDeleteOne {
	peydo.peyd.mutation.Where(ps...)
	return peydo
}

// Exec executes the deletion query.
func (peydo *PoiExtendYokeeDeleteOne) Exec(ctx context.Context) error {
	n, err := peydo.peyd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{poiextendyokee.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (peydo *PoiExtendYokeeDeleteOne) ExecX(ctx context.Context) {
	if err := peydo.Exec(ctx); err != nil {
		panic(err)
	}
}
