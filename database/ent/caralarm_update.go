// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/caralarm"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
)

// CarAlarmUpdate is the builder for updating CarAlarm entities.
type CarAlarmUpdate struct {
	config
	hooks    []Hook
	mutation *CarAlarmMutation
}

// Where appends a list predicates to the CarAlarmUpdate builder.
func (cau *CarAlarmUpdate) Where(ps ...predicate.CarAlarm) *CarAlarmUpdate {
	cau.mutation.Where(ps...)
	return cau
}

// SetDeviceID sets the "device_id" field.
func (cau *CarAlarmUpdate) SetDeviceID(s string) *CarAlarmUpdate {
	cau.mutation.SetDeviceID(s)
	return cau
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (cau *CarAlarmUpdate) SetNillableDeviceID(s *string) *CarAlarmUpdate {
	if s != nil {
		cau.SetDeviceID(*s)
	}
	return cau
}

// SetAlarmID sets the "alarm_id" field.
func (cau *CarAlarmUpdate) SetAlarmID(u uint32) *CarAlarmUpdate {
	cau.mutation.ResetAlarmID()
	cau.mutation.SetAlarmID(u)
	return cau
}

// SetNillableAlarmID sets the "alarm_id" field if the given value is not nil.
func (cau *CarAlarmUpdate) SetNillableAlarmID(u *uint32) *CarAlarmUpdate {
	if u != nil {
		cau.SetAlarmID(*u)
	}
	return cau
}

// AddAlarmID adds u to the "alarm_id" field.
func (cau *CarAlarmUpdate) AddAlarmID(u int32) *CarAlarmUpdate {
	cau.mutation.AddAlarmID(u)
	return cau
}

// SetModuleName sets the "module_name" field.
func (cau *CarAlarmUpdate) SetModuleName(s string) *CarAlarmUpdate {
	cau.mutation.SetModuleName(s)
	return cau
}

// SetNillableModuleName sets the "module_name" field if the given value is not nil.
func (cau *CarAlarmUpdate) SetNillableModuleName(s *string) *CarAlarmUpdate {
	if s != nil {
		cau.SetModuleName(*s)
	}
	return cau
}

// SetType sets the "type" field.
func (cau *CarAlarmUpdate) SetType(u uint32) *CarAlarmUpdate {
	cau.mutation.ResetType()
	cau.mutation.SetType(u)
	return cau
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cau *CarAlarmUpdate) SetNillableType(u *uint32) *CarAlarmUpdate {
	if u != nil {
		cau.SetType(*u)
	}
	return cau
}

// AddType adds u to the "type" field.
func (cau *CarAlarmUpdate) AddType(u int32) *CarAlarmUpdate {
	cau.mutation.AddType(u)
	return cau
}

// SetLevel sets the "level" field.
func (cau *CarAlarmUpdate) SetLevel(u uint32) *CarAlarmUpdate {
	cau.mutation.ResetLevel()
	cau.mutation.SetLevel(u)
	return cau
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (cau *CarAlarmUpdate) SetNillableLevel(u *uint32) *CarAlarmUpdate {
	if u != nil {
		cau.SetLevel(*u)
	}
	return cau
}

// AddLevel adds u to the "level" field.
func (cau *CarAlarmUpdate) AddLevel(u int32) *CarAlarmUpdate {
	cau.mutation.AddLevel(u)
	return cau
}

// SetCanIgnore sets the "can_ignore" field.
func (cau *CarAlarmUpdate) SetCanIgnore(u uint32) *CarAlarmUpdate {
	cau.mutation.ResetCanIgnore()
	cau.mutation.SetCanIgnore(u)
	return cau
}

// SetNillableCanIgnore sets the "can_ignore" field if the given value is not nil.
func (cau *CarAlarmUpdate) SetNillableCanIgnore(u *uint32) *CarAlarmUpdate {
	if u != nil {
		cau.SetCanIgnore(*u)
	}
	return cau
}

// AddCanIgnore adds u to the "can_ignore" field.
func (cau *CarAlarmUpdate) AddCanIgnore(u int32) *CarAlarmUpdate {
	cau.mutation.AddCanIgnore(u)
	return cau
}

// SetEffectState sets the "effect_state" field.
func (cau *CarAlarmUpdate) SetEffectState(u uint32) *CarAlarmUpdate {
	cau.mutation.ResetEffectState()
	cau.mutation.SetEffectState(u)
	return cau
}

// SetNillableEffectState sets the "effect_state" field if the given value is not nil.
func (cau *CarAlarmUpdate) SetNillableEffectState(u *uint32) *CarAlarmUpdate {
	if u != nil {
		cau.SetEffectState(*u)
	}
	return cau
}

// AddEffectState adds u to the "effect_state" field.
func (cau *CarAlarmUpdate) AddEffectState(u int32) *CarAlarmUpdate {
	cau.mutation.AddEffectState(u)
	return cau
}

// SetDesc sets the "desc" field.
func (cau *CarAlarmUpdate) SetDesc(s string) *CarAlarmUpdate {
	cau.mutation.SetDesc(s)
	return cau
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (cau *CarAlarmUpdate) SetNillableDesc(s *string) *CarAlarmUpdate {
	if s != nil {
		cau.SetDesc(*s)
	}
	return cau
}

// SetUUID sets the "uuid" field.
func (cau *CarAlarmUpdate) SetUUID(u uint64) *CarAlarmUpdate {
	cau.mutation.ResetUUID()
	cau.mutation.SetUUID(u)
	return cau
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (cau *CarAlarmUpdate) SetNillableUUID(u *uint64) *CarAlarmUpdate {
	if u != nil {
		cau.SetUUID(*u)
	}
	return cau
}

// AddUUID adds u to the "uuid" field.
func (cau *CarAlarmUpdate) AddUUID(u int64) *CarAlarmUpdate {
	cau.mutation.AddUUID(u)
	return cau
}

// SetAssociatedIds sets the "associated_ids" field.
func (cau *CarAlarmUpdate) SetAssociatedIds(i []int) *CarAlarmUpdate {
	cau.mutation.SetAssociatedIds(i)
	return cau
}

// AppendAssociatedIds appends i to the "associated_ids" field.
func (cau *CarAlarmUpdate) AppendAssociatedIds(i []int) *CarAlarmUpdate {
	cau.mutation.AppendAssociatedIds(i)
	return cau
}

// SetUpdateTime sets the "update_time" field.
func (cau *CarAlarmUpdate) SetUpdateTime(t time.Time) *CarAlarmUpdate {
	cau.mutation.SetUpdateTime(t)
	return cau
}

// Mutation returns the CarAlarmMutation object of the builder.
func (cau *CarAlarmUpdate) Mutation() *CarAlarmMutation {
	return cau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cau *CarAlarmUpdate) Save(ctx context.Context) (int, error) {
	cau.defaults()
	return withHooks(ctx, cau.sqlSave, cau.mutation, cau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cau *CarAlarmUpdate) SaveX(ctx context.Context) int {
	affected, err := cau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cau *CarAlarmUpdate) Exec(ctx context.Context) error {
	_, err := cau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cau *CarAlarmUpdate) ExecX(ctx context.Context) {
	if err := cau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cau *CarAlarmUpdate) defaults() {
	if _, ok := cau.mutation.UpdateTime(); !ok {
		v := caralarm.UpdateDefaultUpdateTime()
		cau.mutation.SetUpdateTime(v)
	}
}

func (cau *CarAlarmUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(caralarm.Table, caralarm.Columns, sqlgraph.NewFieldSpec(caralarm.FieldID, field.TypeInt))
	if ps := cau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cau.mutation.DeviceID(); ok {
		_spec.SetField(caralarm.FieldDeviceID, field.TypeString, value)
	}
	if value, ok := cau.mutation.AlarmID(); ok {
		_spec.SetField(caralarm.FieldAlarmID, field.TypeUint32, value)
	}
	if value, ok := cau.mutation.AddedAlarmID(); ok {
		_spec.AddField(caralarm.FieldAlarmID, field.TypeUint32, value)
	}
	if value, ok := cau.mutation.ModuleName(); ok {
		_spec.SetField(caralarm.FieldModuleName, field.TypeString, value)
	}
	if value, ok := cau.mutation.GetType(); ok {
		_spec.SetField(caralarm.FieldType, field.TypeUint32, value)
	}
	if value, ok := cau.mutation.AddedType(); ok {
		_spec.AddField(caralarm.FieldType, field.TypeUint32, value)
	}
	if value, ok := cau.mutation.Level(); ok {
		_spec.SetField(caralarm.FieldLevel, field.TypeUint32, value)
	}
	if value, ok := cau.mutation.AddedLevel(); ok {
		_spec.AddField(caralarm.FieldLevel, field.TypeUint32, value)
	}
	if value, ok := cau.mutation.CanIgnore(); ok {
		_spec.SetField(caralarm.FieldCanIgnore, field.TypeUint32, value)
	}
	if value, ok := cau.mutation.AddedCanIgnore(); ok {
		_spec.AddField(caralarm.FieldCanIgnore, field.TypeUint32, value)
	}
	if value, ok := cau.mutation.EffectState(); ok {
		_spec.SetField(caralarm.FieldEffectState, field.TypeUint32, value)
	}
	if value, ok := cau.mutation.AddedEffectState(); ok {
		_spec.AddField(caralarm.FieldEffectState, field.TypeUint32, value)
	}
	if value, ok := cau.mutation.Desc(); ok {
		_spec.SetField(caralarm.FieldDesc, field.TypeString, value)
	}
	if value, ok := cau.mutation.UUID(); ok {
		_spec.SetField(caralarm.FieldUUID, field.TypeUint64, value)
	}
	if value, ok := cau.mutation.AddedUUID(); ok {
		_spec.AddField(caralarm.FieldUUID, field.TypeUint64, value)
	}
	if value, ok := cau.mutation.AssociatedIds(); ok {
		_spec.SetField(caralarm.FieldAssociatedIds, field.TypeJSON, value)
	}
	if value, ok := cau.mutation.AppendedAssociatedIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, caralarm.FieldAssociatedIds, value)
		})
	}
	if value, ok := cau.mutation.UpdateTime(); ok {
		_spec.SetField(caralarm.FieldUpdateTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{caralarm.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cau.mutation.done = true
	return n, nil
}

// CarAlarmUpdateOne is the builder for updating a single CarAlarm entity.
type CarAlarmUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CarAlarmMutation
}

// SetDeviceID sets the "device_id" field.
func (cauo *CarAlarmUpdateOne) SetDeviceID(s string) *CarAlarmUpdateOne {
	cauo.mutation.SetDeviceID(s)
	return cauo
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (cauo *CarAlarmUpdateOne) SetNillableDeviceID(s *string) *CarAlarmUpdateOne {
	if s != nil {
		cauo.SetDeviceID(*s)
	}
	return cauo
}

// SetAlarmID sets the "alarm_id" field.
func (cauo *CarAlarmUpdateOne) SetAlarmID(u uint32) *CarAlarmUpdateOne {
	cauo.mutation.ResetAlarmID()
	cauo.mutation.SetAlarmID(u)
	return cauo
}

// SetNillableAlarmID sets the "alarm_id" field if the given value is not nil.
func (cauo *CarAlarmUpdateOne) SetNillableAlarmID(u *uint32) *CarAlarmUpdateOne {
	if u != nil {
		cauo.SetAlarmID(*u)
	}
	return cauo
}

// AddAlarmID adds u to the "alarm_id" field.
func (cauo *CarAlarmUpdateOne) AddAlarmID(u int32) *CarAlarmUpdateOne {
	cauo.mutation.AddAlarmID(u)
	return cauo
}

// SetModuleName sets the "module_name" field.
func (cauo *CarAlarmUpdateOne) SetModuleName(s string) *CarAlarmUpdateOne {
	cauo.mutation.SetModuleName(s)
	return cauo
}

// SetNillableModuleName sets the "module_name" field if the given value is not nil.
func (cauo *CarAlarmUpdateOne) SetNillableModuleName(s *string) *CarAlarmUpdateOne {
	if s != nil {
		cauo.SetModuleName(*s)
	}
	return cauo
}

// SetType sets the "type" field.
func (cauo *CarAlarmUpdateOne) SetType(u uint32) *CarAlarmUpdateOne {
	cauo.mutation.ResetType()
	cauo.mutation.SetType(u)
	return cauo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cauo *CarAlarmUpdateOne) SetNillableType(u *uint32) *CarAlarmUpdateOne {
	if u != nil {
		cauo.SetType(*u)
	}
	return cauo
}

// AddType adds u to the "type" field.
func (cauo *CarAlarmUpdateOne) AddType(u int32) *CarAlarmUpdateOne {
	cauo.mutation.AddType(u)
	return cauo
}

// SetLevel sets the "level" field.
func (cauo *CarAlarmUpdateOne) SetLevel(u uint32) *CarAlarmUpdateOne {
	cauo.mutation.ResetLevel()
	cauo.mutation.SetLevel(u)
	return cauo
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (cauo *CarAlarmUpdateOne) SetNillableLevel(u *uint32) *CarAlarmUpdateOne {
	if u != nil {
		cauo.SetLevel(*u)
	}
	return cauo
}

// AddLevel adds u to the "level" field.
func (cauo *CarAlarmUpdateOne) AddLevel(u int32) *CarAlarmUpdateOne {
	cauo.mutation.AddLevel(u)
	return cauo
}

// SetCanIgnore sets the "can_ignore" field.
func (cauo *CarAlarmUpdateOne) SetCanIgnore(u uint32) *CarAlarmUpdateOne {
	cauo.mutation.ResetCanIgnore()
	cauo.mutation.SetCanIgnore(u)
	return cauo
}

// SetNillableCanIgnore sets the "can_ignore" field if the given value is not nil.
func (cauo *CarAlarmUpdateOne) SetNillableCanIgnore(u *uint32) *CarAlarmUpdateOne {
	if u != nil {
		cauo.SetCanIgnore(*u)
	}
	return cauo
}

// AddCanIgnore adds u to the "can_ignore" field.
func (cauo *CarAlarmUpdateOne) AddCanIgnore(u int32) *CarAlarmUpdateOne {
	cauo.mutation.AddCanIgnore(u)
	return cauo
}

// SetEffectState sets the "effect_state" field.
func (cauo *CarAlarmUpdateOne) SetEffectState(u uint32) *CarAlarmUpdateOne {
	cauo.mutation.ResetEffectState()
	cauo.mutation.SetEffectState(u)
	return cauo
}

// SetNillableEffectState sets the "effect_state" field if the given value is not nil.
func (cauo *CarAlarmUpdateOne) SetNillableEffectState(u *uint32) *CarAlarmUpdateOne {
	if u != nil {
		cauo.SetEffectState(*u)
	}
	return cauo
}

// AddEffectState adds u to the "effect_state" field.
func (cauo *CarAlarmUpdateOne) AddEffectState(u int32) *CarAlarmUpdateOne {
	cauo.mutation.AddEffectState(u)
	return cauo
}

// SetDesc sets the "desc" field.
func (cauo *CarAlarmUpdateOne) SetDesc(s string) *CarAlarmUpdateOne {
	cauo.mutation.SetDesc(s)
	return cauo
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (cauo *CarAlarmUpdateOne) SetNillableDesc(s *string) *CarAlarmUpdateOne {
	if s != nil {
		cauo.SetDesc(*s)
	}
	return cauo
}

// SetUUID sets the "uuid" field.
func (cauo *CarAlarmUpdateOne) SetUUID(u uint64) *CarAlarmUpdateOne {
	cauo.mutation.ResetUUID()
	cauo.mutation.SetUUID(u)
	return cauo
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (cauo *CarAlarmUpdateOne) SetNillableUUID(u *uint64) *CarAlarmUpdateOne {
	if u != nil {
		cauo.SetUUID(*u)
	}
	return cauo
}

// AddUUID adds u to the "uuid" field.
func (cauo *CarAlarmUpdateOne) AddUUID(u int64) *CarAlarmUpdateOne {
	cauo.mutation.AddUUID(u)
	return cauo
}

// SetAssociatedIds sets the "associated_ids" field.
func (cauo *CarAlarmUpdateOne) SetAssociatedIds(i []int) *CarAlarmUpdateOne {
	cauo.mutation.SetAssociatedIds(i)
	return cauo
}

// AppendAssociatedIds appends i to the "associated_ids" field.
func (cauo *CarAlarmUpdateOne) AppendAssociatedIds(i []int) *CarAlarmUpdateOne {
	cauo.mutation.AppendAssociatedIds(i)
	return cauo
}

// SetUpdateTime sets the "update_time" field.
func (cauo *CarAlarmUpdateOne) SetUpdateTime(t time.Time) *CarAlarmUpdateOne {
	cauo.mutation.SetUpdateTime(t)
	return cauo
}

// Mutation returns the CarAlarmMutation object of the builder.
func (cauo *CarAlarmUpdateOne) Mutation() *CarAlarmMutation {
	return cauo.mutation
}

// Where appends a list predicates to the CarAlarmUpdate builder.
func (cauo *CarAlarmUpdateOne) Where(ps ...predicate.CarAlarm) *CarAlarmUpdateOne {
	cauo.mutation.Where(ps...)
	return cauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cauo *CarAlarmUpdateOne) Select(field string, fields ...string) *CarAlarmUpdateOne {
	cauo.fields = append([]string{field}, fields...)
	return cauo
}

// Save executes the query and returns the updated CarAlarm entity.
func (cauo *CarAlarmUpdateOne) Save(ctx context.Context) (*CarAlarm, error) {
	cauo.defaults()
	return withHooks(ctx, cauo.sqlSave, cauo.mutation, cauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cauo *CarAlarmUpdateOne) SaveX(ctx context.Context) *CarAlarm {
	node, err := cauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cauo *CarAlarmUpdateOne) Exec(ctx context.Context) error {
	_, err := cauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cauo *CarAlarmUpdateOne) ExecX(ctx context.Context) {
	if err := cauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cauo *CarAlarmUpdateOne) defaults() {
	if _, ok := cauo.mutation.UpdateTime(); !ok {
		v := caralarm.UpdateDefaultUpdateTime()
		cauo.mutation.SetUpdateTime(v)
	}
}

func (cauo *CarAlarmUpdateOne) sqlSave(ctx context.Context) (_node *CarAlarm, err error) {
	_spec := sqlgraph.NewUpdateSpec(caralarm.Table, caralarm.Columns, sqlgraph.NewFieldSpec(caralarm.FieldID, field.TypeInt))
	id, ok := cauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CarAlarm.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, caralarm.FieldID)
		for _, f := range fields {
			if !caralarm.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != caralarm.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cauo.mutation.DeviceID(); ok {
		_spec.SetField(caralarm.FieldDeviceID, field.TypeString, value)
	}
	if value, ok := cauo.mutation.AlarmID(); ok {
		_spec.SetField(caralarm.FieldAlarmID, field.TypeUint32, value)
	}
	if value, ok := cauo.mutation.AddedAlarmID(); ok {
		_spec.AddField(caralarm.FieldAlarmID, field.TypeUint32, value)
	}
	if value, ok := cauo.mutation.ModuleName(); ok {
		_spec.SetField(caralarm.FieldModuleName, field.TypeString, value)
	}
	if value, ok := cauo.mutation.GetType(); ok {
		_spec.SetField(caralarm.FieldType, field.TypeUint32, value)
	}
	if value, ok := cauo.mutation.AddedType(); ok {
		_spec.AddField(caralarm.FieldType, field.TypeUint32, value)
	}
	if value, ok := cauo.mutation.Level(); ok {
		_spec.SetField(caralarm.FieldLevel, field.TypeUint32, value)
	}
	if value, ok := cauo.mutation.AddedLevel(); ok {
		_spec.AddField(caralarm.FieldLevel, field.TypeUint32, value)
	}
	if value, ok := cauo.mutation.CanIgnore(); ok {
		_spec.SetField(caralarm.FieldCanIgnore, field.TypeUint32, value)
	}
	if value, ok := cauo.mutation.AddedCanIgnore(); ok {
		_spec.AddField(caralarm.FieldCanIgnore, field.TypeUint32, value)
	}
	if value, ok := cauo.mutation.EffectState(); ok {
		_spec.SetField(caralarm.FieldEffectState, field.TypeUint32, value)
	}
	if value, ok := cauo.mutation.AddedEffectState(); ok {
		_spec.AddField(caralarm.FieldEffectState, field.TypeUint32, value)
	}
	if value, ok := cauo.mutation.Desc(); ok {
		_spec.SetField(caralarm.FieldDesc, field.TypeString, value)
	}
	if value, ok := cauo.mutation.UUID(); ok {
		_spec.SetField(caralarm.FieldUUID, field.TypeUint64, value)
	}
	if value, ok := cauo.mutation.AddedUUID(); ok {
		_spec.AddField(caralarm.FieldUUID, field.TypeUint64, value)
	}
	if value, ok := cauo.mutation.AssociatedIds(); ok {
		_spec.SetField(caralarm.FieldAssociatedIds, field.TypeJSON, value)
	}
	if value, ok := cauo.mutation.AppendedAssociatedIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, caralarm.FieldAssociatedIds, value)
		})
	}
	if value, ok := cauo.mutation.UpdateTime(); ok {
		_spec.SetField(caralarm.FieldUpdateTime, field.TypeTime, value)
	}
	_node = &CarAlarm{config: cauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{caralarm.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cauo.mutation.done = true
	return _node, nil
}
