// Code generated by ent, DO NOT EDIT.

package ordersharing

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the ordersharing type in the database.
	Label = "order_sharing"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOrderID holds the string denoting the order_id field in the database.
	FieldOrderID = "order_id"
	// FieldSharingNo holds the string denoting the sharing_no field in the database.
	FieldSharingNo = "sharing_no"
	// FieldWxSharingID holds the string denoting the wx_sharing_id field in the database.
	FieldWxSharingID = "wx_sharing_id"
	// FieldSharingAmount holds the string denoting the sharing_amount field in the database.
	FieldSharingAmount = "sharing_amount"
	// FieldReceivers holds the string denoting the receivers field in the database.
	FieldReceivers = "receivers"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// EdgeOrder holds the string denoting the order edge name in mutations.
	EdgeOrder = "order"
	// Table holds the table name of the ordersharing in the database.
	Table = "order_sharings"
	// OrderTable is the table that holds the order relation/edge.
	OrderTable = "order_sharings"
	// OrderInverseTable is the table name for the Order entity.
	// It exists in this package in order to avoid circular dependency with the "order" package.
	OrderInverseTable = "orders"
	// OrderColumn is the table column denoting the order relation/edge.
	OrderColumn = "order_id"
)

// Columns holds all SQL columns for ordersharing fields.
var Columns = []string{
	FieldID,
	FieldOrderID,
	FieldSharingNo,
	FieldWxSharingID,
	FieldSharingAmount,
	FieldReceivers,
	FieldState,
	FieldRemark,
	FieldCreateTime,
	FieldUpdateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultWxSharingID holds the default value on creation for the "wx_sharing_id" field.
	DefaultWxSharingID string
	// DefaultSharingAmount holds the default value on creation for the "sharing_amount" field.
	DefaultSharingAmount int
	// DefaultState holds the default value on creation for the "state" field.
	DefaultState int
	// DefaultRemark holds the default value on creation for the "remark" field.
	DefaultRemark string
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)

// OrderOption defines the ordering options for the OrderSharing queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByOrderID orders the results by the order_id field.
func ByOrderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderID, opts...).ToFunc()
}

// BySharingNo orders the results by the sharing_no field.
func BySharingNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSharingNo, opts...).ToFunc()
}

// ByWxSharingID orders the results by the wx_sharing_id field.
func ByWxSharingID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWxSharingID, opts...).ToFunc()
}

// BySharingAmount orders the results by the sharing_amount field.
func BySharingAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSharingAmount, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByOrderField orders the results by order field.
func ByOrderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrderStep(), sql.OrderByField(field, opts...))
	}
}
func newOrderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, OrderTable, OrderColumn),
	)
}
