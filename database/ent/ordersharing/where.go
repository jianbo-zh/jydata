// Code generated by ent, DO NOT EDIT.

package ordersharing

import (
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldLTE(FieldID, id))
}

// OrderID applies equality check predicate on the "order_id" field. It's identical to OrderIDEQ.
func OrderID(v int) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldEQ(FieldOrderID, v))
}

// SharingNo applies equality check predicate on the "sharing_no" field. It's identical to SharingNoEQ.
func SharingNo(v string) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldEQ(FieldSharingNo, v))
}

// WxSharingID applies equality check predicate on the "wx_sharing_id" field. It's identical to WxSharingIDEQ.
func WxSharingID(v string) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldEQ(FieldWxSharingID, v))
}

// SharingAmount applies equality check predicate on the "sharing_amount" field. It's identical to SharingAmountEQ.
func SharingAmount(v int) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldEQ(FieldSharingAmount, v))
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v int) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldEQ(FieldState, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldEQ(FieldRemark, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldEQ(FieldUpdateTime, v))
}

// OrderIDEQ applies the EQ predicate on the "order_id" field.
func OrderIDEQ(v int) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldEQ(FieldOrderID, v))
}

// OrderIDNEQ applies the NEQ predicate on the "order_id" field.
func OrderIDNEQ(v int) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldNEQ(FieldOrderID, v))
}

// OrderIDIn applies the In predicate on the "order_id" field.
func OrderIDIn(vs ...int) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldIn(FieldOrderID, vs...))
}

// OrderIDNotIn applies the NotIn predicate on the "order_id" field.
func OrderIDNotIn(vs ...int) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldNotIn(FieldOrderID, vs...))
}

// SharingNoEQ applies the EQ predicate on the "sharing_no" field.
func SharingNoEQ(v string) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldEQ(FieldSharingNo, v))
}

// SharingNoNEQ applies the NEQ predicate on the "sharing_no" field.
func SharingNoNEQ(v string) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldNEQ(FieldSharingNo, v))
}

// SharingNoIn applies the In predicate on the "sharing_no" field.
func SharingNoIn(vs ...string) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldIn(FieldSharingNo, vs...))
}

// SharingNoNotIn applies the NotIn predicate on the "sharing_no" field.
func SharingNoNotIn(vs ...string) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldNotIn(FieldSharingNo, vs...))
}

// SharingNoGT applies the GT predicate on the "sharing_no" field.
func SharingNoGT(v string) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldGT(FieldSharingNo, v))
}

// SharingNoGTE applies the GTE predicate on the "sharing_no" field.
func SharingNoGTE(v string) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldGTE(FieldSharingNo, v))
}

// SharingNoLT applies the LT predicate on the "sharing_no" field.
func SharingNoLT(v string) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldLT(FieldSharingNo, v))
}

// SharingNoLTE applies the LTE predicate on the "sharing_no" field.
func SharingNoLTE(v string) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldLTE(FieldSharingNo, v))
}

// SharingNoContains applies the Contains predicate on the "sharing_no" field.
func SharingNoContains(v string) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldContains(FieldSharingNo, v))
}

// SharingNoHasPrefix applies the HasPrefix predicate on the "sharing_no" field.
func SharingNoHasPrefix(v string) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldHasPrefix(FieldSharingNo, v))
}

// SharingNoHasSuffix applies the HasSuffix predicate on the "sharing_no" field.
func SharingNoHasSuffix(v string) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldHasSuffix(FieldSharingNo, v))
}

// SharingNoEqualFold applies the EqualFold predicate on the "sharing_no" field.
func SharingNoEqualFold(v string) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldEqualFold(FieldSharingNo, v))
}

// SharingNoContainsFold applies the ContainsFold predicate on the "sharing_no" field.
func SharingNoContainsFold(v string) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldContainsFold(FieldSharingNo, v))
}

// WxSharingIDEQ applies the EQ predicate on the "wx_sharing_id" field.
func WxSharingIDEQ(v string) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldEQ(FieldWxSharingID, v))
}

// WxSharingIDNEQ applies the NEQ predicate on the "wx_sharing_id" field.
func WxSharingIDNEQ(v string) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldNEQ(FieldWxSharingID, v))
}

// WxSharingIDIn applies the In predicate on the "wx_sharing_id" field.
func WxSharingIDIn(vs ...string) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldIn(FieldWxSharingID, vs...))
}

// WxSharingIDNotIn applies the NotIn predicate on the "wx_sharing_id" field.
func WxSharingIDNotIn(vs ...string) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldNotIn(FieldWxSharingID, vs...))
}

// WxSharingIDGT applies the GT predicate on the "wx_sharing_id" field.
func WxSharingIDGT(v string) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldGT(FieldWxSharingID, v))
}

// WxSharingIDGTE applies the GTE predicate on the "wx_sharing_id" field.
func WxSharingIDGTE(v string) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldGTE(FieldWxSharingID, v))
}

// WxSharingIDLT applies the LT predicate on the "wx_sharing_id" field.
func WxSharingIDLT(v string) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldLT(FieldWxSharingID, v))
}

// WxSharingIDLTE applies the LTE predicate on the "wx_sharing_id" field.
func WxSharingIDLTE(v string) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldLTE(FieldWxSharingID, v))
}

// WxSharingIDContains applies the Contains predicate on the "wx_sharing_id" field.
func WxSharingIDContains(v string) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldContains(FieldWxSharingID, v))
}

// WxSharingIDHasPrefix applies the HasPrefix predicate on the "wx_sharing_id" field.
func WxSharingIDHasPrefix(v string) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldHasPrefix(FieldWxSharingID, v))
}

// WxSharingIDHasSuffix applies the HasSuffix predicate on the "wx_sharing_id" field.
func WxSharingIDHasSuffix(v string) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldHasSuffix(FieldWxSharingID, v))
}

// WxSharingIDEqualFold applies the EqualFold predicate on the "wx_sharing_id" field.
func WxSharingIDEqualFold(v string) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldEqualFold(FieldWxSharingID, v))
}

// WxSharingIDContainsFold applies the ContainsFold predicate on the "wx_sharing_id" field.
func WxSharingIDContainsFold(v string) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldContainsFold(FieldWxSharingID, v))
}

// SharingAmountEQ applies the EQ predicate on the "sharing_amount" field.
func SharingAmountEQ(v int) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldEQ(FieldSharingAmount, v))
}

// SharingAmountNEQ applies the NEQ predicate on the "sharing_amount" field.
func SharingAmountNEQ(v int) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldNEQ(FieldSharingAmount, v))
}

// SharingAmountIn applies the In predicate on the "sharing_amount" field.
func SharingAmountIn(vs ...int) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldIn(FieldSharingAmount, vs...))
}

// SharingAmountNotIn applies the NotIn predicate on the "sharing_amount" field.
func SharingAmountNotIn(vs ...int) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldNotIn(FieldSharingAmount, vs...))
}

// SharingAmountGT applies the GT predicate on the "sharing_amount" field.
func SharingAmountGT(v int) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldGT(FieldSharingAmount, v))
}

// SharingAmountGTE applies the GTE predicate on the "sharing_amount" field.
func SharingAmountGTE(v int) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldGTE(FieldSharingAmount, v))
}

// SharingAmountLT applies the LT predicate on the "sharing_amount" field.
func SharingAmountLT(v int) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldLT(FieldSharingAmount, v))
}

// SharingAmountLTE applies the LTE predicate on the "sharing_amount" field.
func SharingAmountLTE(v int) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldLTE(FieldSharingAmount, v))
}

// ReceiversIsNil applies the IsNil predicate on the "receivers" field.
func ReceiversIsNil() predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldIsNull(FieldReceivers))
}

// ReceiversNotNil applies the NotNil predicate on the "receivers" field.
func ReceiversNotNil() predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldNotNull(FieldReceivers))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v int) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v int) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...int) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...int) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v int) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v int) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v int) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v int) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldLTE(FieldState, v))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldContainsFold(FieldRemark, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.OrderSharing {
	return predicate.OrderSharing(sql.FieldLTE(FieldUpdateTime, v))
}

// HasOrder applies the HasEdge predicate on the "order" edge.
func HasOrder() predicate.OrderSharing {
	return predicate.OrderSharing(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, OrderTable, OrderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderWith applies the HasEdge predicate on the "order" edge with a given conditions (other predicates).
func HasOrderWith(preds ...predicate.Order) predicate.OrderSharing {
	return predicate.OrderSharing(func(s *sql.Selector) {
		step := newOrderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrderSharing) predicate.OrderSharing {
	return predicate.OrderSharing(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrderSharing) predicate.OrderSharing {
	return predicate.OrderSharing(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrderSharing) predicate.OrderSharing {
	return predicate.OrderSharing(sql.NotPredicates(p))
}
