// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/order"
	"github.com/jianbo-zh/jydata/database/ent/orderbilling"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
)

// OrderBillingUpdate is the builder for updating OrderBilling entities.
type OrderBillingUpdate struct {
	config
	hooks    []Hook
	mutation *OrderBillingMutation
}

// Where appends a list predicates to the OrderBillingUpdate builder.
func (obu *OrderBillingUpdate) Where(ps ...predicate.OrderBilling) *OrderBillingUpdate {
	obu.mutation.Where(ps...)
	return obu
}

// SetOrderID sets the "order_id" field.
func (obu *OrderBillingUpdate) SetOrderID(i int) *OrderBillingUpdate {
	obu.mutation.SetOrderID(i)
	return obu
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (obu *OrderBillingUpdate) SetNillableOrderID(i *int) *OrderBillingUpdate {
	if i != nil {
		obu.SetOrderID(*i)
	}
	return obu
}

// SetStartTimePrice sets the "start_time_price" field.
func (obu *OrderBillingUpdate) SetStartTimePrice(i int) *OrderBillingUpdate {
	obu.mutation.ResetStartTimePrice()
	obu.mutation.SetStartTimePrice(i)
	return obu
}

// SetNillableStartTimePrice sets the "start_time_price" field if the given value is not nil.
func (obu *OrderBillingUpdate) SetNillableStartTimePrice(i *int) *OrderBillingUpdate {
	if i != nil {
		obu.SetStartTimePrice(*i)
	}
	return obu
}

// AddStartTimePrice adds i to the "start_time_price" field.
func (obu *OrderBillingUpdate) AddStartTimePrice(i int) *OrderBillingUpdate {
	obu.mutation.AddStartTimePrice(i)
	return obu
}

// SetStartTimeUnit sets the "start_time_unit" field.
func (obu *OrderBillingUpdate) SetStartTimeUnit(i int) *OrderBillingUpdate {
	obu.mutation.ResetStartTimeUnit()
	obu.mutation.SetStartTimeUnit(i)
	return obu
}

// SetNillableStartTimeUnit sets the "start_time_unit" field if the given value is not nil.
func (obu *OrderBillingUpdate) SetNillableStartTimeUnit(i *int) *OrderBillingUpdate {
	if i != nil {
		obu.SetStartTimeUnit(*i)
	}
	return obu
}

// AddStartTimeUnit adds i to the "start_time_unit" field.
func (obu *OrderBillingUpdate) AddStartTimeUnit(i int) *OrderBillingUpdate {
	obu.mutation.AddStartTimeUnit(i)
	return obu
}

// SetNormalTimePrice sets the "normal_time_price" field.
func (obu *OrderBillingUpdate) SetNormalTimePrice(i int) *OrderBillingUpdate {
	obu.mutation.ResetNormalTimePrice()
	obu.mutation.SetNormalTimePrice(i)
	return obu
}

// SetNillableNormalTimePrice sets the "normal_time_price" field if the given value is not nil.
func (obu *OrderBillingUpdate) SetNillableNormalTimePrice(i *int) *OrderBillingUpdate {
	if i != nil {
		obu.SetNormalTimePrice(*i)
	}
	return obu
}

// AddNormalTimePrice adds i to the "normal_time_price" field.
func (obu *OrderBillingUpdate) AddNormalTimePrice(i int) *OrderBillingUpdate {
	obu.mutation.AddNormalTimePrice(i)
	return obu
}

// SetNormalTimeUnit sets the "normal_time_unit" field.
func (obu *OrderBillingUpdate) SetNormalTimeUnit(i int) *OrderBillingUpdate {
	obu.mutation.ResetNormalTimeUnit()
	obu.mutation.SetNormalTimeUnit(i)
	return obu
}

// SetNillableNormalTimeUnit sets the "normal_time_unit" field if the given value is not nil.
func (obu *OrderBillingUpdate) SetNillableNormalTimeUnit(i *int) *OrderBillingUpdate {
	if i != nil {
		obu.SetNormalTimeUnit(*i)
	}
	return obu
}

// AddNormalTimeUnit adds i to the "normal_time_unit" field.
func (obu *OrderBillingUpdate) AddNormalTimeUnit(i int) *OrderBillingUpdate {
	obu.mutation.AddNormalTimeUnit(i)
	return obu
}

// SetCappedAmount sets the "capped_amount" field.
func (obu *OrderBillingUpdate) SetCappedAmount(i int) *OrderBillingUpdate {
	obu.mutation.ResetCappedAmount()
	obu.mutation.SetCappedAmount(i)
	return obu
}

// SetNillableCappedAmount sets the "capped_amount" field if the given value is not nil.
func (obu *OrderBillingUpdate) SetNillableCappedAmount(i *int) *OrderBillingUpdate {
	if i != nil {
		obu.SetCappedAmount(*i)
	}
	return obu
}

// AddCappedAmount adds i to the "capped_amount" field.
func (obu *OrderBillingUpdate) AddCappedAmount(i int) *OrderBillingUpdate {
	obu.mutation.AddCappedAmount(i)
	return obu
}

// SetCumulativeSecond sets the "cumulative_second" field.
func (obu *OrderBillingUpdate) SetCumulativeSecond(f float64) *OrderBillingUpdate {
	obu.mutation.ResetCumulativeSecond()
	obu.mutation.SetCumulativeSecond(f)
	return obu
}

// SetNillableCumulativeSecond sets the "cumulative_second" field if the given value is not nil.
func (obu *OrderBillingUpdate) SetNillableCumulativeSecond(f *float64) *OrderBillingUpdate {
	if f != nil {
		obu.SetCumulativeSecond(*f)
	}
	return obu
}

// AddCumulativeSecond adds f to the "cumulative_second" field.
func (obu *OrderBillingUpdate) AddCumulativeSecond(f float64) *OrderBillingUpdate {
	obu.mutation.AddCumulativeSecond(f)
	return obu
}

// SetCumulativeMeter sets the "cumulative_meter" field.
func (obu *OrderBillingUpdate) SetCumulativeMeter(f float64) *OrderBillingUpdate {
	obu.mutation.ResetCumulativeMeter()
	obu.mutation.SetCumulativeMeter(f)
	return obu
}

// SetNillableCumulativeMeter sets the "cumulative_meter" field if the given value is not nil.
func (obu *OrderBillingUpdate) SetNillableCumulativeMeter(f *float64) *OrderBillingUpdate {
	if f != nil {
		obu.SetCumulativeMeter(*f)
	}
	return obu
}

// AddCumulativeMeter adds f to the "cumulative_meter" field.
func (obu *OrderBillingUpdate) AddCumulativeMeter(f float64) *OrderBillingUpdate {
	obu.mutation.AddCumulativeMeter(f)
	return obu
}

// SetState sets the "state" field.
func (obu *OrderBillingUpdate) SetState(i int) *OrderBillingUpdate {
	obu.mutation.ResetState()
	obu.mutation.SetState(i)
	return obu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (obu *OrderBillingUpdate) SetNillableState(i *int) *OrderBillingUpdate {
	if i != nil {
		obu.SetState(*i)
	}
	return obu
}

// AddState adds i to the "state" field.
func (obu *OrderBillingUpdate) AddState(i int) *OrderBillingUpdate {
	obu.mutation.AddState(i)
	return obu
}

// SetStartTime sets the "start_time" field.
func (obu *OrderBillingUpdate) SetStartTime(t time.Time) *OrderBillingUpdate {
	obu.mutation.SetStartTime(t)
	return obu
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (obu *OrderBillingUpdate) SetNillableStartTime(t *time.Time) *OrderBillingUpdate {
	if t != nil {
		obu.SetStartTime(*t)
	}
	return obu
}

// ClearStartTime clears the value of the "start_time" field.
func (obu *OrderBillingUpdate) ClearStartTime() *OrderBillingUpdate {
	obu.mutation.ClearStartTime()
	return obu
}

// SetFinishTime sets the "finish_time" field.
func (obu *OrderBillingUpdate) SetFinishTime(t time.Time) *OrderBillingUpdate {
	obu.mutation.SetFinishTime(t)
	return obu
}

// SetNillableFinishTime sets the "finish_time" field if the given value is not nil.
func (obu *OrderBillingUpdate) SetNillableFinishTime(t *time.Time) *OrderBillingUpdate {
	if t != nil {
		obu.SetFinishTime(*t)
	}
	return obu
}

// ClearFinishTime clears the value of the "finish_time" field.
func (obu *OrderBillingUpdate) ClearFinishTime() *OrderBillingUpdate {
	obu.mutation.ClearFinishTime()
	return obu
}

// SetUpdateTime sets the "update_time" field.
func (obu *OrderBillingUpdate) SetUpdateTime(t time.Time) *OrderBillingUpdate {
	obu.mutation.SetUpdateTime(t)
	return obu
}

// SetOrder sets the "order" edge to the Order entity.
func (obu *OrderBillingUpdate) SetOrder(o *Order) *OrderBillingUpdate {
	return obu.SetOrderID(o.ID)
}

// Mutation returns the OrderBillingMutation object of the builder.
func (obu *OrderBillingUpdate) Mutation() *OrderBillingMutation {
	return obu.mutation
}

// ClearOrder clears the "order" edge to the Order entity.
func (obu *OrderBillingUpdate) ClearOrder() *OrderBillingUpdate {
	obu.mutation.ClearOrder()
	return obu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (obu *OrderBillingUpdate) Save(ctx context.Context) (int, error) {
	obu.defaults()
	return withHooks(ctx, obu.sqlSave, obu.mutation, obu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (obu *OrderBillingUpdate) SaveX(ctx context.Context) int {
	affected, err := obu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (obu *OrderBillingUpdate) Exec(ctx context.Context) error {
	_, err := obu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (obu *OrderBillingUpdate) ExecX(ctx context.Context) {
	if err := obu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (obu *OrderBillingUpdate) defaults() {
	if _, ok := obu.mutation.UpdateTime(); !ok {
		v := orderbilling.UpdateDefaultUpdateTime()
		obu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (obu *OrderBillingUpdate) check() error {
	if obu.mutation.OrderCleared() && len(obu.mutation.OrderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OrderBilling.order"`)
	}
	return nil
}

func (obu *OrderBillingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := obu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(orderbilling.Table, orderbilling.Columns, sqlgraph.NewFieldSpec(orderbilling.FieldID, field.TypeInt))
	if ps := obu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := obu.mutation.StartTimePrice(); ok {
		_spec.SetField(orderbilling.FieldStartTimePrice, field.TypeInt, value)
	}
	if value, ok := obu.mutation.AddedStartTimePrice(); ok {
		_spec.AddField(orderbilling.FieldStartTimePrice, field.TypeInt, value)
	}
	if value, ok := obu.mutation.StartTimeUnit(); ok {
		_spec.SetField(orderbilling.FieldStartTimeUnit, field.TypeInt, value)
	}
	if value, ok := obu.mutation.AddedStartTimeUnit(); ok {
		_spec.AddField(orderbilling.FieldStartTimeUnit, field.TypeInt, value)
	}
	if value, ok := obu.mutation.NormalTimePrice(); ok {
		_spec.SetField(orderbilling.FieldNormalTimePrice, field.TypeInt, value)
	}
	if value, ok := obu.mutation.AddedNormalTimePrice(); ok {
		_spec.AddField(orderbilling.FieldNormalTimePrice, field.TypeInt, value)
	}
	if value, ok := obu.mutation.NormalTimeUnit(); ok {
		_spec.SetField(orderbilling.FieldNormalTimeUnit, field.TypeInt, value)
	}
	if value, ok := obu.mutation.AddedNormalTimeUnit(); ok {
		_spec.AddField(orderbilling.FieldNormalTimeUnit, field.TypeInt, value)
	}
	if value, ok := obu.mutation.CappedAmount(); ok {
		_spec.SetField(orderbilling.FieldCappedAmount, field.TypeInt, value)
	}
	if value, ok := obu.mutation.AddedCappedAmount(); ok {
		_spec.AddField(orderbilling.FieldCappedAmount, field.TypeInt, value)
	}
	if value, ok := obu.mutation.CumulativeSecond(); ok {
		_spec.SetField(orderbilling.FieldCumulativeSecond, field.TypeFloat64, value)
	}
	if value, ok := obu.mutation.AddedCumulativeSecond(); ok {
		_spec.AddField(orderbilling.FieldCumulativeSecond, field.TypeFloat64, value)
	}
	if value, ok := obu.mutation.CumulativeMeter(); ok {
		_spec.SetField(orderbilling.FieldCumulativeMeter, field.TypeFloat64, value)
	}
	if value, ok := obu.mutation.AddedCumulativeMeter(); ok {
		_spec.AddField(orderbilling.FieldCumulativeMeter, field.TypeFloat64, value)
	}
	if value, ok := obu.mutation.State(); ok {
		_spec.SetField(orderbilling.FieldState, field.TypeInt, value)
	}
	if value, ok := obu.mutation.AddedState(); ok {
		_spec.AddField(orderbilling.FieldState, field.TypeInt, value)
	}
	if value, ok := obu.mutation.StartTime(); ok {
		_spec.SetField(orderbilling.FieldStartTime, field.TypeTime, value)
	}
	if obu.mutation.StartTimeCleared() {
		_spec.ClearField(orderbilling.FieldStartTime, field.TypeTime)
	}
	if value, ok := obu.mutation.FinishTime(); ok {
		_spec.SetField(orderbilling.FieldFinishTime, field.TypeTime, value)
	}
	if obu.mutation.FinishTimeCleared() {
		_spec.ClearField(orderbilling.FieldFinishTime, field.TypeTime)
	}
	if value, ok := obu.mutation.UpdateTime(); ok {
		_spec.SetField(orderbilling.FieldUpdateTime, field.TypeTime, value)
	}
	if obu.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   orderbilling.OrderTable,
			Columns: []string{orderbilling.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := obu.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   orderbilling.OrderTable,
			Columns: []string{orderbilling.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, obu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderbilling.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	obu.mutation.done = true
	return n, nil
}

// OrderBillingUpdateOne is the builder for updating a single OrderBilling entity.
type OrderBillingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderBillingMutation
}

// SetOrderID sets the "order_id" field.
func (obuo *OrderBillingUpdateOne) SetOrderID(i int) *OrderBillingUpdateOne {
	obuo.mutation.SetOrderID(i)
	return obuo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (obuo *OrderBillingUpdateOne) SetNillableOrderID(i *int) *OrderBillingUpdateOne {
	if i != nil {
		obuo.SetOrderID(*i)
	}
	return obuo
}

// SetStartTimePrice sets the "start_time_price" field.
func (obuo *OrderBillingUpdateOne) SetStartTimePrice(i int) *OrderBillingUpdateOne {
	obuo.mutation.ResetStartTimePrice()
	obuo.mutation.SetStartTimePrice(i)
	return obuo
}

// SetNillableStartTimePrice sets the "start_time_price" field if the given value is not nil.
func (obuo *OrderBillingUpdateOne) SetNillableStartTimePrice(i *int) *OrderBillingUpdateOne {
	if i != nil {
		obuo.SetStartTimePrice(*i)
	}
	return obuo
}

// AddStartTimePrice adds i to the "start_time_price" field.
func (obuo *OrderBillingUpdateOne) AddStartTimePrice(i int) *OrderBillingUpdateOne {
	obuo.mutation.AddStartTimePrice(i)
	return obuo
}

// SetStartTimeUnit sets the "start_time_unit" field.
func (obuo *OrderBillingUpdateOne) SetStartTimeUnit(i int) *OrderBillingUpdateOne {
	obuo.mutation.ResetStartTimeUnit()
	obuo.mutation.SetStartTimeUnit(i)
	return obuo
}

// SetNillableStartTimeUnit sets the "start_time_unit" field if the given value is not nil.
func (obuo *OrderBillingUpdateOne) SetNillableStartTimeUnit(i *int) *OrderBillingUpdateOne {
	if i != nil {
		obuo.SetStartTimeUnit(*i)
	}
	return obuo
}

// AddStartTimeUnit adds i to the "start_time_unit" field.
func (obuo *OrderBillingUpdateOne) AddStartTimeUnit(i int) *OrderBillingUpdateOne {
	obuo.mutation.AddStartTimeUnit(i)
	return obuo
}

// SetNormalTimePrice sets the "normal_time_price" field.
func (obuo *OrderBillingUpdateOne) SetNormalTimePrice(i int) *OrderBillingUpdateOne {
	obuo.mutation.ResetNormalTimePrice()
	obuo.mutation.SetNormalTimePrice(i)
	return obuo
}

// SetNillableNormalTimePrice sets the "normal_time_price" field if the given value is not nil.
func (obuo *OrderBillingUpdateOne) SetNillableNormalTimePrice(i *int) *OrderBillingUpdateOne {
	if i != nil {
		obuo.SetNormalTimePrice(*i)
	}
	return obuo
}

// AddNormalTimePrice adds i to the "normal_time_price" field.
func (obuo *OrderBillingUpdateOne) AddNormalTimePrice(i int) *OrderBillingUpdateOne {
	obuo.mutation.AddNormalTimePrice(i)
	return obuo
}

// SetNormalTimeUnit sets the "normal_time_unit" field.
func (obuo *OrderBillingUpdateOne) SetNormalTimeUnit(i int) *OrderBillingUpdateOne {
	obuo.mutation.ResetNormalTimeUnit()
	obuo.mutation.SetNormalTimeUnit(i)
	return obuo
}

// SetNillableNormalTimeUnit sets the "normal_time_unit" field if the given value is not nil.
func (obuo *OrderBillingUpdateOne) SetNillableNormalTimeUnit(i *int) *OrderBillingUpdateOne {
	if i != nil {
		obuo.SetNormalTimeUnit(*i)
	}
	return obuo
}

// AddNormalTimeUnit adds i to the "normal_time_unit" field.
func (obuo *OrderBillingUpdateOne) AddNormalTimeUnit(i int) *OrderBillingUpdateOne {
	obuo.mutation.AddNormalTimeUnit(i)
	return obuo
}

// SetCappedAmount sets the "capped_amount" field.
func (obuo *OrderBillingUpdateOne) SetCappedAmount(i int) *OrderBillingUpdateOne {
	obuo.mutation.ResetCappedAmount()
	obuo.mutation.SetCappedAmount(i)
	return obuo
}

// SetNillableCappedAmount sets the "capped_amount" field if the given value is not nil.
func (obuo *OrderBillingUpdateOne) SetNillableCappedAmount(i *int) *OrderBillingUpdateOne {
	if i != nil {
		obuo.SetCappedAmount(*i)
	}
	return obuo
}

// AddCappedAmount adds i to the "capped_amount" field.
func (obuo *OrderBillingUpdateOne) AddCappedAmount(i int) *OrderBillingUpdateOne {
	obuo.mutation.AddCappedAmount(i)
	return obuo
}

// SetCumulativeSecond sets the "cumulative_second" field.
func (obuo *OrderBillingUpdateOne) SetCumulativeSecond(f float64) *OrderBillingUpdateOne {
	obuo.mutation.ResetCumulativeSecond()
	obuo.mutation.SetCumulativeSecond(f)
	return obuo
}

// SetNillableCumulativeSecond sets the "cumulative_second" field if the given value is not nil.
func (obuo *OrderBillingUpdateOne) SetNillableCumulativeSecond(f *float64) *OrderBillingUpdateOne {
	if f != nil {
		obuo.SetCumulativeSecond(*f)
	}
	return obuo
}

// AddCumulativeSecond adds f to the "cumulative_second" field.
func (obuo *OrderBillingUpdateOne) AddCumulativeSecond(f float64) *OrderBillingUpdateOne {
	obuo.mutation.AddCumulativeSecond(f)
	return obuo
}

// SetCumulativeMeter sets the "cumulative_meter" field.
func (obuo *OrderBillingUpdateOne) SetCumulativeMeter(f float64) *OrderBillingUpdateOne {
	obuo.mutation.ResetCumulativeMeter()
	obuo.mutation.SetCumulativeMeter(f)
	return obuo
}

// SetNillableCumulativeMeter sets the "cumulative_meter" field if the given value is not nil.
func (obuo *OrderBillingUpdateOne) SetNillableCumulativeMeter(f *float64) *OrderBillingUpdateOne {
	if f != nil {
		obuo.SetCumulativeMeter(*f)
	}
	return obuo
}

// AddCumulativeMeter adds f to the "cumulative_meter" field.
func (obuo *OrderBillingUpdateOne) AddCumulativeMeter(f float64) *OrderBillingUpdateOne {
	obuo.mutation.AddCumulativeMeter(f)
	return obuo
}

// SetState sets the "state" field.
func (obuo *OrderBillingUpdateOne) SetState(i int) *OrderBillingUpdateOne {
	obuo.mutation.ResetState()
	obuo.mutation.SetState(i)
	return obuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (obuo *OrderBillingUpdateOne) SetNillableState(i *int) *OrderBillingUpdateOne {
	if i != nil {
		obuo.SetState(*i)
	}
	return obuo
}

// AddState adds i to the "state" field.
func (obuo *OrderBillingUpdateOne) AddState(i int) *OrderBillingUpdateOne {
	obuo.mutation.AddState(i)
	return obuo
}

// SetStartTime sets the "start_time" field.
func (obuo *OrderBillingUpdateOne) SetStartTime(t time.Time) *OrderBillingUpdateOne {
	obuo.mutation.SetStartTime(t)
	return obuo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (obuo *OrderBillingUpdateOne) SetNillableStartTime(t *time.Time) *OrderBillingUpdateOne {
	if t != nil {
		obuo.SetStartTime(*t)
	}
	return obuo
}

// ClearStartTime clears the value of the "start_time" field.
func (obuo *OrderBillingUpdateOne) ClearStartTime() *OrderBillingUpdateOne {
	obuo.mutation.ClearStartTime()
	return obuo
}

// SetFinishTime sets the "finish_time" field.
func (obuo *OrderBillingUpdateOne) SetFinishTime(t time.Time) *OrderBillingUpdateOne {
	obuo.mutation.SetFinishTime(t)
	return obuo
}

// SetNillableFinishTime sets the "finish_time" field if the given value is not nil.
func (obuo *OrderBillingUpdateOne) SetNillableFinishTime(t *time.Time) *OrderBillingUpdateOne {
	if t != nil {
		obuo.SetFinishTime(*t)
	}
	return obuo
}

// ClearFinishTime clears the value of the "finish_time" field.
func (obuo *OrderBillingUpdateOne) ClearFinishTime() *OrderBillingUpdateOne {
	obuo.mutation.ClearFinishTime()
	return obuo
}

// SetUpdateTime sets the "update_time" field.
func (obuo *OrderBillingUpdateOne) SetUpdateTime(t time.Time) *OrderBillingUpdateOne {
	obuo.mutation.SetUpdateTime(t)
	return obuo
}

// SetOrder sets the "order" edge to the Order entity.
func (obuo *OrderBillingUpdateOne) SetOrder(o *Order) *OrderBillingUpdateOne {
	return obuo.SetOrderID(o.ID)
}

// Mutation returns the OrderBillingMutation object of the builder.
func (obuo *OrderBillingUpdateOne) Mutation() *OrderBillingMutation {
	return obuo.mutation
}

// ClearOrder clears the "order" edge to the Order entity.
func (obuo *OrderBillingUpdateOne) ClearOrder() *OrderBillingUpdateOne {
	obuo.mutation.ClearOrder()
	return obuo
}

// Where appends a list predicates to the OrderBillingUpdate builder.
func (obuo *OrderBillingUpdateOne) Where(ps ...predicate.OrderBilling) *OrderBillingUpdateOne {
	obuo.mutation.Where(ps...)
	return obuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (obuo *OrderBillingUpdateOne) Select(field string, fields ...string) *OrderBillingUpdateOne {
	obuo.fields = append([]string{field}, fields...)
	return obuo
}

// Save executes the query and returns the updated OrderBilling entity.
func (obuo *OrderBillingUpdateOne) Save(ctx context.Context) (*OrderBilling, error) {
	obuo.defaults()
	return withHooks(ctx, obuo.sqlSave, obuo.mutation, obuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (obuo *OrderBillingUpdateOne) SaveX(ctx context.Context) *OrderBilling {
	node, err := obuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (obuo *OrderBillingUpdateOne) Exec(ctx context.Context) error {
	_, err := obuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (obuo *OrderBillingUpdateOne) ExecX(ctx context.Context) {
	if err := obuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (obuo *OrderBillingUpdateOne) defaults() {
	if _, ok := obuo.mutation.UpdateTime(); !ok {
		v := orderbilling.UpdateDefaultUpdateTime()
		obuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (obuo *OrderBillingUpdateOne) check() error {
	if obuo.mutation.OrderCleared() && len(obuo.mutation.OrderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OrderBilling.order"`)
	}
	return nil
}

func (obuo *OrderBillingUpdateOne) sqlSave(ctx context.Context) (_node *OrderBilling, err error) {
	if err := obuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(orderbilling.Table, orderbilling.Columns, sqlgraph.NewFieldSpec(orderbilling.FieldID, field.TypeInt))
	id, ok := obuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrderBilling.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := obuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderbilling.FieldID)
		for _, f := range fields {
			if !orderbilling.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orderbilling.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := obuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := obuo.mutation.StartTimePrice(); ok {
		_spec.SetField(orderbilling.FieldStartTimePrice, field.TypeInt, value)
	}
	if value, ok := obuo.mutation.AddedStartTimePrice(); ok {
		_spec.AddField(orderbilling.FieldStartTimePrice, field.TypeInt, value)
	}
	if value, ok := obuo.mutation.StartTimeUnit(); ok {
		_spec.SetField(orderbilling.FieldStartTimeUnit, field.TypeInt, value)
	}
	if value, ok := obuo.mutation.AddedStartTimeUnit(); ok {
		_spec.AddField(orderbilling.FieldStartTimeUnit, field.TypeInt, value)
	}
	if value, ok := obuo.mutation.NormalTimePrice(); ok {
		_spec.SetField(orderbilling.FieldNormalTimePrice, field.TypeInt, value)
	}
	if value, ok := obuo.mutation.AddedNormalTimePrice(); ok {
		_spec.AddField(orderbilling.FieldNormalTimePrice, field.TypeInt, value)
	}
	if value, ok := obuo.mutation.NormalTimeUnit(); ok {
		_spec.SetField(orderbilling.FieldNormalTimeUnit, field.TypeInt, value)
	}
	if value, ok := obuo.mutation.AddedNormalTimeUnit(); ok {
		_spec.AddField(orderbilling.FieldNormalTimeUnit, field.TypeInt, value)
	}
	if value, ok := obuo.mutation.CappedAmount(); ok {
		_spec.SetField(orderbilling.FieldCappedAmount, field.TypeInt, value)
	}
	if value, ok := obuo.mutation.AddedCappedAmount(); ok {
		_spec.AddField(orderbilling.FieldCappedAmount, field.TypeInt, value)
	}
	if value, ok := obuo.mutation.CumulativeSecond(); ok {
		_spec.SetField(orderbilling.FieldCumulativeSecond, field.TypeFloat64, value)
	}
	if value, ok := obuo.mutation.AddedCumulativeSecond(); ok {
		_spec.AddField(orderbilling.FieldCumulativeSecond, field.TypeFloat64, value)
	}
	if value, ok := obuo.mutation.CumulativeMeter(); ok {
		_spec.SetField(orderbilling.FieldCumulativeMeter, field.TypeFloat64, value)
	}
	if value, ok := obuo.mutation.AddedCumulativeMeter(); ok {
		_spec.AddField(orderbilling.FieldCumulativeMeter, field.TypeFloat64, value)
	}
	if value, ok := obuo.mutation.State(); ok {
		_spec.SetField(orderbilling.FieldState, field.TypeInt, value)
	}
	if value, ok := obuo.mutation.AddedState(); ok {
		_spec.AddField(orderbilling.FieldState, field.TypeInt, value)
	}
	if value, ok := obuo.mutation.StartTime(); ok {
		_spec.SetField(orderbilling.FieldStartTime, field.TypeTime, value)
	}
	if obuo.mutation.StartTimeCleared() {
		_spec.ClearField(orderbilling.FieldStartTime, field.TypeTime)
	}
	if value, ok := obuo.mutation.FinishTime(); ok {
		_spec.SetField(orderbilling.FieldFinishTime, field.TypeTime, value)
	}
	if obuo.mutation.FinishTimeCleared() {
		_spec.ClearField(orderbilling.FieldFinishTime, field.TypeTime)
	}
	if value, ok := obuo.mutation.UpdateTime(); ok {
		_spec.SetField(orderbilling.FieldUpdateTime, field.TypeTime, value)
	}
	if obuo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   orderbilling.OrderTable,
			Columns: []string{orderbilling.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := obuo.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   orderbilling.OrderTable,
			Columns: []string{orderbilling.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrderBilling{config: obuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, obuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderbilling.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	obuo.mutation.done = true
	return _node, nil
}
