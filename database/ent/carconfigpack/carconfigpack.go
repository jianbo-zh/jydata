// Code generated by ent, DO NOT EDIT.

package carconfigpack

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the carconfigpack type in the database.
	Label = "car_config_pack"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldScenicAreaID holds the string denoting the scenic_area_id field in the database.
	FieldScenicAreaID = "scenic_area_id"
	// FieldModelID holds the string denoting the model_id field in the database.
	FieldModelID = "model_id"
	// FieldCarID holds the string denoting the car_id field in the database.
	FieldCarID = "car_id"
	// FieldCarVersion holds the string denoting the car_version field in the database.
	FieldCarVersion = "car_version"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldConfigIds holds the string denoting the config_ids field in the database.
	FieldConfigIds = "config_ids"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// Table holds the table name of the carconfigpack in the database.
	Table = "car_config_packs"
)

// Columns holds all SQL columns for carconfigpack fields.
var Columns = []string{
	FieldID,
	FieldScenicAreaID,
	FieldModelID,
	FieldCarID,
	FieldCarVersion,
	FieldName,
	FieldRemark,
	FieldVersion,
	FieldConfigIds,
	FieldCreateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCarVersion holds the default value on creation for the "car_version" field.
	DefaultCarVersion string
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
)

// OrderOption defines the ordering options for the CarConfigPack queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByScenicAreaID orders the results by the scenic_area_id field.
func ByScenicAreaID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScenicAreaID, opts...).ToFunc()
}

// ByModelID orders the results by the model_id field.
func ByModelID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModelID, opts...).ToFunc()
}

// ByCarID orders the results by the car_id field.
func ByCarID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCarID, opts...).ToFunc()
}

// ByCarVersion orders the results by the car_version field.
func ByCarVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCarVersion, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}
