// Code generated by ent, DO NOT EDIT.

package carconfigpack

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldLTE(FieldID, id))
}

// ScenicAreaID applies equality check predicate on the "scenic_area_id" field. It's identical to ScenicAreaIDEQ.
func ScenicAreaID(v int) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldEQ(FieldScenicAreaID, v))
}

// ModelID applies equality check predicate on the "model_id" field. It's identical to ModelIDEQ.
func ModelID(v int) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldEQ(FieldModelID, v))
}

// CarID applies equality check predicate on the "car_id" field. It's identical to CarIDEQ.
func CarID(v int) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldEQ(FieldCarID, v))
}

// CarVersion applies equality check predicate on the "car_version" field. It's identical to CarVersionEQ.
func CarVersion(v string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldEQ(FieldCarVersion, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldEQ(FieldName, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldEQ(FieldRemark, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldEQ(FieldVersion, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldEQ(FieldCreateTime, v))
}

// ScenicAreaIDEQ applies the EQ predicate on the "scenic_area_id" field.
func ScenicAreaIDEQ(v int) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldEQ(FieldScenicAreaID, v))
}

// ScenicAreaIDNEQ applies the NEQ predicate on the "scenic_area_id" field.
func ScenicAreaIDNEQ(v int) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldNEQ(FieldScenicAreaID, v))
}

// ScenicAreaIDIn applies the In predicate on the "scenic_area_id" field.
func ScenicAreaIDIn(vs ...int) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldIn(FieldScenicAreaID, vs...))
}

// ScenicAreaIDNotIn applies the NotIn predicate on the "scenic_area_id" field.
func ScenicAreaIDNotIn(vs ...int) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldNotIn(FieldScenicAreaID, vs...))
}

// ScenicAreaIDGT applies the GT predicate on the "scenic_area_id" field.
func ScenicAreaIDGT(v int) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldGT(FieldScenicAreaID, v))
}

// ScenicAreaIDGTE applies the GTE predicate on the "scenic_area_id" field.
func ScenicAreaIDGTE(v int) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldGTE(FieldScenicAreaID, v))
}

// ScenicAreaIDLT applies the LT predicate on the "scenic_area_id" field.
func ScenicAreaIDLT(v int) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldLT(FieldScenicAreaID, v))
}

// ScenicAreaIDLTE applies the LTE predicate on the "scenic_area_id" field.
func ScenicAreaIDLTE(v int) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldLTE(FieldScenicAreaID, v))
}

// ScenicAreaIDIsNil applies the IsNil predicate on the "scenic_area_id" field.
func ScenicAreaIDIsNil() predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldIsNull(FieldScenicAreaID))
}

// ScenicAreaIDNotNil applies the NotNil predicate on the "scenic_area_id" field.
func ScenicAreaIDNotNil() predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldNotNull(FieldScenicAreaID))
}

// ModelIDEQ applies the EQ predicate on the "model_id" field.
func ModelIDEQ(v int) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldEQ(FieldModelID, v))
}

// ModelIDNEQ applies the NEQ predicate on the "model_id" field.
func ModelIDNEQ(v int) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldNEQ(FieldModelID, v))
}

// ModelIDIn applies the In predicate on the "model_id" field.
func ModelIDIn(vs ...int) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldIn(FieldModelID, vs...))
}

// ModelIDNotIn applies the NotIn predicate on the "model_id" field.
func ModelIDNotIn(vs ...int) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldNotIn(FieldModelID, vs...))
}

// ModelIDGT applies the GT predicate on the "model_id" field.
func ModelIDGT(v int) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldGT(FieldModelID, v))
}

// ModelIDGTE applies the GTE predicate on the "model_id" field.
func ModelIDGTE(v int) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldGTE(FieldModelID, v))
}

// ModelIDLT applies the LT predicate on the "model_id" field.
func ModelIDLT(v int) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldLT(FieldModelID, v))
}

// ModelIDLTE applies the LTE predicate on the "model_id" field.
func ModelIDLTE(v int) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldLTE(FieldModelID, v))
}

// ModelIDIsNil applies the IsNil predicate on the "model_id" field.
func ModelIDIsNil() predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldIsNull(FieldModelID))
}

// ModelIDNotNil applies the NotNil predicate on the "model_id" field.
func ModelIDNotNil() predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldNotNull(FieldModelID))
}

// CarIDEQ applies the EQ predicate on the "car_id" field.
func CarIDEQ(v int) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldEQ(FieldCarID, v))
}

// CarIDNEQ applies the NEQ predicate on the "car_id" field.
func CarIDNEQ(v int) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldNEQ(FieldCarID, v))
}

// CarIDIn applies the In predicate on the "car_id" field.
func CarIDIn(vs ...int) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldIn(FieldCarID, vs...))
}

// CarIDNotIn applies the NotIn predicate on the "car_id" field.
func CarIDNotIn(vs ...int) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldNotIn(FieldCarID, vs...))
}

// CarIDGT applies the GT predicate on the "car_id" field.
func CarIDGT(v int) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldGT(FieldCarID, v))
}

// CarIDGTE applies the GTE predicate on the "car_id" field.
func CarIDGTE(v int) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldGTE(FieldCarID, v))
}

// CarIDLT applies the LT predicate on the "car_id" field.
func CarIDLT(v int) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldLT(FieldCarID, v))
}

// CarIDLTE applies the LTE predicate on the "car_id" field.
func CarIDLTE(v int) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldLTE(FieldCarID, v))
}

// CarIDIsNil applies the IsNil predicate on the "car_id" field.
func CarIDIsNil() predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldIsNull(FieldCarID))
}

// CarIDNotNil applies the NotNil predicate on the "car_id" field.
func CarIDNotNil() predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldNotNull(FieldCarID))
}

// CarVersionEQ applies the EQ predicate on the "car_version" field.
func CarVersionEQ(v string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldEQ(FieldCarVersion, v))
}

// CarVersionNEQ applies the NEQ predicate on the "car_version" field.
func CarVersionNEQ(v string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldNEQ(FieldCarVersion, v))
}

// CarVersionIn applies the In predicate on the "car_version" field.
func CarVersionIn(vs ...string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldIn(FieldCarVersion, vs...))
}

// CarVersionNotIn applies the NotIn predicate on the "car_version" field.
func CarVersionNotIn(vs ...string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldNotIn(FieldCarVersion, vs...))
}

// CarVersionGT applies the GT predicate on the "car_version" field.
func CarVersionGT(v string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldGT(FieldCarVersion, v))
}

// CarVersionGTE applies the GTE predicate on the "car_version" field.
func CarVersionGTE(v string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldGTE(FieldCarVersion, v))
}

// CarVersionLT applies the LT predicate on the "car_version" field.
func CarVersionLT(v string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldLT(FieldCarVersion, v))
}

// CarVersionLTE applies the LTE predicate on the "car_version" field.
func CarVersionLTE(v string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldLTE(FieldCarVersion, v))
}

// CarVersionContains applies the Contains predicate on the "car_version" field.
func CarVersionContains(v string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldContains(FieldCarVersion, v))
}

// CarVersionHasPrefix applies the HasPrefix predicate on the "car_version" field.
func CarVersionHasPrefix(v string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldHasPrefix(FieldCarVersion, v))
}

// CarVersionHasSuffix applies the HasSuffix predicate on the "car_version" field.
func CarVersionHasSuffix(v string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldHasSuffix(FieldCarVersion, v))
}

// CarVersionEqualFold applies the EqualFold predicate on the "car_version" field.
func CarVersionEqualFold(v string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldEqualFold(FieldCarVersion, v))
}

// CarVersionContainsFold applies the ContainsFold predicate on the "car_version" field.
func CarVersionContainsFold(v string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldContainsFold(FieldCarVersion, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldContainsFold(FieldName, v))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldContainsFold(FieldRemark, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldLTE(FieldVersion, v))
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldContains(FieldVersion, v))
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldHasPrefix(FieldVersion, v))
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldHasSuffix(FieldVersion, v))
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldEqualFold(FieldVersion, v))
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldContainsFold(FieldVersion, v))
}

// ConfigIdsIsNil applies the IsNil predicate on the "config_ids" field.
func ConfigIdsIsNil() predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldIsNull(FieldConfigIds))
}

// ConfigIdsNotNil applies the NotNil predicate on the "config_ids" field.
func ConfigIdsNotNil() predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldNotNull(FieldConfigIds))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.FieldLTE(FieldCreateTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CarConfigPack) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CarConfigPack) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CarConfigPack) predicate.CarConfigPack {
	return predicate.CarConfigPack(sql.NotPredicates(p))
}
