// Code generated by ent, DO NOT EDIT.

package profitreceiver

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the profitreceiver type in the database.
	Label = "profit_receiver"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldScenicAreaID holds the string denoting the scenic_area_id field in the database.
	FieldScenicAreaID = "scenic_area_id"
	// FieldMchID holds the string denoting the mch_id field in the database.
	FieldMchID = "mch_id"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldReceiverType holds the string denoting the receiver_type field in the database.
	FieldReceiverType = "receiver_type"
	// FieldReceiverAccount holds the string denoting the receiver_account field in the database.
	FieldReceiverAccount = "receiver_account"
	// FieldReceiverName holds the string denoting the receiver_name field in the database.
	FieldReceiverName = "receiver_name"
	// FieldSharingRatio holds the string denoting the sharing_ratio field in the database.
	FieldSharingRatio = "sharing_ratio"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// EdgeBackgroundScenicArea holds the string denoting the background_scenic_area edge name in mutations.
	EdgeBackgroundScenicArea = "background_scenic_area"
	// Table holds the table name of the profitreceiver in the database.
	Table = "profit_receivers"
	// BackgroundScenicAreaTable is the table that holds the background_scenic_area relation/edge.
	BackgroundScenicAreaTable = "profit_receivers"
	// BackgroundScenicAreaInverseTable is the table name for the ScenicArea entity.
	// It exists in this package in order to avoid circular dependency with the "scenicarea" package.
	BackgroundScenicAreaInverseTable = "scenic_areas"
	// BackgroundScenicAreaColumn is the table column denoting the background_scenic_area relation/edge.
	BackgroundScenicAreaColumn = "scenic_area_id"
)

// Columns holds all SQL columns for profitreceiver fields.
var Columns = []string{
	FieldID,
	FieldScenicAreaID,
	FieldMchID,
	FieldPhone,
	FieldReceiverType,
	FieldReceiverAccount,
	FieldReceiverName,
	FieldSharingRatio,
	FieldState,
	FieldCreateTime,
	FieldUpdateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultMchID holds the default value on creation for the "mch_id" field.
	DefaultMchID string
	// DefaultSharingRatio holds the default value on creation for the "sharing_ratio" field.
	DefaultSharingRatio float64
	// DefaultState holds the default value on creation for the "state" field.
	DefaultState int
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)

// OrderOption defines the ordering options for the ProfitReceiver queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByScenicAreaID orders the results by the scenic_area_id field.
func ByScenicAreaID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScenicAreaID, opts...).ToFunc()
}

// ByMchID orders the results by the mch_id field.
func ByMchID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMchID, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByReceiverType orders the results by the receiver_type field.
func ByReceiverType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReceiverType, opts...).ToFunc()
}

// ByReceiverAccount orders the results by the receiver_account field.
func ByReceiverAccount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReceiverAccount, opts...).ToFunc()
}

// ByReceiverName orders the results by the receiver_name field.
func ByReceiverName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReceiverName, opts...).ToFunc()
}

// BySharingRatio orders the results by the sharing_ratio field.
func BySharingRatio(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSharingRatio, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByBackgroundScenicAreaField orders the results by background_scenic_area field.
func ByBackgroundScenicAreaField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBackgroundScenicAreaStep(), sql.OrderByField(field, opts...))
	}
}
func newBackgroundScenicAreaStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BackgroundScenicAreaInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BackgroundScenicAreaTable, BackgroundScenicAreaColumn),
	)
}
