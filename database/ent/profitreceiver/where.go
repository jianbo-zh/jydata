// Code generated by ent, DO NOT EDIT.

package profitreceiver

import (
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldLTE(FieldID, id))
}

// ScenicAreaID applies equality check predicate on the "scenic_area_id" field. It's identical to ScenicAreaIDEQ.
func ScenicAreaID(v int) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldEQ(FieldScenicAreaID, v))
}

// MchID applies equality check predicate on the "mch_id" field. It's identical to MchIDEQ.
func MchID(v string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldEQ(FieldMchID, v))
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldEQ(FieldPhone, v))
}

// ReceiverType applies equality check predicate on the "receiver_type" field. It's identical to ReceiverTypeEQ.
func ReceiverType(v int) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldEQ(FieldReceiverType, v))
}

// ReceiverAccount applies equality check predicate on the "receiver_account" field. It's identical to ReceiverAccountEQ.
func ReceiverAccount(v string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldEQ(FieldReceiverAccount, v))
}

// ReceiverName applies equality check predicate on the "receiver_name" field. It's identical to ReceiverNameEQ.
func ReceiverName(v string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldEQ(FieldReceiverName, v))
}

// SharingRatio applies equality check predicate on the "sharing_ratio" field. It's identical to SharingRatioEQ.
func SharingRatio(v float64) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldEQ(FieldSharingRatio, v))
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v int) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldEQ(FieldState, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldEQ(FieldUpdateTime, v))
}

// ScenicAreaIDEQ applies the EQ predicate on the "scenic_area_id" field.
func ScenicAreaIDEQ(v int) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldEQ(FieldScenicAreaID, v))
}

// ScenicAreaIDNEQ applies the NEQ predicate on the "scenic_area_id" field.
func ScenicAreaIDNEQ(v int) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldNEQ(FieldScenicAreaID, v))
}

// ScenicAreaIDIn applies the In predicate on the "scenic_area_id" field.
func ScenicAreaIDIn(vs ...int) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldIn(FieldScenicAreaID, vs...))
}

// ScenicAreaIDNotIn applies the NotIn predicate on the "scenic_area_id" field.
func ScenicAreaIDNotIn(vs ...int) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldNotIn(FieldScenicAreaID, vs...))
}

// MchIDEQ applies the EQ predicate on the "mch_id" field.
func MchIDEQ(v string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldEQ(FieldMchID, v))
}

// MchIDNEQ applies the NEQ predicate on the "mch_id" field.
func MchIDNEQ(v string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldNEQ(FieldMchID, v))
}

// MchIDIn applies the In predicate on the "mch_id" field.
func MchIDIn(vs ...string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldIn(FieldMchID, vs...))
}

// MchIDNotIn applies the NotIn predicate on the "mch_id" field.
func MchIDNotIn(vs ...string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldNotIn(FieldMchID, vs...))
}

// MchIDGT applies the GT predicate on the "mch_id" field.
func MchIDGT(v string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldGT(FieldMchID, v))
}

// MchIDGTE applies the GTE predicate on the "mch_id" field.
func MchIDGTE(v string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldGTE(FieldMchID, v))
}

// MchIDLT applies the LT predicate on the "mch_id" field.
func MchIDLT(v string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldLT(FieldMchID, v))
}

// MchIDLTE applies the LTE predicate on the "mch_id" field.
func MchIDLTE(v string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldLTE(FieldMchID, v))
}

// MchIDContains applies the Contains predicate on the "mch_id" field.
func MchIDContains(v string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldContains(FieldMchID, v))
}

// MchIDHasPrefix applies the HasPrefix predicate on the "mch_id" field.
func MchIDHasPrefix(v string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldHasPrefix(FieldMchID, v))
}

// MchIDHasSuffix applies the HasSuffix predicate on the "mch_id" field.
func MchIDHasSuffix(v string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldHasSuffix(FieldMchID, v))
}

// MchIDEqualFold applies the EqualFold predicate on the "mch_id" field.
func MchIDEqualFold(v string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldEqualFold(FieldMchID, v))
}

// MchIDContainsFold applies the ContainsFold predicate on the "mch_id" field.
func MchIDContainsFold(v string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldContainsFold(FieldMchID, v))
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldEQ(FieldPhone, v))
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldNEQ(FieldPhone, v))
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldIn(FieldPhone, vs...))
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldNotIn(FieldPhone, vs...))
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldGT(FieldPhone, v))
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldGTE(FieldPhone, v))
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldLT(FieldPhone, v))
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldLTE(FieldPhone, v))
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldContains(FieldPhone, v))
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldHasPrefix(FieldPhone, v))
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldHasSuffix(FieldPhone, v))
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldEqualFold(FieldPhone, v))
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldContainsFold(FieldPhone, v))
}

// ReceiverTypeEQ applies the EQ predicate on the "receiver_type" field.
func ReceiverTypeEQ(v int) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldEQ(FieldReceiverType, v))
}

// ReceiverTypeNEQ applies the NEQ predicate on the "receiver_type" field.
func ReceiverTypeNEQ(v int) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldNEQ(FieldReceiverType, v))
}

// ReceiverTypeIn applies the In predicate on the "receiver_type" field.
func ReceiverTypeIn(vs ...int) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldIn(FieldReceiverType, vs...))
}

// ReceiverTypeNotIn applies the NotIn predicate on the "receiver_type" field.
func ReceiverTypeNotIn(vs ...int) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldNotIn(FieldReceiverType, vs...))
}

// ReceiverTypeGT applies the GT predicate on the "receiver_type" field.
func ReceiverTypeGT(v int) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldGT(FieldReceiverType, v))
}

// ReceiverTypeGTE applies the GTE predicate on the "receiver_type" field.
func ReceiverTypeGTE(v int) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldGTE(FieldReceiverType, v))
}

// ReceiverTypeLT applies the LT predicate on the "receiver_type" field.
func ReceiverTypeLT(v int) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldLT(FieldReceiverType, v))
}

// ReceiverTypeLTE applies the LTE predicate on the "receiver_type" field.
func ReceiverTypeLTE(v int) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldLTE(FieldReceiverType, v))
}

// ReceiverAccountEQ applies the EQ predicate on the "receiver_account" field.
func ReceiverAccountEQ(v string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldEQ(FieldReceiverAccount, v))
}

// ReceiverAccountNEQ applies the NEQ predicate on the "receiver_account" field.
func ReceiverAccountNEQ(v string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldNEQ(FieldReceiverAccount, v))
}

// ReceiverAccountIn applies the In predicate on the "receiver_account" field.
func ReceiverAccountIn(vs ...string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldIn(FieldReceiverAccount, vs...))
}

// ReceiverAccountNotIn applies the NotIn predicate on the "receiver_account" field.
func ReceiverAccountNotIn(vs ...string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldNotIn(FieldReceiverAccount, vs...))
}

// ReceiverAccountGT applies the GT predicate on the "receiver_account" field.
func ReceiverAccountGT(v string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldGT(FieldReceiverAccount, v))
}

// ReceiverAccountGTE applies the GTE predicate on the "receiver_account" field.
func ReceiverAccountGTE(v string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldGTE(FieldReceiverAccount, v))
}

// ReceiverAccountLT applies the LT predicate on the "receiver_account" field.
func ReceiverAccountLT(v string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldLT(FieldReceiverAccount, v))
}

// ReceiverAccountLTE applies the LTE predicate on the "receiver_account" field.
func ReceiverAccountLTE(v string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldLTE(FieldReceiverAccount, v))
}

// ReceiverAccountContains applies the Contains predicate on the "receiver_account" field.
func ReceiverAccountContains(v string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldContains(FieldReceiverAccount, v))
}

// ReceiverAccountHasPrefix applies the HasPrefix predicate on the "receiver_account" field.
func ReceiverAccountHasPrefix(v string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldHasPrefix(FieldReceiverAccount, v))
}

// ReceiverAccountHasSuffix applies the HasSuffix predicate on the "receiver_account" field.
func ReceiverAccountHasSuffix(v string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldHasSuffix(FieldReceiverAccount, v))
}

// ReceiverAccountEqualFold applies the EqualFold predicate on the "receiver_account" field.
func ReceiverAccountEqualFold(v string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldEqualFold(FieldReceiverAccount, v))
}

// ReceiverAccountContainsFold applies the ContainsFold predicate on the "receiver_account" field.
func ReceiverAccountContainsFold(v string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldContainsFold(FieldReceiverAccount, v))
}

// ReceiverNameEQ applies the EQ predicate on the "receiver_name" field.
func ReceiverNameEQ(v string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldEQ(FieldReceiverName, v))
}

// ReceiverNameNEQ applies the NEQ predicate on the "receiver_name" field.
func ReceiverNameNEQ(v string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldNEQ(FieldReceiverName, v))
}

// ReceiverNameIn applies the In predicate on the "receiver_name" field.
func ReceiverNameIn(vs ...string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldIn(FieldReceiverName, vs...))
}

// ReceiverNameNotIn applies the NotIn predicate on the "receiver_name" field.
func ReceiverNameNotIn(vs ...string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldNotIn(FieldReceiverName, vs...))
}

// ReceiverNameGT applies the GT predicate on the "receiver_name" field.
func ReceiverNameGT(v string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldGT(FieldReceiverName, v))
}

// ReceiverNameGTE applies the GTE predicate on the "receiver_name" field.
func ReceiverNameGTE(v string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldGTE(FieldReceiverName, v))
}

// ReceiverNameLT applies the LT predicate on the "receiver_name" field.
func ReceiverNameLT(v string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldLT(FieldReceiverName, v))
}

// ReceiverNameLTE applies the LTE predicate on the "receiver_name" field.
func ReceiverNameLTE(v string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldLTE(FieldReceiverName, v))
}

// ReceiverNameContains applies the Contains predicate on the "receiver_name" field.
func ReceiverNameContains(v string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldContains(FieldReceiverName, v))
}

// ReceiverNameHasPrefix applies the HasPrefix predicate on the "receiver_name" field.
func ReceiverNameHasPrefix(v string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldHasPrefix(FieldReceiverName, v))
}

// ReceiverNameHasSuffix applies the HasSuffix predicate on the "receiver_name" field.
func ReceiverNameHasSuffix(v string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldHasSuffix(FieldReceiverName, v))
}

// ReceiverNameEqualFold applies the EqualFold predicate on the "receiver_name" field.
func ReceiverNameEqualFold(v string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldEqualFold(FieldReceiverName, v))
}

// ReceiverNameContainsFold applies the ContainsFold predicate on the "receiver_name" field.
func ReceiverNameContainsFold(v string) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldContainsFold(FieldReceiverName, v))
}

// SharingRatioEQ applies the EQ predicate on the "sharing_ratio" field.
func SharingRatioEQ(v float64) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldEQ(FieldSharingRatio, v))
}

// SharingRatioNEQ applies the NEQ predicate on the "sharing_ratio" field.
func SharingRatioNEQ(v float64) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldNEQ(FieldSharingRatio, v))
}

// SharingRatioIn applies the In predicate on the "sharing_ratio" field.
func SharingRatioIn(vs ...float64) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldIn(FieldSharingRatio, vs...))
}

// SharingRatioNotIn applies the NotIn predicate on the "sharing_ratio" field.
func SharingRatioNotIn(vs ...float64) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldNotIn(FieldSharingRatio, vs...))
}

// SharingRatioGT applies the GT predicate on the "sharing_ratio" field.
func SharingRatioGT(v float64) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldGT(FieldSharingRatio, v))
}

// SharingRatioGTE applies the GTE predicate on the "sharing_ratio" field.
func SharingRatioGTE(v float64) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldGTE(FieldSharingRatio, v))
}

// SharingRatioLT applies the LT predicate on the "sharing_ratio" field.
func SharingRatioLT(v float64) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldLT(FieldSharingRatio, v))
}

// SharingRatioLTE applies the LTE predicate on the "sharing_ratio" field.
func SharingRatioLTE(v float64) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldLTE(FieldSharingRatio, v))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v int) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v int) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...int) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...int) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v int) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v int) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v int) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v int) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldLTE(FieldState, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.FieldLTE(FieldUpdateTime, v))
}

// HasBackgroundScenicArea applies the HasEdge predicate on the "background_scenic_area" edge.
func HasBackgroundScenicArea() predicate.ProfitReceiver {
	return predicate.ProfitReceiver(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BackgroundScenicAreaTable, BackgroundScenicAreaColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBackgroundScenicAreaWith applies the HasEdge predicate on the "background_scenic_area" edge with a given conditions (other predicates).
func HasBackgroundScenicAreaWith(preds ...predicate.ScenicArea) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(func(s *sql.Selector) {
		step := newBackgroundScenicAreaStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProfitReceiver) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProfitReceiver) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProfitReceiver) predicate.ProfitReceiver {
	return predicate.ProfitReceiver(sql.NotPredicates(p))
}
