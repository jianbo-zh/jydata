// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"github.com/jianbo-zh/jydata/database/ent/scenicareamap"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScenicAreaMapDelete is the builder for deleting a ScenicAreaMap entity.
type ScenicAreaMapDelete struct {
	config
	hooks    []Hook
	mutation *ScenicAreaMapMutation
}

// Where appends a list predicates to the ScenicAreaMapDelete builder.
func (samd *ScenicAreaMapDelete) Where(ps ...predicate.ScenicAreaMap) *ScenicAreaMapDelete {
	samd.mutation.Where(ps...)
	return samd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (samd *ScenicAreaMapDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, samd.sqlExec, samd.mutation, samd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (samd *ScenicAreaMapDelete) ExecX(ctx context.Context) int {
	n, err := samd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (samd *ScenicAreaMapDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(scenicareamap.Table, sqlgraph.NewFieldSpec(scenicareamap.FieldID, field.TypeInt))
	if ps := samd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, samd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	samd.mutation.done = true
	return affected, err
}

// ScenicAreaMapDeleteOne is the builder for deleting a single ScenicAreaMap entity.
type ScenicAreaMapDeleteOne struct {
	samd *ScenicAreaMapDelete
}

// Where appends a list predicates to the ScenicAreaMapDelete builder.
func (samdo *ScenicAreaMapDeleteOne) Where(ps ...predicate.ScenicAreaMap) *ScenicAreaMapDeleteOne {
	samdo.samd.mutation.Where(ps...)
	return samdo
}

// Exec executes the deletion query.
func (samdo *ScenicAreaMapDeleteOne) Exec(ctx context.Context) error {
	n, err := samdo.samd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{scenicareamap.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (samdo *ScenicAreaMapDeleteOne) ExecX(ctx context.Context) {
	if err := samdo.Exec(ctx); err != nil {
		panic(err)
	}
}
