// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"github.com/jianbo-zh/jydata/database/ent/scenicarea"
	"github.com/jianbo-zh/jydata/database/ent/user"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (uu *UserUpdate) SetScenicAreaID(i int) *UserUpdate {
	uu.mutation.SetScenicAreaID(i)
	return uu
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableScenicAreaID(i *int) *UserUpdate {
	if i != nil {
		uu.SetScenicAreaID(*i)
	}
	return uu
}

// ClearScenicAreaID clears the value of the "scenic_area_id" field.
func (uu *UserUpdate) ClearScenicAreaID() *UserUpdate {
	uu.mutation.ClearScenicAreaID()
	return uu
}

// SetOrigin sets the "origin" field.
func (uu *UserUpdate) SetOrigin(i int) *UserUpdate {
	uu.mutation.ResetOrigin()
	uu.mutation.SetOrigin(i)
	return uu
}

// SetNillableOrigin sets the "origin" field if the given value is not nil.
func (uu *UserUpdate) SetNillableOrigin(i *int) *UserUpdate {
	if i != nil {
		uu.SetOrigin(*i)
	}
	return uu
}

// AddOrigin adds i to the "origin" field.
func (uu *UserUpdate) AddOrigin(i int) *UserUpdate {
	uu.mutation.AddOrigin(i)
	return uu
}

// SetUserCls sets the "user_cls" field.
func (uu *UserUpdate) SetUserCls(i int) *UserUpdate {
	uu.mutation.ResetUserCls()
	uu.mutation.SetUserCls(i)
	return uu
}

// SetNillableUserCls sets the "user_cls" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUserCls(i *int) *UserUpdate {
	if i != nil {
		uu.SetUserCls(*i)
	}
	return uu
}

// AddUserCls adds i to the "user_cls" field.
func (uu *UserUpdate) AddUserCls(i int) *UserUpdate {
	uu.mutation.AddUserCls(i)
	return uu
}

// SetOpenID sets the "open_id" field.
func (uu *UserUpdate) SetOpenID(s string) *UserUpdate {
	uu.mutation.SetOpenID(s)
	return uu
}

// SetNillableOpenID sets the "open_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableOpenID(s *string) *UserUpdate {
	if s != nil {
		uu.SetOpenID(*s)
	}
	return uu
}

// SetUsername sets the "username" field.
func (uu *UserUpdate) SetUsername(s string) *UserUpdate {
	uu.mutation.SetUsername(s)
	return uu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUsername(s *string) *UserUpdate {
	if s != nil {
		uu.SetUsername(*s)
	}
	return uu
}

// ClearUsername clears the value of the "username" field.
func (uu *UserUpdate) ClearUsername() *UserUpdate {
	uu.mutation.ClearUsername()
	return uu
}

// SetNickname sets the "nickname" field.
func (uu *UserUpdate) SetNickname(s string) *UserUpdate {
	uu.mutation.SetNickname(s)
	return uu
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (uu *UserUpdate) SetNillableNickname(s *string) *UserUpdate {
	if s != nil {
		uu.SetNickname(*s)
	}
	return uu
}

// SetPhone sets the "phone" field.
func (uu *UserUpdate) SetPhone(s string) *UserUpdate {
	uu.mutation.SetPhone(s)
	return uu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePhone(s *string) *UserUpdate {
	if s != nil {
		uu.SetPhone(*s)
	}
	return uu
}

// SetAvatarURL sets the "avatar_url" field.
func (uu *UserUpdate) SetAvatarURL(s string) *UserUpdate {
	uu.mutation.SetAvatarURL(s)
	return uu
}

// SetNillableAvatarURL sets the "avatar_url" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAvatarURL(s *string) *UserUpdate {
	if s != nil {
		uu.SetAvatarURL(*s)
	}
	return uu
}

// SetGender sets the "gender" field.
func (uu *UserUpdate) SetGender(u uint8) *UserUpdate {
	uu.mutation.ResetGender()
	uu.mutation.SetGender(u)
	return uu
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (uu *UserUpdate) SetNillableGender(u *uint8) *UserUpdate {
	if u != nil {
		uu.SetGender(*u)
	}
	return uu
}

// AddGender adds u to the "gender" field.
func (uu *UserUpdate) AddGender(u int8) *UserUpdate {
	uu.mutation.AddGender(u)
	return uu
}

// SetPassword sets the "password" field.
func (uu *UserUpdate) SetPassword(s string) *UserUpdate {
	uu.mutation.SetPassword(s)
	return uu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePassword(s *string) *UserUpdate {
	if s != nil {
		uu.SetPassword(*s)
	}
	return uu
}

// SetCountry sets the "country" field.
func (uu *UserUpdate) SetCountry(s string) *UserUpdate {
	uu.mutation.SetCountry(s)
	return uu
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCountry(s *string) *UserUpdate {
	if s != nil {
		uu.SetCountry(*s)
	}
	return uu
}

// SetProvince sets the "province" field.
func (uu *UserUpdate) SetProvince(s string) *UserUpdate {
	uu.mutation.SetProvince(s)
	return uu
}

// SetNillableProvince sets the "province" field if the given value is not nil.
func (uu *UserUpdate) SetNillableProvince(s *string) *UserUpdate {
	if s != nil {
		uu.SetProvince(*s)
	}
	return uu
}

// SetCity sets the "city" field.
func (uu *UserUpdate) SetCity(s string) *UserUpdate {
	uu.mutation.SetCity(s)
	return uu
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCity(s *string) *UserUpdate {
	if s != nil {
		uu.SetCity(*s)
	}
	return uu
}

// SetStatus sets the "status" field.
func (uu *UserUpdate) SetStatus(i int) *UserUpdate {
	uu.mutation.ResetStatus()
	uu.mutation.SetStatus(i)
	return uu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uu *UserUpdate) SetNillableStatus(i *int) *UserUpdate {
	if i != nil {
		uu.SetStatus(*i)
	}
	return uu
}

// AddStatus adds i to the "status" field.
func (uu *UserUpdate) AddStatus(i int) *UserUpdate {
	uu.mutation.AddStatus(i)
	return uu
}

// SetIsDeleted sets the "is_deleted" field.
func (uu *UserUpdate) SetIsDeleted(u uint8) *UserUpdate {
	uu.mutation.ResetIsDeleted()
	uu.mutation.SetIsDeleted(u)
	return uu
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIsDeleted(u *uint8) *UserUpdate {
	if u != nil {
		uu.SetIsDeleted(*u)
	}
	return uu
}

// AddIsDeleted adds u to the "is_deleted" field.
func (uu *UserUpdate) AddIsDeleted(u int8) *UserUpdate {
	uu.mutation.AddIsDeleted(u)
	return uu
}

// SetLoginTime sets the "login_time" field.
func (uu *UserUpdate) SetLoginTime(t time.Time) *UserUpdate {
	uu.mutation.SetLoginTime(t)
	return uu
}

// SetNillableLoginTime sets the "login_time" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLoginTime(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetLoginTime(*t)
	}
	return uu
}

// ClearLoginTime clears the value of the "login_time" field.
func (uu *UserUpdate) ClearLoginTime() *UserUpdate {
	uu.mutation.ClearLoginTime()
	return uu
}

// SetLanguage sets the "language" field.
func (uu *UserUpdate) SetLanguage(s string) *UserUpdate {
	uu.mutation.SetLanguage(s)
	return uu
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLanguage(s *string) *UserUpdate {
	if s != nil {
		uu.SetLanguage(*s)
	}
	return uu
}

// SetIsTester sets the "is_tester" field.
func (uu *UserUpdate) SetIsTester(b bool) *UserUpdate {
	uu.mutation.SetIsTester(b)
	return uu
}

// SetNillableIsTester sets the "is_tester" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIsTester(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIsTester(*b)
	}
	return uu
}

// SetUpdateTime sets the "update_time" field.
func (uu *UserUpdate) SetUpdateTime(t time.Time) *UserUpdate {
	uu.mutation.SetUpdateTime(t)
	return uu
}

// SetBackgroundScenicAreaID sets the "background_scenic_area" edge to the ScenicArea entity by ID.
func (uu *UserUpdate) SetBackgroundScenicAreaID(id int) *UserUpdate {
	uu.mutation.SetBackgroundScenicAreaID(id)
	return uu
}

// SetNillableBackgroundScenicAreaID sets the "background_scenic_area" edge to the ScenicArea entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableBackgroundScenicAreaID(id *int) *UserUpdate {
	if id != nil {
		uu = uu.SetBackgroundScenicAreaID(*id)
	}
	return uu
}

// SetBackgroundScenicArea sets the "background_scenic_area" edge to the ScenicArea entity.
func (uu *UserUpdate) SetBackgroundScenicArea(s *ScenicArea) *UserUpdate {
	return uu.SetBackgroundScenicAreaID(s.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearBackgroundScenicArea clears the "background_scenic_area" edge to the ScenicArea entity.
func (uu *UserUpdate) ClearBackgroundScenicArea() *UserUpdate {
	uu.mutation.ClearBackgroundScenicArea()
	return uu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	uu.defaults()
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() {
	if _, ok := uu.mutation.UpdateTime(); !ok {
		v := user.UpdateDefaultUpdateTime()
		uu.mutation.SetUpdateTime(v)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Origin(); ok {
		_spec.SetField(user.FieldOrigin, field.TypeInt, value)
	}
	if value, ok := uu.mutation.AddedOrigin(); ok {
		_spec.AddField(user.FieldOrigin, field.TypeInt, value)
	}
	if value, ok := uu.mutation.UserCls(); ok {
		_spec.SetField(user.FieldUserCls, field.TypeInt, value)
	}
	if value, ok := uu.mutation.AddedUserCls(); ok {
		_spec.AddField(user.FieldUserCls, field.TypeInt, value)
	}
	if value, ok := uu.mutation.OpenID(); ok {
		_spec.SetField(user.FieldOpenID, field.TypeString, value)
	}
	if value, ok := uu.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if uu.mutation.UsernameCleared() {
		_spec.ClearField(user.FieldUsername, field.TypeString)
	}
	if value, ok := uu.mutation.Nickname(); ok {
		_spec.SetField(user.FieldNickname, field.TypeString, value)
	}
	if value, ok := uu.mutation.Phone(); ok {
		_spec.SetField(user.FieldPhone, field.TypeString, value)
	}
	if value, ok := uu.mutation.AvatarURL(); ok {
		_spec.SetField(user.FieldAvatarURL, field.TypeString, value)
	}
	if value, ok := uu.mutation.Gender(); ok {
		_spec.SetField(user.FieldGender, field.TypeUint8, value)
	}
	if value, ok := uu.mutation.AddedGender(); ok {
		_spec.AddField(user.FieldGender, field.TypeUint8, value)
	}
	if value, ok := uu.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if value, ok := uu.mutation.Country(); ok {
		_spec.SetField(user.FieldCountry, field.TypeString, value)
	}
	if value, ok := uu.mutation.Province(); ok {
		_spec.SetField(user.FieldProvince, field.TypeString, value)
	}
	if value, ok := uu.mutation.City(); ok {
		_spec.SetField(user.FieldCity, field.TypeString, value)
	}
	if value, ok := uu.mutation.Status(); ok {
		_spec.SetField(user.FieldStatus, field.TypeInt, value)
	}
	if value, ok := uu.mutation.AddedStatus(); ok {
		_spec.AddField(user.FieldStatus, field.TypeInt, value)
	}
	if value, ok := uu.mutation.IsDeleted(); ok {
		_spec.SetField(user.FieldIsDeleted, field.TypeUint8, value)
	}
	if value, ok := uu.mutation.AddedIsDeleted(); ok {
		_spec.AddField(user.FieldIsDeleted, field.TypeUint8, value)
	}
	if value, ok := uu.mutation.LoginTime(); ok {
		_spec.SetField(user.FieldLoginTime, field.TypeTime, value)
	}
	if uu.mutation.LoginTimeCleared() {
		_spec.ClearField(user.FieldLoginTime, field.TypeTime)
	}
	if value, ok := uu.mutation.Language(); ok {
		_spec.SetField(user.FieldLanguage, field.TypeString, value)
	}
	if value, ok := uu.mutation.IsTester(); ok {
		_spec.SetField(user.FieldIsTester, field.TypeBool, value)
	}
	if value, ok := uu.mutation.UpdateTime(); ok {
		_spec.SetField(user.FieldUpdateTime, field.TypeTime, value)
	}
	if uu.mutation.BackgroundScenicAreaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.BackgroundScenicAreaTable,
			Columns: []string{user.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.BackgroundScenicAreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.BackgroundScenicAreaTable,
			Columns: []string{user.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (uuo *UserUpdateOne) SetScenicAreaID(i int) *UserUpdateOne {
	uuo.mutation.SetScenicAreaID(i)
	return uuo
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableScenicAreaID(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetScenicAreaID(*i)
	}
	return uuo
}

// ClearScenicAreaID clears the value of the "scenic_area_id" field.
func (uuo *UserUpdateOne) ClearScenicAreaID() *UserUpdateOne {
	uuo.mutation.ClearScenicAreaID()
	return uuo
}

// SetOrigin sets the "origin" field.
func (uuo *UserUpdateOne) SetOrigin(i int) *UserUpdateOne {
	uuo.mutation.ResetOrigin()
	uuo.mutation.SetOrigin(i)
	return uuo
}

// SetNillableOrigin sets the "origin" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableOrigin(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetOrigin(*i)
	}
	return uuo
}

// AddOrigin adds i to the "origin" field.
func (uuo *UserUpdateOne) AddOrigin(i int) *UserUpdateOne {
	uuo.mutation.AddOrigin(i)
	return uuo
}

// SetUserCls sets the "user_cls" field.
func (uuo *UserUpdateOne) SetUserCls(i int) *UserUpdateOne {
	uuo.mutation.ResetUserCls()
	uuo.mutation.SetUserCls(i)
	return uuo
}

// SetNillableUserCls sets the "user_cls" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUserCls(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetUserCls(*i)
	}
	return uuo
}

// AddUserCls adds i to the "user_cls" field.
func (uuo *UserUpdateOne) AddUserCls(i int) *UserUpdateOne {
	uuo.mutation.AddUserCls(i)
	return uuo
}

// SetOpenID sets the "open_id" field.
func (uuo *UserUpdateOne) SetOpenID(s string) *UserUpdateOne {
	uuo.mutation.SetOpenID(s)
	return uuo
}

// SetNillableOpenID sets the "open_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableOpenID(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetOpenID(*s)
	}
	return uuo
}

// SetUsername sets the "username" field.
func (uuo *UserUpdateOne) SetUsername(s string) *UserUpdateOne {
	uuo.mutation.SetUsername(s)
	return uuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUsername(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetUsername(*s)
	}
	return uuo
}

// ClearUsername clears the value of the "username" field.
func (uuo *UserUpdateOne) ClearUsername() *UserUpdateOne {
	uuo.mutation.ClearUsername()
	return uuo
}

// SetNickname sets the "nickname" field.
func (uuo *UserUpdateOne) SetNickname(s string) *UserUpdateOne {
	uuo.mutation.SetNickname(s)
	return uuo
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableNickname(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetNickname(*s)
	}
	return uuo
}

// SetPhone sets the "phone" field.
func (uuo *UserUpdateOne) SetPhone(s string) *UserUpdateOne {
	uuo.mutation.SetPhone(s)
	return uuo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePhone(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPhone(*s)
	}
	return uuo
}

// SetAvatarURL sets the "avatar_url" field.
func (uuo *UserUpdateOne) SetAvatarURL(s string) *UserUpdateOne {
	uuo.mutation.SetAvatarURL(s)
	return uuo
}

// SetNillableAvatarURL sets the "avatar_url" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAvatarURL(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetAvatarURL(*s)
	}
	return uuo
}

// SetGender sets the "gender" field.
func (uuo *UserUpdateOne) SetGender(u uint8) *UserUpdateOne {
	uuo.mutation.ResetGender()
	uuo.mutation.SetGender(u)
	return uuo
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableGender(u *uint8) *UserUpdateOne {
	if u != nil {
		uuo.SetGender(*u)
	}
	return uuo
}

// AddGender adds u to the "gender" field.
func (uuo *UserUpdateOne) AddGender(u int8) *UserUpdateOne {
	uuo.mutation.AddGender(u)
	return uuo
}

// SetPassword sets the "password" field.
func (uuo *UserUpdateOne) SetPassword(s string) *UserUpdateOne {
	uuo.mutation.SetPassword(s)
	return uuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePassword(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPassword(*s)
	}
	return uuo
}

// SetCountry sets the "country" field.
func (uuo *UserUpdateOne) SetCountry(s string) *UserUpdateOne {
	uuo.mutation.SetCountry(s)
	return uuo
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCountry(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetCountry(*s)
	}
	return uuo
}

// SetProvince sets the "province" field.
func (uuo *UserUpdateOne) SetProvince(s string) *UserUpdateOne {
	uuo.mutation.SetProvince(s)
	return uuo
}

// SetNillableProvince sets the "province" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableProvince(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetProvince(*s)
	}
	return uuo
}

// SetCity sets the "city" field.
func (uuo *UserUpdateOne) SetCity(s string) *UserUpdateOne {
	uuo.mutation.SetCity(s)
	return uuo
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCity(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetCity(*s)
	}
	return uuo
}

// SetStatus sets the "status" field.
func (uuo *UserUpdateOne) SetStatus(i int) *UserUpdateOne {
	uuo.mutation.ResetStatus()
	uuo.mutation.SetStatus(i)
	return uuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableStatus(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetStatus(*i)
	}
	return uuo
}

// AddStatus adds i to the "status" field.
func (uuo *UserUpdateOne) AddStatus(i int) *UserUpdateOne {
	uuo.mutation.AddStatus(i)
	return uuo
}

// SetIsDeleted sets the "is_deleted" field.
func (uuo *UserUpdateOne) SetIsDeleted(u uint8) *UserUpdateOne {
	uuo.mutation.ResetIsDeleted()
	uuo.mutation.SetIsDeleted(u)
	return uuo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIsDeleted(u *uint8) *UserUpdateOne {
	if u != nil {
		uuo.SetIsDeleted(*u)
	}
	return uuo
}

// AddIsDeleted adds u to the "is_deleted" field.
func (uuo *UserUpdateOne) AddIsDeleted(u int8) *UserUpdateOne {
	uuo.mutation.AddIsDeleted(u)
	return uuo
}

// SetLoginTime sets the "login_time" field.
func (uuo *UserUpdateOne) SetLoginTime(t time.Time) *UserUpdateOne {
	uuo.mutation.SetLoginTime(t)
	return uuo
}

// SetNillableLoginTime sets the "login_time" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLoginTime(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetLoginTime(*t)
	}
	return uuo
}

// ClearLoginTime clears the value of the "login_time" field.
func (uuo *UserUpdateOne) ClearLoginTime() *UserUpdateOne {
	uuo.mutation.ClearLoginTime()
	return uuo
}

// SetLanguage sets the "language" field.
func (uuo *UserUpdateOne) SetLanguage(s string) *UserUpdateOne {
	uuo.mutation.SetLanguage(s)
	return uuo
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLanguage(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetLanguage(*s)
	}
	return uuo
}

// SetIsTester sets the "is_tester" field.
func (uuo *UserUpdateOne) SetIsTester(b bool) *UserUpdateOne {
	uuo.mutation.SetIsTester(b)
	return uuo
}

// SetNillableIsTester sets the "is_tester" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIsTester(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIsTester(*b)
	}
	return uuo
}

// SetUpdateTime sets the "update_time" field.
func (uuo *UserUpdateOne) SetUpdateTime(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdateTime(t)
	return uuo
}

// SetBackgroundScenicAreaID sets the "background_scenic_area" edge to the ScenicArea entity by ID.
func (uuo *UserUpdateOne) SetBackgroundScenicAreaID(id int) *UserUpdateOne {
	uuo.mutation.SetBackgroundScenicAreaID(id)
	return uuo
}

// SetNillableBackgroundScenicAreaID sets the "background_scenic_area" edge to the ScenicArea entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBackgroundScenicAreaID(id *int) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetBackgroundScenicAreaID(*id)
	}
	return uuo
}

// SetBackgroundScenicArea sets the "background_scenic_area" edge to the ScenicArea entity.
func (uuo *UserUpdateOne) SetBackgroundScenicArea(s *ScenicArea) *UserUpdateOne {
	return uuo.SetBackgroundScenicAreaID(s.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearBackgroundScenicArea clears the "background_scenic_area" edge to the ScenicArea entity.
func (uuo *UserUpdateOne) ClearBackgroundScenicArea() *UserUpdateOne {
	uuo.mutation.ClearBackgroundScenicArea()
	return uuo
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	uuo.defaults()
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() {
	if _, ok := uuo.mutation.UpdateTime(); !ok {
		v := user.UpdateDefaultUpdateTime()
		uuo.mutation.SetUpdateTime(v)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Origin(); ok {
		_spec.SetField(user.FieldOrigin, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.AddedOrigin(); ok {
		_spec.AddField(user.FieldOrigin, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.UserCls(); ok {
		_spec.SetField(user.FieldUserCls, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.AddedUserCls(); ok {
		_spec.AddField(user.FieldUserCls, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.OpenID(); ok {
		_spec.SetField(user.FieldOpenID, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if uuo.mutation.UsernameCleared() {
		_spec.ClearField(user.FieldUsername, field.TypeString)
	}
	if value, ok := uuo.mutation.Nickname(); ok {
		_spec.SetField(user.FieldNickname, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Phone(); ok {
		_spec.SetField(user.FieldPhone, field.TypeString, value)
	}
	if value, ok := uuo.mutation.AvatarURL(); ok {
		_spec.SetField(user.FieldAvatarURL, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Gender(); ok {
		_spec.SetField(user.FieldGender, field.TypeUint8, value)
	}
	if value, ok := uuo.mutation.AddedGender(); ok {
		_spec.AddField(user.FieldGender, field.TypeUint8, value)
	}
	if value, ok := uuo.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Country(); ok {
		_spec.SetField(user.FieldCountry, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Province(); ok {
		_spec.SetField(user.FieldProvince, field.TypeString, value)
	}
	if value, ok := uuo.mutation.City(); ok {
		_spec.SetField(user.FieldCity, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Status(); ok {
		_spec.SetField(user.FieldStatus, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.AddedStatus(); ok {
		_spec.AddField(user.FieldStatus, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.IsDeleted(); ok {
		_spec.SetField(user.FieldIsDeleted, field.TypeUint8, value)
	}
	if value, ok := uuo.mutation.AddedIsDeleted(); ok {
		_spec.AddField(user.FieldIsDeleted, field.TypeUint8, value)
	}
	if value, ok := uuo.mutation.LoginTime(); ok {
		_spec.SetField(user.FieldLoginTime, field.TypeTime, value)
	}
	if uuo.mutation.LoginTimeCleared() {
		_spec.ClearField(user.FieldLoginTime, field.TypeTime)
	}
	if value, ok := uuo.mutation.Language(); ok {
		_spec.SetField(user.FieldLanguage, field.TypeString, value)
	}
	if value, ok := uuo.mutation.IsTester(); ok {
		_spec.SetField(user.FieldIsTester, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.UpdateTime(); ok {
		_spec.SetField(user.FieldUpdateTime, field.TypeTime, value)
	}
	if uuo.mutation.BackgroundScenicAreaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.BackgroundScenicAreaTable,
			Columns: []string{user.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.BackgroundScenicAreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.BackgroundScenicAreaTable,
			Columns: []string{user.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
