// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/access"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
)

// AccessUpdate is the builder for updating Access entities.
type AccessUpdate struct {
	config
	hooks    []Hook
	mutation *AccessMutation
}

// Where appends a list predicates to the AccessUpdate builder.
func (au *AccessUpdate) Where(ps ...predicate.Access) *AccessUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetPid sets the "pid" field.
func (au *AccessUpdate) SetPid(i int) *AccessUpdate {
	au.mutation.ResetPid()
	au.mutation.SetPid(i)
	return au
}

// SetNillablePid sets the "pid" field if the given value is not nil.
func (au *AccessUpdate) SetNillablePid(i *int) *AccessUpdate {
	if i != nil {
		au.SetPid(*i)
	}
	return au
}

// AddPid adds i to the "pid" field.
func (au *AccessUpdate) AddPid(i int) *AccessUpdate {
	au.mutation.AddPid(i)
	return au
}

// SetCode sets the "code" field.
func (au *AccessUpdate) SetCode(s string) *AccessUpdate {
	au.mutation.SetCode(s)
	return au
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (au *AccessUpdate) SetNillableCode(s *string) *AccessUpdate {
	if s != nil {
		au.SetCode(*s)
	}
	return au
}

// SetName sets the "name" field.
func (au *AccessUpdate) SetName(s string) *AccessUpdate {
	au.mutation.SetName(s)
	return au
}

// SetNillableName sets the "name" field if the given value is not nil.
func (au *AccessUpdate) SetNillableName(s *string) *AccessUpdate {
	if s != nil {
		au.SetName(*s)
	}
	return au
}

// SetURL sets the "url" field.
func (au *AccessUpdate) SetURL(s string) *AccessUpdate {
	au.mutation.SetURL(s)
	return au
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (au *AccessUpdate) SetNillableURL(s *string) *AccessUpdate {
	if s != nil {
		au.SetURL(*s)
	}
	return au
}

// SetSort sets the "sort" field.
func (au *AccessUpdate) SetSort(i int) *AccessUpdate {
	au.mutation.ResetSort()
	au.mutation.SetSort(i)
	return au
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (au *AccessUpdate) SetNillableSort(i *int) *AccessUpdate {
	if i != nil {
		au.SetSort(*i)
	}
	return au
}

// AddSort adds i to the "sort" field.
func (au *AccessUpdate) AddSort(i int) *AccessUpdate {
	au.mutation.AddSort(i)
	return au
}

// SetUpdateTime sets the "update_time" field.
func (au *AccessUpdate) SetUpdateTime(t time.Time) *AccessUpdate {
	au.mutation.SetUpdateTime(t)
	return au
}

// Mutation returns the AccessMutation object of the builder.
func (au *AccessUpdate) Mutation() *AccessMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AccessUpdate) Save(ctx context.Context) (int, error) {
	au.defaults()
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AccessUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AccessUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AccessUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AccessUpdate) defaults() {
	if _, ok := au.mutation.UpdateTime(); !ok {
		v := access.UpdateDefaultUpdateTime()
		au.mutation.SetUpdateTime(v)
	}
}

func (au *AccessUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(access.Table, access.Columns, sqlgraph.NewFieldSpec(access.FieldID, field.TypeInt))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Pid(); ok {
		_spec.SetField(access.FieldPid, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedPid(); ok {
		_spec.AddField(access.FieldPid, field.TypeInt, value)
	}
	if value, ok := au.mutation.Code(); ok {
		_spec.SetField(access.FieldCode, field.TypeString, value)
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.SetField(access.FieldName, field.TypeString, value)
	}
	if value, ok := au.mutation.URL(); ok {
		_spec.SetField(access.FieldURL, field.TypeString, value)
	}
	if value, ok := au.mutation.Sort(); ok {
		_spec.SetField(access.FieldSort, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedSort(); ok {
		_spec.AddField(access.FieldSort, field.TypeInt, value)
	}
	if value, ok := au.mutation.UpdateTime(); ok {
		_spec.SetField(access.FieldUpdateTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{access.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AccessUpdateOne is the builder for updating a single Access entity.
type AccessUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AccessMutation
}

// SetPid sets the "pid" field.
func (auo *AccessUpdateOne) SetPid(i int) *AccessUpdateOne {
	auo.mutation.ResetPid()
	auo.mutation.SetPid(i)
	return auo
}

// SetNillablePid sets the "pid" field if the given value is not nil.
func (auo *AccessUpdateOne) SetNillablePid(i *int) *AccessUpdateOne {
	if i != nil {
		auo.SetPid(*i)
	}
	return auo
}

// AddPid adds i to the "pid" field.
func (auo *AccessUpdateOne) AddPid(i int) *AccessUpdateOne {
	auo.mutation.AddPid(i)
	return auo
}

// SetCode sets the "code" field.
func (auo *AccessUpdateOne) SetCode(s string) *AccessUpdateOne {
	auo.mutation.SetCode(s)
	return auo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (auo *AccessUpdateOne) SetNillableCode(s *string) *AccessUpdateOne {
	if s != nil {
		auo.SetCode(*s)
	}
	return auo
}

// SetName sets the "name" field.
func (auo *AccessUpdateOne) SetName(s string) *AccessUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (auo *AccessUpdateOne) SetNillableName(s *string) *AccessUpdateOne {
	if s != nil {
		auo.SetName(*s)
	}
	return auo
}

// SetURL sets the "url" field.
func (auo *AccessUpdateOne) SetURL(s string) *AccessUpdateOne {
	auo.mutation.SetURL(s)
	return auo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (auo *AccessUpdateOne) SetNillableURL(s *string) *AccessUpdateOne {
	if s != nil {
		auo.SetURL(*s)
	}
	return auo
}

// SetSort sets the "sort" field.
func (auo *AccessUpdateOne) SetSort(i int) *AccessUpdateOne {
	auo.mutation.ResetSort()
	auo.mutation.SetSort(i)
	return auo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (auo *AccessUpdateOne) SetNillableSort(i *int) *AccessUpdateOne {
	if i != nil {
		auo.SetSort(*i)
	}
	return auo
}

// AddSort adds i to the "sort" field.
func (auo *AccessUpdateOne) AddSort(i int) *AccessUpdateOne {
	auo.mutation.AddSort(i)
	return auo
}

// SetUpdateTime sets the "update_time" field.
func (auo *AccessUpdateOne) SetUpdateTime(t time.Time) *AccessUpdateOne {
	auo.mutation.SetUpdateTime(t)
	return auo
}

// Mutation returns the AccessMutation object of the builder.
func (auo *AccessUpdateOne) Mutation() *AccessMutation {
	return auo.mutation
}

// Where appends a list predicates to the AccessUpdate builder.
func (auo *AccessUpdateOne) Where(ps ...predicate.Access) *AccessUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AccessUpdateOne) Select(field string, fields ...string) *AccessUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Access entity.
func (auo *AccessUpdateOne) Save(ctx context.Context) (*Access, error) {
	auo.defaults()
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AccessUpdateOne) SaveX(ctx context.Context) *Access {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AccessUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AccessUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AccessUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdateTime(); !ok {
		v := access.UpdateDefaultUpdateTime()
		auo.mutation.SetUpdateTime(v)
	}
}

func (auo *AccessUpdateOne) sqlSave(ctx context.Context) (_node *Access, err error) {
	_spec := sqlgraph.NewUpdateSpec(access.Table, access.Columns, sqlgraph.NewFieldSpec(access.FieldID, field.TypeInt))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Access.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, access.FieldID)
		for _, f := range fields {
			if !access.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != access.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Pid(); ok {
		_spec.SetField(access.FieldPid, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedPid(); ok {
		_spec.AddField(access.FieldPid, field.TypeInt, value)
	}
	if value, ok := auo.mutation.Code(); ok {
		_spec.SetField(access.FieldCode, field.TypeString, value)
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.SetField(access.FieldName, field.TypeString, value)
	}
	if value, ok := auo.mutation.URL(); ok {
		_spec.SetField(access.FieldURL, field.TypeString, value)
	}
	if value, ok := auo.mutation.Sort(); ok {
		_spec.SetField(access.FieldSort, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedSort(); ok {
		_spec.AddField(access.FieldSort, field.TypeInt, value)
	}
	if value, ok := auo.mutation.UpdateTime(); ok {
		_spec.SetField(access.FieldUpdateTime, field.TypeTime, value)
	}
	_node = &Access{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{access.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
