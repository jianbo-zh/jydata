// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jianbo-zh/jydata/database/ent/car"
	"github.com/jianbo-zh/jydata/database/ent/order"
	"github.com/jianbo-zh/jydata/database/ent/orderbilling"
	"github.com/jianbo-zh/jydata/database/ent/ordersharing"
	"github.com/jianbo-zh/jydata/database/ent/scenicarea"
)

// Order is the model entity for the Order schema.
type Order struct {
	config `json:"-"`
	// ID of the ent.
	// ID
	ID int `json:"id,omitempty"`
	// 订单类型(1-租车订单 2-班次订单 3-通票订单)
	Type int `json:"type,omitempty"`
	// 时间段(0-未知、1-工作日、2-周末、3-节假日)
	Period int `json:"period,omitempty"`
	// 订单号
	OrderNo string `json:"order_no,omitempty"`
	// 订单支付ID
	WxTxID string `json:"wx_tx_id,omitempty"`
	// 景区ID
	ScenicAreaID int `json:"scenic_area_id,omitempty"`
	// 商户号
	MchID string `json:"mch_id,omitempty"`
	// 景区名称
	ScenicAreaName string `json:"scenic_area_name,omitempty"`
	// 用户id
	UserID int `json:"user_id,omitempty"`
	// 用户微信OpenID
	OpenID string `json:"open_id,omitempty"`
	// 用户昵称
	Nickname string `json:"nickname,omitempty"`
	// 用户手机号
	Phone string `json:"phone,omitempty"`
	// 车辆ID
	CarID int `json:"car_id,omitempty"`
	// 设备ID
	DeviceID string `json:"device_id,omitempty"`
	// 汽车名称
	CarName string `json:"car_name,omitempty"`
	// 车辆号牌
	CarLicensePlate string `json:"car_license_plate,omitempty"`
	// 型号ID
	ModelID int `json:"model_id,omitempty"`
	// 型号名称
	ModelName string `json:"model_name,omitempty"`
	// 优惠卷ID
	CouponID int `json:"coupon_id,omitempty"`
	// 优惠卷名称
	CouponName string `json:"coupon_name,omitempty"`
	// 行驶里程
	UseMileageMeter int `json:"use_mileage_meter,omitempty"`
	// 使用时长
	UseTimeSecond int `json:"use_time_second,omitempty"`
	// 押金金额
	DepositAmount int `json:"deposit_amount,omitempty"`
	// 订单金额
	OrderAmount int `json:"order_amount,omitempty"`
	// 已退款金额
	RefundedAmount int `json:"refunded_amount,omitempty"`
	// 优惠金额
	CouponAmount int `json:"coupon_amount,omitempty"`
	// 订单状态(0-待支付、1-待使用、2-进行中、3-待支付、4-待退费、5-已完成、6-已取消)
	OrderState int `json:"order_state,omitempty"`
	// 押金状态(0-无支付、1-待付支付、2-已支付)
	DepositState int `json:"deposit_state,omitempty"`
	// 紧急状态(0-无紧急、1-紧急呼救、2-已取消紧急呼救)
	EmergencyState int `json:"emergency_state,omitempty"`
	// 是否测试订单
	IsTestOrder bool `json:"is_test_order,omitempty"`
	// 是否取消
	IsCancel bool `json:"is_cancel,omitempty"`
	// 是否分润
	IsProfitSharing bool `json:"is_profit_sharing,omitempty"`
	// 订单备注
	Remark string `json:"remark,omitempty"`
	// 用户评分
	UserScore int `json:"user_score,omitempty"`
	// 用户评价
	UserComment string `json:"user_comment,omitempty"`
	// 支付押金时间
	DepositTime time.Time `json:"deposit_time,omitempty"`
	// 完成时间
	FinishTime time.Time `json:"finish_time,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderQuery when eager-loading is set.
	Edges        OrderEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OrderEdges holds the relations/edges for other nodes in the graph.
type OrderEdges struct {
	// Car holds the value of the car edge.
	Car *Car `json:"car,omitempty"`
	// BackgroundScenicArea holds the value of the background_scenic_area edge.
	BackgroundScenicArea *ScenicArea `json:"background_scenic_area,omitempty"`
	// Billing holds the value of the billing edge.
	Billing *OrderBilling `json:"billing,omitempty"`
	// Refund holds the value of the refund edge.
	Refund []*OrderRefund `json:"refund,omitempty"`
	// Sharing holds the value of the sharing edge.
	Sharing *OrderSharing `json:"sharing,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// CarOrErr returns the Car value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderEdges) CarOrErr() (*Car, error) {
	if e.Car != nil {
		return e.Car, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: car.Label}
	}
	return nil, &NotLoadedError{edge: "car"}
}

// BackgroundScenicAreaOrErr returns the BackgroundScenicArea value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderEdges) BackgroundScenicAreaOrErr() (*ScenicArea, error) {
	if e.BackgroundScenicArea != nil {
		return e.BackgroundScenicArea, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: scenicarea.Label}
	}
	return nil, &NotLoadedError{edge: "background_scenic_area"}
}

// BillingOrErr returns the Billing value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderEdges) BillingOrErr() (*OrderBilling, error) {
	if e.Billing != nil {
		return e.Billing, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: orderbilling.Label}
	}
	return nil, &NotLoadedError{edge: "billing"}
}

// RefundOrErr returns the Refund value or an error if the edge
// was not loaded in eager-loading.
func (e OrderEdges) RefundOrErr() ([]*OrderRefund, error) {
	if e.loadedTypes[3] {
		return e.Refund, nil
	}
	return nil, &NotLoadedError{edge: "refund"}
}

// SharingOrErr returns the Sharing value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderEdges) SharingOrErr() (*OrderSharing, error) {
	if e.Sharing != nil {
		return e.Sharing, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: ordersharing.Label}
	}
	return nil, &NotLoadedError{edge: "sharing"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Order) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case order.FieldIsTestOrder, order.FieldIsCancel, order.FieldIsProfitSharing:
			values[i] = new(sql.NullBool)
		case order.FieldID, order.FieldType, order.FieldPeriod, order.FieldScenicAreaID, order.FieldUserID, order.FieldCarID, order.FieldModelID, order.FieldCouponID, order.FieldUseMileageMeter, order.FieldUseTimeSecond, order.FieldDepositAmount, order.FieldOrderAmount, order.FieldRefundedAmount, order.FieldCouponAmount, order.FieldOrderState, order.FieldDepositState, order.FieldEmergencyState, order.FieldUserScore:
			values[i] = new(sql.NullInt64)
		case order.FieldOrderNo, order.FieldWxTxID, order.FieldMchID, order.FieldScenicAreaName, order.FieldOpenID, order.FieldNickname, order.FieldPhone, order.FieldDeviceID, order.FieldCarName, order.FieldCarLicensePlate, order.FieldModelName, order.FieldCouponName, order.FieldRemark, order.FieldUserComment:
			values[i] = new(sql.NullString)
		case order.FieldDepositTime, order.FieldFinishTime, order.FieldCreateTime, order.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Order fields.
func (o *Order) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case order.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			o.ID = int(value.Int64)
		case order.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				o.Type = int(value.Int64)
			}
		case order.FieldPeriod:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field period", values[i])
			} else if value.Valid {
				o.Period = int(value.Int64)
			}
		case order.FieldOrderNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field order_no", values[i])
			} else if value.Valid {
				o.OrderNo = value.String
			}
		case order.FieldWxTxID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field wx_tx_id", values[i])
			} else if value.Valid {
				o.WxTxID = value.String
			}
		case order.FieldScenicAreaID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field scenic_area_id", values[i])
			} else if value.Valid {
				o.ScenicAreaID = int(value.Int64)
			}
		case order.FieldMchID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mch_id", values[i])
			} else if value.Valid {
				o.MchID = value.String
			}
		case order.FieldScenicAreaName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scenic_area_name", values[i])
			} else if value.Valid {
				o.ScenicAreaName = value.String
			}
		case order.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				o.UserID = int(value.Int64)
			}
		case order.FieldOpenID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field open_id", values[i])
			} else if value.Valid {
				o.OpenID = value.String
			}
		case order.FieldNickname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nickname", values[i])
			} else if value.Valid {
				o.Nickname = value.String
			}
		case order.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				o.Phone = value.String
			}
		case order.FieldCarID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field car_id", values[i])
			} else if value.Valid {
				o.CarID = int(value.Int64)
			}
		case order.FieldDeviceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device_id", values[i])
			} else if value.Valid {
				o.DeviceID = value.String
			}
		case order.FieldCarName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field car_name", values[i])
			} else if value.Valid {
				o.CarName = value.String
			}
		case order.FieldCarLicensePlate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field car_license_plate", values[i])
			} else if value.Valid {
				o.CarLicensePlate = value.String
			}
		case order.FieldModelID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field model_id", values[i])
			} else if value.Valid {
				o.ModelID = int(value.Int64)
			}
		case order.FieldModelName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field model_name", values[i])
			} else if value.Valid {
				o.ModelName = value.String
			}
		case order.FieldCouponID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field coupon_id", values[i])
			} else if value.Valid {
				o.CouponID = int(value.Int64)
			}
		case order.FieldCouponName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field coupon_name", values[i])
			} else if value.Valid {
				o.CouponName = value.String
			}
		case order.FieldUseMileageMeter:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field use_mileage_meter", values[i])
			} else if value.Valid {
				o.UseMileageMeter = int(value.Int64)
			}
		case order.FieldUseTimeSecond:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field use_time_second", values[i])
			} else if value.Valid {
				o.UseTimeSecond = int(value.Int64)
			}
		case order.FieldDepositAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deposit_amount", values[i])
			} else if value.Valid {
				o.DepositAmount = int(value.Int64)
			}
		case order.FieldOrderAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_amount", values[i])
			} else if value.Valid {
				o.OrderAmount = int(value.Int64)
			}
		case order.FieldRefundedAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field refunded_amount", values[i])
			} else if value.Valid {
				o.RefundedAmount = int(value.Int64)
			}
		case order.FieldCouponAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field coupon_amount", values[i])
			} else if value.Valid {
				o.CouponAmount = int(value.Int64)
			}
		case order.FieldOrderState:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_state", values[i])
			} else if value.Valid {
				o.OrderState = int(value.Int64)
			}
		case order.FieldDepositState:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deposit_state", values[i])
			} else if value.Valid {
				o.DepositState = int(value.Int64)
			}
		case order.FieldEmergencyState:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field emergency_state", values[i])
			} else if value.Valid {
				o.EmergencyState = int(value.Int64)
			}
		case order.FieldIsTestOrder:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_test_order", values[i])
			} else if value.Valid {
				o.IsTestOrder = value.Bool
			}
		case order.FieldIsCancel:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_cancel", values[i])
			} else if value.Valid {
				o.IsCancel = value.Bool
			}
		case order.FieldIsProfitSharing:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_profit_sharing", values[i])
			} else if value.Valid {
				o.IsProfitSharing = value.Bool
			}
		case order.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				o.Remark = value.String
			}
		case order.FieldUserScore:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_score", values[i])
			} else if value.Valid {
				o.UserScore = int(value.Int64)
			}
		case order.FieldUserComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_comment", values[i])
			} else if value.Valid {
				o.UserComment = value.String
			}
		case order.FieldDepositTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deposit_time", values[i])
			} else if value.Valid {
				o.DepositTime = value.Time
			}
		case order.FieldFinishTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field finish_time", values[i])
			} else if value.Valid {
				o.FinishTime = value.Time
			}
		case order.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				o.CreateTime = value.Time
			}
		case order.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				o.UpdateTime = value.Time
			}
		default:
			o.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Order.
// This includes values selected through modifiers, order, etc.
func (o *Order) Value(name string) (ent.Value, error) {
	return o.selectValues.Get(name)
}

// QueryCar queries the "car" edge of the Order entity.
func (o *Order) QueryCar() *CarQuery {
	return NewOrderClient(o.config).QueryCar(o)
}

// QueryBackgroundScenicArea queries the "background_scenic_area" edge of the Order entity.
func (o *Order) QueryBackgroundScenicArea() *ScenicAreaQuery {
	return NewOrderClient(o.config).QueryBackgroundScenicArea(o)
}

// QueryBilling queries the "billing" edge of the Order entity.
func (o *Order) QueryBilling() *OrderBillingQuery {
	return NewOrderClient(o.config).QueryBilling(o)
}

// QueryRefund queries the "refund" edge of the Order entity.
func (o *Order) QueryRefund() *OrderRefundQuery {
	return NewOrderClient(o.config).QueryRefund(o)
}

// QuerySharing queries the "sharing" edge of the Order entity.
func (o *Order) QuerySharing() *OrderSharingQuery {
	return NewOrderClient(o.config).QuerySharing(o)
}

// Update returns a builder for updating this Order.
// Note that you need to call Order.Unwrap() before calling this method if this Order
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Order) Update() *OrderUpdateOne {
	return NewOrderClient(o.config).UpdateOne(o)
}

// Unwrap unwraps the Order entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Order) Unwrap() *Order {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Order is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Order) String() string {
	var builder strings.Builder
	builder.WriteString("Order(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", o.Type))
	builder.WriteString(", ")
	builder.WriteString("period=")
	builder.WriteString(fmt.Sprintf("%v", o.Period))
	builder.WriteString(", ")
	builder.WriteString("order_no=")
	builder.WriteString(o.OrderNo)
	builder.WriteString(", ")
	builder.WriteString("wx_tx_id=")
	builder.WriteString(o.WxTxID)
	builder.WriteString(", ")
	builder.WriteString("scenic_area_id=")
	builder.WriteString(fmt.Sprintf("%v", o.ScenicAreaID))
	builder.WriteString(", ")
	builder.WriteString("mch_id=")
	builder.WriteString(o.MchID)
	builder.WriteString(", ")
	builder.WriteString("scenic_area_name=")
	builder.WriteString(o.ScenicAreaName)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", o.UserID))
	builder.WriteString(", ")
	builder.WriteString("open_id=")
	builder.WriteString(o.OpenID)
	builder.WriteString(", ")
	builder.WriteString("nickname=")
	builder.WriteString(o.Nickname)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(o.Phone)
	builder.WriteString(", ")
	builder.WriteString("car_id=")
	builder.WriteString(fmt.Sprintf("%v", o.CarID))
	builder.WriteString(", ")
	builder.WriteString("device_id=")
	builder.WriteString(o.DeviceID)
	builder.WriteString(", ")
	builder.WriteString("car_name=")
	builder.WriteString(o.CarName)
	builder.WriteString(", ")
	builder.WriteString("car_license_plate=")
	builder.WriteString(o.CarLicensePlate)
	builder.WriteString(", ")
	builder.WriteString("model_id=")
	builder.WriteString(fmt.Sprintf("%v", o.ModelID))
	builder.WriteString(", ")
	builder.WriteString("model_name=")
	builder.WriteString(o.ModelName)
	builder.WriteString(", ")
	builder.WriteString("coupon_id=")
	builder.WriteString(fmt.Sprintf("%v", o.CouponID))
	builder.WriteString(", ")
	builder.WriteString("coupon_name=")
	builder.WriteString(o.CouponName)
	builder.WriteString(", ")
	builder.WriteString("use_mileage_meter=")
	builder.WriteString(fmt.Sprintf("%v", o.UseMileageMeter))
	builder.WriteString(", ")
	builder.WriteString("use_time_second=")
	builder.WriteString(fmt.Sprintf("%v", o.UseTimeSecond))
	builder.WriteString(", ")
	builder.WriteString("deposit_amount=")
	builder.WriteString(fmt.Sprintf("%v", o.DepositAmount))
	builder.WriteString(", ")
	builder.WriteString("order_amount=")
	builder.WriteString(fmt.Sprintf("%v", o.OrderAmount))
	builder.WriteString(", ")
	builder.WriteString("refunded_amount=")
	builder.WriteString(fmt.Sprintf("%v", o.RefundedAmount))
	builder.WriteString(", ")
	builder.WriteString("coupon_amount=")
	builder.WriteString(fmt.Sprintf("%v", o.CouponAmount))
	builder.WriteString(", ")
	builder.WriteString("order_state=")
	builder.WriteString(fmt.Sprintf("%v", o.OrderState))
	builder.WriteString(", ")
	builder.WriteString("deposit_state=")
	builder.WriteString(fmt.Sprintf("%v", o.DepositState))
	builder.WriteString(", ")
	builder.WriteString("emergency_state=")
	builder.WriteString(fmt.Sprintf("%v", o.EmergencyState))
	builder.WriteString(", ")
	builder.WriteString("is_test_order=")
	builder.WriteString(fmt.Sprintf("%v", o.IsTestOrder))
	builder.WriteString(", ")
	builder.WriteString("is_cancel=")
	builder.WriteString(fmt.Sprintf("%v", o.IsCancel))
	builder.WriteString(", ")
	builder.WriteString("is_profit_sharing=")
	builder.WriteString(fmt.Sprintf("%v", o.IsProfitSharing))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(o.Remark)
	builder.WriteString(", ")
	builder.WriteString("user_score=")
	builder.WriteString(fmt.Sprintf("%v", o.UserScore))
	builder.WriteString(", ")
	builder.WriteString("user_comment=")
	builder.WriteString(o.UserComment)
	builder.WriteString(", ")
	builder.WriteString("deposit_time=")
	builder.WriteString(o.DepositTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("finish_time=")
	builder.WriteString(o.FinishTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(o.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(o.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Orders is a parsable slice of Order.
type Orders []*Order
