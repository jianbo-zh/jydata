// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jianbo-zh/jydata/database/ent/order"
	"github.com/jianbo-zh/jydata/database/ent/orderbilling"
)

// OrderBilling is the model entity for the OrderBilling schema.
type OrderBilling struct {
	config `json:"-"`
	// ID of the ent.
	// ID
	ID int `json:"id,omitempty"`
	// 订单ID
	OrderID int `json:"order_id,omitempty"`
	// 起步价(按时)收费价格(单位：分)
	StartTimePrice int `json:"start_time_price,omitempty"`
	// 起步价(按时)计量单位（单位：秒）
	StartTimeUnit int `json:"start_time_unit,omitempty"`
	// 时间收费价格(单位：分)
	NormalTimePrice int `json:"normal_time_price,omitempty"`
	// 时间计量单位（单位：秒）
	NormalTimeUnit int `json:"normal_time_unit,omitempty"`
	// 每天封顶价格（单位：分）
	CappedAmount int `json:"capped_amount,omitempty"`
	// 累积时长(秒)
	CumulativeSecond float64 `json:"cumulative_second,omitempty"`
	// 累积里程(米)
	CumulativeMeter float64 `json:"cumulative_meter,omitempty"`
	// 计时状态(0-未开始 1-计时中 2-暂停中 4-已结束)
	State int `json:"state,omitempty"`
	// 开始时间
	StartTime time.Time `json:"start_time,omitempty"`
	// 结束时间
	FinishTime time.Time `json:"finish_time,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderBillingQuery when eager-loading is set.
	Edges        OrderBillingEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OrderBillingEdges holds the relations/edges for other nodes in the graph.
type OrderBillingEdges struct {
	// Order holds the value of the order edge.
	Order *Order `json:"order,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OrderOrErr returns the Order value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderBillingEdges) OrderOrErr() (*Order, error) {
	if e.Order != nil {
		return e.Order, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: order.Label}
	}
	return nil, &NotLoadedError{edge: "order"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderBilling) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case orderbilling.FieldCumulativeSecond, orderbilling.FieldCumulativeMeter:
			values[i] = new(sql.NullFloat64)
		case orderbilling.FieldID, orderbilling.FieldOrderID, orderbilling.FieldStartTimePrice, orderbilling.FieldStartTimeUnit, orderbilling.FieldNormalTimePrice, orderbilling.FieldNormalTimeUnit, orderbilling.FieldCappedAmount, orderbilling.FieldState:
			values[i] = new(sql.NullInt64)
		case orderbilling.FieldStartTime, orderbilling.FieldFinishTime, orderbilling.FieldCreateTime, orderbilling.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderBilling fields.
func (ob *OrderBilling) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orderbilling.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ob.ID = int(value.Int64)
		case orderbilling.FieldOrderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value.Valid {
				ob.OrderID = int(value.Int64)
			}
		case orderbilling.FieldStartTimePrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field start_time_price", values[i])
			} else if value.Valid {
				ob.StartTimePrice = int(value.Int64)
			}
		case orderbilling.FieldStartTimeUnit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field start_time_unit", values[i])
			} else if value.Valid {
				ob.StartTimeUnit = int(value.Int64)
			}
		case orderbilling.FieldNormalTimePrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field normal_time_price", values[i])
			} else if value.Valid {
				ob.NormalTimePrice = int(value.Int64)
			}
		case orderbilling.FieldNormalTimeUnit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field normal_time_unit", values[i])
			} else if value.Valid {
				ob.NormalTimeUnit = int(value.Int64)
			}
		case orderbilling.FieldCappedAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field capped_amount", values[i])
			} else if value.Valid {
				ob.CappedAmount = int(value.Int64)
			}
		case orderbilling.FieldCumulativeSecond:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field cumulative_second", values[i])
			} else if value.Valid {
				ob.CumulativeSecond = value.Float64
			}
		case orderbilling.FieldCumulativeMeter:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field cumulative_meter", values[i])
			} else if value.Valid {
				ob.CumulativeMeter = value.Float64
			}
		case orderbilling.FieldState:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				ob.State = int(value.Int64)
			}
		case orderbilling.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				ob.StartTime = value.Time
			}
		case orderbilling.FieldFinishTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field finish_time", values[i])
			} else if value.Valid {
				ob.FinishTime = value.Time
			}
		case orderbilling.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ob.CreateTime = value.Time
			}
		case orderbilling.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ob.UpdateTime = value.Time
			}
		default:
			ob.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OrderBilling.
// This includes values selected through modifiers, order, etc.
func (ob *OrderBilling) Value(name string) (ent.Value, error) {
	return ob.selectValues.Get(name)
}

// QueryOrder queries the "order" edge of the OrderBilling entity.
func (ob *OrderBilling) QueryOrder() *OrderQuery {
	return NewOrderBillingClient(ob.config).QueryOrder(ob)
}

// Update returns a builder for updating this OrderBilling.
// Note that you need to call OrderBilling.Unwrap() before calling this method if this OrderBilling
// was returned from a transaction, and the transaction was committed or rolled back.
func (ob *OrderBilling) Update() *OrderBillingUpdateOne {
	return NewOrderBillingClient(ob.config).UpdateOne(ob)
}

// Unwrap unwraps the OrderBilling entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ob *OrderBilling) Unwrap() *OrderBilling {
	_tx, ok := ob.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrderBilling is not a transactional entity")
	}
	ob.config.driver = _tx.drv
	return ob
}

// String implements the fmt.Stringer.
func (ob *OrderBilling) String() string {
	var builder strings.Builder
	builder.WriteString("OrderBilling(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ob.ID))
	builder.WriteString("order_id=")
	builder.WriteString(fmt.Sprintf("%v", ob.OrderID))
	builder.WriteString(", ")
	builder.WriteString("start_time_price=")
	builder.WriteString(fmt.Sprintf("%v", ob.StartTimePrice))
	builder.WriteString(", ")
	builder.WriteString("start_time_unit=")
	builder.WriteString(fmt.Sprintf("%v", ob.StartTimeUnit))
	builder.WriteString(", ")
	builder.WriteString("normal_time_price=")
	builder.WriteString(fmt.Sprintf("%v", ob.NormalTimePrice))
	builder.WriteString(", ")
	builder.WriteString("normal_time_unit=")
	builder.WriteString(fmt.Sprintf("%v", ob.NormalTimeUnit))
	builder.WriteString(", ")
	builder.WriteString("capped_amount=")
	builder.WriteString(fmt.Sprintf("%v", ob.CappedAmount))
	builder.WriteString(", ")
	builder.WriteString("cumulative_second=")
	builder.WriteString(fmt.Sprintf("%v", ob.CumulativeSecond))
	builder.WriteString(", ")
	builder.WriteString("cumulative_meter=")
	builder.WriteString(fmt.Sprintf("%v", ob.CumulativeMeter))
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(fmt.Sprintf("%v", ob.State))
	builder.WriteString(", ")
	builder.WriteString("start_time=")
	builder.WriteString(ob.StartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("finish_time=")
	builder.WriteString(ob.FinishTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(ob.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(ob.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// OrderBillings is a parsable slice of OrderBilling.
type OrderBillings []*OrderBilling
