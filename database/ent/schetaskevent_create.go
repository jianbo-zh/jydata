// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/schetask"
	"github.com/jianbo-zh/jydata/database/ent/schetaskevent"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScheTaskEventCreate is the builder for creating a ScheTaskEvent entity.
type ScheTaskEventCreate struct {
	config
	mutation *ScheTaskEventMutation
	hooks    []Hook
}

// SetScheTaskID sets the "sche_task_id" field.
func (stec *ScheTaskEventCreate) SetScheTaskID(i int) *ScheTaskEventCreate {
	stec.mutation.SetScheTaskID(i)
	return stec
}

// SetState sets the "state" field.
func (stec *ScheTaskEventCreate) SetState(i int) *ScheTaskEventCreate {
	stec.mutation.SetState(i)
	return stec
}

// SetAbnormalState sets the "abnormal_state" field.
func (stec *ScheTaskEventCreate) SetAbnormalState(i int) *ScheTaskEventCreate {
	stec.mutation.SetAbnormalState(i)
	return stec
}

// SetNillableAbnormalState sets the "abnormal_state" field if the given value is not nil.
func (stec *ScheTaskEventCreate) SetNillableAbnormalState(i *int) *ScheTaskEventCreate {
	if i != nil {
		stec.SetAbnormalState(*i)
	}
	return stec
}

// SetRemark sets the "remark" field.
func (stec *ScheTaskEventCreate) SetRemark(s string) *ScheTaskEventCreate {
	stec.mutation.SetRemark(s)
	return stec
}

// SetCreateTime sets the "create_time" field.
func (stec *ScheTaskEventCreate) SetCreateTime(t time.Time) *ScheTaskEventCreate {
	stec.mutation.SetCreateTime(t)
	return stec
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (stec *ScheTaskEventCreate) SetNillableCreateTime(t *time.Time) *ScheTaskEventCreate {
	if t != nil {
		stec.SetCreateTime(*t)
	}
	return stec
}

// SetID sets the "id" field.
func (stec *ScheTaskEventCreate) SetID(i int) *ScheTaskEventCreate {
	stec.mutation.SetID(i)
	return stec
}

// SetScheTask sets the "sche_task" edge to the ScheTask entity.
func (stec *ScheTaskEventCreate) SetScheTask(s *ScheTask) *ScheTaskEventCreate {
	return stec.SetScheTaskID(s.ID)
}

// Mutation returns the ScheTaskEventMutation object of the builder.
func (stec *ScheTaskEventCreate) Mutation() *ScheTaskEventMutation {
	return stec.mutation
}

// Save creates the ScheTaskEvent in the database.
func (stec *ScheTaskEventCreate) Save(ctx context.Context) (*ScheTaskEvent, error) {
	stec.defaults()
	return withHooks(ctx, stec.sqlSave, stec.mutation, stec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (stec *ScheTaskEventCreate) SaveX(ctx context.Context) *ScheTaskEvent {
	v, err := stec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (stec *ScheTaskEventCreate) Exec(ctx context.Context) error {
	_, err := stec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stec *ScheTaskEventCreate) ExecX(ctx context.Context) {
	if err := stec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stec *ScheTaskEventCreate) defaults() {
	if _, ok := stec.mutation.AbnormalState(); !ok {
		v := schetaskevent.DefaultAbnormalState
		stec.mutation.SetAbnormalState(v)
	}
	if _, ok := stec.mutation.CreateTime(); !ok {
		v := schetaskevent.DefaultCreateTime()
		stec.mutation.SetCreateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stec *ScheTaskEventCreate) check() error {
	if _, ok := stec.mutation.ScheTaskID(); !ok {
		return &ValidationError{Name: "sche_task_id", err: errors.New(`ent: missing required field "ScheTaskEvent.sche_task_id"`)}
	}
	if _, ok := stec.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "ScheTaskEvent.state"`)}
	}
	if _, ok := stec.mutation.AbnormalState(); !ok {
		return &ValidationError{Name: "abnormal_state", err: errors.New(`ent: missing required field "ScheTaskEvent.abnormal_state"`)}
	}
	if _, ok := stec.mutation.Remark(); !ok {
		return &ValidationError{Name: "remark", err: errors.New(`ent: missing required field "ScheTaskEvent.remark"`)}
	}
	if _, ok := stec.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "ScheTaskEvent.create_time"`)}
	}
	if len(stec.mutation.ScheTaskIDs()) == 0 {
		return &ValidationError{Name: "sche_task", err: errors.New(`ent: missing required edge "ScheTaskEvent.sche_task"`)}
	}
	return nil
}

func (stec *ScheTaskEventCreate) sqlSave(ctx context.Context) (*ScheTaskEvent, error) {
	if err := stec.check(); err != nil {
		return nil, err
	}
	_node, _spec := stec.createSpec()
	if err := sqlgraph.CreateNode(ctx, stec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	stec.mutation.id = &_node.ID
	stec.mutation.done = true
	return _node, nil
}

func (stec *ScheTaskEventCreate) createSpec() (*ScheTaskEvent, *sqlgraph.CreateSpec) {
	var (
		_node = &ScheTaskEvent{config: stec.config}
		_spec = sqlgraph.NewCreateSpec(schetaskevent.Table, sqlgraph.NewFieldSpec(schetaskevent.FieldID, field.TypeInt))
	)
	if id, ok := stec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := stec.mutation.State(); ok {
		_spec.SetField(schetaskevent.FieldState, field.TypeInt, value)
		_node.State = value
	}
	if value, ok := stec.mutation.AbnormalState(); ok {
		_spec.SetField(schetaskevent.FieldAbnormalState, field.TypeInt, value)
		_node.AbnormalState = value
	}
	if value, ok := stec.mutation.Remark(); ok {
		_spec.SetField(schetaskevent.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := stec.mutation.CreateTime(); ok {
		_spec.SetField(schetaskevent.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if nodes := stec.mutation.ScheTaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   schetaskevent.ScheTaskTable,
			Columns: []string{schetaskevent.ScheTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schetask.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ScheTaskID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ScheTaskEventCreateBulk is the builder for creating many ScheTaskEvent entities in bulk.
type ScheTaskEventCreateBulk struct {
	config
	err      error
	builders []*ScheTaskEventCreate
}

// Save creates the ScheTaskEvent entities in the database.
func (stecb *ScheTaskEventCreateBulk) Save(ctx context.Context) ([]*ScheTaskEvent, error) {
	if stecb.err != nil {
		return nil, stecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(stecb.builders))
	nodes := make([]*ScheTaskEvent, len(stecb.builders))
	mutators := make([]Mutator, len(stecb.builders))
	for i := range stecb.builders {
		func(i int, root context.Context) {
			builder := stecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScheTaskEventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, stecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, stecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, stecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (stecb *ScheTaskEventCreateBulk) SaveX(ctx context.Context) []*ScheTaskEvent {
	v, err := stecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (stecb *ScheTaskEventCreateBulk) Exec(ctx context.Context) error {
	_, err := stecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stecb *ScheTaskEventCreateBulk) ExecX(ctx context.Context) {
	if err := stecb.Exec(ctx); err != nil {
		panic(err)
	}
}
