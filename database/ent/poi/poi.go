// Code generated by ent, DO NOT EDIT.

package poi

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/jianbo-zh/jydata/database/schema/types"
)

const (
	// Label holds the string label denoting the poi type in the database.
	Label = "poi"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldAlias holds the string denoting the alias field in the database.
	FieldAlias = "alias"
	// FieldScenicAreaID holds the string denoting the scenic_area_id field in the database.
	FieldScenicAreaID = "scenic_area_id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldWgsLon holds the string denoting the wgs_lon field in the database.
	FieldWgsLon = "wgs_lon"
	// FieldWgsLat holds the string denoting the wgs_lat field in the database.
	FieldWgsLat = "wgs_lat"
	// FieldGcjLon holds the string denoting the gcj_lon field in the database.
	FieldGcjLon = "gcj_lon"
	// FieldGcjLat holds the string denoting the gcj_lat field in the database.
	FieldGcjLat = "gcj_lat"
	// FieldBdLon holds the string denoting the bd_lon field in the database.
	FieldBdLon = "bd_lon"
	// FieldBdLat holds the string denoting the bd_lat field in the database.
	FieldBdLat = "bd_lat"
	// FieldStopHeading holds the string denoting the stop_heading field in the database.
	FieldStopHeading = "stop_heading"
	// FieldIntroText holds the string denoting the intro_text field in the database.
	FieldIntroText = "intro_text"
	// FieldImageIds holds the string denoting the image_ids field in the database.
	FieldImageIds = "image_ids"
	// FieldAudioID holds the string denoting the audio_id field in the database.
	FieldAudioID = "audio_id"
	// FieldVideoID holds the string denoting the video_id field in the database.
	FieldVideoID = "video_id"
	// FieldBroadcastRadius holds the string denoting the broadcast_radius field in the database.
	FieldBroadcastRadius = "broadcast_radius"
	// FieldParkingRadius holds the string denoting the parking_radius field in the database.
	FieldParkingRadius = "parking_radius"
	// FieldLevel holds the string denoting the level field in the database.
	FieldLevel = "level"
	// FieldParkingArea holds the string denoting the parking_area field in the database.
	FieldParkingArea = "parking_area"
	// FieldExtendYokeeID holds the string denoting the extend_yokee_id field in the database.
	FieldExtendYokeeID = "extend_yokee_id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// EdgeBackgroundScenicArea holds the string denoting the background_scenic_area edge name in mutations.
	EdgeBackgroundScenicArea = "background_scenic_area"
	// Table holds the table name of the poi in the database.
	Table = "pois"
	// BackgroundScenicAreaTable is the table that holds the background_scenic_area relation/edge.
	BackgroundScenicAreaTable = "pois"
	// BackgroundScenicAreaInverseTable is the table name for the ScenicArea entity.
	// It exists in this package in order to avoid circular dependency with the "scenicarea" package.
	BackgroundScenicAreaInverseTable = "scenic_areas"
	// BackgroundScenicAreaColumn is the table column denoting the background_scenic_area relation/edge.
	BackgroundScenicAreaColumn = "scenic_area_id"
)

// Columns holds all SQL columns for poi fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldAlias,
	FieldScenicAreaID,
	FieldType,
	FieldWgsLon,
	FieldWgsLat,
	FieldGcjLon,
	FieldGcjLat,
	FieldBdLon,
	FieldBdLat,
	FieldStopHeading,
	FieldIntroText,
	FieldImageIds,
	FieldAudioID,
	FieldVideoID,
	FieldBroadcastRadius,
	FieldParkingRadius,
	FieldLevel,
	FieldParkingArea,
	FieldExtendYokeeID,
	FieldCreateTime,
	FieldUpdateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultAlias holds the default value on creation for the "alias" field.
	DefaultAlias string
	// DefaultWgsLon holds the default value on creation for the "wgs_lon" field.
	DefaultWgsLon float64
	// DefaultWgsLat holds the default value on creation for the "wgs_lat" field.
	DefaultWgsLat float64
	// DefaultGcjLon holds the default value on creation for the "gcj_lon" field.
	DefaultGcjLon float64
	// DefaultGcjLat holds the default value on creation for the "gcj_lat" field.
	DefaultGcjLat float64
	// DefaultBdLon holds the default value on creation for the "bd_lon" field.
	DefaultBdLon float64
	// DefaultBdLat holds the default value on creation for the "bd_lat" field.
	DefaultBdLat float64
	// DefaultStopHeading holds the default value on creation for the "stop_heading" field.
	DefaultStopHeading float64
	// DefaultIntroText holds the default value on creation for the "intro_text" field.
	DefaultIntroText string
	// DefaultImageIds holds the default value on creation for the "image_ids" field.
	DefaultImageIds []int
	// DefaultAudioID holds the default value on creation for the "audio_id" field.
	DefaultAudioID int
	// DefaultVideoID holds the default value on creation for the "video_id" field.
	DefaultVideoID int
	// DefaultBroadcastRadius holds the default value on creation for the "broadcast_radius" field.
	DefaultBroadcastRadius int
	// DefaultParkingRadius holds the default value on creation for the "parking_radius" field.
	DefaultParkingRadius int
	// DefaultLevel holds the default value on creation for the "level" field.
	DefaultLevel int
	// DefaultParkingArea holds the default value on creation for the "parking_area" field.
	DefaultParkingArea []types.FullLonLat
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)

// OrderOption defines the ordering options for the Poi queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByAlias orders the results by the alias field.
func ByAlias(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAlias, opts...).ToFunc()
}

// ByScenicAreaID orders the results by the scenic_area_id field.
func ByScenicAreaID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScenicAreaID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByWgsLon orders the results by the wgs_lon field.
func ByWgsLon(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWgsLon, opts...).ToFunc()
}

// ByWgsLat orders the results by the wgs_lat field.
func ByWgsLat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWgsLat, opts...).ToFunc()
}

// ByGcjLon orders the results by the gcj_lon field.
func ByGcjLon(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGcjLon, opts...).ToFunc()
}

// ByGcjLat orders the results by the gcj_lat field.
func ByGcjLat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGcjLat, opts...).ToFunc()
}

// ByBdLon orders the results by the bd_lon field.
func ByBdLon(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBdLon, opts...).ToFunc()
}

// ByBdLat orders the results by the bd_lat field.
func ByBdLat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBdLat, opts...).ToFunc()
}

// ByStopHeading orders the results by the stop_heading field.
func ByStopHeading(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStopHeading, opts...).ToFunc()
}

// ByIntroText orders the results by the intro_text field.
func ByIntroText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIntroText, opts...).ToFunc()
}

// ByAudioID orders the results by the audio_id field.
func ByAudioID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAudioID, opts...).ToFunc()
}

// ByVideoID orders the results by the video_id field.
func ByVideoID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVideoID, opts...).ToFunc()
}

// ByBroadcastRadius orders the results by the broadcast_radius field.
func ByBroadcastRadius(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBroadcastRadius, opts...).ToFunc()
}

// ByParkingRadius orders the results by the parking_radius field.
func ByParkingRadius(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParkingRadius, opts...).ToFunc()
}

// ByLevel orders the results by the level field.
func ByLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLevel, opts...).ToFunc()
}

// ByExtendYokeeID orders the results by the extend_yokee_id field.
func ByExtendYokeeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExtendYokeeID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByBackgroundScenicAreaField orders the results by background_scenic_area field.
func ByBackgroundScenicAreaField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBackgroundScenicAreaStep(), sql.OrderByField(field, opts...))
	}
}
func newBackgroundScenicAreaStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BackgroundScenicAreaInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BackgroundScenicAreaTable, BackgroundScenicAreaColumn),
	)
}
