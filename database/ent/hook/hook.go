// Code generated by ent, DO NOT EDIT.

package hook

import (
	"context"
	"fmt"

	"github.com/jianbo-zh/jydata/database/ent"
)

// The AccessFunc type is an adapter to allow the use of ordinary
// function as Access mutator.
type AccessFunc func(context.Context, *ent.AccessMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AccessFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.AccessMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AccessMutation", m)
}

// The AccountFunc type is an adapter to allow the use of ordinary
// function as Account mutator.
type AccountFunc func(context.Context, *ent.AccountMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AccountFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.AccountMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AccountMutation", m)
}

// The ActivityOrderFunc type is an adapter to allow the use of ordinary
// function as ActivityOrder mutator.
type ActivityOrderFunc func(context.Context, *ent.ActivityOrderMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ActivityOrderFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ActivityOrderMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ActivityOrderMutation", m)
}

// The AppPushFunc type is an adapter to allow the use of ordinary
// function as AppPush mutator.
type AppPushFunc func(context.Context, *ent.AppPushMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AppPushFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.AppPushMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AppPushMutation", m)
}

// The AppVersionFunc type is an adapter to allow the use of ordinary
// function as AppVersion mutator.
type AppVersionFunc func(context.Context, *ent.AppVersionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AppVersionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.AppVersionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AppVersionMutation", m)
}

// The BillingStrategyFunc type is an adapter to allow the use of ordinary
// function as BillingStrategy mutator.
type BillingStrategyFunc func(context.Context, *ent.BillingStrategyMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BillingStrategyFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.BillingStrategyMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BillingStrategyMutation", m)
}

// The CarFunc type is an adapter to allow the use of ordinary
// function as Car mutator.
type CarFunc func(context.Context, *ent.CarMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CarFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CarMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CarMutation", m)
}

// The CarAlarmFunc type is an adapter to allow the use of ordinary
// function as CarAlarm mutator.
type CarAlarmFunc func(context.Context, *ent.CarAlarmMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CarAlarmFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CarAlarmMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CarAlarmMutation", m)
}

// The CarConfigFunc type is an adapter to allow the use of ordinary
// function as CarConfig mutator.
type CarConfigFunc func(context.Context, *ent.CarConfigMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CarConfigFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CarConfigMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CarConfigMutation", m)
}

// The CarConfigDownloadFunc type is an adapter to allow the use of ordinary
// function as CarConfigDownload mutator.
type CarConfigDownloadFunc func(context.Context, *ent.CarConfigDownloadMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CarConfigDownloadFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CarConfigDownloadMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CarConfigDownloadMutation", m)
}

// The CarConfigPackFunc type is an adapter to allow the use of ordinary
// function as CarConfigPack mutator.
type CarConfigPackFunc func(context.Context, *ent.CarConfigPackMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CarConfigPackFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CarConfigPackMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CarConfigPackMutation", m)
}

// The CarConfigStatusFunc type is an adapter to allow the use of ordinary
// function as CarConfigStatus mutator.
type CarConfigStatusFunc func(context.Context, *ent.CarConfigStatusMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CarConfigStatusFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CarConfigStatusMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CarConfigStatusMutation", m)
}

// The CarCumulativeFunc type is an adapter to allow the use of ordinary
// function as CarCumulative mutator.
type CarCumulativeFunc func(context.Context, *ent.CarCumulativeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CarCumulativeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CarCumulativeMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CarCumulativeMutation", m)
}

// The CarExtendYokeeFunc type is an adapter to allow the use of ordinary
// function as CarExtendYokee mutator.
type CarExtendYokeeFunc func(context.Context, *ent.CarExtendYokeeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CarExtendYokeeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CarExtendYokeeMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CarExtendYokeeMutation", m)
}

// The CarLogUploadFunc type is an adapter to allow the use of ordinary
// function as CarLogUpload mutator.
type CarLogUploadFunc func(context.Context, *ent.CarLogUploadMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CarLogUploadFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CarLogUploadMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CarLogUploadMutation", m)
}

// The CarsFlightFunc type is an adapter to allow the use of ordinary
// function as CarsFlight mutator.
type CarsFlightFunc func(context.Context, *ent.CarsFlightMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CarsFlightFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CarsFlightMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CarsFlightMutation", m)
}

// The CarsFlightExtendYokeeFunc type is an adapter to allow the use of ordinary
// function as CarsFlightExtendYokee mutator.
type CarsFlightExtendYokeeFunc func(context.Context, *ent.CarsFlightExtendYokeeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CarsFlightExtendYokeeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CarsFlightExtendYokeeMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CarsFlightExtendYokeeMutation", m)
}

// The CarsModelsFunc type is an adapter to allow the use of ordinary
// function as CarsModels mutator.
type CarsModelsFunc func(context.Context, *ent.CarsModelsMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CarsModelsFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CarsModelsMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CarsModelsMutation", m)
}

// The CarsModelsGroupsFunc type is an adapter to allow the use of ordinary
// function as CarsModelsGroups mutator.
type CarsModelsGroupsFunc func(context.Context, *ent.CarsModelsGroupsMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CarsModelsGroupsFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CarsModelsGroupsMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CarsModelsGroupsMutation", m)
}

// The CarsModelsGroupsParamsFunc type is an adapter to allow the use of ordinary
// function as CarsModelsGroupsParams mutator.
type CarsModelsGroupsParamsFunc func(context.Context, *ent.CarsModelsGroupsParamsMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CarsModelsGroupsParamsFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CarsModelsGroupsParamsMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CarsModelsGroupsParamsMutation", m)
}

// The CarsOperateLogFunc type is an adapter to allow the use of ordinary
// function as CarsOperateLog mutator.
type CarsOperateLogFunc func(context.Context, *ent.CarsOperateLogMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CarsOperateLogFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CarsOperateLogMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CarsOperateLogMutation", m)
}

// The CouponFunc type is an adapter to allow the use of ordinary
// function as Coupon mutator.
type CouponFunc func(context.Context, *ent.CouponMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CouponFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CouponMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CouponMutation", m)
}

// The FeedbackFunc type is an adapter to allow the use of ordinary
// function as Feedback mutator.
type FeedbackFunc func(context.Context, *ent.FeedbackMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f FeedbackFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.FeedbackMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.FeedbackMutation", m)
}

// The FileFunc type is an adapter to allow the use of ordinary
// function as File mutator.
type FileFunc func(context.Context, *ent.FileMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f FileFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.FileMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.FileMutation", m)
}

// The MapVersionFunc type is an adapter to allow the use of ordinary
// function as MapVersion mutator.
type MapVersionFunc func(context.Context, *ent.MapVersionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f MapVersionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.MapVersionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.MapVersionMutation", m)
}

// The OperationUserFunc type is an adapter to allow the use of ordinary
// function as OperationUser mutator.
type OperationUserFunc func(context.Context, *ent.OperationUserMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f OperationUserFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.OperationUserMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.OperationUserMutation", m)
}

// The OrderFunc type is an adapter to allow the use of ordinary
// function as Order mutator.
type OrderFunc func(context.Context, *ent.OrderMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f OrderFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.OrderMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.OrderMutation", m)
}

// The OrderAppealFunc type is an adapter to allow the use of ordinary
// function as OrderAppeal mutator.
type OrderAppealFunc func(context.Context, *ent.OrderAppealMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f OrderAppealFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.OrderAppealMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.OrderAppealMutation", m)
}

// The OrderBillingFunc type is an adapter to allow the use of ordinary
// function as OrderBilling mutator.
type OrderBillingFunc func(context.Context, *ent.OrderBillingMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f OrderBillingFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.OrderBillingMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.OrderBillingMutation", m)
}

// The OrderExtendFlightFunc type is an adapter to allow the use of ordinary
// function as OrderExtendFlight mutator.
type OrderExtendFlightFunc func(context.Context, *ent.OrderExtendFlightMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f OrderExtendFlightFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.OrderExtendFlightMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.OrderExtendFlightMutation", m)
}

// The OrderRefundFunc type is an adapter to allow the use of ordinary
// function as OrderRefund mutator.
type OrderRefundFunc func(context.Context, *ent.OrderRefundMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f OrderRefundFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.OrderRefundMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.OrderRefundMutation", m)
}

// The OrderSharingFunc type is an adapter to allow the use of ordinary
// function as OrderSharing mutator.
type OrderSharingFunc func(context.Context, *ent.OrderSharingMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f OrderSharingFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.OrderSharingMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.OrderSharingMutation", m)
}

// The PayTxBillFunc type is an adapter to allow the use of ordinary
// function as PayTxBill mutator.
type PayTxBillFunc func(context.Context, *ent.PayTxBillMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PayTxBillFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PayTxBillMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PayTxBillMutation", m)
}

// The PaymentAccountFunc type is an adapter to allow the use of ordinary
// function as PaymentAccount mutator.
type PaymentAccountFunc func(context.Context, *ent.PaymentAccountMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PaymentAccountFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PaymentAccountMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PaymentAccountMutation", m)
}

// The PoiFunc type is an adapter to allow the use of ordinary
// function as Poi mutator.
type PoiFunc func(context.Context, *ent.PoiMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PoiFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PoiMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PoiMutation", m)
}

// The PoiExtendYokeeFunc type is an adapter to allow the use of ordinary
// function as PoiExtendYokee mutator.
type PoiExtendYokeeFunc func(context.Context, *ent.PoiExtendYokeeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PoiExtendYokeeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PoiExtendYokeeMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PoiExtendYokeeMutation", m)
}

// The ProfitReceiverFunc type is an adapter to allow the use of ordinary
// function as ProfitReceiver mutator.
type ProfitReceiverFunc func(context.Context, *ent.ProfitReceiverMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProfitReceiverFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ProfitReceiverMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProfitReceiverMutation", m)
}

// The RoleFunc type is an adapter to allow the use of ordinary
// function as Role mutator.
type RoleFunc func(context.Context, *ent.RoleMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f RoleFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.RoleMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.RoleMutation", m)
}

// The RouteFunc type is an adapter to allow the use of ordinary
// function as Route mutator.
type RouteFunc func(context.Context, *ent.RouteMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f RouteFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.RouteMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.RouteMutation", m)
}

// The ScenicAreaFunc type is an adapter to allow the use of ordinary
// function as ScenicArea mutator.
type ScenicAreaFunc func(context.Context, *ent.ScenicAreaMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ScenicAreaFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ScenicAreaMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ScenicAreaMutation", m)
}

// The ScenicAreaExtendYokeeFunc type is an adapter to allow the use of ordinary
// function as ScenicAreaExtendYokee mutator.
type ScenicAreaExtendYokeeFunc func(context.Context, *ent.ScenicAreaExtendYokeeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ScenicAreaExtendYokeeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ScenicAreaExtendYokeeMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ScenicAreaExtendYokeeMutation", m)
}

// The ScenicAreaMapFunc type is an adapter to allow the use of ordinary
// function as ScenicAreaMap mutator.
type ScenicAreaMapFunc func(context.Context, *ent.ScenicAreaMapMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ScenicAreaMapFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ScenicAreaMapMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ScenicAreaMapMutation", m)
}

// The ScheTaskFunc type is an adapter to allow the use of ordinary
// function as ScheTask mutator.
type ScheTaskFunc func(context.Context, *ent.ScheTaskMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ScheTaskFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ScheTaskMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ScheTaskMutation", m)
}

// The ScheTaskEventFunc type is an adapter to allow the use of ordinary
// function as ScheTaskEvent mutator.
type ScheTaskEventFunc func(context.Context, *ent.ScheTaskEventMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ScheTaskEventFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ScheTaskEventMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ScheTaskEventMutation", m)
}

// The SshAccountFunc type is an adapter to allow the use of ordinary
// function as SshAccount mutator.
type SshAccountFunc func(context.Context, *ent.SshAccountMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SshAccountFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.SshAccountMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SshAccountMutation", m)
}

// The StatsDailyFunc type is an adapter to allow the use of ordinary
// function as StatsDaily mutator.
type StatsDailyFunc func(context.Context, *ent.StatsDailyMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f StatsDailyFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.StatsDailyMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.StatsDailyMutation", m)
}

// The StatsDailyCarFunc type is an adapter to allow the use of ordinary
// function as StatsDailyCar mutator.
type StatsDailyCarFunc func(context.Context, *ent.StatsDailyCarMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f StatsDailyCarFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.StatsDailyCarMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.StatsDailyCarMutation", m)
}

// The StatsDailyScenicAreaFunc type is an adapter to allow the use of ordinary
// function as StatsDailyScenicArea mutator.
type StatsDailyScenicAreaFunc func(context.Context, *ent.StatsDailyScenicAreaMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f StatsDailyScenicAreaFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.StatsDailyScenicAreaMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.StatsDailyScenicAreaMutation", m)
}

// The StatsHourlyCarFunc type is an adapter to allow the use of ordinary
// function as StatsHourlyCar mutator.
type StatsHourlyCarFunc func(context.Context, *ent.StatsHourlyCarMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f StatsHourlyCarFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.StatsHourlyCarMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.StatsHourlyCarMutation", m)
}

// The StatsHourlyScenicAreaFunc type is an adapter to allow the use of ordinary
// function as StatsHourlyScenicArea mutator.
type StatsHourlyScenicAreaFunc func(context.Context, *ent.StatsHourlyScenicAreaMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f StatsHourlyScenicAreaFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.StatsHourlyScenicAreaMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.StatsHourlyScenicAreaMutation", m)
}

// The SystemConfigFunc type is an adapter to allow the use of ordinary
// function as SystemConfig mutator.
type SystemConfigFunc func(context.Context, *ent.SystemConfigMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SystemConfigFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.SystemConfigMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SystemConfigMutation", m)
}

// The SystemLogFunc type is an adapter to allow the use of ordinary
// function as SystemLog mutator.
type SystemLogFunc func(context.Context, *ent.SystemLogMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SystemLogFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.SystemLogMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SystemLogMutation", m)
}

// The TaskFunc type is an adapter to allow the use of ordinary
// function as Task mutator.
type TaskFunc func(context.Context, *ent.TaskMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TaskFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.TaskMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TaskMutation", m)
}

// The UserFunc type is an adapter to allow the use of ordinary
// function as User mutator.
type UserFunc func(context.Context, *ent.UserMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UserFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UserMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UserMutation", m)
}

// Condition is a hook condition function.
type Condition func(context.Context, ent.Mutation) bool

// And groups conditions with the AND operator.
func And(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if !first(ctx, m) || !second(ctx, m) {
			return false
		}
		for _, cond := range rest {
			if !cond(ctx, m) {
				return false
			}
		}
		return true
	}
}

// Or groups conditions with the OR operator.
func Or(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if first(ctx, m) || second(ctx, m) {
			return true
		}
		for _, cond := range rest {
			if cond(ctx, m) {
				return true
			}
		}
		return false
	}
}

// Not negates a given condition.
func Not(cond Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		return !cond(ctx, m)
	}
}

// HasOp is a condition testing mutation operation.
func HasOp(op ent.Op) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		return m.Op().Is(op)
	}
}

// HasAddedFields is a condition validating `.AddedField` on fields.
func HasAddedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.AddedField(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.AddedField(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasClearedFields is a condition validating `.FieldCleared` on fields.
func HasClearedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if exists := m.FieldCleared(field); !exists {
			return false
		}
		for _, field := range fields {
			if exists := m.FieldCleared(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasFields is a condition validating `.Field` on fields.
func HasFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.Field(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.Field(field); !exists {
				return false
			}
		}
		return true
	}
}

// If executes the given hook under condition.
//
//	hook.If(ComputeAverage, And(HasFields(...), HasAddedFields(...)))
func If(hk ent.Hook, cond Condition) ent.Hook {
	return func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if cond(ctx, m) {
				return hk(next).Mutate(ctx, m)
			}
			return next.Mutate(ctx, m)
		})
	}
}

// On executes the given hook only for the given operation.
//
//	hook.On(Log, ent.Delete|ent.Create)
func On(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, HasOp(op))
}

// Unless skips the given hook only for the given operation.
//
//	hook.Unless(Log, ent.Update|ent.UpdateOne)
func Unless(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, Not(HasOp(op)))
}

// FixedError is a hook returning a fixed error.
func FixedError(err error) ent.Hook {
	return func(ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(context.Context, ent.Mutation) (ent.Value, error) {
			return nil, err
		})
	}
}

// Reject returns a hook that rejects all operations that match op.
//
//	func (T) Hooks() []ent.Hook {
//		return []ent.Hook{
//			Reject(ent.Delete|ent.Update),
//		}
//	}
func Reject(op ent.Op) ent.Hook {
	hk := FixedError(fmt.Errorf("%s operation is not allowed", op))
	return On(hk, op)
}

// Chain acts as a list of hooks and is effectively immutable.
// Once created, it will always hold the same set of hooks in the same order.
type Chain struct {
	hooks []ent.Hook
}

// NewChain creates a new chain of hooks.
func NewChain(hooks ...ent.Hook) Chain {
	return Chain{append([]ent.Hook(nil), hooks...)}
}

// Hook chains the list of hooks and returns the final hook.
func (c Chain) Hook() ent.Hook {
	return func(mutator ent.Mutator) ent.Mutator {
		for i := len(c.hooks) - 1; i >= 0; i-- {
			mutator = c.hooks[i](mutator)
		}
		return mutator
	}
}

// Append extends a chain, adding the specified hook
// as the last ones in the mutation flow.
func (c Chain) Append(hooks ...ent.Hook) Chain {
	newHooks := make([]ent.Hook, 0, len(c.hooks)+len(hooks))
	newHooks = append(newHooks, c.hooks...)
	newHooks = append(newHooks, hooks...)
	return Chain{newHooks}
}

// Extend extends a chain, adding the specified chain
// as the last ones in the mutation flow.
func (c Chain) Extend(chain Chain) Chain {
	return c.Append(chain.hooks...)
}
