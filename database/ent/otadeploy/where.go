// Code generated by ent, DO NOT EDIT.

package otadeploy

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldLTE(FieldID, id))
}

// DeleteTime applies equality check predicate on the "delete_time" field. It's identical to DeleteTimeEQ.
func DeleteTime(v time.Time) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldEQ(FieldDeleteTime, v))
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v int) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldEQ(FieldUUID, v))
}

// CarID applies equality check predicate on the "car_id" field. It's identical to CarIDEQ.
func CarID(v int) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldEQ(FieldCarID, v))
}

// CarName applies equality check predicate on the "car_name" field. It's identical to CarNameEQ.
func CarName(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldEQ(FieldCarName, v))
}

// DeviceID applies equality check predicate on the "device_id" field. It's identical to DeviceIDEQ.
func DeviceID(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldEQ(FieldDeviceID, v))
}

// OtaVersionID applies equality check predicate on the "ota_version_id" field. It's identical to OtaVersionIDEQ.
func OtaVersionID(v int) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldEQ(FieldOtaVersionID, v))
}

// OtaVersionName applies equality check predicate on the "ota_version_name" field. It's identical to OtaVersionNameEQ.
func OtaVersionName(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldEQ(FieldOtaVersionName, v))
}

// OtaVersionNumber applies equality check predicate on the "ota_version_number" field. It's identical to OtaVersionNumberEQ.
func OtaVersionNumber(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldEQ(FieldOtaVersionNumber, v))
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v int) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldEQ(FieldState, v))
}

// Errmsg applies equality check predicate on the "errmsg" field. It's identical to ErrmsgEQ.
func Errmsg(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldEQ(FieldErrmsg, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldEQ(FieldUpdateTime, v))
}

// DeleteTimeEQ applies the EQ predicate on the "delete_time" field.
func DeleteTimeEQ(v time.Time) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldEQ(FieldDeleteTime, v))
}

// DeleteTimeNEQ applies the NEQ predicate on the "delete_time" field.
func DeleteTimeNEQ(v time.Time) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldNEQ(FieldDeleteTime, v))
}

// DeleteTimeIn applies the In predicate on the "delete_time" field.
func DeleteTimeIn(vs ...time.Time) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldIn(FieldDeleteTime, vs...))
}

// DeleteTimeNotIn applies the NotIn predicate on the "delete_time" field.
func DeleteTimeNotIn(vs ...time.Time) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldNotIn(FieldDeleteTime, vs...))
}

// DeleteTimeGT applies the GT predicate on the "delete_time" field.
func DeleteTimeGT(v time.Time) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldGT(FieldDeleteTime, v))
}

// DeleteTimeGTE applies the GTE predicate on the "delete_time" field.
func DeleteTimeGTE(v time.Time) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldGTE(FieldDeleteTime, v))
}

// DeleteTimeLT applies the LT predicate on the "delete_time" field.
func DeleteTimeLT(v time.Time) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldLT(FieldDeleteTime, v))
}

// DeleteTimeLTE applies the LTE predicate on the "delete_time" field.
func DeleteTimeLTE(v time.Time) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldLTE(FieldDeleteTime, v))
}

// DeleteTimeIsNil applies the IsNil predicate on the "delete_time" field.
func DeleteTimeIsNil() predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldIsNull(FieldDeleteTime))
}

// DeleteTimeNotNil applies the NotNil predicate on the "delete_time" field.
func DeleteTimeNotNil() predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldNotNull(FieldDeleteTime))
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v int) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldEQ(FieldUUID, v))
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v int) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldNEQ(FieldUUID, v))
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...int) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldIn(FieldUUID, vs...))
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...int) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldNotIn(FieldUUID, vs...))
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v int) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldGT(FieldUUID, v))
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v int) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldGTE(FieldUUID, v))
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v int) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldLT(FieldUUID, v))
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v int) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldLTE(FieldUUID, v))
}

// CarIDEQ applies the EQ predicate on the "car_id" field.
func CarIDEQ(v int) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldEQ(FieldCarID, v))
}

// CarIDNEQ applies the NEQ predicate on the "car_id" field.
func CarIDNEQ(v int) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldNEQ(FieldCarID, v))
}

// CarIDIn applies the In predicate on the "car_id" field.
func CarIDIn(vs ...int) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldIn(FieldCarID, vs...))
}

// CarIDNotIn applies the NotIn predicate on the "car_id" field.
func CarIDNotIn(vs ...int) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldNotIn(FieldCarID, vs...))
}

// CarIDGT applies the GT predicate on the "car_id" field.
func CarIDGT(v int) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldGT(FieldCarID, v))
}

// CarIDGTE applies the GTE predicate on the "car_id" field.
func CarIDGTE(v int) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldGTE(FieldCarID, v))
}

// CarIDLT applies the LT predicate on the "car_id" field.
func CarIDLT(v int) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldLT(FieldCarID, v))
}

// CarIDLTE applies the LTE predicate on the "car_id" field.
func CarIDLTE(v int) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldLTE(FieldCarID, v))
}

// CarNameEQ applies the EQ predicate on the "car_name" field.
func CarNameEQ(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldEQ(FieldCarName, v))
}

// CarNameNEQ applies the NEQ predicate on the "car_name" field.
func CarNameNEQ(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldNEQ(FieldCarName, v))
}

// CarNameIn applies the In predicate on the "car_name" field.
func CarNameIn(vs ...string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldIn(FieldCarName, vs...))
}

// CarNameNotIn applies the NotIn predicate on the "car_name" field.
func CarNameNotIn(vs ...string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldNotIn(FieldCarName, vs...))
}

// CarNameGT applies the GT predicate on the "car_name" field.
func CarNameGT(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldGT(FieldCarName, v))
}

// CarNameGTE applies the GTE predicate on the "car_name" field.
func CarNameGTE(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldGTE(FieldCarName, v))
}

// CarNameLT applies the LT predicate on the "car_name" field.
func CarNameLT(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldLT(FieldCarName, v))
}

// CarNameLTE applies the LTE predicate on the "car_name" field.
func CarNameLTE(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldLTE(FieldCarName, v))
}

// CarNameContains applies the Contains predicate on the "car_name" field.
func CarNameContains(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldContains(FieldCarName, v))
}

// CarNameHasPrefix applies the HasPrefix predicate on the "car_name" field.
func CarNameHasPrefix(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldHasPrefix(FieldCarName, v))
}

// CarNameHasSuffix applies the HasSuffix predicate on the "car_name" field.
func CarNameHasSuffix(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldHasSuffix(FieldCarName, v))
}

// CarNameEqualFold applies the EqualFold predicate on the "car_name" field.
func CarNameEqualFold(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldEqualFold(FieldCarName, v))
}

// CarNameContainsFold applies the ContainsFold predicate on the "car_name" field.
func CarNameContainsFold(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldContainsFold(FieldCarName, v))
}

// DeviceIDEQ applies the EQ predicate on the "device_id" field.
func DeviceIDEQ(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldEQ(FieldDeviceID, v))
}

// DeviceIDNEQ applies the NEQ predicate on the "device_id" field.
func DeviceIDNEQ(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldNEQ(FieldDeviceID, v))
}

// DeviceIDIn applies the In predicate on the "device_id" field.
func DeviceIDIn(vs ...string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldIn(FieldDeviceID, vs...))
}

// DeviceIDNotIn applies the NotIn predicate on the "device_id" field.
func DeviceIDNotIn(vs ...string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldNotIn(FieldDeviceID, vs...))
}

// DeviceIDGT applies the GT predicate on the "device_id" field.
func DeviceIDGT(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldGT(FieldDeviceID, v))
}

// DeviceIDGTE applies the GTE predicate on the "device_id" field.
func DeviceIDGTE(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldGTE(FieldDeviceID, v))
}

// DeviceIDLT applies the LT predicate on the "device_id" field.
func DeviceIDLT(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldLT(FieldDeviceID, v))
}

// DeviceIDLTE applies the LTE predicate on the "device_id" field.
func DeviceIDLTE(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldLTE(FieldDeviceID, v))
}

// DeviceIDContains applies the Contains predicate on the "device_id" field.
func DeviceIDContains(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldContains(FieldDeviceID, v))
}

// DeviceIDHasPrefix applies the HasPrefix predicate on the "device_id" field.
func DeviceIDHasPrefix(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldHasPrefix(FieldDeviceID, v))
}

// DeviceIDHasSuffix applies the HasSuffix predicate on the "device_id" field.
func DeviceIDHasSuffix(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldHasSuffix(FieldDeviceID, v))
}

// DeviceIDEqualFold applies the EqualFold predicate on the "device_id" field.
func DeviceIDEqualFold(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldEqualFold(FieldDeviceID, v))
}

// DeviceIDContainsFold applies the ContainsFold predicate on the "device_id" field.
func DeviceIDContainsFold(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldContainsFold(FieldDeviceID, v))
}

// OtaVersionIDEQ applies the EQ predicate on the "ota_version_id" field.
func OtaVersionIDEQ(v int) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldEQ(FieldOtaVersionID, v))
}

// OtaVersionIDNEQ applies the NEQ predicate on the "ota_version_id" field.
func OtaVersionIDNEQ(v int) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldNEQ(FieldOtaVersionID, v))
}

// OtaVersionIDIn applies the In predicate on the "ota_version_id" field.
func OtaVersionIDIn(vs ...int) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldIn(FieldOtaVersionID, vs...))
}

// OtaVersionIDNotIn applies the NotIn predicate on the "ota_version_id" field.
func OtaVersionIDNotIn(vs ...int) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldNotIn(FieldOtaVersionID, vs...))
}

// OtaVersionIDGT applies the GT predicate on the "ota_version_id" field.
func OtaVersionIDGT(v int) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldGT(FieldOtaVersionID, v))
}

// OtaVersionIDGTE applies the GTE predicate on the "ota_version_id" field.
func OtaVersionIDGTE(v int) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldGTE(FieldOtaVersionID, v))
}

// OtaVersionIDLT applies the LT predicate on the "ota_version_id" field.
func OtaVersionIDLT(v int) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldLT(FieldOtaVersionID, v))
}

// OtaVersionIDLTE applies the LTE predicate on the "ota_version_id" field.
func OtaVersionIDLTE(v int) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldLTE(FieldOtaVersionID, v))
}

// OtaVersionNameEQ applies the EQ predicate on the "ota_version_name" field.
func OtaVersionNameEQ(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldEQ(FieldOtaVersionName, v))
}

// OtaVersionNameNEQ applies the NEQ predicate on the "ota_version_name" field.
func OtaVersionNameNEQ(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldNEQ(FieldOtaVersionName, v))
}

// OtaVersionNameIn applies the In predicate on the "ota_version_name" field.
func OtaVersionNameIn(vs ...string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldIn(FieldOtaVersionName, vs...))
}

// OtaVersionNameNotIn applies the NotIn predicate on the "ota_version_name" field.
func OtaVersionNameNotIn(vs ...string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldNotIn(FieldOtaVersionName, vs...))
}

// OtaVersionNameGT applies the GT predicate on the "ota_version_name" field.
func OtaVersionNameGT(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldGT(FieldOtaVersionName, v))
}

// OtaVersionNameGTE applies the GTE predicate on the "ota_version_name" field.
func OtaVersionNameGTE(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldGTE(FieldOtaVersionName, v))
}

// OtaVersionNameLT applies the LT predicate on the "ota_version_name" field.
func OtaVersionNameLT(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldLT(FieldOtaVersionName, v))
}

// OtaVersionNameLTE applies the LTE predicate on the "ota_version_name" field.
func OtaVersionNameLTE(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldLTE(FieldOtaVersionName, v))
}

// OtaVersionNameContains applies the Contains predicate on the "ota_version_name" field.
func OtaVersionNameContains(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldContains(FieldOtaVersionName, v))
}

// OtaVersionNameHasPrefix applies the HasPrefix predicate on the "ota_version_name" field.
func OtaVersionNameHasPrefix(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldHasPrefix(FieldOtaVersionName, v))
}

// OtaVersionNameHasSuffix applies the HasSuffix predicate on the "ota_version_name" field.
func OtaVersionNameHasSuffix(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldHasSuffix(FieldOtaVersionName, v))
}

// OtaVersionNameEqualFold applies the EqualFold predicate on the "ota_version_name" field.
func OtaVersionNameEqualFold(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldEqualFold(FieldOtaVersionName, v))
}

// OtaVersionNameContainsFold applies the ContainsFold predicate on the "ota_version_name" field.
func OtaVersionNameContainsFold(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldContainsFold(FieldOtaVersionName, v))
}

// OtaVersionNumberEQ applies the EQ predicate on the "ota_version_number" field.
func OtaVersionNumberEQ(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldEQ(FieldOtaVersionNumber, v))
}

// OtaVersionNumberNEQ applies the NEQ predicate on the "ota_version_number" field.
func OtaVersionNumberNEQ(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldNEQ(FieldOtaVersionNumber, v))
}

// OtaVersionNumberIn applies the In predicate on the "ota_version_number" field.
func OtaVersionNumberIn(vs ...string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldIn(FieldOtaVersionNumber, vs...))
}

// OtaVersionNumberNotIn applies the NotIn predicate on the "ota_version_number" field.
func OtaVersionNumberNotIn(vs ...string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldNotIn(FieldOtaVersionNumber, vs...))
}

// OtaVersionNumberGT applies the GT predicate on the "ota_version_number" field.
func OtaVersionNumberGT(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldGT(FieldOtaVersionNumber, v))
}

// OtaVersionNumberGTE applies the GTE predicate on the "ota_version_number" field.
func OtaVersionNumberGTE(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldGTE(FieldOtaVersionNumber, v))
}

// OtaVersionNumberLT applies the LT predicate on the "ota_version_number" field.
func OtaVersionNumberLT(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldLT(FieldOtaVersionNumber, v))
}

// OtaVersionNumberLTE applies the LTE predicate on the "ota_version_number" field.
func OtaVersionNumberLTE(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldLTE(FieldOtaVersionNumber, v))
}

// OtaVersionNumberContains applies the Contains predicate on the "ota_version_number" field.
func OtaVersionNumberContains(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldContains(FieldOtaVersionNumber, v))
}

// OtaVersionNumberHasPrefix applies the HasPrefix predicate on the "ota_version_number" field.
func OtaVersionNumberHasPrefix(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldHasPrefix(FieldOtaVersionNumber, v))
}

// OtaVersionNumberHasSuffix applies the HasSuffix predicate on the "ota_version_number" field.
func OtaVersionNumberHasSuffix(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldHasSuffix(FieldOtaVersionNumber, v))
}

// OtaVersionNumberEqualFold applies the EqualFold predicate on the "ota_version_number" field.
func OtaVersionNumberEqualFold(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldEqualFold(FieldOtaVersionNumber, v))
}

// OtaVersionNumberContainsFold applies the ContainsFold predicate on the "ota_version_number" field.
func OtaVersionNumberContainsFold(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldContainsFold(FieldOtaVersionNumber, v))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v int) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v int) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...int) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...int) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v int) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v int) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v int) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v int) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldLTE(FieldState, v))
}

// ErrmsgEQ applies the EQ predicate on the "errmsg" field.
func ErrmsgEQ(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldEQ(FieldErrmsg, v))
}

// ErrmsgNEQ applies the NEQ predicate on the "errmsg" field.
func ErrmsgNEQ(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldNEQ(FieldErrmsg, v))
}

// ErrmsgIn applies the In predicate on the "errmsg" field.
func ErrmsgIn(vs ...string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldIn(FieldErrmsg, vs...))
}

// ErrmsgNotIn applies the NotIn predicate on the "errmsg" field.
func ErrmsgNotIn(vs ...string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldNotIn(FieldErrmsg, vs...))
}

// ErrmsgGT applies the GT predicate on the "errmsg" field.
func ErrmsgGT(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldGT(FieldErrmsg, v))
}

// ErrmsgGTE applies the GTE predicate on the "errmsg" field.
func ErrmsgGTE(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldGTE(FieldErrmsg, v))
}

// ErrmsgLT applies the LT predicate on the "errmsg" field.
func ErrmsgLT(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldLT(FieldErrmsg, v))
}

// ErrmsgLTE applies the LTE predicate on the "errmsg" field.
func ErrmsgLTE(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldLTE(FieldErrmsg, v))
}

// ErrmsgContains applies the Contains predicate on the "errmsg" field.
func ErrmsgContains(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldContains(FieldErrmsg, v))
}

// ErrmsgHasPrefix applies the HasPrefix predicate on the "errmsg" field.
func ErrmsgHasPrefix(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldHasPrefix(FieldErrmsg, v))
}

// ErrmsgHasSuffix applies the HasSuffix predicate on the "errmsg" field.
func ErrmsgHasSuffix(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldHasSuffix(FieldErrmsg, v))
}

// ErrmsgEqualFold applies the EqualFold predicate on the "errmsg" field.
func ErrmsgEqualFold(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldEqualFold(FieldErrmsg, v))
}

// ErrmsgContainsFold applies the ContainsFold predicate on the "errmsg" field.
func ErrmsgContainsFold(v string) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldContainsFold(FieldErrmsg, v))
}

// ProcessIsNil applies the IsNil predicate on the "process" field.
func ProcessIsNil() predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldIsNull(FieldProcess))
}

// ProcessNotNil applies the NotNil predicate on the "process" field.
func ProcessNotNil() predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldNotNull(FieldProcess))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.FieldLTE(FieldUpdateTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OtaDeploy) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OtaDeploy) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OtaDeploy) predicate.OtaDeploy {
	return predicate.OtaDeploy(sql.NotPredicates(p))
}
