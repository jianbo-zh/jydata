// Code generated by ent, DO NOT EDIT.

package otadeploy

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the otadeploy type in the database.
	Label = "ota_deploy"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDeleteTime holds the string denoting the delete_time field in the database.
	FieldDeleteTime = "delete_time"
	// FieldUUID holds the string denoting the uuid field in the database.
	FieldUUID = "uuid"
	// FieldCarID holds the string denoting the car_id field in the database.
	FieldCarID = "car_id"
	// FieldCarName holds the string denoting the car_name field in the database.
	FieldCarName = "car_name"
	// FieldDeviceID holds the string denoting the device_id field in the database.
	FieldDeviceID = "device_id"
	// FieldOtaVersionID holds the string denoting the ota_version_id field in the database.
	FieldOtaVersionID = "ota_version_id"
	// FieldOtaVersionName holds the string denoting the ota_version_name field in the database.
	FieldOtaVersionName = "ota_version_name"
	// FieldOtaVersionNumber holds the string denoting the ota_version_number field in the database.
	FieldOtaVersionNumber = "ota_version_number"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldErrmsg holds the string denoting the errmsg field in the database.
	FieldErrmsg = "errmsg"
	// FieldProcess holds the string denoting the process field in the database.
	FieldProcess = "process"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// Table holds the table name of the otadeploy in the database.
	Table = "ota_deploys"
)

// Columns holds all SQL columns for otadeploy fields.
var Columns = []string{
	FieldID,
	FieldDeleteTime,
	FieldUUID,
	FieldCarID,
	FieldCarName,
	FieldDeviceID,
	FieldOtaVersionID,
	FieldOtaVersionName,
	FieldOtaVersionNumber,
	FieldState,
	FieldErrmsg,
	FieldProcess,
	FieldCreateTime,
	FieldUpdateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/jianbo-zh/jydata/database/ent/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultState holds the default value on creation for the "state" field.
	DefaultState int
	// DefaultErrmsg holds the default value on creation for the "errmsg" field.
	DefaultErrmsg string
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)

// OrderOption defines the ordering options for the OtaDeploy queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDeleteTime orders the results by the delete_time field.
func ByDeleteTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeleteTime, opts...).ToFunc()
}

// ByUUID orders the results by the uuid field.
func ByUUID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUUID, opts...).ToFunc()
}

// ByCarID orders the results by the car_id field.
func ByCarID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCarID, opts...).ToFunc()
}

// ByCarName orders the results by the car_name field.
func ByCarName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCarName, opts...).ToFunc()
}

// ByDeviceID orders the results by the device_id field.
func ByDeviceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceID, opts...).ToFunc()
}

// ByOtaVersionID orders the results by the ota_version_id field.
func ByOtaVersionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOtaVersionID, opts...).ToFunc()
}

// ByOtaVersionName orders the results by the ota_version_name field.
func ByOtaVersionName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOtaVersionName, opts...).ToFunc()
}

// ByOtaVersionNumber orders the results by the ota_version_number field.
func ByOtaVersionNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOtaVersionNumber, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByErrmsg orders the results by the errmsg field.
func ByErrmsg(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldErrmsg, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}
