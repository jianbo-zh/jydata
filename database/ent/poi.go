// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jianbo-zh/jydata/database/ent/poi"
	"github.com/jianbo-zh/jydata/database/ent/scenicarea"
)

// Poi is the model entity for the Poi schema.
type Poi struct {
	config `json:"-"`
	// ID of the ent.
	// ID
	ID int `json:"id,omitempty"`
	// 景点名称
	Name string `json:"name,omitempty"`
	// 别名
	Alias string `json:"alias,omitempty"`
	// 景区ID
	ScenicAreaID int `json:"scenic_area_id,omitempty"`
	// 景点类型(0-其他，1-停车点 2-景点 3-厕所 4-商铺 5-出入口 6-公交站点)
	Type int `json:"type,omitempty"`
	// 经度(地球坐标系)
	WgsLon float64 `json:"wgs_lon,omitempty"`
	// 纬度(地球坐标系)
	WgsLat float64 `json:"wgs_lat,omitempty"`
	// 经度(火星坐标系)
	GcjLon float64 `json:"gcj_lon,omitempty"`
	// 纬度(火星坐标系)
	GcjLat float64 `json:"gcj_lat,omitempty"`
	// 经度(百度坐标系)
	BdLon float64 `json:"bd_lon,omitempty"`
	// 纬度(百度坐标系)
	BdLat float64 `json:"bd_lat,omitempty"`
	// 停车点车辆朝向
	StopHeading float64 `json:"stop_heading,omitempty"`
	// 简介文本
	IntroText string `json:"intro_text,omitempty"`
	// 图片集
	ImageIds []int `json:"image_ids,omitempty"`
	// 语音播报
	AudioID int `json:"audio_id,omitempty"`
	// 介绍视频
	VideoID int `json:"video_id,omitempty"`
	// 播报半径
	BroadcastRadius int `json:"broadcast_radius,omitempty"`
	// 停车半径
	ParkingRadius int `json:"parking_radius,omitempty"`
	// POI层级
	Level int `json:"level,omitempty"`
	// Yokee扩展ID
	ExtendYokeeID *int `json:"extend_yokee_id,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PoiQuery when eager-loading is set.
	Edges        PoiEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PoiEdges holds the relations/edges for other nodes in the graph.
type PoiEdges struct {
	// BackgroundScenicArea holds the value of the background_scenic_area edge.
	BackgroundScenicArea *ScenicArea `json:"background_scenic_area,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BackgroundScenicAreaOrErr returns the BackgroundScenicArea value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PoiEdges) BackgroundScenicAreaOrErr() (*ScenicArea, error) {
	if e.BackgroundScenicArea != nil {
		return e.BackgroundScenicArea, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: scenicarea.Label}
	}
	return nil, &NotLoadedError{edge: "background_scenic_area"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Poi) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case poi.FieldImageIds:
			values[i] = new([]byte)
		case poi.FieldWgsLon, poi.FieldWgsLat, poi.FieldGcjLon, poi.FieldGcjLat, poi.FieldBdLon, poi.FieldBdLat, poi.FieldStopHeading:
			values[i] = new(sql.NullFloat64)
		case poi.FieldID, poi.FieldScenicAreaID, poi.FieldType, poi.FieldAudioID, poi.FieldVideoID, poi.FieldBroadcastRadius, poi.FieldParkingRadius, poi.FieldLevel, poi.FieldExtendYokeeID:
			values[i] = new(sql.NullInt64)
		case poi.FieldName, poi.FieldAlias, poi.FieldIntroText:
			values[i] = new(sql.NullString)
		case poi.FieldCreateTime, poi.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Poi fields.
func (po *Poi) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case poi.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			po.ID = int(value.Int64)
		case poi.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				po.Name = value.String
			}
		case poi.FieldAlias:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field alias", values[i])
			} else if value.Valid {
				po.Alias = value.String
			}
		case poi.FieldScenicAreaID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field scenic_area_id", values[i])
			} else if value.Valid {
				po.ScenicAreaID = int(value.Int64)
			}
		case poi.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				po.Type = int(value.Int64)
			}
		case poi.FieldWgsLon:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field wgs_lon", values[i])
			} else if value.Valid {
				po.WgsLon = value.Float64
			}
		case poi.FieldWgsLat:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field wgs_lat", values[i])
			} else if value.Valid {
				po.WgsLat = value.Float64
			}
		case poi.FieldGcjLon:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field gcj_lon", values[i])
			} else if value.Valid {
				po.GcjLon = value.Float64
			}
		case poi.FieldGcjLat:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field gcj_lat", values[i])
			} else if value.Valid {
				po.GcjLat = value.Float64
			}
		case poi.FieldBdLon:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field bd_lon", values[i])
			} else if value.Valid {
				po.BdLon = value.Float64
			}
		case poi.FieldBdLat:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field bd_lat", values[i])
			} else if value.Valid {
				po.BdLat = value.Float64
			}
		case poi.FieldStopHeading:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field stop_heading", values[i])
			} else if value.Valid {
				po.StopHeading = value.Float64
			}
		case poi.FieldIntroText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field intro_text", values[i])
			} else if value.Valid {
				po.IntroText = value.String
			}
		case poi.FieldImageIds:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field image_ids", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &po.ImageIds); err != nil {
					return fmt.Errorf("unmarshal field image_ids: %w", err)
				}
			}
		case poi.FieldAudioID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field audio_id", values[i])
			} else if value.Valid {
				po.AudioID = int(value.Int64)
			}
		case poi.FieldVideoID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field video_id", values[i])
			} else if value.Valid {
				po.VideoID = int(value.Int64)
			}
		case poi.FieldBroadcastRadius:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field broadcast_radius", values[i])
			} else if value.Valid {
				po.BroadcastRadius = int(value.Int64)
			}
		case poi.FieldParkingRadius:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field parking_radius", values[i])
			} else if value.Valid {
				po.ParkingRadius = int(value.Int64)
			}
		case poi.FieldLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field level", values[i])
			} else if value.Valid {
				po.Level = int(value.Int64)
			}
		case poi.FieldExtendYokeeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field extend_yokee_id", values[i])
			} else if value.Valid {
				po.ExtendYokeeID = new(int)
				*po.ExtendYokeeID = int(value.Int64)
			}
		case poi.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				po.CreateTime = value.Time
			}
		case poi.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				po.UpdateTime = value.Time
			}
		default:
			po.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Poi.
// This includes values selected through modifiers, order, etc.
func (po *Poi) Value(name string) (ent.Value, error) {
	return po.selectValues.Get(name)
}

// QueryBackgroundScenicArea queries the "background_scenic_area" edge of the Poi entity.
func (po *Poi) QueryBackgroundScenicArea() *ScenicAreaQuery {
	return NewPoiClient(po.config).QueryBackgroundScenicArea(po)
}

// Update returns a builder for updating this Poi.
// Note that you need to call Poi.Unwrap() before calling this method if this Poi
// was returned from a transaction, and the transaction was committed or rolled back.
func (po *Poi) Update() *PoiUpdateOne {
	return NewPoiClient(po.config).UpdateOne(po)
}

// Unwrap unwraps the Poi entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (po *Poi) Unwrap() *Poi {
	_tx, ok := po.config.driver.(*txDriver)
	if !ok {
		panic("ent: Poi is not a transactional entity")
	}
	po.config.driver = _tx.drv
	return po
}

// String implements the fmt.Stringer.
func (po *Poi) String() string {
	var builder strings.Builder
	builder.WriteString("Poi(")
	builder.WriteString(fmt.Sprintf("id=%v, ", po.ID))
	builder.WriteString("name=")
	builder.WriteString(po.Name)
	builder.WriteString(", ")
	builder.WriteString("alias=")
	builder.WriteString(po.Alias)
	builder.WriteString(", ")
	builder.WriteString("scenic_area_id=")
	builder.WriteString(fmt.Sprintf("%v", po.ScenicAreaID))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", po.Type))
	builder.WriteString(", ")
	builder.WriteString("wgs_lon=")
	builder.WriteString(fmt.Sprintf("%v", po.WgsLon))
	builder.WriteString(", ")
	builder.WriteString("wgs_lat=")
	builder.WriteString(fmt.Sprintf("%v", po.WgsLat))
	builder.WriteString(", ")
	builder.WriteString("gcj_lon=")
	builder.WriteString(fmt.Sprintf("%v", po.GcjLon))
	builder.WriteString(", ")
	builder.WriteString("gcj_lat=")
	builder.WriteString(fmt.Sprintf("%v", po.GcjLat))
	builder.WriteString(", ")
	builder.WriteString("bd_lon=")
	builder.WriteString(fmt.Sprintf("%v", po.BdLon))
	builder.WriteString(", ")
	builder.WriteString("bd_lat=")
	builder.WriteString(fmt.Sprintf("%v", po.BdLat))
	builder.WriteString(", ")
	builder.WriteString("stop_heading=")
	builder.WriteString(fmt.Sprintf("%v", po.StopHeading))
	builder.WriteString(", ")
	builder.WriteString("intro_text=")
	builder.WriteString(po.IntroText)
	builder.WriteString(", ")
	builder.WriteString("image_ids=")
	builder.WriteString(fmt.Sprintf("%v", po.ImageIds))
	builder.WriteString(", ")
	builder.WriteString("audio_id=")
	builder.WriteString(fmt.Sprintf("%v", po.AudioID))
	builder.WriteString(", ")
	builder.WriteString("video_id=")
	builder.WriteString(fmt.Sprintf("%v", po.VideoID))
	builder.WriteString(", ")
	builder.WriteString("broadcast_radius=")
	builder.WriteString(fmt.Sprintf("%v", po.BroadcastRadius))
	builder.WriteString(", ")
	builder.WriteString("parking_radius=")
	builder.WriteString(fmt.Sprintf("%v", po.ParkingRadius))
	builder.WriteString(", ")
	builder.WriteString("level=")
	builder.WriteString(fmt.Sprintf("%v", po.Level))
	builder.WriteString(", ")
	if v := po.ExtendYokeeID; v != nil {
		builder.WriteString("extend_yokee_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(po.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(po.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Pois is a parsable slice of Poi.
type Pois []*Poi
