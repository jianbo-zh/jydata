// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/billingstrategy"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"github.com/jianbo-zh/jydata/database/ent/scenicarea"
)

// BillingStrategyUpdate is the builder for updating BillingStrategy entities.
type BillingStrategyUpdate struct {
	config
	hooks    []Hook
	mutation *BillingStrategyMutation
}

// Where appends a list predicates to the BillingStrategyUpdate builder.
func (bsu *BillingStrategyUpdate) Where(ps ...predicate.BillingStrategy) *BillingStrategyUpdate {
	bsu.mutation.Where(ps...)
	return bsu
}

// SetName sets the "name" field.
func (bsu *BillingStrategyUpdate) SetName(s string) *BillingStrategyUpdate {
	bsu.mutation.SetName(s)
	return bsu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (bsu *BillingStrategyUpdate) SetNillableName(s *string) *BillingStrategyUpdate {
	if s != nil {
		bsu.SetName(*s)
	}
	return bsu
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (bsu *BillingStrategyUpdate) SetScenicAreaID(i int) *BillingStrategyUpdate {
	bsu.mutation.SetScenicAreaID(i)
	return bsu
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (bsu *BillingStrategyUpdate) SetNillableScenicAreaID(i *int) *BillingStrategyUpdate {
	if i != nil {
		bsu.SetScenicAreaID(*i)
	}
	return bsu
}

// SetModelID sets the "model_id" field.
func (bsu *BillingStrategyUpdate) SetModelID(i int) *BillingStrategyUpdate {
	bsu.mutation.ResetModelID()
	bsu.mutation.SetModelID(i)
	return bsu
}

// SetNillableModelID sets the "model_id" field if the given value is not nil.
func (bsu *BillingStrategyUpdate) SetNillableModelID(i *int) *BillingStrategyUpdate {
	if i != nil {
		bsu.SetModelID(*i)
	}
	return bsu
}

// AddModelID adds i to the "model_id" field.
func (bsu *BillingStrategyUpdate) AddModelID(i int) *BillingStrategyUpdate {
	bsu.mutation.AddModelID(i)
	return bsu
}

// SetMainMode sets the "main_mode" field.
func (bsu *BillingStrategyUpdate) SetMainMode(i int) *BillingStrategyUpdate {
	bsu.mutation.ResetMainMode()
	bsu.mutation.SetMainMode(i)
	return bsu
}

// SetNillableMainMode sets the "main_mode" field if the given value is not nil.
func (bsu *BillingStrategyUpdate) SetNillableMainMode(i *int) *BillingStrategyUpdate {
	if i != nil {
		bsu.SetMainMode(*i)
	}
	return bsu
}

// AddMainMode adds i to the "main_mode" field.
func (bsu *BillingStrategyUpdate) AddMainMode(i int) *BillingStrategyUpdate {
	bsu.mutation.AddMainMode(i)
	return bsu
}

// SetStartTimePrice sets the "start_time_price" field.
func (bsu *BillingStrategyUpdate) SetStartTimePrice(i int) *BillingStrategyUpdate {
	bsu.mutation.ResetStartTimePrice()
	bsu.mutation.SetStartTimePrice(i)
	return bsu
}

// SetNillableStartTimePrice sets the "start_time_price" field if the given value is not nil.
func (bsu *BillingStrategyUpdate) SetNillableStartTimePrice(i *int) *BillingStrategyUpdate {
	if i != nil {
		bsu.SetStartTimePrice(*i)
	}
	return bsu
}

// AddStartTimePrice adds i to the "start_time_price" field.
func (bsu *BillingStrategyUpdate) AddStartTimePrice(i int) *BillingStrategyUpdate {
	bsu.mutation.AddStartTimePrice(i)
	return bsu
}

// SetStartTimeUnit sets the "start_time_unit" field.
func (bsu *BillingStrategyUpdate) SetStartTimeUnit(i int) *BillingStrategyUpdate {
	bsu.mutation.ResetStartTimeUnit()
	bsu.mutation.SetStartTimeUnit(i)
	return bsu
}

// SetNillableStartTimeUnit sets the "start_time_unit" field if the given value is not nil.
func (bsu *BillingStrategyUpdate) SetNillableStartTimeUnit(i *int) *BillingStrategyUpdate {
	if i != nil {
		bsu.SetStartTimeUnit(*i)
	}
	return bsu
}

// AddStartTimeUnit adds i to the "start_time_unit" field.
func (bsu *BillingStrategyUpdate) AddStartTimeUnit(i int) *BillingStrategyUpdate {
	bsu.mutation.AddStartTimeUnit(i)
	return bsu
}

// SetNormalTimePrice sets the "normal_time_price" field.
func (bsu *BillingStrategyUpdate) SetNormalTimePrice(i int) *BillingStrategyUpdate {
	bsu.mutation.ResetNormalTimePrice()
	bsu.mutation.SetNormalTimePrice(i)
	return bsu
}

// SetNillableNormalTimePrice sets the "normal_time_price" field if the given value is not nil.
func (bsu *BillingStrategyUpdate) SetNillableNormalTimePrice(i *int) *BillingStrategyUpdate {
	if i != nil {
		bsu.SetNormalTimePrice(*i)
	}
	return bsu
}

// AddNormalTimePrice adds i to the "normal_time_price" field.
func (bsu *BillingStrategyUpdate) AddNormalTimePrice(i int) *BillingStrategyUpdate {
	bsu.mutation.AddNormalTimePrice(i)
	return bsu
}

// SetNormalTimeUnit sets the "normal_time_unit" field.
func (bsu *BillingStrategyUpdate) SetNormalTimeUnit(i int) *BillingStrategyUpdate {
	bsu.mutation.ResetNormalTimeUnit()
	bsu.mutation.SetNormalTimeUnit(i)
	return bsu
}

// SetNillableNormalTimeUnit sets the "normal_time_unit" field if the given value is not nil.
func (bsu *BillingStrategyUpdate) SetNillableNormalTimeUnit(i *int) *BillingStrategyUpdate {
	if i != nil {
		bsu.SetNormalTimeUnit(*i)
	}
	return bsu
}

// AddNormalTimeUnit adds i to the "normal_time_unit" field.
func (bsu *BillingStrategyUpdate) AddNormalTimeUnit(i int) *BillingStrategyUpdate {
	bsu.mutation.AddNormalTimeUnit(i)
	return bsu
}

// SetStartMileagePrice sets the "start_mileage_price" field.
func (bsu *BillingStrategyUpdate) SetStartMileagePrice(i int) *BillingStrategyUpdate {
	bsu.mutation.ResetStartMileagePrice()
	bsu.mutation.SetStartMileagePrice(i)
	return bsu
}

// SetNillableStartMileagePrice sets the "start_mileage_price" field if the given value is not nil.
func (bsu *BillingStrategyUpdate) SetNillableStartMileagePrice(i *int) *BillingStrategyUpdate {
	if i != nil {
		bsu.SetStartMileagePrice(*i)
	}
	return bsu
}

// AddStartMileagePrice adds i to the "start_mileage_price" field.
func (bsu *BillingStrategyUpdate) AddStartMileagePrice(i int) *BillingStrategyUpdate {
	bsu.mutation.AddStartMileagePrice(i)
	return bsu
}

// SetStartMileageUnit sets the "start_mileage_unit" field.
func (bsu *BillingStrategyUpdate) SetStartMileageUnit(i int) *BillingStrategyUpdate {
	bsu.mutation.ResetStartMileageUnit()
	bsu.mutation.SetStartMileageUnit(i)
	return bsu
}

// SetNillableStartMileageUnit sets the "start_mileage_unit" field if the given value is not nil.
func (bsu *BillingStrategyUpdate) SetNillableStartMileageUnit(i *int) *BillingStrategyUpdate {
	if i != nil {
		bsu.SetStartMileageUnit(*i)
	}
	return bsu
}

// AddStartMileageUnit adds i to the "start_mileage_unit" field.
func (bsu *BillingStrategyUpdate) AddStartMileageUnit(i int) *BillingStrategyUpdate {
	bsu.mutation.AddStartMileageUnit(i)
	return bsu
}

// SetNormalMileagePrice sets the "normal_mileage_price" field.
func (bsu *BillingStrategyUpdate) SetNormalMileagePrice(i int) *BillingStrategyUpdate {
	bsu.mutation.ResetNormalMileagePrice()
	bsu.mutation.SetNormalMileagePrice(i)
	return bsu
}

// SetNillableNormalMileagePrice sets the "normal_mileage_price" field if the given value is not nil.
func (bsu *BillingStrategyUpdate) SetNillableNormalMileagePrice(i *int) *BillingStrategyUpdate {
	if i != nil {
		bsu.SetNormalMileagePrice(*i)
	}
	return bsu
}

// AddNormalMileagePrice adds i to the "normal_mileage_price" field.
func (bsu *BillingStrategyUpdate) AddNormalMileagePrice(i int) *BillingStrategyUpdate {
	bsu.mutation.AddNormalMileagePrice(i)
	return bsu
}

// SetNormalMileageUnit sets the "normal_mileage_unit" field.
func (bsu *BillingStrategyUpdate) SetNormalMileageUnit(i int) *BillingStrategyUpdate {
	bsu.mutation.ResetNormalMileageUnit()
	bsu.mutation.SetNormalMileageUnit(i)
	return bsu
}

// SetNillableNormalMileageUnit sets the "normal_mileage_unit" field if the given value is not nil.
func (bsu *BillingStrategyUpdate) SetNillableNormalMileageUnit(i *int) *BillingStrategyUpdate {
	if i != nil {
		bsu.SetNormalMileageUnit(*i)
	}
	return bsu
}

// AddNormalMileageUnit adds i to the "normal_mileage_unit" field.
func (bsu *BillingStrategyUpdate) AddNormalMileageUnit(i int) *BillingStrategyUpdate {
	bsu.mutation.AddNormalMileageUnit(i)
	return bsu
}

// SetStartStopPrice sets the "start_stop_price" field.
func (bsu *BillingStrategyUpdate) SetStartStopPrice(i int) *BillingStrategyUpdate {
	bsu.mutation.ResetStartStopPrice()
	bsu.mutation.SetStartStopPrice(i)
	return bsu
}

// SetNillableStartStopPrice sets the "start_stop_price" field if the given value is not nil.
func (bsu *BillingStrategyUpdate) SetNillableStartStopPrice(i *int) *BillingStrategyUpdate {
	if i != nil {
		bsu.SetStartStopPrice(*i)
	}
	return bsu
}

// AddStartStopPrice adds i to the "start_stop_price" field.
func (bsu *BillingStrategyUpdate) AddStartStopPrice(i int) *BillingStrategyUpdate {
	bsu.mutation.AddStartStopPrice(i)
	return bsu
}

// SetStartStopUnit sets the "start_stop_unit" field.
func (bsu *BillingStrategyUpdate) SetStartStopUnit(i int) *BillingStrategyUpdate {
	bsu.mutation.ResetStartStopUnit()
	bsu.mutation.SetStartStopUnit(i)
	return bsu
}

// SetNillableStartStopUnit sets the "start_stop_unit" field if the given value is not nil.
func (bsu *BillingStrategyUpdate) SetNillableStartStopUnit(i *int) *BillingStrategyUpdate {
	if i != nil {
		bsu.SetStartStopUnit(*i)
	}
	return bsu
}

// AddStartStopUnit adds i to the "start_stop_unit" field.
func (bsu *BillingStrategyUpdate) AddStartStopUnit(i int) *BillingStrategyUpdate {
	bsu.mutation.AddStartStopUnit(i)
	return bsu
}

// SetNormalStopPrice sets the "normal_stop_price" field.
func (bsu *BillingStrategyUpdate) SetNormalStopPrice(i int) *BillingStrategyUpdate {
	bsu.mutation.ResetNormalStopPrice()
	bsu.mutation.SetNormalStopPrice(i)
	return bsu
}

// SetNillableNormalStopPrice sets the "normal_stop_price" field if the given value is not nil.
func (bsu *BillingStrategyUpdate) SetNillableNormalStopPrice(i *int) *BillingStrategyUpdate {
	if i != nil {
		bsu.SetNormalStopPrice(*i)
	}
	return bsu
}

// AddNormalStopPrice adds i to the "normal_stop_price" field.
func (bsu *BillingStrategyUpdate) AddNormalStopPrice(i int) *BillingStrategyUpdate {
	bsu.mutation.AddNormalStopPrice(i)
	return bsu
}

// SetNormalStopUnit sets the "normal_stop_unit" field.
func (bsu *BillingStrategyUpdate) SetNormalStopUnit(i int) *BillingStrategyUpdate {
	bsu.mutation.ResetNormalStopUnit()
	bsu.mutation.SetNormalStopUnit(i)
	return bsu
}

// SetNillableNormalStopUnit sets the "normal_stop_unit" field if the given value is not nil.
func (bsu *BillingStrategyUpdate) SetNillableNormalStopUnit(i *int) *BillingStrategyUpdate {
	if i != nil {
		bsu.SetNormalStopUnit(*i)
	}
	return bsu
}

// AddNormalStopUnit adds i to the "normal_stop_unit" field.
func (bsu *BillingStrategyUpdate) AddNormalStopUnit(i int) *BillingStrategyUpdate {
	bsu.mutation.AddNormalStopUnit(i)
	return bsu
}

// SetCappedAmount sets the "capped_amount" field.
func (bsu *BillingStrategyUpdate) SetCappedAmount(i int) *BillingStrategyUpdate {
	bsu.mutation.ResetCappedAmount()
	bsu.mutation.SetCappedAmount(i)
	return bsu
}

// SetNillableCappedAmount sets the "capped_amount" field if the given value is not nil.
func (bsu *BillingStrategyUpdate) SetNillableCappedAmount(i *int) *BillingStrategyUpdate {
	if i != nil {
		bsu.SetCappedAmount(*i)
	}
	return bsu
}

// AddCappedAmount adds i to the "capped_amount" field.
func (bsu *BillingStrategyUpdate) AddCappedAmount(i int) *BillingStrategyUpdate {
	bsu.mutation.AddCappedAmount(i)
	return bsu
}

// SetDepositAmount sets the "deposit_amount" field.
func (bsu *BillingStrategyUpdate) SetDepositAmount(i int) *BillingStrategyUpdate {
	bsu.mutation.ResetDepositAmount()
	bsu.mutation.SetDepositAmount(i)
	return bsu
}

// SetNillableDepositAmount sets the "deposit_amount" field if the given value is not nil.
func (bsu *BillingStrategyUpdate) SetNillableDepositAmount(i *int) *BillingStrategyUpdate {
	if i != nil {
		bsu.SetDepositAmount(*i)
	}
	return bsu
}

// AddDepositAmount adds i to the "deposit_amount" field.
func (bsu *BillingStrategyUpdate) AddDepositAmount(i int) *BillingStrategyUpdate {
	bsu.mutation.AddDepositAmount(i)
	return bsu
}

// SetUpdateTime sets the "update_time" field.
func (bsu *BillingStrategyUpdate) SetUpdateTime(t time.Time) *BillingStrategyUpdate {
	bsu.mutation.SetUpdateTime(t)
	return bsu
}

// SetBackgroundScenicAreaID sets the "background_scenic_area" edge to the ScenicArea entity by ID.
func (bsu *BillingStrategyUpdate) SetBackgroundScenicAreaID(id int) *BillingStrategyUpdate {
	bsu.mutation.SetBackgroundScenicAreaID(id)
	return bsu
}

// SetBackgroundScenicArea sets the "background_scenic_area" edge to the ScenicArea entity.
func (bsu *BillingStrategyUpdate) SetBackgroundScenicArea(s *ScenicArea) *BillingStrategyUpdate {
	return bsu.SetBackgroundScenicAreaID(s.ID)
}

// Mutation returns the BillingStrategyMutation object of the builder.
func (bsu *BillingStrategyUpdate) Mutation() *BillingStrategyMutation {
	return bsu.mutation
}

// ClearBackgroundScenicArea clears the "background_scenic_area" edge to the ScenicArea entity.
func (bsu *BillingStrategyUpdate) ClearBackgroundScenicArea() *BillingStrategyUpdate {
	bsu.mutation.ClearBackgroundScenicArea()
	return bsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bsu *BillingStrategyUpdate) Save(ctx context.Context) (int, error) {
	bsu.defaults()
	return withHooks(ctx, bsu.sqlSave, bsu.mutation, bsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bsu *BillingStrategyUpdate) SaveX(ctx context.Context) int {
	affected, err := bsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bsu *BillingStrategyUpdate) Exec(ctx context.Context) error {
	_, err := bsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bsu *BillingStrategyUpdate) ExecX(ctx context.Context) {
	if err := bsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bsu *BillingStrategyUpdate) defaults() {
	if _, ok := bsu.mutation.UpdateTime(); !ok {
		v := billingstrategy.UpdateDefaultUpdateTime()
		bsu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bsu *BillingStrategyUpdate) check() error {
	if bsu.mutation.BackgroundScenicAreaCleared() && len(bsu.mutation.BackgroundScenicAreaIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BillingStrategy.background_scenic_area"`)
	}
	return nil
}

func (bsu *BillingStrategyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(billingstrategy.Table, billingstrategy.Columns, sqlgraph.NewFieldSpec(billingstrategy.FieldID, field.TypeInt))
	if ps := bsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bsu.mutation.Name(); ok {
		_spec.SetField(billingstrategy.FieldName, field.TypeString, value)
	}
	if value, ok := bsu.mutation.ModelID(); ok {
		_spec.SetField(billingstrategy.FieldModelID, field.TypeInt, value)
	}
	if value, ok := bsu.mutation.AddedModelID(); ok {
		_spec.AddField(billingstrategy.FieldModelID, field.TypeInt, value)
	}
	if value, ok := bsu.mutation.MainMode(); ok {
		_spec.SetField(billingstrategy.FieldMainMode, field.TypeInt, value)
	}
	if value, ok := bsu.mutation.AddedMainMode(); ok {
		_spec.AddField(billingstrategy.FieldMainMode, field.TypeInt, value)
	}
	if value, ok := bsu.mutation.StartTimePrice(); ok {
		_spec.SetField(billingstrategy.FieldStartTimePrice, field.TypeInt, value)
	}
	if value, ok := bsu.mutation.AddedStartTimePrice(); ok {
		_spec.AddField(billingstrategy.FieldStartTimePrice, field.TypeInt, value)
	}
	if value, ok := bsu.mutation.StartTimeUnit(); ok {
		_spec.SetField(billingstrategy.FieldStartTimeUnit, field.TypeInt, value)
	}
	if value, ok := bsu.mutation.AddedStartTimeUnit(); ok {
		_spec.AddField(billingstrategy.FieldStartTimeUnit, field.TypeInt, value)
	}
	if value, ok := bsu.mutation.NormalTimePrice(); ok {
		_spec.SetField(billingstrategy.FieldNormalTimePrice, field.TypeInt, value)
	}
	if value, ok := bsu.mutation.AddedNormalTimePrice(); ok {
		_spec.AddField(billingstrategy.FieldNormalTimePrice, field.TypeInt, value)
	}
	if value, ok := bsu.mutation.NormalTimeUnit(); ok {
		_spec.SetField(billingstrategy.FieldNormalTimeUnit, field.TypeInt, value)
	}
	if value, ok := bsu.mutation.AddedNormalTimeUnit(); ok {
		_spec.AddField(billingstrategy.FieldNormalTimeUnit, field.TypeInt, value)
	}
	if value, ok := bsu.mutation.StartMileagePrice(); ok {
		_spec.SetField(billingstrategy.FieldStartMileagePrice, field.TypeInt, value)
	}
	if value, ok := bsu.mutation.AddedStartMileagePrice(); ok {
		_spec.AddField(billingstrategy.FieldStartMileagePrice, field.TypeInt, value)
	}
	if value, ok := bsu.mutation.StartMileageUnit(); ok {
		_spec.SetField(billingstrategy.FieldStartMileageUnit, field.TypeInt, value)
	}
	if value, ok := bsu.mutation.AddedStartMileageUnit(); ok {
		_spec.AddField(billingstrategy.FieldStartMileageUnit, field.TypeInt, value)
	}
	if value, ok := bsu.mutation.NormalMileagePrice(); ok {
		_spec.SetField(billingstrategy.FieldNormalMileagePrice, field.TypeInt, value)
	}
	if value, ok := bsu.mutation.AddedNormalMileagePrice(); ok {
		_spec.AddField(billingstrategy.FieldNormalMileagePrice, field.TypeInt, value)
	}
	if value, ok := bsu.mutation.NormalMileageUnit(); ok {
		_spec.SetField(billingstrategy.FieldNormalMileageUnit, field.TypeInt, value)
	}
	if value, ok := bsu.mutation.AddedNormalMileageUnit(); ok {
		_spec.AddField(billingstrategy.FieldNormalMileageUnit, field.TypeInt, value)
	}
	if value, ok := bsu.mutation.StartStopPrice(); ok {
		_spec.SetField(billingstrategy.FieldStartStopPrice, field.TypeInt, value)
	}
	if value, ok := bsu.mutation.AddedStartStopPrice(); ok {
		_spec.AddField(billingstrategy.FieldStartStopPrice, field.TypeInt, value)
	}
	if value, ok := bsu.mutation.StartStopUnit(); ok {
		_spec.SetField(billingstrategy.FieldStartStopUnit, field.TypeInt, value)
	}
	if value, ok := bsu.mutation.AddedStartStopUnit(); ok {
		_spec.AddField(billingstrategy.FieldStartStopUnit, field.TypeInt, value)
	}
	if value, ok := bsu.mutation.NormalStopPrice(); ok {
		_spec.SetField(billingstrategy.FieldNormalStopPrice, field.TypeInt, value)
	}
	if value, ok := bsu.mutation.AddedNormalStopPrice(); ok {
		_spec.AddField(billingstrategy.FieldNormalStopPrice, field.TypeInt, value)
	}
	if value, ok := bsu.mutation.NormalStopUnit(); ok {
		_spec.SetField(billingstrategy.FieldNormalStopUnit, field.TypeInt, value)
	}
	if value, ok := bsu.mutation.AddedNormalStopUnit(); ok {
		_spec.AddField(billingstrategy.FieldNormalStopUnit, field.TypeInt, value)
	}
	if value, ok := bsu.mutation.CappedAmount(); ok {
		_spec.SetField(billingstrategy.FieldCappedAmount, field.TypeInt, value)
	}
	if value, ok := bsu.mutation.AddedCappedAmount(); ok {
		_spec.AddField(billingstrategy.FieldCappedAmount, field.TypeInt, value)
	}
	if value, ok := bsu.mutation.DepositAmount(); ok {
		_spec.SetField(billingstrategy.FieldDepositAmount, field.TypeInt, value)
	}
	if value, ok := bsu.mutation.AddedDepositAmount(); ok {
		_spec.AddField(billingstrategy.FieldDepositAmount, field.TypeInt, value)
	}
	if value, ok := bsu.mutation.UpdateTime(); ok {
		_spec.SetField(billingstrategy.FieldUpdateTime, field.TypeTime, value)
	}
	if bsu.mutation.BackgroundScenicAreaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billingstrategy.BackgroundScenicAreaTable,
			Columns: []string{billingstrategy.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bsu.mutation.BackgroundScenicAreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billingstrategy.BackgroundScenicAreaTable,
			Columns: []string{billingstrategy.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billingstrategy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bsu.mutation.done = true
	return n, nil
}

// BillingStrategyUpdateOne is the builder for updating a single BillingStrategy entity.
type BillingStrategyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BillingStrategyMutation
}

// SetName sets the "name" field.
func (bsuo *BillingStrategyUpdateOne) SetName(s string) *BillingStrategyUpdateOne {
	bsuo.mutation.SetName(s)
	return bsuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (bsuo *BillingStrategyUpdateOne) SetNillableName(s *string) *BillingStrategyUpdateOne {
	if s != nil {
		bsuo.SetName(*s)
	}
	return bsuo
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (bsuo *BillingStrategyUpdateOne) SetScenicAreaID(i int) *BillingStrategyUpdateOne {
	bsuo.mutation.SetScenicAreaID(i)
	return bsuo
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (bsuo *BillingStrategyUpdateOne) SetNillableScenicAreaID(i *int) *BillingStrategyUpdateOne {
	if i != nil {
		bsuo.SetScenicAreaID(*i)
	}
	return bsuo
}

// SetModelID sets the "model_id" field.
func (bsuo *BillingStrategyUpdateOne) SetModelID(i int) *BillingStrategyUpdateOne {
	bsuo.mutation.ResetModelID()
	bsuo.mutation.SetModelID(i)
	return bsuo
}

// SetNillableModelID sets the "model_id" field if the given value is not nil.
func (bsuo *BillingStrategyUpdateOne) SetNillableModelID(i *int) *BillingStrategyUpdateOne {
	if i != nil {
		bsuo.SetModelID(*i)
	}
	return bsuo
}

// AddModelID adds i to the "model_id" field.
func (bsuo *BillingStrategyUpdateOne) AddModelID(i int) *BillingStrategyUpdateOne {
	bsuo.mutation.AddModelID(i)
	return bsuo
}

// SetMainMode sets the "main_mode" field.
func (bsuo *BillingStrategyUpdateOne) SetMainMode(i int) *BillingStrategyUpdateOne {
	bsuo.mutation.ResetMainMode()
	bsuo.mutation.SetMainMode(i)
	return bsuo
}

// SetNillableMainMode sets the "main_mode" field if the given value is not nil.
func (bsuo *BillingStrategyUpdateOne) SetNillableMainMode(i *int) *BillingStrategyUpdateOne {
	if i != nil {
		bsuo.SetMainMode(*i)
	}
	return bsuo
}

// AddMainMode adds i to the "main_mode" field.
func (bsuo *BillingStrategyUpdateOne) AddMainMode(i int) *BillingStrategyUpdateOne {
	bsuo.mutation.AddMainMode(i)
	return bsuo
}

// SetStartTimePrice sets the "start_time_price" field.
func (bsuo *BillingStrategyUpdateOne) SetStartTimePrice(i int) *BillingStrategyUpdateOne {
	bsuo.mutation.ResetStartTimePrice()
	bsuo.mutation.SetStartTimePrice(i)
	return bsuo
}

// SetNillableStartTimePrice sets the "start_time_price" field if the given value is not nil.
func (bsuo *BillingStrategyUpdateOne) SetNillableStartTimePrice(i *int) *BillingStrategyUpdateOne {
	if i != nil {
		bsuo.SetStartTimePrice(*i)
	}
	return bsuo
}

// AddStartTimePrice adds i to the "start_time_price" field.
func (bsuo *BillingStrategyUpdateOne) AddStartTimePrice(i int) *BillingStrategyUpdateOne {
	bsuo.mutation.AddStartTimePrice(i)
	return bsuo
}

// SetStartTimeUnit sets the "start_time_unit" field.
func (bsuo *BillingStrategyUpdateOne) SetStartTimeUnit(i int) *BillingStrategyUpdateOne {
	bsuo.mutation.ResetStartTimeUnit()
	bsuo.mutation.SetStartTimeUnit(i)
	return bsuo
}

// SetNillableStartTimeUnit sets the "start_time_unit" field if the given value is not nil.
func (bsuo *BillingStrategyUpdateOne) SetNillableStartTimeUnit(i *int) *BillingStrategyUpdateOne {
	if i != nil {
		bsuo.SetStartTimeUnit(*i)
	}
	return bsuo
}

// AddStartTimeUnit adds i to the "start_time_unit" field.
func (bsuo *BillingStrategyUpdateOne) AddStartTimeUnit(i int) *BillingStrategyUpdateOne {
	bsuo.mutation.AddStartTimeUnit(i)
	return bsuo
}

// SetNormalTimePrice sets the "normal_time_price" field.
func (bsuo *BillingStrategyUpdateOne) SetNormalTimePrice(i int) *BillingStrategyUpdateOne {
	bsuo.mutation.ResetNormalTimePrice()
	bsuo.mutation.SetNormalTimePrice(i)
	return bsuo
}

// SetNillableNormalTimePrice sets the "normal_time_price" field if the given value is not nil.
func (bsuo *BillingStrategyUpdateOne) SetNillableNormalTimePrice(i *int) *BillingStrategyUpdateOne {
	if i != nil {
		bsuo.SetNormalTimePrice(*i)
	}
	return bsuo
}

// AddNormalTimePrice adds i to the "normal_time_price" field.
func (bsuo *BillingStrategyUpdateOne) AddNormalTimePrice(i int) *BillingStrategyUpdateOne {
	bsuo.mutation.AddNormalTimePrice(i)
	return bsuo
}

// SetNormalTimeUnit sets the "normal_time_unit" field.
func (bsuo *BillingStrategyUpdateOne) SetNormalTimeUnit(i int) *BillingStrategyUpdateOne {
	bsuo.mutation.ResetNormalTimeUnit()
	bsuo.mutation.SetNormalTimeUnit(i)
	return bsuo
}

// SetNillableNormalTimeUnit sets the "normal_time_unit" field if the given value is not nil.
func (bsuo *BillingStrategyUpdateOne) SetNillableNormalTimeUnit(i *int) *BillingStrategyUpdateOne {
	if i != nil {
		bsuo.SetNormalTimeUnit(*i)
	}
	return bsuo
}

// AddNormalTimeUnit adds i to the "normal_time_unit" field.
func (bsuo *BillingStrategyUpdateOne) AddNormalTimeUnit(i int) *BillingStrategyUpdateOne {
	bsuo.mutation.AddNormalTimeUnit(i)
	return bsuo
}

// SetStartMileagePrice sets the "start_mileage_price" field.
func (bsuo *BillingStrategyUpdateOne) SetStartMileagePrice(i int) *BillingStrategyUpdateOne {
	bsuo.mutation.ResetStartMileagePrice()
	bsuo.mutation.SetStartMileagePrice(i)
	return bsuo
}

// SetNillableStartMileagePrice sets the "start_mileage_price" field if the given value is not nil.
func (bsuo *BillingStrategyUpdateOne) SetNillableStartMileagePrice(i *int) *BillingStrategyUpdateOne {
	if i != nil {
		bsuo.SetStartMileagePrice(*i)
	}
	return bsuo
}

// AddStartMileagePrice adds i to the "start_mileage_price" field.
func (bsuo *BillingStrategyUpdateOne) AddStartMileagePrice(i int) *BillingStrategyUpdateOne {
	bsuo.mutation.AddStartMileagePrice(i)
	return bsuo
}

// SetStartMileageUnit sets the "start_mileage_unit" field.
func (bsuo *BillingStrategyUpdateOne) SetStartMileageUnit(i int) *BillingStrategyUpdateOne {
	bsuo.mutation.ResetStartMileageUnit()
	bsuo.mutation.SetStartMileageUnit(i)
	return bsuo
}

// SetNillableStartMileageUnit sets the "start_mileage_unit" field if the given value is not nil.
func (bsuo *BillingStrategyUpdateOne) SetNillableStartMileageUnit(i *int) *BillingStrategyUpdateOne {
	if i != nil {
		bsuo.SetStartMileageUnit(*i)
	}
	return bsuo
}

// AddStartMileageUnit adds i to the "start_mileage_unit" field.
func (bsuo *BillingStrategyUpdateOne) AddStartMileageUnit(i int) *BillingStrategyUpdateOne {
	bsuo.mutation.AddStartMileageUnit(i)
	return bsuo
}

// SetNormalMileagePrice sets the "normal_mileage_price" field.
func (bsuo *BillingStrategyUpdateOne) SetNormalMileagePrice(i int) *BillingStrategyUpdateOne {
	bsuo.mutation.ResetNormalMileagePrice()
	bsuo.mutation.SetNormalMileagePrice(i)
	return bsuo
}

// SetNillableNormalMileagePrice sets the "normal_mileage_price" field if the given value is not nil.
func (bsuo *BillingStrategyUpdateOne) SetNillableNormalMileagePrice(i *int) *BillingStrategyUpdateOne {
	if i != nil {
		bsuo.SetNormalMileagePrice(*i)
	}
	return bsuo
}

// AddNormalMileagePrice adds i to the "normal_mileage_price" field.
func (bsuo *BillingStrategyUpdateOne) AddNormalMileagePrice(i int) *BillingStrategyUpdateOne {
	bsuo.mutation.AddNormalMileagePrice(i)
	return bsuo
}

// SetNormalMileageUnit sets the "normal_mileage_unit" field.
func (bsuo *BillingStrategyUpdateOne) SetNormalMileageUnit(i int) *BillingStrategyUpdateOne {
	bsuo.mutation.ResetNormalMileageUnit()
	bsuo.mutation.SetNormalMileageUnit(i)
	return bsuo
}

// SetNillableNormalMileageUnit sets the "normal_mileage_unit" field if the given value is not nil.
func (bsuo *BillingStrategyUpdateOne) SetNillableNormalMileageUnit(i *int) *BillingStrategyUpdateOne {
	if i != nil {
		bsuo.SetNormalMileageUnit(*i)
	}
	return bsuo
}

// AddNormalMileageUnit adds i to the "normal_mileage_unit" field.
func (bsuo *BillingStrategyUpdateOne) AddNormalMileageUnit(i int) *BillingStrategyUpdateOne {
	bsuo.mutation.AddNormalMileageUnit(i)
	return bsuo
}

// SetStartStopPrice sets the "start_stop_price" field.
func (bsuo *BillingStrategyUpdateOne) SetStartStopPrice(i int) *BillingStrategyUpdateOne {
	bsuo.mutation.ResetStartStopPrice()
	bsuo.mutation.SetStartStopPrice(i)
	return bsuo
}

// SetNillableStartStopPrice sets the "start_stop_price" field if the given value is not nil.
func (bsuo *BillingStrategyUpdateOne) SetNillableStartStopPrice(i *int) *BillingStrategyUpdateOne {
	if i != nil {
		bsuo.SetStartStopPrice(*i)
	}
	return bsuo
}

// AddStartStopPrice adds i to the "start_stop_price" field.
func (bsuo *BillingStrategyUpdateOne) AddStartStopPrice(i int) *BillingStrategyUpdateOne {
	bsuo.mutation.AddStartStopPrice(i)
	return bsuo
}

// SetStartStopUnit sets the "start_stop_unit" field.
func (bsuo *BillingStrategyUpdateOne) SetStartStopUnit(i int) *BillingStrategyUpdateOne {
	bsuo.mutation.ResetStartStopUnit()
	bsuo.mutation.SetStartStopUnit(i)
	return bsuo
}

// SetNillableStartStopUnit sets the "start_stop_unit" field if the given value is not nil.
func (bsuo *BillingStrategyUpdateOne) SetNillableStartStopUnit(i *int) *BillingStrategyUpdateOne {
	if i != nil {
		bsuo.SetStartStopUnit(*i)
	}
	return bsuo
}

// AddStartStopUnit adds i to the "start_stop_unit" field.
func (bsuo *BillingStrategyUpdateOne) AddStartStopUnit(i int) *BillingStrategyUpdateOne {
	bsuo.mutation.AddStartStopUnit(i)
	return bsuo
}

// SetNormalStopPrice sets the "normal_stop_price" field.
func (bsuo *BillingStrategyUpdateOne) SetNormalStopPrice(i int) *BillingStrategyUpdateOne {
	bsuo.mutation.ResetNormalStopPrice()
	bsuo.mutation.SetNormalStopPrice(i)
	return bsuo
}

// SetNillableNormalStopPrice sets the "normal_stop_price" field if the given value is not nil.
func (bsuo *BillingStrategyUpdateOne) SetNillableNormalStopPrice(i *int) *BillingStrategyUpdateOne {
	if i != nil {
		bsuo.SetNormalStopPrice(*i)
	}
	return bsuo
}

// AddNormalStopPrice adds i to the "normal_stop_price" field.
func (bsuo *BillingStrategyUpdateOne) AddNormalStopPrice(i int) *BillingStrategyUpdateOne {
	bsuo.mutation.AddNormalStopPrice(i)
	return bsuo
}

// SetNormalStopUnit sets the "normal_stop_unit" field.
func (bsuo *BillingStrategyUpdateOne) SetNormalStopUnit(i int) *BillingStrategyUpdateOne {
	bsuo.mutation.ResetNormalStopUnit()
	bsuo.mutation.SetNormalStopUnit(i)
	return bsuo
}

// SetNillableNormalStopUnit sets the "normal_stop_unit" field if the given value is not nil.
func (bsuo *BillingStrategyUpdateOne) SetNillableNormalStopUnit(i *int) *BillingStrategyUpdateOne {
	if i != nil {
		bsuo.SetNormalStopUnit(*i)
	}
	return bsuo
}

// AddNormalStopUnit adds i to the "normal_stop_unit" field.
func (bsuo *BillingStrategyUpdateOne) AddNormalStopUnit(i int) *BillingStrategyUpdateOne {
	bsuo.mutation.AddNormalStopUnit(i)
	return bsuo
}

// SetCappedAmount sets the "capped_amount" field.
func (bsuo *BillingStrategyUpdateOne) SetCappedAmount(i int) *BillingStrategyUpdateOne {
	bsuo.mutation.ResetCappedAmount()
	bsuo.mutation.SetCappedAmount(i)
	return bsuo
}

// SetNillableCappedAmount sets the "capped_amount" field if the given value is not nil.
func (bsuo *BillingStrategyUpdateOne) SetNillableCappedAmount(i *int) *BillingStrategyUpdateOne {
	if i != nil {
		bsuo.SetCappedAmount(*i)
	}
	return bsuo
}

// AddCappedAmount adds i to the "capped_amount" field.
func (bsuo *BillingStrategyUpdateOne) AddCappedAmount(i int) *BillingStrategyUpdateOne {
	bsuo.mutation.AddCappedAmount(i)
	return bsuo
}

// SetDepositAmount sets the "deposit_amount" field.
func (bsuo *BillingStrategyUpdateOne) SetDepositAmount(i int) *BillingStrategyUpdateOne {
	bsuo.mutation.ResetDepositAmount()
	bsuo.mutation.SetDepositAmount(i)
	return bsuo
}

// SetNillableDepositAmount sets the "deposit_amount" field if the given value is not nil.
func (bsuo *BillingStrategyUpdateOne) SetNillableDepositAmount(i *int) *BillingStrategyUpdateOne {
	if i != nil {
		bsuo.SetDepositAmount(*i)
	}
	return bsuo
}

// AddDepositAmount adds i to the "deposit_amount" field.
func (bsuo *BillingStrategyUpdateOne) AddDepositAmount(i int) *BillingStrategyUpdateOne {
	bsuo.mutation.AddDepositAmount(i)
	return bsuo
}

// SetUpdateTime sets the "update_time" field.
func (bsuo *BillingStrategyUpdateOne) SetUpdateTime(t time.Time) *BillingStrategyUpdateOne {
	bsuo.mutation.SetUpdateTime(t)
	return bsuo
}

// SetBackgroundScenicAreaID sets the "background_scenic_area" edge to the ScenicArea entity by ID.
func (bsuo *BillingStrategyUpdateOne) SetBackgroundScenicAreaID(id int) *BillingStrategyUpdateOne {
	bsuo.mutation.SetBackgroundScenicAreaID(id)
	return bsuo
}

// SetBackgroundScenicArea sets the "background_scenic_area" edge to the ScenicArea entity.
func (bsuo *BillingStrategyUpdateOne) SetBackgroundScenicArea(s *ScenicArea) *BillingStrategyUpdateOne {
	return bsuo.SetBackgroundScenicAreaID(s.ID)
}

// Mutation returns the BillingStrategyMutation object of the builder.
func (bsuo *BillingStrategyUpdateOne) Mutation() *BillingStrategyMutation {
	return bsuo.mutation
}

// ClearBackgroundScenicArea clears the "background_scenic_area" edge to the ScenicArea entity.
func (bsuo *BillingStrategyUpdateOne) ClearBackgroundScenicArea() *BillingStrategyUpdateOne {
	bsuo.mutation.ClearBackgroundScenicArea()
	return bsuo
}

// Where appends a list predicates to the BillingStrategyUpdate builder.
func (bsuo *BillingStrategyUpdateOne) Where(ps ...predicate.BillingStrategy) *BillingStrategyUpdateOne {
	bsuo.mutation.Where(ps...)
	return bsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bsuo *BillingStrategyUpdateOne) Select(field string, fields ...string) *BillingStrategyUpdateOne {
	bsuo.fields = append([]string{field}, fields...)
	return bsuo
}

// Save executes the query and returns the updated BillingStrategy entity.
func (bsuo *BillingStrategyUpdateOne) Save(ctx context.Context) (*BillingStrategy, error) {
	bsuo.defaults()
	return withHooks(ctx, bsuo.sqlSave, bsuo.mutation, bsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bsuo *BillingStrategyUpdateOne) SaveX(ctx context.Context) *BillingStrategy {
	node, err := bsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bsuo *BillingStrategyUpdateOne) Exec(ctx context.Context) error {
	_, err := bsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bsuo *BillingStrategyUpdateOne) ExecX(ctx context.Context) {
	if err := bsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bsuo *BillingStrategyUpdateOne) defaults() {
	if _, ok := bsuo.mutation.UpdateTime(); !ok {
		v := billingstrategy.UpdateDefaultUpdateTime()
		bsuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bsuo *BillingStrategyUpdateOne) check() error {
	if bsuo.mutation.BackgroundScenicAreaCleared() && len(bsuo.mutation.BackgroundScenicAreaIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BillingStrategy.background_scenic_area"`)
	}
	return nil
}

func (bsuo *BillingStrategyUpdateOne) sqlSave(ctx context.Context) (_node *BillingStrategy, err error) {
	if err := bsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(billingstrategy.Table, billingstrategy.Columns, sqlgraph.NewFieldSpec(billingstrategy.FieldID, field.TypeInt))
	id, ok := bsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BillingStrategy.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, billingstrategy.FieldID)
		for _, f := range fields {
			if !billingstrategy.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != billingstrategy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bsuo.mutation.Name(); ok {
		_spec.SetField(billingstrategy.FieldName, field.TypeString, value)
	}
	if value, ok := bsuo.mutation.ModelID(); ok {
		_spec.SetField(billingstrategy.FieldModelID, field.TypeInt, value)
	}
	if value, ok := bsuo.mutation.AddedModelID(); ok {
		_spec.AddField(billingstrategy.FieldModelID, field.TypeInt, value)
	}
	if value, ok := bsuo.mutation.MainMode(); ok {
		_spec.SetField(billingstrategy.FieldMainMode, field.TypeInt, value)
	}
	if value, ok := bsuo.mutation.AddedMainMode(); ok {
		_spec.AddField(billingstrategy.FieldMainMode, field.TypeInt, value)
	}
	if value, ok := bsuo.mutation.StartTimePrice(); ok {
		_spec.SetField(billingstrategy.FieldStartTimePrice, field.TypeInt, value)
	}
	if value, ok := bsuo.mutation.AddedStartTimePrice(); ok {
		_spec.AddField(billingstrategy.FieldStartTimePrice, field.TypeInt, value)
	}
	if value, ok := bsuo.mutation.StartTimeUnit(); ok {
		_spec.SetField(billingstrategy.FieldStartTimeUnit, field.TypeInt, value)
	}
	if value, ok := bsuo.mutation.AddedStartTimeUnit(); ok {
		_spec.AddField(billingstrategy.FieldStartTimeUnit, field.TypeInt, value)
	}
	if value, ok := bsuo.mutation.NormalTimePrice(); ok {
		_spec.SetField(billingstrategy.FieldNormalTimePrice, field.TypeInt, value)
	}
	if value, ok := bsuo.mutation.AddedNormalTimePrice(); ok {
		_spec.AddField(billingstrategy.FieldNormalTimePrice, field.TypeInt, value)
	}
	if value, ok := bsuo.mutation.NormalTimeUnit(); ok {
		_spec.SetField(billingstrategy.FieldNormalTimeUnit, field.TypeInt, value)
	}
	if value, ok := bsuo.mutation.AddedNormalTimeUnit(); ok {
		_spec.AddField(billingstrategy.FieldNormalTimeUnit, field.TypeInt, value)
	}
	if value, ok := bsuo.mutation.StartMileagePrice(); ok {
		_spec.SetField(billingstrategy.FieldStartMileagePrice, field.TypeInt, value)
	}
	if value, ok := bsuo.mutation.AddedStartMileagePrice(); ok {
		_spec.AddField(billingstrategy.FieldStartMileagePrice, field.TypeInt, value)
	}
	if value, ok := bsuo.mutation.StartMileageUnit(); ok {
		_spec.SetField(billingstrategy.FieldStartMileageUnit, field.TypeInt, value)
	}
	if value, ok := bsuo.mutation.AddedStartMileageUnit(); ok {
		_spec.AddField(billingstrategy.FieldStartMileageUnit, field.TypeInt, value)
	}
	if value, ok := bsuo.mutation.NormalMileagePrice(); ok {
		_spec.SetField(billingstrategy.FieldNormalMileagePrice, field.TypeInt, value)
	}
	if value, ok := bsuo.mutation.AddedNormalMileagePrice(); ok {
		_spec.AddField(billingstrategy.FieldNormalMileagePrice, field.TypeInt, value)
	}
	if value, ok := bsuo.mutation.NormalMileageUnit(); ok {
		_spec.SetField(billingstrategy.FieldNormalMileageUnit, field.TypeInt, value)
	}
	if value, ok := bsuo.mutation.AddedNormalMileageUnit(); ok {
		_spec.AddField(billingstrategy.FieldNormalMileageUnit, field.TypeInt, value)
	}
	if value, ok := bsuo.mutation.StartStopPrice(); ok {
		_spec.SetField(billingstrategy.FieldStartStopPrice, field.TypeInt, value)
	}
	if value, ok := bsuo.mutation.AddedStartStopPrice(); ok {
		_spec.AddField(billingstrategy.FieldStartStopPrice, field.TypeInt, value)
	}
	if value, ok := bsuo.mutation.StartStopUnit(); ok {
		_spec.SetField(billingstrategy.FieldStartStopUnit, field.TypeInt, value)
	}
	if value, ok := bsuo.mutation.AddedStartStopUnit(); ok {
		_spec.AddField(billingstrategy.FieldStartStopUnit, field.TypeInt, value)
	}
	if value, ok := bsuo.mutation.NormalStopPrice(); ok {
		_spec.SetField(billingstrategy.FieldNormalStopPrice, field.TypeInt, value)
	}
	if value, ok := bsuo.mutation.AddedNormalStopPrice(); ok {
		_spec.AddField(billingstrategy.FieldNormalStopPrice, field.TypeInt, value)
	}
	if value, ok := bsuo.mutation.NormalStopUnit(); ok {
		_spec.SetField(billingstrategy.FieldNormalStopUnit, field.TypeInt, value)
	}
	if value, ok := bsuo.mutation.AddedNormalStopUnit(); ok {
		_spec.AddField(billingstrategy.FieldNormalStopUnit, field.TypeInt, value)
	}
	if value, ok := bsuo.mutation.CappedAmount(); ok {
		_spec.SetField(billingstrategy.FieldCappedAmount, field.TypeInt, value)
	}
	if value, ok := bsuo.mutation.AddedCappedAmount(); ok {
		_spec.AddField(billingstrategy.FieldCappedAmount, field.TypeInt, value)
	}
	if value, ok := bsuo.mutation.DepositAmount(); ok {
		_spec.SetField(billingstrategy.FieldDepositAmount, field.TypeInt, value)
	}
	if value, ok := bsuo.mutation.AddedDepositAmount(); ok {
		_spec.AddField(billingstrategy.FieldDepositAmount, field.TypeInt, value)
	}
	if value, ok := bsuo.mutation.UpdateTime(); ok {
		_spec.SetField(billingstrategy.FieldUpdateTime, field.TypeTime, value)
	}
	if bsuo.mutation.BackgroundScenicAreaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billingstrategy.BackgroundScenicAreaTable,
			Columns: []string{billingstrategy.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bsuo.mutation.BackgroundScenicAreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billingstrategy.BackgroundScenicAreaTable,
			Columns: []string{billingstrategy.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BillingStrategy{config: bsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billingstrategy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bsuo.mutation.done = true
	return _node, nil
}
