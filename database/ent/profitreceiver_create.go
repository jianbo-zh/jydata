// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/profitreceiver"
	"github.com/jianbo-zh/jydata/database/ent/scenicarea"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProfitReceiverCreate is the builder for creating a ProfitReceiver entity.
type ProfitReceiverCreate struct {
	config
	mutation *ProfitReceiverMutation
	hooks    []Hook
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (prc *ProfitReceiverCreate) SetScenicAreaID(i int) *ProfitReceiverCreate {
	prc.mutation.SetScenicAreaID(i)
	return prc
}

// SetMchID sets the "mch_id" field.
func (prc *ProfitReceiverCreate) SetMchID(s string) *ProfitReceiverCreate {
	prc.mutation.SetMchID(s)
	return prc
}

// SetNillableMchID sets the "mch_id" field if the given value is not nil.
func (prc *ProfitReceiverCreate) SetNillableMchID(s *string) *ProfitReceiverCreate {
	if s != nil {
		prc.SetMchID(*s)
	}
	return prc
}

// SetPhone sets the "phone" field.
func (prc *ProfitReceiverCreate) SetPhone(s string) *ProfitReceiverCreate {
	prc.mutation.SetPhone(s)
	return prc
}

// SetReceiverType sets the "receiver_type" field.
func (prc *ProfitReceiverCreate) SetReceiverType(i int) *ProfitReceiverCreate {
	prc.mutation.SetReceiverType(i)
	return prc
}

// SetReceiverAccount sets the "receiver_account" field.
func (prc *ProfitReceiverCreate) SetReceiverAccount(s string) *ProfitReceiverCreate {
	prc.mutation.SetReceiverAccount(s)
	return prc
}

// SetReceiverName sets the "receiver_name" field.
func (prc *ProfitReceiverCreate) SetReceiverName(s string) *ProfitReceiverCreate {
	prc.mutation.SetReceiverName(s)
	return prc
}

// SetSharingRatio sets the "sharing_ratio" field.
func (prc *ProfitReceiverCreate) SetSharingRatio(f float64) *ProfitReceiverCreate {
	prc.mutation.SetSharingRatio(f)
	return prc
}

// SetNillableSharingRatio sets the "sharing_ratio" field if the given value is not nil.
func (prc *ProfitReceiverCreate) SetNillableSharingRatio(f *float64) *ProfitReceiverCreate {
	if f != nil {
		prc.SetSharingRatio(*f)
	}
	return prc
}

// SetState sets the "state" field.
func (prc *ProfitReceiverCreate) SetState(i int) *ProfitReceiverCreate {
	prc.mutation.SetState(i)
	return prc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (prc *ProfitReceiverCreate) SetNillableState(i *int) *ProfitReceiverCreate {
	if i != nil {
		prc.SetState(*i)
	}
	return prc
}

// SetCreateTime sets the "create_time" field.
func (prc *ProfitReceiverCreate) SetCreateTime(t time.Time) *ProfitReceiverCreate {
	prc.mutation.SetCreateTime(t)
	return prc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (prc *ProfitReceiverCreate) SetNillableCreateTime(t *time.Time) *ProfitReceiverCreate {
	if t != nil {
		prc.SetCreateTime(*t)
	}
	return prc
}

// SetUpdateTime sets the "update_time" field.
func (prc *ProfitReceiverCreate) SetUpdateTime(t time.Time) *ProfitReceiverCreate {
	prc.mutation.SetUpdateTime(t)
	return prc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (prc *ProfitReceiverCreate) SetNillableUpdateTime(t *time.Time) *ProfitReceiverCreate {
	if t != nil {
		prc.SetUpdateTime(*t)
	}
	return prc
}

// SetID sets the "id" field.
func (prc *ProfitReceiverCreate) SetID(i int) *ProfitReceiverCreate {
	prc.mutation.SetID(i)
	return prc
}

// SetBackgroundScenicAreaID sets the "background_scenic_area" edge to the ScenicArea entity by ID.
func (prc *ProfitReceiverCreate) SetBackgroundScenicAreaID(id int) *ProfitReceiverCreate {
	prc.mutation.SetBackgroundScenicAreaID(id)
	return prc
}

// SetBackgroundScenicArea sets the "background_scenic_area" edge to the ScenicArea entity.
func (prc *ProfitReceiverCreate) SetBackgroundScenicArea(s *ScenicArea) *ProfitReceiverCreate {
	return prc.SetBackgroundScenicAreaID(s.ID)
}

// Mutation returns the ProfitReceiverMutation object of the builder.
func (prc *ProfitReceiverCreate) Mutation() *ProfitReceiverMutation {
	return prc.mutation
}

// Save creates the ProfitReceiver in the database.
func (prc *ProfitReceiverCreate) Save(ctx context.Context) (*ProfitReceiver, error) {
	prc.defaults()
	return withHooks(ctx, prc.sqlSave, prc.mutation, prc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (prc *ProfitReceiverCreate) SaveX(ctx context.Context) *ProfitReceiver {
	v, err := prc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prc *ProfitReceiverCreate) Exec(ctx context.Context) error {
	_, err := prc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prc *ProfitReceiverCreate) ExecX(ctx context.Context) {
	if err := prc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (prc *ProfitReceiverCreate) defaults() {
	if _, ok := prc.mutation.MchID(); !ok {
		v := profitreceiver.DefaultMchID
		prc.mutation.SetMchID(v)
	}
	if _, ok := prc.mutation.SharingRatio(); !ok {
		v := profitreceiver.DefaultSharingRatio
		prc.mutation.SetSharingRatio(v)
	}
	if _, ok := prc.mutation.State(); !ok {
		v := profitreceiver.DefaultState
		prc.mutation.SetState(v)
	}
	if _, ok := prc.mutation.CreateTime(); !ok {
		v := profitreceiver.DefaultCreateTime()
		prc.mutation.SetCreateTime(v)
	}
	if _, ok := prc.mutation.UpdateTime(); !ok {
		v := profitreceiver.DefaultUpdateTime()
		prc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (prc *ProfitReceiverCreate) check() error {
	if _, ok := prc.mutation.ScenicAreaID(); !ok {
		return &ValidationError{Name: "scenic_area_id", err: errors.New(`ent: missing required field "ProfitReceiver.scenic_area_id"`)}
	}
	if _, ok := prc.mutation.MchID(); !ok {
		return &ValidationError{Name: "mch_id", err: errors.New(`ent: missing required field "ProfitReceiver.mch_id"`)}
	}
	if _, ok := prc.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`ent: missing required field "ProfitReceiver.phone"`)}
	}
	if _, ok := prc.mutation.ReceiverType(); !ok {
		return &ValidationError{Name: "receiver_type", err: errors.New(`ent: missing required field "ProfitReceiver.receiver_type"`)}
	}
	if _, ok := prc.mutation.ReceiverAccount(); !ok {
		return &ValidationError{Name: "receiver_account", err: errors.New(`ent: missing required field "ProfitReceiver.receiver_account"`)}
	}
	if _, ok := prc.mutation.ReceiverName(); !ok {
		return &ValidationError{Name: "receiver_name", err: errors.New(`ent: missing required field "ProfitReceiver.receiver_name"`)}
	}
	if _, ok := prc.mutation.SharingRatio(); !ok {
		return &ValidationError{Name: "sharing_ratio", err: errors.New(`ent: missing required field "ProfitReceiver.sharing_ratio"`)}
	}
	if _, ok := prc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "ProfitReceiver.state"`)}
	}
	if _, ok := prc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "ProfitReceiver.create_time"`)}
	}
	if _, ok := prc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "ProfitReceiver.update_time"`)}
	}
	if len(prc.mutation.BackgroundScenicAreaIDs()) == 0 {
		return &ValidationError{Name: "background_scenic_area", err: errors.New(`ent: missing required edge "ProfitReceiver.background_scenic_area"`)}
	}
	return nil
}

func (prc *ProfitReceiverCreate) sqlSave(ctx context.Context) (*ProfitReceiver, error) {
	if err := prc.check(); err != nil {
		return nil, err
	}
	_node, _spec := prc.createSpec()
	if err := sqlgraph.CreateNode(ctx, prc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	prc.mutation.id = &_node.ID
	prc.mutation.done = true
	return _node, nil
}

func (prc *ProfitReceiverCreate) createSpec() (*ProfitReceiver, *sqlgraph.CreateSpec) {
	var (
		_node = &ProfitReceiver{config: prc.config}
		_spec = sqlgraph.NewCreateSpec(profitreceiver.Table, sqlgraph.NewFieldSpec(profitreceiver.FieldID, field.TypeInt))
	)
	if id, ok := prc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := prc.mutation.MchID(); ok {
		_spec.SetField(profitreceiver.FieldMchID, field.TypeString, value)
		_node.MchID = value
	}
	if value, ok := prc.mutation.Phone(); ok {
		_spec.SetField(profitreceiver.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := prc.mutation.ReceiverType(); ok {
		_spec.SetField(profitreceiver.FieldReceiverType, field.TypeInt, value)
		_node.ReceiverType = value
	}
	if value, ok := prc.mutation.ReceiverAccount(); ok {
		_spec.SetField(profitreceiver.FieldReceiverAccount, field.TypeString, value)
		_node.ReceiverAccount = value
	}
	if value, ok := prc.mutation.ReceiverName(); ok {
		_spec.SetField(profitreceiver.FieldReceiverName, field.TypeString, value)
		_node.ReceiverName = value
	}
	if value, ok := prc.mutation.SharingRatio(); ok {
		_spec.SetField(profitreceiver.FieldSharingRatio, field.TypeFloat64, value)
		_node.SharingRatio = value
	}
	if value, ok := prc.mutation.State(); ok {
		_spec.SetField(profitreceiver.FieldState, field.TypeInt, value)
		_node.State = value
	}
	if value, ok := prc.mutation.CreateTime(); ok {
		_spec.SetField(profitreceiver.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := prc.mutation.UpdateTime(); ok {
		_spec.SetField(profitreceiver.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if nodes := prc.mutation.BackgroundScenicAreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   profitreceiver.BackgroundScenicAreaTable,
			Columns: []string{profitreceiver.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ScenicAreaID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProfitReceiverCreateBulk is the builder for creating many ProfitReceiver entities in bulk.
type ProfitReceiverCreateBulk struct {
	config
	err      error
	builders []*ProfitReceiverCreate
}

// Save creates the ProfitReceiver entities in the database.
func (prcb *ProfitReceiverCreateBulk) Save(ctx context.Context) ([]*ProfitReceiver, error) {
	if prcb.err != nil {
		return nil, prcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(prcb.builders))
	nodes := make([]*ProfitReceiver, len(prcb.builders))
	mutators := make([]Mutator, len(prcb.builders))
	for i := range prcb.builders {
		func(i int, root context.Context) {
			builder := prcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProfitReceiverMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, prcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, prcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, prcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (prcb *ProfitReceiverCreateBulk) SaveX(ctx context.Context) []*ProfitReceiver {
	v, err := prcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prcb *ProfitReceiverCreateBulk) Exec(ctx context.Context) error {
	_, err := prcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prcb *ProfitReceiverCreateBulk) ExecX(ctx context.Context) {
	if err := prcb.Exec(ctx); err != nil {
		panic(err)
	}
}
