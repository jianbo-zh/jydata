// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/activityorder"
)

// ActivityOrderCreate is the builder for creating a ActivityOrder entity.
type ActivityOrderCreate struct {
	config
	mutation *ActivityOrderMutation
	hooks    []Hook
}

// SetOrderNo sets the "order_no" field.
func (aoc *ActivityOrderCreate) SetOrderNo(s string) *ActivityOrderCreate {
	aoc.mutation.SetOrderNo(s)
	return aoc
}

// SetWxTxID sets the "wx_tx_id" field.
func (aoc *ActivityOrderCreate) SetWxTxID(s string) *ActivityOrderCreate {
	aoc.mutation.SetWxTxID(s)
	return aoc
}

// SetNillableWxTxID sets the "wx_tx_id" field if the given value is not nil.
func (aoc *ActivityOrderCreate) SetNillableWxTxID(s *string) *ActivityOrderCreate {
	if s != nil {
		aoc.SetWxTxID(*s)
	}
	return aoc
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (aoc *ActivityOrderCreate) SetScenicAreaID(i int) *ActivityOrderCreate {
	aoc.mutation.SetScenicAreaID(i)
	return aoc
}

// SetMchID sets the "mch_id" field.
func (aoc *ActivityOrderCreate) SetMchID(s string) *ActivityOrderCreate {
	aoc.mutation.SetMchID(s)
	return aoc
}

// SetNillableMchID sets the "mch_id" field if the given value is not nil.
func (aoc *ActivityOrderCreate) SetNillableMchID(s *string) *ActivityOrderCreate {
	if s != nil {
		aoc.SetMchID(*s)
	}
	return aoc
}

// SetScenicAreaName sets the "scenic_area_name" field.
func (aoc *ActivityOrderCreate) SetScenicAreaName(s string) *ActivityOrderCreate {
	aoc.mutation.SetScenicAreaName(s)
	return aoc
}

// SetUserID sets the "user_id" field.
func (aoc *ActivityOrderCreate) SetUserID(i int) *ActivityOrderCreate {
	aoc.mutation.SetUserID(i)
	return aoc
}

// SetOpenID sets the "open_id" field.
func (aoc *ActivityOrderCreate) SetOpenID(s string) *ActivityOrderCreate {
	aoc.mutation.SetOpenID(s)
	return aoc
}

// SetOrderAmount sets the "order_amount" field.
func (aoc *ActivityOrderCreate) SetOrderAmount(i int) *ActivityOrderCreate {
	aoc.mutation.SetOrderAmount(i)
	return aoc
}

// SetNillableOrderAmount sets the "order_amount" field if the given value is not nil.
func (aoc *ActivityOrderCreate) SetNillableOrderAmount(i *int) *ActivityOrderCreate {
	if i != nil {
		aoc.SetOrderAmount(*i)
	}
	return aoc
}

// SetOrderState sets the "order_state" field.
func (aoc *ActivityOrderCreate) SetOrderState(i int) *ActivityOrderCreate {
	aoc.mutation.SetOrderState(i)
	return aoc
}

// SetNillableOrderState sets the "order_state" field if the given value is not nil.
func (aoc *ActivityOrderCreate) SetNillableOrderState(i *int) *ActivityOrderCreate {
	if i != nil {
		aoc.SetOrderState(*i)
	}
	return aoc
}

// SetRemark sets the "remark" field.
func (aoc *ActivityOrderCreate) SetRemark(s string) *ActivityOrderCreate {
	aoc.mutation.SetRemark(s)
	return aoc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (aoc *ActivityOrderCreate) SetNillableRemark(s *string) *ActivityOrderCreate {
	if s != nil {
		aoc.SetRemark(*s)
	}
	return aoc
}

// SetPaidTime sets the "paid_time" field.
func (aoc *ActivityOrderCreate) SetPaidTime(t time.Time) *ActivityOrderCreate {
	aoc.mutation.SetPaidTime(t)
	return aoc
}

// SetNillablePaidTime sets the "paid_time" field if the given value is not nil.
func (aoc *ActivityOrderCreate) SetNillablePaidTime(t *time.Time) *ActivityOrderCreate {
	if t != nil {
		aoc.SetPaidTime(*t)
	}
	return aoc
}

// SetCreateTime sets the "create_time" field.
func (aoc *ActivityOrderCreate) SetCreateTime(t time.Time) *ActivityOrderCreate {
	aoc.mutation.SetCreateTime(t)
	return aoc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (aoc *ActivityOrderCreate) SetNillableCreateTime(t *time.Time) *ActivityOrderCreate {
	if t != nil {
		aoc.SetCreateTime(*t)
	}
	return aoc
}

// SetUpdateTime sets the "update_time" field.
func (aoc *ActivityOrderCreate) SetUpdateTime(t time.Time) *ActivityOrderCreate {
	aoc.mutation.SetUpdateTime(t)
	return aoc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (aoc *ActivityOrderCreate) SetNillableUpdateTime(t *time.Time) *ActivityOrderCreate {
	if t != nil {
		aoc.SetUpdateTime(*t)
	}
	return aoc
}

// SetID sets the "id" field.
func (aoc *ActivityOrderCreate) SetID(i int) *ActivityOrderCreate {
	aoc.mutation.SetID(i)
	return aoc
}

// Mutation returns the ActivityOrderMutation object of the builder.
func (aoc *ActivityOrderCreate) Mutation() *ActivityOrderMutation {
	return aoc.mutation
}

// Save creates the ActivityOrder in the database.
func (aoc *ActivityOrderCreate) Save(ctx context.Context) (*ActivityOrder, error) {
	aoc.defaults()
	return withHooks(ctx, aoc.sqlSave, aoc.mutation, aoc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (aoc *ActivityOrderCreate) SaveX(ctx context.Context) *ActivityOrder {
	v, err := aoc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aoc *ActivityOrderCreate) Exec(ctx context.Context) error {
	_, err := aoc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aoc *ActivityOrderCreate) ExecX(ctx context.Context) {
	if err := aoc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aoc *ActivityOrderCreate) defaults() {
	if _, ok := aoc.mutation.WxTxID(); !ok {
		v := activityorder.DefaultWxTxID
		aoc.mutation.SetWxTxID(v)
	}
	if _, ok := aoc.mutation.MchID(); !ok {
		v := activityorder.DefaultMchID
		aoc.mutation.SetMchID(v)
	}
	if _, ok := aoc.mutation.OrderAmount(); !ok {
		v := activityorder.DefaultOrderAmount
		aoc.mutation.SetOrderAmount(v)
	}
	if _, ok := aoc.mutation.OrderState(); !ok {
		v := activityorder.DefaultOrderState
		aoc.mutation.SetOrderState(v)
	}
	if _, ok := aoc.mutation.Remark(); !ok {
		v := activityorder.DefaultRemark
		aoc.mutation.SetRemark(v)
	}
	if _, ok := aoc.mutation.CreateTime(); !ok {
		v := activityorder.DefaultCreateTime()
		aoc.mutation.SetCreateTime(v)
	}
	if _, ok := aoc.mutation.UpdateTime(); !ok {
		v := activityorder.DefaultUpdateTime()
		aoc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aoc *ActivityOrderCreate) check() error {
	if _, ok := aoc.mutation.OrderNo(); !ok {
		return &ValidationError{Name: "order_no", err: errors.New(`ent: missing required field "ActivityOrder.order_no"`)}
	}
	if _, ok := aoc.mutation.WxTxID(); !ok {
		return &ValidationError{Name: "wx_tx_id", err: errors.New(`ent: missing required field "ActivityOrder.wx_tx_id"`)}
	}
	if _, ok := aoc.mutation.ScenicAreaID(); !ok {
		return &ValidationError{Name: "scenic_area_id", err: errors.New(`ent: missing required field "ActivityOrder.scenic_area_id"`)}
	}
	if _, ok := aoc.mutation.MchID(); !ok {
		return &ValidationError{Name: "mch_id", err: errors.New(`ent: missing required field "ActivityOrder.mch_id"`)}
	}
	if _, ok := aoc.mutation.ScenicAreaName(); !ok {
		return &ValidationError{Name: "scenic_area_name", err: errors.New(`ent: missing required field "ActivityOrder.scenic_area_name"`)}
	}
	if _, ok := aoc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "ActivityOrder.user_id"`)}
	}
	if _, ok := aoc.mutation.OpenID(); !ok {
		return &ValidationError{Name: "open_id", err: errors.New(`ent: missing required field "ActivityOrder.open_id"`)}
	}
	if _, ok := aoc.mutation.OrderAmount(); !ok {
		return &ValidationError{Name: "order_amount", err: errors.New(`ent: missing required field "ActivityOrder.order_amount"`)}
	}
	if _, ok := aoc.mutation.OrderState(); !ok {
		return &ValidationError{Name: "order_state", err: errors.New(`ent: missing required field "ActivityOrder.order_state"`)}
	}
	if _, ok := aoc.mutation.Remark(); !ok {
		return &ValidationError{Name: "remark", err: errors.New(`ent: missing required field "ActivityOrder.remark"`)}
	}
	if _, ok := aoc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "ActivityOrder.create_time"`)}
	}
	if _, ok := aoc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "ActivityOrder.update_time"`)}
	}
	return nil
}

func (aoc *ActivityOrderCreate) sqlSave(ctx context.Context) (*ActivityOrder, error) {
	if err := aoc.check(); err != nil {
		return nil, err
	}
	_node, _spec := aoc.createSpec()
	if err := sqlgraph.CreateNode(ctx, aoc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	aoc.mutation.id = &_node.ID
	aoc.mutation.done = true
	return _node, nil
}

func (aoc *ActivityOrderCreate) createSpec() (*ActivityOrder, *sqlgraph.CreateSpec) {
	var (
		_node = &ActivityOrder{config: aoc.config}
		_spec = sqlgraph.NewCreateSpec(activityorder.Table, sqlgraph.NewFieldSpec(activityorder.FieldID, field.TypeInt))
	)
	if id, ok := aoc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := aoc.mutation.OrderNo(); ok {
		_spec.SetField(activityorder.FieldOrderNo, field.TypeString, value)
		_node.OrderNo = value
	}
	if value, ok := aoc.mutation.WxTxID(); ok {
		_spec.SetField(activityorder.FieldWxTxID, field.TypeString, value)
		_node.WxTxID = value
	}
	if value, ok := aoc.mutation.ScenicAreaID(); ok {
		_spec.SetField(activityorder.FieldScenicAreaID, field.TypeInt, value)
		_node.ScenicAreaID = value
	}
	if value, ok := aoc.mutation.MchID(); ok {
		_spec.SetField(activityorder.FieldMchID, field.TypeString, value)
		_node.MchID = value
	}
	if value, ok := aoc.mutation.ScenicAreaName(); ok {
		_spec.SetField(activityorder.FieldScenicAreaName, field.TypeString, value)
		_node.ScenicAreaName = value
	}
	if value, ok := aoc.mutation.UserID(); ok {
		_spec.SetField(activityorder.FieldUserID, field.TypeInt, value)
		_node.UserID = value
	}
	if value, ok := aoc.mutation.OpenID(); ok {
		_spec.SetField(activityorder.FieldOpenID, field.TypeString, value)
		_node.OpenID = value
	}
	if value, ok := aoc.mutation.OrderAmount(); ok {
		_spec.SetField(activityorder.FieldOrderAmount, field.TypeInt, value)
		_node.OrderAmount = value
	}
	if value, ok := aoc.mutation.OrderState(); ok {
		_spec.SetField(activityorder.FieldOrderState, field.TypeInt, value)
		_node.OrderState = value
	}
	if value, ok := aoc.mutation.Remark(); ok {
		_spec.SetField(activityorder.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := aoc.mutation.PaidTime(); ok {
		_spec.SetField(activityorder.FieldPaidTime, field.TypeTime, value)
		_node.PaidTime = value
	}
	if value, ok := aoc.mutation.CreateTime(); ok {
		_spec.SetField(activityorder.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := aoc.mutation.UpdateTime(); ok {
		_spec.SetField(activityorder.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// ActivityOrderCreateBulk is the builder for creating many ActivityOrder entities in bulk.
type ActivityOrderCreateBulk struct {
	config
	err      error
	builders []*ActivityOrderCreate
}

// Save creates the ActivityOrder entities in the database.
func (aocb *ActivityOrderCreateBulk) Save(ctx context.Context) ([]*ActivityOrder, error) {
	if aocb.err != nil {
		return nil, aocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(aocb.builders))
	nodes := make([]*ActivityOrder, len(aocb.builders))
	mutators := make([]Mutator, len(aocb.builders))
	for i := range aocb.builders {
		func(i int, root context.Context) {
			builder := aocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ActivityOrderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aocb *ActivityOrderCreateBulk) SaveX(ctx context.Context) []*ActivityOrder {
	v, err := aocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aocb *ActivityOrderCreateBulk) Exec(ctx context.Context) error {
	_, err := aocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aocb *ActivityOrderCreateBulk) ExecX(ctx context.Context) {
	if err := aocb.Exec(ctx); err != nil {
		panic(err)
	}
}
