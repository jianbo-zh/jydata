// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/apppush"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AppPushCreate is the builder for creating a AppPush entity.
type AppPushCreate struct {
	config
	mutation *AppPushMutation
	hooks    []Hook
}

// SetUser sets the "user" field.
func (apc *AppPushCreate) SetUser(s string) *AppPushCreate {
	apc.mutation.SetUser(s)
	return apc
}

// SetTitle sets the "title" field.
func (apc *AppPushCreate) SetTitle(s string) *AppPushCreate {
	apc.mutation.SetTitle(s)
	return apc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (apc *AppPushCreate) SetNillableTitle(s *string) *AppPushCreate {
	if s != nil {
		apc.SetTitle(*s)
	}
	return apc
}

// SetContent sets the "content" field.
func (apc *AppPushCreate) SetContent(s string) *AppPushCreate {
	apc.mutation.SetContent(s)
	return apc
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (apc *AppPushCreate) SetNillableContent(s *string) *AppPushCreate {
	if s != nil {
		apc.SetContent(*s)
	}
	return apc
}

// SetState sets the "state" field.
func (apc *AppPushCreate) SetState(i int) *AppPushCreate {
	apc.mutation.SetState(i)
	return apc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (apc *AppPushCreate) SetNillableState(i *int) *AppPushCreate {
	if i != nil {
		apc.SetState(*i)
	}
	return apc
}

// SetRemark sets the "remark" field.
func (apc *AppPushCreate) SetRemark(s string) *AppPushCreate {
	apc.mutation.SetRemark(s)
	return apc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (apc *AppPushCreate) SetNillableRemark(s *string) *AppPushCreate {
	if s != nil {
		apc.SetRemark(*s)
	}
	return apc
}

// SetCreateTime sets the "create_time" field.
func (apc *AppPushCreate) SetCreateTime(t time.Time) *AppPushCreate {
	apc.mutation.SetCreateTime(t)
	return apc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (apc *AppPushCreate) SetNillableCreateTime(t *time.Time) *AppPushCreate {
	if t != nil {
		apc.SetCreateTime(*t)
	}
	return apc
}

// SetUpdateTime sets the "update_time" field.
func (apc *AppPushCreate) SetUpdateTime(t time.Time) *AppPushCreate {
	apc.mutation.SetUpdateTime(t)
	return apc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (apc *AppPushCreate) SetNillableUpdateTime(t *time.Time) *AppPushCreate {
	if t != nil {
		apc.SetUpdateTime(*t)
	}
	return apc
}

// SetID sets the "id" field.
func (apc *AppPushCreate) SetID(i int) *AppPushCreate {
	apc.mutation.SetID(i)
	return apc
}

// Mutation returns the AppPushMutation object of the builder.
func (apc *AppPushCreate) Mutation() *AppPushMutation {
	return apc.mutation
}

// Save creates the AppPush in the database.
func (apc *AppPushCreate) Save(ctx context.Context) (*AppPush, error) {
	apc.defaults()
	return withHooks(ctx, apc.sqlSave, apc.mutation, apc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (apc *AppPushCreate) SaveX(ctx context.Context) *AppPush {
	v, err := apc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (apc *AppPushCreate) Exec(ctx context.Context) error {
	_, err := apc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apc *AppPushCreate) ExecX(ctx context.Context) {
	if err := apc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (apc *AppPushCreate) defaults() {
	if _, ok := apc.mutation.Title(); !ok {
		v := apppush.DefaultTitle
		apc.mutation.SetTitle(v)
	}
	if _, ok := apc.mutation.Content(); !ok {
		v := apppush.DefaultContent
		apc.mutation.SetContent(v)
	}
	if _, ok := apc.mutation.State(); !ok {
		v := apppush.DefaultState
		apc.mutation.SetState(v)
	}
	if _, ok := apc.mutation.Remark(); !ok {
		v := apppush.DefaultRemark
		apc.mutation.SetRemark(v)
	}
	if _, ok := apc.mutation.CreateTime(); !ok {
		v := apppush.DefaultCreateTime()
		apc.mutation.SetCreateTime(v)
	}
	if _, ok := apc.mutation.UpdateTime(); !ok {
		v := apppush.DefaultUpdateTime()
		apc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (apc *AppPushCreate) check() error {
	if _, ok := apc.mutation.User(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required field "AppPush.user"`)}
	}
	if _, ok := apc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "AppPush.title"`)}
	}
	if _, ok := apc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "AppPush.content"`)}
	}
	if _, ok := apc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "AppPush.state"`)}
	}
	if _, ok := apc.mutation.Remark(); !ok {
		return &ValidationError{Name: "remark", err: errors.New(`ent: missing required field "AppPush.remark"`)}
	}
	if _, ok := apc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "AppPush.create_time"`)}
	}
	if _, ok := apc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "AppPush.update_time"`)}
	}
	return nil
}

func (apc *AppPushCreate) sqlSave(ctx context.Context) (*AppPush, error) {
	if err := apc.check(); err != nil {
		return nil, err
	}
	_node, _spec := apc.createSpec()
	if err := sqlgraph.CreateNode(ctx, apc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	apc.mutation.id = &_node.ID
	apc.mutation.done = true
	return _node, nil
}

func (apc *AppPushCreate) createSpec() (*AppPush, *sqlgraph.CreateSpec) {
	var (
		_node = &AppPush{config: apc.config}
		_spec = sqlgraph.NewCreateSpec(apppush.Table, sqlgraph.NewFieldSpec(apppush.FieldID, field.TypeInt))
	)
	if id, ok := apc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := apc.mutation.User(); ok {
		_spec.SetField(apppush.FieldUser, field.TypeString, value)
		_node.User = value
	}
	if value, ok := apc.mutation.Title(); ok {
		_spec.SetField(apppush.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := apc.mutation.Content(); ok {
		_spec.SetField(apppush.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := apc.mutation.State(); ok {
		_spec.SetField(apppush.FieldState, field.TypeInt, value)
		_node.State = value
	}
	if value, ok := apc.mutation.Remark(); ok {
		_spec.SetField(apppush.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := apc.mutation.CreateTime(); ok {
		_spec.SetField(apppush.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := apc.mutation.UpdateTime(); ok {
		_spec.SetField(apppush.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// AppPushCreateBulk is the builder for creating many AppPush entities in bulk.
type AppPushCreateBulk struct {
	config
	err      error
	builders []*AppPushCreate
}

// Save creates the AppPush entities in the database.
func (apcb *AppPushCreateBulk) Save(ctx context.Context) ([]*AppPush, error) {
	if apcb.err != nil {
		return nil, apcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(apcb.builders))
	nodes := make([]*AppPush, len(apcb.builders))
	mutators := make([]Mutator, len(apcb.builders))
	for i := range apcb.builders {
		func(i int, root context.Context) {
			builder := apcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppPushMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, apcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, apcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, apcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (apcb *AppPushCreateBulk) SaveX(ctx context.Context) []*AppPush {
	v, err := apcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (apcb *AppPushCreateBulk) Exec(ctx context.Context) error {
	_, err := apcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apcb *AppPushCreateBulk) ExecX(ctx context.Context) {
	if err := apcb.Exec(ctx); err != nil {
		panic(err)
	}
}
