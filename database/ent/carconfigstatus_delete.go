// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"github.com/jianbo-zh/jydata/database/ent/carconfigstatus"
	"github.com/jianbo-zh/jydata/database/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarConfigStatusDelete is the builder for deleting a CarConfigStatus entity.
type CarConfigStatusDelete struct {
	config
	hooks    []Hook
	mutation *CarConfigStatusMutation
}

// Where appends a list predicates to the CarConfigStatusDelete builder.
func (ccsd *CarConfigStatusDelete) Where(ps ...predicate.CarConfigStatus) *CarConfigStatusDelete {
	ccsd.mutation.Where(ps...)
	return ccsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ccsd *CarConfigStatusDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ccsd.sqlExec, ccsd.mutation, ccsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ccsd *CarConfigStatusDelete) ExecX(ctx context.Context) int {
	n, err := ccsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ccsd *CarConfigStatusDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(carconfigstatus.Table, sqlgraph.NewFieldSpec(carconfigstatus.FieldID, field.TypeInt))
	if ps := ccsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ccsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ccsd.mutation.done = true
	return affected, err
}

// CarConfigStatusDeleteOne is the builder for deleting a single CarConfigStatus entity.
type CarConfigStatusDeleteOne struct {
	ccsd *CarConfigStatusDelete
}

// Where appends a list predicates to the CarConfigStatusDelete builder.
func (ccsdo *CarConfigStatusDeleteOne) Where(ps ...predicate.CarConfigStatus) *CarConfigStatusDeleteOne {
	ccsdo.ccsd.mutation.Where(ps...)
	return ccsdo
}

// Exec executes the deletion query.
func (ccsdo *CarConfigStatusDeleteOne) Exec(ctx context.Context) error {
	n, err := ccsdo.ccsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{carconfigstatus.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ccsdo *CarConfigStatusDeleteOne) ExecX(ctx context.Context) {
	if err := ccsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
