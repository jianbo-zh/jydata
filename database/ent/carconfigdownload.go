// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/carconfigdownload"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CarConfigDownload is the model entity for the CarConfigDownload schema.
type CarConfigDownload struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID int64 `json:"uuid,omitempty"`
	// 车辆ID
	CarID int `json:"car_id,omitempty"`
	// 车辆设备ID
	DeviceID string `json:"device_id,omitempty"`
	// 下载状态
	DownloadState string `json:"download_state,omitempty"`
	// 下载进度
	DownloadProcess int `json:"download_process,omitempty"`
	// 配置IDs
	ConfigIds []int `json:"config_ids,omitempty"`
	// 备注说明
	Remark string `json:"remark,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime      time.Time `json:"update_time,omitempty"`
	car_car_configs *int
	selectValues    sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CarConfigDownload) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case carconfigdownload.FieldConfigIds:
			values[i] = new([]byte)
		case carconfigdownload.FieldID, carconfigdownload.FieldUUID, carconfigdownload.FieldCarID, carconfigdownload.FieldDownloadProcess:
			values[i] = new(sql.NullInt64)
		case carconfigdownload.FieldDeviceID, carconfigdownload.FieldDownloadState, carconfigdownload.FieldRemark:
			values[i] = new(sql.NullString)
		case carconfigdownload.FieldCreateTime, carconfigdownload.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case carconfigdownload.ForeignKeys[0]: // car_car_configs
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CarConfigDownload fields.
func (ccd *CarConfigDownload) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case carconfigdownload.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ccd.ID = int(value.Int64)
		case carconfigdownload.FieldUUID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				ccd.UUID = value.Int64
			}
		case carconfigdownload.FieldCarID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field car_id", values[i])
			} else if value.Valid {
				ccd.CarID = int(value.Int64)
			}
		case carconfigdownload.FieldDeviceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device_id", values[i])
			} else if value.Valid {
				ccd.DeviceID = value.String
			}
		case carconfigdownload.FieldDownloadState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field download_state", values[i])
			} else if value.Valid {
				ccd.DownloadState = value.String
			}
		case carconfigdownload.FieldDownloadProcess:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field download_process", values[i])
			} else if value.Valid {
				ccd.DownloadProcess = int(value.Int64)
			}
		case carconfigdownload.FieldConfigIds:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field config_ids", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ccd.ConfigIds); err != nil {
					return fmt.Errorf("unmarshal field config_ids: %w", err)
				}
			}
		case carconfigdownload.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				ccd.Remark = value.String
			}
		case carconfigdownload.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ccd.CreateTime = value.Time
			}
		case carconfigdownload.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ccd.UpdateTime = value.Time
			}
		case carconfigdownload.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field car_car_configs", value)
			} else if value.Valid {
				ccd.car_car_configs = new(int)
				*ccd.car_car_configs = int(value.Int64)
			}
		default:
			ccd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CarConfigDownload.
// This includes values selected through modifiers, order, etc.
func (ccd *CarConfigDownload) Value(name string) (ent.Value, error) {
	return ccd.selectValues.Get(name)
}

// Update returns a builder for updating this CarConfigDownload.
// Note that you need to call CarConfigDownload.Unwrap() before calling this method if this CarConfigDownload
// was returned from a transaction, and the transaction was committed or rolled back.
func (ccd *CarConfigDownload) Update() *CarConfigDownloadUpdateOne {
	return NewCarConfigDownloadClient(ccd.config).UpdateOne(ccd)
}

// Unwrap unwraps the CarConfigDownload entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ccd *CarConfigDownload) Unwrap() *CarConfigDownload {
	_tx, ok := ccd.config.driver.(*txDriver)
	if !ok {
		panic("ent: CarConfigDownload is not a transactional entity")
	}
	ccd.config.driver = _tx.drv
	return ccd
}

// String implements the fmt.Stringer.
func (ccd *CarConfigDownload) String() string {
	var builder strings.Builder
	builder.WriteString("CarConfigDownload(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ccd.ID))
	builder.WriteString("uuid=")
	builder.WriteString(fmt.Sprintf("%v", ccd.UUID))
	builder.WriteString(", ")
	builder.WriteString("car_id=")
	builder.WriteString(fmt.Sprintf("%v", ccd.CarID))
	builder.WriteString(", ")
	builder.WriteString("device_id=")
	builder.WriteString(ccd.DeviceID)
	builder.WriteString(", ")
	builder.WriteString("download_state=")
	builder.WriteString(ccd.DownloadState)
	builder.WriteString(", ")
	builder.WriteString("download_process=")
	builder.WriteString(fmt.Sprintf("%v", ccd.DownloadProcess))
	builder.WriteString(", ")
	builder.WriteString("config_ids=")
	builder.WriteString(fmt.Sprintf("%v", ccd.ConfigIds))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(ccd.Remark)
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(ccd.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(ccd.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CarConfigDownloads is a parsable slice of CarConfigDownload.
type CarConfigDownloads []*CarConfigDownload
