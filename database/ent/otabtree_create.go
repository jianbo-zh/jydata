// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/otabtree"
)

// OtaBtreeCreate is the builder for creating a OtaBtree entity.
type OtaBtreeCreate struct {
	config
	mutation *OtaBtreeMutation
	hooks    []Hook
}

// SetDeleteTime sets the "delete_time" field.
func (obc *OtaBtreeCreate) SetDeleteTime(t time.Time) *OtaBtreeCreate {
	obc.mutation.SetDeleteTime(t)
	return obc
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (obc *OtaBtreeCreate) SetNillableDeleteTime(t *time.Time) *OtaBtreeCreate {
	if t != nil {
		obc.SetDeleteTime(*t)
	}
	return obc
}

// SetFileID sets the "file_id" field.
func (obc *OtaBtreeCreate) SetFileID(i int) *OtaBtreeCreate {
	obc.mutation.SetFileID(i)
	return obc
}

// SetName sets the "name" field.
func (obc *OtaBtreeCreate) SetName(s string) *OtaBtreeCreate {
	obc.mutation.SetName(s)
	return obc
}

// SetRemark sets the "remark" field.
func (obc *OtaBtreeCreate) SetRemark(s string) *OtaBtreeCreate {
	obc.mutation.SetRemark(s)
	return obc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (obc *OtaBtreeCreate) SetNillableRemark(s *string) *OtaBtreeCreate {
	if s != nil {
		obc.SetRemark(*s)
	}
	return obc
}

// SetCreateTime sets the "create_time" field.
func (obc *OtaBtreeCreate) SetCreateTime(t time.Time) *OtaBtreeCreate {
	obc.mutation.SetCreateTime(t)
	return obc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (obc *OtaBtreeCreate) SetNillableCreateTime(t *time.Time) *OtaBtreeCreate {
	if t != nil {
		obc.SetCreateTime(*t)
	}
	return obc
}

// SetUpdateTime sets the "update_time" field.
func (obc *OtaBtreeCreate) SetUpdateTime(t time.Time) *OtaBtreeCreate {
	obc.mutation.SetUpdateTime(t)
	return obc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (obc *OtaBtreeCreate) SetNillableUpdateTime(t *time.Time) *OtaBtreeCreate {
	if t != nil {
		obc.SetUpdateTime(*t)
	}
	return obc
}

// SetID sets the "id" field.
func (obc *OtaBtreeCreate) SetID(i int) *OtaBtreeCreate {
	obc.mutation.SetID(i)
	return obc
}

// Mutation returns the OtaBtreeMutation object of the builder.
func (obc *OtaBtreeCreate) Mutation() *OtaBtreeMutation {
	return obc.mutation
}

// Save creates the OtaBtree in the database.
func (obc *OtaBtreeCreate) Save(ctx context.Context) (*OtaBtree, error) {
	if err := obc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, obc.sqlSave, obc.mutation, obc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (obc *OtaBtreeCreate) SaveX(ctx context.Context) *OtaBtree {
	v, err := obc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (obc *OtaBtreeCreate) Exec(ctx context.Context) error {
	_, err := obc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (obc *OtaBtreeCreate) ExecX(ctx context.Context) {
	if err := obc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (obc *OtaBtreeCreate) defaults() error {
	if _, ok := obc.mutation.Remark(); !ok {
		v := otabtree.DefaultRemark
		obc.mutation.SetRemark(v)
	}
	if _, ok := obc.mutation.CreateTime(); !ok {
		if otabtree.DefaultCreateTime == nil {
			return fmt.Errorf("ent: uninitialized otabtree.DefaultCreateTime (forgotten import ent/runtime?)")
		}
		v := otabtree.DefaultCreateTime()
		obc.mutation.SetCreateTime(v)
	}
	if _, ok := obc.mutation.UpdateTime(); !ok {
		if otabtree.DefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized otabtree.DefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := otabtree.DefaultUpdateTime()
		obc.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (obc *OtaBtreeCreate) check() error {
	if _, ok := obc.mutation.FileID(); !ok {
		return &ValidationError{Name: "file_id", err: errors.New(`ent: missing required field "OtaBtree.file_id"`)}
	}
	if _, ok := obc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "OtaBtree.name"`)}
	}
	if _, ok := obc.mutation.Remark(); !ok {
		return &ValidationError{Name: "remark", err: errors.New(`ent: missing required field "OtaBtree.remark"`)}
	}
	if _, ok := obc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "OtaBtree.create_time"`)}
	}
	if _, ok := obc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "OtaBtree.update_time"`)}
	}
	return nil
}

func (obc *OtaBtreeCreate) sqlSave(ctx context.Context) (*OtaBtree, error) {
	if err := obc.check(); err != nil {
		return nil, err
	}
	_node, _spec := obc.createSpec()
	if err := sqlgraph.CreateNode(ctx, obc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	obc.mutation.id = &_node.ID
	obc.mutation.done = true
	return _node, nil
}

func (obc *OtaBtreeCreate) createSpec() (*OtaBtree, *sqlgraph.CreateSpec) {
	var (
		_node = &OtaBtree{config: obc.config}
		_spec = sqlgraph.NewCreateSpec(otabtree.Table, sqlgraph.NewFieldSpec(otabtree.FieldID, field.TypeInt))
	)
	if id, ok := obc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := obc.mutation.DeleteTime(); ok {
		_spec.SetField(otabtree.FieldDeleteTime, field.TypeTime, value)
		_node.DeleteTime = value
	}
	if value, ok := obc.mutation.FileID(); ok {
		_spec.SetField(otabtree.FieldFileID, field.TypeInt, value)
		_node.FileID = value
	}
	if value, ok := obc.mutation.Name(); ok {
		_spec.SetField(otabtree.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := obc.mutation.Remark(); ok {
		_spec.SetField(otabtree.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := obc.mutation.CreateTime(); ok {
		_spec.SetField(otabtree.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := obc.mutation.UpdateTime(); ok {
		_spec.SetField(otabtree.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// OtaBtreeCreateBulk is the builder for creating many OtaBtree entities in bulk.
type OtaBtreeCreateBulk struct {
	config
	err      error
	builders []*OtaBtreeCreate
}

// Save creates the OtaBtree entities in the database.
func (obcb *OtaBtreeCreateBulk) Save(ctx context.Context) ([]*OtaBtree, error) {
	if obcb.err != nil {
		return nil, obcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(obcb.builders))
	nodes := make([]*OtaBtree, len(obcb.builders))
	mutators := make([]Mutator, len(obcb.builders))
	for i := range obcb.builders {
		func(i int, root context.Context) {
			builder := obcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OtaBtreeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, obcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, obcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, obcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (obcb *OtaBtreeCreateBulk) SaveX(ctx context.Context) []*OtaBtree {
	v, err := obcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (obcb *OtaBtreeCreateBulk) Exec(ctx context.Context) error {
	_, err := obcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (obcb *OtaBtreeCreateBulk) ExecX(ctx context.Context) {
	if err := obcb.Exec(ctx); err != nil {
		panic(err)
	}
}
