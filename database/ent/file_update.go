// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/file"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
)

// FileUpdate is the builder for updating File entities.
type FileUpdate struct {
	config
	hooks    []Hook
	mutation *FileMutation
}

// Where appends a list predicates to the FileUpdate builder.
func (fu *FileUpdate) Where(ps ...predicate.File) *FileUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetStorageType sets the "storage_type" field.
func (fu *FileUpdate) SetStorageType(i int) *FileUpdate {
	fu.mutation.ResetStorageType()
	fu.mutation.SetStorageType(i)
	return fu
}

// SetNillableStorageType sets the "storage_type" field if the given value is not nil.
func (fu *FileUpdate) SetNillableStorageType(i *int) *FileUpdate {
	if i != nil {
		fu.SetStorageType(*i)
	}
	return fu
}

// AddStorageType adds i to the "storage_type" field.
func (fu *FileUpdate) AddStorageType(i int) *FileUpdate {
	fu.mutation.AddStorageType(i)
	return fu
}

// SetCreatorID sets the "creator_id" field.
func (fu *FileUpdate) SetCreatorID(i int) *FileUpdate {
	fu.mutation.ResetCreatorID()
	fu.mutation.SetCreatorID(i)
	return fu
}

// SetNillableCreatorID sets the "creator_id" field if the given value is not nil.
func (fu *FileUpdate) SetNillableCreatorID(i *int) *FileUpdate {
	if i != nil {
		fu.SetCreatorID(*i)
	}
	return fu
}

// AddCreatorID adds i to the "creator_id" field.
func (fu *FileUpdate) AddCreatorID(i int) *FileUpdate {
	fu.mutation.AddCreatorID(i)
	return fu
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (fu *FileUpdate) SetScenicAreaID(i int) *FileUpdate {
	fu.mutation.ResetScenicAreaID()
	fu.mutation.SetScenicAreaID(i)
	return fu
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (fu *FileUpdate) SetNillableScenicAreaID(i *int) *FileUpdate {
	if i != nil {
		fu.SetScenicAreaID(*i)
	}
	return fu
}

// AddScenicAreaID adds i to the "scenic_area_id" field.
func (fu *FileUpdate) AddScenicAreaID(i int) *FileUpdate {
	fu.mutation.AddScenicAreaID(i)
	return fu
}

// SetFileCategory sets the "file_category" field.
func (fu *FileUpdate) SetFileCategory(i int) *FileUpdate {
	fu.mutation.ResetFileCategory()
	fu.mutation.SetFileCategory(i)
	return fu
}

// SetNillableFileCategory sets the "file_category" field if the given value is not nil.
func (fu *FileUpdate) SetNillableFileCategory(i *int) *FileUpdate {
	if i != nil {
		fu.SetFileCategory(*i)
	}
	return fu
}

// AddFileCategory adds i to the "file_category" field.
func (fu *FileUpdate) AddFileCategory(i int) *FileUpdate {
	fu.mutation.AddFileCategory(i)
	return fu
}

// SetFileType sets the "file_type" field.
func (fu *FileUpdate) SetFileType(i int) *FileUpdate {
	fu.mutation.ResetFileType()
	fu.mutation.SetFileType(i)
	return fu
}

// SetNillableFileType sets the "file_type" field if the given value is not nil.
func (fu *FileUpdate) SetNillableFileType(i *int) *FileUpdate {
	if i != nil {
		fu.SetFileType(*i)
	}
	return fu
}

// AddFileType adds i to the "file_type" field.
func (fu *FileUpdate) AddFileType(i int) *FileUpdate {
	fu.mutation.AddFileType(i)
	return fu
}

// SetFileSha1 sets the "file_sha1" field.
func (fu *FileUpdate) SetFileSha1(s string) *FileUpdate {
	fu.mutation.SetFileSha1(s)
	return fu
}

// SetNillableFileSha1 sets the "file_sha1" field if the given value is not nil.
func (fu *FileUpdate) SetNillableFileSha1(s *string) *FileUpdate {
	if s != nil {
		fu.SetFileSha1(*s)
	}
	return fu
}

// SetFilePath sets the "file_path" field.
func (fu *FileUpdate) SetFilePath(s string) *FileUpdate {
	fu.mutation.SetFilePath(s)
	return fu
}

// SetNillableFilePath sets the "file_path" field if the given value is not nil.
func (fu *FileUpdate) SetNillableFilePath(s *string) *FileUpdate {
	if s != nil {
		fu.SetFilePath(*s)
	}
	return fu
}

// SetMimeType sets the "mime_type" field.
func (fu *FileUpdate) SetMimeType(s string) *FileUpdate {
	fu.mutation.SetMimeType(s)
	return fu
}

// SetNillableMimeType sets the "mime_type" field if the given value is not nil.
func (fu *FileUpdate) SetNillableMimeType(s *string) *FileUpdate {
	if s != nil {
		fu.SetMimeType(*s)
	}
	return fu
}

// SetFileSuffix sets the "file_suffix" field.
func (fu *FileUpdate) SetFileSuffix(s string) *FileUpdate {
	fu.mutation.SetFileSuffix(s)
	return fu
}

// SetNillableFileSuffix sets the "file_suffix" field if the given value is not nil.
func (fu *FileUpdate) SetNillableFileSuffix(s *string) *FileUpdate {
	if s != nil {
		fu.SetFileSuffix(*s)
	}
	return fu
}

// SetUpdateTime sets the "update_time" field.
func (fu *FileUpdate) SetUpdateTime(t time.Time) *FileUpdate {
	fu.mutation.SetUpdateTime(t)
	return fu
}

// Mutation returns the FileMutation object of the builder.
func (fu *FileUpdate) Mutation() *FileMutation {
	return fu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FileUpdate) Save(ctx context.Context) (int, error) {
	fu.defaults()
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FileUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FileUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FileUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fu *FileUpdate) defaults() {
	if _, ok := fu.mutation.UpdateTime(); !ok {
		v := file.UpdateDefaultUpdateTime()
		fu.mutation.SetUpdateTime(v)
	}
}

func (fu *FileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(file.Table, file.Columns, sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.StorageType(); ok {
		_spec.SetField(file.FieldStorageType, field.TypeInt, value)
	}
	if value, ok := fu.mutation.AddedStorageType(); ok {
		_spec.AddField(file.FieldStorageType, field.TypeInt, value)
	}
	if value, ok := fu.mutation.CreatorID(); ok {
		_spec.SetField(file.FieldCreatorID, field.TypeInt, value)
	}
	if value, ok := fu.mutation.AddedCreatorID(); ok {
		_spec.AddField(file.FieldCreatorID, field.TypeInt, value)
	}
	if value, ok := fu.mutation.ScenicAreaID(); ok {
		_spec.SetField(file.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := fu.mutation.AddedScenicAreaID(); ok {
		_spec.AddField(file.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := fu.mutation.FileCategory(); ok {
		_spec.SetField(file.FieldFileCategory, field.TypeInt, value)
	}
	if value, ok := fu.mutation.AddedFileCategory(); ok {
		_spec.AddField(file.FieldFileCategory, field.TypeInt, value)
	}
	if value, ok := fu.mutation.FileType(); ok {
		_spec.SetField(file.FieldFileType, field.TypeInt, value)
	}
	if value, ok := fu.mutation.AddedFileType(); ok {
		_spec.AddField(file.FieldFileType, field.TypeInt, value)
	}
	if value, ok := fu.mutation.FileSha1(); ok {
		_spec.SetField(file.FieldFileSha1, field.TypeString, value)
	}
	if value, ok := fu.mutation.FilePath(); ok {
		_spec.SetField(file.FieldFilePath, field.TypeString, value)
	}
	if value, ok := fu.mutation.MimeType(); ok {
		_spec.SetField(file.FieldMimeType, field.TypeString, value)
	}
	if value, ok := fu.mutation.FileSuffix(); ok {
		_spec.SetField(file.FieldFileSuffix, field.TypeString, value)
	}
	if value, ok := fu.mutation.UpdateTime(); ok {
		_spec.SetField(file.FieldUpdateTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{file.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FileUpdateOne is the builder for updating a single File entity.
type FileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FileMutation
}

// SetStorageType sets the "storage_type" field.
func (fuo *FileUpdateOne) SetStorageType(i int) *FileUpdateOne {
	fuo.mutation.ResetStorageType()
	fuo.mutation.SetStorageType(i)
	return fuo
}

// SetNillableStorageType sets the "storage_type" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableStorageType(i *int) *FileUpdateOne {
	if i != nil {
		fuo.SetStorageType(*i)
	}
	return fuo
}

// AddStorageType adds i to the "storage_type" field.
func (fuo *FileUpdateOne) AddStorageType(i int) *FileUpdateOne {
	fuo.mutation.AddStorageType(i)
	return fuo
}

// SetCreatorID sets the "creator_id" field.
func (fuo *FileUpdateOne) SetCreatorID(i int) *FileUpdateOne {
	fuo.mutation.ResetCreatorID()
	fuo.mutation.SetCreatorID(i)
	return fuo
}

// SetNillableCreatorID sets the "creator_id" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableCreatorID(i *int) *FileUpdateOne {
	if i != nil {
		fuo.SetCreatorID(*i)
	}
	return fuo
}

// AddCreatorID adds i to the "creator_id" field.
func (fuo *FileUpdateOne) AddCreatorID(i int) *FileUpdateOne {
	fuo.mutation.AddCreatorID(i)
	return fuo
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (fuo *FileUpdateOne) SetScenicAreaID(i int) *FileUpdateOne {
	fuo.mutation.ResetScenicAreaID()
	fuo.mutation.SetScenicAreaID(i)
	return fuo
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableScenicAreaID(i *int) *FileUpdateOne {
	if i != nil {
		fuo.SetScenicAreaID(*i)
	}
	return fuo
}

// AddScenicAreaID adds i to the "scenic_area_id" field.
func (fuo *FileUpdateOne) AddScenicAreaID(i int) *FileUpdateOne {
	fuo.mutation.AddScenicAreaID(i)
	return fuo
}

// SetFileCategory sets the "file_category" field.
func (fuo *FileUpdateOne) SetFileCategory(i int) *FileUpdateOne {
	fuo.mutation.ResetFileCategory()
	fuo.mutation.SetFileCategory(i)
	return fuo
}

// SetNillableFileCategory sets the "file_category" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableFileCategory(i *int) *FileUpdateOne {
	if i != nil {
		fuo.SetFileCategory(*i)
	}
	return fuo
}

// AddFileCategory adds i to the "file_category" field.
func (fuo *FileUpdateOne) AddFileCategory(i int) *FileUpdateOne {
	fuo.mutation.AddFileCategory(i)
	return fuo
}

// SetFileType sets the "file_type" field.
func (fuo *FileUpdateOne) SetFileType(i int) *FileUpdateOne {
	fuo.mutation.ResetFileType()
	fuo.mutation.SetFileType(i)
	return fuo
}

// SetNillableFileType sets the "file_type" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableFileType(i *int) *FileUpdateOne {
	if i != nil {
		fuo.SetFileType(*i)
	}
	return fuo
}

// AddFileType adds i to the "file_type" field.
func (fuo *FileUpdateOne) AddFileType(i int) *FileUpdateOne {
	fuo.mutation.AddFileType(i)
	return fuo
}

// SetFileSha1 sets the "file_sha1" field.
func (fuo *FileUpdateOne) SetFileSha1(s string) *FileUpdateOne {
	fuo.mutation.SetFileSha1(s)
	return fuo
}

// SetNillableFileSha1 sets the "file_sha1" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableFileSha1(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetFileSha1(*s)
	}
	return fuo
}

// SetFilePath sets the "file_path" field.
func (fuo *FileUpdateOne) SetFilePath(s string) *FileUpdateOne {
	fuo.mutation.SetFilePath(s)
	return fuo
}

// SetNillableFilePath sets the "file_path" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableFilePath(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetFilePath(*s)
	}
	return fuo
}

// SetMimeType sets the "mime_type" field.
func (fuo *FileUpdateOne) SetMimeType(s string) *FileUpdateOne {
	fuo.mutation.SetMimeType(s)
	return fuo
}

// SetNillableMimeType sets the "mime_type" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableMimeType(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetMimeType(*s)
	}
	return fuo
}

// SetFileSuffix sets the "file_suffix" field.
func (fuo *FileUpdateOne) SetFileSuffix(s string) *FileUpdateOne {
	fuo.mutation.SetFileSuffix(s)
	return fuo
}

// SetNillableFileSuffix sets the "file_suffix" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableFileSuffix(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetFileSuffix(*s)
	}
	return fuo
}

// SetUpdateTime sets the "update_time" field.
func (fuo *FileUpdateOne) SetUpdateTime(t time.Time) *FileUpdateOne {
	fuo.mutation.SetUpdateTime(t)
	return fuo
}

// Mutation returns the FileMutation object of the builder.
func (fuo *FileUpdateOne) Mutation() *FileMutation {
	return fuo.mutation
}

// Where appends a list predicates to the FileUpdate builder.
func (fuo *FileUpdateOne) Where(ps ...predicate.File) *FileUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FileUpdateOne) Select(field string, fields ...string) *FileUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated File entity.
func (fuo *FileUpdateOne) Save(ctx context.Context) (*File, error) {
	fuo.defaults()
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FileUpdateOne) SaveX(ctx context.Context) *File {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FileUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FileUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuo *FileUpdateOne) defaults() {
	if _, ok := fuo.mutation.UpdateTime(); !ok {
		v := file.UpdateDefaultUpdateTime()
		fuo.mutation.SetUpdateTime(v)
	}
}

func (fuo *FileUpdateOne) sqlSave(ctx context.Context) (_node *File, err error) {
	_spec := sqlgraph.NewUpdateSpec(file.Table, file.Columns, sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "File.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, file.FieldID)
		for _, f := range fields {
			if !file.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != file.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.StorageType(); ok {
		_spec.SetField(file.FieldStorageType, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.AddedStorageType(); ok {
		_spec.AddField(file.FieldStorageType, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.CreatorID(); ok {
		_spec.SetField(file.FieldCreatorID, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.AddedCreatorID(); ok {
		_spec.AddField(file.FieldCreatorID, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.ScenicAreaID(); ok {
		_spec.SetField(file.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.AddedScenicAreaID(); ok {
		_spec.AddField(file.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.FileCategory(); ok {
		_spec.SetField(file.FieldFileCategory, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.AddedFileCategory(); ok {
		_spec.AddField(file.FieldFileCategory, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.FileType(); ok {
		_spec.SetField(file.FieldFileType, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.AddedFileType(); ok {
		_spec.AddField(file.FieldFileType, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.FileSha1(); ok {
		_spec.SetField(file.FieldFileSha1, field.TypeString, value)
	}
	if value, ok := fuo.mutation.FilePath(); ok {
		_spec.SetField(file.FieldFilePath, field.TypeString, value)
	}
	if value, ok := fuo.mutation.MimeType(); ok {
		_spec.SetField(file.FieldMimeType, field.TypeString, value)
	}
	if value, ok := fuo.mutation.FileSuffix(); ok {
		_spec.SetField(file.FieldFileSuffix, field.TypeString, value)
	}
	if value, ok := fuo.mutation.UpdateTime(); ok {
		_spec.SetField(file.FieldUpdateTime, field.TypeTime, value)
	}
	_node = &File{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{file.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
