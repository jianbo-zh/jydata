// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/orderextendflight"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderExtendFlightCreate is the builder for creating a OrderExtendFlight entity.
type OrderExtendFlightCreate struct {
	config
	mutation *OrderExtendFlightMutation
	hooks    []Hook
}

// SetOrderID sets the "order_id" field.
func (oefc *OrderExtendFlightCreate) SetOrderID(i int) *OrderExtendFlightCreate {
	oefc.mutation.SetOrderID(i)
	return oefc
}

// SetFlightID sets the "flight_id" field.
func (oefc *OrderExtendFlightCreate) SetFlightID(i int) *OrderExtendFlightCreate {
	oefc.mutation.SetFlightID(i)
	return oefc
}

// SetNillableFlightID sets the "flight_id" field if the given value is not nil.
func (oefc *OrderExtendFlightCreate) SetNillableFlightID(i *int) *OrderExtendFlightCreate {
	if i != nil {
		oefc.SetFlightID(*i)
	}
	return oefc
}

// SetFlightNo sets the "flight_no" field.
func (oefc *OrderExtendFlightCreate) SetFlightNo(s string) *OrderExtendFlightCreate {
	oefc.mutation.SetFlightNo(s)
	return oefc
}

// SetNillableFlightNo sets the "flight_no" field if the given value is not nil.
func (oefc *OrderExtendFlightCreate) SetNillableFlightNo(s *string) *OrderExtendFlightCreate {
	if s != nil {
		oefc.SetFlightNo(*s)
	}
	return oefc
}

// SetStopIds sets the "stop_ids" field.
func (oefc *OrderExtendFlightCreate) SetStopIds(i []int) *OrderExtendFlightCreate {
	oefc.mutation.SetStopIds(i)
	return oefc
}

// SetTicketCount sets the "ticket_count" field.
func (oefc *OrderExtendFlightCreate) SetTicketCount(i int) *OrderExtendFlightCreate {
	oefc.mutation.SetTicketCount(i)
	return oefc
}

// SetNillableTicketCount sets the "ticket_count" field if the given value is not nil.
func (oefc *OrderExtendFlightCreate) SetNillableTicketCount(i *int) *OrderExtendFlightCreate {
	if i != nil {
		oefc.SetTicketCount(*i)
	}
	return oefc
}

// SetCreateTime sets the "create_time" field.
func (oefc *OrderExtendFlightCreate) SetCreateTime(t time.Time) *OrderExtendFlightCreate {
	oefc.mutation.SetCreateTime(t)
	return oefc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (oefc *OrderExtendFlightCreate) SetNillableCreateTime(t *time.Time) *OrderExtendFlightCreate {
	if t != nil {
		oefc.SetCreateTime(*t)
	}
	return oefc
}

// SetUpdateTime sets the "update_time" field.
func (oefc *OrderExtendFlightCreate) SetUpdateTime(t time.Time) *OrderExtendFlightCreate {
	oefc.mutation.SetUpdateTime(t)
	return oefc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (oefc *OrderExtendFlightCreate) SetNillableUpdateTime(t *time.Time) *OrderExtendFlightCreate {
	if t != nil {
		oefc.SetUpdateTime(*t)
	}
	return oefc
}

// SetID sets the "id" field.
func (oefc *OrderExtendFlightCreate) SetID(i int) *OrderExtendFlightCreate {
	oefc.mutation.SetID(i)
	return oefc
}

// Mutation returns the OrderExtendFlightMutation object of the builder.
func (oefc *OrderExtendFlightCreate) Mutation() *OrderExtendFlightMutation {
	return oefc.mutation
}

// Save creates the OrderExtendFlight in the database.
func (oefc *OrderExtendFlightCreate) Save(ctx context.Context) (*OrderExtendFlight, error) {
	oefc.defaults()
	return withHooks(ctx, oefc.sqlSave, oefc.mutation, oefc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oefc *OrderExtendFlightCreate) SaveX(ctx context.Context) *OrderExtendFlight {
	v, err := oefc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oefc *OrderExtendFlightCreate) Exec(ctx context.Context) error {
	_, err := oefc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oefc *OrderExtendFlightCreate) ExecX(ctx context.Context) {
	if err := oefc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oefc *OrderExtendFlightCreate) defaults() {
	if _, ok := oefc.mutation.FlightID(); !ok {
		v := orderextendflight.DefaultFlightID
		oefc.mutation.SetFlightID(v)
	}
	if _, ok := oefc.mutation.FlightNo(); !ok {
		v := orderextendflight.DefaultFlightNo
		oefc.mutation.SetFlightNo(v)
	}
	if _, ok := oefc.mutation.TicketCount(); !ok {
		v := orderextendflight.DefaultTicketCount
		oefc.mutation.SetTicketCount(v)
	}
	if _, ok := oefc.mutation.CreateTime(); !ok {
		v := orderextendflight.DefaultCreateTime()
		oefc.mutation.SetCreateTime(v)
	}
	if _, ok := oefc.mutation.UpdateTime(); !ok {
		v := orderextendflight.DefaultUpdateTime()
		oefc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oefc *OrderExtendFlightCreate) check() error {
	if _, ok := oefc.mutation.OrderID(); !ok {
		return &ValidationError{Name: "order_id", err: errors.New(`ent: missing required field "OrderExtendFlight.order_id"`)}
	}
	if _, ok := oefc.mutation.FlightID(); !ok {
		return &ValidationError{Name: "flight_id", err: errors.New(`ent: missing required field "OrderExtendFlight.flight_id"`)}
	}
	if _, ok := oefc.mutation.FlightNo(); !ok {
		return &ValidationError{Name: "flight_no", err: errors.New(`ent: missing required field "OrderExtendFlight.flight_no"`)}
	}
	if _, ok := oefc.mutation.StopIds(); !ok {
		return &ValidationError{Name: "stop_ids", err: errors.New(`ent: missing required field "OrderExtendFlight.stop_ids"`)}
	}
	if _, ok := oefc.mutation.TicketCount(); !ok {
		return &ValidationError{Name: "ticket_count", err: errors.New(`ent: missing required field "OrderExtendFlight.ticket_count"`)}
	}
	if _, ok := oefc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "OrderExtendFlight.create_time"`)}
	}
	if _, ok := oefc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "OrderExtendFlight.update_time"`)}
	}
	return nil
}

func (oefc *OrderExtendFlightCreate) sqlSave(ctx context.Context) (*OrderExtendFlight, error) {
	if err := oefc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oefc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oefc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	oefc.mutation.id = &_node.ID
	oefc.mutation.done = true
	return _node, nil
}

func (oefc *OrderExtendFlightCreate) createSpec() (*OrderExtendFlight, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderExtendFlight{config: oefc.config}
		_spec = sqlgraph.NewCreateSpec(orderextendflight.Table, sqlgraph.NewFieldSpec(orderextendflight.FieldID, field.TypeInt))
	)
	if id, ok := oefc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := oefc.mutation.OrderID(); ok {
		_spec.SetField(orderextendflight.FieldOrderID, field.TypeInt, value)
		_node.OrderID = value
	}
	if value, ok := oefc.mutation.FlightID(); ok {
		_spec.SetField(orderextendflight.FieldFlightID, field.TypeInt, value)
		_node.FlightID = value
	}
	if value, ok := oefc.mutation.FlightNo(); ok {
		_spec.SetField(orderextendflight.FieldFlightNo, field.TypeString, value)
		_node.FlightNo = value
	}
	if value, ok := oefc.mutation.StopIds(); ok {
		_spec.SetField(orderextendflight.FieldStopIds, field.TypeJSON, value)
		_node.StopIds = value
	}
	if value, ok := oefc.mutation.TicketCount(); ok {
		_spec.SetField(orderextendflight.FieldTicketCount, field.TypeInt, value)
		_node.TicketCount = value
	}
	if value, ok := oefc.mutation.CreateTime(); ok {
		_spec.SetField(orderextendflight.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := oefc.mutation.UpdateTime(); ok {
		_spec.SetField(orderextendflight.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// OrderExtendFlightCreateBulk is the builder for creating many OrderExtendFlight entities in bulk.
type OrderExtendFlightCreateBulk struct {
	config
	err      error
	builders []*OrderExtendFlightCreate
}

// Save creates the OrderExtendFlight entities in the database.
func (oefcb *OrderExtendFlightCreateBulk) Save(ctx context.Context) ([]*OrderExtendFlight, error) {
	if oefcb.err != nil {
		return nil, oefcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(oefcb.builders))
	nodes := make([]*OrderExtendFlight, len(oefcb.builders))
	mutators := make([]Mutator, len(oefcb.builders))
	for i := range oefcb.builders {
		func(i int, root context.Context) {
			builder := oefcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderExtendFlightMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oefcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oefcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oefcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oefcb *OrderExtendFlightCreateBulk) SaveX(ctx context.Context) []*OrderExtendFlight {
	v, err := oefcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oefcb *OrderExtendFlightCreateBulk) Exec(ctx context.Context) error {
	_, err := oefcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oefcb *OrderExtendFlightCreateBulk) ExecX(ctx context.Context) {
	if err := oefcb.Exec(ctx); err != nil {
		panic(err)
	}
}
