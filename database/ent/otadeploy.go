// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jianbo-zh/jydata/database/ent/otadeploy"
	"github.com/jianbo-zh/jydata/database/schema/types"
)

// OtaDeploy is the model entity for the OtaDeploy schema.
type OtaDeploy struct {
	config `json:"-"`
	// ID of the ent.
	// ID
	ID int `json:"id,omitempty"`
	// DeleteTime holds the value of the "delete_time" field.
	DeleteTime time.Time `json:"delete_time,omitempty"`
	// UUID
	UUID int64 `json:"uuid,omitempty"`
	// 车辆ID
	CarID int `json:"car_id,omitempty"`
	// 车辆名称
	CarName string `json:"car_name,omitempty"`
	// 设备ID
	DeviceID string `json:"device_id,omitempty"`
	// OTA版本ID
	OtaVersionID int `json:"ota_version_id,omitempty"`
	// OTA版本名称
	OtaVersionName string `json:"ota_version_name,omitempty"`
	// OTA版本号
	OtaVersionNumber string `json:"ota_version_number,omitempty"`
	// 升级状态(1-升级中 2-升级成功 3-升级失败)
	State int `json:"state,omitempty"`
	// 升级失败描述
	Errmsg string `json:"errmsg,omitempty"`
	// OTA升级进度
	Process types.OtaProcess `json:"process,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime   time.Time `json:"update_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OtaDeploy) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case otadeploy.FieldProcess:
			values[i] = new([]byte)
		case otadeploy.FieldID, otadeploy.FieldUUID, otadeploy.FieldCarID, otadeploy.FieldOtaVersionID, otadeploy.FieldState:
			values[i] = new(sql.NullInt64)
		case otadeploy.FieldCarName, otadeploy.FieldDeviceID, otadeploy.FieldOtaVersionName, otadeploy.FieldOtaVersionNumber, otadeploy.FieldErrmsg:
			values[i] = new(sql.NullString)
		case otadeploy.FieldDeleteTime, otadeploy.FieldCreateTime, otadeploy.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OtaDeploy fields.
func (od *OtaDeploy) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case otadeploy.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			od.ID = int(value.Int64)
		case otadeploy.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				od.DeleteTime = value.Time
			}
		case otadeploy.FieldUUID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				od.UUID = value.Int64
			}
		case otadeploy.FieldCarID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field car_id", values[i])
			} else if value.Valid {
				od.CarID = int(value.Int64)
			}
		case otadeploy.FieldCarName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field car_name", values[i])
			} else if value.Valid {
				od.CarName = value.String
			}
		case otadeploy.FieldDeviceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device_id", values[i])
			} else if value.Valid {
				od.DeviceID = value.String
			}
		case otadeploy.FieldOtaVersionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ota_version_id", values[i])
			} else if value.Valid {
				od.OtaVersionID = int(value.Int64)
			}
		case otadeploy.FieldOtaVersionName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ota_version_name", values[i])
			} else if value.Valid {
				od.OtaVersionName = value.String
			}
		case otadeploy.FieldOtaVersionNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ota_version_number", values[i])
			} else if value.Valid {
				od.OtaVersionNumber = value.String
			}
		case otadeploy.FieldState:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				od.State = int(value.Int64)
			}
		case otadeploy.FieldErrmsg:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field errmsg", values[i])
			} else if value.Valid {
				od.Errmsg = value.String
			}
		case otadeploy.FieldProcess:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field process", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &od.Process); err != nil {
					return fmt.Errorf("unmarshal field process: %w", err)
				}
			}
		case otadeploy.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				od.CreateTime = value.Time
			}
		case otadeploy.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				od.UpdateTime = value.Time
			}
		default:
			od.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OtaDeploy.
// This includes values selected through modifiers, order, etc.
func (od *OtaDeploy) Value(name string) (ent.Value, error) {
	return od.selectValues.Get(name)
}

// Update returns a builder for updating this OtaDeploy.
// Note that you need to call OtaDeploy.Unwrap() before calling this method if this OtaDeploy
// was returned from a transaction, and the transaction was committed or rolled back.
func (od *OtaDeploy) Update() *OtaDeployUpdateOne {
	return NewOtaDeployClient(od.config).UpdateOne(od)
}

// Unwrap unwraps the OtaDeploy entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (od *OtaDeploy) Unwrap() *OtaDeploy {
	_tx, ok := od.config.driver.(*txDriver)
	if !ok {
		panic("ent: OtaDeploy is not a transactional entity")
	}
	od.config.driver = _tx.drv
	return od
}

// String implements the fmt.Stringer.
func (od *OtaDeploy) String() string {
	var builder strings.Builder
	builder.WriteString("OtaDeploy(")
	builder.WriteString(fmt.Sprintf("id=%v, ", od.ID))
	builder.WriteString("delete_time=")
	builder.WriteString(od.DeleteTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("uuid=")
	builder.WriteString(fmt.Sprintf("%v", od.UUID))
	builder.WriteString(", ")
	builder.WriteString("car_id=")
	builder.WriteString(fmt.Sprintf("%v", od.CarID))
	builder.WriteString(", ")
	builder.WriteString("car_name=")
	builder.WriteString(od.CarName)
	builder.WriteString(", ")
	builder.WriteString("device_id=")
	builder.WriteString(od.DeviceID)
	builder.WriteString(", ")
	builder.WriteString("ota_version_id=")
	builder.WriteString(fmt.Sprintf("%v", od.OtaVersionID))
	builder.WriteString(", ")
	builder.WriteString("ota_version_name=")
	builder.WriteString(od.OtaVersionName)
	builder.WriteString(", ")
	builder.WriteString("ota_version_number=")
	builder.WriteString(od.OtaVersionNumber)
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(fmt.Sprintf("%v", od.State))
	builder.WriteString(", ")
	builder.WriteString("errmsg=")
	builder.WriteString(od.Errmsg)
	builder.WriteString(", ")
	builder.WriteString("process=")
	builder.WriteString(fmt.Sprintf("%v", od.Process))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(od.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(od.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// OtaDeploys is a parsable slice of OtaDeploy.
type OtaDeploys []*OtaDeploy
