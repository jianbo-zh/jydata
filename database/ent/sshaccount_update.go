// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"github.com/jianbo-zh/jydata/database/ent/sshaccount"
)

// SshAccountUpdate is the builder for updating SshAccount entities.
type SshAccountUpdate struct {
	config
	hooks    []Hook
	mutation *SshAccountMutation
}

// Where appends a list predicates to the SshAccountUpdate builder.
func (sau *SshAccountUpdate) Where(ps ...predicate.SshAccount) *SshAccountUpdate {
	sau.mutation.Where(ps...)
	return sau
}

// SetDeleteTime sets the "delete_time" field.
func (sau *SshAccountUpdate) SetDeleteTime(t time.Time) *SshAccountUpdate {
	sau.mutation.SetDeleteTime(t)
	return sau
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (sau *SshAccountUpdate) SetNillableDeleteTime(t *time.Time) *SshAccountUpdate {
	if t != nil {
		sau.SetDeleteTime(*t)
	}
	return sau
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (sau *SshAccountUpdate) ClearDeleteTime() *SshAccountUpdate {
	sau.mutation.ClearDeleteTime()
	return sau
}

// SetType sets the "type" field.
func (sau *SshAccountUpdate) SetType(s string) *SshAccountUpdate {
	sau.mutation.SetType(s)
	return sau
}

// SetNillableType sets the "type" field if the given value is not nil.
func (sau *SshAccountUpdate) SetNillableType(s *string) *SshAccountUpdate {
	if s != nil {
		sau.SetType(*s)
	}
	return sau
}

// SetUsername sets the "username" field.
func (sau *SshAccountUpdate) SetUsername(s string) *SshAccountUpdate {
	sau.mutation.SetUsername(s)
	return sau
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (sau *SshAccountUpdate) SetNillableUsername(s *string) *SshAccountUpdate {
	if s != nil {
		sau.SetUsername(*s)
	}
	return sau
}

// SetPassword sets the "password" field.
func (sau *SshAccountUpdate) SetPassword(s string) *SshAccountUpdate {
	sau.mutation.SetPassword(s)
	return sau
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (sau *SshAccountUpdate) SetNillablePassword(s *string) *SshAccountUpdate {
	if s != nil {
		sau.SetPassword(*s)
	}
	return sau
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (sau *SshAccountUpdate) SetScenicAreaID(i int) *SshAccountUpdate {
	sau.mutation.ResetScenicAreaID()
	sau.mutation.SetScenicAreaID(i)
	return sau
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (sau *SshAccountUpdate) SetNillableScenicAreaID(i *int) *SshAccountUpdate {
	if i != nil {
		sau.SetScenicAreaID(*i)
	}
	return sau
}

// AddScenicAreaID adds i to the "scenic_area_id" field.
func (sau *SshAccountUpdate) AddScenicAreaID(i int) *SshAccountUpdate {
	sau.mutation.AddScenicAreaID(i)
	return sau
}

// ClearScenicAreaID clears the value of the "scenic_area_id" field.
func (sau *SshAccountUpdate) ClearScenicAreaID() *SshAccountUpdate {
	sau.mutation.ClearScenicAreaID()
	return sau
}

// SetCarID sets the "car_id" field.
func (sau *SshAccountUpdate) SetCarID(i int) *SshAccountUpdate {
	sau.mutation.ResetCarID()
	sau.mutation.SetCarID(i)
	return sau
}

// SetNillableCarID sets the "car_id" field if the given value is not nil.
func (sau *SshAccountUpdate) SetNillableCarID(i *int) *SshAccountUpdate {
	if i != nil {
		sau.SetCarID(*i)
	}
	return sau
}

// AddCarID adds i to the "car_id" field.
func (sau *SshAccountUpdate) AddCarID(i int) *SshAccountUpdate {
	sau.mutation.AddCarID(i)
	return sau
}

// ClearCarID clears the value of the "car_id" field.
func (sau *SshAccountUpdate) ClearCarID() *SshAccountUpdate {
	sau.mutation.ClearCarID()
	return sau
}

// SetState sets the "state" field.
func (sau *SshAccountUpdate) SetState(i int) *SshAccountUpdate {
	sau.mutation.ResetState()
	sau.mutation.SetState(i)
	return sau
}

// SetNillableState sets the "state" field if the given value is not nil.
func (sau *SshAccountUpdate) SetNillableState(i *int) *SshAccountUpdate {
	if i != nil {
		sau.SetState(*i)
	}
	return sau
}

// AddState adds i to the "state" field.
func (sau *SshAccountUpdate) AddState(i int) *SshAccountUpdate {
	sau.mutation.AddState(i)
	return sau
}

// SetUseTime sets the "use_time" field.
func (sau *SshAccountUpdate) SetUseTime(t time.Time) *SshAccountUpdate {
	sau.mutation.SetUseTime(t)
	return sau
}

// SetNillableUseTime sets the "use_time" field if the given value is not nil.
func (sau *SshAccountUpdate) SetNillableUseTime(t *time.Time) *SshAccountUpdate {
	if t != nil {
		sau.SetUseTime(*t)
	}
	return sau
}

// ClearUseTime clears the value of the "use_time" field.
func (sau *SshAccountUpdate) ClearUseTime() *SshAccountUpdate {
	sau.mutation.ClearUseTime()
	return sau
}

// SetUpdateTime sets the "update_time" field.
func (sau *SshAccountUpdate) SetUpdateTime(t time.Time) *SshAccountUpdate {
	sau.mutation.SetUpdateTime(t)
	return sau
}

// Mutation returns the SshAccountMutation object of the builder.
func (sau *SshAccountUpdate) Mutation() *SshAccountMutation {
	return sau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sau *SshAccountUpdate) Save(ctx context.Context) (int, error) {
	if err := sau.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, sau.sqlSave, sau.mutation, sau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sau *SshAccountUpdate) SaveX(ctx context.Context) int {
	affected, err := sau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sau *SshAccountUpdate) Exec(ctx context.Context) error {
	_, err := sau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sau *SshAccountUpdate) ExecX(ctx context.Context) {
	if err := sau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sau *SshAccountUpdate) defaults() error {
	if _, ok := sau.mutation.UpdateTime(); !ok {
		if sshaccount.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized sshaccount.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := sshaccount.UpdateDefaultUpdateTime()
		sau.mutation.SetUpdateTime(v)
	}
	return nil
}

func (sau *SshAccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(sshaccount.Table, sshaccount.Columns, sqlgraph.NewFieldSpec(sshaccount.FieldID, field.TypeInt))
	if ps := sau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sau.mutation.DeleteTime(); ok {
		_spec.SetField(sshaccount.FieldDeleteTime, field.TypeTime, value)
	}
	if sau.mutation.DeleteTimeCleared() {
		_spec.ClearField(sshaccount.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := sau.mutation.GetType(); ok {
		_spec.SetField(sshaccount.FieldType, field.TypeString, value)
	}
	if value, ok := sau.mutation.Username(); ok {
		_spec.SetField(sshaccount.FieldUsername, field.TypeString, value)
	}
	if value, ok := sau.mutation.Password(); ok {
		_spec.SetField(sshaccount.FieldPassword, field.TypeString, value)
	}
	if value, ok := sau.mutation.ScenicAreaID(); ok {
		_spec.SetField(sshaccount.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := sau.mutation.AddedScenicAreaID(); ok {
		_spec.AddField(sshaccount.FieldScenicAreaID, field.TypeInt, value)
	}
	if sau.mutation.ScenicAreaIDCleared() {
		_spec.ClearField(sshaccount.FieldScenicAreaID, field.TypeInt)
	}
	if value, ok := sau.mutation.CarID(); ok {
		_spec.SetField(sshaccount.FieldCarID, field.TypeInt, value)
	}
	if value, ok := sau.mutation.AddedCarID(); ok {
		_spec.AddField(sshaccount.FieldCarID, field.TypeInt, value)
	}
	if sau.mutation.CarIDCleared() {
		_spec.ClearField(sshaccount.FieldCarID, field.TypeInt)
	}
	if value, ok := sau.mutation.State(); ok {
		_spec.SetField(sshaccount.FieldState, field.TypeInt, value)
	}
	if value, ok := sau.mutation.AddedState(); ok {
		_spec.AddField(sshaccount.FieldState, field.TypeInt, value)
	}
	if value, ok := sau.mutation.UseTime(); ok {
		_spec.SetField(sshaccount.FieldUseTime, field.TypeTime, value)
	}
	if sau.mutation.UseTimeCleared() {
		_spec.ClearField(sshaccount.FieldUseTime, field.TypeTime)
	}
	if value, ok := sau.mutation.UpdateTime(); ok {
		_spec.SetField(sshaccount.FieldUpdateTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sshaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sau.mutation.done = true
	return n, nil
}

// SshAccountUpdateOne is the builder for updating a single SshAccount entity.
type SshAccountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SshAccountMutation
}

// SetDeleteTime sets the "delete_time" field.
func (sauo *SshAccountUpdateOne) SetDeleteTime(t time.Time) *SshAccountUpdateOne {
	sauo.mutation.SetDeleteTime(t)
	return sauo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (sauo *SshAccountUpdateOne) SetNillableDeleteTime(t *time.Time) *SshAccountUpdateOne {
	if t != nil {
		sauo.SetDeleteTime(*t)
	}
	return sauo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (sauo *SshAccountUpdateOne) ClearDeleteTime() *SshAccountUpdateOne {
	sauo.mutation.ClearDeleteTime()
	return sauo
}

// SetType sets the "type" field.
func (sauo *SshAccountUpdateOne) SetType(s string) *SshAccountUpdateOne {
	sauo.mutation.SetType(s)
	return sauo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (sauo *SshAccountUpdateOne) SetNillableType(s *string) *SshAccountUpdateOne {
	if s != nil {
		sauo.SetType(*s)
	}
	return sauo
}

// SetUsername sets the "username" field.
func (sauo *SshAccountUpdateOne) SetUsername(s string) *SshAccountUpdateOne {
	sauo.mutation.SetUsername(s)
	return sauo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (sauo *SshAccountUpdateOne) SetNillableUsername(s *string) *SshAccountUpdateOne {
	if s != nil {
		sauo.SetUsername(*s)
	}
	return sauo
}

// SetPassword sets the "password" field.
func (sauo *SshAccountUpdateOne) SetPassword(s string) *SshAccountUpdateOne {
	sauo.mutation.SetPassword(s)
	return sauo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (sauo *SshAccountUpdateOne) SetNillablePassword(s *string) *SshAccountUpdateOne {
	if s != nil {
		sauo.SetPassword(*s)
	}
	return sauo
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (sauo *SshAccountUpdateOne) SetScenicAreaID(i int) *SshAccountUpdateOne {
	sauo.mutation.ResetScenicAreaID()
	sauo.mutation.SetScenicAreaID(i)
	return sauo
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (sauo *SshAccountUpdateOne) SetNillableScenicAreaID(i *int) *SshAccountUpdateOne {
	if i != nil {
		sauo.SetScenicAreaID(*i)
	}
	return sauo
}

// AddScenicAreaID adds i to the "scenic_area_id" field.
func (sauo *SshAccountUpdateOne) AddScenicAreaID(i int) *SshAccountUpdateOne {
	sauo.mutation.AddScenicAreaID(i)
	return sauo
}

// ClearScenicAreaID clears the value of the "scenic_area_id" field.
func (sauo *SshAccountUpdateOne) ClearScenicAreaID() *SshAccountUpdateOne {
	sauo.mutation.ClearScenicAreaID()
	return sauo
}

// SetCarID sets the "car_id" field.
func (sauo *SshAccountUpdateOne) SetCarID(i int) *SshAccountUpdateOne {
	sauo.mutation.ResetCarID()
	sauo.mutation.SetCarID(i)
	return sauo
}

// SetNillableCarID sets the "car_id" field if the given value is not nil.
func (sauo *SshAccountUpdateOne) SetNillableCarID(i *int) *SshAccountUpdateOne {
	if i != nil {
		sauo.SetCarID(*i)
	}
	return sauo
}

// AddCarID adds i to the "car_id" field.
func (sauo *SshAccountUpdateOne) AddCarID(i int) *SshAccountUpdateOne {
	sauo.mutation.AddCarID(i)
	return sauo
}

// ClearCarID clears the value of the "car_id" field.
func (sauo *SshAccountUpdateOne) ClearCarID() *SshAccountUpdateOne {
	sauo.mutation.ClearCarID()
	return sauo
}

// SetState sets the "state" field.
func (sauo *SshAccountUpdateOne) SetState(i int) *SshAccountUpdateOne {
	sauo.mutation.ResetState()
	sauo.mutation.SetState(i)
	return sauo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (sauo *SshAccountUpdateOne) SetNillableState(i *int) *SshAccountUpdateOne {
	if i != nil {
		sauo.SetState(*i)
	}
	return sauo
}

// AddState adds i to the "state" field.
func (sauo *SshAccountUpdateOne) AddState(i int) *SshAccountUpdateOne {
	sauo.mutation.AddState(i)
	return sauo
}

// SetUseTime sets the "use_time" field.
func (sauo *SshAccountUpdateOne) SetUseTime(t time.Time) *SshAccountUpdateOne {
	sauo.mutation.SetUseTime(t)
	return sauo
}

// SetNillableUseTime sets the "use_time" field if the given value is not nil.
func (sauo *SshAccountUpdateOne) SetNillableUseTime(t *time.Time) *SshAccountUpdateOne {
	if t != nil {
		sauo.SetUseTime(*t)
	}
	return sauo
}

// ClearUseTime clears the value of the "use_time" field.
func (sauo *SshAccountUpdateOne) ClearUseTime() *SshAccountUpdateOne {
	sauo.mutation.ClearUseTime()
	return sauo
}

// SetUpdateTime sets the "update_time" field.
func (sauo *SshAccountUpdateOne) SetUpdateTime(t time.Time) *SshAccountUpdateOne {
	sauo.mutation.SetUpdateTime(t)
	return sauo
}

// Mutation returns the SshAccountMutation object of the builder.
func (sauo *SshAccountUpdateOne) Mutation() *SshAccountMutation {
	return sauo.mutation
}

// Where appends a list predicates to the SshAccountUpdate builder.
func (sauo *SshAccountUpdateOne) Where(ps ...predicate.SshAccount) *SshAccountUpdateOne {
	sauo.mutation.Where(ps...)
	return sauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sauo *SshAccountUpdateOne) Select(field string, fields ...string) *SshAccountUpdateOne {
	sauo.fields = append([]string{field}, fields...)
	return sauo
}

// Save executes the query and returns the updated SshAccount entity.
func (sauo *SshAccountUpdateOne) Save(ctx context.Context) (*SshAccount, error) {
	if err := sauo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, sauo.sqlSave, sauo.mutation, sauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sauo *SshAccountUpdateOne) SaveX(ctx context.Context) *SshAccount {
	node, err := sauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sauo *SshAccountUpdateOne) Exec(ctx context.Context) error {
	_, err := sauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sauo *SshAccountUpdateOne) ExecX(ctx context.Context) {
	if err := sauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sauo *SshAccountUpdateOne) defaults() error {
	if _, ok := sauo.mutation.UpdateTime(); !ok {
		if sshaccount.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized sshaccount.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := sshaccount.UpdateDefaultUpdateTime()
		sauo.mutation.SetUpdateTime(v)
	}
	return nil
}

func (sauo *SshAccountUpdateOne) sqlSave(ctx context.Context) (_node *SshAccount, err error) {
	_spec := sqlgraph.NewUpdateSpec(sshaccount.Table, sshaccount.Columns, sqlgraph.NewFieldSpec(sshaccount.FieldID, field.TypeInt))
	id, ok := sauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SshAccount.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sshaccount.FieldID)
		for _, f := range fields {
			if !sshaccount.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sshaccount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sauo.mutation.DeleteTime(); ok {
		_spec.SetField(sshaccount.FieldDeleteTime, field.TypeTime, value)
	}
	if sauo.mutation.DeleteTimeCleared() {
		_spec.ClearField(sshaccount.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := sauo.mutation.GetType(); ok {
		_spec.SetField(sshaccount.FieldType, field.TypeString, value)
	}
	if value, ok := sauo.mutation.Username(); ok {
		_spec.SetField(sshaccount.FieldUsername, field.TypeString, value)
	}
	if value, ok := sauo.mutation.Password(); ok {
		_spec.SetField(sshaccount.FieldPassword, field.TypeString, value)
	}
	if value, ok := sauo.mutation.ScenicAreaID(); ok {
		_spec.SetField(sshaccount.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := sauo.mutation.AddedScenicAreaID(); ok {
		_spec.AddField(sshaccount.FieldScenicAreaID, field.TypeInt, value)
	}
	if sauo.mutation.ScenicAreaIDCleared() {
		_spec.ClearField(sshaccount.FieldScenicAreaID, field.TypeInt)
	}
	if value, ok := sauo.mutation.CarID(); ok {
		_spec.SetField(sshaccount.FieldCarID, field.TypeInt, value)
	}
	if value, ok := sauo.mutation.AddedCarID(); ok {
		_spec.AddField(sshaccount.FieldCarID, field.TypeInt, value)
	}
	if sauo.mutation.CarIDCleared() {
		_spec.ClearField(sshaccount.FieldCarID, field.TypeInt)
	}
	if value, ok := sauo.mutation.State(); ok {
		_spec.SetField(sshaccount.FieldState, field.TypeInt, value)
	}
	if value, ok := sauo.mutation.AddedState(); ok {
		_spec.AddField(sshaccount.FieldState, field.TypeInt, value)
	}
	if value, ok := sauo.mutation.UseTime(); ok {
		_spec.SetField(sshaccount.FieldUseTime, field.TypeTime, value)
	}
	if sauo.mutation.UseTimeCleared() {
		_spec.ClearField(sshaccount.FieldUseTime, field.TypeTime)
	}
	if value, ok := sauo.mutation.UpdateTime(); ok {
		_spec.SetField(sshaccount.FieldUpdateTime, field.TypeTime, value)
	}
	_node = &SshAccount{config: sauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sshaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sauo.mutation.done = true
	return _node, nil
}
