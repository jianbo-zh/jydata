// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/otadeploy"
	"github.com/jianbo-zh/jydata/database/schema/types"
)

// OtaDeployCreate is the builder for creating a OtaDeploy entity.
type OtaDeployCreate struct {
	config
	mutation *OtaDeployMutation
	hooks    []Hook
}

// SetDeleteTime sets the "delete_time" field.
func (odc *OtaDeployCreate) SetDeleteTime(t time.Time) *OtaDeployCreate {
	odc.mutation.SetDeleteTime(t)
	return odc
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (odc *OtaDeployCreate) SetNillableDeleteTime(t *time.Time) *OtaDeployCreate {
	if t != nil {
		odc.SetDeleteTime(*t)
	}
	return odc
}

// SetUUID sets the "uuid" field.
func (odc *OtaDeployCreate) SetUUID(i int64) *OtaDeployCreate {
	odc.mutation.SetUUID(i)
	return odc
}

// SetCarID sets the "car_id" field.
func (odc *OtaDeployCreate) SetCarID(i int) *OtaDeployCreate {
	odc.mutation.SetCarID(i)
	return odc
}

// SetCarName sets the "car_name" field.
func (odc *OtaDeployCreate) SetCarName(s string) *OtaDeployCreate {
	odc.mutation.SetCarName(s)
	return odc
}

// SetDeviceID sets the "device_id" field.
func (odc *OtaDeployCreate) SetDeviceID(s string) *OtaDeployCreate {
	odc.mutation.SetDeviceID(s)
	return odc
}

// SetOtaVersionID sets the "ota_version_id" field.
func (odc *OtaDeployCreate) SetOtaVersionID(i int) *OtaDeployCreate {
	odc.mutation.SetOtaVersionID(i)
	return odc
}

// SetOtaVersionName sets the "ota_version_name" field.
func (odc *OtaDeployCreate) SetOtaVersionName(s string) *OtaDeployCreate {
	odc.mutation.SetOtaVersionName(s)
	return odc
}

// SetOtaVersionNumber sets the "ota_version_number" field.
func (odc *OtaDeployCreate) SetOtaVersionNumber(s string) *OtaDeployCreate {
	odc.mutation.SetOtaVersionNumber(s)
	return odc
}

// SetState sets the "state" field.
func (odc *OtaDeployCreate) SetState(i int) *OtaDeployCreate {
	odc.mutation.SetState(i)
	return odc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (odc *OtaDeployCreate) SetNillableState(i *int) *OtaDeployCreate {
	if i != nil {
		odc.SetState(*i)
	}
	return odc
}

// SetErrmsg sets the "errmsg" field.
func (odc *OtaDeployCreate) SetErrmsg(s string) *OtaDeployCreate {
	odc.mutation.SetErrmsg(s)
	return odc
}

// SetNillableErrmsg sets the "errmsg" field if the given value is not nil.
func (odc *OtaDeployCreate) SetNillableErrmsg(s *string) *OtaDeployCreate {
	if s != nil {
		odc.SetErrmsg(*s)
	}
	return odc
}

// SetProgress sets the "progress" field.
func (odc *OtaDeployCreate) SetProgress(tp types.OtaProgress) *OtaDeployCreate {
	odc.mutation.SetProgress(tp)
	return odc
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (odc *OtaDeployCreate) SetNillableProgress(tp *types.OtaProgress) *OtaDeployCreate {
	if tp != nil {
		odc.SetProgress(*tp)
	}
	return odc
}

// SetCreateTime sets the "create_time" field.
func (odc *OtaDeployCreate) SetCreateTime(t time.Time) *OtaDeployCreate {
	odc.mutation.SetCreateTime(t)
	return odc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (odc *OtaDeployCreate) SetNillableCreateTime(t *time.Time) *OtaDeployCreate {
	if t != nil {
		odc.SetCreateTime(*t)
	}
	return odc
}

// SetUpdateTime sets the "update_time" field.
func (odc *OtaDeployCreate) SetUpdateTime(t time.Time) *OtaDeployCreate {
	odc.mutation.SetUpdateTime(t)
	return odc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (odc *OtaDeployCreate) SetNillableUpdateTime(t *time.Time) *OtaDeployCreate {
	if t != nil {
		odc.SetUpdateTime(*t)
	}
	return odc
}

// SetID sets the "id" field.
func (odc *OtaDeployCreate) SetID(i int) *OtaDeployCreate {
	odc.mutation.SetID(i)
	return odc
}

// Mutation returns the OtaDeployMutation object of the builder.
func (odc *OtaDeployCreate) Mutation() *OtaDeployMutation {
	return odc.mutation
}

// Save creates the OtaDeploy in the database.
func (odc *OtaDeployCreate) Save(ctx context.Context) (*OtaDeploy, error) {
	if err := odc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, odc.sqlSave, odc.mutation, odc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (odc *OtaDeployCreate) SaveX(ctx context.Context) *OtaDeploy {
	v, err := odc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (odc *OtaDeployCreate) Exec(ctx context.Context) error {
	_, err := odc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (odc *OtaDeployCreate) ExecX(ctx context.Context) {
	if err := odc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (odc *OtaDeployCreate) defaults() error {
	if _, ok := odc.mutation.State(); !ok {
		v := otadeploy.DefaultState
		odc.mutation.SetState(v)
	}
	if _, ok := odc.mutation.Errmsg(); !ok {
		v := otadeploy.DefaultErrmsg
		odc.mutation.SetErrmsg(v)
	}
	if _, ok := odc.mutation.CreateTime(); !ok {
		if otadeploy.DefaultCreateTime == nil {
			return fmt.Errorf("ent: uninitialized otadeploy.DefaultCreateTime (forgotten import ent/runtime?)")
		}
		v := otadeploy.DefaultCreateTime()
		odc.mutation.SetCreateTime(v)
	}
	if _, ok := odc.mutation.UpdateTime(); !ok {
		if otadeploy.DefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized otadeploy.DefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := otadeploy.DefaultUpdateTime()
		odc.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (odc *OtaDeployCreate) check() error {
	if _, ok := odc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`ent: missing required field "OtaDeploy.uuid"`)}
	}
	if _, ok := odc.mutation.CarID(); !ok {
		return &ValidationError{Name: "car_id", err: errors.New(`ent: missing required field "OtaDeploy.car_id"`)}
	}
	if _, ok := odc.mutation.CarName(); !ok {
		return &ValidationError{Name: "car_name", err: errors.New(`ent: missing required field "OtaDeploy.car_name"`)}
	}
	if _, ok := odc.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device_id", err: errors.New(`ent: missing required field "OtaDeploy.device_id"`)}
	}
	if _, ok := odc.mutation.OtaVersionID(); !ok {
		return &ValidationError{Name: "ota_version_id", err: errors.New(`ent: missing required field "OtaDeploy.ota_version_id"`)}
	}
	if _, ok := odc.mutation.OtaVersionName(); !ok {
		return &ValidationError{Name: "ota_version_name", err: errors.New(`ent: missing required field "OtaDeploy.ota_version_name"`)}
	}
	if _, ok := odc.mutation.OtaVersionNumber(); !ok {
		return &ValidationError{Name: "ota_version_number", err: errors.New(`ent: missing required field "OtaDeploy.ota_version_number"`)}
	}
	if _, ok := odc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "OtaDeploy.state"`)}
	}
	if _, ok := odc.mutation.Errmsg(); !ok {
		return &ValidationError{Name: "errmsg", err: errors.New(`ent: missing required field "OtaDeploy.errmsg"`)}
	}
	if _, ok := odc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "OtaDeploy.create_time"`)}
	}
	if _, ok := odc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "OtaDeploy.update_time"`)}
	}
	return nil
}

func (odc *OtaDeployCreate) sqlSave(ctx context.Context) (*OtaDeploy, error) {
	if err := odc.check(); err != nil {
		return nil, err
	}
	_node, _spec := odc.createSpec()
	if err := sqlgraph.CreateNode(ctx, odc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	odc.mutation.id = &_node.ID
	odc.mutation.done = true
	return _node, nil
}

func (odc *OtaDeployCreate) createSpec() (*OtaDeploy, *sqlgraph.CreateSpec) {
	var (
		_node = &OtaDeploy{config: odc.config}
		_spec = sqlgraph.NewCreateSpec(otadeploy.Table, sqlgraph.NewFieldSpec(otadeploy.FieldID, field.TypeInt))
	)
	if id, ok := odc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := odc.mutation.DeleteTime(); ok {
		_spec.SetField(otadeploy.FieldDeleteTime, field.TypeTime, value)
		_node.DeleteTime = value
	}
	if value, ok := odc.mutation.UUID(); ok {
		_spec.SetField(otadeploy.FieldUUID, field.TypeInt64, value)
		_node.UUID = value
	}
	if value, ok := odc.mutation.CarID(); ok {
		_spec.SetField(otadeploy.FieldCarID, field.TypeInt, value)
		_node.CarID = value
	}
	if value, ok := odc.mutation.CarName(); ok {
		_spec.SetField(otadeploy.FieldCarName, field.TypeString, value)
		_node.CarName = value
	}
	if value, ok := odc.mutation.DeviceID(); ok {
		_spec.SetField(otadeploy.FieldDeviceID, field.TypeString, value)
		_node.DeviceID = value
	}
	if value, ok := odc.mutation.OtaVersionID(); ok {
		_spec.SetField(otadeploy.FieldOtaVersionID, field.TypeInt, value)
		_node.OtaVersionID = value
	}
	if value, ok := odc.mutation.OtaVersionName(); ok {
		_spec.SetField(otadeploy.FieldOtaVersionName, field.TypeString, value)
		_node.OtaVersionName = value
	}
	if value, ok := odc.mutation.OtaVersionNumber(); ok {
		_spec.SetField(otadeploy.FieldOtaVersionNumber, field.TypeString, value)
		_node.OtaVersionNumber = value
	}
	if value, ok := odc.mutation.State(); ok {
		_spec.SetField(otadeploy.FieldState, field.TypeInt, value)
		_node.State = value
	}
	if value, ok := odc.mutation.Errmsg(); ok {
		_spec.SetField(otadeploy.FieldErrmsg, field.TypeString, value)
		_node.Errmsg = value
	}
	if value, ok := odc.mutation.Progress(); ok {
		_spec.SetField(otadeploy.FieldProgress, field.TypeJSON, value)
		_node.Progress = value
	}
	if value, ok := odc.mutation.CreateTime(); ok {
		_spec.SetField(otadeploy.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := odc.mutation.UpdateTime(); ok {
		_spec.SetField(otadeploy.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// OtaDeployCreateBulk is the builder for creating many OtaDeploy entities in bulk.
type OtaDeployCreateBulk struct {
	config
	err      error
	builders []*OtaDeployCreate
}

// Save creates the OtaDeploy entities in the database.
func (odcb *OtaDeployCreateBulk) Save(ctx context.Context) ([]*OtaDeploy, error) {
	if odcb.err != nil {
		return nil, odcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(odcb.builders))
	nodes := make([]*OtaDeploy, len(odcb.builders))
	mutators := make([]Mutator, len(odcb.builders))
	for i := range odcb.builders {
		func(i int, root context.Context) {
			builder := odcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OtaDeployMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, odcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, odcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, odcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (odcb *OtaDeployCreateBulk) SaveX(ctx context.Context) []*OtaDeploy {
	v, err := odcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (odcb *OtaDeployCreateBulk) Exec(ctx context.Context) error {
	_, err := odcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (odcb *OtaDeployCreateBulk) ExecX(ctx context.Context) {
	if err := odcb.Exec(ctx); err != nil {
		panic(err)
	}
}
