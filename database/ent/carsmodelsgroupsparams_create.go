// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/carsmodels"
	"github.com/jianbo-zh/jydata/database/ent/carsmodelsgroups"
	"github.com/jianbo-zh/jydata/database/ent/carsmodelsgroupsparams"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarsModelsGroupsParamsCreate is the builder for creating a CarsModelsGroupsParams entity.
type CarsModelsGroupsParamsCreate struct {
	config
	mutation *CarsModelsGroupsParamsMutation
	hooks    []Hook
}

// SetModelID sets the "model_id" field.
func (cmgpc *CarsModelsGroupsParamsCreate) SetModelID(i int) *CarsModelsGroupsParamsCreate {
	cmgpc.mutation.SetModelID(i)
	return cmgpc
}

// SetNillableModelID sets the "model_id" field if the given value is not nil.
func (cmgpc *CarsModelsGroupsParamsCreate) SetNillableModelID(i *int) *CarsModelsGroupsParamsCreate {
	if i != nil {
		cmgpc.SetModelID(*i)
	}
	return cmgpc
}

// SetGroupID sets the "group_id" field.
func (cmgpc *CarsModelsGroupsParamsCreate) SetGroupID(i int) *CarsModelsGroupsParamsCreate {
	cmgpc.mutation.SetGroupID(i)
	return cmgpc
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (cmgpc *CarsModelsGroupsParamsCreate) SetNillableGroupID(i *int) *CarsModelsGroupsParamsCreate {
	if i != nil {
		cmgpc.SetGroupID(*i)
	}
	return cmgpc
}

// SetParamRemark sets the "param_remark" field.
func (cmgpc *CarsModelsGroupsParamsCreate) SetParamRemark(s string) *CarsModelsGroupsParamsCreate {
	cmgpc.mutation.SetParamRemark(s)
	return cmgpc
}

// SetParamName sets the "param_name" field.
func (cmgpc *CarsModelsGroupsParamsCreate) SetParamName(s string) *CarsModelsGroupsParamsCreate {
	cmgpc.mutation.SetParamName(s)
	return cmgpc
}

// SetParamType sets the "param_type" field.
func (cmgpc *CarsModelsGroupsParamsCreate) SetParamType(ct carsmodelsgroupsparams.ParamType) *CarsModelsGroupsParamsCreate {
	cmgpc.mutation.SetParamType(ct)
	return cmgpc
}

// SetValueRange sets the "value_range" field.
func (cmgpc *CarsModelsGroupsParamsCreate) SetValueRange(s string) *CarsModelsGroupsParamsCreate {
	cmgpc.mutation.SetValueRange(s)
	return cmgpc
}

// SetNillableValueRange sets the "value_range" field if the given value is not nil.
func (cmgpc *CarsModelsGroupsParamsCreate) SetNillableValueRange(s *string) *CarsModelsGroupsParamsCreate {
	if s != nil {
		cmgpc.SetValueRange(*s)
	}
	return cmgpc
}

// SetStatus sets the "status" field.
func (cmgpc *CarsModelsGroupsParamsCreate) SetStatus(i int) *CarsModelsGroupsParamsCreate {
	cmgpc.mutation.SetStatus(i)
	return cmgpc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cmgpc *CarsModelsGroupsParamsCreate) SetNillableStatus(i *int) *CarsModelsGroupsParamsCreate {
	if i != nil {
		cmgpc.SetStatus(*i)
	}
	return cmgpc
}

// SetIsDeleted sets the "is_deleted" field.
func (cmgpc *CarsModelsGroupsParamsCreate) SetIsDeleted(i int) *CarsModelsGroupsParamsCreate {
	cmgpc.mutation.SetIsDeleted(i)
	return cmgpc
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (cmgpc *CarsModelsGroupsParamsCreate) SetNillableIsDeleted(i *int) *CarsModelsGroupsParamsCreate {
	if i != nil {
		cmgpc.SetIsDeleted(*i)
	}
	return cmgpc
}

// SetCreateTime sets the "create_time" field.
func (cmgpc *CarsModelsGroupsParamsCreate) SetCreateTime(t time.Time) *CarsModelsGroupsParamsCreate {
	cmgpc.mutation.SetCreateTime(t)
	return cmgpc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (cmgpc *CarsModelsGroupsParamsCreate) SetNillableCreateTime(t *time.Time) *CarsModelsGroupsParamsCreate {
	if t != nil {
		cmgpc.SetCreateTime(*t)
	}
	return cmgpc
}

// SetUpdateTime sets the "update_time" field.
func (cmgpc *CarsModelsGroupsParamsCreate) SetUpdateTime(t time.Time) *CarsModelsGroupsParamsCreate {
	cmgpc.mutation.SetUpdateTime(t)
	return cmgpc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (cmgpc *CarsModelsGroupsParamsCreate) SetNillableUpdateTime(t *time.Time) *CarsModelsGroupsParamsCreate {
	if t != nil {
		cmgpc.SetUpdateTime(*t)
	}
	return cmgpc
}

// SetID sets the "id" field.
func (cmgpc *CarsModelsGroupsParamsCreate) SetID(i int) *CarsModelsGroupsParamsCreate {
	cmgpc.mutation.SetID(i)
	return cmgpc
}

// SetModel sets the "model" edge to the CarsModels entity.
func (cmgpc *CarsModelsGroupsParamsCreate) SetModel(c *CarsModels) *CarsModelsGroupsParamsCreate {
	return cmgpc.SetModelID(c.ID)
}

// SetGroup sets the "group" edge to the CarsModelsGroups entity.
func (cmgpc *CarsModelsGroupsParamsCreate) SetGroup(c *CarsModelsGroups) *CarsModelsGroupsParamsCreate {
	return cmgpc.SetGroupID(c.ID)
}

// Mutation returns the CarsModelsGroupsParamsMutation object of the builder.
func (cmgpc *CarsModelsGroupsParamsCreate) Mutation() *CarsModelsGroupsParamsMutation {
	return cmgpc.mutation
}

// Save creates the CarsModelsGroupsParams in the database.
func (cmgpc *CarsModelsGroupsParamsCreate) Save(ctx context.Context) (*CarsModelsGroupsParams, error) {
	cmgpc.defaults()
	return withHooks(ctx, cmgpc.sqlSave, cmgpc.mutation, cmgpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cmgpc *CarsModelsGroupsParamsCreate) SaveX(ctx context.Context) *CarsModelsGroupsParams {
	v, err := cmgpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cmgpc *CarsModelsGroupsParamsCreate) Exec(ctx context.Context) error {
	_, err := cmgpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmgpc *CarsModelsGroupsParamsCreate) ExecX(ctx context.Context) {
	if err := cmgpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cmgpc *CarsModelsGroupsParamsCreate) defaults() {
	if _, ok := cmgpc.mutation.ModelID(); !ok {
		v := carsmodelsgroupsparams.DefaultModelID
		cmgpc.mutation.SetModelID(v)
	}
	if _, ok := cmgpc.mutation.GroupID(); !ok {
		v := carsmodelsgroupsparams.DefaultGroupID
		cmgpc.mutation.SetGroupID(v)
	}
	if _, ok := cmgpc.mutation.ValueRange(); !ok {
		v := carsmodelsgroupsparams.DefaultValueRange
		cmgpc.mutation.SetValueRange(v)
	}
	if _, ok := cmgpc.mutation.Status(); !ok {
		v := carsmodelsgroupsparams.DefaultStatus
		cmgpc.mutation.SetStatus(v)
	}
	if _, ok := cmgpc.mutation.IsDeleted(); !ok {
		v := carsmodelsgroupsparams.DefaultIsDeleted
		cmgpc.mutation.SetIsDeleted(v)
	}
	if _, ok := cmgpc.mutation.CreateTime(); !ok {
		v := carsmodelsgroupsparams.DefaultCreateTime()
		cmgpc.mutation.SetCreateTime(v)
	}
	if _, ok := cmgpc.mutation.UpdateTime(); !ok {
		v := carsmodelsgroupsparams.DefaultUpdateTime()
		cmgpc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmgpc *CarsModelsGroupsParamsCreate) check() error {
	if _, ok := cmgpc.mutation.ModelID(); !ok {
		return &ValidationError{Name: "model_id", err: errors.New(`ent: missing required field "CarsModelsGroupsParams.model_id"`)}
	}
	if _, ok := cmgpc.mutation.GroupID(); !ok {
		return &ValidationError{Name: "group_id", err: errors.New(`ent: missing required field "CarsModelsGroupsParams.group_id"`)}
	}
	if _, ok := cmgpc.mutation.ParamRemark(); !ok {
		return &ValidationError{Name: "param_remark", err: errors.New(`ent: missing required field "CarsModelsGroupsParams.param_remark"`)}
	}
	if _, ok := cmgpc.mutation.ParamName(); !ok {
		return &ValidationError{Name: "param_name", err: errors.New(`ent: missing required field "CarsModelsGroupsParams.param_name"`)}
	}
	if _, ok := cmgpc.mutation.ParamType(); !ok {
		return &ValidationError{Name: "param_type", err: errors.New(`ent: missing required field "CarsModelsGroupsParams.param_type"`)}
	}
	if v, ok := cmgpc.mutation.ParamType(); ok {
		if err := carsmodelsgroupsparams.ParamTypeValidator(v); err != nil {
			return &ValidationError{Name: "param_type", err: fmt.Errorf(`ent: validator failed for field "CarsModelsGroupsParams.param_type": %w`, err)}
		}
	}
	if _, ok := cmgpc.mutation.ValueRange(); !ok {
		return &ValidationError{Name: "value_range", err: errors.New(`ent: missing required field "CarsModelsGroupsParams.value_range"`)}
	}
	if _, ok := cmgpc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "CarsModelsGroupsParams.status"`)}
	}
	if _, ok := cmgpc.mutation.IsDeleted(); !ok {
		return &ValidationError{Name: "is_deleted", err: errors.New(`ent: missing required field "CarsModelsGroupsParams.is_deleted"`)}
	}
	if _, ok := cmgpc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "CarsModelsGroupsParams.create_time"`)}
	}
	if _, ok := cmgpc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "CarsModelsGroupsParams.update_time"`)}
	}
	if len(cmgpc.mutation.ModelIDs()) == 0 {
		return &ValidationError{Name: "model", err: errors.New(`ent: missing required edge "CarsModelsGroupsParams.model"`)}
	}
	if len(cmgpc.mutation.GroupIDs()) == 0 {
		return &ValidationError{Name: "group", err: errors.New(`ent: missing required edge "CarsModelsGroupsParams.group"`)}
	}
	return nil
}

func (cmgpc *CarsModelsGroupsParamsCreate) sqlSave(ctx context.Context) (*CarsModelsGroupsParams, error) {
	if err := cmgpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cmgpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cmgpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	cmgpc.mutation.id = &_node.ID
	cmgpc.mutation.done = true
	return _node, nil
}

func (cmgpc *CarsModelsGroupsParamsCreate) createSpec() (*CarsModelsGroupsParams, *sqlgraph.CreateSpec) {
	var (
		_node = &CarsModelsGroupsParams{config: cmgpc.config}
		_spec = sqlgraph.NewCreateSpec(carsmodelsgroupsparams.Table, sqlgraph.NewFieldSpec(carsmodelsgroupsparams.FieldID, field.TypeInt))
	)
	if id, ok := cmgpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cmgpc.mutation.ParamRemark(); ok {
		_spec.SetField(carsmodelsgroupsparams.FieldParamRemark, field.TypeString, value)
		_node.ParamRemark = value
	}
	if value, ok := cmgpc.mutation.ParamName(); ok {
		_spec.SetField(carsmodelsgroupsparams.FieldParamName, field.TypeString, value)
		_node.ParamName = value
	}
	if value, ok := cmgpc.mutation.ParamType(); ok {
		_spec.SetField(carsmodelsgroupsparams.FieldParamType, field.TypeEnum, value)
		_node.ParamType = value
	}
	if value, ok := cmgpc.mutation.ValueRange(); ok {
		_spec.SetField(carsmodelsgroupsparams.FieldValueRange, field.TypeString, value)
		_node.ValueRange = value
	}
	if value, ok := cmgpc.mutation.Status(); ok {
		_spec.SetField(carsmodelsgroupsparams.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	if value, ok := cmgpc.mutation.IsDeleted(); ok {
		_spec.SetField(carsmodelsgroupsparams.FieldIsDeleted, field.TypeInt, value)
		_node.IsDeleted = value
	}
	if value, ok := cmgpc.mutation.CreateTime(); ok {
		_spec.SetField(carsmodelsgroupsparams.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := cmgpc.mutation.UpdateTime(); ok {
		_spec.SetField(carsmodelsgroupsparams.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if nodes := cmgpc.mutation.ModelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carsmodelsgroupsparams.ModelTable,
			Columns: []string{carsmodelsgroupsparams.ModelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsmodels.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ModelID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cmgpc.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carsmodelsgroupsparams.GroupTable,
			Columns: []string{carsmodelsgroupsparams.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsmodelsgroups.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.GroupID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CarsModelsGroupsParamsCreateBulk is the builder for creating many CarsModelsGroupsParams entities in bulk.
type CarsModelsGroupsParamsCreateBulk struct {
	config
	err      error
	builders []*CarsModelsGroupsParamsCreate
}

// Save creates the CarsModelsGroupsParams entities in the database.
func (cmgpcb *CarsModelsGroupsParamsCreateBulk) Save(ctx context.Context) ([]*CarsModelsGroupsParams, error) {
	if cmgpcb.err != nil {
		return nil, cmgpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cmgpcb.builders))
	nodes := make([]*CarsModelsGroupsParams, len(cmgpcb.builders))
	mutators := make([]Mutator, len(cmgpcb.builders))
	for i := range cmgpcb.builders {
		func(i int, root context.Context) {
			builder := cmgpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CarsModelsGroupsParamsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cmgpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cmgpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cmgpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cmgpcb *CarsModelsGroupsParamsCreateBulk) SaveX(ctx context.Context) []*CarsModelsGroupsParams {
	v, err := cmgpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cmgpcb *CarsModelsGroupsParamsCreateBulk) Exec(ctx context.Context) error {
	_, err := cmgpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmgpcb *CarsModelsGroupsParamsCreateBulk) ExecX(ctx context.Context) {
	if err := cmgpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
