// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/otadeploy"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"github.com/jianbo-zh/jydata/database/schema/types"
)

// OtaDeployUpdate is the builder for updating OtaDeploy entities.
type OtaDeployUpdate struct {
	config
	hooks    []Hook
	mutation *OtaDeployMutation
}

// Where appends a list predicates to the OtaDeployUpdate builder.
func (odu *OtaDeployUpdate) Where(ps ...predicate.OtaDeploy) *OtaDeployUpdate {
	odu.mutation.Where(ps...)
	return odu
}

// SetDeleteTime sets the "delete_time" field.
func (odu *OtaDeployUpdate) SetDeleteTime(t time.Time) *OtaDeployUpdate {
	odu.mutation.SetDeleteTime(t)
	return odu
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (odu *OtaDeployUpdate) SetNillableDeleteTime(t *time.Time) *OtaDeployUpdate {
	if t != nil {
		odu.SetDeleteTime(*t)
	}
	return odu
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (odu *OtaDeployUpdate) ClearDeleteTime() *OtaDeployUpdate {
	odu.mutation.ClearDeleteTime()
	return odu
}

// SetUUID sets the "uuid" field.
func (odu *OtaDeployUpdate) SetUUID(i int64) *OtaDeployUpdate {
	odu.mutation.ResetUUID()
	odu.mutation.SetUUID(i)
	return odu
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (odu *OtaDeployUpdate) SetNillableUUID(i *int64) *OtaDeployUpdate {
	if i != nil {
		odu.SetUUID(*i)
	}
	return odu
}

// AddUUID adds i to the "uuid" field.
func (odu *OtaDeployUpdate) AddUUID(i int64) *OtaDeployUpdate {
	odu.mutation.AddUUID(i)
	return odu
}

// SetCarID sets the "car_id" field.
func (odu *OtaDeployUpdate) SetCarID(i int) *OtaDeployUpdate {
	odu.mutation.ResetCarID()
	odu.mutation.SetCarID(i)
	return odu
}

// SetNillableCarID sets the "car_id" field if the given value is not nil.
func (odu *OtaDeployUpdate) SetNillableCarID(i *int) *OtaDeployUpdate {
	if i != nil {
		odu.SetCarID(*i)
	}
	return odu
}

// AddCarID adds i to the "car_id" field.
func (odu *OtaDeployUpdate) AddCarID(i int) *OtaDeployUpdate {
	odu.mutation.AddCarID(i)
	return odu
}

// SetCarName sets the "car_name" field.
func (odu *OtaDeployUpdate) SetCarName(s string) *OtaDeployUpdate {
	odu.mutation.SetCarName(s)
	return odu
}

// SetNillableCarName sets the "car_name" field if the given value is not nil.
func (odu *OtaDeployUpdate) SetNillableCarName(s *string) *OtaDeployUpdate {
	if s != nil {
		odu.SetCarName(*s)
	}
	return odu
}

// SetDeviceID sets the "device_id" field.
func (odu *OtaDeployUpdate) SetDeviceID(s string) *OtaDeployUpdate {
	odu.mutation.SetDeviceID(s)
	return odu
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (odu *OtaDeployUpdate) SetNillableDeviceID(s *string) *OtaDeployUpdate {
	if s != nil {
		odu.SetDeviceID(*s)
	}
	return odu
}

// SetOtaVersionID sets the "ota_version_id" field.
func (odu *OtaDeployUpdate) SetOtaVersionID(i int) *OtaDeployUpdate {
	odu.mutation.ResetOtaVersionID()
	odu.mutation.SetOtaVersionID(i)
	return odu
}

// SetNillableOtaVersionID sets the "ota_version_id" field if the given value is not nil.
func (odu *OtaDeployUpdate) SetNillableOtaVersionID(i *int) *OtaDeployUpdate {
	if i != nil {
		odu.SetOtaVersionID(*i)
	}
	return odu
}

// AddOtaVersionID adds i to the "ota_version_id" field.
func (odu *OtaDeployUpdate) AddOtaVersionID(i int) *OtaDeployUpdate {
	odu.mutation.AddOtaVersionID(i)
	return odu
}

// SetOtaVersionName sets the "ota_version_name" field.
func (odu *OtaDeployUpdate) SetOtaVersionName(s string) *OtaDeployUpdate {
	odu.mutation.SetOtaVersionName(s)
	return odu
}

// SetNillableOtaVersionName sets the "ota_version_name" field if the given value is not nil.
func (odu *OtaDeployUpdate) SetNillableOtaVersionName(s *string) *OtaDeployUpdate {
	if s != nil {
		odu.SetOtaVersionName(*s)
	}
	return odu
}

// SetOtaVersionNumber sets the "ota_version_number" field.
func (odu *OtaDeployUpdate) SetOtaVersionNumber(s string) *OtaDeployUpdate {
	odu.mutation.SetOtaVersionNumber(s)
	return odu
}

// SetNillableOtaVersionNumber sets the "ota_version_number" field if the given value is not nil.
func (odu *OtaDeployUpdate) SetNillableOtaVersionNumber(s *string) *OtaDeployUpdate {
	if s != nil {
		odu.SetOtaVersionNumber(*s)
	}
	return odu
}

// SetState sets the "state" field.
func (odu *OtaDeployUpdate) SetState(i int) *OtaDeployUpdate {
	odu.mutation.ResetState()
	odu.mutation.SetState(i)
	return odu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (odu *OtaDeployUpdate) SetNillableState(i *int) *OtaDeployUpdate {
	if i != nil {
		odu.SetState(*i)
	}
	return odu
}

// AddState adds i to the "state" field.
func (odu *OtaDeployUpdate) AddState(i int) *OtaDeployUpdate {
	odu.mutation.AddState(i)
	return odu
}

// SetErrmsg sets the "errmsg" field.
func (odu *OtaDeployUpdate) SetErrmsg(s string) *OtaDeployUpdate {
	odu.mutation.SetErrmsg(s)
	return odu
}

// SetNillableErrmsg sets the "errmsg" field if the given value is not nil.
func (odu *OtaDeployUpdate) SetNillableErrmsg(s *string) *OtaDeployUpdate {
	if s != nil {
		odu.SetErrmsg(*s)
	}
	return odu
}

// SetProcess sets the "process" field.
func (odu *OtaDeployUpdate) SetProcess(tp types.OtaProcess) *OtaDeployUpdate {
	odu.mutation.SetProcess(tp)
	return odu
}

// SetNillableProcess sets the "process" field if the given value is not nil.
func (odu *OtaDeployUpdate) SetNillableProcess(tp *types.OtaProcess) *OtaDeployUpdate {
	if tp != nil {
		odu.SetProcess(*tp)
	}
	return odu
}

// ClearProcess clears the value of the "process" field.
func (odu *OtaDeployUpdate) ClearProcess() *OtaDeployUpdate {
	odu.mutation.ClearProcess()
	return odu
}

// SetUpdateTime sets the "update_time" field.
func (odu *OtaDeployUpdate) SetUpdateTime(t time.Time) *OtaDeployUpdate {
	odu.mutation.SetUpdateTime(t)
	return odu
}

// Mutation returns the OtaDeployMutation object of the builder.
func (odu *OtaDeployUpdate) Mutation() *OtaDeployMutation {
	return odu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (odu *OtaDeployUpdate) Save(ctx context.Context) (int, error) {
	if err := odu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, odu.sqlSave, odu.mutation, odu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (odu *OtaDeployUpdate) SaveX(ctx context.Context) int {
	affected, err := odu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (odu *OtaDeployUpdate) Exec(ctx context.Context) error {
	_, err := odu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (odu *OtaDeployUpdate) ExecX(ctx context.Context) {
	if err := odu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (odu *OtaDeployUpdate) defaults() error {
	if _, ok := odu.mutation.UpdateTime(); !ok {
		if otadeploy.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized otadeploy.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := otadeploy.UpdateDefaultUpdateTime()
		odu.mutation.SetUpdateTime(v)
	}
	return nil
}

func (odu *OtaDeployUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(otadeploy.Table, otadeploy.Columns, sqlgraph.NewFieldSpec(otadeploy.FieldID, field.TypeInt))
	if ps := odu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := odu.mutation.DeleteTime(); ok {
		_spec.SetField(otadeploy.FieldDeleteTime, field.TypeTime, value)
	}
	if odu.mutation.DeleteTimeCleared() {
		_spec.ClearField(otadeploy.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := odu.mutation.UUID(); ok {
		_spec.SetField(otadeploy.FieldUUID, field.TypeInt64, value)
	}
	if value, ok := odu.mutation.AddedUUID(); ok {
		_spec.AddField(otadeploy.FieldUUID, field.TypeInt64, value)
	}
	if value, ok := odu.mutation.CarID(); ok {
		_spec.SetField(otadeploy.FieldCarID, field.TypeInt, value)
	}
	if value, ok := odu.mutation.AddedCarID(); ok {
		_spec.AddField(otadeploy.FieldCarID, field.TypeInt, value)
	}
	if value, ok := odu.mutation.CarName(); ok {
		_spec.SetField(otadeploy.FieldCarName, field.TypeString, value)
	}
	if value, ok := odu.mutation.DeviceID(); ok {
		_spec.SetField(otadeploy.FieldDeviceID, field.TypeString, value)
	}
	if value, ok := odu.mutation.OtaVersionID(); ok {
		_spec.SetField(otadeploy.FieldOtaVersionID, field.TypeInt, value)
	}
	if value, ok := odu.mutation.AddedOtaVersionID(); ok {
		_spec.AddField(otadeploy.FieldOtaVersionID, field.TypeInt, value)
	}
	if value, ok := odu.mutation.OtaVersionName(); ok {
		_spec.SetField(otadeploy.FieldOtaVersionName, field.TypeString, value)
	}
	if value, ok := odu.mutation.OtaVersionNumber(); ok {
		_spec.SetField(otadeploy.FieldOtaVersionNumber, field.TypeString, value)
	}
	if value, ok := odu.mutation.State(); ok {
		_spec.SetField(otadeploy.FieldState, field.TypeInt, value)
	}
	if value, ok := odu.mutation.AddedState(); ok {
		_spec.AddField(otadeploy.FieldState, field.TypeInt, value)
	}
	if value, ok := odu.mutation.Errmsg(); ok {
		_spec.SetField(otadeploy.FieldErrmsg, field.TypeString, value)
	}
	if value, ok := odu.mutation.Process(); ok {
		_spec.SetField(otadeploy.FieldProcess, field.TypeJSON, value)
	}
	if odu.mutation.ProcessCleared() {
		_spec.ClearField(otadeploy.FieldProcess, field.TypeJSON)
	}
	if value, ok := odu.mutation.UpdateTime(); ok {
		_spec.SetField(otadeploy.FieldUpdateTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, odu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{otadeploy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	odu.mutation.done = true
	return n, nil
}

// OtaDeployUpdateOne is the builder for updating a single OtaDeploy entity.
type OtaDeployUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OtaDeployMutation
}

// SetDeleteTime sets the "delete_time" field.
func (oduo *OtaDeployUpdateOne) SetDeleteTime(t time.Time) *OtaDeployUpdateOne {
	oduo.mutation.SetDeleteTime(t)
	return oduo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (oduo *OtaDeployUpdateOne) SetNillableDeleteTime(t *time.Time) *OtaDeployUpdateOne {
	if t != nil {
		oduo.SetDeleteTime(*t)
	}
	return oduo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (oduo *OtaDeployUpdateOne) ClearDeleteTime() *OtaDeployUpdateOne {
	oduo.mutation.ClearDeleteTime()
	return oduo
}

// SetUUID sets the "uuid" field.
func (oduo *OtaDeployUpdateOne) SetUUID(i int64) *OtaDeployUpdateOne {
	oduo.mutation.ResetUUID()
	oduo.mutation.SetUUID(i)
	return oduo
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (oduo *OtaDeployUpdateOne) SetNillableUUID(i *int64) *OtaDeployUpdateOne {
	if i != nil {
		oduo.SetUUID(*i)
	}
	return oduo
}

// AddUUID adds i to the "uuid" field.
func (oduo *OtaDeployUpdateOne) AddUUID(i int64) *OtaDeployUpdateOne {
	oduo.mutation.AddUUID(i)
	return oduo
}

// SetCarID sets the "car_id" field.
func (oduo *OtaDeployUpdateOne) SetCarID(i int) *OtaDeployUpdateOne {
	oduo.mutation.ResetCarID()
	oduo.mutation.SetCarID(i)
	return oduo
}

// SetNillableCarID sets the "car_id" field if the given value is not nil.
func (oduo *OtaDeployUpdateOne) SetNillableCarID(i *int) *OtaDeployUpdateOne {
	if i != nil {
		oduo.SetCarID(*i)
	}
	return oduo
}

// AddCarID adds i to the "car_id" field.
func (oduo *OtaDeployUpdateOne) AddCarID(i int) *OtaDeployUpdateOne {
	oduo.mutation.AddCarID(i)
	return oduo
}

// SetCarName sets the "car_name" field.
func (oduo *OtaDeployUpdateOne) SetCarName(s string) *OtaDeployUpdateOne {
	oduo.mutation.SetCarName(s)
	return oduo
}

// SetNillableCarName sets the "car_name" field if the given value is not nil.
func (oduo *OtaDeployUpdateOne) SetNillableCarName(s *string) *OtaDeployUpdateOne {
	if s != nil {
		oduo.SetCarName(*s)
	}
	return oduo
}

// SetDeviceID sets the "device_id" field.
func (oduo *OtaDeployUpdateOne) SetDeviceID(s string) *OtaDeployUpdateOne {
	oduo.mutation.SetDeviceID(s)
	return oduo
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (oduo *OtaDeployUpdateOne) SetNillableDeviceID(s *string) *OtaDeployUpdateOne {
	if s != nil {
		oduo.SetDeviceID(*s)
	}
	return oduo
}

// SetOtaVersionID sets the "ota_version_id" field.
func (oduo *OtaDeployUpdateOne) SetOtaVersionID(i int) *OtaDeployUpdateOne {
	oduo.mutation.ResetOtaVersionID()
	oduo.mutation.SetOtaVersionID(i)
	return oduo
}

// SetNillableOtaVersionID sets the "ota_version_id" field if the given value is not nil.
func (oduo *OtaDeployUpdateOne) SetNillableOtaVersionID(i *int) *OtaDeployUpdateOne {
	if i != nil {
		oduo.SetOtaVersionID(*i)
	}
	return oduo
}

// AddOtaVersionID adds i to the "ota_version_id" field.
func (oduo *OtaDeployUpdateOne) AddOtaVersionID(i int) *OtaDeployUpdateOne {
	oduo.mutation.AddOtaVersionID(i)
	return oduo
}

// SetOtaVersionName sets the "ota_version_name" field.
func (oduo *OtaDeployUpdateOne) SetOtaVersionName(s string) *OtaDeployUpdateOne {
	oduo.mutation.SetOtaVersionName(s)
	return oduo
}

// SetNillableOtaVersionName sets the "ota_version_name" field if the given value is not nil.
func (oduo *OtaDeployUpdateOne) SetNillableOtaVersionName(s *string) *OtaDeployUpdateOne {
	if s != nil {
		oduo.SetOtaVersionName(*s)
	}
	return oduo
}

// SetOtaVersionNumber sets the "ota_version_number" field.
func (oduo *OtaDeployUpdateOne) SetOtaVersionNumber(s string) *OtaDeployUpdateOne {
	oduo.mutation.SetOtaVersionNumber(s)
	return oduo
}

// SetNillableOtaVersionNumber sets the "ota_version_number" field if the given value is not nil.
func (oduo *OtaDeployUpdateOne) SetNillableOtaVersionNumber(s *string) *OtaDeployUpdateOne {
	if s != nil {
		oduo.SetOtaVersionNumber(*s)
	}
	return oduo
}

// SetState sets the "state" field.
func (oduo *OtaDeployUpdateOne) SetState(i int) *OtaDeployUpdateOne {
	oduo.mutation.ResetState()
	oduo.mutation.SetState(i)
	return oduo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (oduo *OtaDeployUpdateOne) SetNillableState(i *int) *OtaDeployUpdateOne {
	if i != nil {
		oduo.SetState(*i)
	}
	return oduo
}

// AddState adds i to the "state" field.
func (oduo *OtaDeployUpdateOne) AddState(i int) *OtaDeployUpdateOne {
	oduo.mutation.AddState(i)
	return oduo
}

// SetErrmsg sets the "errmsg" field.
func (oduo *OtaDeployUpdateOne) SetErrmsg(s string) *OtaDeployUpdateOne {
	oduo.mutation.SetErrmsg(s)
	return oduo
}

// SetNillableErrmsg sets the "errmsg" field if the given value is not nil.
func (oduo *OtaDeployUpdateOne) SetNillableErrmsg(s *string) *OtaDeployUpdateOne {
	if s != nil {
		oduo.SetErrmsg(*s)
	}
	return oduo
}

// SetProcess sets the "process" field.
func (oduo *OtaDeployUpdateOne) SetProcess(tp types.OtaProcess) *OtaDeployUpdateOne {
	oduo.mutation.SetProcess(tp)
	return oduo
}

// SetNillableProcess sets the "process" field if the given value is not nil.
func (oduo *OtaDeployUpdateOne) SetNillableProcess(tp *types.OtaProcess) *OtaDeployUpdateOne {
	if tp != nil {
		oduo.SetProcess(*tp)
	}
	return oduo
}

// ClearProcess clears the value of the "process" field.
func (oduo *OtaDeployUpdateOne) ClearProcess() *OtaDeployUpdateOne {
	oduo.mutation.ClearProcess()
	return oduo
}

// SetUpdateTime sets the "update_time" field.
func (oduo *OtaDeployUpdateOne) SetUpdateTime(t time.Time) *OtaDeployUpdateOne {
	oduo.mutation.SetUpdateTime(t)
	return oduo
}

// Mutation returns the OtaDeployMutation object of the builder.
func (oduo *OtaDeployUpdateOne) Mutation() *OtaDeployMutation {
	return oduo.mutation
}

// Where appends a list predicates to the OtaDeployUpdate builder.
func (oduo *OtaDeployUpdateOne) Where(ps ...predicate.OtaDeploy) *OtaDeployUpdateOne {
	oduo.mutation.Where(ps...)
	return oduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oduo *OtaDeployUpdateOne) Select(field string, fields ...string) *OtaDeployUpdateOne {
	oduo.fields = append([]string{field}, fields...)
	return oduo
}

// Save executes the query and returns the updated OtaDeploy entity.
func (oduo *OtaDeployUpdateOne) Save(ctx context.Context) (*OtaDeploy, error) {
	if err := oduo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, oduo.sqlSave, oduo.mutation, oduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oduo *OtaDeployUpdateOne) SaveX(ctx context.Context) *OtaDeploy {
	node, err := oduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oduo *OtaDeployUpdateOne) Exec(ctx context.Context) error {
	_, err := oduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oduo *OtaDeployUpdateOne) ExecX(ctx context.Context) {
	if err := oduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oduo *OtaDeployUpdateOne) defaults() error {
	if _, ok := oduo.mutation.UpdateTime(); !ok {
		if otadeploy.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized otadeploy.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := otadeploy.UpdateDefaultUpdateTime()
		oduo.mutation.SetUpdateTime(v)
	}
	return nil
}

func (oduo *OtaDeployUpdateOne) sqlSave(ctx context.Context) (_node *OtaDeploy, err error) {
	_spec := sqlgraph.NewUpdateSpec(otadeploy.Table, otadeploy.Columns, sqlgraph.NewFieldSpec(otadeploy.FieldID, field.TypeInt))
	id, ok := oduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OtaDeploy.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, otadeploy.FieldID)
		for _, f := range fields {
			if !otadeploy.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != otadeploy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oduo.mutation.DeleteTime(); ok {
		_spec.SetField(otadeploy.FieldDeleteTime, field.TypeTime, value)
	}
	if oduo.mutation.DeleteTimeCleared() {
		_spec.ClearField(otadeploy.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := oduo.mutation.UUID(); ok {
		_spec.SetField(otadeploy.FieldUUID, field.TypeInt64, value)
	}
	if value, ok := oduo.mutation.AddedUUID(); ok {
		_spec.AddField(otadeploy.FieldUUID, field.TypeInt64, value)
	}
	if value, ok := oduo.mutation.CarID(); ok {
		_spec.SetField(otadeploy.FieldCarID, field.TypeInt, value)
	}
	if value, ok := oduo.mutation.AddedCarID(); ok {
		_spec.AddField(otadeploy.FieldCarID, field.TypeInt, value)
	}
	if value, ok := oduo.mutation.CarName(); ok {
		_spec.SetField(otadeploy.FieldCarName, field.TypeString, value)
	}
	if value, ok := oduo.mutation.DeviceID(); ok {
		_spec.SetField(otadeploy.FieldDeviceID, field.TypeString, value)
	}
	if value, ok := oduo.mutation.OtaVersionID(); ok {
		_spec.SetField(otadeploy.FieldOtaVersionID, field.TypeInt, value)
	}
	if value, ok := oduo.mutation.AddedOtaVersionID(); ok {
		_spec.AddField(otadeploy.FieldOtaVersionID, field.TypeInt, value)
	}
	if value, ok := oduo.mutation.OtaVersionName(); ok {
		_spec.SetField(otadeploy.FieldOtaVersionName, field.TypeString, value)
	}
	if value, ok := oduo.mutation.OtaVersionNumber(); ok {
		_spec.SetField(otadeploy.FieldOtaVersionNumber, field.TypeString, value)
	}
	if value, ok := oduo.mutation.State(); ok {
		_spec.SetField(otadeploy.FieldState, field.TypeInt, value)
	}
	if value, ok := oduo.mutation.AddedState(); ok {
		_spec.AddField(otadeploy.FieldState, field.TypeInt, value)
	}
	if value, ok := oduo.mutation.Errmsg(); ok {
		_spec.SetField(otadeploy.FieldErrmsg, field.TypeString, value)
	}
	if value, ok := oduo.mutation.Process(); ok {
		_spec.SetField(otadeploy.FieldProcess, field.TypeJSON, value)
	}
	if oduo.mutation.ProcessCleared() {
		_spec.ClearField(otadeploy.FieldProcess, field.TypeJSON)
	}
	if value, ok := oduo.mutation.UpdateTime(); ok {
		_spec.SetField(otadeploy.FieldUpdateTime, field.TypeTime, value)
	}
	_node = &OtaDeploy{config: oduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{otadeploy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oduo.mutation.done = true
	return _node, nil
}
