// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/carextendyokee"
)

// CarExtendYokeeCreate is the builder for creating a CarExtendYokee entity.
type CarExtendYokeeCreate struct {
	config
	mutation *CarExtendYokeeMutation
	hooks    []Hook
}

// SetDeleteTime sets the "delete_time" field.
func (ceyc *CarExtendYokeeCreate) SetDeleteTime(t time.Time) *CarExtendYokeeCreate {
	ceyc.mutation.SetDeleteTime(t)
	return ceyc
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (ceyc *CarExtendYokeeCreate) SetNillableDeleteTime(t *time.Time) *CarExtendYokeeCreate {
	if t != nil {
		ceyc.SetDeleteTime(*t)
	}
	return ceyc
}

// SetCarID sets the "car_id" field.
func (ceyc *CarExtendYokeeCreate) SetCarID(i int) *CarExtendYokeeCreate {
	ceyc.mutation.SetCarID(i)
	return ceyc
}

// SetYokeeVehicleID sets the "yokee_vehicle_id" field.
func (ceyc *CarExtendYokeeCreate) SetYokeeVehicleID(i int) *CarExtendYokeeCreate {
	ceyc.mutation.SetYokeeVehicleID(i)
	return ceyc
}

// SetYokeeVehicleName sets the "yokee_vehicle_name" field.
func (ceyc *CarExtendYokeeCreate) SetYokeeVehicleName(s string) *CarExtendYokeeCreate {
	ceyc.mutation.SetYokeeVehicleName(s)
	return ceyc
}

// SetCreateTime sets the "create_time" field.
func (ceyc *CarExtendYokeeCreate) SetCreateTime(t time.Time) *CarExtendYokeeCreate {
	ceyc.mutation.SetCreateTime(t)
	return ceyc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ceyc *CarExtendYokeeCreate) SetNillableCreateTime(t *time.Time) *CarExtendYokeeCreate {
	if t != nil {
		ceyc.SetCreateTime(*t)
	}
	return ceyc
}

// SetUpdateTime sets the "update_time" field.
func (ceyc *CarExtendYokeeCreate) SetUpdateTime(t time.Time) *CarExtendYokeeCreate {
	ceyc.mutation.SetUpdateTime(t)
	return ceyc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ceyc *CarExtendYokeeCreate) SetNillableUpdateTime(t *time.Time) *CarExtendYokeeCreate {
	if t != nil {
		ceyc.SetUpdateTime(*t)
	}
	return ceyc
}

// SetID sets the "id" field.
func (ceyc *CarExtendYokeeCreate) SetID(i int) *CarExtendYokeeCreate {
	ceyc.mutation.SetID(i)
	return ceyc
}

// Mutation returns the CarExtendYokeeMutation object of the builder.
func (ceyc *CarExtendYokeeCreate) Mutation() *CarExtendYokeeMutation {
	return ceyc.mutation
}

// Save creates the CarExtendYokee in the database.
func (ceyc *CarExtendYokeeCreate) Save(ctx context.Context) (*CarExtendYokee, error) {
	if err := ceyc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ceyc.sqlSave, ceyc.mutation, ceyc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ceyc *CarExtendYokeeCreate) SaveX(ctx context.Context) *CarExtendYokee {
	v, err := ceyc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ceyc *CarExtendYokeeCreate) Exec(ctx context.Context) error {
	_, err := ceyc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ceyc *CarExtendYokeeCreate) ExecX(ctx context.Context) {
	if err := ceyc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ceyc *CarExtendYokeeCreate) defaults() error {
	if _, ok := ceyc.mutation.CreateTime(); !ok {
		if carextendyokee.DefaultCreateTime == nil {
			return fmt.Errorf("ent: uninitialized carextendyokee.DefaultCreateTime (forgotten import ent/runtime?)")
		}
		v := carextendyokee.DefaultCreateTime()
		ceyc.mutation.SetCreateTime(v)
	}
	if _, ok := ceyc.mutation.UpdateTime(); !ok {
		if carextendyokee.DefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized carextendyokee.DefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := carextendyokee.DefaultUpdateTime()
		ceyc.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ceyc *CarExtendYokeeCreate) check() error {
	if _, ok := ceyc.mutation.CarID(); !ok {
		return &ValidationError{Name: "car_id", err: errors.New(`ent: missing required field "CarExtendYokee.car_id"`)}
	}
	if _, ok := ceyc.mutation.YokeeVehicleID(); !ok {
		return &ValidationError{Name: "yokee_vehicle_id", err: errors.New(`ent: missing required field "CarExtendYokee.yokee_vehicle_id"`)}
	}
	if _, ok := ceyc.mutation.YokeeVehicleName(); !ok {
		return &ValidationError{Name: "yokee_vehicle_name", err: errors.New(`ent: missing required field "CarExtendYokee.yokee_vehicle_name"`)}
	}
	if _, ok := ceyc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "CarExtendYokee.create_time"`)}
	}
	if _, ok := ceyc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "CarExtendYokee.update_time"`)}
	}
	return nil
}

func (ceyc *CarExtendYokeeCreate) sqlSave(ctx context.Context) (*CarExtendYokee, error) {
	if err := ceyc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ceyc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ceyc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	ceyc.mutation.id = &_node.ID
	ceyc.mutation.done = true
	return _node, nil
}

func (ceyc *CarExtendYokeeCreate) createSpec() (*CarExtendYokee, *sqlgraph.CreateSpec) {
	var (
		_node = &CarExtendYokee{config: ceyc.config}
		_spec = sqlgraph.NewCreateSpec(carextendyokee.Table, sqlgraph.NewFieldSpec(carextendyokee.FieldID, field.TypeInt))
	)
	if id, ok := ceyc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ceyc.mutation.DeleteTime(); ok {
		_spec.SetField(carextendyokee.FieldDeleteTime, field.TypeTime, value)
		_node.DeleteTime = value
	}
	if value, ok := ceyc.mutation.CarID(); ok {
		_spec.SetField(carextendyokee.FieldCarID, field.TypeInt, value)
		_node.CarID = value
	}
	if value, ok := ceyc.mutation.YokeeVehicleID(); ok {
		_spec.SetField(carextendyokee.FieldYokeeVehicleID, field.TypeInt, value)
		_node.YokeeVehicleID = value
	}
	if value, ok := ceyc.mutation.YokeeVehicleName(); ok {
		_spec.SetField(carextendyokee.FieldYokeeVehicleName, field.TypeString, value)
		_node.YokeeVehicleName = value
	}
	if value, ok := ceyc.mutation.CreateTime(); ok {
		_spec.SetField(carextendyokee.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := ceyc.mutation.UpdateTime(); ok {
		_spec.SetField(carextendyokee.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// CarExtendYokeeCreateBulk is the builder for creating many CarExtendYokee entities in bulk.
type CarExtendYokeeCreateBulk struct {
	config
	err      error
	builders []*CarExtendYokeeCreate
}

// Save creates the CarExtendYokee entities in the database.
func (ceycb *CarExtendYokeeCreateBulk) Save(ctx context.Context) ([]*CarExtendYokee, error) {
	if ceycb.err != nil {
		return nil, ceycb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ceycb.builders))
	nodes := make([]*CarExtendYokee, len(ceycb.builders))
	mutators := make([]Mutator, len(ceycb.builders))
	for i := range ceycb.builders {
		func(i int, root context.Context) {
			builder := ceycb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CarExtendYokeeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ceycb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ceycb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ceycb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ceycb *CarExtendYokeeCreateBulk) SaveX(ctx context.Context) []*CarExtendYokee {
	v, err := ceycb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ceycb *CarExtendYokeeCreateBulk) Exec(ctx context.Context) error {
	_, err := ceycb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ceycb *CarExtendYokeeCreateBulk) ExecX(ctx context.Context) {
	if err := ceycb.Exec(ctx); err != nil {
		panic(err)
	}
}
