// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/car"
	"github.com/jianbo-zh/jydata/database/ent/schetask"
	"github.com/jianbo-zh/jydata/database/ent/schetaskevent"
	"github.com/jianbo-zh/jydata/database/schema/types"
)

// ScheTaskCreate is the builder for creating a ScheTask entity.
type ScheTaskCreate struct {
	config
	mutation *ScheTaskMutation
	hooks    []Hook
}

// SetUserOrigin sets the "user_origin" field.
func (stc *ScheTaskCreate) SetUserOrigin(i int) *ScheTaskCreate {
	stc.mutation.SetUserOrigin(i)
	return stc
}

// SetNillableUserOrigin sets the "user_origin" field if the given value is not nil.
func (stc *ScheTaskCreate) SetNillableUserOrigin(i *int) *ScheTaskCreate {
	if i != nil {
		stc.SetUserOrigin(*i)
	}
	return stc
}

// SetUserType sets the "user_type" field.
func (stc *ScheTaskCreate) SetUserType(i int) *ScheTaskCreate {
	stc.mutation.SetUserType(i)
	return stc
}

// SetNillableUserType sets the "user_type" field if the given value is not nil.
func (stc *ScheTaskCreate) SetNillableUserType(i *int) *ScheTaskCreate {
	if i != nil {
		stc.SetUserType(*i)
	}
	return stc
}

// SetUserID sets the "user_id" field.
func (stc *ScheTaskCreate) SetUserID(i int) *ScheTaskCreate {
	stc.mutation.SetUserID(i)
	return stc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (stc *ScheTaskCreate) SetNillableUserID(i *int) *ScheTaskCreate {
	if i != nil {
		stc.SetUserID(*i)
	}
	return stc
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (stc *ScheTaskCreate) SetScenicAreaID(i int) *ScheTaskCreate {
	stc.mutation.SetScenicAreaID(i)
	return stc
}

// SetCarID sets the "car_id" field.
func (stc *ScheTaskCreate) SetCarID(i int) *ScheTaskCreate {
	stc.mutation.SetCarID(i)
	return stc
}

// SetDeviceID sets the "device_id" field.
func (stc *ScheTaskCreate) SetDeviceID(s string) *ScheTaskCreate {
	stc.mutation.SetDeviceID(s)
	return stc
}

// SetDestID sets the "dest_id" field.
func (stc *ScheTaskCreate) SetDestID(i int) *ScheTaskCreate {
	stc.mutation.SetDestID(i)
	return stc
}

// SetStartLon sets the "start_lon" field.
func (stc *ScheTaskCreate) SetStartLon(f float64) *ScheTaskCreate {
	stc.mutation.SetStartLon(f)
	return stc
}

// SetNillableStartLon sets the "start_lon" field if the given value is not nil.
func (stc *ScheTaskCreate) SetNillableStartLon(f *float64) *ScheTaskCreate {
	if f != nil {
		stc.SetStartLon(*f)
	}
	return stc
}

// SetStartLat sets the "start_lat" field.
func (stc *ScheTaskCreate) SetStartLat(f float64) *ScheTaskCreate {
	stc.mutation.SetStartLat(f)
	return stc
}

// SetNillableStartLat sets the "start_lat" field if the given value is not nil.
func (stc *ScheTaskCreate) SetNillableStartLat(f *float64) *ScheTaskCreate {
	if f != nil {
		stc.SetStartLat(*f)
	}
	return stc
}

// SetDestLon sets the "dest_lon" field.
func (stc *ScheTaskCreate) SetDestLon(f float64) *ScheTaskCreate {
	stc.mutation.SetDestLon(f)
	return stc
}

// SetDestLat sets the "dest_lat" field.
func (stc *ScheTaskCreate) SetDestLat(f float64) *ScheTaskCreate {
	stc.mutation.SetDestLat(f)
	return stc
}

// SetScheMode sets the "sche_mode" field.
func (stc *ScheTaskCreate) SetScheMode(i int) *ScheTaskCreate {
	stc.mutation.SetScheMode(i)
	return stc
}

// SetNillableScheMode sets the "sche_mode" field if the given value is not nil.
func (stc *ScheTaskCreate) SetNillableScheMode(i *int) *ScheTaskCreate {
	if i != nil {
		stc.SetScheMode(*i)
	}
	return stc
}

// SetScheArgs sets the "sche_args" field.
func (stc *ScheTaskCreate) SetScheArgs(ta types.ScheArgs) *ScheTaskCreate {
	stc.mutation.SetScheArgs(ta)
	return stc
}

// SetNillableScheArgs sets the "sche_args" field if the given value is not nil.
func (stc *ScheTaskCreate) SetNillableScheArgs(ta *types.ScheArgs) *ScheTaskCreate {
	if ta != nil {
		stc.SetScheArgs(*ta)
	}
	return stc
}

// SetState sets the "state" field.
func (stc *ScheTaskCreate) SetState(i int) *ScheTaskCreate {
	stc.mutation.SetState(i)
	return stc
}

// SetAbnormalState sets the "abnormal_state" field.
func (stc *ScheTaskCreate) SetAbnormalState(i int) *ScheTaskCreate {
	stc.mutation.SetAbnormalState(i)
	return stc
}

// SetNillableAbnormalState sets the "abnormal_state" field if the given value is not nil.
func (stc *ScheTaskCreate) SetNillableAbnormalState(i *int) *ScheTaskCreate {
	if i != nil {
		stc.SetAbnormalState(*i)
	}
	return stc
}

// SetRemark sets the "remark" field.
func (stc *ScheTaskCreate) SetRemark(s string) *ScheTaskCreate {
	stc.mutation.SetRemark(s)
	return stc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (stc *ScheTaskCreate) SetNillableRemark(s *string) *ScheTaskCreate {
	if s != nil {
		stc.SetRemark(*s)
	}
	return stc
}

// SetRoutingPath sets the "routing_path" field.
func (stc *ScheTaskCreate) SetRoutingPath(tp types.RoutingPath) *ScheTaskCreate {
	stc.mutation.SetRoutingPath(tp)
	return stc
}

// SetRestartScheTime sets the "restart_sche_time" field.
func (stc *ScheTaskCreate) SetRestartScheTime(t time.Time) *ScheTaskCreate {
	stc.mutation.SetRestartScheTime(t)
	return stc
}

// SetNillableRestartScheTime sets the "restart_sche_time" field if the given value is not nil.
func (stc *ScheTaskCreate) SetNillableRestartScheTime(t *time.Time) *ScheTaskCreate {
	if t != nil {
		stc.SetRestartScheTime(*t)
	}
	return stc
}

// SetEndTime sets the "end_time" field.
func (stc *ScheTaskCreate) SetEndTime(t time.Time) *ScheTaskCreate {
	stc.mutation.SetEndTime(t)
	return stc
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (stc *ScheTaskCreate) SetNillableEndTime(t *time.Time) *ScheTaskCreate {
	if t != nil {
		stc.SetEndTime(*t)
	}
	return stc
}

// SetCreateTime sets the "create_time" field.
func (stc *ScheTaskCreate) SetCreateTime(t time.Time) *ScheTaskCreate {
	stc.mutation.SetCreateTime(t)
	return stc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (stc *ScheTaskCreate) SetNillableCreateTime(t *time.Time) *ScheTaskCreate {
	if t != nil {
		stc.SetCreateTime(*t)
	}
	return stc
}

// SetUpdateTime sets the "update_time" field.
func (stc *ScheTaskCreate) SetUpdateTime(t time.Time) *ScheTaskCreate {
	stc.mutation.SetUpdateTime(t)
	return stc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (stc *ScheTaskCreate) SetNillableUpdateTime(t *time.Time) *ScheTaskCreate {
	if t != nil {
		stc.SetUpdateTime(*t)
	}
	return stc
}

// SetID sets the "id" field.
func (stc *ScheTaskCreate) SetID(i int) *ScheTaskCreate {
	stc.mutation.SetID(i)
	return stc
}

// SetCar sets the "car" edge to the Car entity.
func (stc *ScheTaskCreate) SetCar(c *Car) *ScheTaskCreate {
	return stc.SetCarID(c.ID)
}

// AddEventIDs adds the "events" edge to the ScheTaskEvent entity by IDs.
func (stc *ScheTaskCreate) AddEventIDs(ids ...int) *ScheTaskCreate {
	stc.mutation.AddEventIDs(ids...)
	return stc
}

// AddEvents adds the "events" edges to the ScheTaskEvent entity.
func (stc *ScheTaskCreate) AddEvents(s ...*ScheTaskEvent) *ScheTaskCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stc.AddEventIDs(ids...)
}

// Mutation returns the ScheTaskMutation object of the builder.
func (stc *ScheTaskCreate) Mutation() *ScheTaskMutation {
	return stc.mutation
}

// Save creates the ScheTask in the database.
func (stc *ScheTaskCreate) Save(ctx context.Context) (*ScheTask, error) {
	stc.defaults()
	return withHooks(ctx, stc.sqlSave, stc.mutation, stc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (stc *ScheTaskCreate) SaveX(ctx context.Context) *ScheTask {
	v, err := stc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (stc *ScheTaskCreate) Exec(ctx context.Context) error {
	_, err := stc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stc *ScheTaskCreate) ExecX(ctx context.Context) {
	if err := stc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stc *ScheTaskCreate) defaults() {
	if _, ok := stc.mutation.UserOrigin(); !ok {
		v := schetask.DefaultUserOrigin
		stc.mutation.SetUserOrigin(v)
	}
	if _, ok := stc.mutation.UserType(); !ok {
		v := schetask.DefaultUserType
		stc.mutation.SetUserType(v)
	}
	if _, ok := stc.mutation.UserID(); !ok {
		v := schetask.DefaultUserID
		stc.mutation.SetUserID(v)
	}
	if _, ok := stc.mutation.StartLon(); !ok {
		v := schetask.DefaultStartLon
		stc.mutation.SetStartLon(v)
	}
	if _, ok := stc.mutation.StartLat(); !ok {
		v := schetask.DefaultStartLat
		stc.mutation.SetStartLat(v)
	}
	if _, ok := stc.mutation.ScheMode(); !ok {
		v := schetask.DefaultScheMode
		stc.mutation.SetScheMode(v)
	}
	if _, ok := stc.mutation.AbnormalState(); !ok {
		v := schetask.DefaultAbnormalState
		stc.mutation.SetAbnormalState(v)
	}
	if _, ok := stc.mutation.Remark(); !ok {
		v := schetask.DefaultRemark
		stc.mutation.SetRemark(v)
	}
	if _, ok := stc.mutation.RestartScheTime(); !ok {
		v := schetask.DefaultRestartScheTime
		stc.mutation.SetRestartScheTime(v)
	}
	if _, ok := stc.mutation.CreateTime(); !ok {
		v := schetask.DefaultCreateTime()
		stc.mutation.SetCreateTime(v)
	}
	if _, ok := stc.mutation.UpdateTime(); !ok {
		v := schetask.DefaultUpdateTime()
		stc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stc *ScheTaskCreate) check() error {
	if _, ok := stc.mutation.UserOrigin(); !ok {
		return &ValidationError{Name: "user_origin", err: errors.New(`ent: missing required field "ScheTask.user_origin"`)}
	}
	if _, ok := stc.mutation.UserType(); !ok {
		return &ValidationError{Name: "user_type", err: errors.New(`ent: missing required field "ScheTask.user_type"`)}
	}
	if _, ok := stc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "ScheTask.user_id"`)}
	}
	if _, ok := stc.mutation.ScenicAreaID(); !ok {
		return &ValidationError{Name: "scenic_area_id", err: errors.New(`ent: missing required field "ScheTask.scenic_area_id"`)}
	}
	if _, ok := stc.mutation.CarID(); !ok {
		return &ValidationError{Name: "car_id", err: errors.New(`ent: missing required field "ScheTask.car_id"`)}
	}
	if _, ok := stc.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device_id", err: errors.New(`ent: missing required field "ScheTask.device_id"`)}
	}
	if _, ok := stc.mutation.DestID(); !ok {
		return &ValidationError{Name: "dest_id", err: errors.New(`ent: missing required field "ScheTask.dest_id"`)}
	}
	if _, ok := stc.mutation.StartLon(); !ok {
		return &ValidationError{Name: "start_lon", err: errors.New(`ent: missing required field "ScheTask.start_lon"`)}
	}
	if _, ok := stc.mutation.StartLat(); !ok {
		return &ValidationError{Name: "start_lat", err: errors.New(`ent: missing required field "ScheTask.start_lat"`)}
	}
	if _, ok := stc.mutation.DestLon(); !ok {
		return &ValidationError{Name: "dest_lon", err: errors.New(`ent: missing required field "ScheTask.dest_lon"`)}
	}
	if _, ok := stc.mutation.DestLat(); !ok {
		return &ValidationError{Name: "dest_lat", err: errors.New(`ent: missing required field "ScheTask.dest_lat"`)}
	}
	if _, ok := stc.mutation.ScheMode(); !ok {
		return &ValidationError{Name: "sche_mode", err: errors.New(`ent: missing required field "ScheTask.sche_mode"`)}
	}
	if _, ok := stc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "ScheTask.state"`)}
	}
	if _, ok := stc.mutation.AbnormalState(); !ok {
		return &ValidationError{Name: "abnormal_state", err: errors.New(`ent: missing required field "ScheTask.abnormal_state"`)}
	}
	if _, ok := stc.mutation.Remark(); !ok {
		return &ValidationError{Name: "remark", err: errors.New(`ent: missing required field "ScheTask.remark"`)}
	}
	if _, ok := stc.mutation.RoutingPath(); !ok {
		return &ValidationError{Name: "routing_path", err: errors.New(`ent: missing required field "ScheTask.routing_path"`)}
	}
	if _, ok := stc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "ScheTask.create_time"`)}
	}
	if _, ok := stc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "ScheTask.update_time"`)}
	}
	if len(stc.mutation.CarIDs()) == 0 {
		return &ValidationError{Name: "car", err: errors.New(`ent: missing required edge "ScheTask.car"`)}
	}
	return nil
}

func (stc *ScheTaskCreate) sqlSave(ctx context.Context) (*ScheTask, error) {
	if err := stc.check(); err != nil {
		return nil, err
	}
	_node, _spec := stc.createSpec()
	if err := sqlgraph.CreateNode(ctx, stc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	stc.mutation.id = &_node.ID
	stc.mutation.done = true
	return _node, nil
}

func (stc *ScheTaskCreate) createSpec() (*ScheTask, *sqlgraph.CreateSpec) {
	var (
		_node = &ScheTask{config: stc.config}
		_spec = sqlgraph.NewCreateSpec(schetask.Table, sqlgraph.NewFieldSpec(schetask.FieldID, field.TypeInt))
	)
	if id, ok := stc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := stc.mutation.UserOrigin(); ok {
		_spec.SetField(schetask.FieldUserOrigin, field.TypeInt, value)
		_node.UserOrigin = value
	}
	if value, ok := stc.mutation.UserType(); ok {
		_spec.SetField(schetask.FieldUserType, field.TypeInt, value)
		_node.UserType = value
	}
	if value, ok := stc.mutation.UserID(); ok {
		_spec.SetField(schetask.FieldUserID, field.TypeInt, value)
		_node.UserID = value
	}
	if value, ok := stc.mutation.ScenicAreaID(); ok {
		_spec.SetField(schetask.FieldScenicAreaID, field.TypeInt, value)
		_node.ScenicAreaID = value
	}
	if value, ok := stc.mutation.DeviceID(); ok {
		_spec.SetField(schetask.FieldDeviceID, field.TypeString, value)
		_node.DeviceID = value
	}
	if value, ok := stc.mutation.DestID(); ok {
		_spec.SetField(schetask.FieldDestID, field.TypeInt, value)
		_node.DestID = value
	}
	if value, ok := stc.mutation.StartLon(); ok {
		_spec.SetField(schetask.FieldStartLon, field.TypeFloat64, value)
		_node.StartLon = value
	}
	if value, ok := stc.mutation.StartLat(); ok {
		_spec.SetField(schetask.FieldStartLat, field.TypeFloat64, value)
		_node.StartLat = value
	}
	if value, ok := stc.mutation.DestLon(); ok {
		_spec.SetField(schetask.FieldDestLon, field.TypeFloat64, value)
		_node.DestLon = value
	}
	if value, ok := stc.mutation.DestLat(); ok {
		_spec.SetField(schetask.FieldDestLat, field.TypeFloat64, value)
		_node.DestLat = value
	}
	if value, ok := stc.mutation.ScheMode(); ok {
		_spec.SetField(schetask.FieldScheMode, field.TypeInt, value)
		_node.ScheMode = value
	}
	if value, ok := stc.mutation.ScheArgs(); ok {
		_spec.SetField(schetask.FieldScheArgs, field.TypeJSON, value)
		_node.ScheArgs = value
	}
	if value, ok := stc.mutation.State(); ok {
		_spec.SetField(schetask.FieldState, field.TypeInt, value)
		_node.State = value
	}
	if value, ok := stc.mutation.AbnormalState(); ok {
		_spec.SetField(schetask.FieldAbnormalState, field.TypeInt, value)
		_node.AbnormalState = value
	}
	if value, ok := stc.mutation.Remark(); ok {
		_spec.SetField(schetask.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := stc.mutation.RoutingPath(); ok {
		_spec.SetField(schetask.FieldRoutingPath, field.TypeJSON, value)
		_node.RoutingPath = value
	}
	if value, ok := stc.mutation.RestartScheTime(); ok {
		_spec.SetField(schetask.FieldRestartScheTime, field.TypeTime, value)
		_node.RestartScheTime = value
	}
	if value, ok := stc.mutation.EndTime(); ok {
		_spec.SetField(schetask.FieldEndTime, field.TypeTime, value)
		_node.EndTime = value
	}
	if value, ok := stc.mutation.CreateTime(); ok {
		_spec.SetField(schetask.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := stc.mutation.UpdateTime(); ok {
		_spec.SetField(schetask.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if nodes := stc.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   schetask.CarTable,
			Columns: []string{schetask.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CarID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := stc.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   schetask.EventsTable,
			Columns: []string{schetask.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(schetaskevent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ScheTaskCreateBulk is the builder for creating many ScheTask entities in bulk.
type ScheTaskCreateBulk struct {
	config
	err      error
	builders []*ScheTaskCreate
}

// Save creates the ScheTask entities in the database.
func (stcb *ScheTaskCreateBulk) Save(ctx context.Context) ([]*ScheTask, error) {
	if stcb.err != nil {
		return nil, stcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(stcb.builders))
	nodes := make([]*ScheTask, len(stcb.builders))
	mutators := make([]Mutator, len(stcb.builders))
	for i := range stcb.builders {
		func(i int, root context.Context) {
			builder := stcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScheTaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, stcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, stcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, stcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (stcb *ScheTaskCreateBulk) SaveX(ctx context.Context) []*ScheTask {
	v, err := stcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (stcb *ScheTaskCreateBulk) Exec(ctx context.Context) error {
	_, err := stcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stcb *ScheTaskCreateBulk) ExecX(ctx context.Context) {
	if err := stcb.Exec(ctx); err != nil {
		panic(err)
	}
}
