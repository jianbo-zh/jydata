// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/car"
	"github.com/jianbo-zh/jydata/database/ent/carconfig"
	"github.com/jianbo-zh/jydata/database/ent/carsmodels"
	"github.com/jianbo-zh/jydata/database/ent/scenicarea"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarConfigCreate is the builder for creating a CarConfig entity.
type CarConfigCreate struct {
	config
	mutation *CarConfigMutation
	hooks    []Hook
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (ccc *CarConfigCreate) SetScenicAreaID(i int) *CarConfigCreate {
	ccc.mutation.SetScenicAreaID(i)
	return ccc
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (ccc *CarConfigCreate) SetNillableScenicAreaID(i *int) *CarConfigCreate {
	if i != nil {
		ccc.SetScenicAreaID(*i)
	}
	return ccc
}

// SetModelID sets the "model_id" field.
func (ccc *CarConfigCreate) SetModelID(i int) *CarConfigCreate {
	ccc.mutation.SetModelID(i)
	return ccc
}

// SetNillableModelID sets the "model_id" field if the given value is not nil.
func (ccc *CarConfigCreate) SetNillableModelID(i *int) *CarConfigCreate {
	if i != nil {
		ccc.SetModelID(*i)
	}
	return ccc
}

// SetCarID sets the "car_id" field.
func (ccc *CarConfigCreate) SetCarID(i int) *CarConfigCreate {
	ccc.mutation.SetCarID(i)
	return ccc
}

// SetNillableCarID sets the "car_id" field if the given value is not nil.
func (ccc *CarConfigCreate) SetNillableCarID(i *int) *CarConfigCreate {
	if i != nil {
		ccc.SetCarID(*i)
	}
	return ccc
}

// SetCarVersion sets the "car_version" field.
func (ccc *CarConfigCreate) SetCarVersion(s string) *CarConfigCreate {
	ccc.mutation.SetCarVersion(s)
	return ccc
}

// SetNillableCarVersion sets the "car_version" field if the given value is not nil.
func (ccc *CarConfigCreate) SetNillableCarVersion(s *string) *CarConfigCreate {
	if s != nil {
		ccc.SetCarVersion(*s)
	}
	return ccc
}

// SetName sets the "name" field.
func (ccc *CarConfigCreate) SetName(s string) *CarConfigCreate {
	ccc.mutation.SetName(s)
	return ccc
}

// SetRemark sets the "remark" field.
func (ccc *CarConfigCreate) SetRemark(s string) *CarConfigCreate {
	ccc.mutation.SetRemark(s)
	return ccc
}

// SetVersion sets the "version" field.
func (ccc *CarConfigCreate) SetVersion(s string) *CarConfigCreate {
	ccc.mutation.SetVersion(s)
	return ccc
}

// SetSavePath sets the "save_path" field.
func (ccc *CarConfigCreate) SetSavePath(s string) *CarConfigCreate {
	ccc.mutation.SetSavePath(s)
	return ccc
}

// SetContentType sets the "content_type" field.
func (ccc *CarConfigCreate) SetContentType(i int) *CarConfigCreate {
	ccc.mutation.SetContentType(i)
	return ccc
}

// SetNillableContentType sets the "content_type" field if the given value is not nil.
func (ccc *CarConfigCreate) SetNillableContentType(i *int) *CarConfigCreate {
	if i != nil {
		ccc.SetContentType(*i)
	}
	return ccc
}

// SetContentField sets the "content_field" field.
func (ccc *CarConfigCreate) SetContentField(i int) *CarConfigCreate {
	ccc.mutation.SetContentField(i)
	return ccc
}

// SetNillableContentField sets the "content_field" field if the given value is not nil.
func (ccc *CarConfigCreate) SetNillableContentField(i *int) *CarConfigCreate {
	if i != nil {
		ccc.SetContentField(*i)
	}
	return ccc
}

// SetContentFileID sets the "content_file_id" field.
func (ccc *CarConfigCreate) SetContentFileID(i int) *CarConfigCreate {
	ccc.mutation.SetContentFileID(i)
	return ccc
}

// SetNillableContentFileID sets the "content_file_id" field if the given value is not nil.
func (ccc *CarConfigCreate) SetNillableContentFileID(i *int) *CarConfigCreate {
	if i != nil {
		ccc.SetContentFileID(*i)
	}
	return ccc
}

// SetContentPbtext sets the "content_pbtext" field.
func (ccc *CarConfigCreate) SetContentPbtext(s string) *CarConfigCreate {
	ccc.mutation.SetContentPbtext(s)
	return ccc
}

// SetNillableContentPbtext sets the "content_pbtext" field if the given value is not nil.
func (ccc *CarConfigCreate) SetNillableContentPbtext(s *string) *CarConfigCreate {
	if s != nil {
		ccc.SetContentPbtext(*s)
	}
	return ccc
}

// SetContentSha1 sets the "content_sha1" field.
func (ccc *CarConfigCreate) SetContentSha1(s string) *CarConfigCreate {
	ccc.mutation.SetContentSha1(s)
	return ccc
}

// SetResourceFileIds sets the "resource_file_ids" field.
func (ccc *CarConfigCreate) SetResourceFileIds(i []int) *CarConfigCreate {
	ccc.mutation.SetResourceFileIds(i)
	return ccc
}

// SetCreateTime sets the "create_time" field.
func (ccc *CarConfigCreate) SetCreateTime(t time.Time) *CarConfigCreate {
	ccc.mutation.SetCreateTime(t)
	return ccc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ccc *CarConfigCreate) SetNillableCreateTime(t *time.Time) *CarConfigCreate {
	if t != nil {
		ccc.SetCreateTime(*t)
	}
	return ccc
}

// SetID sets the "id" field.
func (ccc *CarConfigCreate) SetID(i int) *CarConfigCreate {
	ccc.mutation.SetID(i)
	return ccc
}

// SetBackgroundScenicAreaID sets the "background_scenic_area" edge to the ScenicArea entity by ID.
func (ccc *CarConfigCreate) SetBackgroundScenicAreaID(id int) *CarConfigCreate {
	ccc.mutation.SetBackgroundScenicAreaID(id)
	return ccc
}

// SetNillableBackgroundScenicAreaID sets the "background_scenic_area" edge to the ScenicArea entity by ID if the given value is not nil.
func (ccc *CarConfigCreate) SetNillableBackgroundScenicAreaID(id *int) *CarConfigCreate {
	if id != nil {
		ccc = ccc.SetBackgroundScenicAreaID(*id)
	}
	return ccc
}

// SetBackgroundScenicArea sets the "background_scenic_area" edge to the ScenicArea entity.
func (ccc *CarConfigCreate) SetBackgroundScenicArea(s *ScenicArea) *CarConfigCreate {
	return ccc.SetBackgroundScenicAreaID(s.ID)
}

// SetCarsModelsID sets the "cars_models" edge to the CarsModels entity by ID.
func (ccc *CarConfigCreate) SetCarsModelsID(id int) *CarConfigCreate {
	ccc.mutation.SetCarsModelsID(id)
	return ccc
}

// SetNillableCarsModelsID sets the "cars_models" edge to the CarsModels entity by ID if the given value is not nil.
func (ccc *CarConfigCreate) SetNillableCarsModelsID(id *int) *CarConfigCreate {
	if id != nil {
		ccc = ccc.SetCarsModelsID(*id)
	}
	return ccc
}

// SetCarsModels sets the "cars_models" edge to the CarsModels entity.
func (ccc *CarConfigCreate) SetCarsModels(c *CarsModels) *CarConfigCreate {
	return ccc.SetCarsModelsID(c.ID)
}

// SetCar sets the "car" edge to the Car entity.
func (ccc *CarConfigCreate) SetCar(c *Car) *CarConfigCreate {
	return ccc.SetCarID(c.ID)
}

// Mutation returns the CarConfigMutation object of the builder.
func (ccc *CarConfigCreate) Mutation() *CarConfigMutation {
	return ccc.mutation
}

// Save creates the CarConfig in the database.
func (ccc *CarConfigCreate) Save(ctx context.Context) (*CarConfig, error) {
	ccc.defaults()
	return withHooks(ctx, ccc.sqlSave, ccc.mutation, ccc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ccc *CarConfigCreate) SaveX(ctx context.Context) *CarConfig {
	v, err := ccc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccc *CarConfigCreate) Exec(ctx context.Context) error {
	_, err := ccc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccc *CarConfigCreate) ExecX(ctx context.Context) {
	if err := ccc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ccc *CarConfigCreate) defaults() {
	if _, ok := ccc.mutation.CarVersion(); !ok {
		v := carconfig.DefaultCarVersion
		ccc.mutation.SetCarVersion(v)
	}
	if _, ok := ccc.mutation.ContentType(); !ok {
		v := carconfig.DefaultContentType
		ccc.mutation.SetContentType(v)
	}
	if _, ok := ccc.mutation.ContentField(); !ok {
		v := carconfig.DefaultContentField
		ccc.mutation.SetContentField(v)
	}
	if _, ok := ccc.mutation.ContentPbtext(); !ok {
		v := carconfig.DefaultContentPbtext
		ccc.mutation.SetContentPbtext(v)
	}
	if _, ok := ccc.mutation.CreateTime(); !ok {
		v := carconfig.DefaultCreateTime()
		ccc.mutation.SetCreateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccc *CarConfigCreate) check() error {
	if _, ok := ccc.mutation.CarVersion(); !ok {
		return &ValidationError{Name: "car_version", err: errors.New(`ent: missing required field "CarConfig.car_version"`)}
	}
	if _, ok := ccc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "CarConfig.name"`)}
	}
	if _, ok := ccc.mutation.Remark(); !ok {
		return &ValidationError{Name: "remark", err: errors.New(`ent: missing required field "CarConfig.remark"`)}
	}
	if _, ok := ccc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "CarConfig.version"`)}
	}
	if _, ok := ccc.mutation.SavePath(); !ok {
		return &ValidationError{Name: "save_path", err: errors.New(`ent: missing required field "CarConfig.save_path"`)}
	}
	if _, ok := ccc.mutation.ContentType(); !ok {
		return &ValidationError{Name: "content_type", err: errors.New(`ent: missing required field "CarConfig.content_type"`)}
	}
	if _, ok := ccc.mutation.ContentField(); !ok {
		return &ValidationError{Name: "content_field", err: errors.New(`ent: missing required field "CarConfig.content_field"`)}
	}
	if _, ok := ccc.mutation.ContentPbtext(); !ok {
		return &ValidationError{Name: "content_pbtext", err: errors.New(`ent: missing required field "CarConfig.content_pbtext"`)}
	}
	if _, ok := ccc.mutation.ContentSha1(); !ok {
		return &ValidationError{Name: "content_sha1", err: errors.New(`ent: missing required field "CarConfig.content_sha1"`)}
	}
	if _, ok := ccc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "CarConfig.create_time"`)}
	}
	return nil
}

func (ccc *CarConfigCreate) sqlSave(ctx context.Context) (*CarConfig, error) {
	if err := ccc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ccc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ccc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	ccc.mutation.id = &_node.ID
	ccc.mutation.done = true
	return _node, nil
}

func (ccc *CarConfigCreate) createSpec() (*CarConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &CarConfig{config: ccc.config}
		_spec = sqlgraph.NewCreateSpec(carconfig.Table, sqlgraph.NewFieldSpec(carconfig.FieldID, field.TypeInt))
	)
	if id, ok := ccc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ccc.mutation.CarVersion(); ok {
		_spec.SetField(carconfig.FieldCarVersion, field.TypeString, value)
		_node.CarVersion = value
	}
	if value, ok := ccc.mutation.Name(); ok {
		_spec.SetField(carconfig.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ccc.mutation.Remark(); ok {
		_spec.SetField(carconfig.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := ccc.mutation.Version(); ok {
		_spec.SetField(carconfig.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := ccc.mutation.SavePath(); ok {
		_spec.SetField(carconfig.FieldSavePath, field.TypeString, value)
		_node.SavePath = value
	}
	if value, ok := ccc.mutation.ContentType(); ok {
		_spec.SetField(carconfig.FieldContentType, field.TypeInt, value)
		_node.ContentType = value
	}
	if value, ok := ccc.mutation.ContentField(); ok {
		_spec.SetField(carconfig.FieldContentField, field.TypeInt, value)
		_node.ContentField = value
	}
	if value, ok := ccc.mutation.ContentFileID(); ok {
		_spec.SetField(carconfig.FieldContentFileID, field.TypeInt, value)
		_node.ContentFileID = &value
	}
	if value, ok := ccc.mutation.ContentPbtext(); ok {
		_spec.SetField(carconfig.FieldContentPbtext, field.TypeString, value)
		_node.ContentPbtext = value
	}
	if value, ok := ccc.mutation.ContentSha1(); ok {
		_spec.SetField(carconfig.FieldContentSha1, field.TypeString, value)
		_node.ContentSha1 = value
	}
	if value, ok := ccc.mutation.ResourceFileIds(); ok {
		_spec.SetField(carconfig.FieldResourceFileIds, field.TypeJSON, value)
		_node.ResourceFileIds = value
	}
	if value, ok := ccc.mutation.CreateTime(); ok {
		_spec.SetField(carconfig.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if nodes := ccc.mutation.BackgroundScenicAreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carconfig.BackgroundScenicAreaTable,
			Columns: []string{carconfig.BackgroundScenicAreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenicarea.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ScenicAreaID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ccc.mutation.CarsModelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carconfig.CarsModelsTable,
			Columns: []string{carconfig.CarsModelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsmodels.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ModelID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ccc.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carconfig.CarTable,
			Columns: []string{carconfig.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CarID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CarConfigCreateBulk is the builder for creating many CarConfig entities in bulk.
type CarConfigCreateBulk struct {
	config
	err      error
	builders []*CarConfigCreate
}

// Save creates the CarConfig entities in the database.
func (cccb *CarConfigCreateBulk) Save(ctx context.Context) ([]*CarConfig, error) {
	if cccb.err != nil {
		return nil, cccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cccb.builders))
	nodes := make([]*CarConfig, len(cccb.builders))
	mutators := make([]Mutator, len(cccb.builders))
	for i := range cccb.builders {
		func(i int, root context.Context) {
			builder := cccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CarConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cccb *CarConfigCreateBulk) SaveX(ctx context.Context) []*CarConfig {
	v, err := cccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cccb *CarConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := cccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cccb *CarConfigCreateBulk) ExecX(ctx context.Context) {
	if err := cccb.Exec(ctx); err != nil {
		panic(err)
	}
}
