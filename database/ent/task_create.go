// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/task"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TaskCreate is the builder for creating a Task entity.
type TaskCreate struct {
	config
	mutation *TaskMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (tc *TaskCreate) SetType(s string) *TaskCreate {
	tc.mutation.SetType(s)
	return tc
}

// SetRelID sets the "rel_id" field.
func (tc *TaskCreate) SetRelID(i int) *TaskCreate {
	tc.mutation.SetRelID(i)
	return tc
}

// SetNillableRelID sets the "rel_id" field if the given value is not nil.
func (tc *TaskCreate) SetNillableRelID(i *int) *TaskCreate {
	if i != nil {
		tc.SetRelID(*i)
	}
	return tc
}

// SetRelData sets the "rel_data" field.
func (tc *TaskCreate) SetRelData(a any) *TaskCreate {
	tc.mutation.SetRelData(a)
	return tc
}

// SetState sets the "state" field.
func (tc *TaskCreate) SetState(i int) *TaskCreate {
	tc.mutation.SetState(i)
	return tc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (tc *TaskCreate) SetNillableState(i *int) *TaskCreate {
	if i != nil {
		tc.SetState(*i)
	}
	return tc
}

// SetTryTimes sets the "try_times" field.
func (tc *TaskCreate) SetTryTimes(i int) *TaskCreate {
	tc.mutation.SetTryTimes(i)
	return tc
}

// SetNillableTryTimes sets the "try_times" field if the given value is not nil.
func (tc *TaskCreate) SetNillableTryTimes(i *int) *TaskCreate {
	if i != nil {
		tc.SetTryTimes(*i)
	}
	return tc
}

// SetErrorMsg sets the "error_msg" field.
func (tc *TaskCreate) SetErrorMsg(s string) *TaskCreate {
	tc.mutation.SetErrorMsg(s)
	return tc
}

// SetNillableErrorMsg sets the "error_msg" field if the given value is not nil.
func (tc *TaskCreate) SetNillableErrorMsg(s *string) *TaskCreate {
	if s != nil {
		tc.SetErrorMsg(*s)
	}
	return tc
}

// SetStartTime sets the "start_time" field.
func (tc *TaskCreate) SetStartTime(t time.Time) *TaskCreate {
	tc.mutation.SetStartTime(t)
	return tc
}

// SetNextTime sets the "next_time" field.
func (tc *TaskCreate) SetNextTime(t time.Time) *TaskCreate {
	tc.mutation.SetNextTime(t)
	return tc
}

// SetEndTime sets the "end_time" field.
func (tc *TaskCreate) SetEndTime(t time.Time) *TaskCreate {
	tc.mutation.SetEndTime(t)
	return tc
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (tc *TaskCreate) SetNillableEndTime(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetEndTime(*t)
	}
	return tc
}

// SetCreateTime sets the "create_time" field.
func (tc *TaskCreate) SetCreateTime(t time.Time) *TaskCreate {
	tc.mutation.SetCreateTime(t)
	return tc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (tc *TaskCreate) SetNillableCreateTime(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetCreateTime(*t)
	}
	return tc
}

// SetUpdateTime sets the "update_time" field.
func (tc *TaskCreate) SetUpdateTime(t time.Time) *TaskCreate {
	tc.mutation.SetUpdateTime(t)
	return tc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (tc *TaskCreate) SetNillableUpdateTime(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetUpdateTime(*t)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TaskCreate) SetID(i int) *TaskCreate {
	tc.mutation.SetID(i)
	return tc
}

// Mutation returns the TaskMutation object of the builder.
func (tc *TaskCreate) Mutation() *TaskMutation {
	return tc.mutation
}

// Save creates the Task in the database.
func (tc *TaskCreate) Save(ctx context.Context) (*Task, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TaskCreate) SaveX(ctx context.Context) *Task {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TaskCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TaskCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TaskCreate) defaults() {
	if _, ok := tc.mutation.RelID(); !ok {
		v := task.DefaultRelID
		tc.mutation.SetRelID(v)
	}
	if _, ok := tc.mutation.State(); !ok {
		v := task.DefaultState
		tc.mutation.SetState(v)
	}
	if _, ok := tc.mutation.TryTimes(); !ok {
		v := task.DefaultTryTimes
		tc.mutation.SetTryTimes(v)
	}
	if _, ok := tc.mutation.ErrorMsg(); !ok {
		v := task.DefaultErrorMsg
		tc.mutation.SetErrorMsg(v)
	}
	if _, ok := tc.mutation.CreateTime(); !ok {
		v := task.DefaultCreateTime()
		tc.mutation.SetCreateTime(v)
	}
	if _, ok := tc.mutation.UpdateTime(); !ok {
		v := task.DefaultUpdateTime()
		tc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TaskCreate) check() error {
	if _, ok := tc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Task.type"`)}
	}
	if _, ok := tc.mutation.RelID(); !ok {
		return &ValidationError{Name: "rel_id", err: errors.New(`ent: missing required field "Task.rel_id"`)}
	}
	if _, ok := tc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "Task.state"`)}
	}
	if _, ok := tc.mutation.TryTimes(); !ok {
		return &ValidationError{Name: "try_times", err: errors.New(`ent: missing required field "Task.try_times"`)}
	}
	if _, ok := tc.mutation.ErrorMsg(); !ok {
		return &ValidationError{Name: "error_msg", err: errors.New(`ent: missing required field "Task.error_msg"`)}
	}
	if _, ok := tc.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "Task.start_time"`)}
	}
	if _, ok := tc.mutation.NextTime(); !ok {
		return &ValidationError{Name: "next_time", err: errors.New(`ent: missing required field "Task.next_time"`)}
	}
	if _, ok := tc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Task.create_time"`)}
	}
	if _, ok := tc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Task.update_time"`)}
	}
	return nil
}

func (tc *TaskCreate) sqlSave(ctx context.Context) (*Task, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TaskCreate) createSpec() (*Task, *sqlgraph.CreateSpec) {
	var (
		_node = &Task{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(task.Table, sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt))
	)
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.GetType(); ok {
		_spec.SetField(task.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := tc.mutation.RelID(); ok {
		_spec.SetField(task.FieldRelID, field.TypeInt, value)
		_node.RelID = value
	}
	if value, ok := tc.mutation.RelData(); ok {
		_spec.SetField(task.FieldRelData, field.TypeJSON, value)
		_node.RelData = value
	}
	if value, ok := tc.mutation.State(); ok {
		_spec.SetField(task.FieldState, field.TypeInt, value)
		_node.State = value
	}
	if value, ok := tc.mutation.TryTimes(); ok {
		_spec.SetField(task.FieldTryTimes, field.TypeInt, value)
		_node.TryTimes = value
	}
	if value, ok := tc.mutation.ErrorMsg(); ok {
		_spec.SetField(task.FieldErrorMsg, field.TypeString, value)
		_node.ErrorMsg = value
	}
	if value, ok := tc.mutation.StartTime(); ok {
		_spec.SetField(task.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := tc.mutation.NextTime(); ok {
		_spec.SetField(task.FieldNextTime, field.TypeTime, value)
		_node.NextTime = value
	}
	if value, ok := tc.mutation.EndTime(); ok {
		_spec.SetField(task.FieldEndTime, field.TypeTime, value)
		_node.EndTime = value
	}
	if value, ok := tc.mutation.CreateTime(); ok {
		_spec.SetField(task.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := tc.mutation.UpdateTime(); ok {
		_spec.SetField(task.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// TaskCreateBulk is the builder for creating many Task entities in bulk.
type TaskCreateBulk struct {
	config
	err      error
	builders []*TaskCreate
}

// Save creates the Task entities in the database.
func (tcb *TaskCreateBulk) Save(ctx context.Context) ([]*Task, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Task, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TaskCreateBulk) SaveX(ctx context.Context) []*Task {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TaskCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TaskCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
