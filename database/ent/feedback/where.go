// Code generated by ent, DO NOT EDIT.

package feedback

import (
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Feedback {
	return predicate.Feedback(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Feedback {
	return predicate.Feedback(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Feedback {
	return predicate.Feedback(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Feedback {
	return predicate.Feedback(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Feedback {
	return predicate.Feedback(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Feedback {
	return predicate.Feedback(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Feedback {
	return predicate.Feedback(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Feedback {
	return predicate.Feedback(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Feedback {
	return predicate.Feedback(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.Feedback {
	return predicate.Feedback(sql.FieldEQ(FieldUserID, v))
}

// ScenicAreaID applies equality check predicate on the "scenic_area_id" field. It's identical to ScenicAreaIDEQ.
func ScenicAreaID(v int) predicate.Feedback {
	return predicate.Feedback(sql.FieldEQ(FieldScenicAreaID, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.Feedback {
	return predicate.Feedback(sql.FieldEQ(FieldContent, v))
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v int) predicate.Feedback {
	return predicate.Feedback(sql.FieldEQ(FieldState, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Feedback {
	return predicate.Feedback(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Feedback {
	return predicate.Feedback(sql.FieldEQ(FieldUpdateTime, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.Feedback {
	return predicate.Feedback(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.Feedback {
	return predicate.Feedback(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.Feedback {
	return predicate.Feedback(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.Feedback {
	return predicate.Feedback(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v int) predicate.Feedback {
	return predicate.Feedback(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v int) predicate.Feedback {
	return predicate.Feedback(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v int) predicate.Feedback {
	return predicate.Feedback(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v int) predicate.Feedback {
	return predicate.Feedback(sql.FieldLTE(FieldUserID, v))
}

// ScenicAreaIDEQ applies the EQ predicate on the "scenic_area_id" field.
func ScenicAreaIDEQ(v int) predicate.Feedback {
	return predicate.Feedback(sql.FieldEQ(FieldScenicAreaID, v))
}

// ScenicAreaIDNEQ applies the NEQ predicate on the "scenic_area_id" field.
func ScenicAreaIDNEQ(v int) predicate.Feedback {
	return predicate.Feedback(sql.FieldNEQ(FieldScenicAreaID, v))
}

// ScenicAreaIDIn applies the In predicate on the "scenic_area_id" field.
func ScenicAreaIDIn(vs ...int) predicate.Feedback {
	return predicate.Feedback(sql.FieldIn(FieldScenicAreaID, vs...))
}

// ScenicAreaIDNotIn applies the NotIn predicate on the "scenic_area_id" field.
func ScenicAreaIDNotIn(vs ...int) predicate.Feedback {
	return predicate.Feedback(sql.FieldNotIn(FieldScenicAreaID, vs...))
}

// ScenicAreaIDGT applies the GT predicate on the "scenic_area_id" field.
func ScenicAreaIDGT(v int) predicate.Feedback {
	return predicate.Feedback(sql.FieldGT(FieldScenicAreaID, v))
}

// ScenicAreaIDGTE applies the GTE predicate on the "scenic_area_id" field.
func ScenicAreaIDGTE(v int) predicate.Feedback {
	return predicate.Feedback(sql.FieldGTE(FieldScenicAreaID, v))
}

// ScenicAreaIDLT applies the LT predicate on the "scenic_area_id" field.
func ScenicAreaIDLT(v int) predicate.Feedback {
	return predicate.Feedback(sql.FieldLT(FieldScenicAreaID, v))
}

// ScenicAreaIDLTE applies the LTE predicate on the "scenic_area_id" field.
func ScenicAreaIDLTE(v int) predicate.Feedback {
	return predicate.Feedback(sql.FieldLTE(FieldScenicAreaID, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.Feedback {
	return predicate.Feedback(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.Feedback {
	return predicate.Feedback(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.Feedback {
	return predicate.Feedback(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.Feedback {
	return predicate.Feedback(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.Feedback {
	return predicate.Feedback(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.Feedback {
	return predicate.Feedback(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.Feedback {
	return predicate.Feedback(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.Feedback {
	return predicate.Feedback(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.Feedback {
	return predicate.Feedback(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.Feedback {
	return predicate.Feedback(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.Feedback {
	return predicate.Feedback(sql.FieldHasSuffix(FieldContent, v))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.Feedback {
	return predicate.Feedback(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.Feedback {
	return predicate.Feedback(sql.FieldContainsFold(FieldContent, v))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v int) predicate.Feedback {
	return predicate.Feedback(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v int) predicate.Feedback {
	return predicate.Feedback(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...int) predicate.Feedback {
	return predicate.Feedback(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...int) predicate.Feedback {
	return predicate.Feedback(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v int) predicate.Feedback {
	return predicate.Feedback(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v int) predicate.Feedback {
	return predicate.Feedback(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v int) predicate.Feedback {
	return predicate.Feedback(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v int) predicate.Feedback {
	return predicate.Feedback(sql.FieldLTE(FieldState, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Feedback {
	return predicate.Feedback(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Feedback {
	return predicate.Feedback(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Feedback {
	return predicate.Feedback(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Feedback {
	return predicate.Feedback(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Feedback {
	return predicate.Feedback(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Feedback {
	return predicate.Feedback(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Feedback {
	return predicate.Feedback(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Feedback {
	return predicate.Feedback(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Feedback {
	return predicate.Feedback(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Feedback {
	return predicate.Feedback(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Feedback {
	return predicate.Feedback(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Feedback {
	return predicate.Feedback(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Feedback {
	return predicate.Feedback(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Feedback {
	return predicate.Feedback(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Feedback {
	return predicate.Feedback(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Feedback {
	return predicate.Feedback(sql.FieldLTE(FieldUpdateTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Feedback) predicate.Feedback {
	return predicate.Feedback(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Feedback) predicate.Feedback {
	return predicate.Feedback(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Feedback) predicate.Feedback {
	return predicate.Feedback(sql.NotPredicates(p))
}
