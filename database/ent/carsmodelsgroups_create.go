// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/carsmodels"
	"github.com/jianbo-zh/jydata/database/ent/carsmodelsgroups"
	"github.com/jianbo-zh/jydata/database/ent/carsmodelsgroupsparams"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarsModelsGroupsCreate is the builder for creating a CarsModelsGroups entity.
type CarsModelsGroupsCreate struct {
	config
	mutation *CarsModelsGroupsMutation
	hooks    []Hook
}

// SetModelID sets the "model_id" field.
func (cmgc *CarsModelsGroupsCreate) SetModelID(i int) *CarsModelsGroupsCreate {
	cmgc.mutation.SetModelID(i)
	return cmgc
}

// SetNillableModelID sets the "model_id" field if the given value is not nil.
func (cmgc *CarsModelsGroupsCreate) SetNillableModelID(i *int) *CarsModelsGroupsCreate {
	if i != nil {
		cmgc.SetModelID(*i)
	}
	return cmgc
}

// SetGroupRemark sets the "group_remark" field.
func (cmgc *CarsModelsGroupsCreate) SetGroupRemark(s string) *CarsModelsGroupsCreate {
	cmgc.mutation.SetGroupRemark(s)
	return cmgc
}

// SetNillableGroupRemark sets the "group_remark" field if the given value is not nil.
func (cmgc *CarsModelsGroupsCreate) SetNillableGroupRemark(s *string) *CarsModelsGroupsCreate {
	if s != nil {
		cmgc.SetGroupRemark(*s)
	}
	return cmgc
}

// SetGroupName sets the "group_name" field.
func (cmgc *CarsModelsGroupsCreate) SetGroupName(s string) *CarsModelsGroupsCreate {
	cmgc.mutation.SetGroupName(s)
	return cmgc
}

// SetStatus sets the "status" field.
func (cmgc *CarsModelsGroupsCreate) SetStatus(i int) *CarsModelsGroupsCreate {
	cmgc.mutation.SetStatus(i)
	return cmgc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cmgc *CarsModelsGroupsCreate) SetNillableStatus(i *int) *CarsModelsGroupsCreate {
	if i != nil {
		cmgc.SetStatus(*i)
	}
	return cmgc
}

// SetIsDeleted sets the "is_deleted" field.
func (cmgc *CarsModelsGroupsCreate) SetIsDeleted(i int) *CarsModelsGroupsCreate {
	cmgc.mutation.SetIsDeleted(i)
	return cmgc
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (cmgc *CarsModelsGroupsCreate) SetNillableIsDeleted(i *int) *CarsModelsGroupsCreate {
	if i != nil {
		cmgc.SetIsDeleted(*i)
	}
	return cmgc
}

// SetCreateTime sets the "create_time" field.
func (cmgc *CarsModelsGroupsCreate) SetCreateTime(t time.Time) *CarsModelsGroupsCreate {
	cmgc.mutation.SetCreateTime(t)
	return cmgc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (cmgc *CarsModelsGroupsCreate) SetNillableCreateTime(t *time.Time) *CarsModelsGroupsCreate {
	if t != nil {
		cmgc.SetCreateTime(*t)
	}
	return cmgc
}

// SetUpdateTime sets the "update_time" field.
func (cmgc *CarsModelsGroupsCreate) SetUpdateTime(t time.Time) *CarsModelsGroupsCreate {
	cmgc.mutation.SetUpdateTime(t)
	return cmgc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (cmgc *CarsModelsGroupsCreate) SetNillableUpdateTime(t *time.Time) *CarsModelsGroupsCreate {
	if t != nil {
		cmgc.SetUpdateTime(*t)
	}
	return cmgc
}

// SetID sets the "id" field.
func (cmgc *CarsModelsGroupsCreate) SetID(i int) *CarsModelsGroupsCreate {
	cmgc.mutation.SetID(i)
	return cmgc
}

// SetModel sets the "model" edge to the CarsModels entity.
func (cmgc *CarsModelsGroupsCreate) SetModel(c *CarsModels) *CarsModelsGroupsCreate {
	return cmgc.SetModelID(c.ID)
}

// AddParamIDs adds the "params" edge to the CarsModelsGroupsParams entity by IDs.
func (cmgc *CarsModelsGroupsCreate) AddParamIDs(ids ...int) *CarsModelsGroupsCreate {
	cmgc.mutation.AddParamIDs(ids...)
	return cmgc
}

// AddParams adds the "params" edges to the CarsModelsGroupsParams entity.
func (cmgc *CarsModelsGroupsCreate) AddParams(c ...*CarsModelsGroupsParams) *CarsModelsGroupsCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cmgc.AddParamIDs(ids...)
}

// Mutation returns the CarsModelsGroupsMutation object of the builder.
func (cmgc *CarsModelsGroupsCreate) Mutation() *CarsModelsGroupsMutation {
	return cmgc.mutation
}

// Save creates the CarsModelsGroups in the database.
func (cmgc *CarsModelsGroupsCreate) Save(ctx context.Context) (*CarsModelsGroups, error) {
	cmgc.defaults()
	return withHooks(ctx, cmgc.sqlSave, cmgc.mutation, cmgc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cmgc *CarsModelsGroupsCreate) SaveX(ctx context.Context) *CarsModelsGroups {
	v, err := cmgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cmgc *CarsModelsGroupsCreate) Exec(ctx context.Context) error {
	_, err := cmgc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmgc *CarsModelsGroupsCreate) ExecX(ctx context.Context) {
	if err := cmgc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cmgc *CarsModelsGroupsCreate) defaults() {
	if _, ok := cmgc.mutation.ModelID(); !ok {
		v := carsmodelsgroups.DefaultModelID
		cmgc.mutation.SetModelID(v)
	}
	if _, ok := cmgc.mutation.GroupRemark(); !ok {
		v := carsmodelsgroups.DefaultGroupRemark
		cmgc.mutation.SetGroupRemark(v)
	}
	if _, ok := cmgc.mutation.Status(); !ok {
		v := carsmodelsgroups.DefaultStatus
		cmgc.mutation.SetStatus(v)
	}
	if _, ok := cmgc.mutation.IsDeleted(); !ok {
		v := carsmodelsgroups.DefaultIsDeleted
		cmgc.mutation.SetIsDeleted(v)
	}
	if _, ok := cmgc.mutation.CreateTime(); !ok {
		v := carsmodelsgroups.DefaultCreateTime()
		cmgc.mutation.SetCreateTime(v)
	}
	if _, ok := cmgc.mutation.UpdateTime(); !ok {
		v := carsmodelsgroups.DefaultUpdateTime()
		cmgc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmgc *CarsModelsGroupsCreate) check() error {
	if _, ok := cmgc.mutation.ModelID(); !ok {
		return &ValidationError{Name: "model_id", err: errors.New(`ent: missing required field "CarsModelsGroups.model_id"`)}
	}
	if _, ok := cmgc.mutation.GroupRemark(); !ok {
		return &ValidationError{Name: "group_remark", err: errors.New(`ent: missing required field "CarsModelsGroups.group_remark"`)}
	}
	if _, ok := cmgc.mutation.GroupName(); !ok {
		return &ValidationError{Name: "group_name", err: errors.New(`ent: missing required field "CarsModelsGroups.group_name"`)}
	}
	if _, ok := cmgc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "CarsModelsGroups.status"`)}
	}
	if _, ok := cmgc.mutation.IsDeleted(); !ok {
		return &ValidationError{Name: "is_deleted", err: errors.New(`ent: missing required field "CarsModelsGroups.is_deleted"`)}
	}
	if _, ok := cmgc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "CarsModelsGroups.create_time"`)}
	}
	if _, ok := cmgc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "CarsModelsGroups.update_time"`)}
	}
	if len(cmgc.mutation.ModelIDs()) == 0 {
		return &ValidationError{Name: "model", err: errors.New(`ent: missing required edge "CarsModelsGroups.model"`)}
	}
	return nil
}

func (cmgc *CarsModelsGroupsCreate) sqlSave(ctx context.Context) (*CarsModelsGroups, error) {
	if err := cmgc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cmgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cmgc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	cmgc.mutation.id = &_node.ID
	cmgc.mutation.done = true
	return _node, nil
}

func (cmgc *CarsModelsGroupsCreate) createSpec() (*CarsModelsGroups, *sqlgraph.CreateSpec) {
	var (
		_node = &CarsModelsGroups{config: cmgc.config}
		_spec = sqlgraph.NewCreateSpec(carsmodelsgroups.Table, sqlgraph.NewFieldSpec(carsmodelsgroups.FieldID, field.TypeInt))
	)
	if id, ok := cmgc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cmgc.mutation.GroupRemark(); ok {
		_spec.SetField(carsmodelsgroups.FieldGroupRemark, field.TypeString, value)
		_node.GroupRemark = value
	}
	if value, ok := cmgc.mutation.GroupName(); ok {
		_spec.SetField(carsmodelsgroups.FieldGroupName, field.TypeString, value)
		_node.GroupName = value
	}
	if value, ok := cmgc.mutation.Status(); ok {
		_spec.SetField(carsmodelsgroups.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	if value, ok := cmgc.mutation.IsDeleted(); ok {
		_spec.SetField(carsmodelsgroups.FieldIsDeleted, field.TypeInt, value)
		_node.IsDeleted = value
	}
	if value, ok := cmgc.mutation.CreateTime(); ok {
		_spec.SetField(carsmodelsgroups.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := cmgc.mutation.UpdateTime(); ok {
		_spec.SetField(carsmodelsgroups.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if nodes := cmgc.mutation.ModelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carsmodelsgroups.ModelTable,
			Columns: []string{carsmodelsgroups.ModelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsmodels.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ModelID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cmgc.mutation.ParamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carsmodelsgroups.ParamsTable,
			Columns: []string{carsmodelsgroups.ParamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carsmodelsgroupsparams.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CarsModelsGroupsCreateBulk is the builder for creating many CarsModelsGroups entities in bulk.
type CarsModelsGroupsCreateBulk struct {
	config
	err      error
	builders []*CarsModelsGroupsCreate
}

// Save creates the CarsModelsGroups entities in the database.
func (cmgcb *CarsModelsGroupsCreateBulk) Save(ctx context.Context) ([]*CarsModelsGroups, error) {
	if cmgcb.err != nil {
		return nil, cmgcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cmgcb.builders))
	nodes := make([]*CarsModelsGroups, len(cmgcb.builders))
	mutators := make([]Mutator, len(cmgcb.builders))
	for i := range cmgcb.builders {
		func(i int, root context.Context) {
			builder := cmgcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CarsModelsGroupsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cmgcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cmgcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cmgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cmgcb *CarsModelsGroupsCreateBulk) SaveX(ctx context.Context) []*CarsModelsGroups {
	v, err := cmgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cmgcb *CarsModelsGroupsCreateBulk) Exec(ctx context.Context) error {
	_, err := cmgcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmgcb *CarsModelsGroupsCreateBulk) ExecX(ctx context.Context) {
	if err := cmgcb.Exec(ctx); err != nil {
		panic(err)
	}
}
