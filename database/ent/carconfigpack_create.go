// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/carconfigpack"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarConfigPackCreate is the builder for creating a CarConfigPack entity.
type CarConfigPackCreate struct {
	config
	mutation *CarConfigPackMutation
	hooks    []Hook
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (ccpc *CarConfigPackCreate) SetScenicAreaID(i int) *CarConfigPackCreate {
	ccpc.mutation.SetScenicAreaID(i)
	return ccpc
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (ccpc *CarConfigPackCreate) SetNillableScenicAreaID(i *int) *CarConfigPackCreate {
	if i != nil {
		ccpc.SetScenicAreaID(*i)
	}
	return ccpc
}

// SetModelID sets the "model_id" field.
func (ccpc *CarConfigPackCreate) SetModelID(i int) *CarConfigPackCreate {
	ccpc.mutation.SetModelID(i)
	return ccpc
}

// SetNillableModelID sets the "model_id" field if the given value is not nil.
func (ccpc *CarConfigPackCreate) SetNillableModelID(i *int) *CarConfigPackCreate {
	if i != nil {
		ccpc.SetModelID(*i)
	}
	return ccpc
}

// SetCarID sets the "car_id" field.
func (ccpc *CarConfigPackCreate) SetCarID(i int) *CarConfigPackCreate {
	ccpc.mutation.SetCarID(i)
	return ccpc
}

// SetNillableCarID sets the "car_id" field if the given value is not nil.
func (ccpc *CarConfigPackCreate) SetNillableCarID(i *int) *CarConfigPackCreate {
	if i != nil {
		ccpc.SetCarID(*i)
	}
	return ccpc
}

// SetCarVersion sets the "car_version" field.
func (ccpc *CarConfigPackCreate) SetCarVersion(s string) *CarConfigPackCreate {
	ccpc.mutation.SetCarVersion(s)
	return ccpc
}

// SetNillableCarVersion sets the "car_version" field if the given value is not nil.
func (ccpc *CarConfigPackCreate) SetNillableCarVersion(s *string) *CarConfigPackCreate {
	if s != nil {
		ccpc.SetCarVersion(*s)
	}
	return ccpc
}

// SetName sets the "name" field.
func (ccpc *CarConfigPackCreate) SetName(s string) *CarConfigPackCreate {
	ccpc.mutation.SetName(s)
	return ccpc
}

// SetRemark sets the "remark" field.
func (ccpc *CarConfigPackCreate) SetRemark(s string) *CarConfigPackCreate {
	ccpc.mutation.SetRemark(s)
	return ccpc
}

// SetVersion sets the "version" field.
func (ccpc *CarConfigPackCreate) SetVersion(s string) *CarConfigPackCreate {
	ccpc.mutation.SetVersion(s)
	return ccpc
}

// SetConfigIds sets the "config_ids" field.
func (ccpc *CarConfigPackCreate) SetConfigIds(i []int) *CarConfigPackCreate {
	ccpc.mutation.SetConfigIds(i)
	return ccpc
}

// SetCreateTime sets the "create_time" field.
func (ccpc *CarConfigPackCreate) SetCreateTime(t time.Time) *CarConfigPackCreate {
	ccpc.mutation.SetCreateTime(t)
	return ccpc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ccpc *CarConfigPackCreate) SetNillableCreateTime(t *time.Time) *CarConfigPackCreate {
	if t != nil {
		ccpc.SetCreateTime(*t)
	}
	return ccpc
}

// SetID sets the "id" field.
func (ccpc *CarConfigPackCreate) SetID(i int) *CarConfigPackCreate {
	ccpc.mutation.SetID(i)
	return ccpc
}

// Mutation returns the CarConfigPackMutation object of the builder.
func (ccpc *CarConfigPackCreate) Mutation() *CarConfigPackMutation {
	return ccpc.mutation
}

// Save creates the CarConfigPack in the database.
func (ccpc *CarConfigPackCreate) Save(ctx context.Context) (*CarConfigPack, error) {
	ccpc.defaults()
	return withHooks(ctx, ccpc.sqlSave, ccpc.mutation, ccpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ccpc *CarConfigPackCreate) SaveX(ctx context.Context) *CarConfigPack {
	v, err := ccpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccpc *CarConfigPackCreate) Exec(ctx context.Context) error {
	_, err := ccpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccpc *CarConfigPackCreate) ExecX(ctx context.Context) {
	if err := ccpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ccpc *CarConfigPackCreate) defaults() {
	if _, ok := ccpc.mutation.CarVersion(); !ok {
		v := carconfigpack.DefaultCarVersion
		ccpc.mutation.SetCarVersion(v)
	}
	if _, ok := ccpc.mutation.CreateTime(); !ok {
		v := carconfigpack.DefaultCreateTime()
		ccpc.mutation.SetCreateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccpc *CarConfigPackCreate) check() error {
	if _, ok := ccpc.mutation.CarVersion(); !ok {
		return &ValidationError{Name: "car_version", err: errors.New(`ent: missing required field "CarConfigPack.car_version"`)}
	}
	if _, ok := ccpc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "CarConfigPack.name"`)}
	}
	if _, ok := ccpc.mutation.Remark(); !ok {
		return &ValidationError{Name: "remark", err: errors.New(`ent: missing required field "CarConfigPack.remark"`)}
	}
	if _, ok := ccpc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "CarConfigPack.version"`)}
	}
	if _, ok := ccpc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "CarConfigPack.create_time"`)}
	}
	return nil
}

func (ccpc *CarConfigPackCreate) sqlSave(ctx context.Context) (*CarConfigPack, error) {
	if err := ccpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ccpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ccpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	ccpc.mutation.id = &_node.ID
	ccpc.mutation.done = true
	return _node, nil
}

func (ccpc *CarConfigPackCreate) createSpec() (*CarConfigPack, *sqlgraph.CreateSpec) {
	var (
		_node = &CarConfigPack{config: ccpc.config}
		_spec = sqlgraph.NewCreateSpec(carconfigpack.Table, sqlgraph.NewFieldSpec(carconfigpack.FieldID, field.TypeInt))
	)
	if id, ok := ccpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ccpc.mutation.ScenicAreaID(); ok {
		_spec.SetField(carconfigpack.FieldScenicAreaID, field.TypeInt, value)
		_node.ScenicAreaID = &value
	}
	if value, ok := ccpc.mutation.ModelID(); ok {
		_spec.SetField(carconfigpack.FieldModelID, field.TypeInt, value)
		_node.ModelID = &value
	}
	if value, ok := ccpc.mutation.CarID(); ok {
		_spec.SetField(carconfigpack.FieldCarID, field.TypeInt, value)
		_node.CarID = &value
	}
	if value, ok := ccpc.mutation.CarVersion(); ok {
		_spec.SetField(carconfigpack.FieldCarVersion, field.TypeString, value)
		_node.CarVersion = value
	}
	if value, ok := ccpc.mutation.Name(); ok {
		_spec.SetField(carconfigpack.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ccpc.mutation.Remark(); ok {
		_spec.SetField(carconfigpack.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := ccpc.mutation.Version(); ok {
		_spec.SetField(carconfigpack.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := ccpc.mutation.ConfigIds(); ok {
		_spec.SetField(carconfigpack.FieldConfigIds, field.TypeJSON, value)
		_node.ConfigIds = value
	}
	if value, ok := ccpc.mutation.CreateTime(); ok {
		_spec.SetField(carconfigpack.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	return _node, _spec
}

// CarConfigPackCreateBulk is the builder for creating many CarConfigPack entities in bulk.
type CarConfigPackCreateBulk struct {
	config
	err      error
	builders []*CarConfigPackCreate
}

// Save creates the CarConfigPack entities in the database.
func (ccpcb *CarConfigPackCreateBulk) Save(ctx context.Context) ([]*CarConfigPack, error) {
	if ccpcb.err != nil {
		return nil, ccpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccpcb.builders))
	nodes := make([]*CarConfigPack, len(ccpcb.builders))
	mutators := make([]Mutator, len(ccpcb.builders))
	for i := range ccpcb.builders {
		func(i int, root context.Context) {
			builder := ccpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CarConfigPackMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccpcb *CarConfigPackCreateBulk) SaveX(ctx context.Context) []*CarConfigPack {
	v, err := ccpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccpcb *CarConfigPackCreateBulk) Exec(ctx context.Context) error {
	_, err := ccpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccpcb *CarConfigPackCreateBulk) ExecX(ctx context.Context) {
	if err := ccpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
