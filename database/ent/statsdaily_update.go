// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
	"github.com/jianbo-zh/jydata/database/ent/statsdaily"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StatsDailyUpdate is the builder for updating StatsDaily entities.
type StatsDailyUpdate struct {
	config
	hooks    []Hook
	mutation *StatsDailyMutation
}

// Where appends a list predicates to the StatsDailyUpdate builder.
func (sdu *StatsDailyUpdate) Where(ps ...predicate.StatsDaily) *StatsDailyUpdate {
	sdu.mutation.Where(ps...)
	return sdu
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (sdu *StatsDailyUpdate) SetScenicAreaID(i int) *StatsDailyUpdate {
	sdu.mutation.ResetScenicAreaID()
	sdu.mutation.SetScenicAreaID(i)
	return sdu
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (sdu *StatsDailyUpdate) SetNillableScenicAreaID(i *int) *StatsDailyUpdate {
	if i != nil {
		sdu.SetScenicAreaID(*i)
	}
	return sdu
}

// AddScenicAreaID adds i to the "scenic_area_id" field.
func (sdu *StatsDailyUpdate) AddScenicAreaID(i int) *StatsDailyUpdate {
	sdu.mutation.AddScenicAreaID(i)
	return sdu
}

// SetY sets the "y" field.
func (sdu *StatsDailyUpdate) SetY(s string) *StatsDailyUpdate {
	sdu.mutation.SetY(s)
	return sdu
}

// SetNillableY sets the "y" field if the given value is not nil.
func (sdu *StatsDailyUpdate) SetNillableY(s *string) *StatsDailyUpdate {
	if s != nil {
		sdu.SetY(*s)
	}
	return sdu
}

// SetYm sets the "ym" field.
func (sdu *StatsDailyUpdate) SetYm(s string) *StatsDailyUpdate {
	sdu.mutation.SetYm(s)
	return sdu
}

// SetNillableYm sets the "ym" field if the given value is not nil.
func (sdu *StatsDailyUpdate) SetNillableYm(s *string) *StatsDailyUpdate {
	if s != nil {
		sdu.SetYm(*s)
	}
	return sdu
}

// SetYmd sets the "ymd" field.
func (sdu *StatsDailyUpdate) SetYmd(s string) *StatsDailyUpdate {
	sdu.mutation.SetYmd(s)
	return sdu
}

// SetNillableYmd sets the "ymd" field if the given value is not nil.
func (sdu *StatsDailyUpdate) SetNillableYmd(s *string) *StatsDailyUpdate {
	if s != nil {
		sdu.SetYmd(*s)
	}
	return sdu
}

// SetOrderAmount sets the "order_amount" field.
func (sdu *StatsDailyUpdate) SetOrderAmount(i int) *StatsDailyUpdate {
	sdu.mutation.ResetOrderAmount()
	sdu.mutation.SetOrderAmount(i)
	return sdu
}

// SetNillableOrderAmount sets the "order_amount" field if the given value is not nil.
func (sdu *StatsDailyUpdate) SetNillableOrderAmount(i *int) *StatsDailyUpdate {
	if i != nil {
		sdu.SetOrderAmount(*i)
	}
	return sdu
}

// AddOrderAmount adds i to the "order_amount" field.
func (sdu *StatsDailyUpdate) AddOrderAmount(i int) *StatsDailyUpdate {
	sdu.mutation.AddOrderAmount(i)
	return sdu
}

// SetOrderCount sets the "order_count" field.
func (sdu *StatsDailyUpdate) SetOrderCount(i int) *StatsDailyUpdate {
	sdu.mutation.ResetOrderCount()
	sdu.mutation.SetOrderCount(i)
	return sdu
}

// SetNillableOrderCount sets the "order_count" field if the given value is not nil.
func (sdu *StatsDailyUpdate) SetNillableOrderCount(i *int) *StatsDailyUpdate {
	if i != nil {
		sdu.SetOrderCount(*i)
	}
	return sdu
}

// AddOrderCount adds i to the "order_count" field.
func (sdu *StatsDailyUpdate) AddOrderCount(i int) *StatsDailyUpdate {
	sdu.mutation.AddOrderCount(i)
	return sdu
}

// SetOrderDuration sets the "order_duration" field.
func (sdu *StatsDailyUpdate) SetOrderDuration(i int) *StatsDailyUpdate {
	sdu.mutation.ResetOrderDuration()
	sdu.mutation.SetOrderDuration(i)
	return sdu
}

// SetNillableOrderDuration sets the "order_duration" field if the given value is not nil.
func (sdu *StatsDailyUpdate) SetNillableOrderDuration(i *int) *StatsDailyUpdate {
	if i != nil {
		sdu.SetOrderDuration(*i)
	}
	return sdu
}

// AddOrderDuration adds i to the "order_duration" field.
func (sdu *StatsDailyUpdate) AddOrderDuration(i int) *StatsDailyUpdate {
	sdu.mutation.AddOrderDuration(i)
	return sdu
}

// SetOrderDistance sets the "order_distance" field.
func (sdu *StatsDailyUpdate) SetOrderDistance(i int) *StatsDailyUpdate {
	sdu.mutation.ResetOrderDistance()
	sdu.mutation.SetOrderDistance(i)
	return sdu
}

// SetNillableOrderDistance sets the "order_distance" field if the given value is not nil.
func (sdu *StatsDailyUpdate) SetNillableOrderDistance(i *int) *StatsDailyUpdate {
	if i != nil {
		sdu.SetOrderDistance(*i)
	}
	return sdu
}

// AddOrderDistance adds i to the "order_distance" field.
func (sdu *StatsDailyUpdate) AddOrderDistance(i int) *StatsDailyUpdate {
	sdu.mutation.AddOrderDistance(i)
	return sdu
}

// SetRegisterUserCount sets the "register_user_count" field.
func (sdu *StatsDailyUpdate) SetRegisterUserCount(i int) *StatsDailyUpdate {
	sdu.mutation.ResetRegisterUserCount()
	sdu.mutation.SetRegisterUserCount(i)
	return sdu
}

// SetNillableRegisterUserCount sets the "register_user_count" field if the given value is not nil.
func (sdu *StatsDailyUpdate) SetNillableRegisterUserCount(i *int) *StatsDailyUpdate {
	if i != nil {
		sdu.SetRegisterUserCount(*i)
	}
	return sdu
}

// AddRegisterUserCount adds i to the "register_user_count" field.
func (sdu *StatsDailyUpdate) AddRegisterUserCount(i int) *StatsDailyUpdate {
	sdu.mutation.AddRegisterUserCount(i)
	return sdu
}

// SetOrderUserCount sets the "order_user_count" field.
func (sdu *StatsDailyUpdate) SetOrderUserCount(i int) *StatsDailyUpdate {
	sdu.mutation.ResetOrderUserCount()
	sdu.mutation.SetOrderUserCount(i)
	return sdu
}

// SetNillableOrderUserCount sets the "order_user_count" field if the given value is not nil.
func (sdu *StatsDailyUpdate) SetNillableOrderUserCount(i *int) *StatsDailyUpdate {
	if i != nil {
		sdu.SetOrderUserCount(*i)
	}
	return sdu
}

// AddOrderUserCount adds i to the "order_user_count" field.
func (sdu *StatsDailyUpdate) AddOrderUserCount(i int) *StatsDailyUpdate {
	sdu.mutation.AddOrderUserCount(i)
	return sdu
}

// SetOperationCarCount sets the "operation_car_count" field.
func (sdu *StatsDailyUpdate) SetOperationCarCount(i int) *StatsDailyUpdate {
	sdu.mutation.ResetOperationCarCount()
	sdu.mutation.SetOperationCarCount(i)
	return sdu
}

// SetNillableOperationCarCount sets the "operation_car_count" field if the given value is not nil.
func (sdu *StatsDailyUpdate) SetNillableOperationCarCount(i *int) *StatsDailyUpdate {
	if i != nil {
		sdu.SetOperationCarCount(*i)
	}
	return sdu
}

// AddOperationCarCount adds i to the "operation_car_count" field.
func (sdu *StatsDailyUpdate) AddOperationCarCount(i int) *StatsDailyUpdate {
	sdu.mutation.AddOperationCarCount(i)
	return sdu
}

// SetOperationCarDuration sets the "operation_car_duration" field.
func (sdu *StatsDailyUpdate) SetOperationCarDuration(i int) *StatsDailyUpdate {
	sdu.mutation.ResetOperationCarDuration()
	sdu.mutation.SetOperationCarDuration(i)
	return sdu
}

// SetNillableOperationCarDuration sets the "operation_car_duration" field if the given value is not nil.
func (sdu *StatsDailyUpdate) SetNillableOperationCarDuration(i *int) *StatsDailyUpdate {
	if i != nil {
		sdu.SetOperationCarDuration(*i)
	}
	return sdu
}

// AddOperationCarDuration adds i to the "operation_car_duration" field.
func (sdu *StatsDailyUpdate) AddOperationCarDuration(i int) *StatsDailyUpdate {
	sdu.mutation.AddOperationCarDuration(i)
	return sdu
}

// Mutation returns the StatsDailyMutation object of the builder.
func (sdu *StatsDailyUpdate) Mutation() *StatsDailyMutation {
	return sdu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sdu *StatsDailyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sdu.sqlSave, sdu.mutation, sdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sdu *StatsDailyUpdate) SaveX(ctx context.Context) int {
	affected, err := sdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sdu *StatsDailyUpdate) Exec(ctx context.Context) error {
	_, err := sdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdu *StatsDailyUpdate) ExecX(ctx context.Context) {
	if err := sdu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sdu *StatsDailyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(statsdaily.Table, statsdaily.Columns, sqlgraph.NewFieldSpec(statsdaily.FieldID, field.TypeInt))
	if ps := sdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sdu.mutation.ScenicAreaID(); ok {
		_spec.SetField(statsdaily.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := sdu.mutation.AddedScenicAreaID(); ok {
		_spec.AddField(statsdaily.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := sdu.mutation.Y(); ok {
		_spec.SetField(statsdaily.FieldY, field.TypeString, value)
	}
	if value, ok := sdu.mutation.Ym(); ok {
		_spec.SetField(statsdaily.FieldYm, field.TypeString, value)
	}
	if value, ok := sdu.mutation.Ymd(); ok {
		_spec.SetField(statsdaily.FieldYmd, field.TypeString, value)
	}
	if value, ok := sdu.mutation.OrderAmount(); ok {
		_spec.SetField(statsdaily.FieldOrderAmount, field.TypeInt, value)
	}
	if value, ok := sdu.mutation.AddedOrderAmount(); ok {
		_spec.AddField(statsdaily.FieldOrderAmount, field.TypeInt, value)
	}
	if value, ok := sdu.mutation.OrderCount(); ok {
		_spec.SetField(statsdaily.FieldOrderCount, field.TypeInt, value)
	}
	if value, ok := sdu.mutation.AddedOrderCount(); ok {
		_spec.AddField(statsdaily.FieldOrderCount, field.TypeInt, value)
	}
	if value, ok := sdu.mutation.OrderDuration(); ok {
		_spec.SetField(statsdaily.FieldOrderDuration, field.TypeInt, value)
	}
	if value, ok := sdu.mutation.AddedOrderDuration(); ok {
		_spec.AddField(statsdaily.FieldOrderDuration, field.TypeInt, value)
	}
	if value, ok := sdu.mutation.OrderDistance(); ok {
		_spec.SetField(statsdaily.FieldOrderDistance, field.TypeInt, value)
	}
	if value, ok := sdu.mutation.AddedOrderDistance(); ok {
		_spec.AddField(statsdaily.FieldOrderDistance, field.TypeInt, value)
	}
	if value, ok := sdu.mutation.RegisterUserCount(); ok {
		_spec.SetField(statsdaily.FieldRegisterUserCount, field.TypeInt, value)
	}
	if value, ok := sdu.mutation.AddedRegisterUserCount(); ok {
		_spec.AddField(statsdaily.FieldRegisterUserCount, field.TypeInt, value)
	}
	if value, ok := sdu.mutation.OrderUserCount(); ok {
		_spec.SetField(statsdaily.FieldOrderUserCount, field.TypeInt, value)
	}
	if value, ok := sdu.mutation.AddedOrderUserCount(); ok {
		_spec.AddField(statsdaily.FieldOrderUserCount, field.TypeInt, value)
	}
	if value, ok := sdu.mutation.OperationCarCount(); ok {
		_spec.SetField(statsdaily.FieldOperationCarCount, field.TypeInt, value)
	}
	if value, ok := sdu.mutation.AddedOperationCarCount(); ok {
		_spec.AddField(statsdaily.FieldOperationCarCount, field.TypeInt, value)
	}
	if value, ok := sdu.mutation.OperationCarDuration(); ok {
		_spec.SetField(statsdaily.FieldOperationCarDuration, field.TypeInt, value)
	}
	if value, ok := sdu.mutation.AddedOperationCarDuration(); ok {
		_spec.AddField(statsdaily.FieldOperationCarDuration, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{statsdaily.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sdu.mutation.done = true
	return n, nil
}

// StatsDailyUpdateOne is the builder for updating a single StatsDaily entity.
type StatsDailyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StatsDailyMutation
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (sduo *StatsDailyUpdateOne) SetScenicAreaID(i int) *StatsDailyUpdateOne {
	sduo.mutation.ResetScenicAreaID()
	sduo.mutation.SetScenicAreaID(i)
	return sduo
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (sduo *StatsDailyUpdateOne) SetNillableScenicAreaID(i *int) *StatsDailyUpdateOne {
	if i != nil {
		sduo.SetScenicAreaID(*i)
	}
	return sduo
}

// AddScenicAreaID adds i to the "scenic_area_id" field.
func (sduo *StatsDailyUpdateOne) AddScenicAreaID(i int) *StatsDailyUpdateOne {
	sduo.mutation.AddScenicAreaID(i)
	return sduo
}

// SetY sets the "y" field.
func (sduo *StatsDailyUpdateOne) SetY(s string) *StatsDailyUpdateOne {
	sduo.mutation.SetY(s)
	return sduo
}

// SetNillableY sets the "y" field if the given value is not nil.
func (sduo *StatsDailyUpdateOne) SetNillableY(s *string) *StatsDailyUpdateOne {
	if s != nil {
		sduo.SetY(*s)
	}
	return sduo
}

// SetYm sets the "ym" field.
func (sduo *StatsDailyUpdateOne) SetYm(s string) *StatsDailyUpdateOne {
	sduo.mutation.SetYm(s)
	return sduo
}

// SetNillableYm sets the "ym" field if the given value is not nil.
func (sduo *StatsDailyUpdateOne) SetNillableYm(s *string) *StatsDailyUpdateOne {
	if s != nil {
		sduo.SetYm(*s)
	}
	return sduo
}

// SetYmd sets the "ymd" field.
func (sduo *StatsDailyUpdateOne) SetYmd(s string) *StatsDailyUpdateOne {
	sduo.mutation.SetYmd(s)
	return sduo
}

// SetNillableYmd sets the "ymd" field if the given value is not nil.
func (sduo *StatsDailyUpdateOne) SetNillableYmd(s *string) *StatsDailyUpdateOne {
	if s != nil {
		sduo.SetYmd(*s)
	}
	return sduo
}

// SetOrderAmount sets the "order_amount" field.
func (sduo *StatsDailyUpdateOne) SetOrderAmount(i int) *StatsDailyUpdateOne {
	sduo.mutation.ResetOrderAmount()
	sduo.mutation.SetOrderAmount(i)
	return sduo
}

// SetNillableOrderAmount sets the "order_amount" field if the given value is not nil.
func (sduo *StatsDailyUpdateOne) SetNillableOrderAmount(i *int) *StatsDailyUpdateOne {
	if i != nil {
		sduo.SetOrderAmount(*i)
	}
	return sduo
}

// AddOrderAmount adds i to the "order_amount" field.
func (sduo *StatsDailyUpdateOne) AddOrderAmount(i int) *StatsDailyUpdateOne {
	sduo.mutation.AddOrderAmount(i)
	return sduo
}

// SetOrderCount sets the "order_count" field.
func (sduo *StatsDailyUpdateOne) SetOrderCount(i int) *StatsDailyUpdateOne {
	sduo.mutation.ResetOrderCount()
	sduo.mutation.SetOrderCount(i)
	return sduo
}

// SetNillableOrderCount sets the "order_count" field if the given value is not nil.
func (sduo *StatsDailyUpdateOne) SetNillableOrderCount(i *int) *StatsDailyUpdateOne {
	if i != nil {
		sduo.SetOrderCount(*i)
	}
	return sduo
}

// AddOrderCount adds i to the "order_count" field.
func (sduo *StatsDailyUpdateOne) AddOrderCount(i int) *StatsDailyUpdateOne {
	sduo.mutation.AddOrderCount(i)
	return sduo
}

// SetOrderDuration sets the "order_duration" field.
func (sduo *StatsDailyUpdateOne) SetOrderDuration(i int) *StatsDailyUpdateOne {
	sduo.mutation.ResetOrderDuration()
	sduo.mutation.SetOrderDuration(i)
	return sduo
}

// SetNillableOrderDuration sets the "order_duration" field if the given value is not nil.
func (sduo *StatsDailyUpdateOne) SetNillableOrderDuration(i *int) *StatsDailyUpdateOne {
	if i != nil {
		sduo.SetOrderDuration(*i)
	}
	return sduo
}

// AddOrderDuration adds i to the "order_duration" field.
func (sduo *StatsDailyUpdateOne) AddOrderDuration(i int) *StatsDailyUpdateOne {
	sduo.mutation.AddOrderDuration(i)
	return sduo
}

// SetOrderDistance sets the "order_distance" field.
func (sduo *StatsDailyUpdateOne) SetOrderDistance(i int) *StatsDailyUpdateOne {
	sduo.mutation.ResetOrderDistance()
	sduo.mutation.SetOrderDistance(i)
	return sduo
}

// SetNillableOrderDistance sets the "order_distance" field if the given value is not nil.
func (sduo *StatsDailyUpdateOne) SetNillableOrderDistance(i *int) *StatsDailyUpdateOne {
	if i != nil {
		sduo.SetOrderDistance(*i)
	}
	return sduo
}

// AddOrderDistance adds i to the "order_distance" field.
func (sduo *StatsDailyUpdateOne) AddOrderDistance(i int) *StatsDailyUpdateOne {
	sduo.mutation.AddOrderDistance(i)
	return sduo
}

// SetRegisterUserCount sets the "register_user_count" field.
func (sduo *StatsDailyUpdateOne) SetRegisterUserCount(i int) *StatsDailyUpdateOne {
	sduo.mutation.ResetRegisterUserCount()
	sduo.mutation.SetRegisterUserCount(i)
	return sduo
}

// SetNillableRegisterUserCount sets the "register_user_count" field if the given value is not nil.
func (sduo *StatsDailyUpdateOne) SetNillableRegisterUserCount(i *int) *StatsDailyUpdateOne {
	if i != nil {
		sduo.SetRegisterUserCount(*i)
	}
	return sduo
}

// AddRegisterUserCount adds i to the "register_user_count" field.
func (sduo *StatsDailyUpdateOne) AddRegisterUserCount(i int) *StatsDailyUpdateOne {
	sduo.mutation.AddRegisterUserCount(i)
	return sduo
}

// SetOrderUserCount sets the "order_user_count" field.
func (sduo *StatsDailyUpdateOne) SetOrderUserCount(i int) *StatsDailyUpdateOne {
	sduo.mutation.ResetOrderUserCount()
	sduo.mutation.SetOrderUserCount(i)
	return sduo
}

// SetNillableOrderUserCount sets the "order_user_count" field if the given value is not nil.
func (sduo *StatsDailyUpdateOne) SetNillableOrderUserCount(i *int) *StatsDailyUpdateOne {
	if i != nil {
		sduo.SetOrderUserCount(*i)
	}
	return sduo
}

// AddOrderUserCount adds i to the "order_user_count" field.
func (sduo *StatsDailyUpdateOne) AddOrderUserCount(i int) *StatsDailyUpdateOne {
	sduo.mutation.AddOrderUserCount(i)
	return sduo
}

// SetOperationCarCount sets the "operation_car_count" field.
func (sduo *StatsDailyUpdateOne) SetOperationCarCount(i int) *StatsDailyUpdateOne {
	sduo.mutation.ResetOperationCarCount()
	sduo.mutation.SetOperationCarCount(i)
	return sduo
}

// SetNillableOperationCarCount sets the "operation_car_count" field if the given value is not nil.
func (sduo *StatsDailyUpdateOne) SetNillableOperationCarCount(i *int) *StatsDailyUpdateOne {
	if i != nil {
		sduo.SetOperationCarCount(*i)
	}
	return sduo
}

// AddOperationCarCount adds i to the "operation_car_count" field.
func (sduo *StatsDailyUpdateOne) AddOperationCarCount(i int) *StatsDailyUpdateOne {
	sduo.mutation.AddOperationCarCount(i)
	return sduo
}

// SetOperationCarDuration sets the "operation_car_duration" field.
func (sduo *StatsDailyUpdateOne) SetOperationCarDuration(i int) *StatsDailyUpdateOne {
	sduo.mutation.ResetOperationCarDuration()
	sduo.mutation.SetOperationCarDuration(i)
	return sduo
}

// SetNillableOperationCarDuration sets the "operation_car_duration" field if the given value is not nil.
func (sduo *StatsDailyUpdateOne) SetNillableOperationCarDuration(i *int) *StatsDailyUpdateOne {
	if i != nil {
		sduo.SetOperationCarDuration(*i)
	}
	return sduo
}

// AddOperationCarDuration adds i to the "operation_car_duration" field.
func (sduo *StatsDailyUpdateOne) AddOperationCarDuration(i int) *StatsDailyUpdateOne {
	sduo.mutation.AddOperationCarDuration(i)
	return sduo
}

// Mutation returns the StatsDailyMutation object of the builder.
func (sduo *StatsDailyUpdateOne) Mutation() *StatsDailyMutation {
	return sduo.mutation
}

// Where appends a list predicates to the StatsDailyUpdate builder.
func (sduo *StatsDailyUpdateOne) Where(ps ...predicate.StatsDaily) *StatsDailyUpdateOne {
	sduo.mutation.Where(ps...)
	return sduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sduo *StatsDailyUpdateOne) Select(field string, fields ...string) *StatsDailyUpdateOne {
	sduo.fields = append([]string{field}, fields...)
	return sduo
}

// Save executes the query and returns the updated StatsDaily entity.
func (sduo *StatsDailyUpdateOne) Save(ctx context.Context) (*StatsDaily, error) {
	return withHooks(ctx, sduo.sqlSave, sduo.mutation, sduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sduo *StatsDailyUpdateOne) SaveX(ctx context.Context) *StatsDaily {
	node, err := sduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sduo *StatsDailyUpdateOne) Exec(ctx context.Context) error {
	_, err := sduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sduo *StatsDailyUpdateOne) ExecX(ctx context.Context) {
	if err := sduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sduo *StatsDailyUpdateOne) sqlSave(ctx context.Context) (_node *StatsDaily, err error) {
	_spec := sqlgraph.NewUpdateSpec(statsdaily.Table, statsdaily.Columns, sqlgraph.NewFieldSpec(statsdaily.FieldID, field.TypeInt))
	id, ok := sduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "StatsDaily.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, statsdaily.FieldID)
		for _, f := range fields {
			if !statsdaily.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != statsdaily.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sduo.mutation.ScenicAreaID(); ok {
		_spec.SetField(statsdaily.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := sduo.mutation.AddedScenicAreaID(); ok {
		_spec.AddField(statsdaily.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := sduo.mutation.Y(); ok {
		_spec.SetField(statsdaily.FieldY, field.TypeString, value)
	}
	if value, ok := sduo.mutation.Ym(); ok {
		_spec.SetField(statsdaily.FieldYm, field.TypeString, value)
	}
	if value, ok := sduo.mutation.Ymd(); ok {
		_spec.SetField(statsdaily.FieldYmd, field.TypeString, value)
	}
	if value, ok := sduo.mutation.OrderAmount(); ok {
		_spec.SetField(statsdaily.FieldOrderAmount, field.TypeInt, value)
	}
	if value, ok := sduo.mutation.AddedOrderAmount(); ok {
		_spec.AddField(statsdaily.FieldOrderAmount, field.TypeInt, value)
	}
	if value, ok := sduo.mutation.OrderCount(); ok {
		_spec.SetField(statsdaily.FieldOrderCount, field.TypeInt, value)
	}
	if value, ok := sduo.mutation.AddedOrderCount(); ok {
		_spec.AddField(statsdaily.FieldOrderCount, field.TypeInt, value)
	}
	if value, ok := sduo.mutation.OrderDuration(); ok {
		_spec.SetField(statsdaily.FieldOrderDuration, field.TypeInt, value)
	}
	if value, ok := sduo.mutation.AddedOrderDuration(); ok {
		_spec.AddField(statsdaily.FieldOrderDuration, field.TypeInt, value)
	}
	if value, ok := sduo.mutation.OrderDistance(); ok {
		_spec.SetField(statsdaily.FieldOrderDistance, field.TypeInt, value)
	}
	if value, ok := sduo.mutation.AddedOrderDistance(); ok {
		_spec.AddField(statsdaily.FieldOrderDistance, field.TypeInt, value)
	}
	if value, ok := sduo.mutation.RegisterUserCount(); ok {
		_spec.SetField(statsdaily.FieldRegisterUserCount, field.TypeInt, value)
	}
	if value, ok := sduo.mutation.AddedRegisterUserCount(); ok {
		_spec.AddField(statsdaily.FieldRegisterUserCount, field.TypeInt, value)
	}
	if value, ok := sduo.mutation.OrderUserCount(); ok {
		_spec.SetField(statsdaily.FieldOrderUserCount, field.TypeInt, value)
	}
	if value, ok := sduo.mutation.AddedOrderUserCount(); ok {
		_spec.AddField(statsdaily.FieldOrderUserCount, field.TypeInt, value)
	}
	if value, ok := sduo.mutation.OperationCarCount(); ok {
		_spec.SetField(statsdaily.FieldOperationCarCount, field.TypeInt, value)
	}
	if value, ok := sduo.mutation.AddedOperationCarCount(); ok {
		_spec.AddField(statsdaily.FieldOperationCarCount, field.TypeInt, value)
	}
	if value, ok := sduo.mutation.OperationCarDuration(); ok {
		_spec.SetField(statsdaily.FieldOperationCarDuration, field.TypeInt, value)
	}
	if value, ok := sduo.mutation.AddedOperationCarDuration(); ok {
		_spec.AddField(statsdaily.FieldOperationCarDuration, field.TypeInt, value)
	}
	_node = &StatsDaily{config: sduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{statsdaily.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sduo.mutation.done = true
	return _node, nil
}
