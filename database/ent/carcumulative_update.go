// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/carcumulative"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
)

// CarCumulativeUpdate is the builder for updating CarCumulative entities.
type CarCumulativeUpdate struct {
	config
	hooks    []Hook
	mutation *CarCumulativeMutation
}

// Where appends a list predicates to the CarCumulativeUpdate builder.
func (ccu *CarCumulativeUpdate) Where(ps ...predicate.CarCumulative) *CarCumulativeUpdate {
	ccu.mutation.Where(ps...)
	return ccu
}

// SetCarID sets the "car_id" field.
func (ccu *CarCumulativeUpdate) SetCarID(i int) *CarCumulativeUpdate {
	ccu.mutation.ResetCarID()
	ccu.mutation.SetCarID(i)
	return ccu
}

// SetNillableCarID sets the "car_id" field if the given value is not nil.
func (ccu *CarCumulativeUpdate) SetNillableCarID(i *int) *CarCumulativeUpdate {
	if i != nil {
		ccu.SetCarID(*i)
	}
	return ccu
}

// AddCarID adds i to the "car_id" field.
func (ccu *CarCumulativeUpdate) AddCarID(i int) *CarCumulativeUpdate {
	ccu.mutation.AddCarID(i)
	return ccu
}

// SetDeviceID sets the "device_id" field.
func (ccu *CarCumulativeUpdate) SetDeviceID(s string) *CarCumulativeUpdate {
	ccu.mutation.SetDeviceID(s)
	return ccu
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (ccu *CarCumulativeUpdate) SetNillableDeviceID(s *string) *CarCumulativeUpdate {
	if s != nil {
		ccu.SetDeviceID(*s)
	}
	return ccu
}

// SetOperationLockDuration sets the "operation_lock_duration" field.
func (ccu *CarCumulativeUpdate) SetOperationLockDuration(f float32) *CarCumulativeUpdate {
	ccu.mutation.ResetOperationLockDuration()
	ccu.mutation.SetOperationLockDuration(f)
	return ccu
}

// SetNillableOperationLockDuration sets the "operation_lock_duration" field if the given value is not nil.
func (ccu *CarCumulativeUpdate) SetNillableOperationLockDuration(f *float32) *CarCumulativeUpdate {
	if f != nil {
		ccu.SetOperationLockDuration(*f)
	}
	return ccu
}

// AddOperationLockDuration adds f to the "operation_lock_duration" field.
func (ccu *CarCumulativeUpdate) AddOperationLockDuration(f float32) *CarCumulativeUpdate {
	ccu.mutation.AddOperationLockDuration(f)
	return ccu
}

// SetOperationManualDuration sets the "operation_manual_duration" field.
func (ccu *CarCumulativeUpdate) SetOperationManualDuration(f float32) *CarCumulativeUpdate {
	ccu.mutation.ResetOperationManualDuration()
	ccu.mutation.SetOperationManualDuration(f)
	return ccu
}

// SetNillableOperationManualDuration sets the "operation_manual_duration" field if the given value is not nil.
func (ccu *CarCumulativeUpdate) SetNillableOperationManualDuration(f *float32) *CarCumulativeUpdate {
	if f != nil {
		ccu.SetOperationManualDuration(*f)
	}
	return ccu
}

// AddOperationManualDuration adds f to the "operation_manual_duration" field.
func (ccu *CarCumulativeUpdate) AddOperationManualDuration(f float32) *CarCumulativeUpdate {
	ccu.mutation.AddOperationManualDuration(f)
	return ccu
}

// SetOperationAutoDuration sets the "operation_auto_duration" field.
func (ccu *CarCumulativeUpdate) SetOperationAutoDuration(f float32) *CarCumulativeUpdate {
	ccu.mutation.ResetOperationAutoDuration()
	ccu.mutation.SetOperationAutoDuration(f)
	return ccu
}

// SetNillableOperationAutoDuration sets the "operation_auto_duration" field if the given value is not nil.
func (ccu *CarCumulativeUpdate) SetNillableOperationAutoDuration(f *float32) *CarCumulativeUpdate {
	if f != nil {
		ccu.SetOperationAutoDuration(*f)
	}
	return ccu
}

// AddOperationAutoDuration adds f to the "operation_auto_duration" field.
func (ccu *CarCumulativeUpdate) AddOperationAutoDuration(f float32) *CarCumulativeUpdate {
	ccu.mutation.AddOperationAutoDuration(f)
	return ccu
}

// SetOperationFaultDuration sets the "operation_fault_duration" field.
func (ccu *CarCumulativeUpdate) SetOperationFaultDuration(f float32) *CarCumulativeUpdate {
	ccu.mutation.ResetOperationFaultDuration()
	ccu.mutation.SetOperationFaultDuration(f)
	return ccu
}

// SetNillableOperationFaultDuration sets the "operation_fault_duration" field if the given value is not nil.
func (ccu *CarCumulativeUpdate) SetNillableOperationFaultDuration(f *float32) *CarCumulativeUpdate {
	if f != nil {
		ccu.SetOperationFaultDuration(*f)
	}
	return ccu
}

// AddOperationFaultDuration adds f to the "operation_fault_duration" field.
func (ccu *CarCumulativeUpdate) AddOperationFaultDuration(f float32) *CarCumulativeUpdate {
	ccu.mutation.AddOperationFaultDuration(f)
	return ccu
}

// SetOperationLockTimes sets the "operation_lock_times" field.
func (ccu *CarCumulativeUpdate) SetOperationLockTimes(u uint32) *CarCumulativeUpdate {
	ccu.mutation.ResetOperationLockTimes()
	ccu.mutation.SetOperationLockTimes(u)
	return ccu
}

// SetNillableOperationLockTimes sets the "operation_lock_times" field if the given value is not nil.
func (ccu *CarCumulativeUpdate) SetNillableOperationLockTimes(u *uint32) *CarCumulativeUpdate {
	if u != nil {
		ccu.SetOperationLockTimes(*u)
	}
	return ccu
}

// AddOperationLockTimes adds u to the "operation_lock_times" field.
func (ccu *CarCumulativeUpdate) AddOperationLockTimes(u int32) *CarCumulativeUpdate {
	ccu.mutation.AddOperationLockTimes(u)
	return ccu
}

// SetOperationManualTimes sets the "operation_manual_times" field.
func (ccu *CarCumulativeUpdate) SetOperationManualTimes(u uint32) *CarCumulativeUpdate {
	ccu.mutation.ResetOperationManualTimes()
	ccu.mutation.SetOperationManualTimes(u)
	return ccu
}

// SetNillableOperationManualTimes sets the "operation_manual_times" field if the given value is not nil.
func (ccu *CarCumulativeUpdate) SetNillableOperationManualTimes(u *uint32) *CarCumulativeUpdate {
	if u != nil {
		ccu.SetOperationManualTimes(*u)
	}
	return ccu
}

// AddOperationManualTimes adds u to the "operation_manual_times" field.
func (ccu *CarCumulativeUpdate) AddOperationManualTimes(u int32) *CarCumulativeUpdate {
	ccu.mutation.AddOperationManualTimes(u)
	return ccu
}

// SetOperationAutoTimes sets the "operation_auto_times" field.
func (ccu *CarCumulativeUpdate) SetOperationAutoTimes(u uint32) *CarCumulativeUpdate {
	ccu.mutation.ResetOperationAutoTimes()
	ccu.mutation.SetOperationAutoTimes(u)
	return ccu
}

// SetNillableOperationAutoTimes sets the "operation_auto_times" field if the given value is not nil.
func (ccu *CarCumulativeUpdate) SetNillableOperationAutoTimes(u *uint32) *CarCumulativeUpdate {
	if u != nil {
		ccu.SetOperationAutoTimes(*u)
	}
	return ccu
}

// AddOperationAutoTimes adds u to the "operation_auto_times" field.
func (ccu *CarCumulativeUpdate) AddOperationAutoTimes(u int32) *CarCumulativeUpdate {
	ccu.mutation.AddOperationAutoTimes(u)
	return ccu
}

// SetOperationFaultTimes sets the "operation_fault_times" field.
func (ccu *CarCumulativeUpdate) SetOperationFaultTimes(u uint32) *CarCumulativeUpdate {
	ccu.mutation.ResetOperationFaultTimes()
	ccu.mutation.SetOperationFaultTimes(u)
	return ccu
}

// SetNillableOperationFaultTimes sets the "operation_fault_times" field if the given value is not nil.
func (ccu *CarCumulativeUpdate) SetNillableOperationFaultTimes(u *uint32) *CarCumulativeUpdate {
	if u != nil {
		ccu.SetOperationFaultTimes(*u)
	}
	return ccu
}

// AddOperationFaultTimes adds u to the "operation_fault_times" field.
func (ccu *CarCumulativeUpdate) AddOperationFaultTimes(u int32) *CarCumulativeUpdate {
	ccu.mutation.AddOperationFaultTimes(u)
	return ccu
}

// SetOperationManualMileage sets the "operation_manual_mileage" field.
func (ccu *CarCumulativeUpdate) SetOperationManualMileage(f float32) *CarCumulativeUpdate {
	ccu.mutation.ResetOperationManualMileage()
	ccu.mutation.SetOperationManualMileage(f)
	return ccu
}

// SetNillableOperationManualMileage sets the "operation_manual_mileage" field if the given value is not nil.
func (ccu *CarCumulativeUpdate) SetNillableOperationManualMileage(f *float32) *CarCumulativeUpdate {
	if f != nil {
		ccu.SetOperationManualMileage(*f)
	}
	return ccu
}

// AddOperationManualMileage adds f to the "operation_manual_mileage" field.
func (ccu *CarCumulativeUpdate) AddOperationManualMileage(f float32) *CarCumulativeUpdate {
	ccu.mutation.AddOperationManualMileage(f)
	return ccu
}

// SetOperationAutoMileage sets the "operation_auto_mileage" field.
func (ccu *CarCumulativeUpdate) SetOperationAutoMileage(f float32) *CarCumulativeUpdate {
	ccu.mutation.ResetOperationAutoMileage()
	ccu.mutation.SetOperationAutoMileage(f)
	return ccu
}

// SetNillableOperationAutoMileage sets the "operation_auto_mileage" field if the given value is not nil.
func (ccu *CarCumulativeUpdate) SetNillableOperationAutoMileage(f *float32) *CarCumulativeUpdate {
	if f != nil {
		ccu.SetOperationAutoMileage(*f)
	}
	return ccu
}

// AddOperationAutoMileage adds f to the "operation_auto_mileage" field.
func (ccu *CarCumulativeUpdate) AddOperationAutoMileage(f float32) *CarCumulativeUpdate {
	ccu.mutation.AddOperationAutoMileage(f)
	return ccu
}

// SetMaintainLockDuration sets the "maintain_lock_duration" field.
func (ccu *CarCumulativeUpdate) SetMaintainLockDuration(f float32) *CarCumulativeUpdate {
	ccu.mutation.ResetMaintainLockDuration()
	ccu.mutation.SetMaintainLockDuration(f)
	return ccu
}

// SetNillableMaintainLockDuration sets the "maintain_lock_duration" field if the given value is not nil.
func (ccu *CarCumulativeUpdate) SetNillableMaintainLockDuration(f *float32) *CarCumulativeUpdate {
	if f != nil {
		ccu.SetMaintainLockDuration(*f)
	}
	return ccu
}

// AddMaintainLockDuration adds f to the "maintain_lock_duration" field.
func (ccu *CarCumulativeUpdate) AddMaintainLockDuration(f float32) *CarCumulativeUpdate {
	ccu.mutation.AddMaintainLockDuration(f)
	return ccu
}

// SetMaintainManualDuration sets the "maintain_manual_duration" field.
func (ccu *CarCumulativeUpdate) SetMaintainManualDuration(f float32) *CarCumulativeUpdate {
	ccu.mutation.ResetMaintainManualDuration()
	ccu.mutation.SetMaintainManualDuration(f)
	return ccu
}

// SetNillableMaintainManualDuration sets the "maintain_manual_duration" field if the given value is not nil.
func (ccu *CarCumulativeUpdate) SetNillableMaintainManualDuration(f *float32) *CarCumulativeUpdate {
	if f != nil {
		ccu.SetMaintainManualDuration(*f)
	}
	return ccu
}

// AddMaintainManualDuration adds f to the "maintain_manual_duration" field.
func (ccu *CarCumulativeUpdate) AddMaintainManualDuration(f float32) *CarCumulativeUpdate {
	ccu.mutation.AddMaintainManualDuration(f)
	return ccu
}

// SetMaintainAutoDuration sets the "maintain_auto_duration" field.
func (ccu *CarCumulativeUpdate) SetMaintainAutoDuration(f float32) *CarCumulativeUpdate {
	ccu.mutation.ResetMaintainAutoDuration()
	ccu.mutation.SetMaintainAutoDuration(f)
	return ccu
}

// SetNillableMaintainAutoDuration sets the "maintain_auto_duration" field if the given value is not nil.
func (ccu *CarCumulativeUpdate) SetNillableMaintainAutoDuration(f *float32) *CarCumulativeUpdate {
	if f != nil {
		ccu.SetMaintainAutoDuration(*f)
	}
	return ccu
}

// AddMaintainAutoDuration adds f to the "maintain_auto_duration" field.
func (ccu *CarCumulativeUpdate) AddMaintainAutoDuration(f float32) *CarCumulativeUpdate {
	ccu.mutation.AddMaintainAutoDuration(f)
	return ccu
}

// SetMaintainRemoteDuration sets the "maintain_remote_duration" field.
func (ccu *CarCumulativeUpdate) SetMaintainRemoteDuration(f float32) *CarCumulativeUpdate {
	ccu.mutation.ResetMaintainRemoteDuration()
	ccu.mutation.SetMaintainRemoteDuration(f)
	return ccu
}

// SetNillableMaintainRemoteDuration sets the "maintain_remote_duration" field if the given value is not nil.
func (ccu *CarCumulativeUpdate) SetNillableMaintainRemoteDuration(f *float32) *CarCumulativeUpdate {
	if f != nil {
		ccu.SetMaintainRemoteDuration(*f)
	}
	return ccu
}

// AddMaintainRemoteDuration adds f to the "maintain_remote_duration" field.
func (ccu *CarCumulativeUpdate) AddMaintainRemoteDuration(f float32) *CarCumulativeUpdate {
	ccu.mutation.AddMaintainRemoteDuration(f)
	return ccu
}

// SetMaintainFaultDuration sets the "maintain_fault_duration" field.
func (ccu *CarCumulativeUpdate) SetMaintainFaultDuration(f float32) *CarCumulativeUpdate {
	ccu.mutation.ResetMaintainFaultDuration()
	ccu.mutation.SetMaintainFaultDuration(f)
	return ccu
}

// SetNillableMaintainFaultDuration sets the "maintain_fault_duration" field if the given value is not nil.
func (ccu *CarCumulativeUpdate) SetNillableMaintainFaultDuration(f *float32) *CarCumulativeUpdate {
	if f != nil {
		ccu.SetMaintainFaultDuration(*f)
	}
	return ccu
}

// AddMaintainFaultDuration adds f to the "maintain_fault_duration" field.
func (ccu *CarCumulativeUpdate) AddMaintainFaultDuration(f float32) *CarCumulativeUpdate {
	ccu.mutation.AddMaintainFaultDuration(f)
	return ccu
}

// SetMaintainLockTimes sets the "maintain_lock_times" field.
func (ccu *CarCumulativeUpdate) SetMaintainLockTimes(u uint32) *CarCumulativeUpdate {
	ccu.mutation.ResetMaintainLockTimes()
	ccu.mutation.SetMaintainLockTimes(u)
	return ccu
}

// SetNillableMaintainLockTimes sets the "maintain_lock_times" field if the given value is not nil.
func (ccu *CarCumulativeUpdate) SetNillableMaintainLockTimes(u *uint32) *CarCumulativeUpdate {
	if u != nil {
		ccu.SetMaintainLockTimes(*u)
	}
	return ccu
}

// AddMaintainLockTimes adds u to the "maintain_lock_times" field.
func (ccu *CarCumulativeUpdate) AddMaintainLockTimes(u int32) *CarCumulativeUpdate {
	ccu.mutation.AddMaintainLockTimes(u)
	return ccu
}

// SetMaintainManualTimes sets the "maintain_manual_times" field.
func (ccu *CarCumulativeUpdate) SetMaintainManualTimes(u uint32) *CarCumulativeUpdate {
	ccu.mutation.ResetMaintainManualTimes()
	ccu.mutation.SetMaintainManualTimes(u)
	return ccu
}

// SetNillableMaintainManualTimes sets the "maintain_manual_times" field if the given value is not nil.
func (ccu *CarCumulativeUpdate) SetNillableMaintainManualTimes(u *uint32) *CarCumulativeUpdate {
	if u != nil {
		ccu.SetMaintainManualTimes(*u)
	}
	return ccu
}

// AddMaintainManualTimes adds u to the "maintain_manual_times" field.
func (ccu *CarCumulativeUpdate) AddMaintainManualTimes(u int32) *CarCumulativeUpdate {
	ccu.mutation.AddMaintainManualTimes(u)
	return ccu
}

// SetMaintainAutoTimes sets the "maintain_auto_times" field.
func (ccu *CarCumulativeUpdate) SetMaintainAutoTimes(u uint32) *CarCumulativeUpdate {
	ccu.mutation.ResetMaintainAutoTimes()
	ccu.mutation.SetMaintainAutoTimes(u)
	return ccu
}

// SetNillableMaintainAutoTimes sets the "maintain_auto_times" field if the given value is not nil.
func (ccu *CarCumulativeUpdate) SetNillableMaintainAutoTimes(u *uint32) *CarCumulativeUpdate {
	if u != nil {
		ccu.SetMaintainAutoTimes(*u)
	}
	return ccu
}

// AddMaintainAutoTimes adds u to the "maintain_auto_times" field.
func (ccu *CarCumulativeUpdate) AddMaintainAutoTimes(u int32) *CarCumulativeUpdate {
	ccu.mutation.AddMaintainAutoTimes(u)
	return ccu
}

// SetMaintainRemoteTimes sets the "maintain_remote_times" field.
func (ccu *CarCumulativeUpdate) SetMaintainRemoteTimes(u uint32) *CarCumulativeUpdate {
	ccu.mutation.ResetMaintainRemoteTimes()
	ccu.mutation.SetMaintainRemoteTimes(u)
	return ccu
}

// SetNillableMaintainRemoteTimes sets the "maintain_remote_times" field if the given value is not nil.
func (ccu *CarCumulativeUpdate) SetNillableMaintainRemoteTimes(u *uint32) *CarCumulativeUpdate {
	if u != nil {
		ccu.SetMaintainRemoteTimes(*u)
	}
	return ccu
}

// AddMaintainRemoteTimes adds u to the "maintain_remote_times" field.
func (ccu *CarCumulativeUpdate) AddMaintainRemoteTimes(u int32) *CarCumulativeUpdate {
	ccu.mutation.AddMaintainRemoteTimes(u)
	return ccu
}

// SetMaintainFaultTimes sets the "maintain_fault_times" field.
func (ccu *CarCumulativeUpdate) SetMaintainFaultTimes(u uint32) *CarCumulativeUpdate {
	ccu.mutation.ResetMaintainFaultTimes()
	ccu.mutation.SetMaintainFaultTimes(u)
	return ccu
}

// SetNillableMaintainFaultTimes sets the "maintain_fault_times" field if the given value is not nil.
func (ccu *CarCumulativeUpdate) SetNillableMaintainFaultTimes(u *uint32) *CarCumulativeUpdate {
	if u != nil {
		ccu.SetMaintainFaultTimes(*u)
	}
	return ccu
}

// AddMaintainFaultTimes adds u to the "maintain_fault_times" field.
func (ccu *CarCumulativeUpdate) AddMaintainFaultTimes(u int32) *CarCumulativeUpdate {
	ccu.mutation.AddMaintainFaultTimes(u)
	return ccu
}

// SetMaintainManualMileage sets the "maintain_manual_mileage" field.
func (ccu *CarCumulativeUpdate) SetMaintainManualMileage(f float32) *CarCumulativeUpdate {
	ccu.mutation.ResetMaintainManualMileage()
	ccu.mutation.SetMaintainManualMileage(f)
	return ccu
}

// SetNillableMaintainManualMileage sets the "maintain_manual_mileage" field if the given value is not nil.
func (ccu *CarCumulativeUpdate) SetNillableMaintainManualMileage(f *float32) *CarCumulativeUpdate {
	if f != nil {
		ccu.SetMaintainManualMileage(*f)
	}
	return ccu
}

// AddMaintainManualMileage adds f to the "maintain_manual_mileage" field.
func (ccu *CarCumulativeUpdate) AddMaintainManualMileage(f float32) *CarCumulativeUpdate {
	ccu.mutation.AddMaintainManualMileage(f)
	return ccu
}

// SetMaintainAutoMileage sets the "maintain_auto_mileage" field.
func (ccu *CarCumulativeUpdate) SetMaintainAutoMileage(f float32) *CarCumulativeUpdate {
	ccu.mutation.ResetMaintainAutoMileage()
	ccu.mutation.SetMaintainAutoMileage(f)
	return ccu
}

// SetNillableMaintainAutoMileage sets the "maintain_auto_mileage" field if the given value is not nil.
func (ccu *CarCumulativeUpdate) SetNillableMaintainAutoMileage(f *float32) *CarCumulativeUpdate {
	if f != nil {
		ccu.SetMaintainAutoMileage(*f)
	}
	return ccu
}

// AddMaintainAutoMileage adds f to the "maintain_auto_mileage" field.
func (ccu *CarCumulativeUpdate) AddMaintainAutoMileage(f float32) *CarCumulativeUpdate {
	ccu.mutation.AddMaintainAutoMileage(f)
	return ccu
}

// SetMaintainRemoteMileage sets the "maintain_remote_mileage" field.
func (ccu *CarCumulativeUpdate) SetMaintainRemoteMileage(f float32) *CarCumulativeUpdate {
	ccu.mutation.ResetMaintainRemoteMileage()
	ccu.mutation.SetMaintainRemoteMileage(f)
	return ccu
}

// SetNillableMaintainRemoteMileage sets the "maintain_remote_mileage" field if the given value is not nil.
func (ccu *CarCumulativeUpdate) SetNillableMaintainRemoteMileage(f *float32) *CarCumulativeUpdate {
	if f != nil {
		ccu.SetMaintainRemoteMileage(*f)
	}
	return ccu
}

// AddMaintainRemoteMileage adds f to the "maintain_remote_mileage" field.
func (ccu *CarCumulativeUpdate) AddMaintainRemoteMileage(f float32) *CarCumulativeUpdate {
	ccu.mutation.AddMaintainRemoteMileage(f)
	return ccu
}

// SetAlarmTimes sets the "alarm_times" field.
func (ccu *CarCumulativeUpdate) SetAlarmTimes(u uint32) *CarCumulativeUpdate {
	ccu.mutation.ResetAlarmTimes()
	ccu.mutation.SetAlarmTimes(u)
	return ccu
}

// SetNillableAlarmTimes sets the "alarm_times" field if the given value is not nil.
func (ccu *CarCumulativeUpdate) SetNillableAlarmTimes(u *uint32) *CarCumulativeUpdate {
	if u != nil {
		ccu.SetAlarmTimes(*u)
	}
	return ccu
}

// AddAlarmTimes adds u to the "alarm_times" field.
func (ccu *CarCumulativeUpdate) AddAlarmTimes(u int32) *CarCumulativeUpdate {
	ccu.mutation.AddAlarmTimes(u)
	return ccu
}

// SetUpdateTime sets the "update_time" field.
func (ccu *CarCumulativeUpdate) SetUpdateTime(t time.Time) *CarCumulativeUpdate {
	ccu.mutation.SetUpdateTime(t)
	return ccu
}

// Mutation returns the CarCumulativeMutation object of the builder.
func (ccu *CarCumulativeUpdate) Mutation() *CarCumulativeMutation {
	return ccu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ccu *CarCumulativeUpdate) Save(ctx context.Context) (int, error) {
	ccu.defaults()
	return withHooks(ctx, ccu.sqlSave, ccu.mutation, ccu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ccu *CarCumulativeUpdate) SaveX(ctx context.Context) int {
	affected, err := ccu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ccu *CarCumulativeUpdate) Exec(ctx context.Context) error {
	_, err := ccu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccu *CarCumulativeUpdate) ExecX(ctx context.Context) {
	if err := ccu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ccu *CarCumulativeUpdate) defaults() {
	if _, ok := ccu.mutation.UpdateTime(); !ok {
		v := carcumulative.UpdateDefaultUpdateTime()
		ccu.mutation.SetUpdateTime(v)
	}
}

func (ccu *CarCumulativeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(carcumulative.Table, carcumulative.Columns, sqlgraph.NewFieldSpec(carcumulative.FieldID, field.TypeInt))
	if ps := ccu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccu.mutation.CarID(); ok {
		_spec.SetField(carcumulative.FieldCarID, field.TypeInt, value)
	}
	if value, ok := ccu.mutation.AddedCarID(); ok {
		_spec.AddField(carcumulative.FieldCarID, field.TypeInt, value)
	}
	if value, ok := ccu.mutation.DeviceID(); ok {
		_spec.SetField(carcumulative.FieldDeviceID, field.TypeString, value)
	}
	if value, ok := ccu.mutation.OperationLockDuration(); ok {
		_spec.SetField(carcumulative.FieldOperationLockDuration, field.TypeFloat32, value)
	}
	if value, ok := ccu.mutation.AddedOperationLockDuration(); ok {
		_spec.AddField(carcumulative.FieldOperationLockDuration, field.TypeFloat32, value)
	}
	if value, ok := ccu.mutation.OperationManualDuration(); ok {
		_spec.SetField(carcumulative.FieldOperationManualDuration, field.TypeFloat32, value)
	}
	if value, ok := ccu.mutation.AddedOperationManualDuration(); ok {
		_spec.AddField(carcumulative.FieldOperationManualDuration, field.TypeFloat32, value)
	}
	if value, ok := ccu.mutation.OperationAutoDuration(); ok {
		_spec.SetField(carcumulative.FieldOperationAutoDuration, field.TypeFloat32, value)
	}
	if value, ok := ccu.mutation.AddedOperationAutoDuration(); ok {
		_spec.AddField(carcumulative.FieldOperationAutoDuration, field.TypeFloat32, value)
	}
	if value, ok := ccu.mutation.OperationFaultDuration(); ok {
		_spec.SetField(carcumulative.FieldOperationFaultDuration, field.TypeFloat32, value)
	}
	if value, ok := ccu.mutation.AddedOperationFaultDuration(); ok {
		_spec.AddField(carcumulative.FieldOperationFaultDuration, field.TypeFloat32, value)
	}
	if value, ok := ccu.mutation.OperationLockTimes(); ok {
		_spec.SetField(carcumulative.FieldOperationLockTimes, field.TypeUint32, value)
	}
	if value, ok := ccu.mutation.AddedOperationLockTimes(); ok {
		_spec.AddField(carcumulative.FieldOperationLockTimes, field.TypeUint32, value)
	}
	if value, ok := ccu.mutation.OperationManualTimes(); ok {
		_spec.SetField(carcumulative.FieldOperationManualTimes, field.TypeUint32, value)
	}
	if value, ok := ccu.mutation.AddedOperationManualTimes(); ok {
		_spec.AddField(carcumulative.FieldOperationManualTimes, field.TypeUint32, value)
	}
	if value, ok := ccu.mutation.OperationAutoTimes(); ok {
		_spec.SetField(carcumulative.FieldOperationAutoTimes, field.TypeUint32, value)
	}
	if value, ok := ccu.mutation.AddedOperationAutoTimes(); ok {
		_spec.AddField(carcumulative.FieldOperationAutoTimes, field.TypeUint32, value)
	}
	if value, ok := ccu.mutation.OperationFaultTimes(); ok {
		_spec.SetField(carcumulative.FieldOperationFaultTimes, field.TypeUint32, value)
	}
	if value, ok := ccu.mutation.AddedOperationFaultTimes(); ok {
		_spec.AddField(carcumulative.FieldOperationFaultTimes, field.TypeUint32, value)
	}
	if value, ok := ccu.mutation.OperationManualMileage(); ok {
		_spec.SetField(carcumulative.FieldOperationManualMileage, field.TypeFloat32, value)
	}
	if value, ok := ccu.mutation.AddedOperationManualMileage(); ok {
		_spec.AddField(carcumulative.FieldOperationManualMileage, field.TypeFloat32, value)
	}
	if value, ok := ccu.mutation.OperationAutoMileage(); ok {
		_spec.SetField(carcumulative.FieldOperationAutoMileage, field.TypeFloat32, value)
	}
	if value, ok := ccu.mutation.AddedOperationAutoMileage(); ok {
		_spec.AddField(carcumulative.FieldOperationAutoMileage, field.TypeFloat32, value)
	}
	if value, ok := ccu.mutation.MaintainLockDuration(); ok {
		_spec.SetField(carcumulative.FieldMaintainLockDuration, field.TypeFloat32, value)
	}
	if value, ok := ccu.mutation.AddedMaintainLockDuration(); ok {
		_spec.AddField(carcumulative.FieldMaintainLockDuration, field.TypeFloat32, value)
	}
	if value, ok := ccu.mutation.MaintainManualDuration(); ok {
		_spec.SetField(carcumulative.FieldMaintainManualDuration, field.TypeFloat32, value)
	}
	if value, ok := ccu.mutation.AddedMaintainManualDuration(); ok {
		_spec.AddField(carcumulative.FieldMaintainManualDuration, field.TypeFloat32, value)
	}
	if value, ok := ccu.mutation.MaintainAutoDuration(); ok {
		_spec.SetField(carcumulative.FieldMaintainAutoDuration, field.TypeFloat32, value)
	}
	if value, ok := ccu.mutation.AddedMaintainAutoDuration(); ok {
		_spec.AddField(carcumulative.FieldMaintainAutoDuration, field.TypeFloat32, value)
	}
	if value, ok := ccu.mutation.MaintainRemoteDuration(); ok {
		_spec.SetField(carcumulative.FieldMaintainRemoteDuration, field.TypeFloat32, value)
	}
	if value, ok := ccu.mutation.AddedMaintainRemoteDuration(); ok {
		_spec.AddField(carcumulative.FieldMaintainRemoteDuration, field.TypeFloat32, value)
	}
	if value, ok := ccu.mutation.MaintainFaultDuration(); ok {
		_spec.SetField(carcumulative.FieldMaintainFaultDuration, field.TypeFloat32, value)
	}
	if value, ok := ccu.mutation.AddedMaintainFaultDuration(); ok {
		_spec.AddField(carcumulative.FieldMaintainFaultDuration, field.TypeFloat32, value)
	}
	if value, ok := ccu.mutation.MaintainLockTimes(); ok {
		_spec.SetField(carcumulative.FieldMaintainLockTimes, field.TypeUint32, value)
	}
	if value, ok := ccu.mutation.AddedMaintainLockTimes(); ok {
		_spec.AddField(carcumulative.FieldMaintainLockTimes, field.TypeUint32, value)
	}
	if value, ok := ccu.mutation.MaintainManualTimes(); ok {
		_spec.SetField(carcumulative.FieldMaintainManualTimes, field.TypeUint32, value)
	}
	if value, ok := ccu.mutation.AddedMaintainManualTimes(); ok {
		_spec.AddField(carcumulative.FieldMaintainManualTimes, field.TypeUint32, value)
	}
	if value, ok := ccu.mutation.MaintainAutoTimes(); ok {
		_spec.SetField(carcumulative.FieldMaintainAutoTimes, field.TypeUint32, value)
	}
	if value, ok := ccu.mutation.AddedMaintainAutoTimes(); ok {
		_spec.AddField(carcumulative.FieldMaintainAutoTimes, field.TypeUint32, value)
	}
	if value, ok := ccu.mutation.MaintainRemoteTimes(); ok {
		_spec.SetField(carcumulative.FieldMaintainRemoteTimes, field.TypeUint32, value)
	}
	if value, ok := ccu.mutation.AddedMaintainRemoteTimes(); ok {
		_spec.AddField(carcumulative.FieldMaintainRemoteTimes, field.TypeUint32, value)
	}
	if value, ok := ccu.mutation.MaintainFaultTimes(); ok {
		_spec.SetField(carcumulative.FieldMaintainFaultTimes, field.TypeUint32, value)
	}
	if value, ok := ccu.mutation.AddedMaintainFaultTimes(); ok {
		_spec.AddField(carcumulative.FieldMaintainFaultTimes, field.TypeUint32, value)
	}
	if value, ok := ccu.mutation.MaintainManualMileage(); ok {
		_spec.SetField(carcumulative.FieldMaintainManualMileage, field.TypeFloat32, value)
	}
	if value, ok := ccu.mutation.AddedMaintainManualMileage(); ok {
		_spec.AddField(carcumulative.FieldMaintainManualMileage, field.TypeFloat32, value)
	}
	if value, ok := ccu.mutation.MaintainAutoMileage(); ok {
		_spec.SetField(carcumulative.FieldMaintainAutoMileage, field.TypeFloat32, value)
	}
	if value, ok := ccu.mutation.AddedMaintainAutoMileage(); ok {
		_spec.AddField(carcumulative.FieldMaintainAutoMileage, field.TypeFloat32, value)
	}
	if value, ok := ccu.mutation.MaintainRemoteMileage(); ok {
		_spec.SetField(carcumulative.FieldMaintainRemoteMileage, field.TypeFloat32, value)
	}
	if value, ok := ccu.mutation.AddedMaintainRemoteMileage(); ok {
		_spec.AddField(carcumulative.FieldMaintainRemoteMileage, field.TypeFloat32, value)
	}
	if value, ok := ccu.mutation.AlarmTimes(); ok {
		_spec.SetField(carcumulative.FieldAlarmTimes, field.TypeUint32, value)
	}
	if value, ok := ccu.mutation.AddedAlarmTimes(); ok {
		_spec.AddField(carcumulative.FieldAlarmTimes, field.TypeUint32, value)
	}
	if value, ok := ccu.mutation.UpdateTime(); ok {
		_spec.SetField(carcumulative.FieldUpdateTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ccu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carcumulative.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ccu.mutation.done = true
	return n, nil
}

// CarCumulativeUpdateOne is the builder for updating a single CarCumulative entity.
type CarCumulativeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CarCumulativeMutation
}

// SetCarID sets the "car_id" field.
func (ccuo *CarCumulativeUpdateOne) SetCarID(i int) *CarCumulativeUpdateOne {
	ccuo.mutation.ResetCarID()
	ccuo.mutation.SetCarID(i)
	return ccuo
}

// SetNillableCarID sets the "car_id" field if the given value is not nil.
func (ccuo *CarCumulativeUpdateOne) SetNillableCarID(i *int) *CarCumulativeUpdateOne {
	if i != nil {
		ccuo.SetCarID(*i)
	}
	return ccuo
}

// AddCarID adds i to the "car_id" field.
func (ccuo *CarCumulativeUpdateOne) AddCarID(i int) *CarCumulativeUpdateOne {
	ccuo.mutation.AddCarID(i)
	return ccuo
}

// SetDeviceID sets the "device_id" field.
func (ccuo *CarCumulativeUpdateOne) SetDeviceID(s string) *CarCumulativeUpdateOne {
	ccuo.mutation.SetDeviceID(s)
	return ccuo
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (ccuo *CarCumulativeUpdateOne) SetNillableDeviceID(s *string) *CarCumulativeUpdateOne {
	if s != nil {
		ccuo.SetDeviceID(*s)
	}
	return ccuo
}

// SetOperationLockDuration sets the "operation_lock_duration" field.
func (ccuo *CarCumulativeUpdateOne) SetOperationLockDuration(f float32) *CarCumulativeUpdateOne {
	ccuo.mutation.ResetOperationLockDuration()
	ccuo.mutation.SetOperationLockDuration(f)
	return ccuo
}

// SetNillableOperationLockDuration sets the "operation_lock_duration" field if the given value is not nil.
func (ccuo *CarCumulativeUpdateOne) SetNillableOperationLockDuration(f *float32) *CarCumulativeUpdateOne {
	if f != nil {
		ccuo.SetOperationLockDuration(*f)
	}
	return ccuo
}

// AddOperationLockDuration adds f to the "operation_lock_duration" field.
func (ccuo *CarCumulativeUpdateOne) AddOperationLockDuration(f float32) *CarCumulativeUpdateOne {
	ccuo.mutation.AddOperationLockDuration(f)
	return ccuo
}

// SetOperationManualDuration sets the "operation_manual_duration" field.
func (ccuo *CarCumulativeUpdateOne) SetOperationManualDuration(f float32) *CarCumulativeUpdateOne {
	ccuo.mutation.ResetOperationManualDuration()
	ccuo.mutation.SetOperationManualDuration(f)
	return ccuo
}

// SetNillableOperationManualDuration sets the "operation_manual_duration" field if the given value is not nil.
func (ccuo *CarCumulativeUpdateOne) SetNillableOperationManualDuration(f *float32) *CarCumulativeUpdateOne {
	if f != nil {
		ccuo.SetOperationManualDuration(*f)
	}
	return ccuo
}

// AddOperationManualDuration adds f to the "operation_manual_duration" field.
func (ccuo *CarCumulativeUpdateOne) AddOperationManualDuration(f float32) *CarCumulativeUpdateOne {
	ccuo.mutation.AddOperationManualDuration(f)
	return ccuo
}

// SetOperationAutoDuration sets the "operation_auto_duration" field.
func (ccuo *CarCumulativeUpdateOne) SetOperationAutoDuration(f float32) *CarCumulativeUpdateOne {
	ccuo.mutation.ResetOperationAutoDuration()
	ccuo.mutation.SetOperationAutoDuration(f)
	return ccuo
}

// SetNillableOperationAutoDuration sets the "operation_auto_duration" field if the given value is not nil.
func (ccuo *CarCumulativeUpdateOne) SetNillableOperationAutoDuration(f *float32) *CarCumulativeUpdateOne {
	if f != nil {
		ccuo.SetOperationAutoDuration(*f)
	}
	return ccuo
}

// AddOperationAutoDuration adds f to the "operation_auto_duration" field.
func (ccuo *CarCumulativeUpdateOne) AddOperationAutoDuration(f float32) *CarCumulativeUpdateOne {
	ccuo.mutation.AddOperationAutoDuration(f)
	return ccuo
}

// SetOperationFaultDuration sets the "operation_fault_duration" field.
func (ccuo *CarCumulativeUpdateOne) SetOperationFaultDuration(f float32) *CarCumulativeUpdateOne {
	ccuo.mutation.ResetOperationFaultDuration()
	ccuo.mutation.SetOperationFaultDuration(f)
	return ccuo
}

// SetNillableOperationFaultDuration sets the "operation_fault_duration" field if the given value is not nil.
func (ccuo *CarCumulativeUpdateOne) SetNillableOperationFaultDuration(f *float32) *CarCumulativeUpdateOne {
	if f != nil {
		ccuo.SetOperationFaultDuration(*f)
	}
	return ccuo
}

// AddOperationFaultDuration adds f to the "operation_fault_duration" field.
func (ccuo *CarCumulativeUpdateOne) AddOperationFaultDuration(f float32) *CarCumulativeUpdateOne {
	ccuo.mutation.AddOperationFaultDuration(f)
	return ccuo
}

// SetOperationLockTimes sets the "operation_lock_times" field.
func (ccuo *CarCumulativeUpdateOne) SetOperationLockTimes(u uint32) *CarCumulativeUpdateOne {
	ccuo.mutation.ResetOperationLockTimes()
	ccuo.mutation.SetOperationLockTimes(u)
	return ccuo
}

// SetNillableOperationLockTimes sets the "operation_lock_times" field if the given value is not nil.
func (ccuo *CarCumulativeUpdateOne) SetNillableOperationLockTimes(u *uint32) *CarCumulativeUpdateOne {
	if u != nil {
		ccuo.SetOperationLockTimes(*u)
	}
	return ccuo
}

// AddOperationLockTimes adds u to the "operation_lock_times" field.
func (ccuo *CarCumulativeUpdateOne) AddOperationLockTimes(u int32) *CarCumulativeUpdateOne {
	ccuo.mutation.AddOperationLockTimes(u)
	return ccuo
}

// SetOperationManualTimes sets the "operation_manual_times" field.
func (ccuo *CarCumulativeUpdateOne) SetOperationManualTimes(u uint32) *CarCumulativeUpdateOne {
	ccuo.mutation.ResetOperationManualTimes()
	ccuo.mutation.SetOperationManualTimes(u)
	return ccuo
}

// SetNillableOperationManualTimes sets the "operation_manual_times" field if the given value is not nil.
func (ccuo *CarCumulativeUpdateOne) SetNillableOperationManualTimes(u *uint32) *CarCumulativeUpdateOne {
	if u != nil {
		ccuo.SetOperationManualTimes(*u)
	}
	return ccuo
}

// AddOperationManualTimes adds u to the "operation_manual_times" field.
func (ccuo *CarCumulativeUpdateOne) AddOperationManualTimes(u int32) *CarCumulativeUpdateOne {
	ccuo.mutation.AddOperationManualTimes(u)
	return ccuo
}

// SetOperationAutoTimes sets the "operation_auto_times" field.
func (ccuo *CarCumulativeUpdateOne) SetOperationAutoTimes(u uint32) *CarCumulativeUpdateOne {
	ccuo.mutation.ResetOperationAutoTimes()
	ccuo.mutation.SetOperationAutoTimes(u)
	return ccuo
}

// SetNillableOperationAutoTimes sets the "operation_auto_times" field if the given value is not nil.
func (ccuo *CarCumulativeUpdateOne) SetNillableOperationAutoTimes(u *uint32) *CarCumulativeUpdateOne {
	if u != nil {
		ccuo.SetOperationAutoTimes(*u)
	}
	return ccuo
}

// AddOperationAutoTimes adds u to the "operation_auto_times" field.
func (ccuo *CarCumulativeUpdateOne) AddOperationAutoTimes(u int32) *CarCumulativeUpdateOne {
	ccuo.mutation.AddOperationAutoTimes(u)
	return ccuo
}

// SetOperationFaultTimes sets the "operation_fault_times" field.
func (ccuo *CarCumulativeUpdateOne) SetOperationFaultTimes(u uint32) *CarCumulativeUpdateOne {
	ccuo.mutation.ResetOperationFaultTimes()
	ccuo.mutation.SetOperationFaultTimes(u)
	return ccuo
}

// SetNillableOperationFaultTimes sets the "operation_fault_times" field if the given value is not nil.
func (ccuo *CarCumulativeUpdateOne) SetNillableOperationFaultTimes(u *uint32) *CarCumulativeUpdateOne {
	if u != nil {
		ccuo.SetOperationFaultTimes(*u)
	}
	return ccuo
}

// AddOperationFaultTimes adds u to the "operation_fault_times" field.
func (ccuo *CarCumulativeUpdateOne) AddOperationFaultTimes(u int32) *CarCumulativeUpdateOne {
	ccuo.mutation.AddOperationFaultTimes(u)
	return ccuo
}

// SetOperationManualMileage sets the "operation_manual_mileage" field.
func (ccuo *CarCumulativeUpdateOne) SetOperationManualMileage(f float32) *CarCumulativeUpdateOne {
	ccuo.mutation.ResetOperationManualMileage()
	ccuo.mutation.SetOperationManualMileage(f)
	return ccuo
}

// SetNillableOperationManualMileage sets the "operation_manual_mileage" field if the given value is not nil.
func (ccuo *CarCumulativeUpdateOne) SetNillableOperationManualMileage(f *float32) *CarCumulativeUpdateOne {
	if f != nil {
		ccuo.SetOperationManualMileage(*f)
	}
	return ccuo
}

// AddOperationManualMileage adds f to the "operation_manual_mileage" field.
func (ccuo *CarCumulativeUpdateOne) AddOperationManualMileage(f float32) *CarCumulativeUpdateOne {
	ccuo.mutation.AddOperationManualMileage(f)
	return ccuo
}

// SetOperationAutoMileage sets the "operation_auto_mileage" field.
func (ccuo *CarCumulativeUpdateOne) SetOperationAutoMileage(f float32) *CarCumulativeUpdateOne {
	ccuo.mutation.ResetOperationAutoMileage()
	ccuo.mutation.SetOperationAutoMileage(f)
	return ccuo
}

// SetNillableOperationAutoMileage sets the "operation_auto_mileage" field if the given value is not nil.
func (ccuo *CarCumulativeUpdateOne) SetNillableOperationAutoMileage(f *float32) *CarCumulativeUpdateOne {
	if f != nil {
		ccuo.SetOperationAutoMileage(*f)
	}
	return ccuo
}

// AddOperationAutoMileage adds f to the "operation_auto_mileage" field.
func (ccuo *CarCumulativeUpdateOne) AddOperationAutoMileage(f float32) *CarCumulativeUpdateOne {
	ccuo.mutation.AddOperationAutoMileage(f)
	return ccuo
}

// SetMaintainLockDuration sets the "maintain_lock_duration" field.
func (ccuo *CarCumulativeUpdateOne) SetMaintainLockDuration(f float32) *CarCumulativeUpdateOne {
	ccuo.mutation.ResetMaintainLockDuration()
	ccuo.mutation.SetMaintainLockDuration(f)
	return ccuo
}

// SetNillableMaintainLockDuration sets the "maintain_lock_duration" field if the given value is not nil.
func (ccuo *CarCumulativeUpdateOne) SetNillableMaintainLockDuration(f *float32) *CarCumulativeUpdateOne {
	if f != nil {
		ccuo.SetMaintainLockDuration(*f)
	}
	return ccuo
}

// AddMaintainLockDuration adds f to the "maintain_lock_duration" field.
func (ccuo *CarCumulativeUpdateOne) AddMaintainLockDuration(f float32) *CarCumulativeUpdateOne {
	ccuo.mutation.AddMaintainLockDuration(f)
	return ccuo
}

// SetMaintainManualDuration sets the "maintain_manual_duration" field.
func (ccuo *CarCumulativeUpdateOne) SetMaintainManualDuration(f float32) *CarCumulativeUpdateOne {
	ccuo.mutation.ResetMaintainManualDuration()
	ccuo.mutation.SetMaintainManualDuration(f)
	return ccuo
}

// SetNillableMaintainManualDuration sets the "maintain_manual_duration" field if the given value is not nil.
func (ccuo *CarCumulativeUpdateOne) SetNillableMaintainManualDuration(f *float32) *CarCumulativeUpdateOne {
	if f != nil {
		ccuo.SetMaintainManualDuration(*f)
	}
	return ccuo
}

// AddMaintainManualDuration adds f to the "maintain_manual_duration" field.
func (ccuo *CarCumulativeUpdateOne) AddMaintainManualDuration(f float32) *CarCumulativeUpdateOne {
	ccuo.mutation.AddMaintainManualDuration(f)
	return ccuo
}

// SetMaintainAutoDuration sets the "maintain_auto_duration" field.
func (ccuo *CarCumulativeUpdateOne) SetMaintainAutoDuration(f float32) *CarCumulativeUpdateOne {
	ccuo.mutation.ResetMaintainAutoDuration()
	ccuo.mutation.SetMaintainAutoDuration(f)
	return ccuo
}

// SetNillableMaintainAutoDuration sets the "maintain_auto_duration" field if the given value is not nil.
func (ccuo *CarCumulativeUpdateOne) SetNillableMaintainAutoDuration(f *float32) *CarCumulativeUpdateOne {
	if f != nil {
		ccuo.SetMaintainAutoDuration(*f)
	}
	return ccuo
}

// AddMaintainAutoDuration adds f to the "maintain_auto_duration" field.
func (ccuo *CarCumulativeUpdateOne) AddMaintainAutoDuration(f float32) *CarCumulativeUpdateOne {
	ccuo.mutation.AddMaintainAutoDuration(f)
	return ccuo
}

// SetMaintainRemoteDuration sets the "maintain_remote_duration" field.
func (ccuo *CarCumulativeUpdateOne) SetMaintainRemoteDuration(f float32) *CarCumulativeUpdateOne {
	ccuo.mutation.ResetMaintainRemoteDuration()
	ccuo.mutation.SetMaintainRemoteDuration(f)
	return ccuo
}

// SetNillableMaintainRemoteDuration sets the "maintain_remote_duration" field if the given value is not nil.
func (ccuo *CarCumulativeUpdateOne) SetNillableMaintainRemoteDuration(f *float32) *CarCumulativeUpdateOne {
	if f != nil {
		ccuo.SetMaintainRemoteDuration(*f)
	}
	return ccuo
}

// AddMaintainRemoteDuration adds f to the "maintain_remote_duration" field.
func (ccuo *CarCumulativeUpdateOne) AddMaintainRemoteDuration(f float32) *CarCumulativeUpdateOne {
	ccuo.mutation.AddMaintainRemoteDuration(f)
	return ccuo
}

// SetMaintainFaultDuration sets the "maintain_fault_duration" field.
func (ccuo *CarCumulativeUpdateOne) SetMaintainFaultDuration(f float32) *CarCumulativeUpdateOne {
	ccuo.mutation.ResetMaintainFaultDuration()
	ccuo.mutation.SetMaintainFaultDuration(f)
	return ccuo
}

// SetNillableMaintainFaultDuration sets the "maintain_fault_duration" field if the given value is not nil.
func (ccuo *CarCumulativeUpdateOne) SetNillableMaintainFaultDuration(f *float32) *CarCumulativeUpdateOne {
	if f != nil {
		ccuo.SetMaintainFaultDuration(*f)
	}
	return ccuo
}

// AddMaintainFaultDuration adds f to the "maintain_fault_duration" field.
func (ccuo *CarCumulativeUpdateOne) AddMaintainFaultDuration(f float32) *CarCumulativeUpdateOne {
	ccuo.mutation.AddMaintainFaultDuration(f)
	return ccuo
}

// SetMaintainLockTimes sets the "maintain_lock_times" field.
func (ccuo *CarCumulativeUpdateOne) SetMaintainLockTimes(u uint32) *CarCumulativeUpdateOne {
	ccuo.mutation.ResetMaintainLockTimes()
	ccuo.mutation.SetMaintainLockTimes(u)
	return ccuo
}

// SetNillableMaintainLockTimes sets the "maintain_lock_times" field if the given value is not nil.
func (ccuo *CarCumulativeUpdateOne) SetNillableMaintainLockTimes(u *uint32) *CarCumulativeUpdateOne {
	if u != nil {
		ccuo.SetMaintainLockTimes(*u)
	}
	return ccuo
}

// AddMaintainLockTimes adds u to the "maintain_lock_times" field.
func (ccuo *CarCumulativeUpdateOne) AddMaintainLockTimes(u int32) *CarCumulativeUpdateOne {
	ccuo.mutation.AddMaintainLockTimes(u)
	return ccuo
}

// SetMaintainManualTimes sets the "maintain_manual_times" field.
func (ccuo *CarCumulativeUpdateOne) SetMaintainManualTimes(u uint32) *CarCumulativeUpdateOne {
	ccuo.mutation.ResetMaintainManualTimes()
	ccuo.mutation.SetMaintainManualTimes(u)
	return ccuo
}

// SetNillableMaintainManualTimes sets the "maintain_manual_times" field if the given value is not nil.
func (ccuo *CarCumulativeUpdateOne) SetNillableMaintainManualTimes(u *uint32) *CarCumulativeUpdateOne {
	if u != nil {
		ccuo.SetMaintainManualTimes(*u)
	}
	return ccuo
}

// AddMaintainManualTimes adds u to the "maintain_manual_times" field.
func (ccuo *CarCumulativeUpdateOne) AddMaintainManualTimes(u int32) *CarCumulativeUpdateOne {
	ccuo.mutation.AddMaintainManualTimes(u)
	return ccuo
}

// SetMaintainAutoTimes sets the "maintain_auto_times" field.
func (ccuo *CarCumulativeUpdateOne) SetMaintainAutoTimes(u uint32) *CarCumulativeUpdateOne {
	ccuo.mutation.ResetMaintainAutoTimes()
	ccuo.mutation.SetMaintainAutoTimes(u)
	return ccuo
}

// SetNillableMaintainAutoTimes sets the "maintain_auto_times" field if the given value is not nil.
func (ccuo *CarCumulativeUpdateOne) SetNillableMaintainAutoTimes(u *uint32) *CarCumulativeUpdateOne {
	if u != nil {
		ccuo.SetMaintainAutoTimes(*u)
	}
	return ccuo
}

// AddMaintainAutoTimes adds u to the "maintain_auto_times" field.
func (ccuo *CarCumulativeUpdateOne) AddMaintainAutoTimes(u int32) *CarCumulativeUpdateOne {
	ccuo.mutation.AddMaintainAutoTimes(u)
	return ccuo
}

// SetMaintainRemoteTimes sets the "maintain_remote_times" field.
func (ccuo *CarCumulativeUpdateOne) SetMaintainRemoteTimes(u uint32) *CarCumulativeUpdateOne {
	ccuo.mutation.ResetMaintainRemoteTimes()
	ccuo.mutation.SetMaintainRemoteTimes(u)
	return ccuo
}

// SetNillableMaintainRemoteTimes sets the "maintain_remote_times" field if the given value is not nil.
func (ccuo *CarCumulativeUpdateOne) SetNillableMaintainRemoteTimes(u *uint32) *CarCumulativeUpdateOne {
	if u != nil {
		ccuo.SetMaintainRemoteTimes(*u)
	}
	return ccuo
}

// AddMaintainRemoteTimes adds u to the "maintain_remote_times" field.
func (ccuo *CarCumulativeUpdateOne) AddMaintainRemoteTimes(u int32) *CarCumulativeUpdateOne {
	ccuo.mutation.AddMaintainRemoteTimes(u)
	return ccuo
}

// SetMaintainFaultTimes sets the "maintain_fault_times" field.
func (ccuo *CarCumulativeUpdateOne) SetMaintainFaultTimes(u uint32) *CarCumulativeUpdateOne {
	ccuo.mutation.ResetMaintainFaultTimes()
	ccuo.mutation.SetMaintainFaultTimes(u)
	return ccuo
}

// SetNillableMaintainFaultTimes sets the "maintain_fault_times" field if the given value is not nil.
func (ccuo *CarCumulativeUpdateOne) SetNillableMaintainFaultTimes(u *uint32) *CarCumulativeUpdateOne {
	if u != nil {
		ccuo.SetMaintainFaultTimes(*u)
	}
	return ccuo
}

// AddMaintainFaultTimes adds u to the "maintain_fault_times" field.
func (ccuo *CarCumulativeUpdateOne) AddMaintainFaultTimes(u int32) *CarCumulativeUpdateOne {
	ccuo.mutation.AddMaintainFaultTimes(u)
	return ccuo
}

// SetMaintainManualMileage sets the "maintain_manual_mileage" field.
func (ccuo *CarCumulativeUpdateOne) SetMaintainManualMileage(f float32) *CarCumulativeUpdateOne {
	ccuo.mutation.ResetMaintainManualMileage()
	ccuo.mutation.SetMaintainManualMileage(f)
	return ccuo
}

// SetNillableMaintainManualMileage sets the "maintain_manual_mileage" field if the given value is not nil.
func (ccuo *CarCumulativeUpdateOne) SetNillableMaintainManualMileage(f *float32) *CarCumulativeUpdateOne {
	if f != nil {
		ccuo.SetMaintainManualMileage(*f)
	}
	return ccuo
}

// AddMaintainManualMileage adds f to the "maintain_manual_mileage" field.
func (ccuo *CarCumulativeUpdateOne) AddMaintainManualMileage(f float32) *CarCumulativeUpdateOne {
	ccuo.mutation.AddMaintainManualMileage(f)
	return ccuo
}

// SetMaintainAutoMileage sets the "maintain_auto_mileage" field.
func (ccuo *CarCumulativeUpdateOne) SetMaintainAutoMileage(f float32) *CarCumulativeUpdateOne {
	ccuo.mutation.ResetMaintainAutoMileage()
	ccuo.mutation.SetMaintainAutoMileage(f)
	return ccuo
}

// SetNillableMaintainAutoMileage sets the "maintain_auto_mileage" field if the given value is not nil.
func (ccuo *CarCumulativeUpdateOne) SetNillableMaintainAutoMileage(f *float32) *CarCumulativeUpdateOne {
	if f != nil {
		ccuo.SetMaintainAutoMileage(*f)
	}
	return ccuo
}

// AddMaintainAutoMileage adds f to the "maintain_auto_mileage" field.
func (ccuo *CarCumulativeUpdateOne) AddMaintainAutoMileage(f float32) *CarCumulativeUpdateOne {
	ccuo.mutation.AddMaintainAutoMileage(f)
	return ccuo
}

// SetMaintainRemoteMileage sets the "maintain_remote_mileage" field.
func (ccuo *CarCumulativeUpdateOne) SetMaintainRemoteMileage(f float32) *CarCumulativeUpdateOne {
	ccuo.mutation.ResetMaintainRemoteMileage()
	ccuo.mutation.SetMaintainRemoteMileage(f)
	return ccuo
}

// SetNillableMaintainRemoteMileage sets the "maintain_remote_mileage" field if the given value is not nil.
func (ccuo *CarCumulativeUpdateOne) SetNillableMaintainRemoteMileage(f *float32) *CarCumulativeUpdateOne {
	if f != nil {
		ccuo.SetMaintainRemoteMileage(*f)
	}
	return ccuo
}

// AddMaintainRemoteMileage adds f to the "maintain_remote_mileage" field.
func (ccuo *CarCumulativeUpdateOne) AddMaintainRemoteMileage(f float32) *CarCumulativeUpdateOne {
	ccuo.mutation.AddMaintainRemoteMileage(f)
	return ccuo
}

// SetAlarmTimes sets the "alarm_times" field.
func (ccuo *CarCumulativeUpdateOne) SetAlarmTimes(u uint32) *CarCumulativeUpdateOne {
	ccuo.mutation.ResetAlarmTimes()
	ccuo.mutation.SetAlarmTimes(u)
	return ccuo
}

// SetNillableAlarmTimes sets the "alarm_times" field if the given value is not nil.
func (ccuo *CarCumulativeUpdateOne) SetNillableAlarmTimes(u *uint32) *CarCumulativeUpdateOne {
	if u != nil {
		ccuo.SetAlarmTimes(*u)
	}
	return ccuo
}

// AddAlarmTimes adds u to the "alarm_times" field.
func (ccuo *CarCumulativeUpdateOne) AddAlarmTimes(u int32) *CarCumulativeUpdateOne {
	ccuo.mutation.AddAlarmTimes(u)
	return ccuo
}

// SetUpdateTime sets the "update_time" field.
func (ccuo *CarCumulativeUpdateOne) SetUpdateTime(t time.Time) *CarCumulativeUpdateOne {
	ccuo.mutation.SetUpdateTime(t)
	return ccuo
}

// Mutation returns the CarCumulativeMutation object of the builder.
func (ccuo *CarCumulativeUpdateOne) Mutation() *CarCumulativeMutation {
	return ccuo.mutation
}

// Where appends a list predicates to the CarCumulativeUpdate builder.
func (ccuo *CarCumulativeUpdateOne) Where(ps ...predicate.CarCumulative) *CarCumulativeUpdateOne {
	ccuo.mutation.Where(ps...)
	return ccuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ccuo *CarCumulativeUpdateOne) Select(field string, fields ...string) *CarCumulativeUpdateOne {
	ccuo.fields = append([]string{field}, fields...)
	return ccuo
}

// Save executes the query and returns the updated CarCumulative entity.
func (ccuo *CarCumulativeUpdateOne) Save(ctx context.Context) (*CarCumulative, error) {
	ccuo.defaults()
	return withHooks(ctx, ccuo.sqlSave, ccuo.mutation, ccuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ccuo *CarCumulativeUpdateOne) SaveX(ctx context.Context) *CarCumulative {
	node, err := ccuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ccuo *CarCumulativeUpdateOne) Exec(ctx context.Context) error {
	_, err := ccuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccuo *CarCumulativeUpdateOne) ExecX(ctx context.Context) {
	if err := ccuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ccuo *CarCumulativeUpdateOne) defaults() {
	if _, ok := ccuo.mutation.UpdateTime(); !ok {
		v := carcumulative.UpdateDefaultUpdateTime()
		ccuo.mutation.SetUpdateTime(v)
	}
}

func (ccuo *CarCumulativeUpdateOne) sqlSave(ctx context.Context) (_node *CarCumulative, err error) {
	_spec := sqlgraph.NewUpdateSpec(carcumulative.Table, carcumulative.Columns, sqlgraph.NewFieldSpec(carcumulative.FieldID, field.TypeInt))
	id, ok := ccuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CarCumulative.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ccuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carcumulative.FieldID)
		for _, f := range fields {
			if !carcumulative.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != carcumulative.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ccuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccuo.mutation.CarID(); ok {
		_spec.SetField(carcumulative.FieldCarID, field.TypeInt, value)
	}
	if value, ok := ccuo.mutation.AddedCarID(); ok {
		_spec.AddField(carcumulative.FieldCarID, field.TypeInt, value)
	}
	if value, ok := ccuo.mutation.DeviceID(); ok {
		_spec.SetField(carcumulative.FieldDeviceID, field.TypeString, value)
	}
	if value, ok := ccuo.mutation.OperationLockDuration(); ok {
		_spec.SetField(carcumulative.FieldOperationLockDuration, field.TypeFloat32, value)
	}
	if value, ok := ccuo.mutation.AddedOperationLockDuration(); ok {
		_spec.AddField(carcumulative.FieldOperationLockDuration, field.TypeFloat32, value)
	}
	if value, ok := ccuo.mutation.OperationManualDuration(); ok {
		_spec.SetField(carcumulative.FieldOperationManualDuration, field.TypeFloat32, value)
	}
	if value, ok := ccuo.mutation.AddedOperationManualDuration(); ok {
		_spec.AddField(carcumulative.FieldOperationManualDuration, field.TypeFloat32, value)
	}
	if value, ok := ccuo.mutation.OperationAutoDuration(); ok {
		_spec.SetField(carcumulative.FieldOperationAutoDuration, field.TypeFloat32, value)
	}
	if value, ok := ccuo.mutation.AddedOperationAutoDuration(); ok {
		_spec.AddField(carcumulative.FieldOperationAutoDuration, field.TypeFloat32, value)
	}
	if value, ok := ccuo.mutation.OperationFaultDuration(); ok {
		_spec.SetField(carcumulative.FieldOperationFaultDuration, field.TypeFloat32, value)
	}
	if value, ok := ccuo.mutation.AddedOperationFaultDuration(); ok {
		_spec.AddField(carcumulative.FieldOperationFaultDuration, field.TypeFloat32, value)
	}
	if value, ok := ccuo.mutation.OperationLockTimes(); ok {
		_spec.SetField(carcumulative.FieldOperationLockTimes, field.TypeUint32, value)
	}
	if value, ok := ccuo.mutation.AddedOperationLockTimes(); ok {
		_spec.AddField(carcumulative.FieldOperationLockTimes, field.TypeUint32, value)
	}
	if value, ok := ccuo.mutation.OperationManualTimes(); ok {
		_spec.SetField(carcumulative.FieldOperationManualTimes, field.TypeUint32, value)
	}
	if value, ok := ccuo.mutation.AddedOperationManualTimes(); ok {
		_spec.AddField(carcumulative.FieldOperationManualTimes, field.TypeUint32, value)
	}
	if value, ok := ccuo.mutation.OperationAutoTimes(); ok {
		_spec.SetField(carcumulative.FieldOperationAutoTimes, field.TypeUint32, value)
	}
	if value, ok := ccuo.mutation.AddedOperationAutoTimes(); ok {
		_spec.AddField(carcumulative.FieldOperationAutoTimes, field.TypeUint32, value)
	}
	if value, ok := ccuo.mutation.OperationFaultTimes(); ok {
		_spec.SetField(carcumulative.FieldOperationFaultTimes, field.TypeUint32, value)
	}
	if value, ok := ccuo.mutation.AddedOperationFaultTimes(); ok {
		_spec.AddField(carcumulative.FieldOperationFaultTimes, field.TypeUint32, value)
	}
	if value, ok := ccuo.mutation.OperationManualMileage(); ok {
		_spec.SetField(carcumulative.FieldOperationManualMileage, field.TypeFloat32, value)
	}
	if value, ok := ccuo.mutation.AddedOperationManualMileage(); ok {
		_spec.AddField(carcumulative.FieldOperationManualMileage, field.TypeFloat32, value)
	}
	if value, ok := ccuo.mutation.OperationAutoMileage(); ok {
		_spec.SetField(carcumulative.FieldOperationAutoMileage, field.TypeFloat32, value)
	}
	if value, ok := ccuo.mutation.AddedOperationAutoMileage(); ok {
		_spec.AddField(carcumulative.FieldOperationAutoMileage, field.TypeFloat32, value)
	}
	if value, ok := ccuo.mutation.MaintainLockDuration(); ok {
		_spec.SetField(carcumulative.FieldMaintainLockDuration, field.TypeFloat32, value)
	}
	if value, ok := ccuo.mutation.AddedMaintainLockDuration(); ok {
		_spec.AddField(carcumulative.FieldMaintainLockDuration, field.TypeFloat32, value)
	}
	if value, ok := ccuo.mutation.MaintainManualDuration(); ok {
		_spec.SetField(carcumulative.FieldMaintainManualDuration, field.TypeFloat32, value)
	}
	if value, ok := ccuo.mutation.AddedMaintainManualDuration(); ok {
		_spec.AddField(carcumulative.FieldMaintainManualDuration, field.TypeFloat32, value)
	}
	if value, ok := ccuo.mutation.MaintainAutoDuration(); ok {
		_spec.SetField(carcumulative.FieldMaintainAutoDuration, field.TypeFloat32, value)
	}
	if value, ok := ccuo.mutation.AddedMaintainAutoDuration(); ok {
		_spec.AddField(carcumulative.FieldMaintainAutoDuration, field.TypeFloat32, value)
	}
	if value, ok := ccuo.mutation.MaintainRemoteDuration(); ok {
		_spec.SetField(carcumulative.FieldMaintainRemoteDuration, field.TypeFloat32, value)
	}
	if value, ok := ccuo.mutation.AddedMaintainRemoteDuration(); ok {
		_spec.AddField(carcumulative.FieldMaintainRemoteDuration, field.TypeFloat32, value)
	}
	if value, ok := ccuo.mutation.MaintainFaultDuration(); ok {
		_spec.SetField(carcumulative.FieldMaintainFaultDuration, field.TypeFloat32, value)
	}
	if value, ok := ccuo.mutation.AddedMaintainFaultDuration(); ok {
		_spec.AddField(carcumulative.FieldMaintainFaultDuration, field.TypeFloat32, value)
	}
	if value, ok := ccuo.mutation.MaintainLockTimes(); ok {
		_spec.SetField(carcumulative.FieldMaintainLockTimes, field.TypeUint32, value)
	}
	if value, ok := ccuo.mutation.AddedMaintainLockTimes(); ok {
		_spec.AddField(carcumulative.FieldMaintainLockTimes, field.TypeUint32, value)
	}
	if value, ok := ccuo.mutation.MaintainManualTimes(); ok {
		_spec.SetField(carcumulative.FieldMaintainManualTimes, field.TypeUint32, value)
	}
	if value, ok := ccuo.mutation.AddedMaintainManualTimes(); ok {
		_spec.AddField(carcumulative.FieldMaintainManualTimes, field.TypeUint32, value)
	}
	if value, ok := ccuo.mutation.MaintainAutoTimes(); ok {
		_spec.SetField(carcumulative.FieldMaintainAutoTimes, field.TypeUint32, value)
	}
	if value, ok := ccuo.mutation.AddedMaintainAutoTimes(); ok {
		_spec.AddField(carcumulative.FieldMaintainAutoTimes, field.TypeUint32, value)
	}
	if value, ok := ccuo.mutation.MaintainRemoteTimes(); ok {
		_spec.SetField(carcumulative.FieldMaintainRemoteTimes, field.TypeUint32, value)
	}
	if value, ok := ccuo.mutation.AddedMaintainRemoteTimes(); ok {
		_spec.AddField(carcumulative.FieldMaintainRemoteTimes, field.TypeUint32, value)
	}
	if value, ok := ccuo.mutation.MaintainFaultTimes(); ok {
		_spec.SetField(carcumulative.FieldMaintainFaultTimes, field.TypeUint32, value)
	}
	if value, ok := ccuo.mutation.AddedMaintainFaultTimes(); ok {
		_spec.AddField(carcumulative.FieldMaintainFaultTimes, field.TypeUint32, value)
	}
	if value, ok := ccuo.mutation.MaintainManualMileage(); ok {
		_spec.SetField(carcumulative.FieldMaintainManualMileage, field.TypeFloat32, value)
	}
	if value, ok := ccuo.mutation.AddedMaintainManualMileage(); ok {
		_spec.AddField(carcumulative.FieldMaintainManualMileage, field.TypeFloat32, value)
	}
	if value, ok := ccuo.mutation.MaintainAutoMileage(); ok {
		_spec.SetField(carcumulative.FieldMaintainAutoMileage, field.TypeFloat32, value)
	}
	if value, ok := ccuo.mutation.AddedMaintainAutoMileage(); ok {
		_spec.AddField(carcumulative.FieldMaintainAutoMileage, field.TypeFloat32, value)
	}
	if value, ok := ccuo.mutation.MaintainRemoteMileage(); ok {
		_spec.SetField(carcumulative.FieldMaintainRemoteMileage, field.TypeFloat32, value)
	}
	if value, ok := ccuo.mutation.AddedMaintainRemoteMileage(); ok {
		_spec.AddField(carcumulative.FieldMaintainRemoteMileage, field.TypeFloat32, value)
	}
	if value, ok := ccuo.mutation.AlarmTimes(); ok {
		_spec.SetField(carcumulative.FieldAlarmTimes, field.TypeUint32, value)
	}
	if value, ok := ccuo.mutation.AddedAlarmTimes(); ok {
		_spec.AddField(carcumulative.FieldAlarmTimes, field.TypeUint32, value)
	}
	if value, ok := ccuo.mutation.UpdateTime(); ok {
		_spec.SetField(carcumulative.FieldUpdateTime, field.TypeTime, value)
	}
	_node = &CarCumulative{config: ccuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ccuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carcumulative.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ccuo.mutation.done = true
	return _node, nil
}
