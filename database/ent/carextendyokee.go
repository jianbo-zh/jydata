// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"github.com/jianbo-zh/jydata/database/ent/carextendyokee"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CarExtendYokee is the model entity for the CarExtendYokee schema.
type CarExtendYokee struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// DeleteTime holds the value of the "delete_time" field.
	DeleteTime time.Time `json:"delete_time,omitempty"`
	// 车辆ID
	CarID int `json:"car_id,omitempty"`
	// 九识分配的车辆ID
	YokeeVehicleID int `json:"yokee_vehicle_id,omitempty"`
	// 九识分配的车辆名称
	YokeeVehicleName string `json:"yokee_vehicle_name,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime   time.Time `json:"update_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CarExtendYokee) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case carextendyokee.FieldID, carextendyokee.FieldCarID, carextendyokee.FieldYokeeVehicleID:
			values[i] = new(sql.NullInt64)
		case carextendyokee.FieldYokeeVehicleName:
			values[i] = new(sql.NullString)
		case carextendyokee.FieldDeleteTime, carextendyokee.FieldCreateTime, carextendyokee.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CarExtendYokee fields.
func (cey *CarExtendYokee) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case carextendyokee.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cey.ID = int(value.Int64)
		case carextendyokee.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				cey.DeleteTime = value.Time
			}
		case carextendyokee.FieldCarID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field car_id", values[i])
			} else if value.Valid {
				cey.CarID = int(value.Int64)
			}
		case carextendyokee.FieldYokeeVehicleID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field yokee_vehicle_id", values[i])
			} else if value.Valid {
				cey.YokeeVehicleID = int(value.Int64)
			}
		case carextendyokee.FieldYokeeVehicleName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field yokee_vehicle_name", values[i])
			} else if value.Valid {
				cey.YokeeVehicleName = value.String
			}
		case carextendyokee.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				cey.CreateTime = value.Time
			}
		case carextendyokee.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				cey.UpdateTime = value.Time
			}
		default:
			cey.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CarExtendYokee.
// This includes values selected through modifiers, order, etc.
func (cey *CarExtendYokee) Value(name string) (ent.Value, error) {
	return cey.selectValues.Get(name)
}

// Update returns a builder for updating this CarExtendYokee.
// Note that you need to call CarExtendYokee.Unwrap() before calling this method if this CarExtendYokee
// was returned from a transaction, and the transaction was committed or rolled back.
func (cey *CarExtendYokee) Update() *CarExtendYokeeUpdateOne {
	return NewCarExtendYokeeClient(cey.config).UpdateOne(cey)
}

// Unwrap unwraps the CarExtendYokee entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cey *CarExtendYokee) Unwrap() *CarExtendYokee {
	_tx, ok := cey.config.driver.(*txDriver)
	if !ok {
		panic("ent: CarExtendYokee is not a transactional entity")
	}
	cey.config.driver = _tx.drv
	return cey
}

// String implements the fmt.Stringer.
func (cey *CarExtendYokee) String() string {
	var builder strings.Builder
	builder.WriteString("CarExtendYokee(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cey.ID))
	builder.WriteString("delete_time=")
	builder.WriteString(cey.DeleteTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("car_id=")
	builder.WriteString(fmt.Sprintf("%v", cey.CarID))
	builder.WriteString(", ")
	builder.WriteString("yokee_vehicle_id=")
	builder.WriteString(fmt.Sprintf("%v", cey.YokeeVehicleID))
	builder.WriteString(", ")
	builder.WriteString("yokee_vehicle_name=")
	builder.WriteString(cey.YokeeVehicleName)
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(cey.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(cey.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CarExtendYokees is a parsable slice of CarExtendYokee.
type CarExtendYokees []*CarExtendYokee
