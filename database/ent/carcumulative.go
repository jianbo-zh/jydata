// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jianbo-zh/jydata/database/ent/carcumulative"
)

// CarCumulative is the model entity for the CarCumulative schema.
type CarCumulative struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 车辆ID
	CarID int `json:"car_id,omitempty"`
	// 车辆编号
	DeviceID string `json:"device_id,omitempty"`
	// 运营锁车时长（秒）
	OperationLockDuration float32 `json:"operation_lock_duration,omitempty"`
	// 运营手动时长（秒）
	OperationManualDuration float32 `json:"operation_manual_duration,omitempty"`
	// 运营自动时长（秒）
	OperationAutoDuration float32 `json:"operation_auto_duration,omitempty"`
	// 运营故障时长（秒）
	OperationFaultDuration float32 `json:"operation_fault_duration,omitempty"`
	// 运营锁车次数
	OperationLockTimes uint32 `json:"operation_lock_times,omitempty"`
	// 运营手动次数
	OperationManualTimes uint32 `json:"operation_manual_times,omitempty"`
	// 运营自动次数
	OperationAutoTimes uint32 `json:"operation_auto_times,omitempty"`
	// 运营故障次数
	OperationFaultTimes uint32 `json:"operation_fault_times,omitempty"`
	// 运营手动里程（米）
	OperationManualMileage float32 `json:"operation_manual_mileage,omitempty"`
	// 运营自动里程（米）
	OperationAutoMileage float32 `json:"operation_auto_mileage,omitempty"`
	// 运维锁车时长（秒）
	MaintainLockDuration float32 `json:"maintain_lock_duration,omitempty"`
	// 运维手动时长（秒）
	MaintainManualDuration float32 `json:"maintain_manual_duration,omitempty"`
	// 运维自动时长（秒）
	MaintainAutoDuration float32 `json:"maintain_auto_duration,omitempty"`
	// 运维远程时长（秒）
	MaintainRemoteDuration float32 `json:"maintain_remote_duration,omitempty"`
	// 运维故障时长（秒）
	MaintainFaultDuration float32 `json:"maintain_fault_duration,omitempty"`
	// 运维锁车次数
	MaintainLockTimes uint32 `json:"maintain_lock_times,omitempty"`
	// 运维手动次数
	MaintainManualTimes uint32 `json:"maintain_manual_times,omitempty"`
	// 运维自动次数
	MaintainAutoTimes uint32 `json:"maintain_auto_times,omitempty"`
	// 运维远程次数
	MaintainRemoteTimes uint32 `json:"maintain_remote_times,omitempty"`
	// 运维故障次数
	MaintainFaultTimes uint32 `json:"maintain_fault_times,omitempty"`
	// 运维手动里程（米）
	MaintainManualMileage float32 `json:"maintain_manual_mileage,omitempty"`
	// 运维自动里程（米）
	MaintainAutoMileage float32 `json:"maintain_auto_mileage,omitempty"`
	// 运维远程里程（米）
	MaintainRemoteMileage float32 `json:"maintain_remote_mileage,omitempty"`
	// 告警次数
	AlarmTimes uint32 `json:"alarm_times,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime   time.Time `json:"update_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CarCumulative) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case carcumulative.FieldOperationLockDuration, carcumulative.FieldOperationManualDuration, carcumulative.FieldOperationAutoDuration, carcumulative.FieldOperationFaultDuration, carcumulative.FieldOperationManualMileage, carcumulative.FieldOperationAutoMileage, carcumulative.FieldMaintainLockDuration, carcumulative.FieldMaintainManualDuration, carcumulative.FieldMaintainAutoDuration, carcumulative.FieldMaintainRemoteDuration, carcumulative.FieldMaintainFaultDuration, carcumulative.FieldMaintainManualMileage, carcumulative.FieldMaintainAutoMileage, carcumulative.FieldMaintainRemoteMileage:
			values[i] = new(sql.NullFloat64)
		case carcumulative.FieldID, carcumulative.FieldCarID, carcumulative.FieldOperationLockTimes, carcumulative.FieldOperationManualTimes, carcumulative.FieldOperationAutoTimes, carcumulative.FieldOperationFaultTimes, carcumulative.FieldMaintainLockTimes, carcumulative.FieldMaintainManualTimes, carcumulative.FieldMaintainAutoTimes, carcumulative.FieldMaintainRemoteTimes, carcumulative.FieldMaintainFaultTimes, carcumulative.FieldAlarmTimes:
			values[i] = new(sql.NullInt64)
		case carcumulative.FieldDeviceID:
			values[i] = new(sql.NullString)
		case carcumulative.FieldCreateTime, carcumulative.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CarCumulative fields.
func (cc *CarCumulative) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case carcumulative.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cc.ID = int(value.Int64)
		case carcumulative.FieldCarID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field car_id", values[i])
			} else if value.Valid {
				cc.CarID = int(value.Int64)
			}
		case carcumulative.FieldDeviceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device_id", values[i])
			} else if value.Valid {
				cc.DeviceID = value.String
			}
		case carcumulative.FieldOperationLockDuration:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field operation_lock_duration", values[i])
			} else if value.Valid {
				cc.OperationLockDuration = float32(value.Float64)
			}
		case carcumulative.FieldOperationManualDuration:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field operation_manual_duration", values[i])
			} else if value.Valid {
				cc.OperationManualDuration = float32(value.Float64)
			}
		case carcumulative.FieldOperationAutoDuration:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field operation_auto_duration", values[i])
			} else if value.Valid {
				cc.OperationAutoDuration = float32(value.Float64)
			}
		case carcumulative.FieldOperationFaultDuration:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field operation_fault_duration", values[i])
			} else if value.Valid {
				cc.OperationFaultDuration = float32(value.Float64)
			}
		case carcumulative.FieldOperationLockTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field operation_lock_times", values[i])
			} else if value.Valid {
				cc.OperationLockTimes = uint32(value.Int64)
			}
		case carcumulative.FieldOperationManualTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field operation_manual_times", values[i])
			} else if value.Valid {
				cc.OperationManualTimes = uint32(value.Int64)
			}
		case carcumulative.FieldOperationAutoTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field operation_auto_times", values[i])
			} else if value.Valid {
				cc.OperationAutoTimes = uint32(value.Int64)
			}
		case carcumulative.FieldOperationFaultTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field operation_fault_times", values[i])
			} else if value.Valid {
				cc.OperationFaultTimes = uint32(value.Int64)
			}
		case carcumulative.FieldOperationManualMileage:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field operation_manual_mileage", values[i])
			} else if value.Valid {
				cc.OperationManualMileage = float32(value.Float64)
			}
		case carcumulative.FieldOperationAutoMileage:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field operation_auto_mileage", values[i])
			} else if value.Valid {
				cc.OperationAutoMileage = float32(value.Float64)
			}
		case carcumulative.FieldMaintainLockDuration:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field maintain_lock_duration", values[i])
			} else if value.Valid {
				cc.MaintainLockDuration = float32(value.Float64)
			}
		case carcumulative.FieldMaintainManualDuration:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field maintain_manual_duration", values[i])
			} else if value.Valid {
				cc.MaintainManualDuration = float32(value.Float64)
			}
		case carcumulative.FieldMaintainAutoDuration:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field maintain_auto_duration", values[i])
			} else if value.Valid {
				cc.MaintainAutoDuration = float32(value.Float64)
			}
		case carcumulative.FieldMaintainRemoteDuration:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field maintain_remote_duration", values[i])
			} else if value.Valid {
				cc.MaintainRemoteDuration = float32(value.Float64)
			}
		case carcumulative.FieldMaintainFaultDuration:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field maintain_fault_duration", values[i])
			} else if value.Valid {
				cc.MaintainFaultDuration = float32(value.Float64)
			}
		case carcumulative.FieldMaintainLockTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field maintain_lock_times", values[i])
			} else if value.Valid {
				cc.MaintainLockTimes = uint32(value.Int64)
			}
		case carcumulative.FieldMaintainManualTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field maintain_manual_times", values[i])
			} else if value.Valid {
				cc.MaintainManualTimes = uint32(value.Int64)
			}
		case carcumulative.FieldMaintainAutoTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field maintain_auto_times", values[i])
			} else if value.Valid {
				cc.MaintainAutoTimes = uint32(value.Int64)
			}
		case carcumulative.FieldMaintainRemoteTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field maintain_remote_times", values[i])
			} else if value.Valid {
				cc.MaintainRemoteTimes = uint32(value.Int64)
			}
		case carcumulative.FieldMaintainFaultTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field maintain_fault_times", values[i])
			} else if value.Valid {
				cc.MaintainFaultTimes = uint32(value.Int64)
			}
		case carcumulative.FieldMaintainManualMileage:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field maintain_manual_mileage", values[i])
			} else if value.Valid {
				cc.MaintainManualMileage = float32(value.Float64)
			}
		case carcumulative.FieldMaintainAutoMileage:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field maintain_auto_mileage", values[i])
			} else if value.Valid {
				cc.MaintainAutoMileage = float32(value.Float64)
			}
		case carcumulative.FieldMaintainRemoteMileage:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field maintain_remote_mileage", values[i])
			} else if value.Valid {
				cc.MaintainRemoteMileage = float32(value.Float64)
			}
		case carcumulative.FieldAlarmTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field alarm_times", values[i])
			} else if value.Valid {
				cc.AlarmTimes = uint32(value.Int64)
			}
		case carcumulative.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				cc.CreateTime = value.Time
			}
		case carcumulative.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				cc.UpdateTime = value.Time
			}
		default:
			cc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CarCumulative.
// This includes values selected through modifiers, order, etc.
func (cc *CarCumulative) Value(name string) (ent.Value, error) {
	return cc.selectValues.Get(name)
}

// Update returns a builder for updating this CarCumulative.
// Note that you need to call CarCumulative.Unwrap() before calling this method if this CarCumulative
// was returned from a transaction, and the transaction was committed or rolled back.
func (cc *CarCumulative) Update() *CarCumulativeUpdateOne {
	return NewCarCumulativeClient(cc.config).UpdateOne(cc)
}

// Unwrap unwraps the CarCumulative entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cc *CarCumulative) Unwrap() *CarCumulative {
	_tx, ok := cc.config.driver.(*txDriver)
	if !ok {
		panic("ent: CarCumulative is not a transactional entity")
	}
	cc.config.driver = _tx.drv
	return cc
}

// String implements the fmt.Stringer.
func (cc *CarCumulative) String() string {
	var builder strings.Builder
	builder.WriteString("CarCumulative(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cc.ID))
	builder.WriteString("car_id=")
	builder.WriteString(fmt.Sprintf("%v", cc.CarID))
	builder.WriteString(", ")
	builder.WriteString("device_id=")
	builder.WriteString(cc.DeviceID)
	builder.WriteString(", ")
	builder.WriteString("operation_lock_duration=")
	builder.WriteString(fmt.Sprintf("%v", cc.OperationLockDuration))
	builder.WriteString(", ")
	builder.WriteString("operation_manual_duration=")
	builder.WriteString(fmt.Sprintf("%v", cc.OperationManualDuration))
	builder.WriteString(", ")
	builder.WriteString("operation_auto_duration=")
	builder.WriteString(fmt.Sprintf("%v", cc.OperationAutoDuration))
	builder.WriteString(", ")
	builder.WriteString("operation_fault_duration=")
	builder.WriteString(fmt.Sprintf("%v", cc.OperationFaultDuration))
	builder.WriteString(", ")
	builder.WriteString("operation_lock_times=")
	builder.WriteString(fmt.Sprintf("%v", cc.OperationLockTimes))
	builder.WriteString(", ")
	builder.WriteString("operation_manual_times=")
	builder.WriteString(fmt.Sprintf("%v", cc.OperationManualTimes))
	builder.WriteString(", ")
	builder.WriteString("operation_auto_times=")
	builder.WriteString(fmt.Sprintf("%v", cc.OperationAutoTimes))
	builder.WriteString(", ")
	builder.WriteString("operation_fault_times=")
	builder.WriteString(fmt.Sprintf("%v", cc.OperationFaultTimes))
	builder.WriteString(", ")
	builder.WriteString("operation_manual_mileage=")
	builder.WriteString(fmt.Sprintf("%v", cc.OperationManualMileage))
	builder.WriteString(", ")
	builder.WriteString("operation_auto_mileage=")
	builder.WriteString(fmt.Sprintf("%v", cc.OperationAutoMileage))
	builder.WriteString(", ")
	builder.WriteString("maintain_lock_duration=")
	builder.WriteString(fmt.Sprintf("%v", cc.MaintainLockDuration))
	builder.WriteString(", ")
	builder.WriteString("maintain_manual_duration=")
	builder.WriteString(fmt.Sprintf("%v", cc.MaintainManualDuration))
	builder.WriteString(", ")
	builder.WriteString("maintain_auto_duration=")
	builder.WriteString(fmt.Sprintf("%v", cc.MaintainAutoDuration))
	builder.WriteString(", ")
	builder.WriteString("maintain_remote_duration=")
	builder.WriteString(fmt.Sprintf("%v", cc.MaintainRemoteDuration))
	builder.WriteString(", ")
	builder.WriteString("maintain_fault_duration=")
	builder.WriteString(fmt.Sprintf("%v", cc.MaintainFaultDuration))
	builder.WriteString(", ")
	builder.WriteString("maintain_lock_times=")
	builder.WriteString(fmt.Sprintf("%v", cc.MaintainLockTimes))
	builder.WriteString(", ")
	builder.WriteString("maintain_manual_times=")
	builder.WriteString(fmt.Sprintf("%v", cc.MaintainManualTimes))
	builder.WriteString(", ")
	builder.WriteString("maintain_auto_times=")
	builder.WriteString(fmt.Sprintf("%v", cc.MaintainAutoTimes))
	builder.WriteString(", ")
	builder.WriteString("maintain_remote_times=")
	builder.WriteString(fmt.Sprintf("%v", cc.MaintainRemoteTimes))
	builder.WriteString(", ")
	builder.WriteString("maintain_fault_times=")
	builder.WriteString(fmt.Sprintf("%v", cc.MaintainFaultTimes))
	builder.WriteString(", ")
	builder.WriteString("maintain_manual_mileage=")
	builder.WriteString(fmt.Sprintf("%v", cc.MaintainManualMileage))
	builder.WriteString(", ")
	builder.WriteString("maintain_auto_mileage=")
	builder.WriteString(fmt.Sprintf("%v", cc.MaintainAutoMileage))
	builder.WriteString(", ")
	builder.WriteString("maintain_remote_mileage=")
	builder.WriteString(fmt.Sprintf("%v", cc.MaintainRemoteMileage))
	builder.WriteString(", ")
	builder.WriteString("alarm_times=")
	builder.WriteString(fmt.Sprintf("%v", cc.AlarmTimes))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(cc.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(cc.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CarCumulatives is a parsable slice of CarCumulative.
type CarCumulatives []*CarCumulative
