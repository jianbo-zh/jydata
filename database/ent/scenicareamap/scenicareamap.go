// Code generated by ent, DO NOT EDIT.

package scenicareamap

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the scenicareamap type in the database.
	Label = "scenic_area_map"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldScenicAreaID holds the string denoting the scenic_area_id field in the database.
	FieldScenicAreaID = "scenic_area_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldBaseMapFileID holds the string denoting the base_map_file_id field in the database.
	FieldBaseMapFileID = "base_map_file_id"
	// FieldRoutingMapFileID holds the string denoting the routing_map_file_id field in the database.
	FieldRoutingMapFileID = "routing_map_file_id"
	// FieldSimMapFileID holds the string denoting the sim_map_file_id field in the database.
	FieldSimMapFileID = "sim_map_file_id"
	// FieldFenceMapFileID holds the string denoting the fence_map_file_id field in the database.
	FieldFenceMapFileID = "fence_map_file_id"
	// FieldCaruiMapFileID holds the string denoting the carui_map_file_id field in the database.
	FieldCaruiMapFileID = "carui_map_file_id"
	// FieldCaruiNeCoord holds the string denoting the carui_ne_coord field in the database.
	FieldCaruiNeCoord = "carui_ne_coord"
	// FieldCaruiSwCoord holds the string denoting the carui_sw_coord field in the database.
	FieldCaruiSwCoord = "carui_sw_coord"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// EdgeBackgroundScenicArea holds the string denoting the background_scenic_area edge name in mutations.
	EdgeBackgroundScenicArea = "background_scenic_area"
	// Table holds the table name of the scenicareamap in the database.
	Table = "scenic_area_maps"
	// BackgroundScenicAreaTable is the table that holds the background_scenic_area relation/edge.
	BackgroundScenicAreaTable = "scenic_area_maps"
	// BackgroundScenicAreaInverseTable is the table name for the ScenicArea entity.
	// It exists in this package in order to avoid circular dependency with the "scenicarea" package.
	BackgroundScenicAreaInverseTable = "scenic_areas"
	// BackgroundScenicAreaColumn is the table column denoting the background_scenic_area relation/edge.
	BackgroundScenicAreaColumn = "scenic_area_id"
)

// Columns holds all SQL columns for scenicareamap fields.
var Columns = []string{
	FieldID,
	FieldScenicAreaID,
	FieldName,
	FieldBaseMapFileID,
	FieldRoutingMapFileID,
	FieldSimMapFileID,
	FieldFenceMapFileID,
	FieldCaruiMapFileID,
	FieldCaruiNeCoord,
	FieldCaruiSwCoord,
	FieldCreateTime,
	FieldUpdateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCaruiMapFileID holds the default value on creation for the "carui_map_file_id" field.
	DefaultCaruiMapFileID int
	// DefaultCaruiNeCoord holds the default value on creation for the "carui_ne_coord" field.
	DefaultCaruiNeCoord string
	// DefaultCaruiSwCoord holds the default value on creation for the "carui_sw_coord" field.
	DefaultCaruiSwCoord string
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)

// OrderOption defines the ordering options for the ScenicAreaMap queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByScenicAreaID orders the results by the scenic_area_id field.
func ByScenicAreaID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScenicAreaID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByBaseMapFileID orders the results by the base_map_file_id field.
func ByBaseMapFileID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBaseMapFileID, opts...).ToFunc()
}

// ByRoutingMapFileID orders the results by the routing_map_file_id field.
func ByRoutingMapFileID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoutingMapFileID, opts...).ToFunc()
}

// BySimMapFileID orders the results by the sim_map_file_id field.
func BySimMapFileID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSimMapFileID, opts...).ToFunc()
}

// ByFenceMapFileID orders the results by the fence_map_file_id field.
func ByFenceMapFileID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFenceMapFileID, opts...).ToFunc()
}

// ByCaruiMapFileID orders the results by the carui_map_file_id field.
func ByCaruiMapFileID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCaruiMapFileID, opts...).ToFunc()
}

// ByCaruiNeCoord orders the results by the carui_ne_coord field.
func ByCaruiNeCoord(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCaruiNeCoord, opts...).ToFunc()
}

// ByCaruiSwCoord orders the results by the carui_sw_coord field.
func ByCaruiSwCoord(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCaruiSwCoord, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByBackgroundScenicAreaField orders the results by background_scenic_area field.
func ByBackgroundScenicAreaField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBackgroundScenicAreaStep(), sql.OrderByField(field, opts...))
	}
}
func newBackgroundScenicAreaStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BackgroundScenicAreaInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, BackgroundScenicAreaTable, BackgroundScenicAreaColumn),
	)
}
