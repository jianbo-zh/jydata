// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jianbo-zh/jydata/database/ent/statsdaily"
)

// StatsDaily is the model entity for the StatsDaily schema.
type StatsDaily struct {
	config `json:"-"`
	// ID of the ent.
	// ID
	ID int `json:"id,omitempty"`
	// 景区ID
	ScenicAreaID int `json:"scenic_area_id,omitempty"`
	// 年
	Y string `json:"y,omitempty"`
	// 年月
	Ym string `json:"ym,omitempty"`
	// 年月日
	Ymd string `json:"ymd,omitempty"`
	// 订单额
	OrderAmount int `json:"order_amount,omitempty"`
	// 订单数
	OrderCount int `json:"order_count,omitempty"`
	// 订单时长
	OrderDuration int `json:"order_duration,omitempty"`
	// 订单距离
	OrderDistance int `json:"order_distance,omitempty"`
	// 注册用户数
	RegisterUserCount int `json:"register_user_count,omitempty"`
	// 下单用户数
	OrderUserCount int `json:"order_user_count,omitempty"`
	// 运营车辆数
	OperationCarCount int `json:"operation_car_count,omitempty"`
	// 运营时长
	OperationCarDuration int `json:"operation_car_duration,omitempty"`
	// 创建时间
	CreateTime   time.Time `json:"create_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StatsDaily) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case statsdaily.FieldID, statsdaily.FieldScenicAreaID, statsdaily.FieldOrderAmount, statsdaily.FieldOrderCount, statsdaily.FieldOrderDuration, statsdaily.FieldOrderDistance, statsdaily.FieldRegisterUserCount, statsdaily.FieldOrderUserCount, statsdaily.FieldOperationCarCount, statsdaily.FieldOperationCarDuration:
			values[i] = new(sql.NullInt64)
		case statsdaily.FieldY, statsdaily.FieldYm, statsdaily.FieldYmd:
			values[i] = new(sql.NullString)
		case statsdaily.FieldCreateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StatsDaily fields.
func (sd *StatsDaily) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case statsdaily.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sd.ID = int(value.Int64)
		case statsdaily.FieldScenicAreaID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field scenic_area_id", values[i])
			} else if value.Valid {
				sd.ScenicAreaID = int(value.Int64)
			}
		case statsdaily.FieldY:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field y", values[i])
			} else if value.Valid {
				sd.Y = value.String
			}
		case statsdaily.FieldYm:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ym", values[i])
			} else if value.Valid {
				sd.Ym = value.String
			}
		case statsdaily.FieldYmd:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ymd", values[i])
			} else if value.Valid {
				sd.Ymd = value.String
			}
		case statsdaily.FieldOrderAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_amount", values[i])
			} else if value.Valid {
				sd.OrderAmount = int(value.Int64)
			}
		case statsdaily.FieldOrderCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_count", values[i])
			} else if value.Valid {
				sd.OrderCount = int(value.Int64)
			}
		case statsdaily.FieldOrderDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_duration", values[i])
			} else if value.Valid {
				sd.OrderDuration = int(value.Int64)
			}
		case statsdaily.FieldOrderDistance:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_distance", values[i])
			} else if value.Valid {
				sd.OrderDistance = int(value.Int64)
			}
		case statsdaily.FieldRegisterUserCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field register_user_count", values[i])
			} else if value.Valid {
				sd.RegisterUserCount = int(value.Int64)
			}
		case statsdaily.FieldOrderUserCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_user_count", values[i])
			} else if value.Valid {
				sd.OrderUserCount = int(value.Int64)
			}
		case statsdaily.FieldOperationCarCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field operation_car_count", values[i])
			} else if value.Valid {
				sd.OperationCarCount = int(value.Int64)
			}
		case statsdaily.FieldOperationCarDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field operation_car_duration", values[i])
			} else if value.Valid {
				sd.OperationCarDuration = int(value.Int64)
			}
		case statsdaily.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				sd.CreateTime = value.Time
			}
		default:
			sd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the StatsDaily.
// This includes values selected through modifiers, order, etc.
func (sd *StatsDaily) Value(name string) (ent.Value, error) {
	return sd.selectValues.Get(name)
}

// Update returns a builder for updating this StatsDaily.
// Note that you need to call StatsDaily.Unwrap() before calling this method if this StatsDaily
// was returned from a transaction, and the transaction was committed or rolled back.
func (sd *StatsDaily) Update() *StatsDailyUpdateOne {
	return NewStatsDailyClient(sd.config).UpdateOne(sd)
}

// Unwrap unwraps the StatsDaily entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sd *StatsDaily) Unwrap() *StatsDaily {
	_tx, ok := sd.config.driver.(*txDriver)
	if !ok {
		panic("ent: StatsDaily is not a transactional entity")
	}
	sd.config.driver = _tx.drv
	return sd
}

// String implements the fmt.Stringer.
func (sd *StatsDaily) String() string {
	var builder strings.Builder
	builder.WriteString("StatsDaily(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sd.ID))
	builder.WriteString("scenic_area_id=")
	builder.WriteString(fmt.Sprintf("%v", sd.ScenicAreaID))
	builder.WriteString(", ")
	builder.WriteString("y=")
	builder.WriteString(sd.Y)
	builder.WriteString(", ")
	builder.WriteString("ym=")
	builder.WriteString(sd.Ym)
	builder.WriteString(", ")
	builder.WriteString("ymd=")
	builder.WriteString(sd.Ymd)
	builder.WriteString(", ")
	builder.WriteString("order_amount=")
	builder.WriteString(fmt.Sprintf("%v", sd.OrderAmount))
	builder.WriteString(", ")
	builder.WriteString("order_count=")
	builder.WriteString(fmt.Sprintf("%v", sd.OrderCount))
	builder.WriteString(", ")
	builder.WriteString("order_duration=")
	builder.WriteString(fmt.Sprintf("%v", sd.OrderDuration))
	builder.WriteString(", ")
	builder.WriteString("order_distance=")
	builder.WriteString(fmt.Sprintf("%v", sd.OrderDistance))
	builder.WriteString(", ")
	builder.WriteString("register_user_count=")
	builder.WriteString(fmt.Sprintf("%v", sd.RegisterUserCount))
	builder.WriteString(", ")
	builder.WriteString("order_user_count=")
	builder.WriteString(fmt.Sprintf("%v", sd.OrderUserCount))
	builder.WriteString(", ")
	builder.WriteString("operation_car_count=")
	builder.WriteString(fmt.Sprintf("%v", sd.OperationCarCount))
	builder.WriteString(", ")
	builder.WriteString("operation_car_duration=")
	builder.WriteString(fmt.Sprintf("%v", sd.OperationCarDuration))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(sd.CreateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// StatsDailies is a parsable slice of StatsDaily.
type StatsDailies []*StatsDaily
