// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jianbo-zh/jydata/database/ent/schetask"
	"github.com/jianbo-zh/jydata/database/ent/schetaskevent"
)

// ScheTaskEvent is the model entity for the ScheTaskEvent schema.
type ScheTaskEvent struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 调度ID
	ScheTaskID int `json:"sche_task_id,omitempty"`
	// 调度状态（2-调度中 3-已暂停 5-停滞不前 6-已完成 7-已取消 8-系统终止 9-异常状态）
	State int `json:"state,omitempty"`
	// 异常子状态（1-无异常 2-离线 3-道路外 4-有载人或物 5-驾驶状态异常）
	AbnormalState int `json:"abnormal_state,omitempty"`
	// 日志记录
	Remark string `json:"remark,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ScheTaskEventQuery when eager-loading is set.
	Edges        ScheTaskEventEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ScheTaskEventEdges holds the relations/edges for other nodes in the graph.
type ScheTaskEventEdges struct {
	// ScheTask holds the value of the sche_task edge.
	ScheTask *ScheTask `json:"sche_task,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ScheTaskOrErr returns the ScheTask value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScheTaskEventEdges) ScheTaskOrErr() (*ScheTask, error) {
	if e.ScheTask != nil {
		return e.ScheTask, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: schetask.Label}
	}
	return nil, &NotLoadedError{edge: "sche_task"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ScheTaskEvent) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case schetaskevent.FieldID, schetaskevent.FieldScheTaskID, schetaskevent.FieldState, schetaskevent.FieldAbnormalState:
			values[i] = new(sql.NullInt64)
		case schetaskevent.FieldRemark:
			values[i] = new(sql.NullString)
		case schetaskevent.FieldCreateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ScheTaskEvent fields.
func (ste *ScheTaskEvent) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case schetaskevent.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ste.ID = int(value.Int64)
		case schetaskevent.FieldScheTaskID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sche_task_id", values[i])
			} else if value.Valid {
				ste.ScheTaskID = int(value.Int64)
			}
		case schetaskevent.FieldState:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				ste.State = int(value.Int64)
			}
		case schetaskevent.FieldAbnormalState:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field abnormal_state", values[i])
			} else if value.Valid {
				ste.AbnormalState = int(value.Int64)
			}
		case schetaskevent.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				ste.Remark = value.String
			}
		case schetaskevent.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ste.CreateTime = value.Time
			}
		default:
			ste.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ScheTaskEvent.
// This includes values selected through modifiers, order, etc.
func (ste *ScheTaskEvent) Value(name string) (ent.Value, error) {
	return ste.selectValues.Get(name)
}

// QueryScheTask queries the "sche_task" edge of the ScheTaskEvent entity.
func (ste *ScheTaskEvent) QueryScheTask() *ScheTaskQuery {
	return NewScheTaskEventClient(ste.config).QueryScheTask(ste)
}

// Update returns a builder for updating this ScheTaskEvent.
// Note that you need to call ScheTaskEvent.Unwrap() before calling this method if this ScheTaskEvent
// was returned from a transaction, and the transaction was committed or rolled back.
func (ste *ScheTaskEvent) Update() *ScheTaskEventUpdateOne {
	return NewScheTaskEventClient(ste.config).UpdateOne(ste)
}

// Unwrap unwraps the ScheTaskEvent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ste *ScheTaskEvent) Unwrap() *ScheTaskEvent {
	_tx, ok := ste.config.driver.(*txDriver)
	if !ok {
		panic("ent: ScheTaskEvent is not a transactional entity")
	}
	ste.config.driver = _tx.drv
	return ste
}

// String implements the fmt.Stringer.
func (ste *ScheTaskEvent) String() string {
	var builder strings.Builder
	builder.WriteString("ScheTaskEvent(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ste.ID))
	builder.WriteString("sche_task_id=")
	builder.WriteString(fmt.Sprintf("%v", ste.ScheTaskID))
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(fmt.Sprintf("%v", ste.State))
	builder.WriteString(", ")
	builder.WriteString("abnormal_state=")
	builder.WriteString(fmt.Sprintf("%v", ste.AbnormalState))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(ste.Remark)
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(ste.CreateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ScheTaskEvents is a parsable slice of ScheTaskEvent.
type ScheTaskEvents []*ScheTaskEvent
