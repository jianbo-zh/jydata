// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/orderextendflight"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
)

// OrderExtendFlightUpdate is the builder for updating OrderExtendFlight entities.
type OrderExtendFlightUpdate struct {
	config
	hooks    []Hook
	mutation *OrderExtendFlightMutation
}

// Where appends a list predicates to the OrderExtendFlightUpdate builder.
func (oefu *OrderExtendFlightUpdate) Where(ps ...predicate.OrderExtendFlight) *OrderExtendFlightUpdate {
	oefu.mutation.Where(ps...)
	return oefu
}

// SetOrderID sets the "order_id" field.
func (oefu *OrderExtendFlightUpdate) SetOrderID(i int) *OrderExtendFlightUpdate {
	oefu.mutation.ResetOrderID()
	oefu.mutation.SetOrderID(i)
	return oefu
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (oefu *OrderExtendFlightUpdate) SetNillableOrderID(i *int) *OrderExtendFlightUpdate {
	if i != nil {
		oefu.SetOrderID(*i)
	}
	return oefu
}

// AddOrderID adds i to the "order_id" field.
func (oefu *OrderExtendFlightUpdate) AddOrderID(i int) *OrderExtendFlightUpdate {
	oefu.mutation.AddOrderID(i)
	return oefu
}

// SetFlightID sets the "flight_id" field.
func (oefu *OrderExtendFlightUpdate) SetFlightID(i int) *OrderExtendFlightUpdate {
	oefu.mutation.ResetFlightID()
	oefu.mutation.SetFlightID(i)
	return oefu
}

// SetNillableFlightID sets the "flight_id" field if the given value is not nil.
func (oefu *OrderExtendFlightUpdate) SetNillableFlightID(i *int) *OrderExtendFlightUpdate {
	if i != nil {
		oefu.SetFlightID(*i)
	}
	return oefu
}

// AddFlightID adds i to the "flight_id" field.
func (oefu *OrderExtendFlightUpdate) AddFlightID(i int) *OrderExtendFlightUpdate {
	oefu.mutation.AddFlightID(i)
	return oefu
}

// SetFlightNo sets the "flight_no" field.
func (oefu *OrderExtendFlightUpdate) SetFlightNo(s string) *OrderExtendFlightUpdate {
	oefu.mutation.SetFlightNo(s)
	return oefu
}

// SetNillableFlightNo sets the "flight_no" field if the given value is not nil.
func (oefu *OrderExtendFlightUpdate) SetNillableFlightNo(s *string) *OrderExtendFlightUpdate {
	if s != nil {
		oefu.SetFlightNo(*s)
	}
	return oefu
}

// SetRouteID sets the "route_id" field.
func (oefu *OrderExtendFlightUpdate) SetRouteID(i int) *OrderExtendFlightUpdate {
	oefu.mutation.ResetRouteID()
	oefu.mutation.SetRouteID(i)
	return oefu
}

// SetNillableRouteID sets the "route_id" field if the given value is not nil.
func (oefu *OrderExtendFlightUpdate) SetNillableRouteID(i *int) *OrderExtendFlightUpdate {
	if i != nil {
		oefu.SetRouteID(*i)
	}
	return oefu
}

// AddRouteID adds i to the "route_id" field.
func (oefu *OrderExtendFlightUpdate) AddRouteID(i int) *OrderExtendFlightUpdate {
	oefu.mutation.AddRouteID(i)
	return oefu
}

// SetRouteName sets the "route_name" field.
func (oefu *OrderExtendFlightUpdate) SetRouteName(s string) *OrderExtendFlightUpdate {
	oefu.mutation.SetRouteName(s)
	return oefu
}

// SetNillableRouteName sets the "route_name" field if the given value is not nil.
func (oefu *OrderExtendFlightUpdate) SetNillableRouteName(s *string) *OrderExtendFlightUpdate {
	if s != nil {
		oefu.SetRouteName(*s)
	}
	return oefu
}

// SetStartStopID sets the "start_stop_id" field.
func (oefu *OrderExtendFlightUpdate) SetStartStopID(i int) *OrderExtendFlightUpdate {
	oefu.mutation.ResetStartStopID()
	oefu.mutation.SetStartStopID(i)
	return oefu
}

// SetNillableStartStopID sets the "start_stop_id" field if the given value is not nil.
func (oefu *OrderExtendFlightUpdate) SetNillableStartStopID(i *int) *OrderExtendFlightUpdate {
	if i != nil {
		oefu.SetStartStopID(*i)
	}
	return oefu
}

// AddStartStopID adds i to the "start_stop_id" field.
func (oefu *OrderExtendFlightUpdate) AddStartStopID(i int) *OrderExtendFlightUpdate {
	oefu.mutation.AddStartStopID(i)
	return oefu
}

// SetStartStopIndex sets the "start_stop_index" field.
func (oefu *OrderExtendFlightUpdate) SetStartStopIndex(i int) *OrderExtendFlightUpdate {
	oefu.mutation.ResetStartStopIndex()
	oefu.mutation.SetStartStopIndex(i)
	return oefu
}

// SetNillableStartStopIndex sets the "start_stop_index" field if the given value is not nil.
func (oefu *OrderExtendFlightUpdate) SetNillableStartStopIndex(i *int) *OrderExtendFlightUpdate {
	if i != nil {
		oefu.SetStartStopIndex(*i)
	}
	return oefu
}

// AddStartStopIndex adds i to the "start_stop_index" field.
func (oefu *OrderExtendFlightUpdate) AddStartStopIndex(i int) *OrderExtendFlightUpdate {
	oefu.mutation.AddStartStopIndex(i)
	return oefu
}

// SetEndStopID sets the "end_stop_id" field.
func (oefu *OrderExtendFlightUpdate) SetEndStopID(i int) *OrderExtendFlightUpdate {
	oefu.mutation.ResetEndStopID()
	oefu.mutation.SetEndStopID(i)
	return oefu
}

// SetNillableEndStopID sets the "end_stop_id" field if the given value is not nil.
func (oefu *OrderExtendFlightUpdate) SetNillableEndStopID(i *int) *OrderExtendFlightUpdate {
	if i != nil {
		oefu.SetEndStopID(*i)
	}
	return oefu
}

// AddEndStopID adds i to the "end_stop_id" field.
func (oefu *OrderExtendFlightUpdate) AddEndStopID(i int) *OrderExtendFlightUpdate {
	oefu.mutation.AddEndStopID(i)
	return oefu
}

// SetEndStopIndex sets the "end_stop_index" field.
func (oefu *OrderExtendFlightUpdate) SetEndStopIndex(i int) *OrderExtendFlightUpdate {
	oefu.mutation.ResetEndStopIndex()
	oefu.mutation.SetEndStopIndex(i)
	return oefu
}

// SetNillableEndStopIndex sets the "end_stop_index" field if the given value is not nil.
func (oefu *OrderExtendFlightUpdate) SetNillableEndStopIndex(i *int) *OrderExtendFlightUpdate {
	if i != nil {
		oefu.SetEndStopIndex(*i)
	}
	return oefu
}

// AddEndStopIndex adds i to the "end_stop_index" field.
func (oefu *OrderExtendFlightUpdate) AddEndStopIndex(i int) *OrderExtendFlightUpdate {
	oefu.mutation.AddEndStopIndex(i)
	return oefu
}

// SetTicketCount sets the "ticket_count" field.
func (oefu *OrderExtendFlightUpdate) SetTicketCount(i int) *OrderExtendFlightUpdate {
	oefu.mutation.ResetTicketCount()
	oefu.mutation.SetTicketCount(i)
	return oefu
}

// SetNillableTicketCount sets the "ticket_count" field if the given value is not nil.
func (oefu *OrderExtendFlightUpdate) SetNillableTicketCount(i *int) *OrderExtendFlightUpdate {
	if i != nil {
		oefu.SetTicketCount(*i)
	}
	return oefu
}

// AddTicketCount adds i to the "ticket_count" field.
func (oefu *OrderExtendFlightUpdate) AddTicketCount(i int) *OrderExtendFlightUpdate {
	oefu.mutation.AddTicketCount(i)
	return oefu
}

// SetUpdateTime sets the "update_time" field.
func (oefu *OrderExtendFlightUpdate) SetUpdateTime(t time.Time) *OrderExtendFlightUpdate {
	oefu.mutation.SetUpdateTime(t)
	return oefu
}

// Mutation returns the OrderExtendFlightMutation object of the builder.
func (oefu *OrderExtendFlightUpdate) Mutation() *OrderExtendFlightMutation {
	return oefu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oefu *OrderExtendFlightUpdate) Save(ctx context.Context) (int, error) {
	oefu.defaults()
	return withHooks(ctx, oefu.sqlSave, oefu.mutation, oefu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oefu *OrderExtendFlightUpdate) SaveX(ctx context.Context) int {
	affected, err := oefu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oefu *OrderExtendFlightUpdate) Exec(ctx context.Context) error {
	_, err := oefu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oefu *OrderExtendFlightUpdate) ExecX(ctx context.Context) {
	if err := oefu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oefu *OrderExtendFlightUpdate) defaults() {
	if _, ok := oefu.mutation.UpdateTime(); !ok {
		v := orderextendflight.UpdateDefaultUpdateTime()
		oefu.mutation.SetUpdateTime(v)
	}
}

func (oefu *OrderExtendFlightUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(orderextendflight.Table, orderextendflight.Columns, sqlgraph.NewFieldSpec(orderextendflight.FieldID, field.TypeInt))
	if ps := oefu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oefu.mutation.OrderID(); ok {
		_spec.SetField(orderextendflight.FieldOrderID, field.TypeInt, value)
	}
	if value, ok := oefu.mutation.AddedOrderID(); ok {
		_spec.AddField(orderextendflight.FieldOrderID, field.TypeInt, value)
	}
	if value, ok := oefu.mutation.FlightID(); ok {
		_spec.SetField(orderextendflight.FieldFlightID, field.TypeInt, value)
	}
	if value, ok := oefu.mutation.AddedFlightID(); ok {
		_spec.AddField(orderextendflight.FieldFlightID, field.TypeInt, value)
	}
	if value, ok := oefu.mutation.FlightNo(); ok {
		_spec.SetField(orderextendflight.FieldFlightNo, field.TypeString, value)
	}
	if value, ok := oefu.mutation.RouteID(); ok {
		_spec.SetField(orderextendflight.FieldRouteID, field.TypeInt, value)
	}
	if value, ok := oefu.mutation.AddedRouteID(); ok {
		_spec.AddField(orderextendflight.FieldRouteID, field.TypeInt, value)
	}
	if value, ok := oefu.mutation.RouteName(); ok {
		_spec.SetField(orderextendflight.FieldRouteName, field.TypeString, value)
	}
	if value, ok := oefu.mutation.StartStopID(); ok {
		_spec.SetField(orderextendflight.FieldStartStopID, field.TypeInt, value)
	}
	if value, ok := oefu.mutation.AddedStartStopID(); ok {
		_spec.AddField(orderextendflight.FieldStartStopID, field.TypeInt, value)
	}
	if value, ok := oefu.mutation.StartStopIndex(); ok {
		_spec.SetField(orderextendflight.FieldStartStopIndex, field.TypeInt, value)
	}
	if value, ok := oefu.mutation.AddedStartStopIndex(); ok {
		_spec.AddField(orderextendflight.FieldStartStopIndex, field.TypeInt, value)
	}
	if value, ok := oefu.mutation.EndStopID(); ok {
		_spec.SetField(orderextendflight.FieldEndStopID, field.TypeInt, value)
	}
	if value, ok := oefu.mutation.AddedEndStopID(); ok {
		_spec.AddField(orderextendflight.FieldEndStopID, field.TypeInt, value)
	}
	if value, ok := oefu.mutation.EndStopIndex(); ok {
		_spec.SetField(orderextendflight.FieldEndStopIndex, field.TypeInt, value)
	}
	if value, ok := oefu.mutation.AddedEndStopIndex(); ok {
		_spec.AddField(orderextendflight.FieldEndStopIndex, field.TypeInt, value)
	}
	if value, ok := oefu.mutation.TicketCount(); ok {
		_spec.SetField(orderextendflight.FieldTicketCount, field.TypeInt, value)
	}
	if value, ok := oefu.mutation.AddedTicketCount(); ok {
		_spec.AddField(orderextendflight.FieldTicketCount, field.TypeInt, value)
	}
	if value, ok := oefu.mutation.UpdateTime(); ok {
		_spec.SetField(orderextendflight.FieldUpdateTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, oefu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderextendflight.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	oefu.mutation.done = true
	return n, nil
}

// OrderExtendFlightUpdateOne is the builder for updating a single OrderExtendFlight entity.
type OrderExtendFlightUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderExtendFlightMutation
}

// SetOrderID sets the "order_id" field.
func (oefuo *OrderExtendFlightUpdateOne) SetOrderID(i int) *OrderExtendFlightUpdateOne {
	oefuo.mutation.ResetOrderID()
	oefuo.mutation.SetOrderID(i)
	return oefuo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (oefuo *OrderExtendFlightUpdateOne) SetNillableOrderID(i *int) *OrderExtendFlightUpdateOne {
	if i != nil {
		oefuo.SetOrderID(*i)
	}
	return oefuo
}

// AddOrderID adds i to the "order_id" field.
func (oefuo *OrderExtendFlightUpdateOne) AddOrderID(i int) *OrderExtendFlightUpdateOne {
	oefuo.mutation.AddOrderID(i)
	return oefuo
}

// SetFlightID sets the "flight_id" field.
func (oefuo *OrderExtendFlightUpdateOne) SetFlightID(i int) *OrderExtendFlightUpdateOne {
	oefuo.mutation.ResetFlightID()
	oefuo.mutation.SetFlightID(i)
	return oefuo
}

// SetNillableFlightID sets the "flight_id" field if the given value is not nil.
func (oefuo *OrderExtendFlightUpdateOne) SetNillableFlightID(i *int) *OrderExtendFlightUpdateOne {
	if i != nil {
		oefuo.SetFlightID(*i)
	}
	return oefuo
}

// AddFlightID adds i to the "flight_id" field.
func (oefuo *OrderExtendFlightUpdateOne) AddFlightID(i int) *OrderExtendFlightUpdateOne {
	oefuo.mutation.AddFlightID(i)
	return oefuo
}

// SetFlightNo sets the "flight_no" field.
func (oefuo *OrderExtendFlightUpdateOne) SetFlightNo(s string) *OrderExtendFlightUpdateOne {
	oefuo.mutation.SetFlightNo(s)
	return oefuo
}

// SetNillableFlightNo sets the "flight_no" field if the given value is not nil.
func (oefuo *OrderExtendFlightUpdateOne) SetNillableFlightNo(s *string) *OrderExtendFlightUpdateOne {
	if s != nil {
		oefuo.SetFlightNo(*s)
	}
	return oefuo
}

// SetRouteID sets the "route_id" field.
func (oefuo *OrderExtendFlightUpdateOne) SetRouteID(i int) *OrderExtendFlightUpdateOne {
	oefuo.mutation.ResetRouteID()
	oefuo.mutation.SetRouteID(i)
	return oefuo
}

// SetNillableRouteID sets the "route_id" field if the given value is not nil.
func (oefuo *OrderExtendFlightUpdateOne) SetNillableRouteID(i *int) *OrderExtendFlightUpdateOne {
	if i != nil {
		oefuo.SetRouteID(*i)
	}
	return oefuo
}

// AddRouteID adds i to the "route_id" field.
func (oefuo *OrderExtendFlightUpdateOne) AddRouteID(i int) *OrderExtendFlightUpdateOne {
	oefuo.mutation.AddRouteID(i)
	return oefuo
}

// SetRouteName sets the "route_name" field.
func (oefuo *OrderExtendFlightUpdateOne) SetRouteName(s string) *OrderExtendFlightUpdateOne {
	oefuo.mutation.SetRouteName(s)
	return oefuo
}

// SetNillableRouteName sets the "route_name" field if the given value is not nil.
func (oefuo *OrderExtendFlightUpdateOne) SetNillableRouteName(s *string) *OrderExtendFlightUpdateOne {
	if s != nil {
		oefuo.SetRouteName(*s)
	}
	return oefuo
}

// SetStartStopID sets the "start_stop_id" field.
func (oefuo *OrderExtendFlightUpdateOne) SetStartStopID(i int) *OrderExtendFlightUpdateOne {
	oefuo.mutation.ResetStartStopID()
	oefuo.mutation.SetStartStopID(i)
	return oefuo
}

// SetNillableStartStopID sets the "start_stop_id" field if the given value is not nil.
func (oefuo *OrderExtendFlightUpdateOne) SetNillableStartStopID(i *int) *OrderExtendFlightUpdateOne {
	if i != nil {
		oefuo.SetStartStopID(*i)
	}
	return oefuo
}

// AddStartStopID adds i to the "start_stop_id" field.
func (oefuo *OrderExtendFlightUpdateOne) AddStartStopID(i int) *OrderExtendFlightUpdateOne {
	oefuo.mutation.AddStartStopID(i)
	return oefuo
}

// SetStartStopIndex sets the "start_stop_index" field.
func (oefuo *OrderExtendFlightUpdateOne) SetStartStopIndex(i int) *OrderExtendFlightUpdateOne {
	oefuo.mutation.ResetStartStopIndex()
	oefuo.mutation.SetStartStopIndex(i)
	return oefuo
}

// SetNillableStartStopIndex sets the "start_stop_index" field if the given value is not nil.
func (oefuo *OrderExtendFlightUpdateOne) SetNillableStartStopIndex(i *int) *OrderExtendFlightUpdateOne {
	if i != nil {
		oefuo.SetStartStopIndex(*i)
	}
	return oefuo
}

// AddStartStopIndex adds i to the "start_stop_index" field.
func (oefuo *OrderExtendFlightUpdateOne) AddStartStopIndex(i int) *OrderExtendFlightUpdateOne {
	oefuo.mutation.AddStartStopIndex(i)
	return oefuo
}

// SetEndStopID sets the "end_stop_id" field.
func (oefuo *OrderExtendFlightUpdateOne) SetEndStopID(i int) *OrderExtendFlightUpdateOne {
	oefuo.mutation.ResetEndStopID()
	oefuo.mutation.SetEndStopID(i)
	return oefuo
}

// SetNillableEndStopID sets the "end_stop_id" field if the given value is not nil.
func (oefuo *OrderExtendFlightUpdateOne) SetNillableEndStopID(i *int) *OrderExtendFlightUpdateOne {
	if i != nil {
		oefuo.SetEndStopID(*i)
	}
	return oefuo
}

// AddEndStopID adds i to the "end_stop_id" field.
func (oefuo *OrderExtendFlightUpdateOne) AddEndStopID(i int) *OrderExtendFlightUpdateOne {
	oefuo.mutation.AddEndStopID(i)
	return oefuo
}

// SetEndStopIndex sets the "end_stop_index" field.
func (oefuo *OrderExtendFlightUpdateOne) SetEndStopIndex(i int) *OrderExtendFlightUpdateOne {
	oefuo.mutation.ResetEndStopIndex()
	oefuo.mutation.SetEndStopIndex(i)
	return oefuo
}

// SetNillableEndStopIndex sets the "end_stop_index" field if the given value is not nil.
func (oefuo *OrderExtendFlightUpdateOne) SetNillableEndStopIndex(i *int) *OrderExtendFlightUpdateOne {
	if i != nil {
		oefuo.SetEndStopIndex(*i)
	}
	return oefuo
}

// AddEndStopIndex adds i to the "end_stop_index" field.
func (oefuo *OrderExtendFlightUpdateOne) AddEndStopIndex(i int) *OrderExtendFlightUpdateOne {
	oefuo.mutation.AddEndStopIndex(i)
	return oefuo
}

// SetTicketCount sets the "ticket_count" field.
func (oefuo *OrderExtendFlightUpdateOne) SetTicketCount(i int) *OrderExtendFlightUpdateOne {
	oefuo.mutation.ResetTicketCount()
	oefuo.mutation.SetTicketCount(i)
	return oefuo
}

// SetNillableTicketCount sets the "ticket_count" field if the given value is not nil.
func (oefuo *OrderExtendFlightUpdateOne) SetNillableTicketCount(i *int) *OrderExtendFlightUpdateOne {
	if i != nil {
		oefuo.SetTicketCount(*i)
	}
	return oefuo
}

// AddTicketCount adds i to the "ticket_count" field.
func (oefuo *OrderExtendFlightUpdateOne) AddTicketCount(i int) *OrderExtendFlightUpdateOne {
	oefuo.mutation.AddTicketCount(i)
	return oefuo
}

// SetUpdateTime sets the "update_time" field.
func (oefuo *OrderExtendFlightUpdateOne) SetUpdateTime(t time.Time) *OrderExtendFlightUpdateOne {
	oefuo.mutation.SetUpdateTime(t)
	return oefuo
}

// Mutation returns the OrderExtendFlightMutation object of the builder.
func (oefuo *OrderExtendFlightUpdateOne) Mutation() *OrderExtendFlightMutation {
	return oefuo.mutation
}

// Where appends a list predicates to the OrderExtendFlightUpdate builder.
func (oefuo *OrderExtendFlightUpdateOne) Where(ps ...predicate.OrderExtendFlight) *OrderExtendFlightUpdateOne {
	oefuo.mutation.Where(ps...)
	return oefuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oefuo *OrderExtendFlightUpdateOne) Select(field string, fields ...string) *OrderExtendFlightUpdateOne {
	oefuo.fields = append([]string{field}, fields...)
	return oefuo
}

// Save executes the query and returns the updated OrderExtendFlight entity.
func (oefuo *OrderExtendFlightUpdateOne) Save(ctx context.Context) (*OrderExtendFlight, error) {
	oefuo.defaults()
	return withHooks(ctx, oefuo.sqlSave, oefuo.mutation, oefuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oefuo *OrderExtendFlightUpdateOne) SaveX(ctx context.Context) *OrderExtendFlight {
	node, err := oefuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oefuo *OrderExtendFlightUpdateOne) Exec(ctx context.Context) error {
	_, err := oefuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oefuo *OrderExtendFlightUpdateOne) ExecX(ctx context.Context) {
	if err := oefuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oefuo *OrderExtendFlightUpdateOne) defaults() {
	if _, ok := oefuo.mutation.UpdateTime(); !ok {
		v := orderextendflight.UpdateDefaultUpdateTime()
		oefuo.mutation.SetUpdateTime(v)
	}
}

func (oefuo *OrderExtendFlightUpdateOne) sqlSave(ctx context.Context) (_node *OrderExtendFlight, err error) {
	_spec := sqlgraph.NewUpdateSpec(orderextendflight.Table, orderextendflight.Columns, sqlgraph.NewFieldSpec(orderextendflight.FieldID, field.TypeInt))
	id, ok := oefuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrderExtendFlight.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oefuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderextendflight.FieldID)
		for _, f := range fields {
			if !orderextendflight.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orderextendflight.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oefuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oefuo.mutation.OrderID(); ok {
		_spec.SetField(orderextendflight.FieldOrderID, field.TypeInt, value)
	}
	if value, ok := oefuo.mutation.AddedOrderID(); ok {
		_spec.AddField(orderextendflight.FieldOrderID, field.TypeInt, value)
	}
	if value, ok := oefuo.mutation.FlightID(); ok {
		_spec.SetField(orderextendflight.FieldFlightID, field.TypeInt, value)
	}
	if value, ok := oefuo.mutation.AddedFlightID(); ok {
		_spec.AddField(orderextendflight.FieldFlightID, field.TypeInt, value)
	}
	if value, ok := oefuo.mutation.FlightNo(); ok {
		_spec.SetField(orderextendflight.FieldFlightNo, field.TypeString, value)
	}
	if value, ok := oefuo.mutation.RouteID(); ok {
		_spec.SetField(orderextendflight.FieldRouteID, field.TypeInt, value)
	}
	if value, ok := oefuo.mutation.AddedRouteID(); ok {
		_spec.AddField(orderextendflight.FieldRouteID, field.TypeInt, value)
	}
	if value, ok := oefuo.mutation.RouteName(); ok {
		_spec.SetField(orderextendflight.FieldRouteName, field.TypeString, value)
	}
	if value, ok := oefuo.mutation.StartStopID(); ok {
		_spec.SetField(orderextendflight.FieldStartStopID, field.TypeInt, value)
	}
	if value, ok := oefuo.mutation.AddedStartStopID(); ok {
		_spec.AddField(orderextendflight.FieldStartStopID, field.TypeInt, value)
	}
	if value, ok := oefuo.mutation.StartStopIndex(); ok {
		_spec.SetField(orderextendflight.FieldStartStopIndex, field.TypeInt, value)
	}
	if value, ok := oefuo.mutation.AddedStartStopIndex(); ok {
		_spec.AddField(orderextendflight.FieldStartStopIndex, field.TypeInt, value)
	}
	if value, ok := oefuo.mutation.EndStopID(); ok {
		_spec.SetField(orderextendflight.FieldEndStopID, field.TypeInt, value)
	}
	if value, ok := oefuo.mutation.AddedEndStopID(); ok {
		_spec.AddField(orderextendflight.FieldEndStopID, field.TypeInt, value)
	}
	if value, ok := oefuo.mutation.EndStopIndex(); ok {
		_spec.SetField(orderextendflight.FieldEndStopIndex, field.TypeInt, value)
	}
	if value, ok := oefuo.mutation.AddedEndStopIndex(); ok {
		_spec.AddField(orderextendflight.FieldEndStopIndex, field.TypeInt, value)
	}
	if value, ok := oefuo.mutation.TicketCount(); ok {
		_spec.SetField(orderextendflight.FieldTicketCount, field.TypeInt, value)
	}
	if value, ok := oefuo.mutation.AddedTicketCount(); ok {
		_spec.AddField(orderextendflight.FieldTicketCount, field.TypeInt, value)
	}
	if value, ok := oefuo.mutation.UpdateTime(); ok {
		_spec.SetField(orderextendflight.FieldUpdateTime, field.TypeTime, value)
	}
	_node = &OrderExtendFlight{config: oefuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oefuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderextendflight.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oefuo.mutation.done = true
	return _node, nil
}
