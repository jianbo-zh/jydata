// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jianbo-zh/jydata/database/ent/operationuser"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
)

// OperationUserUpdate is the builder for updating OperationUser entities.
type OperationUserUpdate struct {
	config
	hooks    []Hook
	mutation *OperationUserMutation
}

// Where appends a list predicates to the OperationUserUpdate builder.
func (ouu *OperationUserUpdate) Where(ps ...predicate.OperationUser) *OperationUserUpdate {
	ouu.mutation.Where(ps...)
	return ouu
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (ouu *OperationUserUpdate) SetScenicAreaID(i int) *OperationUserUpdate {
	ouu.mutation.ResetScenicAreaID()
	ouu.mutation.SetScenicAreaID(i)
	return ouu
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (ouu *OperationUserUpdate) SetNillableScenicAreaID(i *int) *OperationUserUpdate {
	if i != nil {
		ouu.SetScenicAreaID(*i)
	}
	return ouu
}

// AddScenicAreaID adds i to the "scenic_area_id" field.
func (ouu *OperationUserUpdate) AddScenicAreaID(i int) *OperationUserUpdate {
	ouu.mutation.AddScenicAreaID(i)
	return ouu
}

// SetUsername sets the "username" field.
func (ouu *OperationUserUpdate) SetUsername(s string) *OperationUserUpdate {
	ouu.mutation.SetUsername(s)
	return ouu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (ouu *OperationUserUpdate) SetNillableUsername(s *string) *OperationUserUpdate {
	if s != nil {
		ouu.SetUsername(*s)
	}
	return ouu
}

// SetNickname sets the "nickname" field.
func (ouu *OperationUserUpdate) SetNickname(s string) *OperationUserUpdate {
	ouu.mutation.SetNickname(s)
	return ouu
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (ouu *OperationUserUpdate) SetNillableNickname(s *string) *OperationUserUpdate {
	if s != nil {
		ouu.SetNickname(*s)
	}
	return ouu
}

// SetPhone sets the "phone" field.
func (ouu *OperationUserUpdate) SetPhone(s string) *OperationUserUpdate {
	ouu.mutation.SetPhone(s)
	return ouu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (ouu *OperationUserUpdate) SetNillablePhone(s *string) *OperationUserUpdate {
	if s != nil {
		ouu.SetPhone(*s)
	}
	return ouu
}

// SetPassword sets the "password" field.
func (ouu *OperationUserUpdate) SetPassword(s string) *OperationUserUpdate {
	ouu.mutation.SetPassword(s)
	return ouu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (ouu *OperationUserUpdate) SetNillablePassword(s *string) *OperationUserUpdate {
	if s != nil {
		ouu.SetPassword(*s)
	}
	return ouu
}

// SetOpenID sets the "open_id" field.
func (ouu *OperationUserUpdate) SetOpenID(s string) *OperationUserUpdate {
	ouu.mutation.SetOpenID(s)
	return ouu
}

// SetNillableOpenID sets the "open_id" field if the given value is not nil.
func (ouu *OperationUserUpdate) SetNillableOpenID(s *string) *OperationUserUpdate {
	if s != nil {
		ouu.SetOpenID(*s)
	}
	return ouu
}

// SetAvatarURL sets the "avatar_url" field.
func (ouu *OperationUserUpdate) SetAvatarURL(s string) *OperationUserUpdate {
	ouu.mutation.SetAvatarURL(s)
	return ouu
}

// SetNillableAvatarURL sets the "avatar_url" field if the given value is not nil.
func (ouu *OperationUserUpdate) SetNillableAvatarURL(s *string) *OperationUserUpdate {
	if s != nil {
		ouu.SetAvatarURL(*s)
	}
	return ouu
}

// SetStatus sets the "status" field.
func (ouu *OperationUserUpdate) SetStatus(i int) *OperationUserUpdate {
	ouu.mutation.ResetStatus()
	ouu.mutation.SetStatus(i)
	return ouu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ouu *OperationUserUpdate) SetNillableStatus(i *int) *OperationUserUpdate {
	if i != nil {
		ouu.SetStatus(*i)
	}
	return ouu
}

// AddStatus adds i to the "status" field.
func (ouu *OperationUserUpdate) AddStatus(i int) *OperationUserUpdate {
	ouu.mutation.AddStatus(i)
	return ouu
}

// SetUpdateTime sets the "update_time" field.
func (ouu *OperationUserUpdate) SetUpdateTime(t time.Time) *OperationUserUpdate {
	ouu.mutation.SetUpdateTime(t)
	return ouu
}

// Mutation returns the OperationUserMutation object of the builder.
func (ouu *OperationUserUpdate) Mutation() *OperationUserMutation {
	return ouu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ouu *OperationUserUpdate) Save(ctx context.Context) (int, error) {
	ouu.defaults()
	return withHooks(ctx, ouu.sqlSave, ouu.mutation, ouu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouu *OperationUserUpdate) SaveX(ctx context.Context) int {
	affected, err := ouu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ouu *OperationUserUpdate) Exec(ctx context.Context) error {
	_, err := ouu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouu *OperationUserUpdate) ExecX(ctx context.Context) {
	if err := ouu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouu *OperationUserUpdate) defaults() {
	if _, ok := ouu.mutation.UpdateTime(); !ok {
		v := operationuser.UpdateDefaultUpdateTime()
		ouu.mutation.SetUpdateTime(v)
	}
}

func (ouu *OperationUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(operationuser.Table, operationuser.Columns, sqlgraph.NewFieldSpec(operationuser.FieldID, field.TypeInt))
	if ps := ouu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouu.mutation.ScenicAreaID(); ok {
		_spec.SetField(operationuser.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := ouu.mutation.AddedScenicAreaID(); ok {
		_spec.AddField(operationuser.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := ouu.mutation.Username(); ok {
		_spec.SetField(operationuser.FieldUsername, field.TypeString, value)
	}
	if value, ok := ouu.mutation.Nickname(); ok {
		_spec.SetField(operationuser.FieldNickname, field.TypeString, value)
	}
	if value, ok := ouu.mutation.Phone(); ok {
		_spec.SetField(operationuser.FieldPhone, field.TypeString, value)
	}
	if value, ok := ouu.mutation.Password(); ok {
		_spec.SetField(operationuser.FieldPassword, field.TypeString, value)
	}
	if value, ok := ouu.mutation.OpenID(); ok {
		_spec.SetField(operationuser.FieldOpenID, field.TypeString, value)
	}
	if value, ok := ouu.mutation.AvatarURL(); ok {
		_spec.SetField(operationuser.FieldAvatarURL, field.TypeString, value)
	}
	if value, ok := ouu.mutation.Status(); ok {
		_spec.SetField(operationuser.FieldStatus, field.TypeInt, value)
	}
	if value, ok := ouu.mutation.AddedStatus(); ok {
		_spec.AddField(operationuser.FieldStatus, field.TypeInt, value)
	}
	if value, ok := ouu.mutation.UpdateTime(); ok {
		_spec.SetField(operationuser.FieldUpdateTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ouu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{operationuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ouu.mutation.done = true
	return n, nil
}

// OperationUserUpdateOne is the builder for updating a single OperationUser entity.
type OperationUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OperationUserMutation
}

// SetScenicAreaID sets the "scenic_area_id" field.
func (ouuo *OperationUserUpdateOne) SetScenicAreaID(i int) *OperationUserUpdateOne {
	ouuo.mutation.ResetScenicAreaID()
	ouuo.mutation.SetScenicAreaID(i)
	return ouuo
}

// SetNillableScenicAreaID sets the "scenic_area_id" field if the given value is not nil.
func (ouuo *OperationUserUpdateOne) SetNillableScenicAreaID(i *int) *OperationUserUpdateOne {
	if i != nil {
		ouuo.SetScenicAreaID(*i)
	}
	return ouuo
}

// AddScenicAreaID adds i to the "scenic_area_id" field.
func (ouuo *OperationUserUpdateOne) AddScenicAreaID(i int) *OperationUserUpdateOne {
	ouuo.mutation.AddScenicAreaID(i)
	return ouuo
}

// SetUsername sets the "username" field.
func (ouuo *OperationUserUpdateOne) SetUsername(s string) *OperationUserUpdateOne {
	ouuo.mutation.SetUsername(s)
	return ouuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (ouuo *OperationUserUpdateOne) SetNillableUsername(s *string) *OperationUserUpdateOne {
	if s != nil {
		ouuo.SetUsername(*s)
	}
	return ouuo
}

// SetNickname sets the "nickname" field.
func (ouuo *OperationUserUpdateOne) SetNickname(s string) *OperationUserUpdateOne {
	ouuo.mutation.SetNickname(s)
	return ouuo
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (ouuo *OperationUserUpdateOne) SetNillableNickname(s *string) *OperationUserUpdateOne {
	if s != nil {
		ouuo.SetNickname(*s)
	}
	return ouuo
}

// SetPhone sets the "phone" field.
func (ouuo *OperationUserUpdateOne) SetPhone(s string) *OperationUserUpdateOne {
	ouuo.mutation.SetPhone(s)
	return ouuo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (ouuo *OperationUserUpdateOne) SetNillablePhone(s *string) *OperationUserUpdateOne {
	if s != nil {
		ouuo.SetPhone(*s)
	}
	return ouuo
}

// SetPassword sets the "password" field.
func (ouuo *OperationUserUpdateOne) SetPassword(s string) *OperationUserUpdateOne {
	ouuo.mutation.SetPassword(s)
	return ouuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (ouuo *OperationUserUpdateOne) SetNillablePassword(s *string) *OperationUserUpdateOne {
	if s != nil {
		ouuo.SetPassword(*s)
	}
	return ouuo
}

// SetOpenID sets the "open_id" field.
func (ouuo *OperationUserUpdateOne) SetOpenID(s string) *OperationUserUpdateOne {
	ouuo.mutation.SetOpenID(s)
	return ouuo
}

// SetNillableOpenID sets the "open_id" field if the given value is not nil.
func (ouuo *OperationUserUpdateOne) SetNillableOpenID(s *string) *OperationUserUpdateOne {
	if s != nil {
		ouuo.SetOpenID(*s)
	}
	return ouuo
}

// SetAvatarURL sets the "avatar_url" field.
func (ouuo *OperationUserUpdateOne) SetAvatarURL(s string) *OperationUserUpdateOne {
	ouuo.mutation.SetAvatarURL(s)
	return ouuo
}

// SetNillableAvatarURL sets the "avatar_url" field if the given value is not nil.
func (ouuo *OperationUserUpdateOne) SetNillableAvatarURL(s *string) *OperationUserUpdateOne {
	if s != nil {
		ouuo.SetAvatarURL(*s)
	}
	return ouuo
}

// SetStatus sets the "status" field.
func (ouuo *OperationUserUpdateOne) SetStatus(i int) *OperationUserUpdateOne {
	ouuo.mutation.ResetStatus()
	ouuo.mutation.SetStatus(i)
	return ouuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ouuo *OperationUserUpdateOne) SetNillableStatus(i *int) *OperationUserUpdateOne {
	if i != nil {
		ouuo.SetStatus(*i)
	}
	return ouuo
}

// AddStatus adds i to the "status" field.
func (ouuo *OperationUserUpdateOne) AddStatus(i int) *OperationUserUpdateOne {
	ouuo.mutation.AddStatus(i)
	return ouuo
}

// SetUpdateTime sets the "update_time" field.
func (ouuo *OperationUserUpdateOne) SetUpdateTime(t time.Time) *OperationUserUpdateOne {
	ouuo.mutation.SetUpdateTime(t)
	return ouuo
}

// Mutation returns the OperationUserMutation object of the builder.
func (ouuo *OperationUserUpdateOne) Mutation() *OperationUserMutation {
	return ouuo.mutation
}

// Where appends a list predicates to the OperationUserUpdate builder.
func (ouuo *OperationUserUpdateOne) Where(ps ...predicate.OperationUser) *OperationUserUpdateOne {
	ouuo.mutation.Where(ps...)
	return ouuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouuo *OperationUserUpdateOne) Select(field string, fields ...string) *OperationUserUpdateOne {
	ouuo.fields = append([]string{field}, fields...)
	return ouuo
}

// Save executes the query and returns the updated OperationUser entity.
func (ouuo *OperationUserUpdateOne) Save(ctx context.Context) (*OperationUser, error) {
	ouuo.defaults()
	return withHooks(ctx, ouuo.sqlSave, ouuo.mutation, ouuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouuo *OperationUserUpdateOne) SaveX(ctx context.Context) *OperationUser {
	node, err := ouuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouuo *OperationUserUpdateOne) Exec(ctx context.Context) error {
	_, err := ouuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouuo *OperationUserUpdateOne) ExecX(ctx context.Context) {
	if err := ouuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouuo *OperationUserUpdateOne) defaults() {
	if _, ok := ouuo.mutation.UpdateTime(); !ok {
		v := operationuser.UpdateDefaultUpdateTime()
		ouuo.mutation.SetUpdateTime(v)
	}
}

func (ouuo *OperationUserUpdateOne) sqlSave(ctx context.Context) (_node *OperationUser, err error) {
	_spec := sqlgraph.NewUpdateSpec(operationuser.Table, operationuser.Columns, sqlgraph.NewFieldSpec(operationuser.FieldID, field.TypeInt))
	id, ok := ouuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OperationUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, operationuser.FieldID)
		for _, f := range fields {
			if !operationuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != operationuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouuo.mutation.ScenicAreaID(); ok {
		_spec.SetField(operationuser.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := ouuo.mutation.AddedScenicAreaID(); ok {
		_spec.AddField(operationuser.FieldScenicAreaID, field.TypeInt, value)
	}
	if value, ok := ouuo.mutation.Username(); ok {
		_spec.SetField(operationuser.FieldUsername, field.TypeString, value)
	}
	if value, ok := ouuo.mutation.Nickname(); ok {
		_spec.SetField(operationuser.FieldNickname, field.TypeString, value)
	}
	if value, ok := ouuo.mutation.Phone(); ok {
		_spec.SetField(operationuser.FieldPhone, field.TypeString, value)
	}
	if value, ok := ouuo.mutation.Password(); ok {
		_spec.SetField(operationuser.FieldPassword, field.TypeString, value)
	}
	if value, ok := ouuo.mutation.OpenID(); ok {
		_spec.SetField(operationuser.FieldOpenID, field.TypeString, value)
	}
	if value, ok := ouuo.mutation.AvatarURL(); ok {
		_spec.SetField(operationuser.FieldAvatarURL, field.TypeString, value)
	}
	if value, ok := ouuo.mutation.Status(); ok {
		_spec.SetField(operationuser.FieldStatus, field.TypeInt, value)
	}
	if value, ok := ouuo.mutation.AddedStatus(); ok {
		_spec.AddField(operationuser.FieldStatus, field.TypeInt, value)
	}
	if value, ok := ouuo.mutation.UpdateTime(); ok {
		_spec.SetField(operationuser.FieldUpdateTime, field.TypeTime, value)
	}
	_node = &OperationUser{config: ouuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{operationuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouuo.mutation.done = true
	return _node, nil
}
