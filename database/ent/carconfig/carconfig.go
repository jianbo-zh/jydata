// Code generated by ent, DO NOT EDIT.

package carconfig

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the carconfig type in the database.
	Label = "car_config"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldScenicAreaID holds the string denoting the scenic_area_id field in the database.
	FieldScenicAreaID = "scenic_area_id"
	// FieldModelID holds the string denoting the model_id field in the database.
	FieldModelID = "model_id"
	// FieldCarID holds the string denoting the car_id field in the database.
	FieldCarID = "car_id"
	// FieldCarVersion holds the string denoting the car_version field in the database.
	FieldCarVersion = "car_version"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldSavePath holds the string denoting the save_path field in the database.
	FieldSavePath = "save_path"
	// FieldContentType holds the string denoting the content_type field in the database.
	FieldContentType = "content_type"
	// FieldContentField holds the string denoting the content_field field in the database.
	FieldContentField = "content_field"
	// FieldContentFileID holds the string denoting the content_file_id field in the database.
	FieldContentFileID = "content_file_id"
	// FieldContentPbtext holds the string denoting the content_pbtext field in the database.
	FieldContentPbtext = "content_pbtext"
	// FieldContentSha1 holds the string denoting the content_sha1 field in the database.
	FieldContentSha1 = "content_sha1"
	// FieldResourceFileIds holds the string denoting the resource_file_ids field in the database.
	FieldResourceFileIds = "resource_file_ids"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// EdgeBackgroundScenicArea holds the string denoting the background_scenic_area edge name in mutations.
	EdgeBackgroundScenicArea = "background_scenic_area"
	// EdgeCarsModels holds the string denoting the cars_models edge name in mutations.
	EdgeCarsModels = "cars_models"
	// EdgeCar holds the string denoting the car edge name in mutations.
	EdgeCar = "car"
	// Table holds the table name of the carconfig in the database.
	Table = "car_configs"
	// BackgroundScenicAreaTable is the table that holds the background_scenic_area relation/edge.
	BackgroundScenicAreaTable = "car_configs"
	// BackgroundScenicAreaInverseTable is the table name for the ScenicArea entity.
	// It exists in this package in order to avoid circular dependency with the "scenicarea" package.
	BackgroundScenicAreaInverseTable = "scenic_areas"
	// BackgroundScenicAreaColumn is the table column denoting the background_scenic_area relation/edge.
	BackgroundScenicAreaColumn = "scenic_area_id"
	// CarsModelsTable is the table that holds the cars_models relation/edge.
	CarsModelsTable = "car_configs"
	// CarsModelsInverseTable is the table name for the CarsModels entity.
	// It exists in this package in order to avoid circular dependency with the "carsmodels" package.
	CarsModelsInverseTable = "cars_models"
	// CarsModelsColumn is the table column denoting the cars_models relation/edge.
	CarsModelsColumn = "model_id"
	// CarTable is the table that holds the car relation/edge.
	CarTable = "car_configs"
	// CarInverseTable is the table name for the Car entity.
	// It exists in this package in order to avoid circular dependency with the "car" package.
	CarInverseTable = "cars"
	// CarColumn is the table column denoting the car relation/edge.
	CarColumn = "car_id"
)

// Columns holds all SQL columns for carconfig fields.
var Columns = []string{
	FieldID,
	FieldScenicAreaID,
	FieldModelID,
	FieldCarID,
	FieldCarVersion,
	FieldName,
	FieldRemark,
	FieldVersion,
	FieldSavePath,
	FieldContentType,
	FieldContentField,
	FieldContentFileID,
	FieldContentPbtext,
	FieldContentSha1,
	FieldResourceFileIds,
	FieldCreateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCarVersion holds the default value on creation for the "car_version" field.
	DefaultCarVersion string
	// DefaultContentType holds the default value on creation for the "content_type" field.
	DefaultContentType int
	// DefaultContentField holds the default value on creation for the "content_field" field.
	DefaultContentField int
	// DefaultContentPbtext holds the default value on creation for the "content_pbtext" field.
	DefaultContentPbtext string
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
)

// OrderOption defines the ordering options for the CarConfig queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByScenicAreaID orders the results by the scenic_area_id field.
func ByScenicAreaID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScenicAreaID, opts...).ToFunc()
}

// ByModelID orders the results by the model_id field.
func ByModelID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModelID, opts...).ToFunc()
}

// ByCarID orders the results by the car_id field.
func ByCarID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCarID, opts...).ToFunc()
}

// ByCarVersion orders the results by the car_version field.
func ByCarVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCarVersion, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// BySavePath orders the results by the save_path field.
func BySavePath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSavePath, opts...).ToFunc()
}

// ByContentType orders the results by the content_type field.
func ByContentType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContentType, opts...).ToFunc()
}

// ByContentField orders the results by the content_field field.
func ByContentField(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContentField, opts...).ToFunc()
}

// ByContentFileID orders the results by the content_file_id field.
func ByContentFileID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContentFileID, opts...).ToFunc()
}

// ByContentPbtext orders the results by the content_pbtext field.
func ByContentPbtext(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContentPbtext, opts...).ToFunc()
}

// ByContentSha1 orders the results by the content_sha1 field.
func ByContentSha1(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContentSha1, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByBackgroundScenicAreaField orders the results by background_scenic_area field.
func ByBackgroundScenicAreaField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBackgroundScenicAreaStep(), sql.OrderByField(field, opts...))
	}
}

// ByCarsModelsField orders the results by cars_models field.
func ByCarsModelsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarsModelsStep(), sql.OrderByField(field, opts...))
	}
}

// ByCarField orders the results by car field.
func ByCarField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarStep(), sql.OrderByField(field, opts...))
	}
}
func newBackgroundScenicAreaStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BackgroundScenicAreaInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BackgroundScenicAreaTable, BackgroundScenicAreaColumn),
	)
}
func newCarsModelsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarsModelsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CarsModelsTable, CarsModelsColumn),
	)
}
func newCarStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CarTable, CarColumn),
	)
}
