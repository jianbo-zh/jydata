// Code generated by ent, DO NOT EDIT.

package carconfig

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/jianbo-zh/jydata/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldLTE(FieldID, id))
}

// ScenicAreaID applies equality check predicate on the "scenic_area_id" field. It's identical to ScenicAreaIDEQ.
func ScenicAreaID(v int) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldEQ(FieldScenicAreaID, v))
}

// ModelID applies equality check predicate on the "model_id" field. It's identical to ModelIDEQ.
func ModelID(v int) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldEQ(FieldModelID, v))
}

// CarID applies equality check predicate on the "car_id" field. It's identical to CarIDEQ.
func CarID(v int) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldEQ(FieldCarID, v))
}

// CarVersion applies equality check predicate on the "car_version" field. It's identical to CarVersionEQ.
func CarVersion(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldEQ(FieldCarVersion, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldEQ(FieldName, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldEQ(FieldRemark, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldEQ(FieldVersion, v))
}

// SavePath applies equality check predicate on the "save_path" field. It's identical to SavePathEQ.
func SavePath(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldEQ(FieldSavePath, v))
}

// ContentType applies equality check predicate on the "content_type" field. It's identical to ContentTypeEQ.
func ContentType(v int) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldEQ(FieldContentType, v))
}

// ContentField applies equality check predicate on the "content_field" field. It's identical to ContentFieldEQ.
func ContentField(v int) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldEQ(FieldContentField, v))
}

// ContentFileID applies equality check predicate on the "content_file_id" field. It's identical to ContentFileIDEQ.
func ContentFileID(v int) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldEQ(FieldContentFileID, v))
}

// ContentPbtext applies equality check predicate on the "content_pbtext" field. It's identical to ContentPbtextEQ.
func ContentPbtext(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldEQ(FieldContentPbtext, v))
}

// ContentSha1 applies equality check predicate on the "content_sha1" field. It's identical to ContentSha1EQ.
func ContentSha1(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldEQ(FieldContentSha1, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldEQ(FieldCreateTime, v))
}

// ScenicAreaIDEQ applies the EQ predicate on the "scenic_area_id" field.
func ScenicAreaIDEQ(v int) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldEQ(FieldScenicAreaID, v))
}

// ScenicAreaIDNEQ applies the NEQ predicate on the "scenic_area_id" field.
func ScenicAreaIDNEQ(v int) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldNEQ(FieldScenicAreaID, v))
}

// ScenicAreaIDIn applies the In predicate on the "scenic_area_id" field.
func ScenicAreaIDIn(vs ...int) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldIn(FieldScenicAreaID, vs...))
}

// ScenicAreaIDNotIn applies the NotIn predicate on the "scenic_area_id" field.
func ScenicAreaIDNotIn(vs ...int) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldNotIn(FieldScenicAreaID, vs...))
}

// ScenicAreaIDIsNil applies the IsNil predicate on the "scenic_area_id" field.
func ScenicAreaIDIsNil() predicate.CarConfig {
	return predicate.CarConfig(sql.FieldIsNull(FieldScenicAreaID))
}

// ScenicAreaIDNotNil applies the NotNil predicate on the "scenic_area_id" field.
func ScenicAreaIDNotNil() predicate.CarConfig {
	return predicate.CarConfig(sql.FieldNotNull(FieldScenicAreaID))
}

// ModelIDEQ applies the EQ predicate on the "model_id" field.
func ModelIDEQ(v int) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldEQ(FieldModelID, v))
}

// ModelIDNEQ applies the NEQ predicate on the "model_id" field.
func ModelIDNEQ(v int) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldNEQ(FieldModelID, v))
}

// ModelIDIn applies the In predicate on the "model_id" field.
func ModelIDIn(vs ...int) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldIn(FieldModelID, vs...))
}

// ModelIDNotIn applies the NotIn predicate on the "model_id" field.
func ModelIDNotIn(vs ...int) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldNotIn(FieldModelID, vs...))
}

// ModelIDIsNil applies the IsNil predicate on the "model_id" field.
func ModelIDIsNil() predicate.CarConfig {
	return predicate.CarConfig(sql.FieldIsNull(FieldModelID))
}

// ModelIDNotNil applies the NotNil predicate on the "model_id" field.
func ModelIDNotNil() predicate.CarConfig {
	return predicate.CarConfig(sql.FieldNotNull(FieldModelID))
}

// CarIDEQ applies the EQ predicate on the "car_id" field.
func CarIDEQ(v int) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldEQ(FieldCarID, v))
}

// CarIDNEQ applies the NEQ predicate on the "car_id" field.
func CarIDNEQ(v int) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldNEQ(FieldCarID, v))
}

// CarIDIn applies the In predicate on the "car_id" field.
func CarIDIn(vs ...int) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldIn(FieldCarID, vs...))
}

// CarIDNotIn applies the NotIn predicate on the "car_id" field.
func CarIDNotIn(vs ...int) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldNotIn(FieldCarID, vs...))
}

// CarIDIsNil applies the IsNil predicate on the "car_id" field.
func CarIDIsNil() predicate.CarConfig {
	return predicate.CarConfig(sql.FieldIsNull(FieldCarID))
}

// CarIDNotNil applies the NotNil predicate on the "car_id" field.
func CarIDNotNil() predicate.CarConfig {
	return predicate.CarConfig(sql.FieldNotNull(FieldCarID))
}

// CarVersionEQ applies the EQ predicate on the "car_version" field.
func CarVersionEQ(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldEQ(FieldCarVersion, v))
}

// CarVersionNEQ applies the NEQ predicate on the "car_version" field.
func CarVersionNEQ(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldNEQ(FieldCarVersion, v))
}

// CarVersionIn applies the In predicate on the "car_version" field.
func CarVersionIn(vs ...string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldIn(FieldCarVersion, vs...))
}

// CarVersionNotIn applies the NotIn predicate on the "car_version" field.
func CarVersionNotIn(vs ...string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldNotIn(FieldCarVersion, vs...))
}

// CarVersionGT applies the GT predicate on the "car_version" field.
func CarVersionGT(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldGT(FieldCarVersion, v))
}

// CarVersionGTE applies the GTE predicate on the "car_version" field.
func CarVersionGTE(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldGTE(FieldCarVersion, v))
}

// CarVersionLT applies the LT predicate on the "car_version" field.
func CarVersionLT(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldLT(FieldCarVersion, v))
}

// CarVersionLTE applies the LTE predicate on the "car_version" field.
func CarVersionLTE(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldLTE(FieldCarVersion, v))
}

// CarVersionContains applies the Contains predicate on the "car_version" field.
func CarVersionContains(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldContains(FieldCarVersion, v))
}

// CarVersionHasPrefix applies the HasPrefix predicate on the "car_version" field.
func CarVersionHasPrefix(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldHasPrefix(FieldCarVersion, v))
}

// CarVersionHasSuffix applies the HasSuffix predicate on the "car_version" field.
func CarVersionHasSuffix(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldHasSuffix(FieldCarVersion, v))
}

// CarVersionEqualFold applies the EqualFold predicate on the "car_version" field.
func CarVersionEqualFold(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldEqualFold(FieldCarVersion, v))
}

// CarVersionContainsFold applies the ContainsFold predicate on the "car_version" field.
func CarVersionContainsFold(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldContainsFold(FieldCarVersion, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldContainsFold(FieldName, v))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldContainsFold(FieldRemark, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldLTE(FieldVersion, v))
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldContains(FieldVersion, v))
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldHasPrefix(FieldVersion, v))
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldHasSuffix(FieldVersion, v))
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldEqualFold(FieldVersion, v))
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldContainsFold(FieldVersion, v))
}

// SavePathEQ applies the EQ predicate on the "save_path" field.
func SavePathEQ(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldEQ(FieldSavePath, v))
}

// SavePathNEQ applies the NEQ predicate on the "save_path" field.
func SavePathNEQ(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldNEQ(FieldSavePath, v))
}

// SavePathIn applies the In predicate on the "save_path" field.
func SavePathIn(vs ...string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldIn(FieldSavePath, vs...))
}

// SavePathNotIn applies the NotIn predicate on the "save_path" field.
func SavePathNotIn(vs ...string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldNotIn(FieldSavePath, vs...))
}

// SavePathGT applies the GT predicate on the "save_path" field.
func SavePathGT(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldGT(FieldSavePath, v))
}

// SavePathGTE applies the GTE predicate on the "save_path" field.
func SavePathGTE(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldGTE(FieldSavePath, v))
}

// SavePathLT applies the LT predicate on the "save_path" field.
func SavePathLT(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldLT(FieldSavePath, v))
}

// SavePathLTE applies the LTE predicate on the "save_path" field.
func SavePathLTE(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldLTE(FieldSavePath, v))
}

// SavePathContains applies the Contains predicate on the "save_path" field.
func SavePathContains(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldContains(FieldSavePath, v))
}

// SavePathHasPrefix applies the HasPrefix predicate on the "save_path" field.
func SavePathHasPrefix(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldHasPrefix(FieldSavePath, v))
}

// SavePathHasSuffix applies the HasSuffix predicate on the "save_path" field.
func SavePathHasSuffix(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldHasSuffix(FieldSavePath, v))
}

// SavePathEqualFold applies the EqualFold predicate on the "save_path" field.
func SavePathEqualFold(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldEqualFold(FieldSavePath, v))
}

// SavePathContainsFold applies the ContainsFold predicate on the "save_path" field.
func SavePathContainsFold(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldContainsFold(FieldSavePath, v))
}

// ContentTypeEQ applies the EQ predicate on the "content_type" field.
func ContentTypeEQ(v int) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldEQ(FieldContentType, v))
}

// ContentTypeNEQ applies the NEQ predicate on the "content_type" field.
func ContentTypeNEQ(v int) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldNEQ(FieldContentType, v))
}

// ContentTypeIn applies the In predicate on the "content_type" field.
func ContentTypeIn(vs ...int) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldIn(FieldContentType, vs...))
}

// ContentTypeNotIn applies the NotIn predicate on the "content_type" field.
func ContentTypeNotIn(vs ...int) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldNotIn(FieldContentType, vs...))
}

// ContentTypeGT applies the GT predicate on the "content_type" field.
func ContentTypeGT(v int) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldGT(FieldContentType, v))
}

// ContentTypeGTE applies the GTE predicate on the "content_type" field.
func ContentTypeGTE(v int) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldGTE(FieldContentType, v))
}

// ContentTypeLT applies the LT predicate on the "content_type" field.
func ContentTypeLT(v int) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldLT(FieldContentType, v))
}

// ContentTypeLTE applies the LTE predicate on the "content_type" field.
func ContentTypeLTE(v int) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldLTE(FieldContentType, v))
}

// ContentFieldEQ applies the EQ predicate on the "content_field" field.
func ContentFieldEQ(v int) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldEQ(FieldContentField, v))
}

// ContentFieldNEQ applies the NEQ predicate on the "content_field" field.
func ContentFieldNEQ(v int) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldNEQ(FieldContentField, v))
}

// ContentFieldIn applies the In predicate on the "content_field" field.
func ContentFieldIn(vs ...int) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldIn(FieldContentField, vs...))
}

// ContentFieldNotIn applies the NotIn predicate on the "content_field" field.
func ContentFieldNotIn(vs ...int) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldNotIn(FieldContentField, vs...))
}

// ContentFieldGT applies the GT predicate on the "content_field" field.
func ContentFieldGT(v int) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldGT(FieldContentField, v))
}

// ContentFieldGTE applies the GTE predicate on the "content_field" field.
func ContentFieldGTE(v int) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldGTE(FieldContentField, v))
}

// ContentFieldLT applies the LT predicate on the "content_field" field.
func ContentFieldLT(v int) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldLT(FieldContentField, v))
}

// ContentFieldLTE applies the LTE predicate on the "content_field" field.
func ContentFieldLTE(v int) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldLTE(FieldContentField, v))
}

// ContentFileIDEQ applies the EQ predicate on the "content_file_id" field.
func ContentFileIDEQ(v int) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldEQ(FieldContentFileID, v))
}

// ContentFileIDNEQ applies the NEQ predicate on the "content_file_id" field.
func ContentFileIDNEQ(v int) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldNEQ(FieldContentFileID, v))
}

// ContentFileIDIn applies the In predicate on the "content_file_id" field.
func ContentFileIDIn(vs ...int) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldIn(FieldContentFileID, vs...))
}

// ContentFileIDNotIn applies the NotIn predicate on the "content_file_id" field.
func ContentFileIDNotIn(vs ...int) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldNotIn(FieldContentFileID, vs...))
}

// ContentFileIDGT applies the GT predicate on the "content_file_id" field.
func ContentFileIDGT(v int) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldGT(FieldContentFileID, v))
}

// ContentFileIDGTE applies the GTE predicate on the "content_file_id" field.
func ContentFileIDGTE(v int) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldGTE(FieldContentFileID, v))
}

// ContentFileIDLT applies the LT predicate on the "content_file_id" field.
func ContentFileIDLT(v int) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldLT(FieldContentFileID, v))
}

// ContentFileIDLTE applies the LTE predicate on the "content_file_id" field.
func ContentFileIDLTE(v int) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldLTE(FieldContentFileID, v))
}

// ContentFileIDIsNil applies the IsNil predicate on the "content_file_id" field.
func ContentFileIDIsNil() predicate.CarConfig {
	return predicate.CarConfig(sql.FieldIsNull(FieldContentFileID))
}

// ContentFileIDNotNil applies the NotNil predicate on the "content_file_id" field.
func ContentFileIDNotNil() predicate.CarConfig {
	return predicate.CarConfig(sql.FieldNotNull(FieldContentFileID))
}

// ContentPbtextEQ applies the EQ predicate on the "content_pbtext" field.
func ContentPbtextEQ(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldEQ(FieldContentPbtext, v))
}

// ContentPbtextNEQ applies the NEQ predicate on the "content_pbtext" field.
func ContentPbtextNEQ(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldNEQ(FieldContentPbtext, v))
}

// ContentPbtextIn applies the In predicate on the "content_pbtext" field.
func ContentPbtextIn(vs ...string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldIn(FieldContentPbtext, vs...))
}

// ContentPbtextNotIn applies the NotIn predicate on the "content_pbtext" field.
func ContentPbtextNotIn(vs ...string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldNotIn(FieldContentPbtext, vs...))
}

// ContentPbtextGT applies the GT predicate on the "content_pbtext" field.
func ContentPbtextGT(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldGT(FieldContentPbtext, v))
}

// ContentPbtextGTE applies the GTE predicate on the "content_pbtext" field.
func ContentPbtextGTE(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldGTE(FieldContentPbtext, v))
}

// ContentPbtextLT applies the LT predicate on the "content_pbtext" field.
func ContentPbtextLT(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldLT(FieldContentPbtext, v))
}

// ContentPbtextLTE applies the LTE predicate on the "content_pbtext" field.
func ContentPbtextLTE(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldLTE(FieldContentPbtext, v))
}

// ContentPbtextContains applies the Contains predicate on the "content_pbtext" field.
func ContentPbtextContains(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldContains(FieldContentPbtext, v))
}

// ContentPbtextHasPrefix applies the HasPrefix predicate on the "content_pbtext" field.
func ContentPbtextHasPrefix(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldHasPrefix(FieldContentPbtext, v))
}

// ContentPbtextHasSuffix applies the HasSuffix predicate on the "content_pbtext" field.
func ContentPbtextHasSuffix(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldHasSuffix(FieldContentPbtext, v))
}

// ContentPbtextEqualFold applies the EqualFold predicate on the "content_pbtext" field.
func ContentPbtextEqualFold(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldEqualFold(FieldContentPbtext, v))
}

// ContentPbtextContainsFold applies the ContainsFold predicate on the "content_pbtext" field.
func ContentPbtextContainsFold(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldContainsFold(FieldContentPbtext, v))
}

// ContentSha1EQ applies the EQ predicate on the "content_sha1" field.
func ContentSha1EQ(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldEQ(FieldContentSha1, v))
}

// ContentSha1NEQ applies the NEQ predicate on the "content_sha1" field.
func ContentSha1NEQ(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldNEQ(FieldContentSha1, v))
}

// ContentSha1In applies the In predicate on the "content_sha1" field.
func ContentSha1In(vs ...string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldIn(FieldContentSha1, vs...))
}

// ContentSha1NotIn applies the NotIn predicate on the "content_sha1" field.
func ContentSha1NotIn(vs ...string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldNotIn(FieldContentSha1, vs...))
}

// ContentSha1GT applies the GT predicate on the "content_sha1" field.
func ContentSha1GT(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldGT(FieldContentSha1, v))
}

// ContentSha1GTE applies the GTE predicate on the "content_sha1" field.
func ContentSha1GTE(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldGTE(FieldContentSha1, v))
}

// ContentSha1LT applies the LT predicate on the "content_sha1" field.
func ContentSha1LT(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldLT(FieldContentSha1, v))
}

// ContentSha1LTE applies the LTE predicate on the "content_sha1" field.
func ContentSha1LTE(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldLTE(FieldContentSha1, v))
}

// ContentSha1Contains applies the Contains predicate on the "content_sha1" field.
func ContentSha1Contains(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldContains(FieldContentSha1, v))
}

// ContentSha1HasPrefix applies the HasPrefix predicate on the "content_sha1" field.
func ContentSha1HasPrefix(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldHasPrefix(FieldContentSha1, v))
}

// ContentSha1HasSuffix applies the HasSuffix predicate on the "content_sha1" field.
func ContentSha1HasSuffix(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldHasSuffix(FieldContentSha1, v))
}

// ContentSha1EqualFold applies the EqualFold predicate on the "content_sha1" field.
func ContentSha1EqualFold(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldEqualFold(FieldContentSha1, v))
}

// ContentSha1ContainsFold applies the ContainsFold predicate on the "content_sha1" field.
func ContentSha1ContainsFold(v string) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldContainsFold(FieldContentSha1, v))
}

// ResourceFileIdsIsNil applies the IsNil predicate on the "resource_file_ids" field.
func ResourceFileIdsIsNil() predicate.CarConfig {
	return predicate.CarConfig(sql.FieldIsNull(FieldResourceFileIds))
}

// ResourceFileIdsNotNil applies the NotNil predicate on the "resource_file_ids" field.
func ResourceFileIdsNotNil() predicate.CarConfig {
	return predicate.CarConfig(sql.FieldNotNull(FieldResourceFileIds))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.CarConfig {
	return predicate.CarConfig(sql.FieldLTE(FieldCreateTime, v))
}

// HasBackgroundScenicArea applies the HasEdge predicate on the "background_scenic_area" edge.
func HasBackgroundScenicArea() predicate.CarConfig {
	return predicate.CarConfig(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BackgroundScenicAreaTable, BackgroundScenicAreaColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBackgroundScenicAreaWith applies the HasEdge predicate on the "background_scenic_area" edge with a given conditions (other predicates).
func HasBackgroundScenicAreaWith(preds ...predicate.ScenicArea) predicate.CarConfig {
	return predicate.CarConfig(func(s *sql.Selector) {
		step := newBackgroundScenicAreaStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCarsModels applies the HasEdge predicate on the "cars_models" edge.
func HasCarsModels() predicate.CarConfig {
	return predicate.CarConfig(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CarsModelsTable, CarsModelsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarsModelsWith applies the HasEdge predicate on the "cars_models" edge with a given conditions (other predicates).
func HasCarsModelsWith(preds ...predicate.CarsModels) predicate.CarConfig {
	return predicate.CarConfig(func(s *sql.Selector) {
		step := newCarsModelsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCar applies the HasEdge predicate on the "car" edge.
func HasCar() predicate.CarConfig {
	return predicate.CarConfig(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CarTable, CarColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarWith applies the HasEdge predicate on the "car" edge with a given conditions (other predicates).
func HasCarWith(preds ...predicate.Car) predicate.CarConfig {
	return predicate.CarConfig(func(s *sql.Selector) {
		step := newCarStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CarConfig) predicate.CarConfig {
	return predicate.CarConfig(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CarConfig) predicate.CarConfig {
	return predicate.CarConfig(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CarConfig) predicate.CarConfig {
	return predicate.CarConfig(sql.NotPredicates(p))
}
