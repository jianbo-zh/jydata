// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jianbo-zh/jydata/database/ent/order"
	"github.com/jianbo-zh/jydata/database/ent/orderrefund"
)

// OrderRefund is the model entity for the OrderRefund schema.
type OrderRefund struct {
	config `json:"-"`
	// ID of the ent.
	// ID
	ID int `json:"id,omitempty"`
	// 退款类型（0-结算退款 1-运管退款 2-申诉退款）
	Type int `json:"type,omitempty"`
	// 退款发起人ID
	InitiatorID int `json:"initiator_id,omitempty"`
	// 景区ID
	ScenicAreaID int `json:"scenic_area_id,omitempty"`
	// 订单ID
	OrderID int `json:"order_id,omitempty"`
	// 订单申诉ID
	OrderAppealID *int `json:"order_appeal_id,omitempty"`
	// 订单编号
	OrderNo string `json:"order_no,omitempty"`
	// 退款单号
	RefundNo string `json:"refund_no,omitempty"`
	// 微信退款ID
	WxRefundID string `json:"wx_refund_id,omitempty"`
	// 退款金额
	RefundAmount int `json:"refund_amount,omitempty"`
	// 退款状态(1-待退款、2-已退款)
	State int `json:"state,omitempty"`
	// 退款备注
	Remark string `json:"remark,omitempty"`
	// 失败原因
	Errmsg string `json:"errmsg,omitempty"`
	// 完成时间
	FinishTime *time.Time `json:"finish_time,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderRefundQuery when eager-loading is set.
	Edges        OrderRefundEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OrderRefundEdges holds the relations/edges for other nodes in the graph.
type OrderRefundEdges struct {
	// Order holds the value of the order edge.
	Order *Order `json:"order,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OrderOrErr returns the Order value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderRefundEdges) OrderOrErr() (*Order, error) {
	if e.Order != nil {
		return e.Order, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: order.Label}
	}
	return nil, &NotLoadedError{edge: "order"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderRefund) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case orderrefund.FieldID, orderrefund.FieldType, orderrefund.FieldInitiatorID, orderrefund.FieldScenicAreaID, orderrefund.FieldOrderID, orderrefund.FieldOrderAppealID, orderrefund.FieldRefundAmount, orderrefund.FieldState:
			values[i] = new(sql.NullInt64)
		case orderrefund.FieldOrderNo, orderrefund.FieldRefundNo, orderrefund.FieldWxRefundID, orderrefund.FieldRemark, orderrefund.FieldErrmsg:
			values[i] = new(sql.NullString)
		case orderrefund.FieldFinishTime, orderrefund.FieldCreateTime, orderrefund.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderRefund fields.
func (or *OrderRefund) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orderrefund.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			or.ID = int(value.Int64)
		case orderrefund.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				or.Type = int(value.Int64)
			}
		case orderrefund.FieldInitiatorID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field initiator_id", values[i])
			} else if value.Valid {
				or.InitiatorID = int(value.Int64)
			}
		case orderrefund.FieldScenicAreaID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field scenic_area_id", values[i])
			} else if value.Valid {
				or.ScenicAreaID = int(value.Int64)
			}
		case orderrefund.FieldOrderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value.Valid {
				or.OrderID = int(value.Int64)
			}
		case orderrefund.FieldOrderAppealID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_appeal_id", values[i])
			} else if value.Valid {
				or.OrderAppealID = new(int)
				*or.OrderAppealID = int(value.Int64)
			}
		case orderrefund.FieldOrderNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field order_no", values[i])
			} else if value.Valid {
				or.OrderNo = value.String
			}
		case orderrefund.FieldRefundNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field refund_no", values[i])
			} else if value.Valid {
				or.RefundNo = value.String
			}
		case orderrefund.FieldWxRefundID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field wx_refund_id", values[i])
			} else if value.Valid {
				or.WxRefundID = value.String
			}
		case orderrefund.FieldRefundAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field refund_amount", values[i])
			} else if value.Valid {
				or.RefundAmount = int(value.Int64)
			}
		case orderrefund.FieldState:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				or.State = int(value.Int64)
			}
		case orderrefund.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				or.Remark = value.String
			}
		case orderrefund.FieldErrmsg:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field errmsg", values[i])
			} else if value.Valid {
				or.Errmsg = value.String
			}
		case orderrefund.FieldFinishTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field finish_time", values[i])
			} else if value.Valid {
				or.FinishTime = new(time.Time)
				*or.FinishTime = value.Time
			}
		case orderrefund.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				or.CreateTime = value.Time
			}
		case orderrefund.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				or.UpdateTime = value.Time
			}
		default:
			or.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OrderRefund.
// This includes values selected through modifiers, order, etc.
func (or *OrderRefund) Value(name string) (ent.Value, error) {
	return or.selectValues.Get(name)
}

// QueryOrder queries the "order" edge of the OrderRefund entity.
func (or *OrderRefund) QueryOrder() *OrderQuery {
	return NewOrderRefundClient(or.config).QueryOrder(or)
}

// Update returns a builder for updating this OrderRefund.
// Note that you need to call OrderRefund.Unwrap() before calling this method if this OrderRefund
// was returned from a transaction, and the transaction was committed or rolled back.
func (or *OrderRefund) Update() *OrderRefundUpdateOne {
	return NewOrderRefundClient(or.config).UpdateOne(or)
}

// Unwrap unwraps the OrderRefund entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (or *OrderRefund) Unwrap() *OrderRefund {
	_tx, ok := or.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrderRefund is not a transactional entity")
	}
	or.config.driver = _tx.drv
	return or
}

// String implements the fmt.Stringer.
func (or *OrderRefund) String() string {
	var builder strings.Builder
	builder.WriteString("OrderRefund(")
	builder.WriteString(fmt.Sprintf("id=%v, ", or.ID))
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", or.Type))
	builder.WriteString(", ")
	builder.WriteString("initiator_id=")
	builder.WriteString(fmt.Sprintf("%v", or.InitiatorID))
	builder.WriteString(", ")
	builder.WriteString("scenic_area_id=")
	builder.WriteString(fmt.Sprintf("%v", or.ScenicAreaID))
	builder.WriteString(", ")
	builder.WriteString("order_id=")
	builder.WriteString(fmt.Sprintf("%v", or.OrderID))
	builder.WriteString(", ")
	if v := or.OrderAppealID; v != nil {
		builder.WriteString("order_appeal_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("order_no=")
	builder.WriteString(or.OrderNo)
	builder.WriteString(", ")
	builder.WriteString("refund_no=")
	builder.WriteString(or.RefundNo)
	builder.WriteString(", ")
	builder.WriteString("wx_refund_id=")
	builder.WriteString(or.WxRefundID)
	builder.WriteString(", ")
	builder.WriteString("refund_amount=")
	builder.WriteString(fmt.Sprintf("%v", or.RefundAmount))
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(fmt.Sprintf("%v", or.State))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(or.Remark)
	builder.WriteString(", ")
	builder.WriteString("errmsg=")
	builder.WriteString(or.Errmsg)
	builder.WriteString(", ")
	if v := or.FinishTime; v != nil {
		builder.WriteString("finish_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(or.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(or.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// OrderRefunds is a parsable slice of OrderRefund.
type OrderRefunds []*OrderRefund
