// Code generated by ent, DO NOT EDIT.

package order

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the order type in the database.
	Label = "order"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldPeriod holds the string denoting the period field in the database.
	FieldPeriod = "period"
	// FieldOrderNo holds the string denoting the order_no field in the database.
	FieldOrderNo = "order_no"
	// FieldWxTxID holds the string denoting the wx_tx_id field in the database.
	FieldWxTxID = "wx_tx_id"
	// FieldScenicAreaID holds the string denoting the scenic_area_id field in the database.
	FieldScenicAreaID = "scenic_area_id"
	// FieldMchID holds the string denoting the mch_id field in the database.
	FieldMchID = "mch_id"
	// FieldScenicAreaName holds the string denoting the scenic_area_name field in the database.
	FieldScenicAreaName = "scenic_area_name"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldOpenID holds the string denoting the open_id field in the database.
	FieldOpenID = "open_id"
	// FieldNickname holds the string denoting the nickname field in the database.
	FieldNickname = "nickname"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldCarID holds the string denoting the car_id field in the database.
	FieldCarID = "car_id"
	// FieldDeviceID holds the string denoting the device_id field in the database.
	FieldDeviceID = "device_id"
	// FieldCarName holds the string denoting the car_name field in the database.
	FieldCarName = "car_name"
	// FieldCarLicensePlate holds the string denoting the car_license_plate field in the database.
	FieldCarLicensePlate = "car_license_plate"
	// FieldModelID holds the string denoting the model_id field in the database.
	FieldModelID = "model_id"
	// FieldModelName holds the string denoting the model_name field in the database.
	FieldModelName = "model_name"
	// FieldCouponID holds the string denoting the coupon_id field in the database.
	FieldCouponID = "coupon_id"
	// FieldCouponName holds the string denoting the coupon_name field in the database.
	FieldCouponName = "coupon_name"
	// FieldUseMileageMeter holds the string denoting the use_mileage_meter field in the database.
	FieldUseMileageMeter = "use_mileage_meter"
	// FieldUseTimeSecond holds the string denoting the use_time_second field in the database.
	FieldUseTimeSecond = "use_time_second"
	// FieldDepositAmount holds the string denoting the deposit_amount field in the database.
	FieldDepositAmount = "deposit_amount"
	// FieldOrderAmount holds the string denoting the order_amount field in the database.
	FieldOrderAmount = "order_amount"
	// FieldRefundedAmount holds the string denoting the refunded_amount field in the database.
	FieldRefundedAmount = "refunded_amount"
	// FieldCouponAmount holds the string denoting the coupon_amount field in the database.
	FieldCouponAmount = "coupon_amount"
	// FieldOrderState holds the string denoting the order_state field in the database.
	FieldOrderState = "order_state"
	// FieldDepositState holds the string denoting the deposit_state field in the database.
	FieldDepositState = "deposit_state"
	// FieldEmergencyState holds the string denoting the emergency_state field in the database.
	FieldEmergencyState = "emergency_state"
	// FieldIsTestOrder holds the string denoting the is_test_order field in the database.
	FieldIsTestOrder = "is_test_order"
	// FieldIsCancel holds the string denoting the is_cancel field in the database.
	FieldIsCancel = "is_cancel"
	// FieldIsProfitSharing holds the string denoting the is_profit_sharing field in the database.
	FieldIsProfitSharing = "is_profit_sharing"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldUserScore holds the string denoting the user_score field in the database.
	FieldUserScore = "user_score"
	// FieldUserComment holds the string denoting the user_comment field in the database.
	FieldUserComment = "user_comment"
	// FieldDepositTime holds the string denoting the deposit_time field in the database.
	FieldDepositTime = "deposit_time"
	// FieldFinishTime holds the string denoting the finish_time field in the database.
	FieldFinishTime = "finish_time"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// EdgeCar holds the string denoting the car edge name in mutations.
	EdgeCar = "car"
	// EdgeBackgroundScenicArea holds the string denoting the background_scenic_area edge name in mutations.
	EdgeBackgroundScenicArea = "background_scenic_area"
	// EdgeBilling holds the string denoting the billing edge name in mutations.
	EdgeBilling = "billing"
	// EdgeRefund holds the string denoting the refund edge name in mutations.
	EdgeRefund = "refund"
	// EdgeSharing holds the string denoting the sharing edge name in mutations.
	EdgeSharing = "sharing"
	// Table holds the table name of the order in the database.
	Table = "orders"
	// CarTable is the table that holds the car relation/edge.
	CarTable = "orders"
	// CarInverseTable is the table name for the Car entity.
	// It exists in this package in order to avoid circular dependency with the "car" package.
	CarInverseTable = "cars"
	// CarColumn is the table column denoting the car relation/edge.
	CarColumn = "car_id"
	// BackgroundScenicAreaTable is the table that holds the background_scenic_area relation/edge.
	BackgroundScenicAreaTable = "orders"
	// BackgroundScenicAreaInverseTable is the table name for the ScenicArea entity.
	// It exists in this package in order to avoid circular dependency with the "scenicarea" package.
	BackgroundScenicAreaInverseTable = "scenic_areas"
	// BackgroundScenicAreaColumn is the table column denoting the background_scenic_area relation/edge.
	BackgroundScenicAreaColumn = "scenic_area_id"
	// BillingTable is the table that holds the billing relation/edge.
	BillingTable = "order_billings"
	// BillingInverseTable is the table name for the OrderBilling entity.
	// It exists in this package in order to avoid circular dependency with the "orderbilling" package.
	BillingInverseTable = "order_billings"
	// BillingColumn is the table column denoting the billing relation/edge.
	BillingColumn = "order_id"
	// RefundTable is the table that holds the refund relation/edge.
	RefundTable = "order_refunds"
	// RefundInverseTable is the table name for the OrderRefund entity.
	// It exists in this package in order to avoid circular dependency with the "orderrefund" package.
	RefundInverseTable = "order_refunds"
	// RefundColumn is the table column denoting the refund relation/edge.
	RefundColumn = "order_id"
	// SharingTable is the table that holds the sharing relation/edge.
	SharingTable = "order_sharings"
	// SharingInverseTable is the table name for the OrderSharing entity.
	// It exists in this package in order to avoid circular dependency with the "ordersharing" package.
	SharingInverseTable = "order_sharings"
	// SharingColumn is the table column denoting the sharing relation/edge.
	SharingColumn = "order_id"
)

// Columns holds all SQL columns for order fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldPeriod,
	FieldOrderNo,
	FieldWxTxID,
	FieldScenicAreaID,
	FieldMchID,
	FieldScenicAreaName,
	FieldUserID,
	FieldOpenID,
	FieldNickname,
	FieldPhone,
	FieldCarID,
	FieldDeviceID,
	FieldCarName,
	FieldCarLicensePlate,
	FieldModelID,
	FieldModelName,
	FieldCouponID,
	FieldCouponName,
	FieldUseMileageMeter,
	FieldUseTimeSecond,
	FieldDepositAmount,
	FieldOrderAmount,
	FieldRefundedAmount,
	FieldCouponAmount,
	FieldOrderState,
	FieldDepositState,
	FieldEmergencyState,
	FieldIsTestOrder,
	FieldIsCancel,
	FieldIsProfitSharing,
	FieldRemark,
	FieldUserScore,
	FieldUserComment,
	FieldDepositTime,
	FieldFinishTime,
	FieldCreateTime,
	FieldUpdateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultType holds the default value on creation for the "type" field.
	DefaultType int
	// DefaultPeriod holds the default value on creation for the "period" field.
	DefaultPeriod int
	// DefaultWxTxID holds the default value on creation for the "wx_tx_id" field.
	DefaultWxTxID string
	// DefaultMchID holds the default value on creation for the "mch_id" field.
	DefaultMchID string
	// DefaultCouponID holds the default value on creation for the "coupon_id" field.
	DefaultCouponID int
	// DefaultCouponName holds the default value on creation for the "coupon_name" field.
	DefaultCouponName string
	// DefaultUseMileageMeter holds the default value on creation for the "use_mileage_meter" field.
	DefaultUseMileageMeter int
	// DefaultUseTimeSecond holds the default value on creation for the "use_time_second" field.
	DefaultUseTimeSecond int
	// DefaultDepositAmount holds the default value on creation for the "deposit_amount" field.
	DefaultDepositAmount int
	// DefaultOrderAmount holds the default value on creation for the "order_amount" field.
	DefaultOrderAmount int
	// DefaultRefundedAmount holds the default value on creation for the "refunded_amount" field.
	DefaultRefundedAmount int
	// DefaultCouponAmount holds the default value on creation for the "coupon_amount" field.
	DefaultCouponAmount int
	// DefaultOrderState holds the default value on creation for the "order_state" field.
	DefaultOrderState int
	// DefaultDepositState holds the default value on creation for the "deposit_state" field.
	DefaultDepositState int
	// DefaultEmergencyState holds the default value on creation for the "emergency_state" field.
	DefaultEmergencyState int
	// DefaultIsTestOrder holds the default value on creation for the "is_test_order" field.
	DefaultIsTestOrder bool
	// DefaultIsCancel holds the default value on creation for the "is_cancel" field.
	DefaultIsCancel bool
	// DefaultIsProfitSharing holds the default value on creation for the "is_profit_sharing" field.
	DefaultIsProfitSharing bool
	// DefaultRemark holds the default value on creation for the "remark" field.
	DefaultRemark string
	// DefaultUserScore holds the default value on creation for the "user_score" field.
	DefaultUserScore int
	// DefaultUserComment holds the default value on creation for the "user_comment" field.
	DefaultUserComment string
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)

// OrderOption defines the ordering options for the Order queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByPeriod orders the results by the period field.
func ByPeriod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPeriod, opts...).ToFunc()
}

// ByOrderNo orders the results by the order_no field.
func ByOrderNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderNo, opts...).ToFunc()
}

// ByWxTxID orders the results by the wx_tx_id field.
func ByWxTxID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWxTxID, opts...).ToFunc()
}

// ByScenicAreaID orders the results by the scenic_area_id field.
func ByScenicAreaID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScenicAreaID, opts...).ToFunc()
}

// ByMchID orders the results by the mch_id field.
func ByMchID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMchID, opts...).ToFunc()
}

// ByScenicAreaName orders the results by the scenic_area_name field.
func ByScenicAreaName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScenicAreaName, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByOpenID orders the results by the open_id field.
func ByOpenID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOpenID, opts...).ToFunc()
}

// ByNickname orders the results by the nickname field.
func ByNickname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNickname, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByCarID orders the results by the car_id field.
func ByCarID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCarID, opts...).ToFunc()
}

// ByDeviceID orders the results by the device_id field.
func ByDeviceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceID, opts...).ToFunc()
}

// ByCarName orders the results by the car_name field.
func ByCarName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCarName, opts...).ToFunc()
}

// ByCarLicensePlate orders the results by the car_license_plate field.
func ByCarLicensePlate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCarLicensePlate, opts...).ToFunc()
}

// ByModelID orders the results by the model_id field.
func ByModelID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModelID, opts...).ToFunc()
}

// ByModelName orders the results by the model_name field.
func ByModelName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModelName, opts...).ToFunc()
}

// ByCouponID orders the results by the coupon_id field.
func ByCouponID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCouponID, opts...).ToFunc()
}

// ByCouponName orders the results by the coupon_name field.
func ByCouponName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCouponName, opts...).ToFunc()
}

// ByUseMileageMeter orders the results by the use_mileage_meter field.
func ByUseMileageMeter(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUseMileageMeter, opts...).ToFunc()
}

// ByUseTimeSecond orders the results by the use_time_second field.
func ByUseTimeSecond(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUseTimeSecond, opts...).ToFunc()
}

// ByDepositAmount orders the results by the deposit_amount field.
func ByDepositAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDepositAmount, opts...).ToFunc()
}

// ByOrderAmount orders the results by the order_amount field.
func ByOrderAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderAmount, opts...).ToFunc()
}

// ByRefundedAmount orders the results by the refunded_amount field.
func ByRefundedAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRefundedAmount, opts...).ToFunc()
}

// ByCouponAmount orders the results by the coupon_amount field.
func ByCouponAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCouponAmount, opts...).ToFunc()
}

// ByOrderState orders the results by the order_state field.
func ByOrderState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderState, opts...).ToFunc()
}

// ByDepositState orders the results by the deposit_state field.
func ByDepositState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDepositState, opts...).ToFunc()
}

// ByEmergencyState orders the results by the emergency_state field.
func ByEmergencyState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmergencyState, opts...).ToFunc()
}

// ByIsTestOrder orders the results by the is_test_order field.
func ByIsTestOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsTestOrder, opts...).ToFunc()
}

// ByIsCancel orders the results by the is_cancel field.
func ByIsCancel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsCancel, opts...).ToFunc()
}

// ByIsProfitSharing orders the results by the is_profit_sharing field.
func ByIsProfitSharing(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsProfitSharing, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByUserScore orders the results by the user_score field.
func ByUserScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserScore, opts...).ToFunc()
}

// ByUserComment orders the results by the user_comment field.
func ByUserComment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserComment, opts...).ToFunc()
}

// ByDepositTime orders the results by the deposit_time field.
func ByDepositTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDepositTime, opts...).ToFunc()
}

// ByFinishTime orders the results by the finish_time field.
func ByFinishTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFinishTime, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByCarField orders the results by car field.
func ByCarField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarStep(), sql.OrderByField(field, opts...))
	}
}

// ByBackgroundScenicAreaField orders the results by background_scenic_area field.
func ByBackgroundScenicAreaField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBackgroundScenicAreaStep(), sql.OrderByField(field, opts...))
	}
}

// ByBillingField orders the results by billing field.
func ByBillingField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBillingStep(), sql.OrderByField(field, opts...))
	}
}

// ByRefundCount orders the results by refund count.
func ByRefundCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRefundStep(), opts...)
	}
}

// ByRefund orders the results by refund terms.
func ByRefund(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRefundStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySharingField orders the results by sharing field.
func BySharingField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSharingStep(), sql.OrderByField(field, opts...))
	}
}
func newCarStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CarTable, CarColumn),
	)
}
func newBackgroundScenicAreaStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BackgroundScenicAreaInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BackgroundScenicAreaTable, BackgroundScenicAreaColumn),
	)
}
func newBillingStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BillingInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, BillingTable, BillingColumn),
	)
}
func newRefundStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RefundInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RefundTable, RefundColumn),
	)
}
func newSharingStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SharingInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, SharingTable, SharingColumn),
	)
}
